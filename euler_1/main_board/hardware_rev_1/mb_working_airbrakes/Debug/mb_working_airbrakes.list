
mb_working_airbrakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a0c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0801a290  0801a290  0002a290  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af20  0801af20  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801af20  0801af20  0002af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af28  0801af28  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af28  0801af28  0002af28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af2c  0801af2c  0002af2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801af30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028da0  200001fc  0801b12c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20028f9c  0801b12c  00038f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043ee7  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000830a  00000000  00000000  00074113  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000028a0  00000000  00000000  0007c420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024f0  00000000  00000000  0007ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000327e9  00000000  00000000  000811b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c90d  00000000  00000000  000b3999  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00105391  00000000  00000000  000e02a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e5637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b278  00000000  00000000  001e56b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a278 	.word	0x0801a278

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801a278 	.word	0x0801a278

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e03c      	b.n	8000fc8 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d102      	bne.n	8000f62 <calculateCRC+0x2a>
      c = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e00e      	b.n	8000f80 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <calculateCRC+0x6c>
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <calculateCRC+0x7e>
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1de      	bne.n	8000f80 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbbd      	blt.n	8000f4e <calculateCRC+0x16>
  }
  return crc;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EnableMotor>:

osStatus_t EnableMotor(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800100a:	2306      	movs	r3, #6
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f957 	bl	80012d0 <WriteCommand>
 8001022:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93b 	bl	80012d0 <WriteCommand>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 8001062:	2341      	movs	r3, #65	; 0x41
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9b1 	bl	80013d8 <ReadCommand>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b37      	cmp	r3, #55	; 0x37
 800107c:	d104      	bne.n	8001088 <EnableMotor+0xa8>
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d101      	bne.n	8001088 <EnableMotor+0xa8>
		status = osOK;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800108a:	4618      	mov	r0, r3
 800108c:	3738      	adds	r7, #56	; 0x38
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b08a      	sub	sp, #40	; 0x28
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f900 	bl	80012d0 <WriteCommand>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	141b      	asrs	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	f107 011c 	add.w	r1, r7, #28
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f8d5 	bl	80012d0 <WriteCommand>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8bd 	bl	80012d0 <WriteCommand>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001170:	230f      	movs	r3, #15
 8001172:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	f107 011c 	add.w	r1, r7, #28
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8a5 	bl	80012d0 <WriteCommand>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001192:	b580      	push	{r7, lr}
 8001194:	b08c      	sub	sp, #48	; 0x30
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011aa:	2381      	movs	r3, #129	; 0x81
 80011ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	141b      	asrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f874 	bl	80012d0 <WriteCommand>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 80011f0:	2383      	movs	r3, #131	; 0x83
 80011f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f851 	bl	80012d0 <WriteCommand>
 800122e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001236:	2384      	movs	r3, #132	; 0x84
 8001238:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	141b      	asrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001262:	f107 0210 	add.w	r2, r7, #16
 8001266:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82e 	bl	80012d0 <WriteCommand>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800128e:	2360      	movs	r3, #96	; 0x60
 8001290:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f897 	bl	80013d8 <ReadCommand>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012b4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012b6:	7d3b      	ldrb	r3, [r7, #20]
 80012b8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012ba:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 80012c0:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

	return status;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80012f4:	2302      	movs	r3, #2
 80012f6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80012f8:	2368      	movs	r3, #104	; 0x68
 80012fa:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80012fc:	2304      	movs	r3, #4
 80012fe:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	f107 021e 	add.w	r2, r7, #30
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6851      	ldr	r1, [r2, #4]
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	8912      	ldrh	r2, [r2, #8]
 8001358:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fde7 	bl	8000f38 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800136e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart7, byte_stream_write, 14, 10);
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	230a      	movs	r3, #10
 8001388:	220e      	movs	r2, #14
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <WriteCommand+0x104>)
 800138c:	f00a f8ea 	bl	800b564 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2214      	movs	r2, #20
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <WriteCommand+0x104>)
 8001398:	f00a f975 	bl	800b686 <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3306      	adds	r3, #6
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <WriteCommand+0xf8>
		status = osOK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200089ec 	.word	0x200089ec

080013d8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80013ec:	2302      	movs	r3, #2
 80013ee:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80013f4:	2302      	movs	r3, #2
 80013f6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80013f8:	2301      	movs	r3, #1
 80013fa:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	8892      	ldrh	r2, [r2, #4]
 8001424:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2106      	movs	r1, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd81 	bl	8000f38 <calculateCRC>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart7, byte_stream_read, 10, 10);
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	230a      	movs	r3, #10
 8001450:	220a      	movs	r2, #10
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <ReadCommand+0xc4>)
 8001454:	f00a f886 	bl	800b564 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart7, rx_buffer, 20, 10);
 8001458:	230a      	movs	r3, #10
 800145a:	2214      	movs	r2, #20
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <ReadCommand+0xc4>)
 8001460:	f00a f911 	bl	800b686 <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3307      	adds	r3, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3306      	adds	r3, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3305      	adds	r3, #5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <ReadCommand+0xb8>
		status = osOK;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001490:	69fb      	ldr	r3, [r7, #28]

}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200089ec 	.word	0x200089ec

080014a0 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <init_coeff+0xac>)
 80014ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014b2:	4611      	mov	r1, r2
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 fc64 	bl	8017d84 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 80014bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <init_coeff+0xb0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	4611      	mov	r1, r2
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	461a      	mov	r2, r3
 80014ca:	f016 fc5b 	bl	8017d84 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 80014ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <init_coeff+0xb4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	4611      	mov	r1, r2
 80014d8:	23f8      	movs	r3, #248	; 0xf8
 80014da:	461a      	mov	r2, r3
 80014dc:	f016 fc52 	bl	8017d84 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <init_coeff+0xb8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	4611      	mov	r1, r2
 80014ea:	23f8      	movs	r3, #248	; 0xf8
 80014ec:	461a      	mov	r2, r3
 80014ee:	f016 fc49 	bl	8017d84 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3340      	adds	r3, #64	; 0x40
 80014f8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fc40 	bl	8017d84 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800150c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4618      	mov	r0, r3
 8001514:	f016 fc36 	bl	8017d84 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001520:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4618      	mov	r0, r3
 8001528:	f016 fc2c 	bl	8017d84 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4618      	mov	r0, r3
 800153c:	f016 fc22 	bl	8017d84 <memcpy>
}
 8001540:	bf00      	nop
 8001542:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0801a290 	.word	0x0801a290
 8001550:	0801a388 	.word	0x0801a388
 8001554:	0801a480 	.word	0x0801a480
 8001558:	0801a578 	.word	0x0801a578
 800155c:	00000000 	.word	0x00000000

08001560 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	ed2d 8b02 	vpush	{d8}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	f040 80cd 	bne.w	8001714 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 800157e:	2b01      	cmp	r3, #1
 8001580:	d004      	beq.n	800158c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b02      	cmp	r3, #2
 8001588:	f040 80c4 	bne.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001596:	a36c      	add	r3, pc, #432	; (adr r3, 8001748 <compute_control_input+0x1e8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff fabe 	bl	8000b1c <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b6 	beq.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ad 	beq.w	8001714 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f913 	bl	80017e6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa15 	bl	80019f0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80015cc:	461d      	mov	r5, r3
 80015ce:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	4631      	mov	r1, r6
 80015e8:	f7ff f826 	bl	8000638 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4698      	mov	r8, r3
 80015f2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffc2 	bl	8000588 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7ff f814 	bl	8000638 <__aeabi_dmul>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	4640      	mov	r0, r8
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fe54 	bl	80002c8 <__aeabi_dsub>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4698      	mov	r8, r3
 8001626:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	a345      	add	r3, pc, #276	; (adr r3, 8001750 <compute_control_input+0x1f0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fe43 	bl	80002c8 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fff5 	bl	8000638 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe35 	bl	80002c8 <__aeabi_dsub>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4625      	mov	r5, r4
 8001664:	461c      	mov	r4, r3
                + control_data->control_input);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fe28 	bl	80002cc <__adddf3>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa88 	bl	8000b98 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f016 ffb0 	bl	8018600 <fminf>
 80016a0:	eef0 7a40 	vmov.f32	s15, s0
 80016a4:	eef0 0a67 	vmov.f32	s1, s15
 80016a8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001740 <compute_control_input+0x1e0>
 80016ac:	f016 ff8d 	bl	80185ca <fmaxf>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f944 	bl	8001948 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	ed93 8a06 	vldr	s16, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001744 <compute_control_input+0x1e4>
 80016d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f016 ff88 	bl	8018600 <fminf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	eeb0 0a48 	vmov.f32	s0, s16
 80016fc:	f016 ff65 	bl	80185ca <fmaxf>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f993 	bl	8001a38 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001712:	e00d      	b.n	8001730 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f81f 	bl	8001758 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f85e 	bl	80017e6 <evaluate_polyfit>
            compute_reference_error(control_data);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f960 	bl	80019f0 <compute_reference_error>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	ecbd 8b02 	vpop	{d8}
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	bf00      	nop
 8001740:	00000000 	.word	0x00000000
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fe19999 	.word	0x3fe19999
 8001750:	e41d1d5e 	.word	0xe41d1d5e
 8001754:	3fdfc917 	.word	0x3fdfc917

08001758 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe3 	bl	8001758 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe75 	bl	80014a0 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00d      	b.n	80017d8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3305      	adds	r3, #5
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	441a      	add	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	ddee      	ble.n	80017bc <control_data_init+0x38>
    }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}

080017e6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 80017e6:	b5b0      	push	{r4, r5, r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00d      	b.n	800181c <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3305      	adds	r3, #5
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	441a      	add	r2, r3
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2b02      	cmp	r3, #2
 8001820:	ddee      	ble.n	8001800 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e07b      	b.n	800192c <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fea5 	bl	8000588 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1c3 031e 	rsb	r3, r3, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe8b 	bl	8000564 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ec43 2b11 	vmov	d1, r2, r3
 8001856:	ec45 4b10 	vmov	d0, r4, r5
 800185a:	f016 ff09 	bl	8018670 <pow>
 800185e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3308      	adds	r3, #8
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fd21 	bl	80002cc <__adddf3>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3327      	adds	r3, #39	; 0x27
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd08 	bl	80002cc <__adddf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3346      	adds	r3, #70	; 0x46
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018de:	f7fe feab 	bl	8000638 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcef 	bl	80002cc <__adddf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3365      	adds	r3, #101	; 0x65
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7fe fcd7 	bl	80002cc <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b1e      	cmp	r3, #30
 8001930:	dd80      	ble.n	8001834 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001936:	f7ff f92f 	bl	8000b98 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	615a      	str	r2, [r3, #20]
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}

08001948 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe17 	bl	8000588 <__aeabi_f2d>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	a11f      	add	r1, pc, #124	; (adr r1, 80019e0 <compute_antiwindup_boundaries+0x98>)
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	f7fe fcae 	bl	80002c8 <__aeabi_dsub>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	4618      	mov	r0, r3
 8001972:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001974:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <compute_antiwindup_boundaries+0xa0>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f907 	bl	8000b98 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001990:	ee00 3a10 	vmov	s0, r3
 8001994:	f016 fe19 	bl	80185ca <fmaxf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdee 	bl	8000588 <__aeabi_f2d>
 80019ac:	a30c      	add	r3, pc, #48	; (adr r3, 80019e0 <compute_antiwindup_boundaries+0x98>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7ff f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	7417f6de 	.word	0x7417f6de
 80019e4:	4095dc93 	.word	0x4095dc93
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f747ae1 	.word	0x3f747ae1

080019f0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80019fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d504      	bpl.n	8001a12 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 8001a10:	e00a      	b.n	8001a28 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a80 <check_apogee_approach_phase+0x48>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f863 	bl	8000b1c <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8c1b      	ldrh	r3, [r3, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8c1b      	ldrh	r3, [r3, #32]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d903      	bls.n	8001a78 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fb99999 	.word	0x3fb99999

08001a88 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001a90:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001ab0 <init_env+0x28>
 8001a94:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f80d 	bl	8001ab8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001a9e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f82c 	bl	8001b00 <update_env>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	47c5e680 	.word	0x47c5e680
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd5d 	bl	8000588 <__aeabi_f2d>
 8001ace:	a30a      	add	r3, pc, #40	; (adr r3, 8001af8 <calibrate_env+0x40>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fbfa 	bl	80002cc <__adddf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f7ff f85a 	bl	8000b98 <__aeabi_d2f>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	66666666 	.word	0x66666666
 8001afc:	40711266 	.word	0x40711266

08001b00 <update_env>:

void update_env(env_t *env, float T) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	a317      	add	r3, pc, #92	; (adr r3, 8001b70 <update_env+0x70>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fbd8 	bl	80002cc <__adddf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7ff f838 	bl	8000b98 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	a30f      	add	r3, pc, #60	; (adr r3, 8001b78 <update_env+0x78>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7ff f825 	bl	8000b98 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001b54:	ee00 3a10 	vmov	s0, r3
 8001b58:	f016 ff54 	bl	8018a04 <powf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	66666666 	.word	0x66666666
 8001b74:	40711266 	.word	0x40711266
 8001b78:	8c1557b7 	.word	0x8c1557b7
 8001b7c:	40791e2f 	.word	0x40791e2f

08001b80 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001b8c:	edd7 7a00 	vldr	s15, [r7]
 8001b90:	eef0 6ae7 	vabs.f32	s13, s15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	ee07 3a90 	vmov	s15, r3
}
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e043      	b.n	8001c54 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcd3 	bl	8000588 <__aeabi_f2d>
 8001be2:	a322      	add	r3, pc, #136	; (adr r3, 8001c6c <pressure2altitudeAGL+0xb4>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4625      	mov	r5, r4
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c0a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001c68 <pressure2altitudeAGL+0xb0>
 8001c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c12:	f016 fef7 	bl	8018a04 <powf>
 8001c16:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	f7fe ffa7 	bl	8000b98 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbb7      	blt.n	8001bcc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	3e42c4dc 	.word	0x3e42c4dc
 8001c6c:	76c8b439 	.word	0x76c8b439
 8001c70:	3f7a9fbe 	.word	0x3f7a9fbe
 8001c74:	00000000 	.word	0x00000000

08001c78 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e047      	b.n	8001d20 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	ed93 8a00 	vldr	s16, [r3]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6b 	bl	8000588 <__aeabi_f2d>
 8001cb2:	a323      	add	r3, pc, #140	; (adr r3, 8001d40 <altitudeAGL2pressure+0xc8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4625      	mov	r5, r4
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fdd9 	bl	800088c <__aeabi_ddiv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <altitudeAGL2pressure+0xc0>)
 8001ce8:	f7fe faee 	bl	80002c8 <__aeabi_dsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f7fe ff50 	bl	8000b98 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001d3c <altitudeAGL2pressure+0xc4>
 8001cfe:	ee00 3a10 	vmov	s0, r3
 8001d02:	f016 fe7f 	bl	8018a04 <powf>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d10:	4413      	add	r3, r2
 8001d12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbb3      	blt.n	8001c90 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	ecbd 8b02 	vpop	{d8}
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	40a83d87 	.word	0x40a83d87
 8001d40:	76c8b439 	.word	0x76c8b439
 8001d44:	3f7a9fbe 	.word	0x3f7a9fbe

08001d48 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fc15 	bl	8000588 <__aeabi_f2d>
 8001d5e:	a323      	add	r3, pc, #140	; (adr r3, 8001dec <altitude_gradient+0xa4>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	461c      	mov	r4, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fc07 	bl	8000588 <__aeabi_f2d>
 8001d7a:	a31e      	add	r3, pc, #120	; (adr r3, 8001df4 <altitude_gradient+0xac>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc5a 	bl	8000638 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fd7e 	bl	800088c <__aeabi_ddiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4625      	mov	r5, r4
 8001d96:	461c      	mov	r4, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001da6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001de8 <altitude_gradient+0xa0>
 8001daa:	eeb0 0a66 	vmov.f32	s0, s13
 8001dae:	f016 fe29 	bl	8018a04 <powf>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fc38 	bl	8000638 <__aeabi_dmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f7fe fee2 	bl	8000b98 <__aeabi_d2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ee07 3a90 	vmov	s15, r3
}
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	bf4f4ec9 	.word	0xbf4f4ec9
 8001dec:	640f3ea7 	.word	0x640f3ea7
 8001df0:	c071f0fd 	.word	0xc071f0fd
 8001df4:	51eb851f 	.word	0x51eb851f
 8001df8:	40239eb8 	.word	0x40239eb8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f200 80a6 	bhi.w	8001f64 <detect_flight_phase+0x164>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <detect_flight_phase+0x20>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001f65 	.word	0x08001f65
 8001e28:	08001e83 	.word	0x08001e83
 8001e2c:	08001ecd 	.word	0x08001ecd
 8001e30:	08001f17 	.word	0x08001f17
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002000 <detect_flight_phase+0x200>
 8001e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dc00      	bgt.n	8001e58 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001e56:	e087      	b.n	8001f68 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dd79      	ble.n	8001f68 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	721a      	strb	r2, [r3, #8]
        break;
 8001e80:	e072      	b.n	8001f68 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002000 <detect_flight_phase+0x200>
 8001e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d400      	bmi.n	8001ea2 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001ea0:	e064      	b.n	8001f6c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	dd56      	ble.n	8001f6c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	721a      	strb	r2, [r3, #8]
        break;
 8001eca:	e04f      	b.n	8001f6c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002000 <detect_flight_phase+0x200>
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d400      	bmi.n	8001eec <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001eea:	e041      	b.n	8001f70 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	dd33      	ble.n	8001f70 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	721a      	strb	r2, [r3, #8]
        break;
 8001f14:	e02c      	b.n	8001f70 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002000 <detect_flight_phase+0x200>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d400      	bmi.n	8001f3a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001f38:	e01c      	b.n	8001f74 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25a      	sxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	dd0e      	ble.n	8001f74 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	721a      	strb	r2, [r3, #8]
        break;
 8001f62:	e007      	b.n	8001f74 <detect_flight_phase+0x174>

        default:
        break;
 8001f64:	bf00      	nop
 8001f66:	e006      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f68:	bf00      	nop
 8001f6a:	e004      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e002      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f74:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002000 <detect_flight_phase+0x200>
 8001f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdf6 	bl	8001b80 <mach_number>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <detect_flight_phase+0x1f0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fdc9 	bl	8000b44 <__aeabi_dcmpge>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001fbe:	e013      	b.n	8001fe8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fadf 	bl	8000588 <__aeabi_f2d>
 8001fca:	a30b      	add	r3, pc, #44	; (adr r3, 8001ff8 <detect_flight_phase+0x1f8>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fdb8 	bl	8000b44 <__aeabi_dcmpge>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	705a      	strb	r2, [r3, #1]
}
 8001fe0:	e002      	b.n	8001fe8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	3ff4cccc 	.word	0x3ff4cccc
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fe99999 	.word	0x3fe99999
 8002000:	447a0000 	.word	0x447a0000

08002004 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800203c:	4b45      	ldr	r3, [pc, #276]	; (8002154 <reset_kf_state+0x120>)
 800203e:	f107 040c 	add.w	r4, r7, #12
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <reset_kf_state+0x124>)
 8002052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <reset_kf_state+0x124>)
 800205e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002062:	ca07      	ldmia	r2, {r0, r1, r2}
 8002064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f107 010c 	add.w	r1, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	4618      	mov	r0, r3
 8002072:	f015 fe87 	bl	8017d84 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3348      	adds	r3, #72	; 0x48
 800207a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800207e:	220c      	movs	r2, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f015 fe7f 	bl	8017d84 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3354      	adds	r3, #84	; 0x54
 800208a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800208e:	220c      	movs	r2, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f015 fe77 	bl	8017d84 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <reset_kf_state+0x128>)
 80020b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020b4:	461d      	mov	r5, r3
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020be:	682b      	ldr	r3, [r5, #0]
 80020c0:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80020c8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80020cc:	220c      	movs	r2, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f015 fe58 	bl	8017d84 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80020da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f015 fe4f 	bl	8017d84 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	33b4      	adds	r3, #180	; 0xb4
 80020ea:	2204      	movs	r2, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f015 fe53 	bl	8017d9a <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	33b8      	adds	r3, #184	; 0xb8
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f015 fe4c 	bl	8017d9a <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002108:	220c      	movs	r2, #12
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f015 fe44 	bl	8017d9a <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002118:	2203      	movs	r2, #3
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f015 fe3c 	bl	8017d9a <memset>
    kf_state->num_z_active = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	2103      	movs	r1, #3
 8002132:	2003      	movs	r0, #3
 8002134:	f000 fd48 	bl	8002bc8 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2101      	movs	r1, #1
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd3f 	bl	8002bc8 <transpose>
}
 800214a:	bf00      	nop
 800214c:	37c0      	adds	r7, #192	; 0xc0
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	0801a670 	.word	0x0801a670
 8002158:	0801a694 	.word	0x0801a694
 800215c:	0801a6a0 	.word	0x0801a6a0

08002160 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002176:	2201      	movs	r2, #1
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	2103      	movs	r1, #3
 8002182:	2003      	movs	r0, #3
 8002184:	f000 ff4a 	bl	800301c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800219a:	2200      	movs	r2, #0
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	460a      	mov	r2, r1
 80021a4:	2101      	movs	r1, #1
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 ff38 	bl	800301c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80021ba:	2101      	movs	r1, #1
 80021bc:	9102      	str	r1, [sp, #8]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe8d 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	33b4      	adds	r3, #180	; 0xb4
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80021de:	2101      	movs	r1, #1
 80021e0:	9102      	str	r1, [sp, #8]
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	2101      	movs	r1, #1
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fe7b 	bl	8002ee8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002202:	2101      	movs	r1, #1
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4603      	mov	r3, r0
 800220c:	2203      	movs	r2, #3
 800220e:	2103      	movs	r1, #3
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fe69 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002226:	2100      	movs	r1, #0
 8002228:	9102      	str	r1, [sp, #8]
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4603      	mov	r3, r0
 8002230:	2203      	movs	r2, #3
 8002232:	2101      	movs	r1, #1
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fe57 	bl	8002ee8 <matmul>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	336c      	adds	r3, #108	; 0x6c
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f015 fda1 	bl	8017d9a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e01e      	b.n	800229c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	336c      	adds	r3, #108	; 0x6c
 800227e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	33b8      	adds	r3, #184	; 0xb8
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	dddd      	ble.n	800225e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3390      	adds	r3, #144	; 0x90
 80022ac:	2103      	movs	r1, #3
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 fc8a 	bl	8002bc8 <transpose>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022d6:	2201      	movs	r2, #1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 fe9a 	bl	800301c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fce3 	bl	8002cc6 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8002312:	2101      	movs	r1, #1
 8002314:	9102      	str	r1, [sp, #8]
 8002316:	9201      	str	r2, [sp, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	2203      	movs	r2, #3
 800231e:	2103      	movs	r1, #3
 8002320:	2003      	movs	r0, #3
 8002322:	f000 fde1 	bl	8002ee8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7011 	add.w	r0, r3, #580	; 0x244
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3390      	adds	r3, #144	; 0x90
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002336:	2101      	movs	r1, #1
 8002338:	9102      	str	r1, [sp, #8]
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	2203      	movs	r2, #3
 8002342:	2103      	movs	r1, #3
 8002344:	2003      	movs	r0, #3
 8002346:	f000 fdcf 	bl	8002ee8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	2103      	movs	r1, #3
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fcda 	bl	8002d1c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f015 fd11 	bl	8017d9a <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002384:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002494 <kf_update+0x1d8>
 8002388:	461a      	mov	r2, r3
 800238a:	2003      	movs	r0, #3
 800238c:	f001 f812 	bl	80033b4 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3390      	adds	r3, #144	; 0x90
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80023a0:	2101      	movs	r1, #1
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	2203      	movs	r2, #3
 80023ac:	2103      	movs	r1, #3
 80023ae:	2003      	movs	r0, #3
 80023b0:	f000 fd9a 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 80023c6:	2101      	movs	r1, #1
 80023c8:	9102      	str	r1, [sp, #8]
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4603      	mov	r3, r0
 80023d0:	2203      	movs	r2, #3
 80023d2:	2103      	movs	r1, #3
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fd87 	bl	8002ee8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023ec:	2201      	movs	r2, #1
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	2103      	movs	r1, #3
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fe0f 	bl	800301c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fc2d 	bl	8002c70 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800241c:	4619      	mov	r1, r3
 800241e:	2003      	movs	r0, #3
 8002420:	f000 fb86 	bl	8002b30 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	336c      	adds	r3, #108	; 0x6c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002434:	2101      	movs	r1, #1
 8002436:	9102      	str	r1, [sp, #8]
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	2203      	movs	r2, #3
 8002440:	2103      	movs	r1, #3
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fd50 	bl	8002ee8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	2103      	movs	r1, #3
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fcce 	bl	8002e02 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002478:	2101      	movs	r1, #1
 800247a:	9102      	str	r1, [sp, #8]
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	2203      	movs	r2, #3
 8002484:	2103      	movs	r1, #3
 8002486:	2003      	movs	r0, #3
 8002488:	f000 fd2e 	bl	8002ee8 <matmul>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	38d1b717 	.word	0x38d1b717

08002498 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80024a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002530 <update_state_est_data+0x98>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002530 <update_state_est_data+0x98>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002530 <update_state_est_data+0x98>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80024f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002530 <update_state_est_data+0x98>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 2a90 	vmov	r2, s15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002530 <update_state_est_data+0x98>
 8002514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	447a0000 	.word	0x447a0000
 8002534:	00000000 	.word	0x00000000

08002538 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b095      	sub	sp, #84	; 0x54
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	e09a      	b.n	8002682 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3308      	adds	r3, #8
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	3308      	adds	r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4299      	cmp	r1, r3
 8002572:	d92b      	bls.n	80025cc <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	3362      	adds	r3, #98	; 0x62
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	4413      	add	r3, r2
 8002596:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3304      	adds	r3, #4
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80025b8:	440b      	add	r3, r1
 80025ba:	3b20      	subs	r3, #32
 80025bc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 80025be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e01d      	b.n	8002608 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	3362      	adds	r3, #98	; 0x62
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f2:	4413      	add	r3, r2
 80025f4:	3b20      	subs	r3, #32
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80025fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	4413      	add	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4299      	cmp	r1, r3
 800262e:	d916      	bls.n	800265e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800264a:	440b      	add	r3, r1
 800264c:	3b30      	subs	r3, #48	; 0x30
 800264e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002650:	f107 0214 	add.w	r2, r7, #20
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	4413      	add	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e00e      	b.n	800267c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002666:	4413      	add	r3, r2
 8002668:	3b30      	subs	r3, #48	; 0x30
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002670:	f107 0214 	add.w	r2, r7, #20
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	3301      	adds	r3, #1
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	2b02      	cmp	r3, #2
 8002686:	f77f af61 	ble.w	800254c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002696:	461a      	mov	r2, r3
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f975 	bl	8002988 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800269e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4619      	mov	r1, r3
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f96d 	bl	8002988 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	4619      	mov	r1, r3
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f965 	bl	8002988 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e049      	b.n	8002778 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002702:	f107 0214 	add.w	r2, r7, #20
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800271e:	4413      	add	r3, r2
 8002720:	3b30      	subs	r3, #48	; 0x30
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	3301      	adds	r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800273e:	4413      	add	r3, r2
 8002740:	3b20      	subs	r3, #32
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d010      	beq.n	8002772 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002758:	4413      	add	r3, r2
 800275a:	3b20      	subs	r3, #32
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	3301      	adds	r3, #1
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	2b02      	cmp	r3, #2
 800277c:	ddb2      	ble.n	80026e4 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	2103      	movs	r1, #3
 8002796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002798:	f7ff fa0e 	bl	8001bb8 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd21      	ble.n	80027e6 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	a313      	add	r3, pc, #76	; (adr r3, 8002818 <process_measurements+0x2e0>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd7b 	bl	80002c8 <__aeabi_dsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	4618      	mov	r0, r3
 80027d8:	4621      	mov	r1, r4
 80027da:	f7fe f9dd 	bl	8000b98 <__aeabi_d2f>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd0f      	ble.n	800280c <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 8002802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002808:	f7ff f97a 	bl	8001b00 <update_env>
    }
} 
 800280c:	bf00      	nop
 800280e:	374c      	adds	r7, #76	; 0x4c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	40239eb8 	.word	0x40239eb8

08002820 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b091      	sub	sp, #68	; 0x44
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b05      	cmp	r3, #5
 8002836:	d823      	bhi.n	8002880 <select_noise_models+0x60>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <select_noise_models+0x20>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859
 8002844:	08002859 	.word	0x08002859
 8002848:	08002863 	.word	0x08002863
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002877 	.word	0x08002877
 8002854:	08002859 	.word	0x08002859
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <select_noise_models+0x148>)
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <select_noise_models+0x14c>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002860:	e00e      	b.n	8002880 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <select_noise_models+0x150>)
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <select_noise_models+0x154>)
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800286a:	e009      	b.n	8002880 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <select_noise_models+0x158>)
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <select_noise_models+0x15c>)
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002874:	e004      	b.n	8002880 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <select_noise_models+0x160>)
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <select_noise_models+0x164>)
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800287e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	e01b      	b.n	80028be <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002888:	f7fd fe7e 	bl	8000588 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002960 <select_noise_models+0x140>
 8002894:	ec44 3b10 	vmov	d0, r3, r4
 8002898:	f015 feea 	bl	8018670 <pow>
 800289c:	ec54 3b10 	vmov	r3, r4, d0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f978 	bl	8000b98 <__aeabi_d2f>
 80028a8:	4601      	mov	r1, r0
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3316      	adds	r3, #22
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	3301      	adds	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dde0      	ble.n	8002886 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80028ca:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 80028cc:	2301      	movs	r3, #1
 80028ce:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80028d0:	f107 0114 	add.w	r1, r7, #20
 80028d4:	f107 0218 	add.w	r2, r7, #24
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	2101      	movs	r1, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f9c8 	bl	8001c78 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa29 	bl	8001d48 <altitude_gradient>
 80028f6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80028fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	eef0 7ae7 	vabs.f32	s15, s15
 800290a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e01a      	b.n	800294a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f7fd fe37 	bl	8000588 <__aeabi_f2d>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002960 <select_noise_models+0x140>
 8002922:	ec44 3b10 	vmov	d0, r3, r4
 8002926:	f015 fea3 	bl	8018670 <pow>
 800292a:	ec54 3b10 	vmov	r3, r4, d0
 800292e:	4618      	mov	r0, r3
 8002930:	4621      	mov	r1, r4
 8002932:	f7fe f931 	bl	8000b98 <__aeabi_d2f>
 8002936:	4601      	mov	r1, r0
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	33b8      	adds	r3, #184	; 0xb8
 8002942:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	3301      	adds	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	dde1      	ble.n	8002914 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	373c      	adds	r7, #60	; 0x3c
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	00000000 	.word	0x00000000
 8002964:	40000000 	.word	0x40000000
 8002968:	3c97e316 	.word	0x3c97e316
 800296c:	3fef3b64 	.word	0x3fef3b64
 8002970:	3fa01965 	.word	0x3fa01965
 8002974:	41500000 	.word	0x41500000
 8002978:	3f1e3737 	.word	0x3f1e3737
 800297c:	40ec28f6 	.word	0x40ec28f6
 8002980:	3ffa41cc 	.word	0x3ffa41cc
 8002984:	40795810 	.word	0x40795810

08002988 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e017      	b.n	80029d4 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbe3      	blt.n	80029a4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd0a      	ble.n	80029f8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e033      	b.n	8002a6c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02a      	beq.n	8002a66 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fdae 	bl	8000588 <__aeabi_f2d>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002b28 <sensor_elimination_by_stdev+0x1a0>
 8002a34:	ec44 3b10 	vmov	d0, r3, r4
 8002a38:	f015 fe1a 	bl	8018670 <pow>
 8002a3c:	ec56 5b10 	vmov	r5, r6, d0
 8002a40:	69b8      	ldr	r0, [r7, #24]
 8002a42:	f7fd fda1 	bl	8000588 <__aeabi_f2d>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4631      	mov	r1, r6
 8002a52:	f7fd fc3b 	bl	80002cc <__adddf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	f7fe f89b 	bl	8000b98 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbc7      	blt.n	8002a04 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd1a      	ble.n	8002ab0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a8c:	ee16 0a90 	vmov	r0, s13
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	ec44 3b10 	vmov	d0, r3, r4
 8002a9c:	f015 ff58 	bl	8018950 <sqrt>
 8002aa0:	ec54 3b10 	vmov	r3, r4, d0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f7fe f876 	bl	8000b98 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e02f      	b.n	8002b16 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d026      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	eef0 7ae7 	vabs.f32	s15, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fd53 	bl	8000588 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	f7fd fd4e 	bl	8000588 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f7fd fbec 	bl	80002cc <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fe f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3301      	adds	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbcb      	blt.n	8002ab6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8002b1e:	bf00      	nop
 8002b20:	372c      	adds	r7, #44	; 0x2c
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40000000 	.word	0x40000000

08002b30 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002b30:	b490      	push	{r4, r7}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	1e43      	subs	r3, r0, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	0154      	lsls	r4, r2, #5
 8002b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b56:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e02b      	b.n	8002bb6 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e021      	b.n	8002ba8 <eye+0x78>
            if (i == j){
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <eye+0x58>
				A[i][j] = 1;
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fb03 f302 	mul.w	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	441a      	add	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fb03 f302 	mul.w	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbd9      	blt.n	8002b64 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbcf      	blt.n	8002b5e <eye+0x2e>
			}
        }
    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc90      	pop	{r4, r7}
 8002bc6:	4770      	bx	lr

08002bc8 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002bc8:	b4b0      	push	{r4, r5, r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	1e43      	subs	r3, r0, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	0154      	lsls	r4, r2, #5
 8002bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	68fd      	ldr	r5, [r7, #12]
 8002bf6:	1e6b      	subs	r3, r5, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0154      	lsls	r4, r2, #5
 8002c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c10:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e022      	b.n	8002c5e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e018      	b.n	8002c50 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fb03 f302 	mul.w	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fb03 f301 	mul.w	r3, r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbe2      	blt.n	8002c1e <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbd8      	blt.n	8002c18 <transpose+0x50>
		}
	}
}
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bcb0      	pop	{r4, r5, r7}
 8002c6e:	4770      	bx	lr

08002c70 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e016      	b.n	8002cb2 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbe4      	blt.n	8002c84 <vecadd+0x14>
	}
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e016      	b.n	8002d08 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbe4      	blt.n	8002cda <vecsub+0x14>
	}
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002d1c:	b4f0      	push	{r4, r5, r6, r7}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	1e43      	subs	r3, r0, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	68bd      	ldr	r5, [r7, #8]
 8002d4a:	1e6b      	subs	r3, r5, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	462b      	mov	r3, r5
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0154      	lsls	r4, r2, #5
 8002d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d64:	014b      	lsls	r3, r1, #5
 8002d66:	68be      	ldr	r6, [r7, #8]
 8002d68:	1e73      	subs	r3, r6, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4633      	mov	r3, r6
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e032      	b.n	8002df0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	e028      	b.n	8002de2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002d90:	4602      	mov	r2, r0
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fb03 f302 	mul.w	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	462a      	mov	r2, r5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	441a      	add	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fb03 f302 	mul.w	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	441a      	add	r2, r3
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	3301      	adds	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbd2      	blt.n	8002d90 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbc8      	blt.n	8002d8a <matadd+0x6e>
        }
    }
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8002e00:	4770      	bx	lr

08002e02 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002e02:	b4f0      	push	{r4, r5, r6, r7}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	1e43      	subs	r3, r0, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0154      	lsls	r4, r2, #5
 8002e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e2c:	014b      	lsls	r3, r1, #5
 8002e2e:	68bd      	ldr	r5, [r7, #8]
 8002e30:	1e6b      	subs	r3, r5, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	462b      	mov	r3, r5
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	68be      	ldr	r6, [r7, #8]
 8002e4e:	1e73      	subs	r3, r6, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	4633      	mov	r3, r6
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0154      	lsls	r4, r2, #5
 8002e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e68:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e032      	b.n	8002ed6 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e028      	b.n	8002ec8 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fb03 f302 	mul.w	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	441a      	add	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fb03 f302 	mul.w	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fb03 f302 	mul.w	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	441a      	add	r2, r3
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbd2      	blt.n	8002e76 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbc8      	blt.n	8002e70 <matsub+0x6e>
        }
    }
}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ee6:	4770      	bx	lr

08002ee8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08d      	sub	sp, #52	; 0x34
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6178      	str	r0, [r7, #20]
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	60fa      	str	r2, [r7, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	693e      	ldr	r6, [r7, #16]
 8002ef8:	1e73      	subs	r3, r6, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	4633      	mov	r3, r6
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	0154      	lsls	r4, r2, #5
 8002f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f34:	014b      	lsls	r3, r1, #5
 8002f36:	68fd      	ldr	r5, [r7, #12]
 8002f38:	1e6b      	subs	r3, r5, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	0154      	lsls	r4, r2, #5
 8002f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f52:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002f54:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f6c:	f014 ff15 	bl	8017d9a <memset>
	}
	for(int i = 0; i < m; i++){
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e04a      	b.n	800300c <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	e040      	b.n	8002ffe <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	e036      	b.n	8002ff0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002f82:	4632      	mov	r2, r6
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fb03 f302 	mul.w	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	441a      	add	r2, r3
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	fb03 f302 	mul.w	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	fb03 f302 	mul.w	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fb03 f302 	mul.w	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fda:	441a      	add	r2, r3
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	3301      	adds	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbc4      	blt.n	8002f82 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbba      	blt.n	8002f7c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbb0      	blt.n	8002f76 <matmul+0x8e>
            }
        }
    }
}
 8003014:	bf00      	nop
 8003016:	3734      	adds	r7, #52	; 0x34
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	68bd      	ldr	r5, [r7, #8]
 800302c:	1e6b      	subs	r3, r5, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	462b      	mov	r3, r5
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003046:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003048:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f014 fe9e 	bl	8017d9a <memset>
	}
	for(int i = 0; i < m; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e02e      	b.n	80030c2 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e024      	b.n	80030b4 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800306a:	462a      	mov	r2, r5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fb03 f302 	mul.w	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	441a      	add	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	4413      	add	r3, r2
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbd6      	blt.n	800306a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbcc      	blt.n	8003064 <matvecprod+0x48>
        }
    }
}
 80030ca:	bf00      	nop
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}

080030d2 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	; 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e01d      	b.n	8003122 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d102      	bne.n	80030fc <lower_triangular_inverse+0x2a>
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e076      	b.n	80031ea <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbdd      	blt.n	80030e6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e052      	b.n	80031e0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e041      	b.n	80031c8 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e01b      	b.n	800318c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	ed97 7a03 	vldr	s14, [r7, #12]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	429a      	cmp	r2, r3
 8003192:	dbdf      	blt.n	8003154 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb1 7a67 	vneg.f32	s14, s15
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	3301      	adds	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbb9      	blt.n	8003144 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dba8      	blt.n	800313a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	372c      	adds	r7, #44	; 0x2c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80031f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031fc:	b08b      	sub	sp, #44	; 0x2c
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	68fe      	ldr	r6, [r7, #12]
 8003208:	1e73      	subs	r3, r6, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4633      	mov	r3, r6
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0154      	lsls	r4, r2, #5
 800321e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003222:	014b      	lsls	r3, r1, #5
 8003224:	68fd      	ldr	r5, [r7, #12]
 8003226:	1e6b      	subs	r3, r5, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	462b      	mov	r3, r5
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	0154      	lsls	r4, r2, #5
 800323c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003240:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f014 fda2 	bl	8017d9a <memset>
    for (int i = 0; i < n; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e09f      	b.n	800339c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e093      	b.n	800338a <cholesky+0x192>
            float s = 0;
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e022      	b.n	80032b4 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800326e:	462a      	mov	r2, r5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fb03 f302 	mul.w	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	441a      	add	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	462a      	mov	r2, r5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fb03 f302 	mul.w	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	441a      	add	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbd8      	blt.n	800326e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d116      	bne.n	80032f2 <cholesky+0xfa>
 80032c4:	4632      	mov	r2, r6
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	fb03 f302 	mul.w	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	441a      	add	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	f015 fcf0 	bl	8018ccc <sqrtf>
 80032ec:	ee10 1a10 	vmov	r1, s0
 80032f0:	e03d      	b.n	800336e <cholesky+0x176>
 80032f2:	462a      	mov	r2, r5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fb03 f302 	mul.w	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	441a      	add	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f93d 	bl	8000588 <__aeabi_f2d>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	4925      	ldr	r1, [pc, #148]	; (80033b0 <cholesky+0x1b8>)
 800331c:	f7fd fab6 	bl	800088c <__aeabi_ddiv>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4698      	mov	r8, r3
 8003326:	46a1      	mov	r9, r4
 8003328:	4632      	mov	r2, r6
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fb03 f302 	mul.w	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	441a      	add	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a08 	vldr	s15, [r7, #32]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ee17 0a90 	vmov	r0, s15
 800334c:	f7fd f91c 	bl	8000588 <__aeabi_f2d>
 8003350:	4603      	mov	r3, r0
 8003352:	460c      	mov	r4, r1
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	4640      	mov	r0, r8
 800335a:	4649      	mov	r1, r9
 800335c:	f7fd f96c 	bl	8000638 <__aeabi_dmul>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	f7fd fc16 	bl	8000b98 <__aeabi_d2f>
 800336c:	4601      	mov	r1, r0
 800336e:	462a      	mov	r2, r5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fb03 f302 	mul.w	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	441a      	add	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f6ff af66 	blt.w	8003262 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f6ff af5b 	blt.w	800325c <cholesky+0x64>
        }
}
 80033a6:	bf00      	nop
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b0:	3ff00000 	.word	0x3ff00000

080033b4 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	b090      	sub	sp, #64	; 0x40
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	ed87 0a00 	vstr	s0, [r7]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0154      	lsls	r4, r2, #5
 80033dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e0:	014b      	lsls	r3, r1, #5
 80033e2:	68fd      	ldr	r5, [r7, #12]
 80033e4:	1e6b      	subs	r3, r5, #1
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	462b      	mov	r3, r5
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033fe:	014b      	lsls	r3, r1, #5
 8003400:	466b      	mov	r3, sp
 8003402:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	68fe      	ldr	r6, [r7, #12]
 8003408:	1e43      	subs	r3, r0, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0154      	lsls	r4, r2, #5
 800341e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003422:	014b      	lsls	r3, r1, #5
 8003424:	4603      	mov	r3, r0
 8003426:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800342a:	1e73      	subs	r3, r6, #1
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	4633      	mov	r3, r6
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	fb03 fe02 	mul.w	lr, r3, r2
 8003440:	fb01 fc04 	mul.w	ip, r1, r4
 8003444:	44f4      	add	ip, lr
 8003446:	fba1 3403 	umull	r3, r4, r1, r3
 800344a:	eb0c 0204 	add.w	r2, ip, r4
 800344e:	4614      	mov	r4, r2
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	0162      	lsls	r2, r4, #5
 800345a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4633      	mov	r3, r6
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	fb03 fe02 	mul.w	lr, r3, r2
 8003472:	fb01 fc04 	mul.w	ip, r1, r4
 8003476:	44f4      	add	ip, lr
 8003478:	fba1 3403 	umull	r3, r4, r1, r3
 800347c:	eb0c 0204 	add.w	r2, ip, r4
 8003480:	4614      	mov	r4, r2
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	0162      	lsls	r2, r4, #5
 800348c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	4603      	mov	r3, r0
 8003494:	4632      	mov	r2, r6
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3303      	adds	r3, #3
 800349e:	3307      	adds	r3, #7
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	ebad 0d03 	sub.w	sp, sp, r3
 80034a8:	466b      	mov	r3, sp
 80034aa:	3303      	adds	r3, #3
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	f014 fc5f 	bl	8017d84 <memcpy>
    for (int i = 0; i < n; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	e022      	b.n	8003512 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 80034cc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d4:	fb01 f103 	mul.w	r1, r1, r3
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 6a00 	vldr	s13, [r7]
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	fb01 f103 	mul.w	r1, r1, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	440b      	add	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	3301      	adds	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	dbd8      	blt.n	80034cc <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	68fe      	ldr	r6, [r7, #12]
 800351e:	466b      	mov	r3, sp
 8003520:	469a      	mov	sl, r3
 8003522:	1e43      	subs	r3, r0, #1
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0154      	lsls	r4, r2, #5
 8003538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353c:	014b      	lsls	r3, r1, #5
 800353e:	4603      	mov	r3, r0
 8003540:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003544:	1e73      	subs	r3, r6, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4633      	mov	r3, r6
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	fb03 fe02 	mul.w	lr, r3, r2
 800355a:	fb01 fc04 	mul.w	ip, r1, r4
 800355e:	44f4      	add	ip, lr
 8003560:	fba1 3403 	umull	r3, r4, r1, r3
 8003564:	eb0c 0204 	add.w	r2, ip, r4
 8003568:	4614      	mov	r4, r2
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	0162      	lsls	r2, r4, #5
 8003574:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4633      	mov	r3, r6
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	fb03 fe02 	mul.w	lr, r3, r2
 800358c:	fb01 fc04 	mul.w	ip, r1, r4
 8003590:	44f4      	add	ip, lr
 8003592:	fba1 3403 	umull	r3, r4, r1, r3
 8003596:	eb0c 0204 	add.w	r2, ip, r4
 800359a:	4614      	mov	r4, r2
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	0162      	lsls	r2, r4, #5
 80035a6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	4603      	mov	r3, r0
 80035ae:	4632      	mov	r2, r6
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3303      	adds	r3, #3
 80035b8:	3307      	adds	r3, #7
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	ebad 0d03 	sub.w	sp, sp, r3
 80035c2:	466b      	mov	r3, sp
 80035c4:	3303      	adds	r3, #3
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fe10 	bl	80031f8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd78 	bl	80030d2 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f014 fbd2 	bl	8017d9a <memset>
    for(int i = 0; i < n; i++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fa:	e04e      	b.n	800369a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	e044      	b.n	800368c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	4293      	cmp	r3, r2
 8003608:	bfb8      	it	lt
 800360a:	4613      	movlt	r3, r2
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e036      	b.n	800367e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003610:	462a      	mov	r2, r5
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	441a      	add	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003630:	fb01 f103 	mul.w	r1, r1, r3
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	440b      	add	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003648:	fb01 f103 	mul.w	r1, r1, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	440b      	add	r3, r1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	462a      	mov	r2, r5
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	fb03 f302 	mul.w	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	441a      	add	r2, r3
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	3301      	adds	r3, #1
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	dbc4      	blt.n	8003610 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbb6      	blt.n	8003602 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3301      	adds	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbac      	blt.n	80035fc <cholesky_inverse+0x248>
 80036a2:	46d5      	mov	sp, sl
 80036a4:	46cd      	mov	sp, r9
            }
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	3740      	adds	r7, #64	; 0x40
 80036aa:	46bd      	mov	sp, r7
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036b0 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	210a      	movs	r1, #10
 80036c2:	4618      	mov	r0, r3
 80036c4:	f010 f842 	bl	801374c <osMutexAcquire>
 80036c8:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <AcquireMutex+0x2a>
		custom_mutex->counter++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
	}

	return status;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f010 f889 	bl	8013808 <osMutexRelease>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex, const void* global_data, const void* local_data, int32_t size){
 8003700:	b580      	push	{r7, lr}
 8003702:	b0a0      	sub	sp, #128	; 0x80
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	2264      	movs	r2, #100	; 0x64
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f014 fb3f 	bl	8017d9a <memset>
	uint32_t counter = custom_mutex->counter;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003728:	2300      	movs	r3, #0
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	e01b      	b.n	8003766 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f014 fb24 	bl	8017d84 <memcpy>
		if(custom_mutex->counter == counter){
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <ReadMutex+0x5a>
			memcpy(local_data, &buffer[0], size);
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f014 fb18 	bl	8017d84 <memcpy>
			status = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003758:	e008      	b.n	800376c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003762:	3301      	adds	r3, #1
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	2b04      	cmp	r3, #4
 800376a:	dde0      	ble.n	800372e <ReadMutex+0x2e>
	}
	return status;
 800376c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800376e:	4618      	mov	r0, r3
 8003770:	3780      	adds	r7, #128	; 0x80
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e07b      	b.n	80038a6 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80038c0 <ReadMutexStateEst+0x148>
 80037d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80038c4 <ReadMutexStateEst+0x14c>
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	429a      	cmp	r2, r3
 8003804:	d149      	bne.n	800389a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	6939      	ldr	r1, [r7, #16]
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4403      	add	r3, r0
 800382c:	3304      	adds	r3, #4
 800382e:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3308      	adds	r3, #8
 8003844:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe9d 	bl	8000588 <__aeabi_f2d>
 800384e:	a31a      	add	r3, pc, #104	; (adr r3, 80038b8 <ReadMutexStateEst+0x140>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	4619      	mov	r1, r3
 800385e:	4622      	mov	r2, r4
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1e5c      	subs	r4, r3, #1
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	f7fd f996 	bl	8000b98 <__aeabi_d2f>
 800386c:	4601      	mov	r1, r0
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1b1b      	subs	r3, r3, r4
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	6a39      	ldr	r1, [r7, #32]
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	333c      	adds	r3, #60	; 0x3c
 8003892:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003898:	e008      	b.n	80038ac <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3301      	adds	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	dd80      	ble.n	80037ae <ReadMutexStateEst+0x36>
	}


	return status;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3734      	adds	r7, #52	; 0x34
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f
 80038bc:	40239eb8 	.word	0x40239eb8
 80038c0:	44800000 	.word	0x44800000
 80038c4:	42c80000 	.word	0x42c80000

080038c8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b0b3      	sub	sp, #204	; 0xcc
 80038cc:	af06      	add	r7, sp, #24
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
 80038d6:	4613      	mov	r3, r2
 80038d8:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	2296      	movs	r2, #150	; 0x96
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f014 fa59 	bl	8017d9a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	7aba      	ldrb	r2, [r7, #10]
 80038ec:	f107 0010 	add.w	r0, r7, #16
 80038f0:	9202      	str	r2, [sp, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <logSensor+0x138>)
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	f014 fb0d 	bl	8017f1c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003902:	7abb      	ldrb	r3, [r7, #10]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <logSensor+0x46>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d01d      	beq.n	8003948 <logSensor+0x80>
 800390c:	e055      	b.n	80039ba <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc79 	bl	8000210 <strlen>
 800391e:	4602      	mov	r2, r0
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	1898      	adds	r0, r3, r2
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <logSensor+0x13c>)
 8003940:	2196      	movs	r1, #150	; 0x96
 8003942:	f014 faeb 	bl	8017f1c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003946:	e04e      	b.n	80039e6 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fc5c 	bl	8000210 <strlen>
 8003958:	4602      	mov	r2, r0
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003968:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003972:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003978:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800397c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800397e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003986:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800398c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003990:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800399a:	461e      	mov	r6, r3
 800399c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	9604      	str	r6, [sp, #16]
 80039a6:	9503      	str	r5, [sp, #12]
 80039a8:	9402      	str	r4, [sp, #8]
 80039aa:	9101      	str	r1, [sp, #4]
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	4663      	mov	r3, ip
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <logSensor+0x140>)
 80039b2:	2196      	movs	r1, #150	; 0x96
 80039b4:	f014 fab2 	bl	8017f1c <sniprintf>
	}
		break;
 80039b8:	e015      	b.n	80039e6 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc26 	bl	8000210 <strlen>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4413      	add	r3, r2
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <logSensor+0x144>)
 80039ce:	461d      	mov	r5, r3
 80039d0:	4614      	mov	r4, r2
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	6028      	str	r0, [r5, #0]
 80039d6:	6069      	str	r1, [r5, #4]
 80039d8:	60aa      	str	r2, [r5, #8]
 80039da:	60eb      	str	r3, [r5, #12]
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	6128      	str	r0, [r5, #16]
 80039e0:	7923      	ldrb	r3, [r4, #4]
 80039e2:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80039e4:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <logSensor+0x148>)
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f107 0110 	add.w	r1, r7, #16
 80039ee:	2300      	movs	r3, #0
 80039f0:	2200      	movs	r2, #0
 80039f2:	f010 f971 	bl	8013cd8 <osMessageQueuePut>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	37b4      	adds	r7, #180	; 0xb4
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a00:	0801a6c4 	.word	0x0801a6c4
 8003a04:	0801a6d4 	.word	0x0801a6d4
 8003a08:	0801a6e4 	.word	0x0801a6e4
 8003a0c:	0801a704 	.word	0x0801a704
 8003a10:	2001ccf8 	.word	0x2001ccf8

08003a14 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ac      	sub	sp, #176	; 0xb0
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	2296      	movs	r2, #150	; 0x96
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f014 f9b5 	bl	8017d9a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 8003a30:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8003a32:	f107 0010 	add.w	r0, r7, #16
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <logRocketState+0x4c>)
 8003a40:	2196      	movs	r1, #150	; 0x96
 8003a42:	f014 fa6b 	bl	8017f1c <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <logRocketState+0x50>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f107 0110 	add.w	r1, r7, #16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2200      	movs	r2, #0
 8003a52:	f010 f941 	bl	8013cd8 <osMessageQueuePut>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	37a8      	adds	r7, #168	; 0xa8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0801a71c 	.word	0x0801a71c
 8003a64:	2001ccf8 	.word	0x2001ccf8

08003a68 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8003a68:	b084      	sub	sp, #16
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b0ac      	sub	sp, #176	; 0xb0
 8003a6e:	af04      	add	r7, sp, #16
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	2296      	movs	r2, #150	; 0x96
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f014 f989 	bl	8017d9a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld;%ld\n", ts, ESTIMATOR_VAR,
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a90:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8003a94:	f107 0008 	add.w	r0, r7, #8
 8003a98:	9103      	str	r1, [sp, #12]
 8003a9a:	9202      	str	r2, [sp, #8]
 8003a9c:	9301      	str	r3, [sp, #4]
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a09      	ldr	r2, [pc, #36]	; (8003acc <logEstimatorVar+0x64>)
 8003aa6:	2196      	movs	r1, #150	; 0x96
 8003aa8:	f014 fa38 	bl	8017f1c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[2]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <logEstimatorVar+0x68>)
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	f107 0108 	add.w	r1, r7, #8
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f010 f90e 	bl	8013cd8 <osMessageQueuePut>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	37a0      	adds	r7, #160	; 0xa0
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac8:	b004      	add	sp, #16
 8003aca:	4770      	bx	lr
 8003acc:	0801a728 	.word	0x0801a728
 8003ad0:	2001ccf8 	.word	0x2001ccf8

08003ad4 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b0ae      	sub	sp, #184	; 0xb8
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	2296      	movs	r2, #150	; 0x96
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f014 f955 	bl	8017d9a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8003af0:	f107 0010 	add.w	r0, r7, #16
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	9303      	str	r3, [sp, #12]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	9302      	str	r3, [sp, #8]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	2304      	movs	r3, #4
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4a08      	ldr	r2, [pc, #32]	; (8003b28 <logControllerOutput+0x54>)
 8003b08:	2196      	movs	r1, #150	; 0x96
 8003b0a:	f014 fa07 	bl	8017f1c <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <logControllerOutput+0x58>)
 8003b10:	6818      	ldr	r0, [r3, #0]
 8003b12:	f107 0110 	add.w	r1, r7, #16
 8003b16:	2300      	movs	r3, #0
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f010 f8dd 	bl	8013cd8 <osMessageQueuePut>
 8003b1e:	4603      	mov	r3, r0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	37a8      	adds	r7, #168	; 0xa8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	0801a73c 	.word	0x0801a73c
 8003b2c:	2001ccf8 	.word	0x2001ccf8

08003b30 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0ae      	sub	sp, #184	; 0xb8
 8003b34:	af04      	add	r7, sp, #16
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003b3c:	f107 0310 	add.w	r3, r7, #16
 8003b40:	2296      	movs	r2, #150	; 0x96
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f014 f928 	bl	8017d9a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 8003b4a:	f107 0010 	add.w	r0, r7, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2305      	movs	r3, #5
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <logMotor+0x50>)
 8003b5e:	2196      	movs	r1, #150	; 0x96
 8003b60:	f014 f9dc 	bl	8017f1c <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b64:	4b07      	ldr	r3, [pc, #28]	; (8003b84 <logMotor+0x54>)
 8003b66:	6818      	ldr	r0, [r3, #0]
 8003b68:	f107 0110 	add.w	r1, r7, #16
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f010 f8b2 	bl	8013cd8 <osMessageQueuePut>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	37a8      	adds	r7, #168	; 0xa8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	0801a750 	.word	0x0801a750
 8003b84:	2001ccf8 	.word	0x2001ccf8

08003b88 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003b88:	b40f      	push	{r0, r1, r2, r3}
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003b90:	2301      	movs	r3, #1
 8003b92:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8003b94:	79fb      	ldrb	r3, [r7, #7]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	b004      	add	sp, #16
 8003ba2:	4770      	bx	lr

08003ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba4:	b590      	push	{r4, r7, lr}
 8003ba6:	b0a5      	sub	sp, #148	; 0x94
 8003ba8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003baa:	f001 ff66 	bl	8005a7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bae:	f000 f98b 	bl	8003ec8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8003bb2:	4b8b      	ldr	r3, [pc, #556]	; (8003de0 <main+0x23c>)
 8003bb4:	4a8b      	ldr	r2, [pc, #556]	; (8003de4 <main+0x240>)
 8003bb6:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003bb8:	4b89      	ldr	r3, [pc, #548]	; (8003de0 <main+0x23c>)
 8003bba:	4a8b      	ldr	r2, [pc, #556]	; (8003de8 <main+0x244>)
 8003bbc:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003bbe:	488b      	ldr	r0, [pc, #556]	; (8003dec <main+0x248>)
 8003bc0:	f7fd ff62 	bl	8001a88 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8003bc4:	488a      	ldr	r0, [pc, #552]	; (8003df0 <main+0x24c>)
 8003bc6:	f7fe fa1d 	bl	8002004 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bca:	f000 fb7d 	bl	80042c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bce:	f000 fb41 	bl	8004254 <MX_DMA_Init>
  MX_SPI3_Init();
 8003bd2:	f000 fa9d 	bl	8004110 <MX_SPI3_Init>
  MX_SPI1_Init();
 8003bd6:	f000 fa2b 	bl	8004030 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8003bda:	f000 fa09 	bl	8003ff0 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8003bde:	f000 fa5f 	bl	80040a0 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003be2:	f00a fd85 	bl	800e6f0 <MX_FATFS_Init>
  MX_UART7_Init();
 8003be6:	f000 fafd 	bl	80041e4 <MX_UART7_Init>
  MX_UART4_Init();
 8003bea:	f000 facb 	bl	8004184 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003bee:	f013 fb35 	bl	801725c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003bf2:	f00f fb3f 	bl	8013274 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8003bf6:	4b7f      	ldr	r3, [pc, #508]	; (8003df4 <main+0x250>)
 8003bf8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8003bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8003c02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00f fd06 	bl	8013618 <osMutexNew>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <main+0x254>)
 8003c10:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003c12:	4b7a      	ldr	r3, [pc, #488]	; (8003dfc <main+0x258>)
 8003c14:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003c18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003c1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c22:	4618      	mov	r0, r3
 8003c24:	f00f fcf8 	bl	8013618 <osMutexNew>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <main+0x25c>)
 8003c2c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003c2e:	4b75      	ldr	r3, [pc, #468]	; (8003e04 <main+0x260>)
 8003c30:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003c34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003c3a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f00f fcea 	bl	8013618 <osMutexNew>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <main+0x264>)
 8003c48:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003c4a:	4b70      	ldr	r3, [pc, #448]	; (8003e0c <main+0x268>)
 8003c4c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003c56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00f fcdc 	bl	8013618 <osMutexNew>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <main+0x26c>)
 8003c64:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8003c66:	4b6b      	ldr	r3, [pc, #428]	; (8003e14 <main+0x270>)
 8003c68:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003c72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c76:	4618      	mov	r0, r3
 8003c78:	f00f fcce 	bl	8013618 <osMutexNew>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <main+0x274>)
 8003c80:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 8003c82:	4b66      	ldr	r3, [pc, #408]	; (8003e1c <main+0x278>)
 8003c84:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c92:	4618      	mov	r0, r3
 8003c94:	f00f fcc0 	bl	8013618 <osMutexNew>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <main+0x27c>)
 8003c9c:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003c9e:	4b61      	ldr	r3, [pc, #388]	; (8003e24 <main+0x280>)
 8003ca0:	f107 0420 	add.w	r4, r7, #32
 8003ca4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003caa:	f107 0320 	add.w	r3, r7, #32
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f00f fcb2 	bl	8013618 <osMutexNew>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <main+0x284>)
 8003cb8:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8003cba:	4b5c      	ldr	r3, [pc, #368]	; (8003e2c <main+0x288>)
 8003cbc:	f107 0410 	add.w	r4, r7, #16
 8003cc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003cc6:	f107 0310 	add.w	r3, r7, #16
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00f fca4 	bl	8013618 <osMutexNew>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <main+0x28c>)
 8003cd4:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8003cd6:	4b57      	ldr	r3, [pc, #348]	; (8003e34 <main+0x290>)
 8003cd8:	463c      	mov	r4, r7
 8003cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00f fc98 	bl	8013618 <osMutexNew>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b53      	ldr	r3, [pc, #332]	; (8003e38 <main+0x294>)
 8003cec:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 8003cee:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <main+0x254>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <main+0x298>)
 8003cf4:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8003cf6:	4b42      	ldr	r3, [pc, #264]	; (8003e00 <main+0x25c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a51      	ldr	r2, [pc, #324]	; (8003e40 <main+0x29c>)
 8003cfc:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8003cfe:	4b42      	ldr	r3, [pc, #264]	; (8003e08 <main+0x264>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a50      	ldr	r2, [pc, #320]	; (8003e44 <main+0x2a0>)
 8003d04:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8003d06:	4b48      	ldr	r3, [pc, #288]	; (8003e28 <main+0x284>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4f      	ldr	r2, [pc, #316]	; (8003e48 <main+0x2a4>)
 8003d0c:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8003d0e:	4b44      	ldr	r3, [pc, #272]	; (8003e20 <main+0x27c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <main+0x2a8>)
 8003d14:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003d16:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <main+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <main+0x2ac>)
 8003d1c:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003d1e:	4b3c      	ldr	r3, [pc, #240]	; (8003e10 <main+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a4c      	ldr	r2, [pc, #304]	; (8003e54 <main+0x2b0>)
 8003d24:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003d26:	4b42      	ldr	r3, [pc, #264]	; (8003e30 <main+0x28c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a4b      	ldr	r2, [pc, #300]	; (8003e58 <main+0x2b4>)
 8003d2c:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8003d2e:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <main+0x294>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a4a      	ldr	r2, [pc, #296]	; (8003e5c <main+0x2b8>)
 8003d34:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <main+0x24c>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <main+0x24c>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003d42:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <main+0x2bc>)
 8003d44:	229b      	movs	r2, #155	; 0x9b
 8003d46:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2196      	movs	r1, #150	; 0x96
 8003d4c:	2080      	movs	r0, #128	; 0x80
 8003d4e:	f00f ff3d 	bl	8013bcc <osMessageQueueNew>
 8003d52:	4602      	mov	r2, r0
 8003d54:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <main+0x2c0>)
 8003d56:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d58:	4a43      	ldr	r2, [pc, #268]	; (8003e68 <main+0x2c4>)
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4843      	ldr	r0, [pc, #268]	; (8003e6c <main+0x2c8>)
 8003d5e:	f00f fb47 	bl	80133f0 <osThreadNew>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <main+0x2cc>)
 8003d66:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003d68:	4a42      	ldr	r2, [pc, #264]	; (8003e74 <main+0x2d0>)
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4842      	ldr	r0, [pc, #264]	; (8003e78 <main+0x2d4>)
 8003d6e:	f00f fb3f 	bl	80133f0 <osThreadNew>
 8003d72:	4602      	mov	r2, r0
 8003d74:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <main+0x2d8>)
 8003d76:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003d78:	4a41      	ldr	r2, [pc, #260]	; (8003e80 <main+0x2dc>)
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4841      	ldr	r0, [pc, #260]	; (8003e84 <main+0x2e0>)
 8003d7e:	f00f fb37 	bl	80133f0 <osThreadNew>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <main+0x2e4>)
 8003d86:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003d88:	4a40      	ldr	r2, [pc, #256]	; (8003e8c <main+0x2e8>)
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4840      	ldr	r0, [pc, #256]	; (8003e90 <main+0x2ec>)
 8003d8e:	f00f fb2f 	bl	80133f0 <osThreadNew>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b3f      	ldr	r3, [pc, #252]	; (8003e94 <main+0x2f0>)
 8003d96:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003d98:	4a3f      	ldr	r2, [pc, #252]	; (8003e98 <main+0x2f4>)
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	483f      	ldr	r0, [pc, #252]	; (8003e9c <main+0x2f8>)
 8003d9e:	f00f fb27 	bl	80133f0 <osThreadNew>
 8003da2:	4602      	mov	r2, r0
 8003da4:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <main+0x2fc>)
 8003da6:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003da8:	4a3e      	ldr	r2, [pc, #248]	; (8003ea4 <main+0x300>)
 8003daa:	2100      	movs	r1, #0
 8003dac:	483e      	ldr	r0, [pc, #248]	; (8003ea8 <main+0x304>)
 8003dae:	f00f fb1f 	bl	80133f0 <osThreadNew>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <main+0x308>)
 8003db6:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8003db8:	4a3d      	ldr	r2, [pc, #244]	; (8003eb0 <main+0x30c>)
 8003dba:	2100      	movs	r1, #0
 8003dbc:	483d      	ldr	r0, [pc, #244]	; (8003eb4 <main+0x310>)
 8003dbe:	f00f fb17 	bl	80133f0 <osThreadNew>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <main+0x314>)
 8003dc6:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003dc8:	4a3c      	ldr	r2, [pc, #240]	; (8003ebc <main+0x318>)
 8003dca:	2100      	movs	r1, #0
 8003dcc:	483c      	ldr	r0, [pc, #240]	; (8003ec0 <main+0x31c>)
 8003dce:	f00f fb0f 	bl	80133f0 <osThreadNew>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <main+0x320>)
 8003dd6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dd8:	f00f faa2 	bl	8013320 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003ddc:	e7fe      	b.n	8003ddc <main+0x238>
 8003dde:	bf00      	nop
 8003de0:	e0042000 	.word	0xe0042000
 8003de4:	07e01bff 	.word	0x07e01bff
 8003de8:	00070003 	.word	0x00070003
 8003dec:	200002ac 	.word	0x200002ac
 8003df0:	200002bc 	.word	0x200002bc
 8003df4:	0801a7ec 	.word	0x0801a7ec
 8003df8:	20010ae8 	.word	0x20010ae8
 8003dfc:	0801a80c 	.word	0x0801a80c
 8003e00:	2001ecfc 	.word	0x2001ecfc
 8003e04:	0801a82c 	.word	0x0801a82c
 8003e08:	20008b5c 	.word	0x20008b5c
 8003e0c:	0801a854 	.word	0x0801a854
 8003e10:	20010ad4 	.word	0x20010ad4
 8003e14:	0801a87c 	.word	0x0801a87c
 8003e18:	20026cf4 	.word	0x20026cf4
 8003e1c:	0801a89c 	.word	0x0801a89c
 8003e20:	20010ae4 	.word	0x20010ae4
 8003e24:	0801a8c4 	.word	0x0801a8c4
 8003e28:	20010ad8 	.word	0x20010ad8
 8003e2c:	0801a8e8 	.word	0x0801a8e8
 8003e30:	20008b58 	.word	0x20008b58
 8003e34:	0801a90c 	.word	0x0801a90c
 8003e38:	20008b60 	.word	0x20008b60
 8003e3c:	20010a6c 	.word	0x20010a6c
 8003e40:	20026d5c 	.word	0x20026d5c
 8003e44:	20010adc 	.word	0x20010adc
 8003e48:	20008b6c 	.word	0x20008b6c
 8003e4c:	20008980 	.word	0x20008980
 8003e50:	20010a5c 	.word	0x20010a5c
 8003e54:	20010aec 	.word	0x20010aec
 8003e58:	20008acc 	.word	0x20008acc
 8003e5c:	20008b64 	.word	0x20008b64
 8003e60:	20014b50 	.word	0x20014b50
 8003e64:	2001ccf8 	.word	0x2001ccf8
 8003e68:	0801ac40 	.word	0x0801ac40
 8003e6c:	080043a5 	.word	0x080043a5
 8003e70:	2000897c 	.word	0x2000897c
 8003e74:	0801ac64 	.word	0x0801ac64
 8003e78:	0800558d 	.word	0x0800558d
 8003e7c:	20010a68 	.word	0x20010a68
 8003e80:	0801ac88 	.word	0x0801ac88
 8003e84:	08004be1 	.word	0x08004be1
 8003e88:	20026d58 	.word	0x20026d58
 8003e8c:	0801acac 	.word	0x0801acac
 8003e90:	08005361 	.word	0x08005361
 8003e94:	20008b74 	.word	0x20008b74
 8003e98:	0801acd0 	.word	0x0801acd0
 8003e9c:	08004fc9 	.word	0x08004fc9
 8003ea0:	20008a6c 	.word	0x20008a6c
 8003ea4:	0801acf4 	.word	0x0801acf4
 8003ea8:	08004e29 	.word	0x08004e29
 8003eac:	20010a64 	.word	0x20010a64
 8003eb0:	0801ad18 	.word	0x0801ad18
 8003eb4:	08004d49 	.word	0x08004d49
 8003eb8:	20010a74 	.word	0x20010a74
 8003ebc:	0801ad3c 	.word	0x0801ad3c
 8003ec0:	0800585d 	.word	0x0800585d
 8003ec4:	2001ac10 	.word	0x2001ac10

08003ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0b4      	sub	sp, #208	; 0xd0
 8003ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ece:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ed2:	2230      	movs	r2, #48	; 0x30
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f013 ff5f 	bl	8017d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003edc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	2284      	movs	r2, #132	; 0x84
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f013 ff50 	bl	8017d9a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	4b3a      	ldr	r3, [pc, #232]	; (8003fe4 <SystemClock_Config+0x11c>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a39      	ldr	r2, [pc, #228]	; (8003fe4 <SystemClock_Config+0x11c>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <SystemClock_Config+0x11c>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f12:	4b35      	ldr	r3, [pc, #212]	; (8003fe8 <SystemClock_Config+0x120>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f1a:	4a33      	ldr	r2, [pc, #204]	; (8003fe8 <SystemClock_Config+0x120>)
 8003f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <SystemClock_Config+0x120>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f50:	23a8      	movs	r3, #168	; 0xa8
 8003f52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f56:	2302      	movs	r3, #2
 8003f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f62:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 fdf8 	bl	8007b5c <HAL_RCC_OscConfig>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f72:	f000 fa33 	bl	80043dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f76:	230f      	movs	r3, #15
 8003f78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f9c:	2105      	movs	r1, #5
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f880 	bl	80080a4 <HAL_RCC_ClockConfig>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003faa:	f000 fa17 	bl	80043dc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <SystemClock_Config+0x124>)
 8003fb0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f004 fa94 	bl	80084f8 <HAL_RCCEx_PeriphCLKConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <SystemClock_Config+0x112>
  {
    Error_Handler();
 8003fd6:	f000 fa01 	bl	80043dc <Error_Handler>
  }
}
 8003fda:	bf00      	nop
 8003fdc:	37d0      	adds	r7, #208	; 0xd0
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40007000 	.word	0x40007000
 8003fec:	00a01200 	.word	0x00a01200

08003ff0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	; (800402c <MX_SDMMC1_SD_Init+0x3c>)
 8003ff8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004000:	4b09      	ldr	r3, [pc, #36]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 8004008:	2200      	movs	r2, #0
 800400a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800400c:	4b06      	ldr	r3, [pc, #24]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 800400e:	2200      	movs	r2, #0
 8004010:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 8004014:	2200      	movs	r2, #0
 8004016:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <MX_SDMMC1_SD_Init+0x38>)
 800401a:	2200      	movs	r2, #0
 800401c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800401e:	bf00      	nop
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20008ad4 	.word	0x20008ad4
 800402c:	40012c00 	.word	0x40012c00

08004030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004034:	4b18      	ldr	r3, [pc, #96]	; (8004098 <MX_SPI1_Init+0x68>)
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <MX_SPI1_Init+0x6c>)
 8004038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800403a:	4b17      	ldr	r3, [pc, #92]	; (8004098 <MX_SPI1_Init+0x68>)
 800403c:	2200      	movs	r2, #0
 800403e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004040:	4b15      	ldr	r3, [pc, #84]	; (8004098 <MX_SPI1_Init+0x68>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <MX_SPI1_Init+0x68>)
 8004048:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800404c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <MX_SPI1_Init+0x68>)
 8004050:	2200      	movs	r2, #0
 8004052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <MX_SPI1_Init+0x68>)
 8004056:	2200      	movs	r2, #0
 8004058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800405a:	4b0f      	ldr	r3, [pc, #60]	; (8004098 <MX_SPI1_Init+0x68>)
 800405c:	2200      	movs	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <MX_SPI1_Init+0x68>)
 8004062:	2200      	movs	r2, #0
 8004064:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004066:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <MX_SPI1_Init+0x68>)
 8004068:	2200      	movs	r2, #0
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <MX_SPI1_Init+0x68>)
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <MX_SPI1_Init+0x68>)
 8004074:	2207      	movs	r2, #7
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <MX_SPI1_Init+0x68>)
 800407a:	2200      	movs	r2, #0
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <MX_SPI1_Init+0x68>)
 8004080:	2200      	movs	r2, #0
 8004082:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004084:	4804      	ldr	r0, [pc, #16]	; (8004098 <MX_SPI1_Init+0x68>)
 8004086:	f006 f8e3 	bl	800a250 <HAL_SPI_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8004090:	f000 f9a4 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2001cc94 	.word	0x2001cc94
 800409c:	40013000 	.word	0x40013000

080040a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a4:	4b18      	ldr	r3, [pc, #96]	; (8004108 <MX_SPI2_Init+0x68>)
 80040a6:	4a19      	ldr	r2, [pc, #100]	; (800410c <MX_SPI2_Init+0x6c>)
 80040a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <MX_SPI2_Init+0x68>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <MX_SPI2_Init+0x68>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <MX_SPI2_Init+0x68>)
 80040b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040be:	4b12      	ldr	r3, [pc, #72]	; (8004108 <MX_SPI2_Init+0x68>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <MX_SPI2_Init+0x68>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <MX_SPI2_Init+0x68>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <MX_SPI2_Init+0x68>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <MX_SPI2_Init+0x68>)
 80040d8:	2200      	movs	r2, #0
 80040da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <MX_SPI2_Init+0x68>)
 80040de:	2200      	movs	r2, #0
 80040e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <MX_SPI2_Init+0x68>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <MX_SPI2_Init+0x68>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <MX_SPI2_Init+0x68>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f4:	4804      	ldr	r0, [pc, #16]	; (8004108 <MX_SPI2_Init+0x68>)
 80040f6:	f006 f8ab 	bl	800a250 <HAL_SPI_Init>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 8004100:	f000 f96c 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004104:	bf00      	nop
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20008988 	.word	0x20008988
 800410c:	40003800 	.word	0x40003800

08004110 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004114:	4b19      	ldr	r3, [pc, #100]	; (800417c <MX_SPI3_Init+0x6c>)
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <MX_SPI3_Init+0x70>)
 8004118:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <MX_SPI3_Init+0x6c>)
 800411c:	2200      	movs	r2, #0
 800411e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <MX_SPI3_Init+0x6c>)
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004126:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <MX_SPI3_Init+0x6c>)
 800412a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800412e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <MX_SPI3_Init+0x6c>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <MX_SPI3_Init+0x6c>)
 8004138:	2200      	movs	r2, #0
 800413a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 800413c:	4b0f      	ldr	r3, [pc, #60]	; (800417c <MX_SPI3_Init+0x6c>)
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <MX_SPI3_Init+0x6c>)
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <MX_SPI3_Init+0x6c>)
 800414a:	2200      	movs	r2, #0
 800414c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800414e:	4b0b      	ldr	r3, [pc, #44]	; (800417c <MX_SPI3_Init+0x6c>)
 8004150:	2200      	movs	r2, #0
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <MX_SPI3_Init+0x6c>)
 8004156:	2207      	movs	r2, #7
 8004158:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800415a:	4b08      	ldr	r3, [pc, #32]	; (800417c <MX_SPI3_Init+0x6c>)
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <MX_SPI3_Init+0x6c>)
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004166:	4805      	ldr	r0, [pc, #20]	; (800417c <MX_SPI3_Init+0x6c>)
 8004168:	f006 f872 	bl	800a250 <HAL_SPI_Init>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004172:	f000 f933 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	200109f8 	.word	0x200109f8
 8004180:	40003c00 	.word	0x40003c00

08004184 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <MX_UART4_Init+0x58>)
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <MX_UART4_Init+0x5c>)
 800418c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <MX_UART4_Init+0x58>)
 8004190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004194:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004196:	4b11      	ldr	r3, [pc, #68]	; (80041dc <MX_UART4_Init+0x58>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800419c:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <MX_UART4_Init+0x58>)
 800419e:	2200      	movs	r2, #0
 80041a0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80041a2:	4b0e      	ldr	r3, [pc, #56]	; (80041dc <MX_UART4_Init+0x58>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041a8:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <MX_UART4_Init+0x58>)
 80041aa:	220c      	movs	r2, #12
 80041ac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <MX_UART4_Init+0x58>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041b4:	4b09      	ldr	r3, [pc, #36]	; (80041dc <MX_UART4_Init+0x58>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041ba:	4b08      	ldr	r3, [pc, #32]	; (80041dc <MX_UART4_Init+0x58>)
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <MX_UART4_Init+0x58>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041c6:	4805      	ldr	r0, [pc, #20]	; (80041dc <MX_UART4_Init+0x58>)
 80041c8:	f007 f97e 	bl	800b4c8 <HAL_UART_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80041d2:	f000 f903 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	2001cc14 	.word	0x2001cc14
 80041e0:	40004c00 	.word	0x40004c00

080041e4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <MX_UART7_Init+0x68>)
 80041ea:	4a19      	ldr	r2, [pc, #100]	; (8004250 <MX_UART7_Init+0x6c>)
 80041ec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <MX_UART7_Init+0x68>)
 80041f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041f4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <MX_UART7_Init+0x68>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80041fc:	4b13      	ldr	r3, [pc, #76]	; (800424c <MX_UART7_Init+0x68>)
 80041fe:	2200      	movs	r2, #0
 8004200:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004202:	4b12      	ldr	r3, [pc, #72]	; (800424c <MX_UART7_Init+0x68>)
 8004204:	2200      	movs	r2, #0
 8004206:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <MX_UART7_Init+0x68>)
 800420a:	220c      	movs	r2, #12
 800420c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800420e:	4b0f      	ldr	r3, [pc, #60]	; (800424c <MX_UART7_Init+0x68>)
 8004210:	2200      	movs	r2, #0
 8004212:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <MX_UART7_Init+0x68>)
 8004216:	2200      	movs	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <MX_UART7_Init+0x68>)
 800421c:	2200      	movs	r2, #0
 800421e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004220:	4b0a      	ldr	r3, [pc, #40]	; (800424c <MX_UART7_Init+0x68>)
 8004222:	2230      	movs	r2, #48	; 0x30
 8004224:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004226:	4b09      	ldr	r3, [pc, #36]	; (800424c <MX_UART7_Init+0x68>)
 8004228:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800422c:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <MX_UART7_Init+0x68>)
 8004230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004236:	4805      	ldr	r0, [pc, #20]	; (800424c <MX_UART7_Init+0x68>)
 8004238:	f007 f946 	bl	800b4c8 <HAL_UART_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_UART7_Init+0x62>
  {
    Error_Handler();
 8004242:	f000 f8cb 	bl	80043dc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004246:	bf00      	nop
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	200089ec 	.word	0x200089ec
 8004250:	40007800 	.word	0x40007800

08004254 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800425a:	4b1a      	ldr	r3, [pc, #104]	; (80042c4 <MX_DMA_Init+0x70>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	4a19      	ldr	r2, [pc, #100]	; (80042c4 <MX_DMA_Init+0x70>)
 8004260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004264:	6313      	str	r3, [r2, #48]	; 0x30
 8004266:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <MX_DMA_Init+0x70>)
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	607b      	str	r3, [r7, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004272:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <MX_DMA_Init+0x70>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004276:	4a13      	ldr	r2, [pc, #76]	; (80042c4 <MX_DMA_Init+0x70>)
 8004278:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800427c:	6313      	str	r3, [r2, #48]	; 0x30
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <MX_DMA_Init+0x70>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800428a:	2200      	movs	r2, #0
 800428c:	2105      	movs	r1, #5
 800428e:	200b      	movs	r0, #11
 8004290:	f001 fcfa 	bl	8005c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004294:	200b      	movs	r0, #11
 8004296:	f001 fd13 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2105      	movs	r1, #5
 800429e:	203b      	movs	r0, #59	; 0x3b
 80042a0:	f001 fcf2 	bl	8005c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80042a4:	203b      	movs	r0, #59	; 0x3b
 80042a6:	f001 fd0b 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2105      	movs	r1, #5
 80042ae:	2045      	movs	r0, #69	; 0x45
 80042b0:	f001 fcea 	bl	8005c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80042b4:	2045      	movs	r0, #69	; 0x45
 80042b6:	f001 fd03 	bl	8005cc0 <HAL_NVIC_EnableIRQ>

}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40023800 	.word	0x40023800

080042c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ce:	f107 031c 	add.w	r3, r7, #28
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	60da      	str	r2, [r3, #12]
 80042dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <MX_GPIO_Init+0xd4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a2e      	ldr	r2, [pc, #184]	; (800439c <MX_GPIO_Init+0xd4>)
 80042e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b2c      	ldr	r3, [pc, #176]	; (800439c <MX_GPIO_Init+0xd4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042f6:	4b29      	ldr	r3, [pc, #164]	; (800439c <MX_GPIO_Init+0xd4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a28      	ldr	r2, [pc, #160]	; (800439c <MX_GPIO_Init+0xd4>)
 80042fc:	f043 0304 	orr.w	r3, r3, #4
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <MX_GPIO_Init+0xd4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <MX_GPIO_Init+0xd4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a22      	ldr	r2, [pc, #136]	; (800439c <MX_GPIO_Init+0xd4>)
 8004314:	f043 0301 	orr.w	r3, r3, #1
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b20      	ldr	r3, [pc, #128]	; (800439c <MX_GPIO_Init+0xd4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004326:	4b1d      	ldr	r3, [pc, #116]	; (800439c <MX_GPIO_Init+0xd4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <MX_GPIO_Init+0xd4>)
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b1a      	ldr	r3, [pc, #104]	; (800439c <MX_GPIO_Init+0xd4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <MX_GPIO_Init+0xd4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a16      	ldr	r2, [pc, #88]	; (800439c <MX_GPIO_Init+0xd4>)
 8004344:	f043 0310 	orr.w	r3, r3, #16
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b14      	ldr	r3, [pc, #80]	; (800439c <MX_GPIO_Init+0xd4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	60bb      	str	r3, [r7, #8]
 8004354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <MX_GPIO_Init+0xd4>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <MX_GPIO_Init+0xd4>)
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	6313      	str	r3, [r2, #48]	; 0x30
 8004362:	4b0e      	ldr	r3, [pc, #56]	; (800439c <MX_GPIO_Init+0xd4>)
 8004364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	607b      	str	r3, [r7, #4]
 800436c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800436e:	2200      	movs	r2, #0
 8004370:	2108      	movs	r1, #8
 8004372:	480b      	ldr	r0, [pc, #44]	; (80043a0 <MX_GPIO_Init+0xd8>)
 8004374:	f002 fa00 	bl	8006778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004378:	2308      	movs	r3, #8
 800437a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437c:	2301      	movs	r3, #1
 800437e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	4619      	mov	r1, r3
 800438e:	4804      	ldr	r0, [pc, #16]	; (80043a0 <MX_GPIO_Init+0xd8>)
 8004390:	f002 f848 	bl	8006424 <HAL_GPIO_Init>

}
 8004394:	bf00      	nop
 8004396:	3730      	adds	r7, #48	; 0x30
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020800 	.word	0x40020800

080043a4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80043ac:	f012 ff56 	bl	801725c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 80043b0:	2001      	movs	r0, #1
 80043b2:	f00f f8c3 	bl	801353c <osDelay>
 80043b6:	e7fb      	b.n	80043b0 <StartDefaultTask+0xc>

080043b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ca:	f001 fb63 	bl	8005a94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000

080043dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <HAL_MspInit+0x4c>)
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <HAL_MspInit+0x4c>)
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6413      	str	r3, [r2, #64]	; 0x40
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <HAL_MspInit+0x4c>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	607b      	str	r3, [r7, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_MspInit+0x4c>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <HAL_MspInit+0x4c>)
 8004410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004414:	6453      	str	r3, [r2, #68]	; 0x44
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_MspInit+0x4c>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800441e:	603b      	str	r3, [r7, #0]
 8004420:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004422:	2200      	movs	r2, #0
 8004424:	210f      	movs	r1, #15
 8004426:	f06f 0001 	mvn.w	r0, #1
 800442a:	f001 fc2d 	bl	8005c88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800

0800443c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004444:	f107 0314 	add.w	r3, r7, #20
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]
 8004452:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a65      	ldr	r2, [pc, #404]	; (80045f0 <HAL_SD_MspInit+0x1b4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	f040 80c3 	bne.w	80045e6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	4a63      	ldr	r2, [pc, #396]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 8004466:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800446a:	6453      	str	r3, [r2, #68]	; 0x44
 800446c:	4b61      	ldr	r3, [pc, #388]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 800446e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004478:	4b5e      	ldr	r3, [pc, #376]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	4a5d      	ldr	r2, [pc, #372]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 800447e:	f043 0304 	orr.w	r3, r3, #4
 8004482:	6313      	str	r3, [r2, #48]	; 0x30
 8004484:	4b5b      	ldr	r3, [pc, #364]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004490:	4b58      	ldr	r3, [pc, #352]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	4a57      	ldr	r2, [pc, #348]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6313      	str	r3, [r2, #48]	; 0x30
 800449c:	4b55      	ldr	r3, [pc, #340]	; (80045f4 <HAL_SD_MspInit+0x1b8>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80044a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80044ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044b6:	2303      	movs	r3, #3
 80044b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044ba:	230c      	movs	r3, #12
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044be:	f107 0314 	add.w	r3, r7, #20
 80044c2:	4619      	mov	r1, r3
 80044c4:	484c      	ldr	r0, [pc, #304]	; (80045f8 <HAL_SD_MspInit+0x1bc>)
 80044c6:	f001 ffad 	bl	8006424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ca:	2304      	movs	r3, #4
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044d6:	2303      	movs	r3, #3
 80044d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044da:	230c      	movs	r3, #12
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	4845      	ldr	r0, [pc, #276]	; (80045fc <HAL_SD_MspInit+0x1c0>)
 80044e6:	f001 ff9d 	bl	8006424 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80044ea:	4b45      	ldr	r3, [pc, #276]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 80044ec:	4a45      	ldr	r2, [pc, #276]	; (8004604 <HAL_SD_MspInit+0x1c8>)
 80044ee:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80044f0:	4b43      	ldr	r3, [pc, #268]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 80044f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044f6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f8:	4b41      	ldr	r3, [pc, #260]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fe:	4b40      	ldr	r3, [pc, #256]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004500:	2200      	movs	r2, #0
 8004502:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004504:	4b3e      	ldr	r3, [pc, #248]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800450a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800450c:	4b3c      	ldr	r3, [pc, #240]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 800450e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004512:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004514:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800451a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800451c:	4b38      	ldr	r3, [pc, #224]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 800451e:	2220      	movs	r2, #32
 8004520:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004524:	2200      	movs	r2, #0
 8004526:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004528:	4b35      	ldr	r3, [pc, #212]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 800452a:	2204      	movs	r2, #4
 800452c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800452e:	4b34      	ldr	r3, [pc, #208]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004530:	2203      	movs	r2, #3
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004536:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800453a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 800453e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004544:	482e      	ldr	r0, [pc, #184]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004546:	f001 fbc9 	bl	8005cdc <HAL_DMA_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8004550:	f7ff ff44 	bl	80043dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2a      	ldr	r2, [pc, #168]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
 800455a:	4a29      	ldr	r2, [pc, #164]	; (8004600 <HAL_SD_MspInit+0x1c4>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004560:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004562:	4a2a      	ldr	r2, [pc, #168]	; (800460c <HAL_SD_MspInit+0x1d0>)
 8004564:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004566:	4b28      	ldr	r3, [pc, #160]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800456c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800456e:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004570:	2240      	movs	r2, #64	; 0x40
 8004572:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004574:	4b24      	ldr	r3, [pc, #144]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004576:	2200      	movs	r2, #0
 8004578:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 800457c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004580:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004582:	4b21      	ldr	r3, [pc, #132]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004584:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004588:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800458a:	4b1f      	ldr	r3, [pc, #124]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 800458c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004590:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 8004594:	2220      	movs	r2, #32
 8004596:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 800459a:	2200      	movs	r2, #0
 800459c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045a0:	2204      	movs	r2, #4
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80045a4:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045a6:	2203      	movs	r2, #3
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80045aa:	4b17      	ldr	r3, [pc, #92]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80045b2:	4b15      	ldr	r3, [pc, #84]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80045ba:	4813      	ldr	r0, [pc, #76]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045bc:	f001 fb8e 	bl	8005cdc <HAL_DMA_Init>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80045c6:	f7ff ff09 	bl	80043dc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80045d0:	4a0d      	ldr	r2, [pc, #52]	; (8004608 <HAL_SD_MspInit+0x1cc>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80045d6:	2200      	movs	r2, #0
 80045d8:	2105      	movs	r1, #5
 80045da:	2031      	movs	r0, #49	; 0x31
 80045dc:	f001 fb54 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045e0:	2031      	movs	r0, #49	; 0x31
 80045e2:	f001 fb6d 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045e6:	bf00      	nop
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40012c00 	.word	0x40012c00
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40020800 	.word	0x40020800
 80045fc:	40020c00 	.word	0x40020c00
 8004600:	20014bb0 	.word	0x20014bb0
 8004604:	40026458 	.word	0x40026458
 8004608:	20026c38 	.word	0x20026c38
 800460c:	400264a0 	.word	0x400264a0

08004610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b08e      	sub	sp, #56	; 0x38
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	605a      	str	r2, [r3, #4]
 8004622:	609a      	str	r2, [r3, #8]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_SPI_MspInit+0x220>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d131      	bne.n	8004696 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004632:	4b80      	ldr	r3, [pc, #512]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	4a7f      	ldr	r2, [pc, #508]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004638:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800463c:	6453      	str	r3, [r2, #68]	; 0x44
 800463e:	4b7d      	ldr	r3, [pc, #500]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <HAL_SPI_MspInit+0x224>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a79      	ldr	r2, [pc, #484]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b77      	ldr	r3, [pc, #476]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	61fb      	str	r3, [r7, #28]
 8004660:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8004662:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004668:	2302      	movs	r3, #2
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800466c:	2300      	movs	r3, #0
 800466e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004670:	2303      	movs	r3, #3
 8004672:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004674:	2305      	movs	r3, #5
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800467c:	4619      	mov	r1, r3
 800467e:	486e      	ldr	r0, [pc, #440]	; (8004838 <HAL_SPI_MspInit+0x228>)
 8004680:	f001 fed0 	bl	8006424 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004684:	2200      	movs	r2, #0
 8004686:	2105      	movs	r1, #5
 8004688:	2023      	movs	r0, #35	; 0x23
 800468a:	f001 fafd 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800468e:	2023      	movs	r0, #35	; 0x23
 8004690:	f001 fb16 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004694:	e0c7      	b.n	8004826 <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI2)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_SPI_MspInit+0x22c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d131      	bne.n	8004704 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046a0:	4b64      	ldr	r3, [pc, #400]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a4:	4a63      	ldr	r2, [pc, #396]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046aa:	6413      	str	r3, [r2, #64]	; 0x40
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b8:	4b5e      	ldr	r3, [pc, #376]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	4a5d      	ldr	r2, [pc, #372]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046be:	f043 0302 	orr.w	r3, r3, #2
 80046c2:	6313      	str	r3, [r2, #48]	; 0x30
 80046c4:	4b5b      	ldr	r3, [pc, #364]	; (8004834 <HAL_SPI_MspInit+0x224>)
 80046c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	2302      	movs	r3, #2
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046da:	2300      	movs	r3, #0
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046de:	2303      	movs	r3, #3
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046e2:	2305      	movs	r3, #5
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ea:	4619      	mov	r1, r3
 80046ec:	4854      	ldr	r0, [pc, #336]	; (8004840 <HAL_SPI_MspInit+0x230>)
 80046ee:	f001 fe99 	bl	8006424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	2105      	movs	r1, #5
 80046f6:	2024      	movs	r0, #36	; 0x24
 80046f8:	f001 fac6 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046fc:	2024      	movs	r0, #36	; 0x24
 80046fe:	f001 fadf 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
}
 8004702:	e090      	b.n	8004826 <HAL_SPI_MspInit+0x216>
  else if(hspi->Instance==SPI3)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a4e      	ldr	r2, [pc, #312]	; (8004844 <HAL_SPI_MspInit+0x234>)
 800470a:	4293      	cmp	r3, r2
 800470c:	f040 808b 	bne.w	8004826 <HAL_SPI_MspInit+0x216>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004710:	4b48      	ldr	r3, [pc, #288]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	4a47      	ldr	r2, [pc, #284]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004716:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800471a:	6413      	str	r3, [r2, #64]	; 0x40
 800471c:	4b45      	ldr	r3, [pc, #276]	; (8004834 <HAL_SPI_MspInit+0x224>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <HAL_SPI_MspInit+0x224>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	4a41      	ldr	r2, [pc, #260]	; (8004834 <HAL_SPI_MspInit+0x224>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6313      	str	r3, [r2, #48]	; 0x30
 8004734:	4b3f      	ldr	r3, [pc, #252]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004740:	4b3c      	ldr	r3, [pc, #240]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <HAL_SPI_MspInit+0x224>)
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	6313      	str	r3, [r2, #48]	; 0x30
 800474c:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_SPI_MspInit+0x224>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004758:	2310      	movs	r3, #16
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004760:	2300      	movs	r3, #0
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004764:	2303      	movs	r3, #3
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004768:	2306      	movs	r3, #6
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800476c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004770:	4619      	mov	r1, r3
 8004772:	4831      	ldr	r0, [pc, #196]	; (8004838 <HAL_SPI_MspInit+0x228>)
 8004774:	f001 fe56 	bl	8006424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004778:	2304      	movs	r3, #4
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477c:	2302      	movs	r3, #2
 800477e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004780:	2300      	movs	r3, #0
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004784:	2303      	movs	r3, #3
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004788:	2307      	movs	r3, #7
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004790:	4619      	mov	r1, r3
 8004792:	482b      	ldr	r0, [pc, #172]	; (8004840 <HAL_SPI_MspInit+0x230>)
 8004794:	f001 fe46 	bl	8006424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004798:	2318      	movs	r3, #24
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479c:	2302      	movs	r3, #2
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a4:	2303      	movs	r3, #3
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80047a8:	2306      	movs	r3, #6
 80047aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047b0:	4619      	mov	r1, r3
 80047b2:	4823      	ldr	r0, [pc, #140]	; (8004840 <HAL_SPI_MspInit+0x230>)
 80047b4:	f001 fe36 	bl	8006424 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80047b8:	4b23      	ldr	r3, [pc, #140]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047ba:	4a24      	ldr	r2, [pc, #144]	; (800484c <HAL_SPI_MspInit+0x23c>)
 80047bc:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047da:	2200      	movs	r2, #0
 80047dc:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047de:	4b1a      	ldr	r3, [pc, #104]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80047e4:	4b18      	ldr	r3, [pc, #96]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ea:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80047ec:	4b16      	ldr	r3, [pc, #88]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80047f2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80047fa:	4813      	ldr	r0, [pc, #76]	; (8004848 <HAL_SPI_MspInit+0x238>)
 80047fc:	f001 fa6e 	bl	8005cdc <HAL_DMA_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_SPI_MspInit+0x1fa>
      Error_Handler();
 8004806:	f7ff fde9 	bl	80043dc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a0e      	ldr	r2, [pc, #56]	; (8004848 <HAL_SPI_MspInit+0x238>)
 800480e:	659a      	str	r2, [r3, #88]	; 0x58
 8004810:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <HAL_SPI_MspInit+0x238>)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2105      	movs	r1, #5
 800481a:	2033      	movs	r0, #51	; 0x33
 800481c:	f001 fa34 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004820:	2033      	movs	r0, #51	; 0x33
 8004822:	f001 fa4d 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
}
 8004826:	bf00      	nop
 8004828:	3738      	adds	r7, #56	; 0x38
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40013000 	.word	0x40013000
 8004834:	40023800 	.word	0x40023800
 8004838:	40020000 	.word	0x40020000
 800483c:	40003800 	.word	0x40003800
 8004840:	40020400 	.word	0x40020400
 8004844:	40003c00 	.word	0x40003c00
 8004848:	20026cf8 	.word	0x20026cf8
 800484c:	40026010 	.word	0x40026010

08004850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	; 0x30
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	605a      	str	r2, [r3, #4]
 8004862:	609a      	str	r2, [r3, #8]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a36      	ldr	r2, [pc, #216]	; (8004948 <HAL_UART_MspInit+0xf8>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d130      	bne.n	80048d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a35      	ldr	r2, [pc, #212]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004878:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b33      	ldr	r3, [pc, #204]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	4b30      	ldr	r3, [pc, #192]	; (800494c <HAL_UART_MspInit+0xfc>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a2f      	ldr	r2, [pc, #188]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004890:	f043 0301 	orr.w	r3, r3, #1
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b2d      	ldr	r3, [pc, #180]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048a2:	2303      	movs	r3, #3
 80048a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a6:	2302      	movs	r3, #2
 80048a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ae:	2303      	movs	r3, #3
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80048b2:	2308      	movs	r3, #8
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048b6:	f107 031c 	add.w	r3, r7, #28
 80048ba:	4619      	mov	r1, r3
 80048bc:	4824      	ldr	r0, [pc, #144]	; (8004950 <HAL_UART_MspInit+0x100>)
 80048be:	f001 fdb1 	bl	8006424 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2105      	movs	r1, #5
 80048c6:	2034      	movs	r0, #52	; 0x34
 80048c8:	f001 f9de 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80048cc:	2034      	movs	r0, #52	; 0x34
 80048ce:	f001 f9f7 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80048d2:	e035      	b.n	8004940 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==UART7)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_UART_MspInit+0x104>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d130      	bne.n	8004940 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_UART7_CLK_ENABLE();
 80048de:	4b1b      	ldr	r3, [pc, #108]	; (800494c <HAL_UART_MspInit+0xfc>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4a1a      	ldr	r2, [pc, #104]	; (800494c <HAL_UART_MspInit+0xfc>)
 80048e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048e8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ea:	4b18      	ldr	r3, [pc, #96]	; (800494c <HAL_UART_MspInit+0xfc>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <HAL_UART_MspInit+0xfc>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a14      	ldr	r2, [pc, #80]	; (800494c <HAL_UART_MspInit+0xfc>)
 80048fc:	f043 0310 	orr.w	r3, r3, #16
 8004900:	6313      	str	r3, [r2, #48]	; 0x30
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_UART_MspInit+0xfc>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800490e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800491c:	2303      	movs	r3, #3
 800491e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004920:	2308      	movs	r3, #8
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004924:	f107 031c 	add.w	r3, r7, #28
 8004928:	4619      	mov	r1, r3
 800492a:	480b      	ldr	r0, [pc, #44]	; (8004958 <HAL_UART_MspInit+0x108>)
 800492c:	f001 fd7a 	bl	8006424 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004930:	2200      	movs	r2, #0
 8004932:	2105      	movs	r1, #5
 8004934:	2052      	movs	r0, #82	; 0x52
 8004936:	f001 f9a7 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800493a:	2052      	movs	r0, #82	; 0x52
 800493c:	f001 f9c0 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
}
 8004940:	bf00      	nop
 8004942:	3730      	adds	r7, #48	; 0x30
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40004c00 	.word	0x40004c00
 800494c:	40023800 	.word	0x40023800
 8004950:	40020000 	.word	0x40020000
 8004954:	40007800 	.word	0x40007800
 8004958:	40021000 	.word	0x40021000

0800495c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08c      	sub	sp, #48	; 0x30
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800496c:	2200      	movs	r2, #0
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	2019      	movs	r0, #25
 8004972:	f001 f989 	bl	8005c88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8004976:	2019      	movs	r0, #25
 8004978:	f001 f9a2 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800497c:	4b1f      	ldr	r3, [pc, #124]	; (80049fc <HAL_InitTick+0xa0>)
 800497e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004980:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_InitTick+0xa0>)
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	6453      	str	r3, [r2, #68]	; 0x44
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <HAL_InitTick+0xa0>)
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004994:	f107 0210 	add.w	r2, r7, #16
 8004998:	f107 0314 	add.w	r3, r7, #20
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f003 fd78 	bl	8008494 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80049a4:	f003 fd62 	bl	800846c <HAL_RCC_GetPCLK2Freq>
 80049a8:	4603      	mov	r3, r0
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80049ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <HAL_InitTick+0xa4>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	0c9b      	lsrs	r3, r3, #18
 80049b8:	3b01      	subs	r3, #1
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80049bc:	4b11      	ldr	r3, [pc, #68]	; (8004a04 <HAL_InitTick+0xa8>)
 80049be:	4a12      	ldr	r2, [pc, #72]	; (8004a08 <HAL_InitTick+0xac>)
 80049c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <HAL_InitTick+0xa8>)
 80049c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049c8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80049ca:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <HAL_InitTick+0xa8>)
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80049d0:	4b0c      	ldr	r3, [pc, #48]	; (8004a04 <HAL_InitTick+0xa8>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <HAL_InitTick+0xa8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80049dc:	4809      	ldr	r0, [pc, #36]	; (8004a04 <HAL_InitTick+0xa8>)
 80049de:	f006 fb0d 	bl	800affc <HAL_TIM_Base_Init>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d104      	bne.n	80049f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80049e8:	4806      	ldr	r0, [pc, #24]	; (8004a04 <HAL_InitTick+0xa8>)
 80049ea:	f006 fb3d 	bl	800b068 <HAL_TIM_Base_Start_IT>
 80049ee:	4603      	mov	r3, r0
 80049f0:	e000      	b.n	80049f4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3730      	adds	r7, #48	; 0x30
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40023800 	.word	0x40023800
 8004a00:	431bde83 	.word	0x431bde83
 8004a04:	20026d64 	.word	0x20026d64
 8004a08:	40010000 	.word	0x40010000

08004a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1e:	e7fe      	b.n	8004a1e <HardFault_Handler+0x4>

08004a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a24:	e7fe      	b.n	8004a24 <MemManage_Handler+0x4>

08004a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2a:	e7fe      	b.n	8004a2a <BusFault_Handler+0x4>

08004a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <UsageFault_Handler+0x4>

08004a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8004a44:	4802      	ldr	r0, [pc, #8]	; (8004a50 <DMA1_Stream0_IRQHandler+0x10>)
 8004a46:	f001 fa79 	bl	8005f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20026cf8 	.word	0x20026cf8

08004a54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a58:	4802      	ldr	r0, [pc, #8]	; (8004a64 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004a5a:	f006 fb2f 	bl	800b0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20026d64 	.word	0x20026d64

08004a68 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <SPI1_IRQHandler+0x10>)
 8004a6e:	f005 ff29 	bl	800a8c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2001cc94 	.word	0x2001cc94

08004a7c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <SPI2_IRQHandler+0x10>)
 8004a82:	f005 ff1f 	bl	800a8c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20008988 	.word	0x20008988

08004a90 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a94:	4802      	ldr	r0, [pc, #8]	; (8004aa0 <SDMMC1_IRQHandler+0x10>)
 8004a96:	f004 fb57 	bl	8009148 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20008ad4 	.word	0x20008ad4

08004aa4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004aa8:	4802      	ldr	r0, [pc, #8]	; (8004ab4 <SPI3_IRQHandler+0x10>)
 8004aaa:	f005 ff0b 	bl	800a8c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	200109f8 	.word	0x200109f8

08004ab8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004abc:	4802      	ldr	r0, [pc, #8]	; (8004ac8 <UART4_IRQHandler+0x10>)
 8004abe:	f006 ff51 	bl	800b964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2001cc14 	.word	0x2001cc14

08004acc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004ad0:	4802      	ldr	r0, [pc, #8]	; (8004adc <DMA2_Stream3_IRQHandler+0x10>)
 8004ad2:	f001 fa33 	bl	8005f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20014bb0 	.word	0x20014bb0

08004ae0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004ae4:	4802      	ldr	r0, [pc, #8]	; (8004af0 <OTG_FS_IRQHandler+0x10>)
 8004ae6:	f001 ffc0 	bl	8006a6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20028b94 	.word	0x20028b94

08004af4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004af8:	4802      	ldr	r0, [pc, #8]	; (8004b04 <DMA2_Stream6_IRQHandler+0x10>)
 8004afa:	f001 fa1f 	bl	8005f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20026c38 	.word	0x20026c38

08004b08 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004b0c:	4802      	ldr	r0, [pc, #8]	; (8004b18 <UART7_IRQHandler+0x10>)
 8004b0e:	f006 ff29 	bl	800b964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	200089ec 	.word	0x200089ec

08004b1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <_sbrk+0x50>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <_sbrk+0x16>
		heap_end = &end;
 8004b2c:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <_sbrk+0x50>)
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <_sbrk+0x54>)
 8004b30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <_sbrk+0x50>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <_sbrk+0x50>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4413      	add	r3, r2
 8004b40:	466a      	mov	r2, sp
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d907      	bls.n	8004b56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b46:	f013 f8e3 	bl	8017d10 <__errno>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004b50:	f04f 33ff 	mov.w	r3, #4294967295
 8004b54:	e006      	b.n	8004b64 <_sbrk+0x48>
	}

	heap_end += incr;
 8004b56:	4b05      	ldr	r3, [pc, #20]	; (8004b6c <_sbrk+0x50>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	4a03      	ldr	r2, [pc, #12]	; (8004b6c <_sbrk+0x50>)
 8004b60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b62:	68fb      	ldr	r3, [r7, #12]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	200003c8 	.word	0x200003c8
 8004b70:	20028fa0 	.word	0x20028fa0

08004b74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b78:	4b15      	ldr	r3, [pc, #84]	; (8004bd0 <SystemInit+0x5c>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <SystemInit+0x5c>)
 8004b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b88:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <SystemInit+0x60>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <SystemInit+0x60>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b94:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <SystemInit+0x60>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <SystemInit+0x60>)
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	490d      	ldr	r1, [pc, #52]	; (8004bd4 <SystemInit+0x60>)
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <SystemInit+0x64>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <SystemInit+0x60>)
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	; (8004bdc <SystemInit+0x68>)
 8004baa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004bac:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <SystemInit+0x60>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <SystemInit+0x60>)
 8004bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <SystemInit+0x60>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bbe:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <SystemInit+0x5c>)
 8004bc0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bc4:	609a      	str	r2, [r3, #8]
#endif
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	e000ed00 	.word	0xe000ed00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	fef6ffff 	.word	0xfef6ffff
 8004bdc:	24003010 	.word	0x24003010

08004be0 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	1d3b      	adds	r3, r7, #4
 8004bea:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8004bec:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8004bf8:	f107 0308 	add.w	r3, r7, #8
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004c02:	461a      	mov	r2, r3
 8004c04:	2100      	movs	r1, #0
 8004c06:	f013 f8c8 	bl	8017d9a <memset>
    control_data_init(&control_data);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fc fdb8 	bl	8001784 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004c14:	f00e fbba 	bl	801338c <osKernelGetTickCount>
 8004c18:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8004c1c:	f00e fbde 	bl	80133dc <osKernelGetTickFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b41      	ldr	r3, [pc, #260]	; (8004d28 <vTaskController+0x148>)
 8004c24:	fba3 2302 	umull	r2, r3, r3, r2
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004c2e:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8004c32:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004c36:	4413      	add	r3, r2
 8004c38:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8004c3c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8004c40:	233c      	movs	r3, #60	; 0x3c
 8004c42:	493a      	ldr	r1, [pc, #232]	; (8004d2c <vTaskController+0x14c>)
 8004c44:	483a      	ldr	r0, [pc, #232]	; (8004d30 <vTaskController+0x150>)
 8004c46:	f7fe fd5b 	bl	8003700 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8004c4a:	4b38      	ldr	r3, [pc, #224]	; (8004d2c <vTaskController+0x14c>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c56:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d34 <vTaskController+0x154>
 8004c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c5e:	f107 0308 	add.w	r3, r7, #8
 8004c62:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8004c66:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <vTaskController+0x14c>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	ee07 3a90 	vmov	s15, r3
 8004c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c72:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004d34 <vTaskController+0x154>
 8004c76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8004c82:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004c86:	233c      	movs	r3, #60	; 0x3c
 8004c88:	492b      	ldr	r1, [pc, #172]	; (8004d38 <vTaskController+0x158>)
 8004c8a:	482c      	ldr	r0, [pc, #176]	; (8004d3c <vTaskController+0x15c>)
 8004c8c:	f7fe fd38 	bl	8003700 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8004c90:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4611      	mov	r1, r2
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fc fc60 	bl	8001560 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8004ca0:	4827      	ldr	r0, [pc, #156]	; (8004d40 <vTaskController+0x160>)
 8004ca2:	f7fe fd05 	bl	80036b0 <AcquireMutex>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d110      	bne.n	8004cce <vTaskController+0xee>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8004cac:	f107 0308 	add.w	r3, r7, #8
 8004cb0:	edd3 7a00 	vldr	s15, [r3]
 8004cb4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d34 <vTaskController+0x154>
 8004cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cc0:	ee17 2a90 	vmov	r2, s15
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <vTaskController+0x164>)
 8004cc6:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8004cc8:	481d      	ldr	r0, [pc, #116]	; (8004d40 <vTaskController+0x160>)
 8004cca:	f7fe fd0b 	bl	80036e4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8004cce:	f00e fb5d 	bl	801338c <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8004cd2:	f107 0308 	add.w	r3, r7, #8
 8004cd6:	edd3 7a00 	vldr	s15, [r3]
 8004cda:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004d34 <vTaskController+0x154>
 8004cde:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004ce2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004d34 <vTaskController+0x154>
 8004cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004cf6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d02:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004d34 <vTaskController+0x154>
 8004d06:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d0e:	ee17 3a90 	vmov	r3, s15
 8004d12:	ee16 2a10 	vmov	r2, s12
 8004d16:	ee16 1a90 	vmov	r1, s13
 8004d1a:	f7fe fedb 	bl	8003ad4 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8004d1e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004d22:	f00e fc39 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 8004d26:	e782      	b.n	8004c2e <vTaskController+0x4e>
 8004d28:	51eb851f 	.word	0x51eb851f
 8004d2c:	2000026c 	.word	0x2000026c
 8004d30:	20010aec 	.word	0x20010aec
 8004d34:	447a0000 	.word	0x447a0000
 8004d38:	200002bc 	.word	0x200002bc
 8004d3c:	20008980 	.word	0x20008980
 8004d40:	20010a5c 	.word	0x20010a5c
 8004d44:	200002a8 	.word	0x200002a8

08004d48 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b09f      	sub	sp, #124	; 0x7c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	605a      	str	r2, [r3, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004d5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fd f94f 	bl	8002004 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8004d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d6a:	223c      	movs	r2, #60	; 0x3c
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f013 f813 	bl	8017d9a <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fc fe85 	bl	8001a88 <init_env>
	init_env(&environment);
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fc fe80 	bl	8001a88 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004d88:	f00e fb00 	bl	801338c <osKernelGetTickCount>
 8004d8c:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004d8e:	f00e fb25 	bl	80133dc <osKernelGetTickFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <vTaskFSM+0xc4>)
 8004d96:	fba3 2302 	umull	r2, r3, r3, r2
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004d9e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da2:	4413      	add	r3, r2
 8004da4:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8004da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004daa:	233c      	movs	r3, #60	; 0x3c
 8004dac:	4918      	ldr	r1, [pc, #96]	; (8004e10 <vTaskFSM+0xc8>)
 8004dae:	4819      	ldr	r0, [pc, #100]	; (8004e14 <vTaskFSM+0xcc>)
 8004db0:	f7fe fca6 	bl	8003700 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8004db4:	f107 0218 	add.w	r2, r7, #24
 8004db8:	2310      	movs	r3, #16
 8004dba:	4917      	ldr	r1, [pc, #92]	; (8004e18 <vTaskFSM+0xd0>)
 8004dbc:	4817      	ldr	r0, [pc, #92]	; (8004e1c <vTaskFSM+0xd4>)
 8004dbe:	f7fe fc9f 	bl	8003700 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8004dc2:	f107 0218 	add.w	r2, r7, #24
 8004dc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004dca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd f816 	bl	8001e00 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004dd4:	4812      	ldr	r0, [pc, #72]	; (8004e20 <vTaskFSM+0xd8>)
 8004dd6:	f7fe fc6b 	bl	80036b0 <AcquireMutex>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <vTaskFSM+0xae>
			global_flight_phase_detection = flight_phase_detection;
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <vTaskFSM+0xdc>)
 8004de2:	461c      	mov	r4, r3
 8004de4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004de8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004dec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8004df0:	480b      	ldr	r0, [pc, #44]	; (8004e20 <vTaskFSM+0xd8>)
 8004df2:	f7fe fc77 	bl	80036e4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8004df6:	f00e fac9 	bl	801338c <osKernelGetTickCount>
 8004dfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e00:	f7fe fe08 	bl	8003a14 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8004e04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004e06:	f00e fbc7 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 8004e0a:	e7c8      	b.n	8004d9e <vTaskFSM+0x56>
 8004e0c:	51eb851f 	.word	0x51eb851f
 8004e10:	2000026c 	.word	0x2000026c
 8004e14:	20010aec 	.word	0x20010aec
 8004e18:	200002ac 	.word	0x200002ac
 8004e1c:	20008b6c 	.word	0x20008b6c
 8004e20:	20008980 	.word	0x20008980
 8004e24:	200002bc 	.word	0x200002bc

08004e28 <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes();


void vTaskMotorCont(void *argument) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b090      	sub	sp, #64	; 0x40
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 8004e34:	239b      	movs	r3, #155	; 0x9b
 8004e36:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004e38:	f107 0310 	add.w	r3, r7, #16
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 8004e44:	2301      	movs	r3, #1
 8004e46:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8004e48:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004e4c:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 2000;
 8004e54:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8004e5a:	4b49      	ldr	r3, [pc, #292]	; (8004f80 <vTaskMotorCont+0x158>)
 8004e5c:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8004e5e:	4b48      	ldr	r3, [pc, #288]	; (8004f80 <vTaskMotorCont+0x158>)
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8004e66:	2300      	movs	r3, #0
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t measured_motor_position = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 8004e6e:	e003      	b.n	8004e78 <vTaskMotorCont+0x50>
		osDelay(1000);
 8004e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e74:	f00e fb62 	bl	801353c <osDelay>
	while(EnableMotor() != osOK){
 8004e78:	f7fc f8b2 	bl	8000fe0 <EnableMotor>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f6      	bne.n	8004e70 <vTaskMotorCont+0x48>
	};

	while(SetPositionMode(position_mode) != osOK){
 8004e82:	e003      	b.n	8004e8c <vTaskMotorCont+0x64>
		osDelay(1000);
 8004e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e88:	f00e fb58 	bl	801353c <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8004e8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fc f8fe 	bl	8001092 <SetPositionMode>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1f3      	bne.n	8004e84 <vTaskMotorCont+0x5c>
	};

	if (position_mode == 0x01) {
 8004e9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d105      	bne.n	8004eb0 <vTaskMotorCont+0x88>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8004ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004eaa:	f7fc f972 	bl	8001192 <ConfigurePPM>
 8004eae:	6378      	str	r0, [r7, #52]	; 0x34
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004eb0:	f00e fa6c 	bl	801338c <osKernelGetTickCount>
 8004eb4:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004eb6:	f00e fa91 	bl	80133dc <osKernelGetTickFreq>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <vTaskMotorCont+0x15c>)
 8004ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 8004ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	4413      	add	r3, r2
 8004ecc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8004ece:	f107 0308 	add.w	r3, r7, #8
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fc f9d4 	bl	8001280 <GetPosition>
 8004ed8:	6378      	str	r0, [r7, #52]	; 0x34

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004eda:	f107 021f 	add.w	r2, r7, #31
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4929      	ldr	r1, [pc, #164]	; (8004f88 <vTaskMotorCont+0x160>)
 8004ee2:	482a      	ldr	r0, [pc, #168]	; (8004f8c <vTaskMotorCont+0x164>)
 8004ee4:	f7fe fc0c 	bl	8003700 <ReadMutex>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8004ee8:	f107 0210 	add.w	r2, r7, #16
 8004eec:	230c      	movs	r3, #12
 8004eee:	4928      	ldr	r1, [pc, #160]	; (8004f90 <vTaskMotorCont+0x168>)
 8004ef0:	4828      	ldr	r0, [pc, #160]	; (8004f94 <vTaskMotorCont+0x16c>)
 8004ef2:	f7fe fc05 	bl	8003700 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8004ef6:	f107 020c 	add.w	r2, r7, #12
 8004efa:	2304      	movs	r3, #4
 8004efc:	4926      	ldr	r1, [pc, #152]	; (8004f98 <vTaskMotorCont+0x170>)
 8004efe:	4827      	ldr	r0, [pc, #156]	; (8004f9c <vTaskMotorCont+0x174>)
 8004f00:	f7fe fbfe 	bl	8003700 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004fa0 <vTaskMotorCont+0x178>
 8004f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f16:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004fa4 <vTaskMotorCont+0x17c>
 8004f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f22:	ee17 3a90 	vmov	r3, s15
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Check Bounds */
		if(desired_motor_position > -2){
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	db02      	blt.n	8004f36 <vTaskMotorCont+0x10e>
			desired_motor_position = -2;
 8004f30:	f06f 0301 	mvn.w	r3, #1
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if(desired_motor_position < -135){
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f113 0f87 	cmn.w	r3, #135	; 0x87
 8004f3c:	da02      	bge.n	8004f44 <vTaskMotorCont+0x11c>
			desired_motor_position = -135;
 8004f3e:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8004f44:	7c3b      	ldrb	r3, [r7, #16]
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d103      	bne.n	8004f52 <vTaskMotorCont+0x12a>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 8004f4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004f4c:	f7fc f8c6 	bl	80010dc <MoveToPositionPPM>
 8004f50:	e002      	b.n	8004f58 <vTaskMotorCont+0x130>
		}
		else{
			MoveToPositionPPM(0);
 8004f52:	2000      	movs	r0, #0
 8004f54:	f7fc f8c2 	bl	80010dc <MoveToPositionPPM>
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 8004f58:	7c3b      	ldrb	r3, [r7, #16]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d104      	bne.n	8004f68 <vTaskMotorCont+0x140>
 8004f5e:	7ffb      	ldrb	r3, [r7, #31]
 8004f60:	2b9d      	cmp	r3, #157	; 0x9d
 8004f62:	d101      	bne.n	8004f68 <vTaskMotorCont+0x140>
			testairbrakes();
 8004f64:	f000 f820 	bl	8004fa8 <testairbrakes>
		}



		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8004f68:	f00e fa10 	bl	801338c <osKernelGetTickCount>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f72:	f7fe fddd 	bl	8003b30 <logMotor>


		osDelayUntil(tick_count);
 8004f76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004f78:	f00e fb0e 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 8004f7c:	e7a3      	b.n	8004ec6 <vTaskMotorCont+0x9e>
 8004f7e:	bf00      	nop
 8004f80:	000186a0 	.word	0x000186a0
 8004f84:	cccccccd 	.word	0xcccccccd
 8004f88:	20014b50 	.word	0x20014b50
 8004f8c:	20008b64 	.word	0x20008b64
 8004f90:	200002bc 	.word	0x200002bc
 8004f94:	20008980 	.word	0x20008980
 8004f98:	200002a8 	.word	0x200002a8
 8004f9c:	20010a5c 	.word	0x20010a5c
 8004fa0:	447a0000 	.word	0x447a0000
 8004fa4:	c30c0000 	.word	0xc30c0000

08004fa8 <testairbrakes>:
	}
}

void testairbrakes(){
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	af00      	add	r7, sp, #0
	MoveToPositionPPM(-150);
 8004fac:	f06f 0095 	mvn.w	r0, #149	; 0x95
 8004fb0:	f7fc f894 	bl	80010dc <MoveToPositionPPM>
	HAL_Delay(1000);
 8004fb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fb8:	f000 fd8c 	bl	8005ad4 <HAL_Delay>
	MoveToPositionPPM(0);
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7fc f88d 	bl	80010dc <MoveToPositionPPM>
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004fc8:	b5b0      	push	{r4, r5, r7, lr}
 8004fca:	b0cc      	sub	sp, #304	; 0x130
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	1d3b      	adds	r3, r7, #4
 8004fd0:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004fd8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	605a      	str	r2, [r3, #4]
 8004fe2:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004fe4:	48c3      	ldr	r0, [pc, #780]	; (80052f4 <vTaskSdCard+0x32c>)
 8004fe6:	f7fe fdcf 	bl	8003b88 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8004fea:	48c3      	ldr	r0, [pc, #780]	; (80052f8 <vTaskSdCard+0x330>)
 8004fec:	f7fe fdcc 	bl	8003b88 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	49c2      	ldr	r1, [pc, #776]	; (80052fc <vTaskSdCard+0x334>)
 8004ff4:	48c2      	ldr	r0, [pc, #776]	; (8005300 <vTaskSdCard+0x338>)
 8004ff6:	f00d f8bd 	bl	8012174 <f_mount>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8005000:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8005008:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800500c:	4619      	mov	r1, r3
 800500e:	48bd      	ldr	r0, [pc, #756]	; (8005304 <vTaskSdCard+0x33c>)
 8005010:	f7fe fdba 	bl	8003b88 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8005014:	4bbc      	ldr	r3, [pc, #752]	; (8005308 <vTaskSdCard+0x340>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800501a:	2064      	movs	r0, #100	; 0x64
 800501c:	f00e fa8e 	bl	801353c <osDelay>
		}
	} while (res != FR_OK);
 8005020:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e3      	bne.n	8004ff0 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8005028:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 800502c:	2b00      	cmp	r3, #0
 800502e:	f040 80a9 	bne.w	8005184 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8005032:	48b6      	ldr	r0, [pc, #728]	; (800530c <vTaskSdCard+0x344>)
 8005034:	f7fe fda8 	bl	8003b88 <UsbPrint>

		unsigned int file_number = 1;
 8005038:	2301      	movs	r3, #1
 800503a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 800503e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005042:	f107 0008 	add.w	r0, r7, #8
 8005046:	4bb2      	ldr	r3, [pc, #712]	; (8005310 <vTaskSdCard+0x348>)
 8005048:	4aac      	ldr	r2, [pc, #688]	; (80052fc <vTaskSdCard+0x334>)
 800504a:	f00e f84b 	bl	80130e4 <f_findfirst>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005054:	e02b      	b.n	80050ae <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8005056:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800505a:	3b30      	subs	r3, #48	; 0x30
 800505c:	2264      	movs	r2, #100	; 0x64
 800505e:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8005062:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005066:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	18ca      	adds	r2, r1, r3
 8005074:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005078:	3b30      	subs	r3, #48	; 0x30
 800507a:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800507c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8005080:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005084:	3301      	adds	r3, #1
 8005086:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800508a:	429a      	cmp	r2, r3
 800508c:	d204      	bcs.n	8005098 <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 800508e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005092:	3301      	adds	r3, #1
 8005094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8005098:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800509c:	f107 0308 	add.w	r3, r7, #8
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f00d fff6 	bl	8013094 <f_findnext>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80050ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <vTaskSdCard+0xf6>
 80050b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1cb      	bne.n	8005056 <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 80050be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d006      	beq.n	80050d4 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 80050c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ca:	4619      	mov	r1, r3
 80050cc:	4891      	ldr	r0, [pc, #580]	; (8005314 <vTaskSdCard+0x34c>)
 80050ce:	f7fe fd5b 	bl	8003b88 <UsbPrint>
					res);
			goto resetSDCard;
 80050d2:	e78a      	b.n	8004fea <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80050d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050d8:	4a8f      	ldr	r2, [pc, #572]	; (8005318 <vTaskSdCard+0x350>)
 80050da:	ca07      	ldmia	r2, {r0, r1, r2}
 80050dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 80050e0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80050e4:	4b8d      	ldr	r3, [pc, #564]	; (800531c <vTaskSdCard+0x354>)
 80050e6:	fba3 2301 	umull	r2, r3, r3, r1
 80050ea:	08da      	lsrs	r2, r3, #3
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	1aca      	subs	r2, r1, r3
 80050f6:	b2d3      	uxtb	r3, r2
 80050f8:	3330      	adds	r3, #48	; 0x30
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8005100:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005104:	4a85      	ldr	r2, [pc, #532]	; (800531c <vTaskSdCard+0x354>)
 8005106:	fba2 2303 	umull	r2, r3, r2, r3
 800510a:	08d9      	lsrs	r1, r3, #3
 800510c:	4b83      	ldr	r3, [pc, #524]	; (800531c <vTaskSdCard+0x354>)
 800510e:	fba3 2301 	umull	r2, r3, r3, r1
 8005112:	08da      	lsrs	r2, r3, #3
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	1aca      	subs	r2, r1, r3
 800511e:	b2d3      	uxtb	r3, r2
 8005120:	3330      	adds	r3, #48	; 0x30
 8005122:	b2db      	uxtb	r3, r3
 8005124:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8005128:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800512c:	4a7c      	ldr	r2, [pc, #496]	; (8005320 <vTaskSdCard+0x358>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0959      	lsrs	r1, r3, #5
 8005134:	4b79      	ldr	r3, [pc, #484]	; (800531c <vTaskSdCard+0x354>)
 8005136:	fba3 2301 	umull	r2, r3, r3, r1
 800513a:	08da      	lsrs	r2, r3, #3
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	1aca      	subs	r2, r1, r3
 8005146:	b2d3      	uxtb	r3, r2
 8005148:	3330      	adds	r3, #48	; 0x30
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8005150:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005154:	4619      	mov	r1, r3
 8005156:	4873      	ldr	r0, [pc, #460]	; (8005324 <vTaskSdCard+0x35c>)
 8005158:	f7fe fd16 	bl	8003b88 <UsbPrint>

		res = f_closedir(&dj);
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	4618      	mov	r0, r3
 8005162:	f00d ff29 	bl	8012fb8 <f_closedir>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 800516c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8005174:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005178:	4619      	mov	r1, r3
 800517a:	486b      	ldr	r0, [pc, #428]	; (8005328 <vTaskSdCard+0x360>)
 800517c:	f7fe fd04 	bl	8003b88 <UsbPrint>
			goto resetSDCard;
 8005180:	bf00      	nop
 8005182:	e732      	b.n	8004fea <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 8005184:	4869      	ldr	r0, [pc, #420]	; (800532c <vTaskSdCard+0x364>)
 8005186:	f7fe fcff 	bl	8003b88 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 800518a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800518e:	2212      	movs	r2, #18
 8005190:	4619      	mov	r1, r3
 8005192:	4867      	ldr	r0, [pc, #412]	; (8005330 <vTaskSdCard+0x368>)
 8005194:	f00d f852 	bl	801223c <f_open>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 800519e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 80051a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051aa:	4619      	mov	r1, r3
 80051ac:	4861      	ldr	r0, [pc, #388]	; (8005334 <vTaskSdCard+0x36c>)
 80051ae:	f7fe fceb 	bl	8003b88 <UsbPrint>
		goto resetSDCard;
 80051b2:	e71a      	b.n	8004fea <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 80051b4:	4860      	ldr	r0, [pc, #384]	; (8005338 <vTaskSdCard+0x370>)
 80051b6:	f7fe fce7 	bl	8003b88 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 80051ba:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <vTaskSdCard+0x368>)
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	4619      	mov	r1, r3
 80051c0:	485b      	ldr	r0, [pc, #364]	; (8005330 <vTaskSdCard+0x368>)
 80051c2:	f00d fc2d 	bl	8012a20 <f_lseek>
 80051c6:	4603      	mov	r3, r0
 80051c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 80051cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d006      	beq.n	80051e2 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 80051d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051d8:	4619      	mov	r1, r3
 80051da:	4858      	ldr	r0, [pc, #352]	; (800533c <vTaskSdCard+0x374>)
 80051dc:	f7fe fcd4 	bl	8003b88 <UsbPrint>
		goto resetSDCard;
 80051e0:	e703      	b.n	8004fea <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 80051e8:	4b55      	ldr	r3, [pc, #340]	; (8005340 <vTaskSdCard+0x378>)
 80051ea:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80051ee:	461d      	mov	r5, r3
 80051f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80051f8:	c407      	stmia	r4!, {r0, r1, r2}
 80051fa:	8023      	strh	r3, [r4, #0]
 80051fc:	3402      	adds	r4, #2
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	7023      	strb	r3, [r4, #0]
 8005202:	2300      	movs	r3, #0
 8005204:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 800520e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005212:	4618      	mov	r0, r3
 8005214:	f7fa fffc 	bl	8000210 <strlen>
 8005218:	4602      	mov	r2, r0
 800521a:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800521e:	4b49      	ldr	r3, [pc, #292]	; (8005344 <vTaskSdCard+0x37c>)
 8005220:	4843      	ldr	r0, [pc, #268]	; (8005330 <vTaskSdCard+0x368>)
 8005222:	f00d f9d0 	bl	80125c6 <f_write>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 800522c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005230:	2b00      	cmp	r3, #0
 8005232:	d006      	beq.n	8005242 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8005234:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005238:	4619      	mov	r1, r3
 800523a:	4843      	ldr	r0, [pc, #268]	; (8005348 <vTaskSdCard+0x380>)
 800523c:	f7fe fca4 	bl	8003b88 <UsbPrint>
		goto resetSDCard;
 8005240:	e6d3      	b.n	8004fea <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8005242:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005246:	2296      	movs	r2, #150	; 0x96
 8005248:	2100      	movs	r1, #0
 800524a:	4618      	mov	r0, r3
 800524c:	f012 fda5 	bl	8017d9a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8005250:	4b3e      	ldr	r3, [pc, #248]	; (800534c <vTaskSdCard+0x384>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005258:	f04f 33ff 	mov.w	r3, #4294967295
 800525c:	2200      	movs	r2, #0
 800525e:	f00e fdaf 	bl	8013dc0 <osMessageQueueGet>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1f3      	bne.n	8005250 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8005268:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800526c:	4618      	mov	r0, r3
 800526e:	f7fa ffcf 	bl	8000210 <strlen>
 8005272:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8005276:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800527a:	2b00      	cmp	r3, #0
 800527c:	d015      	beq.n	80052aa <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 800527e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8005282:	4b30      	ldr	r3, [pc, #192]	; (8005344 <vTaskSdCard+0x37c>)
 8005284:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005288:	4829      	ldr	r0, [pc, #164]	; (8005330 <vTaskSdCard+0x368>)
 800528a:	f00d f99c 	bl	80125c6 <f_write>
 800528e:	4603      	mov	r3, r0
 8005290:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8005294:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 800529c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052a0:	4619      	mov	r1, r3
 80052a2:	4829      	ldr	r0, [pc, #164]	; (8005348 <vTaskSdCard+0x380>)
 80052a4:	f7fe fc70 	bl	8003b88 <UsbPrint>
							res);
					goto resetSDCard;
 80052a8:	e69f      	b.n	8004fea <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ae:	3301      	adds	r3, #1
 80052b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b8:	2b7f      	cmp	r3, #127	; 0x7f
 80052ba:	ddc9      	ble.n	8005250 <vTaskSdCard+0x288>
				msgCounter = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 80052c2:	4823      	ldr	r0, [pc, #140]	; (8005350 <vTaskSdCard+0x388>)
 80052c4:	f7fe fc60 	bl	8003b88 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80052c8:	2108      	movs	r1, #8
 80052ca:	4822      	ldr	r0, [pc, #136]	; (8005354 <vTaskSdCard+0x38c>)
 80052cc:	f001 fa6d 	bl	80067aa <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 80052d0:	4817      	ldr	r0, [pc, #92]	; (8005330 <vTaskSdCard+0x368>)
 80052d2:	f00d fb1c 	bl	801290e <f_sync>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 80052dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0b5      	beq.n	8005250 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 80052e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052e8:	4619      	mov	r1, r3
 80052ea:	481b      	ldr	r0, [pc, #108]	; (8005358 <vTaskSdCard+0x390>)
 80052ec:	f7fe fc4c 	bl	8003b88 <UsbPrint>
					goto resetSDCard;
 80052f0:	e67b      	b.n	8004fea <vTaskSdCard+0x22>
 80052f2:	bf00      	nop
 80052f4:	0801a91c 	.word	0x0801a91c
 80052f8:	0801a944 	.word	0x0801a944
 80052fc:	0801a968 	.word	0x0801a968
 8005300:	20026fd4 	.word	0x20026fd4
 8005304:	0801a96c 	.word	0x0801a96c
 8005308:	20000460 	.word	0x20000460
 800530c:	0801a998 	.word	0x0801a998
 8005310:	0801a9bc 	.word	0x0801a9bc
 8005314:	0801a9c8 	.word	0x0801a9c8
 8005318:	0801aa00 	.word	0x0801aa00
 800531c:	cccccccd 	.word	0xcccccccd
 8005320:	51eb851f 	.word	0x51eb851f
 8005324:	0801aa0c 	.word	0x0801aa0c
 8005328:	0801aa30 	.word	0x0801aa30
 800532c:	0801aa60 	.word	0x0801aa60
 8005330:	20026da4 	.word	0x20026da4
 8005334:	0801aa84 	.word	0x0801aa84
 8005338:	0801aab0 	.word	0x0801aab0
 800533c:	0801aad8 	.word	0x0801aad8
 8005340:	0801ab7c 	.word	0x0801ab7c
 8005344:	20027208 	.word	0x20027208
 8005348:	0801ab08 	.word	0x0801ab08
 800534c:	2001ccf8 	.word	0x2001ccf8
 8005350:	0801ab34 	.word	0x0801ab34
 8005354:	40020800 	.word	0x40020800
 8005358:	0801ab54 	.word	0x0801ab54
 800535c:	00000000 	.word	0x00000000

08005360 <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b08d      	sub	sp, #52	; 0x34
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005368:	f00e f810 	bl	801338c <osKernelGetTickCount>
 800536c:	62f8      	str	r0, [r7, #44]	; 0x2c
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 800536e:	f00e f835 	bl	80133dc <osKernelGetTickFreq>
 8005372:	4602      	mov	r2, r0
 8005374:	4b28      	ldr	r3, [pc, #160]	; (8005418 <vTaskSensRead+0xb8>)
 8005376:	fba3 2302 	umull	r2, r3, r3, r2
 800537a:	095b      	lsrs	r3, r3, #5
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t checksum = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	double big_number = 0.000000000000000000000000000061801682552972095845366322049357827036856204828349992874449552802384396000970681606112577811;
 8005384:	a420      	add	r4, pc, #128	; (adr r4, 8005408 <vTaskSensRead+0xa8>)
 8005386:	e9d4 3400 	ldrd	r3, r4, [r4]
 800538a:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double velocity = 1400;
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	4c22      	ldr	r4, [pc, #136]	; (800541c <vTaskSensRead+0xbc>)
 8005394:	e9c7 3404 	strd	r3, r4, [r7, #16]
	double result = 0;
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	f04f 0400 	mov.w	r4, #0
 80053a0:	e9c7 3402 	strd	r3, r4, [r7, #8]

	result = big_number*pow(velocity,30);
 80053a4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8005410 <vTaskSensRead+0xb0>
 80053a8:	ed97 0b04 	vldr	d0, [r7, #16]
 80053ac:	f013 f960 	bl	8018670 <pow>
 80053b0:	ec54 3b10 	vmov	r3, r4, d0
 80053b4:	461a      	mov	r2, r3
 80053b6:	4623      	mov	r3, r4
 80053b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80053bc:	f7fb f93c 	bl	8000638 <__aeabi_dmul>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	e9c7 3402 	strd	r3, r4, [r7, #8]




	for (;;) {
		tick_count += tick_update;
 80053c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	4413      	add	r3, r2
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 80053d0:	4a13      	ldr	r2, [pc, #76]	; (8005420 <vTaskSensRead+0xc0>)
 80053d2:	4914      	ldr	r1, [pc, #80]	; (8005424 <vTaskSensRead+0xc4>)
 80053d4:	4814      	ldr	r0, [pc, #80]	; (8005428 <vTaskSensRead+0xc8>)
 80053d6:	f000 f839 	bl	800544c <ReadDataSB>
		/* Log Data */
//		logSensor(tick_count, 1, BARO, &sb1_data.baro);
//		logSensor(tick_count, 1, IMU, &sb1_data.imu);
//		logSensor(tick_count, 2, BARO, &sb2_data.baro);
//		logSensor(tick_count, 2, IMU, &sb2_data.imu);
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 80053da:	4b11      	ldr	r3, [pc, #68]	; (8005420 <vTaskSensRead+0xc0>)
 80053dc:	2201      	movs	r2, #1
 80053de:	2103      	movs	r1, #3
 80053e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053e2:	f7fe fa71 	bl	80038c8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <vTaskSensRead+0xcc>)
 80053e8:	2202      	movs	r2, #2
 80053ea:	2103      	movs	r1, #3
 80053ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053ee:	f7fe fa6b 	bl	80038c8 <logSensor>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 80053f2:	2220      	movs	r2, #32
 80053f4:	490a      	ldr	r1, [pc, #40]	; (8005420 <vTaskSensRead+0xc0>)
 80053f6:	480e      	ldr	r0, [pc, #56]	; (8005430 <vTaskSensRead+0xd0>)
 80053f8:	f004 ffbc 	bl	800a374 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 80053fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80053fe:	f00e f8cb 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 8005402:	e7e1      	b.n	80053c8 <vTaskSensRead+0x68>
 8005404:	f3af 8000 	nop.w
 8005408:	ba8b4989 	.word	0xba8b4989
 800540c:	3a1395f2 	.word	0x3a1395f2
 8005410:	00000000 	.word	0x00000000
 8005414:	403e0000 	.word	0x403e0000
 8005418:	51eb851f 	.word	0x51eb851f
 800541c:	4095e000 	.word	0x4095e000
 8005420:	2000040c 	.word	0x2000040c
 8005424:	200003ec 	.word	0x200003ec
 8005428:	200003cc 	.word	0x200003cc
 800542c:	20000418 	.word	0x20000418
 8005430:	200109f8 	.word	0x200109f8

08005434 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f005 fdbb 	bl	800afb8 <HAL_SPIEx_FlushRxFifo>
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum(sb1);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f861 	bl	8005520 <calculate_checksum>
 800545e:	4603      	mov	r3, r0
 8005460:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8005462:	4826      	ldr	r0, [pc, #152]	; (80054fc <ReadDataSB+0xb0>)
 8005464:	f7fe f924 	bl	80036b0 <AcquireMutex>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10e      	bne.n	800548c <ReadDataSB+0x40>
			sb1_baro = sb3->baro;
 800546e:	4b24      	ldr	r3, [pc, #144]	; (8005500 <ReadDataSB+0xb4>)
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	ca07      	ldmia	r2, {r0, r1, r2}
 8005474:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3->imu;
 8005478:	4a22      	ldr	r2, [pc, #136]	; (8005504 <ReadDataSB+0xb8>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4614      	mov	r4, r2
 800547e:	330c      	adds	r3, #12
 8005480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8005486:	481d      	ldr	r0, [pc, #116]	; (80054fc <ReadDataSB+0xb0>)
 8005488:	f7fe f92c 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum(sb2);
 800548c:	68b8      	ldr	r0, [r7, #8]
 800548e:	f000 f847 	bl	8005520 <calculate_checksum>
 8005492:	4603      	mov	r3, r0
 8005494:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 8005496:	481c      	ldr	r0, [pc, #112]	; (8005508 <ReadDataSB+0xbc>)
 8005498:	f7fe f90a 	bl	80036b0 <AcquireMutex>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10e      	bne.n	80054c0 <ReadDataSB+0x74>
			sb2_baro = sb3->baro;
 80054a2:	4b1a      	ldr	r3, [pc, #104]	; (800550c <ReadDataSB+0xc0>)
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80054a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3->imu;
 80054ac:	4a18      	ldr	r2, [pc, #96]	; (8005510 <ReadDataSB+0xc4>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4614      	mov	r4, r2
 80054b2:	330c      	adds	r3, #12
 80054b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 80054ba:	4813      	ldr	r0, [pc, #76]	; (8005508 <ReadDataSB+0xbc>)
 80054bc:	f7fe f912 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum(sb3);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f82d 	bl	8005520 <calculate_checksum>
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 80054ca:	4812      	ldr	r0, [pc, #72]	; (8005514 <ReadDataSB+0xc8>)
 80054cc:	f7fe f8f0 	bl	80036b0 <AcquireMutex>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10e      	bne.n	80054f4 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <ReadDataSB+0xcc>)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	ca07      	ldmia	r2, {r0, r1, r2}
 80054dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 80054e0:	4a0e      	ldr	r2, [pc, #56]	; (800551c <ReadDataSB+0xd0>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4614      	mov	r4, r2
 80054e6:	330c      	adds	r3, #12
 80054e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 80054ee:	4809      	ldr	r0, [pc, #36]	; (8005514 <ReadDataSB+0xc8>)
 80054f0:	f7fe f8f8 	bl	80036e4 <ReleaseMutex>
		}
//	}
}
 80054f4:	bf00      	nop
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}
 80054fc:	20010a6c 	.word	0x20010a6c
 8005500:	20000218 	.word	0x20000218
 8005504:	20000224 	.word	0x20000224
 8005508:	20026d5c 	.word	0x20026d5c
 800550c:	20000234 	.word	0x20000234
 8005510:	20000240 	.word	0x20000240
 8005514:	20010adc 	.word	0x20010adc
 8005518:	20000250 	.word	0x20000250
 800551c:	2000025c 	.word	0x2000025c

08005520 <calculate_checksum>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum(sb_data_t *sb_data){
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	b2db      	uxtb	r3, r3
 8005534:	4413      	add	r3, r2
 8005536:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 800553e:	b2db      	uxtb	r3, r3
 8005540:	4413      	add	r3, r2
 8005542:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800554a:	b2db      	uxtb	r3, r3
 800554c:	4413      	add	r3, r2
 800554e:	b2da      	uxtb	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005556:	b2db      	uxtb	r3, r3
 8005558:	4413      	add	r3, r2
 800555a:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4413      	add	r3, r2
 8005566:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	4413      	add	r3, r2
 8005572:	b2da      	uxtb	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800557a:	b2db      	uxtb	r3, r3
 800557c:	4413      	add	r3, r2
 800557e:	b2db      	uxtb	r3, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <vTaskStateEst>:

void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory);


void vTaskStateEst(void *argument) {
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	f2ad 5dbc 	subw	sp, sp, #1468	; 0x5bc
 8005592:	af0c      	add	r7, sp, #48	; 0x30
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8005598:	f207 5364 	addw	r3, r7, #1380	; 0x564
 800559c:	4618      	mov	r0, r3
 800559e:	f7fc fa73 	bl	8001a88 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 80055a2:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 80055a6:	2278      	movs	r2, #120	; 0x78
 80055a8:	2100      	movs	r1, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	f012 fbf5 	bl	8017d9a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 80055b0:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80055b4:	4618      	mov	r0, r3
 80055b6:	2378      	movs	r3, #120	; 0x78
 80055b8:	461a      	mov	r2, r3
 80055ba:	2100      	movs	r1, #0
 80055bc:	f012 fbed 	bl	8017d9a <memset>

	osStatus_t status_sb1 = osOK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
	osStatus_t status_sb2 = osOK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	osStatus_t status_sb3 = osOK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 80055d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc fd2c 	bl	8002034 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 80055dc:	f107 0318 	add.w	r3, r7, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	23b0      	movs	r3, #176	; 0xb0
 80055e4:	461a      	mov	r2, r3
 80055e6:	2100      	movs	r1, #0
 80055e8:	f012 fbd7 	bl	8017d9a <memset>
	extrapolation_rolling_memory.memory_length = 0;
 80055ec:	f107 0318 	add.w	r3, r7, #24
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	461a      	mov	r2, r3
 80055fa:	2300      	movs	r3, #0
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	6053      	str	r3, [r2, #4]
 8005600:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8005602:	f107 030c 	add.w	r3, r7, #12
 8005606:	4618      	mov	r0, r3
 8005608:	f7fc fcfc 	bl	8002004 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 800560c:	f107 030b 	add.w	r3, r7, #11
 8005610:	229b      	movs	r2, #155	; 0x9b
 8005612:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005614:	f107 0318 	add.w	r3, r7, #24
 8005618:	f207 5264 	addw	r2, r7, #1380	; 0x564
 800561c:	f107 010c 	add.w	r1, r7, #12
 8005620:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8005624:	f7fd f8fc 	bl	8002820 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005628:	f00d feb0 	bl	801338c <osKernelGetTickCount>
 800562c:	f8c7 0584 	str.w	r0, [r7, #1412]	; 0x584
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8005630:	f00d fed4 	bl	80133dc <osKernelGetTickFreq>
 8005634:	4602      	mov	r2, r0
 8005636:	4b67      	ldr	r3, [pc, #412]	; (80057d4 <vTaskStateEst+0x248>)
 8005638:	fba3 2302 	umull	r2, r3, r3, r2
 800563c:	095b      	lsrs	r3, r3, #5
 800563e:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 8005642:	f8d7 2584 	ldr.w	r2, [r7, #1412]	; 0x584
 8005646:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 800564a:	4413      	add	r3, r2
 800564c:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8005650:	f107 020b 	add.w	r2, r7, #11
 8005654:	2301      	movs	r3, #1
 8005656:	4960      	ldr	r1, [pc, #384]	; (80057d8 <vTaskStateEst+0x24c>)
 8005658:	4860      	ldr	r0, [pc, #384]	; (80057dc <vTaskStateEst+0x250>)
 800565a:	f7fe f851 	bl	8003700 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d10d      	bne.n	8005684 <vTaskStateEst+0xf8>
 8005668:	4b5b      	ldr	r3, [pc, #364]	; (80057d8 <vTaskStateEst+0x24c>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b9c      	cmp	r3, #156	; 0x9c
 800566e:	d109      	bne.n	8005684 <vTaskStateEst+0xf8>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005670:	f107 0318 	add.w	r3, r7, #24
 8005674:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8005678:	f107 010c 	add.w	r1, r7, #12
 800567c:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8005680:	f000 f8ca 	bl	8005818 <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		status_sb1 = ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8005684:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8005688:	2301      	movs	r3, #1
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	4613      	mov	r3, r2
 800568e:	4a54      	ldr	r2, [pc, #336]	; (80057e0 <vTaskStateEst+0x254>)
 8005690:	4954      	ldr	r1, [pc, #336]	; (80057e4 <vTaskStateEst+0x258>)
 8005692:	4855      	ldr	r0, [pc, #340]	; (80057e8 <vTaskStateEst+0x25c>)
 8005694:	f7fe f870 	bl	8003778 <ReadMutexStateEst>
 8005698:	f8c7 0580 	str.w	r0, [r7, #1408]	; 0x580

		/* Sensor Board 2 */
		status_sb2 = ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 800569c:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80056a0:	2302      	movs	r3, #2
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4613      	mov	r3, r2
 80056a6:	4a51      	ldr	r2, [pc, #324]	; (80057ec <vTaskStateEst+0x260>)
 80056a8:	4951      	ldr	r1, [pc, #324]	; (80057f0 <vTaskStateEst+0x264>)
 80056aa:	4852      	ldr	r0, [pc, #328]	; (80057f4 <vTaskStateEst+0x268>)
 80056ac:	f7fe f864 	bl	8003778 <ReadMutexStateEst>
 80056b0:	f8c7 057c 	str.w	r0, [r7, #1404]	; 0x57c

		/* Sensor Board 3 */
		status_sb3 = ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 80056b4:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80056b8:	2303      	movs	r3, #3
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	4a4e      	ldr	r2, [pc, #312]	; (80057f8 <vTaskStateEst+0x26c>)
 80056c0:	494e      	ldr	r1, [pc, #312]	; (80057fc <vTaskStateEst+0x270>)
 80056c2:	484f      	ldr	r0, [pc, #316]	; (8005800 <vTaskStateEst+0x274>)
 80056c4:	f7fe f858 	bl	8003778 <ReadMutexStateEst>
 80056c8:	f8c7 0578 	str.w	r0, [r7, #1400]	; 0x578

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 80056cc:	f107 020c 	add.w	r2, r7, #12
 80056d0:	230c      	movs	r3, #12
 80056d2:	494c      	ldr	r1, [pc, #304]	; (8005804 <vTaskStateEst+0x278>)
 80056d4:	484c      	ldr	r0, [pc, #304]	; (8005808 <vTaskStateEst+0x27c>)
 80056d6:	f7fe f813 	bl	8003700 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 80056da:	f207 4074 	addw	r0, r7, #1140	; 0x474
 80056de:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80056e2:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80056e6:	f107 0318 	add.w	r3, r7, #24
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	f207 5364 	addw	r3, r7, #1380	; 0x564
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	4603      	mov	r3, r0
 80056f4:	f8d7 0584 	ldr.w	r0, [r7, #1412]	; 0x584
 80056f8:	f7fc ff1e 	bl	8002538 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8005704:	f107 010c 	add.w	r1, r7, #12
 8005708:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800570c:	f7fd f888 	bl	8002820 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 8005710:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005714:	4618      	mov	r0, r3
 8005716:	f7fc fd23 	bl	8002160 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 800571a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800571e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005722:	2b00      	cmp	r3, #0
 8005724:	dd0a      	ble.n	800573c <vTaskStateEst+0x1b0>
			select_kf_observation_matrices(&kf_state);
 8005726:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800572a:	4618      	mov	r0, r3
 800572c:	f7fc fd89 	bl	8002242 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8005730:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005734:	4618      	mov	r0, r3
 8005736:	f7fc fdc1 	bl	80022bc <kf_update>
 800573a:	e00a      	b.n	8005752 <vTaskStateEst+0x1c6>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 800573c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005740:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8005744:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005748:	f502 729a 	add.w	r2, r2, #308	; 0x134
 800574c:	ca07      	ldmia	r2, {r0, r1, r2}
 800574e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8005752:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8005756:	4618      	mov	r0, r3
 8005758:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 800575c:	2278      	movs	r2, #120	; 0x78
 800575e:	4619      	mov	r1, r3
 8005760:	f012 fb10 	bl	8017d84 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8005764:	4829      	ldr	r0, [pc, #164]	; (800580c <vTaskStateEst+0x280>)
 8005766:	f7fd ffa3 	bl	80036b0 <AcquireMutex>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <vTaskStateEst+0x1f6>
			update_state_est_data(&state_est_data_global, &kf_state);
 8005770:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005774:	4619      	mov	r1, r3
 8005776:	4826      	ldr	r0, [pc, #152]	; (8005810 <vTaskStateEst+0x284>)
 8005778:	f7fc fe8e 	bl	8002498 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 800577c:	4823      	ldr	r0, [pc, #140]	; (800580c <vTaskStateEst+0x280>)
 800577e:	f7fd ffb1 	bl	80036e4 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8005782:	4821      	ldr	r0, [pc, #132]	; (8005808 <vTaskStateEst+0x27c>)
 8005784:	f7fd ff94 	bl	80036b0 <AcquireMutex>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d109      	bne.n	80057a2 <vTaskStateEst+0x216>
			global_env = env;
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <vTaskStateEst+0x288>)
 8005790:	461c      	mov	r4, r3
 8005792:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8005796:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005798:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 800579c:	481a      	ldr	r0, [pc, #104]	; (8005808 <vTaskStateEst+0x27c>)
 800579e:	f7fd ffa1 	bl	80036e4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 80057a2:	f00d fdf3 	bl	801338c <osKernelGetTickCount>
 80057a6:	4684      	mov	ip, r0
 80057a8:	4e19      	ldr	r6, [pc, #100]	; (8005810 <vTaskStateEst+0x284>)
 80057aa:	466d      	mov	r5, sp
 80057ac:	f106 040c 	add.w	r4, r6, #12
 80057b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80057bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80057c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80057c4:	4660      	mov	r0, ip
 80057c6:	f7fe f94f 	bl	8003a68 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 80057ca:	f8d7 0584 	ldr.w	r0, [r7, #1412]	; 0x584
 80057ce:	f00d fee3 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 80057d2:	e736      	b.n	8005642 <vTaskStateEst+0xb6>
 80057d4:	51eb851f 	.word	0x51eb851f
 80057d8:	20014b50 	.word	0x20014b50
 80057dc:	20008b64 	.word	0x20008b64
 80057e0:	20000224 	.word	0x20000224
 80057e4:	20000218 	.word	0x20000218
 80057e8:	20010a6c 	.word	0x20010a6c
 80057ec:	20000240 	.word	0x20000240
 80057f0:	20000234 	.word	0x20000234
 80057f4:	20026d5c 	.word	0x20026d5c
 80057f8:	2000025c 	.word	0x2000025c
 80057fc:	20000250 	.word	0x20000250
 8005800:	20010adc 	.word	0x20010adc
 8005804:	200002bc 	.word	0x200002bc
 8005808:	20008980 	.word	0x20008980
 800580c:	20010aec 	.word	0x20010aec
 8005810:	2000026c 	.word	0x2000026c
 8005814:	200002ac 	.word	0x200002ac

08005818 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory){
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
 8005824:	603b      	str	r3, [r7, #0]
	reset_flight_phase_detection(flight_phase_detection);
 8005826:	68b8      	ldr	r0, [r7, #8]
 8005828:	f7fc fbec 	bl	8002004 <reset_flight_phase_detection>
	reset_kf_state(kf_state);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7fc fc01 	bl	8002034 <reset_kf_state>
	init_env(environment);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc f928 	bl	8001a88 <init_env>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	23b0      	movs	r3, #176	; 0xb0
 800583e:	461a      	mov	r2, r3
 8005840:	2100      	movs	r1, #0
 8005842:	f012 faaa 	bl	8017d9a <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f7fc ffe7 	bl	8002820 <select_noise_models>
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <vTaskXbee>:
command_xbee_t local_command_xbee;

command_e local_command;
bool new_command = false;

void vTaskXbee(void *argument) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b0b2      	sub	sp, #200	; 0xc8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	int32_t controller_output;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	2270      	movs	r2, #112	; 0x70
 800586a:	2100      	movs	r1, #0
 800586c:	4618      	mov	r0, r3
 800586e:	f012 fa94 	bl	8017d9a <memset>
	telemetry_send.flight_phase = IDLE;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	telemetry_send.mach_regime = SUBSONIC;
 8005878:	2301      	movs	r3, #1
 800587a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t rx = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

	/* Command struct */
	local_command = IDLE_COMMAND;
 8005884:	4b50      	ldr	r3, [pc, #320]	; (80059c8 <vTaskXbee+0x16c>)
 8005886:	229b      	movs	r2, #155	; 0x9b
 8005888:	701a      	strb	r2, [r3, #0]
	local_command_xbee = IDLE_XBEE_DATA;
 800588a:	4b50      	ldr	r3, [pc, #320]	; (80059cc <vTaskXbee+0x170>)
 800588c:	4a50      	ldr	r2, [pc, #320]	; (80059d0 <vTaskXbee+0x174>)
 800588e:	6810      	ldr	r0, [r2, #0]
 8005890:	6018      	str	r0, [r3, #0]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005892:	f00d fd7b 	bl	801338c <osKernelGetTickCount>
 8005896:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	tick_update = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 800589a:	f00d fd9f 	bl	80133dc <osKernelGetTickFreq>
 800589e:	4602      	mov	r2, r0
 80058a0:	4b4c      	ldr	r3, [pc, #304]	; (80059d4 <vTaskXbee+0x178>)
 80058a2:	fba3 2302 	umull	r2, r3, r3, r2
 80058a6:	08db      	lsrs	r3, r3, #3
 80058a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	HAL_UART_Receive_IT(&huart4, (uint8_t*) &local_command, sizeof(local_command));
 80058ac:	2201      	movs	r2, #1
 80058ae:	4946      	ldr	r1, [pc, #280]	; (80059c8 <vTaskXbee+0x16c>)
 80058b0:	4849      	ldr	r0, [pc, #292]	; (80059d8 <vTaskXbee+0x17c>)
 80058b2:	f005 ffb5 	bl	800b820 <HAL_UART_Receive_IT>

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80058b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058be:	4413      	add	r3, r2
 80058c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		/* Write command in Global Command Variable */
		if(AcquireMutex(&command_mutex) == osOK){
 80058c4:	4845      	ldr	r0, [pc, #276]	; (80059dc <vTaskXbee+0x180>)
 80058c6:	f7fd fef3 	bl	80036b0 <AcquireMutex>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d106      	bne.n	80058de <vTaskXbee+0x82>
			global_telemetry_command = local_command;
 80058d0:	4b3d      	ldr	r3, [pc, #244]	; (80059c8 <vTaskXbee+0x16c>)
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	4b42      	ldr	r3, [pc, #264]	; (80059e0 <vTaskXbee+0x184>)
 80058d6:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 80058d8:	4840      	ldr	r0, [pc, #256]	; (80059dc <vTaskXbee+0x180>)
 80058da:	f7fd ff03 	bl	80036e4 <ReleaseMutex>
		}
		if(new_command){
 80058de:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <vTaskXbee+0x188>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <vTaskXbee+0x96>
			local_command = IDLE_COMMAND;
 80058e6:	4b38      	ldr	r3, [pc, #224]	; (80059c8 <vTaskXbee+0x16c>)
 80058e8:	229b      	movs	r2, #155	; 0x9b
 80058ea:	701a      	strb	r2, [r3, #0]
			new_command = false;
 80058ec:	4b3d      	ldr	r3, [pc, #244]	; (80059e4 <vTaskXbee+0x188>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
		}

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &telemetry_send.sb1.baro, sizeof(sb1_baro));
 80058f2:	f107 020c 	add.w	r2, r7, #12
 80058f6:	230c      	movs	r3, #12
 80058f8:	493b      	ldr	r1, [pc, #236]	; (80059e8 <vTaskXbee+0x18c>)
 80058fa:	483c      	ldr	r0, [pc, #240]	; (80059ec <vTaskXbee+0x190>)
 80058fc:	f7fd ff00 	bl	8003700 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &telemetry_send.sb1.imu, sizeof(sb1_imu));
 8005900:	f107 030c 	add.w	r3, r7, #12
 8005904:	f103 020c 	add.w	r2, r3, #12
 8005908:	2310      	movs	r3, #16
 800590a:	4939      	ldr	r1, [pc, #228]	; (80059f0 <vTaskXbee+0x194>)
 800590c:	4837      	ldr	r0, [pc, #220]	; (80059ec <vTaskXbee+0x190>)
 800590e:	f7fd fef7 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_baro, &telemetry_send.sb2.baro, sizeof(sb2_baro));
 8005912:	f107 030c 	add.w	r3, r7, #12
 8005916:	f103 0220 	add.w	r2, r3, #32
 800591a:	230c      	movs	r3, #12
 800591c:	4935      	ldr	r1, [pc, #212]	; (80059f4 <vTaskXbee+0x198>)
 800591e:	4836      	ldr	r0, [pc, #216]	; (80059f8 <vTaskXbee+0x19c>)
 8005920:	f7fd feee 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_imu, &telemetry_send.sb2.imu, sizeof(sb2_imu));
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800592c:	2310      	movs	r3, #16
 800592e:	4933      	ldr	r1, [pc, #204]	; (80059fc <vTaskXbee+0x1a0>)
 8005930:	4831      	ldr	r0, [pc, #196]	; (80059f8 <vTaskXbee+0x19c>)
 8005932:	f7fd fee5 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_baro, &telemetry_send.sb3.baro, sizeof(sb3_baro));
 8005936:	f107 030c 	add.w	r3, r7, #12
 800593a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800593e:	230c      	movs	r3, #12
 8005940:	492f      	ldr	r1, [pc, #188]	; (8005a00 <vTaskXbee+0x1a4>)
 8005942:	4830      	ldr	r0, [pc, #192]	; (8005a04 <vTaskXbee+0x1a8>)
 8005944:	f7fd fedc 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_imu, &telemetry_send.sb3.imu, sizeof(sb3_imu));
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8005950:	2310      	movs	r3, #16
 8005952:	492d      	ldr	r1, [pc, #180]	; (8005a08 <vTaskXbee+0x1ac>)
 8005954:	482b      	ldr	r0, [pc, #172]	; (8005a04 <vTaskXbee+0x1a8>)
 8005956:	f7fd fed3 	bl	8003700 <ReadMutex>

		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 800595a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800595e:	233c      	movs	r3, #60	; 0x3c
 8005960:	492a      	ldr	r1, [pc, #168]	; (8005a0c <vTaskXbee+0x1b0>)
 8005962:	482b      	ldr	r0, [pc, #172]	; (8005a10 <vTaskXbee+0x1b4>)
 8005964:	f7fd fecc 	bl	8003700 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &controller_output, sizeof(controller_output));
 8005968:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800596c:	2304      	movs	r3, #4
 800596e:	4929      	ldr	r1, [pc, #164]	; (8005a14 <vTaskXbee+0x1b8>)
 8005970:	4829      	ldr	r0, [pc, #164]	; (8005a18 <vTaskXbee+0x1bc>)
 8005972:	f7fd fec5 	bl	8003700 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 8005976:	f107 030c 	add.w	r3, r7, #12
 800597a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800597e:	2301      	movs	r3, #1
 8005980:	4926      	ldr	r1, [pc, #152]	; (8005a1c <vTaskXbee+0x1c0>)
 8005982:	4827      	ldr	r0, [pc, #156]	; (8005a20 <vTaskXbee+0x1c4>)
 8005984:	f7fd febc 	bl	8003700 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.mach_regime, &telemetry_send.mach_regime, sizeof(global_flight_phase_detection.mach_regime));
 8005988:	f107 030c 	add.w	r3, r7, #12
 800598c:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 8005990:	2301      	movs	r3, #1
 8005992:	4924      	ldr	r1, [pc, #144]	; (8005a24 <vTaskXbee+0x1c8>)
 8005994:	4822      	ldr	r0, [pc, #136]	; (8005a20 <vTaskXbee+0x1c4>)
 8005996:	f7fd feb3 	bl	8003700 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 800599a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800599e:	66fb      	str	r3, [r7, #108]	; 0x6c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80059a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059a4:	673b      	str	r3, [r7, #112]	; 0x70
		telemetry_send.ts = osKernelGetTickCount();
 80059a6:	f00d fcf1 	bl	801338c <osKernelGetTickCount>
 80059aa:	4603      	mov	r3, r0
 80059ac:	677b      	str	r3, [r7, #116]	; 0x74

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart4, (uint8_t*) &telemetry_send, sizeof(telemetry_send), HAL_MAX_DELAY);
 80059ae:	f107 010c 	add.w	r1, r7, #12
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	2270      	movs	r2, #112	; 0x70
 80059b8:	4807      	ldr	r0, [pc, #28]	; (80059d8 <vTaskXbee+0x17c>)
 80059ba:	f005 fdd3 	bl	800b564 <HAL_UART_Transmit>



		/* Sleep */
		osDelayUntil(tick_count);
 80059be:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80059c2:	f00d fde9 	bl	8013598 <osDelayUntil>
		tick_count += tick_update;
 80059c6:	e776      	b.n	80058b6 <vTaskXbee+0x5a>
 80059c8:	2002720c 	.word	0x2002720c
 80059cc:	20027210 	.word	0x20027210
 80059d0:	0801ad78 	.word	0x0801ad78
 80059d4:	cccccccd 	.word	0xcccccccd
 80059d8:	2001cc14 	.word	0x2001cc14
 80059dc:	20008b64 	.word	0x20008b64
 80059e0:	20014b50 	.word	0x20014b50
 80059e4:	2000042c 	.word	0x2000042c
 80059e8:	20000218 	.word	0x20000218
 80059ec:	20010a6c 	.word	0x20010a6c
 80059f0:	20000224 	.word	0x20000224
 80059f4:	20000234 	.word	0x20000234
 80059f8:	20026d5c 	.word	0x20026d5c
 80059fc:	20000240 	.word	0x20000240
 8005a00:	20000250 	.word	0x20000250
 8005a04:	20010adc 	.word	0x20010adc
 8005a08:	2000025c 	.word	0x2000025c
 8005a0c:	2000026c 	.word	0x2000026c
 8005a10:	20010aec 	.word	0x20010aec
 8005a14:	200002a8 	.word	0x200002a8
 8005a18:	20010a5c 	.word	0x20010a5c
 8005a1c:	200002bc 	.word	0x200002bc
 8005a20:	20008980 	.word	0x20008980
 8005a24:	200002bd 	.word	0x200002bd

08005a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005a2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005a2e:	e003      	b.n	8005a38 <LoopCopyDataInit>

08005a30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005a32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a36:	3104      	adds	r1, #4

08005a38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a38:	480b      	ldr	r0, [pc, #44]	; (8005a68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005a3a:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005a3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a40:	d3f6      	bcc.n	8005a30 <CopyDataInit>
  ldr  r2, =_sbss
 8005a42:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005a44:	e002      	b.n	8005a4c <LoopFillZerobss>

08005a46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005a46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005a48:	f842 3b04 	str.w	r3, [r2], #4

08005a4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005a4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a50:	d3f9      	bcc.n	8005a46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005a52:	f7ff f88f 	bl	8004b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a56:	f012 f961 	bl	8017d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a5a:	f7fe f8a3 	bl	8003ba4 <main>
  bx  lr    
 8005a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a60:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005a64:	0801af30 	.word	0x0801af30
  ldr  r0, =_sdata
 8005a68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a6c:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8005a70:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8005a74:	20028f9c 	.word	0x20028f9c

08005a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a78:	e7fe      	b.n	8005a78 <ADC_IRQHandler>

08005a7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a7e:	2003      	movs	r0, #3
 8005a80:	f000 f8f7 	bl	8005c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7fe ff69 	bl	800495c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005a8a:	f7fe fcaf 	bl	80043ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a98:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <HAL_IncTick+0x20>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_IncTick+0x24>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <HAL_IncTick+0x24>)
 8005aa6:	6013      	str	r3, [r2, #0]
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000008 	.word	0x20000008
 8005ab8:	20027214 	.word	0x20027214

08005abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  return uwTick;
 8005ac0:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_GetTick+0x14>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20027214 	.word	0x20027214

08005ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005adc:	f7ff ffee 	bl	8005abc <HAL_GetTick>
 8005ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d005      	beq.n	8005afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_Delay+0x40>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4413      	add	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005afa:	bf00      	nop
 8005afc:	f7ff ffde 	bl	8005abc <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d8f7      	bhi.n	8005afc <HAL_Delay+0x28>
  {
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000008 	.word	0x20000008

08005b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <__NVIC_SetPriorityGrouping+0x40>)
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b34:	4013      	ands	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b40:	4b06      	ldr	r3, [pc, #24]	; (8005b5c <__NVIC_SetPriorityGrouping+0x44>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b46:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <__NVIC_SetPriorityGrouping+0x40>)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	60d3      	str	r3, [r2, #12]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	e000ed00 	.word	0xe000ed00
 8005b5c:	05fa0000 	.word	0x05fa0000

08005b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <__NVIC_GetPriorityGrouping+0x18>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	0a1b      	lsrs	r3, r3, #8
 8005b6a:	f003 0307 	and.w	r3, r3, #7
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	db0b      	blt.n	8005ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4907      	ldr	r1, [pc, #28]	; (8005bb4 <__NVIC_EnableIRQ+0x38>)
 8005b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8005ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	e000e100 	.word	0xe000e100

08005bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	db0a      	blt.n	8005be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	490c      	ldr	r1, [pc, #48]	; (8005c04 <__NVIC_SetPriority+0x4c>)
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	0112      	lsls	r2, r2, #4
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	440b      	add	r3, r1
 8005bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005be0:	e00a      	b.n	8005bf8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4908      	ldr	r1, [pc, #32]	; (8005c08 <__NVIC_SetPriority+0x50>)
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	f003 030f 	and.w	r3, r3, #15
 8005bee:	3b04      	subs	r3, #4
 8005bf0:	0112      	lsls	r2, r2, #4
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	761a      	strb	r2, [r3, #24]
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000e100 	.word	0xe000e100
 8005c08:	e000ed00 	.word	0xe000ed00

08005c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b089      	sub	sp, #36	; 0x24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	f1c3 0307 	rsb	r3, r3, #7
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	bf28      	it	cs
 8005c2a:	2304      	movcs	r3, #4
 8005c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	3304      	adds	r3, #4
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d902      	bls.n	8005c3c <NVIC_EncodePriority+0x30>
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	3b03      	subs	r3, #3
 8005c3a:	e000      	b.n	8005c3e <NVIC_EncodePriority+0x32>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c40:	f04f 32ff 	mov.w	r2, #4294967295
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	401a      	ands	r2, r3
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c54:	f04f 31ff 	mov.w	r1, #4294967295
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	43d9      	mvns	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c64:	4313      	orrs	r3, r2
         );
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3724      	adds	r7, #36	; 0x24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b082      	sub	sp, #8
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff ff4c 	bl	8005b18 <__NVIC_SetPriorityGrouping>
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c96:	2300      	movs	r3, #0
 8005c98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c9a:	f7ff ff61 	bl	8005b60 <__NVIC_GetPriorityGrouping>
 8005c9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68b9      	ldr	r1, [r7, #8]
 8005ca4:	6978      	ldr	r0, [r7, #20]
 8005ca6:	f7ff ffb1 	bl	8005c0c <NVIC_EncodePriority>
 8005caa:	4602      	mov	r2, r0
 8005cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff ff80 	bl	8005bb8 <__NVIC_SetPriority>
}
 8005cb8:	bf00      	nop
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff ff54 	bl	8005b7c <__NVIC_EnableIRQ>
}
 8005cd4:	bf00      	nop
 8005cd6:	3708      	adds	r7, #8
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ce8:	f7ff fee8 	bl	8005abc <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e099      	b.n	8005e2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2202      	movs	r2, #2
 8005d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0201 	bic.w	r2, r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d18:	e00f      	b.n	8005d3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d1a:	f7ff fecf 	bl	8005abc <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b05      	cmp	r3, #5
 8005d26:	d908      	bls.n	8005d3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2203      	movs	r2, #3
 8005d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e078      	b.n	8005e2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e8      	bne.n	8005d1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4b38      	ldr	r3, [pc, #224]	; (8005e34 <HAL_DMA_Init+0x158>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d107      	bne.n	8005da4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d117      	bne.n	8005dfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 faa5 	bl	8006330 <DMA_CheckFifoParam>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2240      	movs	r2, #64	; 0x40
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e016      	b.n	8005e2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fa5c 	bl	80062c4 <DMA_CalcBaseAndBitshift>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	223f      	movs	r2, #63	; 0x3f
 8005e16:	409a      	lsls	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	f010803f 	.word	0xf010803f

08005e38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_DMA_Start_IT+0x26>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e048      	b.n	8005ef0 <HAL_DMA_Start_IT+0xb8>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d137      	bne.n	8005ee2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f9ee 	bl	8006268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e90:	223f      	movs	r2, #63	; 0x3f
 8005e92:	409a      	lsls	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0216 	orr.w	r2, r2, #22
 8005ea6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695a      	ldr	r2, [r3, #20]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eb6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d007      	beq.n	8005ed0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0208 	orr.w	r2, r2, #8
 8005ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	e005      	b.n	8005eee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005eea:	2302      	movs	r3, #2
 8005eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d004      	beq.n	8005f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00c      	b.n	8005f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2205      	movs	r2, #5
 8005f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005f48:	4b92      	ldr	r3, [pc, #584]	; (8006194 <HAL_DMA_IRQHandler+0x258>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a92      	ldr	r2, [pc, #584]	; (8006198 <HAL_DMA_IRQHandler+0x25c>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	0a9b      	lsrs	r3, r3, #10
 8005f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	2208      	movs	r2, #8
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01a      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	2208      	movs	r2, #8
 8005f96:	409a      	lsls	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f043 0201 	orr.w	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	2201      	movs	r2, #1
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d012      	beq.n	8005fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd6:	f043 0202 	orr.w	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006000:	2204      	movs	r2, #4
 8006002:	409a      	lsls	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	f043 0204 	orr.w	r2, r3, #4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	2210      	movs	r2, #16
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d043      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d03c      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	2210      	movs	r2, #16
 8006038:	409a      	lsls	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d018      	beq.n	800607e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d024      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
 800606a:	e01f      	b.n	80060ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01b      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e016      	b.n	80060ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0208 	bic.w	r2, r2, #8
 800609a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	2220      	movs	r2, #32
 80060b2:	409a      	lsls	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 808e 	beq.w	80061da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8086 	beq.w	80061da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	2220      	movs	r2, #32
 80060d4:	409a      	lsls	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d136      	bne.n	8006154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0216 	bic.w	r2, r2, #22
 80060f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_DMA_IRQHandler+0x1da>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0208 	bic.w	r2, r2, #8
 8006124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	223f      	movs	r2, #63	; 0x3f
 800612c:	409a      	lsls	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d07d      	beq.n	8006246 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
        }
        return;
 8006152:	e078      	b.n	8006246 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01c      	beq.n	800619c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	2b00      	cmp	r3, #0
 8006176:	d030      	beq.n	80061da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
 8006180:	e02b      	b.n	80061da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d027      	beq.n	80061da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
 8006192:	e022      	b.n	80061da <HAL_DMA_IRQHandler+0x29e>
 8006194:	20000000 	.word	0x20000000
 8006198:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10f      	bne.n	80061ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0210 	bic.w	r2, r2, #16
 80061b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d032      	beq.n	8006248 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d022      	beq.n	8006234 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2205      	movs	r2, #5
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	3301      	adds	r3, #1
 800620a:	60bb      	str	r3, [r7, #8]
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	429a      	cmp	r2, r3
 8006210:	d307      	bcc.n	8006222 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1f2      	bne.n	8006206 <HAL_DMA_IRQHandler+0x2ca>
 8006220:	e000      	b.n	8006224 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006222:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	e000      	b.n	8006248 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006246:	bf00      	nop
    }
  }
}
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop

08006250 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d108      	bne.n	80062a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062a6:	e007      	b.n	80062b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	3b10      	subs	r3, #16
 80062d4:	4a13      	ldr	r2, [pc, #76]	; (8006324 <DMA_CalcBaseAndBitshift+0x60>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	091b      	lsrs	r3, r3, #4
 80062dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062de:	4a12      	ldr	r2, [pc, #72]	; (8006328 <DMA_CalcBaseAndBitshift+0x64>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d908      	bls.n	8006304 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	461a      	mov	r2, r3
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <DMA_CalcBaseAndBitshift+0x68>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	1d1a      	adds	r2, r3, #4
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	659a      	str	r2, [r3, #88]	; 0x58
 8006302:	e006      	b.n	8006312 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	4b08      	ldr	r3, [pc, #32]	; (800632c <DMA_CalcBaseAndBitshift+0x68>)
 800630c:	4013      	ands	r3, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	aaaaaaab 	.word	0xaaaaaaab
 8006328:	0801ad7c 	.word	0x0801ad7c
 800632c:	fffffc00 	.word	0xfffffc00

08006330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d11f      	bne.n	800638a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b03      	cmp	r3, #3
 800634e:	d855      	bhi.n	80063fc <DMA_CheckFifoParam+0xcc>
 8006350:	a201      	add	r2, pc, #4	; (adr r2, 8006358 <DMA_CheckFifoParam+0x28>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	08006369 	.word	0x08006369
 800635c:	0800637b 	.word	0x0800637b
 8006360:	08006369 	.word	0x08006369
 8006364:	080063fd 	.word	0x080063fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d045      	beq.n	8006400 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006378:	e042      	b.n	8006400 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006382:	d13f      	bne.n	8006404 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006388:	e03c      	b.n	8006404 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006392:	d121      	bne.n	80063d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b03      	cmp	r3, #3
 8006398:	d836      	bhi.n	8006408 <DMA_CheckFifoParam+0xd8>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <DMA_CheckFifoParam+0x70>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	080063b1 	.word	0x080063b1
 80063a4:	080063b7 	.word	0x080063b7
 80063a8:	080063b1 	.word	0x080063b1
 80063ac:	080063c9 	.word	0x080063c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e02f      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d024      	beq.n	800640c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c6:	e021      	b.n	800640c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063d0:	d11e      	bne.n	8006410 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063d6:	e01b      	b.n	8006410 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d902      	bls.n	80063e4 <DMA_CheckFifoParam+0xb4>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d003      	beq.n	80063ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063e2:	e018      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	73fb      	strb	r3, [r7, #15]
      break;
 80063e8:	e015      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00e      	beq.n	8006414 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	73fb      	strb	r3, [r7, #15]
      break;
 80063fa:	e00b      	b.n	8006414 <DMA_CheckFifoParam+0xe4>
      break;
 80063fc:	bf00      	nop
 80063fe:	e00a      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;
 8006400:	bf00      	nop
 8006402:	e008      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;
 8006404:	bf00      	nop
 8006406:	e006      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;
 8006408:	bf00      	nop
 800640a:	e004      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;
 800640c:	bf00      	nop
 800640e:	e002      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;   
 8006410:	bf00      	nop
 8006412:	e000      	b.n	8006416 <DMA_CheckFifoParam+0xe6>
      break;
 8006414:	bf00      	nop
    }
  } 
  
  return status; 
 8006416:	7bfb      	ldrb	r3, [r7, #15]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800642e:	2300      	movs	r3, #0
 8006430:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006436:	2300      	movs	r3, #0
 8006438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800643a:	2300      	movs	r3, #0
 800643c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800643e:	2300      	movs	r3, #0
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	e175      	b.n	8006730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006444:	2201      	movs	r2, #1
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4013      	ands	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	429a      	cmp	r2, r3
 800645e:	f040 8164 	bne.w	800672a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d00b      	beq.n	8006482 <HAL_GPIO_Init+0x5e>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b02      	cmp	r3, #2
 8006470:	d007      	beq.n	8006482 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006476:	2b11      	cmp	r3, #17
 8006478:	d003      	beq.n	8006482 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2b12      	cmp	r3, #18
 8006480:	d130      	bne.n	80064e4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	005b      	lsls	r3, r3, #1
 800648c:	2203      	movs	r2, #3
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	43db      	mvns	r3, r3
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	4013      	ands	r3, r2
 8006498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	005b      	lsls	r3, r3, #1
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064b8:	2201      	movs	r2, #1
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	43db      	mvns	r3, r3
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	4013      	ands	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	f003 0201 	and.w	r2, r3, #1
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4313      	orrs	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	2203      	movs	r2, #3
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b02      	cmp	r3, #2
 800651a:	d003      	beq.n	8006524 <HAL_GPIO_Init+0x100>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b12      	cmp	r3, #18
 8006522:	d123      	bne.n	800656c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	08da      	lsrs	r2, r3, #3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	3208      	adds	r2, #8
 800652c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	220f      	movs	r2, #15
 800653c:	fa02 f303 	lsl.w	r3, r2, r3
 8006540:	43db      	mvns	r3, r3
 8006542:	69ba      	ldr	r2, [r7, #24]
 8006544:	4013      	ands	r3, r2
 8006546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	691a      	ldr	r2, [r3, #16]
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4313      	orrs	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	08da      	lsrs	r2, r3, #3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	3208      	adds	r2, #8
 8006566:	69b9      	ldr	r1, [r7, #24]
 8006568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2203      	movs	r2, #3
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f003 0203 	and.w	r2, r3, #3
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	69ba      	ldr	r2, [r7, #24]
 8006596:	4313      	orrs	r3, r2
 8006598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80be 	beq.w	800672a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ae:	4b65      	ldr	r3, [pc, #404]	; (8006744 <HAL_GPIO_Init+0x320>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	4a64      	ldr	r2, [pc, #400]	; (8006744 <HAL_GPIO_Init+0x320>)
 80065b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ba:	4b62      	ldr	r3, [pc, #392]	; (8006744 <HAL_GPIO_Init+0x320>)
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80065c6:	4a60      	ldr	r2, [pc, #384]	; (8006748 <HAL_GPIO_Init+0x324>)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	3302      	adds	r3, #2
 80065ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a57      	ldr	r2, [pc, #348]	; (800674c <HAL_GPIO_Init+0x328>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d037      	beq.n	8006662 <HAL_GPIO_Init+0x23e>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a56      	ldr	r2, [pc, #344]	; (8006750 <HAL_GPIO_Init+0x32c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d031      	beq.n	800665e <HAL_GPIO_Init+0x23a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a55      	ldr	r2, [pc, #340]	; (8006754 <HAL_GPIO_Init+0x330>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d02b      	beq.n	800665a <HAL_GPIO_Init+0x236>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a54      	ldr	r2, [pc, #336]	; (8006758 <HAL_GPIO_Init+0x334>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d025      	beq.n	8006656 <HAL_GPIO_Init+0x232>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a53      	ldr	r2, [pc, #332]	; (800675c <HAL_GPIO_Init+0x338>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d01f      	beq.n	8006652 <HAL_GPIO_Init+0x22e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a52      	ldr	r2, [pc, #328]	; (8006760 <HAL_GPIO_Init+0x33c>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d019      	beq.n	800664e <HAL_GPIO_Init+0x22a>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a51      	ldr	r2, [pc, #324]	; (8006764 <HAL_GPIO_Init+0x340>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d013      	beq.n	800664a <HAL_GPIO_Init+0x226>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a50      	ldr	r2, [pc, #320]	; (8006768 <HAL_GPIO_Init+0x344>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00d      	beq.n	8006646 <HAL_GPIO_Init+0x222>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a4f      	ldr	r2, [pc, #316]	; (800676c <HAL_GPIO_Init+0x348>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d007      	beq.n	8006642 <HAL_GPIO_Init+0x21e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a4e      	ldr	r2, [pc, #312]	; (8006770 <HAL_GPIO_Init+0x34c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d101      	bne.n	800663e <HAL_GPIO_Init+0x21a>
 800663a:	2309      	movs	r3, #9
 800663c:	e012      	b.n	8006664 <HAL_GPIO_Init+0x240>
 800663e:	230a      	movs	r3, #10
 8006640:	e010      	b.n	8006664 <HAL_GPIO_Init+0x240>
 8006642:	2308      	movs	r3, #8
 8006644:	e00e      	b.n	8006664 <HAL_GPIO_Init+0x240>
 8006646:	2307      	movs	r3, #7
 8006648:	e00c      	b.n	8006664 <HAL_GPIO_Init+0x240>
 800664a:	2306      	movs	r3, #6
 800664c:	e00a      	b.n	8006664 <HAL_GPIO_Init+0x240>
 800664e:	2305      	movs	r3, #5
 8006650:	e008      	b.n	8006664 <HAL_GPIO_Init+0x240>
 8006652:	2304      	movs	r3, #4
 8006654:	e006      	b.n	8006664 <HAL_GPIO_Init+0x240>
 8006656:	2303      	movs	r3, #3
 8006658:	e004      	b.n	8006664 <HAL_GPIO_Init+0x240>
 800665a:	2302      	movs	r3, #2
 800665c:	e002      	b.n	8006664 <HAL_GPIO_Init+0x240>
 800665e:	2301      	movs	r3, #1
 8006660:	e000      	b.n	8006664 <HAL_GPIO_Init+0x240>
 8006662:	2300      	movs	r3, #0
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	f002 0203 	and.w	r2, r2, #3
 800666a:	0092      	lsls	r2, r2, #2
 800666c:	4093      	lsls	r3, r2
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4313      	orrs	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006674:	4934      	ldr	r1, [pc, #208]	; (8006748 <HAL_GPIO_Init+0x324>)
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	089b      	lsrs	r3, r3, #2
 800667a:	3302      	adds	r3, #2
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006682:	4b3c      	ldr	r3, [pc, #240]	; (8006774 <HAL_GPIO_Init+0x350>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	43db      	mvns	r3, r3
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066a6:	4a33      	ldr	r2, [pc, #204]	; (8006774 <HAL_GPIO_Init+0x350>)
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80066ac:	4b31      	ldr	r3, [pc, #196]	; (8006774 <HAL_GPIO_Init+0x350>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066d0:	4a28      	ldr	r2, [pc, #160]	; (8006774 <HAL_GPIO_Init+0x350>)
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <HAL_GPIO_Init+0x350>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	43db      	mvns	r3, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4013      	ands	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066fa:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_GPIO_Init+0x350>)
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006700:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HAL_GPIO_Init+0x350>)
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	43db      	mvns	r3, r3
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	4013      	ands	r3, r2
 800670e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006724:	4a13      	ldr	r2, [pc, #76]	; (8006774 <HAL_GPIO_Init+0x350>)
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3301      	adds	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	2b0f      	cmp	r3, #15
 8006734:	f67f ae86 	bls.w	8006444 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006738:	bf00      	nop
 800673a:	3724      	adds	r7, #36	; 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40023800 	.word	0x40023800
 8006748:	40013800 	.word	0x40013800
 800674c:	40020000 	.word	0x40020000
 8006750:	40020400 	.word	0x40020400
 8006754:	40020800 	.word	0x40020800
 8006758:	40020c00 	.word	0x40020c00
 800675c:	40021000 	.word	0x40021000
 8006760:	40021400 	.word	0x40021400
 8006764:	40021800 	.word	0x40021800
 8006768:	40021c00 	.word	0x40021c00
 800676c:	40022000 	.word	0x40022000
 8006770:	40022400 	.word	0x40022400
 8006774:	40013c00 	.word	0x40013c00

08006778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	807b      	strh	r3, [r7, #2]
 8006784:	4613      	mov	r3, r2
 8006786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006788:	787b      	ldrb	r3, [r7, #1]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800678e:	887a      	ldrh	r2, [r7, #2]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006794:	e003      	b.n	800679e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006796:	887b      	ldrh	r3, [r7, #2]
 8006798:	041a      	lsls	r2, r3, #16
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	619a      	str	r2, [r3, #24]
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695a      	ldr	r2, [r3, #20]
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	4013      	ands	r3, r2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80067c2:	887b      	ldrh	r3, [r7, #2]
 80067c4:	041a      	lsls	r2, r3, #16
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80067ca:	e002      	b.n	80067d2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067cc:	887a      	ldrh	r2, [r7, #2]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	619a      	str	r2, [r3, #24]
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067e0:	b08f      	sub	sp, #60	; 0x3c
 80067e2:	af0a      	add	r7, sp, #40	; 0x28
 80067e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e116      	b.n	8006a1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d106      	bne.n	8006810 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f010 ff2e 	bl	801766c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2203      	movs	r2, #3
 8006814:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d102      	bne.n	800682a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f006 fd47 	bl	800d2c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	687e      	ldr	r6, [r7, #4]
 800683c:	466d      	mov	r5, sp
 800683e:	f106 0410 	add.w	r4, r6, #16
 8006842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800684a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800684e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006852:	1d33      	adds	r3, r6, #4
 8006854:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006856:	6838      	ldr	r0, [r7, #0]
 8006858:	f006 fc28 	bl	800d0ac <USB_CoreInit>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d005      	beq.n	800686e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0d7      	b.n	8006a1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f006 fd35 	bl	800d2e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800687a:	2300      	movs	r3, #0
 800687c:	73fb      	strb	r3, [r7, #15]
 800687e:	e04a      	b.n	8006916 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006880:	7bfa      	ldrb	r2, [r7, #15]
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	1a9b      	subs	r3, r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	333d      	adds	r3, #61	; 0x3d
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006894:	7bfa      	ldrb	r2, [r7, #15]
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	333c      	adds	r3, #60	; 0x3c
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	b298      	uxth	r0, r3
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	4613      	mov	r3, r2
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	440b      	add	r3, r1
 80068ba:	3342      	adds	r3, #66	; 0x42
 80068bc:	4602      	mov	r2, r0
 80068be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	333f      	adds	r3, #63	; 0x3f
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	1a9b      	subs	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3344      	adds	r3, #68	; 0x44
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4613      	mov	r3, r2
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	440b      	add	r3, r1
 80068f6:	3348      	adds	r3, #72	; 0x48
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068fc:	7bfa      	ldrb	r2, [r7, #15]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	1a9b      	subs	r3, r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3350      	adds	r3, #80	; 0x50
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	3301      	adds	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d3af      	bcc.n	8006880 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006920:	2300      	movs	r3, #0
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e044      	b.n	80069b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006926:	7bfa      	ldrb	r2, [r7, #15]
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800694e:	7bfa      	ldrb	r2, [r7, #15]
 8006950:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006952:	7bfa      	ldrb	r2, [r7, #15]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006968:	7bfa      	ldrb	r2, [r7, #15]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006990:	2200      	movs	r2, #0
 8006992:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
 80069ac:	3301      	adds	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
 80069b0:	7bfa      	ldrb	r2, [r7, #15]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d3b5      	bcc.n	8006926 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	687e      	ldr	r6, [r7, #4]
 80069c2:	466d      	mov	r5, sp
 80069c4:	f106 0410 	add.w	r4, r6, #16
 80069c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80069d8:	1d33      	adds	r3, r6, #4
 80069da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069dc:	6838      	ldr	r0, [r7, #0]
 80069de:	f006 fcab 	bl	800d338 <USB_DevInit>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d005      	beq.n	80069f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2202      	movs	r2, #2
 80069ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e014      	b.n	8006a1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f881 	bl	8007b14 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f007 fcfa 	bl	800e410 <USB_DevDisconnect>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_PCD_Start+0x16>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e012      	b.n	8006a62 <HAL_PCD_Start+0x3c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f007 fcc9 	bl	800e3e0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f006 fc24 	bl	800d2a0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006a6a:	b590      	push	{r4, r7, lr}
 8006a6c:	b08d      	sub	sp, #52	; 0x34
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f007 fd70 	bl	800e566 <USB_GetMode>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f040 83ca 	bne.w	8007222 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f007 fcd4 	bl	800e440 <USB_ReadInterrupts>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 83c0 	beq.w	8007220 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f007 fccb 	bl	800e440 <USB_ReadInterrupts>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d107      	bne.n	8006ac4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695a      	ldr	r2, [r3, #20]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f002 0202 	and.w	r2, r2, #2
 8006ac2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f007 fcb9 	bl	800e440 <USB_ReadInterrupts>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b10      	cmp	r3, #16
 8006ad6:	d161      	bne.n	8006b9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0210 	bic.w	r2, r2, #16
 8006ae6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f003 020f 	and.w	r2, r3, #15
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	4413      	add	r3, r2
 8006b04:	3304      	adds	r3, #4
 8006b06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	0c5b      	lsrs	r3, r3, #17
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d124      	bne.n	8006b5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d035      	beq.n	8006b8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	6a38      	ldr	r0, [r7, #32]
 8006b34:	f007 fb31 	bl	800e19a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	091b      	lsrs	r3, r3, #4
 8006b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b44:	441a      	add	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	699a      	ldr	r2, [r3, #24]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	091b      	lsrs	r3, r3, #4
 8006b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b56:	441a      	add	r2, r3
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	619a      	str	r2, [r3, #24]
 8006b5c:	e016      	b.n	8006b8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	0c5b      	lsrs	r3, r3, #17
 8006b62:	f003 030f 	and.w	r3, r3, #15
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	d110      	bne.n	8006b8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b70:	2208      	movs	r2, #8
 8006b72:	4619      	mov	r1, r3
 8006b74:	6a38      	ldr	r0, [r7, #32]
 8006b76:	f007 fb10 	bl	800e19a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b86:	441a      	add	r2, r3
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	699a      	ldr	r2, [r3, #24]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f042 0210 	orr.w	r2, r2, #16
 8006b9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f007 fc4d 	bl	800e440 <USB_ReadInterrupts>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bb0:	d16e      	bne.n	8006c90 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f007 fc53 	bl	800e466 <USB_ReadDevAllOutEpInterrupt>
 8006bc0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006bc2:	e062      	b.n	8006c8a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d057      	beq.n	8006c7e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f007 fc78 	bl	800e4ce <USB_ReadDevOutEPInterrupt>
 8006bde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00c      	beq.n	8006c04 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	015a      	lsls	r2, r3, #5
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 fdde 	bl	80077c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fed8 	bl	80079d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d008      	beq.n	8006c44 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3e:	461a      	mov	r2, r3
 8006c40:	2310      	movs	r3, #16
 8006c42:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d008      	beq.n	8006c60 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2320      	movs	r3, #32
 8006c5e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c7c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	3301      	adds	r3, #1
 8006c82:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d199      	bne.n	8006bc4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f007 fbd3 	bl	800e440 <USB_ReadInterrupts>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ca0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ca4:	f040 80c0 	bne.w	8006e28 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f007 fbf4 	bl	800e49a <USB_ReadDevAllInEpInterrupt>
 8006cb2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006cb8:	e0b2      	b.n	8006e20 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	f000 80a7 	beq.w	8006e14 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f007 fc1a 	bl	800e50a <USB_ReadDevInEPInterrupt>
 8006cd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d057      	beq.n	8006d92 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	2201      	movs	r2, #1
 8006cea:	fa02 f303 	lsl.w	r3, r2, r3
 8006cee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d02:	4013      	ands	r3, r2
 8006d04:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d12:	461a      	mov	r2, r3
 8006d14:	2301      	movs	r3, #1
 8006d16:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d132      	bne.n	8006d86 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d24:	4613      	mov	r3, r2
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	1a9b      	subs	r3, r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	440b      	add	r3, r1
 8006d2e:	3348      	adds	r3, #72	; 0x48
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4403      	add	r3, r0
 8006d40:	3344      	adds	r3, #68	; 0x44
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4419      	add	r1, r3
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	1a9b      	subs	r3, r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4403      	add	r3, r0
 8006d54:	3348      	adds	r3, #72	; 0x48
 8006d56:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d113      	bne.n	8006d86 <HAL_PCD_IRQHandler+0x31c>
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d62:	4613      	mov	r3, r2
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	1a9b      	subs	r3, r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	3350      	adds	r3, #80	; 0x50
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d108      	bne.n	8006d86 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6818      	ldr	r0, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2101      	movs	r1, #1
 8006d82:	f007 fc23 	bl	800e5cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f010 fcf0 	bl	8017772 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d008      	beq.n	8006dae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	461a      	mov	r2, r3
 8006daa:	2308      	movs	r3, #8
 8006dac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f003 0310 	and.w	r3, r3, #16
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d008      	beq.n	8006dca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d008      	beq.n	8006de6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de0:	461a      	mov	r2, r3
 8006de2:	2340      	movs	r3, #64	; 0x40
 8006de4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2302      	movs	r3, #2
 8006e00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d003      	beq.n	8006e14 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fc48 	bl	80076a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	3301      	adds	r3, #1
 8006e18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f47f af49 	bne.w	8006cba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f007 fb07 	bl	800e440 <USB_ReadInterrupts>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3c:	d122      	bne.n	8006e84 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4c:	f023 0301 	bic.w	r3, r3, #1
 8006e50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d108      	bne.n	8006e6e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e64:	2100      	movs	r1, #0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f010 fed2 	bl	8017c10 <HAL_PCDEx_LPM_Callback>
 8006e6c:	e002      	b.n	8006e74 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f010 fcf6 	bl	8017860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	695a      	ldr	r2, [r3, #20]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006e82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f007 fad9 	bl	800e440 <USB_ReadInterrupts>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e98:	d112      	bne.n	8006ec0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d102      	bne.n	8006eb0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f010 fcb2 	bl	8017814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	695a      	ldr	r2, [r3, #20]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006ebe:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f007 fabb 	bl	800e440 <USB_ReadInterrupts>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed4:	d121      	bne.n	8006f1a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006ee4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d111      	bne.n	8006f14 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efe:	089b      	lsrs	r3, r3, #2
 8006f00:	f003 020f 	and.w	r2, r3, #15
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f010 fe7f 	bl	8017c10 <HAL_PCDEx_LPM_Callback>
 8006f12:	e002      	b.n	8006f1a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f010 fc7d 	bl	8017814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f007 fa8e 	bl	800e440 <USB_ReadInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	f040 80c7 	bne.w	80070c0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f006 fb61 	bl	800d614 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f52:	2300      	movs	r3, #0
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f56:	e056      	b.n	8007006 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f64:	461a      	mov	r2, r3
 8006f66:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f6a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f8a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006faa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb8:	461a      	mov	r2, r3
 8006fba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fbe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fd0:	0151      	lsls	r1, r2, #5
 8006fd2:	69fa      	ldr	r2, [r7, #28]
 8006fd4:	440a      	add	r2, r1
 8006fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fde:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ffe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	3301      	adds	r3, #1
 8007004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800700c:	429a      	cmp	r2, r3
 800700e:	d3a3      	bcc.n	8006f58 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800701e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007022:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007028:	2b00      	cmp	r3, #0
 800702a:	d016      	beq.n	800705a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007036:	69fa      	ldr	r2, [r7, #28]
 8007038:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800703c:	f043 030b 	orr.w	r3, r3, #11
 8007040:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007052:	f043 030b 	orr.w	r3, r3, #11
 8007056:	6453      	str	r3, [r2, #68]	; 0x44
 8007058:	e015      	b.n	8007086 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007068:	4619      	mov	r1, r3
 800706a:	f242 032b 	movw	r3, #8235	; 0x202b
 800706e:	4313      	orrs	r3, r2
 8007070:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007080:	f043 030b 	orr.w	r3, r3, #11
 8007084:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007094:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007098:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6818      	ldr	r0, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80070aa:	461a      	mov	r2, r3
 80070ac:	f007 fa8e 	bl	800e5cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	695a      	ldr	r2, [r3, #20]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80070be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f007 f9bb 	bl	800e440 <USB_ReadInterrupts>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d4:	d124      	bne.n	8007120 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f007 fa52 	bl	800e584 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f006 faf6 	bl	800d6d6 <USB_GetDevSpeed>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681c      	ldr	r4, [r3, #0]
 80070f6:	f001 f999 	bl	800842c <HAL_RCC_GetHCLKFreq>
 80070fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007100:	b2db      	uxtb	r3, r3
 8007102:	461a      	mov	r2, r3
 8007104:	4620      	mov	r0, r4
 8007106:	f006 f829 	bl	800d15c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f010 fb59 	bl	80177c2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695a      	ldr	r2, [r3, #20]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800711e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4618      	mov	r0, r3
 8007126:	f007 f98b 	bl	800e440 <USB_ReadInterrupts>
 800712a:	4603      	mov	r3, r0
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b08      	cmp	r3, #8
 8007132:	d10a      	bne.n	800714a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f010 fb36 	bl	80177a6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f002 0208 	and.w	r2, r2, #8
 8007148:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f007 f976 	bl	800e440 <USB_ReadInterrupts>
 8007154:	4603      	mov	r3, r0
 8007156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800715e:	d10f      	bne.n	8007180 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	b2db      	uxtb	r3, r3
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f010 fb98 	bl	80178a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695a      	ldr	r2, [r3, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800717e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4618      	mov	r0, r3
 8007186:	f007 f95b 	bl	800e440 <USB_ReadInterrupts>
 800718a:	4603      	mov	r3, r0
 800718c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007194:	d10f      	bne.n	80071b6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f010 fb6b 	bl	801787c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695a      	ldr	r2, [r3, #20]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80071b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4618      	mov	r0, r3
 80071bc:	f007 f940 	bl	800e440 <USB_ReadInterrupts>
 80071c0:	4603      	mov	r3, r0
 80071c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ca:	d10a      	bne.n	80071e2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f010 fb79 	bl	80178c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80071e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f007 f92a 	bl	800e440 <USB_ReadInterrupts>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f003 0304 	and.w	r3, r3, #4
 80071f2:	2b04      	cmp	r3, #4
 80071f4:	d115      	bne.n	8007222 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f010 fb69 	bl	80178e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6859      	ldr	r1, [r3, #4]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	69ba      	ldr	r2, [r7, #24]
 800721a:	430a      	orrs	r2, r1
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	e000      	b.n	8007222 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007220:	bf00      	nop
    }
  }
}
 8007222:	3734      	adds	r7, #52	; 0x34
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_PCD_SetAddress+0x1a>
 800723e:	2302      	movs	r3, #2
 8007240:	e013      	b.n	800726a <HAL_PCD_SetAddress+0x42>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	78fa      	ldrb	r2, [r7, #3]
 800724e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f007 f89a 	bl	800e394 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	4608      	mov	r0, r1
 800727c:	4611      	mov	r1, r2
 800727e:	461a      	mov	r2, r3
 8007280:	4603      	mov	r3, r0
 8007282:	70fb      	strb	r3, [r7, #3]
 8007284:	460b      	mov	r3, r1
 8007286:	803b      	strh	r3, [r7, #0]
 8007288:	4613      	mov	r3, r2
 800728a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800728c:	2300      	movs	r3, #0
 800728e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	da0f      	bge.n	80072b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007298:	78fb      	ldrb	r3, [r7, #3]
 800729a:	f003 020f 	and.w	r2, r3, #15
 800729e:	4613      	mov	r3, r2
 80072a0:	00db      	lsls	r3, r3, #3
 80072a2:	1a9b      	subs	r3, r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	3338      	adds	r3, #56	; 0x38
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	705a      	strb	r2, [r3, #1]
 80072b6:	e00f      	b.n	80072d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072b8:	78fb      	ldrb	r3, [r7, #3]
 80072ba:	f003 020f 	and.w	r2, r3, #15
 80072be:	4613      	mov	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80072d8:	78fb      	ldrb	r3, [r7, #3]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	b2da      	uxtb	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80072e4:	883a      	ldrh	r2, [r7, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	78ba      	ldrb	r2, [r7, #2]
 80072ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d004      	beq.n	8007302 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007302:	78bb      	ldrb	r3, [r7, #2]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d102      	bne.n	800730e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007314:	2b01      	cmp	r3, #1
 8007316:	d101      	bne.n	800731c <HAL_PCD_EP_Open+0xaa>
 8007318:	2302      	movs	r3, #2
 800731a:	e00e      	b.n	800733a <HAL_PCD_EP_Open+0xc8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68f9      	ldr	r1, [r7, #12]
 800732a:	4618      	mov	r0, r3
 800732c:	f006 f9f8 	bl	800d720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007338:	7afb      	ldrb	r3, [r7, #11]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800734e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007352:	2b00      	cmp	r3, #0
 8007354:	da0f      	bge.n	8007376 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	f003 020f 	and.w	r2, r3, #15
 800735c:	4613      	mov	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	3338      	adds	r3, #56	; 0x38
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	4413      	add	r3, r2
 800736a:	3304      	adds	r3, #4
 800736c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2201      	movs	r2, #1
 8007372:	705a      	strb	r2, [r3, #1]
 8007374:	e00f      	b.n	8007396 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007376:	78fb      	ldrb	r3, [r7, #3]
 8007378:	f003 020f 	and.w	r2, r3, #15
 800737c:	4613      	mov	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	4413      	add	r3, r2
 800738c:	3304      	adds	r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d101      	bne.n	80073b0 <HAL_PCD_EP_Close+0x6e>
 80073ac:	2302      	movs	r3, #2
 80073ae:	e00e      	b.n	80073ce <HAL_PCD_EP_Close+0x8c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	4618      	mov	r0, r3
 80073c0:	f006 fa36 	bl	800d830 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b086      	sub	sp, #24
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	460b      	mov	r3, r1
 80073e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073e6:	7afb      	ldrb	r3, [r7, #11]
 80073e8:	f003 020f 	and.w	r2, r3, #15
 80073ec:	4613      	mov	r3, r2
 80073ee:	00db      	lsls	r3, r3, #3
 80073f0:	1a9b      	subs	r3, r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	3304      	adds	r3, #4
 80073fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2200      	movs	r2, #0
 8007410:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	b2da      	uxtb	r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d102      	bne.n	8007432 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	2b00      	cmp	r3, #0
 800743a:	d109      	bne.n	8007450 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	461a      	mov	r2, r3
 8007448:	6979      	ldr	r1, [r7, #20]
 800744a:	f006 fd19 	bl	800de80 <USB_EP0StartXfer>
 800744e:	e008      	b.n	8007462 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	b2db      	uxtb	r3, r3
 800745a:	461a      	mov	r2, r3
 800745c:	6979      	ldr	r1, [r7, #20]
 800745e:	f006 fac3 	bl	800d9e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800748e:	681b      	ldr	r3, [r3, #0]
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	607a      	str	r2, [r7, #4]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	460b      	mov	r3, r1
 80074aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	f003 020f 	and.w	r2, r3, #15
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	3338      	adds	r3, #56	; 0x38
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4413      	add	r3, r2
 80074c0:	3304      	adds	r3, #4
 80074c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2201      	movs	r2, #1
 80074da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074dc:	7afb      	ldrb	r3, [r7, #11]
 80074de:	f003 030f 	and.w	r3, r3, #15
 80074e2:	b2da      	uxtb	r2, r3
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d102      	bne.n	80074f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	461a      	mov	r2, r3
 800750c:	6979      	ldr	r1, [r7, #20]
 800750e:	f006 fcb7 	bl	800de80 <USB_EP0StartXfer>
 8007512:	e008      	b.n	8007526 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6818      	ldr	r0, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	461a      	mov	r2, r3
 8007520:	6979      	ldr	r1, [r7, #20]
 8007522:	f006 fa61 	bl	800d9e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3718      	adds	r7, #24
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	f003 020f 	and.w	r2, r3, #15
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	429a      	cmp	r2, r3
 8007548:	d901      	bls.n	800754e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e050      	b.n	80075f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800754e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007552:	2b00      	cmp	r3, #0
 8007554:	da0f      	bge.n	8007576 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007556:	78fb      	ldrb	r3, [r7, #3]
 8007558:	f003 020f 	and.w	r2, r3, #15
 800755c:	4613      	mov	r3, r2
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	1a9b      	subs	r3, r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3338      	adds	r3, #56	; 0x38
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2201      	movs	r2, #1
 8007572:	705a      	strb	r2, [r3, #1]
 8007574:	e00d      	b.n	8007592 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	4613      	mov	r3, r2
 800757a:	00db      	lsls	r3, r3, #3
 800757c:	1a9b      	subs	r3, r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	3304      	adds	r3, #4
 800758a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_PCD_EP_SetStall+0x82>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e01e      	b.n	80075f0 <HAL_PCD_EP_SetStall+0xc0>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68f9      	ldr	r1, [r7, #12]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f006 fe13 	bl	800e1ec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80075c6:	78fb      	ldrb	r3, [r7, #3]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d10a      	bne.n	80075e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	b2d9      	uxtb	r1, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80075e0:	461a      	mov	r2, r3
 80075e2:	f006 fff3 	bl	800e5cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	429a      	cmp	r2, r3
 8007610:	d901      	bls.n	8007616 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e042      	b.n	800769c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800761a:	2b00      	cmp	r3, #0
 800761c:	da0f      	bge.n	800763e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800761e:	78fb      	ldrb	r3, [r7, #3]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	3338      	adds	r3, #56	; 0x38
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4413      	add	r3, r2
 8007632:	3304      	adds	r3, #4
 8007634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	705a      	strb	r2, [r3, #1]
 800763c:	e00f      	b.n	800765e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 020f 	and.w	r2, r3, #15
 8007644:	4613      	mov	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	1a9b      	subs	r3, r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	3304      	adds	r3, #4
 8007656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	b2da      	uxtb	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007676:	2b01      	cmp	r3, #1
 8007678:	d101      	bne.n	800767e <HAL_PCD_EP_ClrStall+0x86>
 800767a:	2302      	movs	r3, #2
 800767c:	e00e      	b.n	800769c <HAL_PCD_EP_ClrStall+0xa4>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68f9      	ldr	r1, [r7, #12]
 800768c:	4618      	mov	r0, r3
 800768e:	f006 fe1b 	bl	800e2c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08a      	sub	sp, #40	; 0x28
 80076a8:	af02      	add	r7, sp, #8
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	4613      	mov	r3, r2
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	1a9b      	subs	r3, r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	3338      	adds	r3, #56	; 0x38
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	4413      	add	r3, r2
 80076c8:	3304      	adds	r3, #4
 80076ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	695b      	ldr	r3, [r3, #20]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d901      	bls.n	80076dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e06c      	b.n	80077b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	695a      	ldr	r2, [r3, #20]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d902      	bls.n	80076f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	3303      	adds	r3, #3
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007700:	e02b      	b.n	800775a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	695a      	ldr	r2, [r3, #20]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	69fa      	ldr	r2, [r7, #28]
 8007714:	429a      	cmp	r2, r3
 8007716:	d902      	bls.n	800771e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	3303      	adds	r3, #3
 8007722:	089b      	lsrs	r3, r3, #2
 8007724:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	68d9      	ldr	r1, [r3, #12]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	b2da      	uxtb	r2, r3
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007736:	b2db      	uxtb	r3, r3
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4603      	mov	r3, r0
 800773c:	6978      	ldr	r0, [r7, #20]
 800773e:	f006 fcf7 	bl	800e130 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	441a      	add	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	699a      	ldr	r2, [r3, #24]
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	b29b      	uxth	r3, r3
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	429a      	cmp	r2, r3
 800776e:	d809      	bhi.n	8007784 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007778:	429a      	cmp	r2, r3
 800777a:	d203      	bcs.n	8007784 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1be      	bne.n	8007702 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	695a      	ldr	r2, [r3, #20]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d811      	bhi.n	80077b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	2201      	movs	r2, #1
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	43db      	mvns	r3, r3
 80077aa:	6939      	ldr	r1, [r7, #16]
 80077ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077b0:	4013      	ands	r3, r2
 80077b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
	...

080077c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	333c      	adds	r3, #60	; 0x3c
 80077d8:	3304      	adds	r3, #4
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	f040 80a0 	bne.w	8007938 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d015      	beq.n	800782e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	4a72      	ldr	r2, [pc, #456]	; (80079d0 <PCD_EP_OutXfrComplete_int+0x210>)
 8007806:	4293      	cmp	r3, r2
 8007808:	f240 80dd 	bls.w	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80d7 	beq.w	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	015a      	lsls	r2, r3, #5
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	4413      	add	r3, r2
 8007820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007824:	461a      	mov	r2, r3
 8007826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782a:	6093      	str	r3, [r2, #8]
 800782c:	e0cb      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f003 0320 	and.w	r3, r3, #32
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007844:	461a      	mov	r2, r3
 8007846:	2320      	movs	r3, #32
 8007848:	6093      	str	r3, [r2, #8]
 800784a:	e0bc      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	f040 80b7 	bne.w	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4a5d      	ldr	r2, [pc, #372]	; (80079d0 <PCD_EP_OutXfrComplete_int+0x210>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d90f      	bls.n	8007880 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00a      	beq.n	8007880 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	461a      	mov	r2, r3
 8007878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787c:	6093      	str	r3, [r2, #8]
 800787e:	e0a2      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007880:	6879      	ldr	r1, [r7, #4]
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	1a9b      	subs	r3, r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007892:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	0159      	lsls	r1, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	440b      	add	r3, r1
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80078a6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	00db      	lsls	r3, r3, #3
 80078b0:	1a9b      	subs	r3, r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4403      	add	r3, r0
 80078b6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80078ba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078ce:	6819      	ldr	r1, [r3, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4403      	add	r3, r0
 80078de:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4419      	add	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	4613      	mov	r3, r2
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	1a9b      	subs	r3, r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4403      	add	r3, r0
 80078f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80078f8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d114      	bne.n	800792a <PCD_EP_OutXfrComplete_int+0x16a>
 8007900:	6879      	ldr	r1, [r7, #4]
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4613      	mov	r3, r2
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	1a9b      	subs	r3, r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d108      	bne.n	800792a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007922:	461a      	mov	r2, r3
 8007924:	2101      	movs	r1, #1
 8007926:	f006 fe51 	bl	800e5cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f00f ff03 	bl	801773c <HAL_PCD_DataOutStageCallback>
 8007936:	e046      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	4a26      	ldr	r2, [pc, #152]	; (80079d4 <PCD_EP_OutXfrComplete_int+0x214>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d124      	bne.n	800798a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	461a      	mov	r2, r3
 8007958:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800795c:	6093      	str	r3, [r2, #8]
 800795e:	e032      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d008      	beq.n	800797c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007976:	461a      	mov	r2, r3
 8007978:	2320      	movs	r3, #32
 800797a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f00f feda 	bl	801773c <HAL_PCD_DataOutStageCallback>
 8007988:	e01d      	b.n	80079c6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d114      	bne.n	80079ba <PCD_EP_OutXfrComplete_int+0x1fa>
 8007990:	6879      	ldr	r1, [r7, #4]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4613      	mov	r3, r2
 8007996:	00db      	lsls	r3, r3, #3
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d108      	bne.n	80079ba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6818      	ldr	r0, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079b2:	461a      	mov	r2, r3
 80079b4:	2100      	movs	r1, #0
 80079b6:	f006 fe09 	bl	800e5cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f00f febb 	bl	801773c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	4f54300a 	.word	0x4f54300a
 80079d4:	4f54310a 	.word	0x4f54310a

080079d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	333c      	adds	r3, #60	; 0x3c
 80079f0:	3304      	adds	r3, #4
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4a15      	ldr	r2, [pc, #84]	; (8007a60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d90e      	bls.n	8007a2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	461a      	mov	r2, r3
 8007a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f00f fe73 	bl	8017718 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <PCD_EP_OutSetupPacket_int+0x88>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d90c      	bls.n	8007a54 <PCD_EP_OutSetupPacket_int+0x7c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d108      	bne.n	8007a54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6818      	ldr	r0, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	2101      	movs	r1, #1
 8007a50:	f006 fdbc 	bl	800e5cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	4f54300a 	.word	0x4f54300a

08007a64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	70fb      	strb	r3, [r7, #3]
 8007a70:	4613      	mov	r3, r2
 8007a72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d107      	bne.n	8007a92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007a82:	883b      	ldrh	r3, [r7, #0]
 8007a84:	0419      	lsls	r1, r3, #16
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	430a      	orrs	r2, r1
 8007a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8007a90:	e028      	b.n	8007ae4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e00d      	b.n	8007ac2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
 8007aac:	3340      	adds	r3, #64	; 0x40
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	0c1b      	lsrs	r3, r3, #16
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	4413      	add	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
 8007ac2:	7bfa      	ldrb	r2, [r7, #15]
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d3ec      	bcc.n	8007aa6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007acc:	883b      	ldrh	r3, [r7, #0]
 8007ace:	0418      	lsls	r0, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	4302      	orrs	r2, r0
 8007adc:	3340      	adds	r3, #64	; 0x40
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	440b      	add	r3, r1
 8007ae2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3714      	adds	r7, #20
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr

08007af2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	887a      	ldrh	r2, [r7, #2]
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b42:	4b05      	ldr	r3, [pc, #20]	; (8007b58 <HAL_PCDEx_ActivateLPM+0x44>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	10000003 	.word	0x10000003

08007b5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e291      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 8087 	beq.w	8007c8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007b80:	4b96      	ldr	r3, [pc, #600]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 030c 	and.w	r3, r3, #12
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d00c      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b8c:	4b93      	ldr	r3, [pc, #588]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 030c 	and.w	r3, r3, #12
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d112      	bne.n	8007bbe <HAL_RCC_OscConfig+0x62>
 8007b98:	4b90      	ldr	r3, [pc, #576]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ba4:	d10b      	bne.n	8007bbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba6:	4b8d      	ldr	r3, [pc, #564]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d06c      	beq.n	8007c8c <HAL_RCC_OscConfig+0x130>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d168      	bne.n	8007c8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e26b      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc6:	d106      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x7a>
 8007bc8:	4b84      	ldr	r3, [pc, #528]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a83      	ldr	r2, [pc, #524]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e02e      	b.n	8007c34 <HAL_RCC_OscConfig+0xd8>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10c      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x9c>
 8007bde:	4b7f      	ldr	r3, [pc, #508]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a7e      	ldr	r2, [pc, #504]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4b7c      	ldr	r3, [pc, #496]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a7b      	ldr	r2, [pc, #492]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bf4:	6013      	str	r3, [r2, #0]
 8007bf6:	e01d      	b.n	8007c34 <HAL_RCC_OscConfig+0xd8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c00:	d10c      	bne.n	8007c1c <HAL_RCC_OscConfig+0xc0>
 8007c02:	4b76      	ldr	r3, [pc, #472]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a75      	ldr	r2, [pc, #468]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	4b73      	ldr	r3, [pc, #460]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a72      	ldr	r2, [pc, #456]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	e00b      	b.n	8007c34 <HAL_RCC_OscConfig+0xd8>
 8007c1c:	4b6f      	ldr	r3, [pc, #444]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a6e      	ldr	r2, [pc, #440]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c26:	6013      	str	r3, [r2, #0]
 8007c28:	4b6c      	ldr	r3, [pc, #432]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a6b      	ldr	r2, [pc, #428]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d013      	beq.n	8007c64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c3c:	f7fd ff3e 	bl	8005abc <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c44:	f7fd ff3a 	bl	8005abc <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b64      	cmp	r3, #100	; 0x64
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e21f      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c56:	4b61      	ldr	r3, [pc, #388]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0f0      	beq.n	8007c44 <HAL_RCC_OscConfig+0xe8>
 8007c62:	e014      	b.n	8007c8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c64:	f7fd ff2a 	bl	8005abc <HAL_GetTick>
 8007c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c6c:	f7fd ff26 	bl	8005abc <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b64      	cmp	r3, #100	; 0x64
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e20b      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c7e:	4b57      	ldr	r3, [pc, #348]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1f0      	bne.n	8007c6c <HAL_RCC_OscConfig+0x110>
 8007c8a:	e000      	b.n	8007c8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d069      	beq.n	8007d6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c9a:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f003 030c 	and.w	r3, r3, #12
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ca6:	4b4d      	ldr	r3, [pc, #308]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 030c 	and.w	r3, r3, #12
 8007cae:	2b08      	cmp	r3, #8
 8007cb0:	d11c      	bne.n	8007cec <HAL_RCC_OscConfig+0x190>
 8007cb2:	4b4a      	ldr	r3, [pc, #296]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d116      	bne.n	8007cec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cbe:	4b47      	ldr	r3, [pc, #284]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0302 	and.w	r3, r3, #2
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x17a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e1df      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd6:	4b41      	ldr	r3, [pc, #260]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	493d      	ldr	r1, [pc, #244]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cea:	e040      	b.n	8007d6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d023      	beq.n	8007d3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cf4:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a38      	ldr	r2, [pc, #224]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d00:	f7fd fedc 	bl	8005abc <HAL_GetTick>
 8007d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d06:	e008      	b.n	8007d1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d08:	f7fd fed8 	bl	8005abc <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d901      	bls.n	8007d1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e1bd      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d1a:	4b30      	ldr	r3, [pc, #192]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0f0      	beq.n	8007d08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d26:	4b2d      	ldr	r3, [pc, #180]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	4929      	ldr	r1, [pc, #164]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d36:	4313      	orrs	r3, r2
 8007d38:	600b      	str	r3, [r1, #0]
 8007d3a:	e018      	b.n	8007d6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d3c:	4b27      	ldr	r3, [pc, #156]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a26      	ldr	r2, [pc, #152]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d42:	f023 0301 	bic.w	r3, r3, #1
 8007d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d48:	f7fd feb8 	bl	8005abc <HAL_GetTick>
 8007d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d4e:	e008      	b.n	8007d62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d50:	f7fd feb4 	bl	8005abc <HAL_GetTick>
 8007d54:	4602      	mov	r2, r0
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e199      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1f0      	bne.n	8007d50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d038      	beq.n	8007dec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d019      	beq.n	8007db6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d82:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d86:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007d88:	f043 0301 	orr.w	r3, r3, #1
 8007d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d8e:	f7fd fe95 	bl	8005abc <HAL_GetTick>
 8007d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d94:	e008      	b.n	8007da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d96:	f7fd fe91 	bl	8005abc <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e176      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dac:	f003 0302 	and.w	r3, r3, #2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <HAL_RCC_OscConfig+0x23a>
 8007db4:	e01a      	b.n	8007dec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dba:	4a08      	ldr	r2, [pc, #32]	; (8007ddc <HAL_RCC_OscConfig+0x280>)
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc2:	f7fd fe7b 	bl	8005abc <HAL_GetTick>
 8007dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dc8:	e00a      	b.n	8007de0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dca:	f7fd fe77 	bl	8005abc <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d903      	bls.n	8007de0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e15c      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
 8007ddc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007de0:	4b91      	ldr	r3, [pc, #580]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1ee      	bne.n	8007dca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 80a4 	beq.w	8007f42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007dfa:	4b8b      	ldr	r3, [pc, #556]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10d      	bne.n	8007e22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e06:	4b88      	ldr	r3, [pc, #544]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	4a87      	ldr	r2, [pc, #540]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e10:	6413      	str	r3, [r2, #64]	; 0x40
 8007e12:	4b85      	ldr	r3, [pc, #532]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e22:	4b82      	ldr	r3, [pc, #520]	; (800802c <HAL_RCC_OscConfig+0x4d0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d118      	bne.n	8007e60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007e2e:	4b7f      	ldr	r3, [pc, #508]	; (800802c <HAL_RCC_OscConfig+0x4d0>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a7e      	ldr	r2, [pc, #504]	; (800802c <HAL_RCC_OscConfig+0x4d0>)
 8007e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e3a:	f7fd fe3f 	bl	8005abc <HAL_GetTick>
 8007e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e40:	e008      	b.n	8007e54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e42:	f7fd fe3b 	bl	8005abc <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b64      	cmp	r3, #100	; 0x64
 8007e4e:	d901      	bls.n	8007e54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e120      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e54:	4b75      	ldr	r3, [pc, #468]	; (800802c <HAL_RCC_OscConfig+0x4d0>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d0f0      	beq.n	8007e42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d106      	bne.n	8007e76 <HAL_RCC_OscConfig+0x31a>
 8007e68:	4b6f      	ldr	r3, [pc, #444]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6c:	4a6e      	ldr	r2, [pc, #440]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	6713      	str	r3, [r2, #112]	; 0x70
 8007e74:	e02d      	b.n	8007ed2 <HAL_RCC_OscConfig+0x376>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCC_OscConfig+0x33c>
 8007e7e:	4b6a      	ldr	r3, [pc, #424]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e82:	4a69      	ldr	r2, [pc, #420]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e84:	f023 0301 	bic.w	r3, r3, #1
 8007e88:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8a:	4b67      	ldr	r3, [pc, #412]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e8e:	4a66      	ldr	r2, [pc, #408]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007e90:	f023 0304 	bic.w	r3, r3, #4
 8007e94:	6713      	str	r3, [r2, #112]	; 0x70
 8007e96:	e01c      	b.n	8007ed2 <HAL_RCC_OscConfig+0x376>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	2b05      	cmp	r3, #5
 8007e9e:	d10c      	bne.n	8007eba <HAL_RCC_OscConfig+0x35e>
 8007ea0:	4b61      	ldr	r3, [pc, #388]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea4:	4a60      	ldr	r2, [pc, #384]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ea6:	f043 0304 	orr.w	r3, r3, #4
 8007eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8007eac:	4b5e      	ldr	r3, [pc, #376]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb0:	4a5d      	ldr	r2, [pc, #372]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007eb8:	e00b      	b.n	8007ed2 <HAL_RCC_OscConfig+0x376>
 8007eba:	4b5b      	ldr	r3, [pc, #364]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebe:	4a5a      	ldr	r2, [pc, #360]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec6:	4b58      	ldr	r3, [pc, #352]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eca:	4a57      	ldr	r2, [pc, #348]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ecc:	f023 0304 	bic.w	r3, r3, #4
 8007ed0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d015      	beq.n	8007f06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eda:	f7fd fdef 	bl	8005abc <HAL_GetTick>
 8007ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ee0:	e00a      	b.n	8007ef8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ee2:	f7fd fdeb 	bl	8005abc <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	1ad3      	subs	r3, r2, r3
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e0ce      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ef8:	4b4b      	ldr	r3, [pc, #300]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d0ee      	beq.n	8007ee2 <HAL_RCC_OscConfig+0x386>
 8007f04:	e014      	b.n	8007f30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f06:	f7fd fdd9 	bl	8005abc <HAL_GetTick>
 8007f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f0c:	e00a      	b.n	8007f24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f0e:	f7fd fdd5 	bl	8005abc <HAL_GetTick>
 8007f12:	4602      	mov	r2, r0
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d901      	bls.n	8007f24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e0b8      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f24:	4b40      	ldr	r3, [pc, #256]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1ee      	bne.n	8007f0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d105      	bne.n	8007f42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f36:	4b3c      	ldr	r3, [pc, #240]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3a:	4a3b      	ldr	r2, [pc, #236]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80a4 	beq.w	8008094 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 030c 	and.w	r3, r3, #12
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d06b      	beq.n	8008030 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d149      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f60:	4b31      	ldr	r3, [pc, #196]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a30      	ldr	r2, [pc, #192]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fd fda6 	bl	8005abc <HAL_GetTick>
 8007f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f74:	f7fd fda2 	bl	8005abc <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e087      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f86:	4b28      	ldr	r3, [pc, #160]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69da      	ldr	r2, [r3, #28]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	085b      	lsrs	r3, r3, #1
 8007faa:	3b01      	subs	r3, #1
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	061b      	lsls	r3, r3, #24
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	4a1b      	ldr	r2, [pc, #108]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007fba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007fbe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fc0:	4b19      	ldr	r3, [pc, #100]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a18      	ldr	r2, [pc, #96]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fcc:	f7fd fd76 	bl	8005abc <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fd4:	f7fd fd72 	bl	8005abc <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e057      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fe6:	4b10      	ldr	r3, [pc, #64]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x478>
 8007ff2:	e04f      	b.n	8008094 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a0b      	ldr	r2, [pc, #44]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 8007ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fd fd5c 	bl	8005abc <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008008:	f7fd fd58 	bl	8005abc <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e03d      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800801a:	4b03      	ldr	r3, [pc, #12]	; (8008028 <HAL_RCC_OscConfig+0x4cc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f0      	bne.n	8008008 <HAL_RCC_OscConfig+0x4ac>
 8008026:	e035      	b.n	8008094 <HAL_RCC_OscConfig+0x538>
 8008028:	40023800 	.word	0x40023800
 800802c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008030:	4b1b      	ldr	r3, [pc, #108]	; (80080a0 <HAL_RCC_OscConfig+0x544>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d028      	beq.n	8008090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008048:	429a      	cmp	r2, r3
 800804a:	d121      	bne.n	8008090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008056:	429a      	cmp	r2, r3
 8008058:	d11a      	bne.n	8008090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008060:	4013      	ands	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008066:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008068:	4293      	cmp	r3, r2
 800806a:	d111      	bne.n	8008090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	3b01      	subs	r3, #1
 800807a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800807c:	429a      	cmp	r2, r3
 800807e:	d107      	bne.n	8008090 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800808c:	429a      	cmp	r2, r3
 800808e:	d001      	beq.n	8008094 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e000      	b.n	8008096 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3718      	adds	r7, #24
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	40023800 	.word	0x40023800

080080a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e0d0      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080bc:	4b6a      	ldr	r3, [pc, #424]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	683a      	ldr	r2, [r7, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d910      	bls.n	80080ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ca:	4b67      	ldr	r3, [pc, #412]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f023 020f 	bic.w	r2, r3, #15
 80080d2:	4965      	ldr	r1, [pc, #404]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080da:	4b63      	ldr	r3, [pc, #396]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d001      	beq.n	80080ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e0b8      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d020      	beq.n	800813a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0304 	and.w	r3, r3, #4
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008104:	4b59      	ldr	r3, [pc, #356]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4a58      	ldr	r2, [pc, #352]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 800810a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800810e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800811c:	4b53      	ldr	r3, [pc, #332]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	4a52      	ldr	r2, [pc, #328]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008126:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008128:	4b50      	ldr	r3, [pc, #320]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	494d      	ldr	r1, [pc, #308]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008136:	4313      	orrs	r3, r2
 8008138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d040      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d107      	bne.n	800815e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800814e:	4b47      	ldr	r3, [pc, #284]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d115      	bne.n	8008186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e07f      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d107      	bne.n	8008176 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008166:	4b41      	ldr	r3, [pc, #260]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d109      	bne.n	8008186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	e073      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008176:	4b3d      	ldr	r3, [pc, #244]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d101      	bne.n	8008186 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e06b      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008186:	4b39      	ldr	r3, [pc, #228]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f023 0203 	bic.w	r2, r3, #3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	4936      	ldr	r1, [pc, #216]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008194:	4313      	orrs	r3, r2
 8008196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008198:	f7fd fc90 	bl	8005abc <HAL_GetTick>
 800819c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800819e:	e00a      	b.n	80081b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081a0:	f7fd fc8c 	bl	8005abc <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e053      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081b6:	4b2d      	ldr	r3, [pc, #180]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 020c 	and.w	r2, r3, #12
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d1eb      	bne.n	80081a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081c8:	4b27      	ldr	r3, [pc, #156]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d210      	bcs.n	80081f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f023 020f 	bic.w	r2, r3, #15
 80081de:	4922      	ldr	r1, [pc, #136]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e6:	4b20      	ldr	r3, [pc, #128]	; (8008268 <HAL_RCC_ClockConfig+0x1c4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d001      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e032      	b.n	800825e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d008      	beq.n	8008216 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008204:	4b19      	ldr	r3, [pc, #100]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	4916      	ldr	r1, [pc, #88]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008212:	4313      	orrs	r3, r2
 8008214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0308 	and.w	r3, r3, #8
 800821e:	2b00      	cmp	r3, #0
 8008220:	d009      	beq.n	8008236 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008222:	4b12      	ldr	r3, [pc, #72]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	00db      	lsls	r3, r3, #3
 8008230:	490e      	ldr	r1, [pc, #56]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 8008232:	4313      	orrs	r3, r2
 8008234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008236:	f000 f821 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800823a:	4601      	mov	r1, r0
 800823c:	4b0b      	ldr	r3, [pc, #44]	; (800826c <HAL_RCC_ClockConfig+0x1c8>)
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	091b      	lsrs	r3, r3, #4
 8008242:	f003 030f 	and.w	r3, r3, #15
 8008246:	4a0a      	ldr	r2, [pc, #40]	; (8008270 <HAL_RCC_ClockConfig+0x1cc>)
 8008248:	5cd3      	ldrb	r3, [r2, r3]
 800824a:	fa21 f303 	lsr.w	r3, r1, r3
 800824e:	4a09      	ldr	r2, [pc, #36]	; (8008274 <HAL_RCC_ClockConfig+0x1d0>)
 8008250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008252:	4b09      	ldr	r3, [pc, #36]	; (8008278 <HAL_RCC_ClockConfig+0x1d4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4618      	mov	r0, r3
 8008258:	f7fc fb80 	bl	800495c <HAL_InitTick>

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	40023c00 	.word	0x40023c00
 800826c:	40023800 	.word	0x40023800
 8008270:	0801ad60 	.word	0x0801ad60
 8008274:	20000000 	.word	0x20000000
 8008278:	20000004 	.word	0x20000004

0800827c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800827c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008282:	2300      	movs	r3, #0
 8008284:	607b      	str	r3, [r7, #4]
 8008286:	2300      	movs	r3, #0
 8008288:	60fb      	str	r3, [r7, #12]
 800828a:	2300      	movs	r3, #0
 800828c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008292:	4b63      	ldr	r3, [pc, #396]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 030c 	and.w	r3, r3, #12
 800829a:	2b04      	cmp	r3, #4
 800829c:	d007      	beq.n	80082ae <HAL_RCC_GetSysClockFreq+0x32>
 800829e:	2b08      	cmp	r3, #8
 80082a0:	d008      	beq.n	80082b4 <HAL_RCC_GetSysClockFreq+0x38>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f040 80b4 	bne.w	8008410 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80082a8:	4b5e      	ldr	r3, [pc, #376]	; (8008424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80082aa:	60bb      	str	r3, [r7, #8]
      break;
 80082ac:	e0b3      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80082ae:	4b5e      	ldr	r3, [pc, #376]	; (8008428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80082b0:	60bb      	str	r3, [r7, #8]
      break;
 80082b2:	e0b0      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80082b4:	4b5a      	ldr	r3, [pc, #360]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80082be:	4b58      	ldr	r3, [pc, #352]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d04a      	beq.n	8008360 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082ca:	4b55      	ldr	r3, [pc, #340]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	099b      	lsrs	r3, r3, #6
 80082d0:	f04f 0400 	mov.w	r4, #0
 80082d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80082d8:	f04f 0200 	mov.w	r2, #0
 80082dc:	ea03 0501 	and.w	r5, r3, r1
 80082e0:	ea04 0602 	and.w	r6, r4, r2
 80082e4:	4629      	mov	r1, r5
 80082e6:	4632      	mov	r2, r6
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	f04f 0400 	mov.w	r4, #0
 80082f0:	0154      	lsls	r4, r2, #5
 80082f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082f6:	014b      	lsls	r3, r1, #5
 80082f8:	4619      	mov	r1, r3
 80082fa:	4622      	mov	r2, r4
 80082fc:	1b49      	subs	r1, r1, r5
 80082fe:	eb62 0206 	sbc.w	r2, r2, r6
 8008302:	f04f 0300 	mov.w	r3, #0
 8008306:	f04f 0400 	mov.w	r4, #0
 800830a:	0194      	lsls	r4, r2, #6
 800830c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008310:	018b      	lsls	r3, r1, #6
 8008312:	1a5b      	subs	r3, r3, r1
 8008314:	eb64 0402 	sbc.w	r4, r4, r2
 8008318:	f04f 0100 	mov.w	r1, #0
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	00e2      	lsls	r2, r4, #3
 8008322:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008326:	00d9      	lsls	r1, r3, #3
 8008328:	460b      	mov	r3, r1
 800832a:	4614      	mov	r4, r2
 800832c:	195b      	adds	r3, r3, r5
 800832e:	eb44 0406 	adc.w	r4, r4, r6
 8008332:	f04f 0100 	mov.w	r1, #0
 8008336:	f04f 0200 	mov.w	r2, #0
 800833a:	0262      	lsls	r2, r4, #9
 800833c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008340:	0259      	lsls	r1, r3, #9
 8008342:	460b      	mov	r3, r1
 8008344:	4614      	mov	r4, r2
 8008346:	4618      	mov	r0, r3
 8008348:	4621      	mov	r1, r4
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f04f 0400 	mov.w	r4, #0
 8008350:	461a      	mov	r2, r3
 8008352:	4623      	mov	r3, r4
 8008354:	f7f8 fc70 	bl	8000c38 <__aeabi_uldivmod>
 8008358:	4603      	mov	r3, r0
 800835a:	460c      	mov	r4, r1
 800835c:	60fb      	str	r3, [r7, #12]
 800835e:	e049      	b.n	80083f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008360:	4b2f      	ldr	r3, [pc, #188]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	099b      	lsrs	r3, r3, #6
 8008366:	f04f 0400 	mov.w	r4, #0
 800836a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800836e:	f04f 0200 	mov.w	r2, #0
 8008372:	ea03 0501 	and.w	r5, r3, r1
 8008376:	ea04 0602 	and.w	r6, r4, r2
 800837a:	4629      	mov	r1, r5
 800837c:	4632      	mov	r2, r6
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	f04f 0400 	mov.w	r4, #0
 8008386:	0154      	lsls	r4, r2, #5
 8008388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800838c:	014b      	lsls	r3, r1, #5
 800838e:	4619      	mov	r1, r3
 8008390:	4622      	mov	r2, r4
 8008392:	1b49      	subs	r1, r1, r5
 8008394:	eb62 0206 	sbc.w	r2, r2, r6
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	f04f 0400 	mov.w	r4, #0
 80083a0:	0194      	lsls	r4, r2, #6
 80083a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80083a6:	018b      	lsls	r3, r1, #6
 80083a8:	1a5b      	subs	r3, r3, r1
 80083aa:	eb64 0402 	sbc.w	r4, r4, r2
 80083ae:	f04f 0100 	mov.w	r1, #0
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	00e2      	lsls	r2, r4, #3
 80083b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80083bc:	00d9      	lsls	r1, r3, #3
 80083be:	460b      	mov	r3, r1
 80083c0:	4614      	mov	r4, r2
 80083c2:	195b      	adds	r3, r3, r5
 80083c4:	eb44 0406 	adc.w	r4, r4, r6
 80083c8:	f04f 0100 	mov.w	r1, #0
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	02a2      	lsls	r2, r4, #10
 80083d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80083d6:	0299      	lsls	r1, r3, #10
 80083d8:	460b      	mov	r3, r1
 80083da:	4614      	mov	r4, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	4621      	mov	r1, r4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f04f 0400 	mov.w	r4, #0
 80083e6:	461a      	mov	r2, r3
 80083e8:	4623      	mov	r3, r4
 80083ea:	f7f8 fc25 	bl	8000c38 <__aeabi_uldivmod>
 80083ee:	4603      	mov	r3, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80083f4:	4b0a      	ldr	r3, [pc, #40]	; (8008420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	0c1b      	lsrs	r3, r3, #16
 80083fa:	f003 0303 	and.w	r3, r3, #3
 80083fe:	3301      	adds	r3, #1
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	fbb2 f3f3 	udiv	r3, r2, r3
 800840c:	60bb      	str	r3, [r7, #8]
      break;
 800840e:	e002      	b.n	8008416 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008410:	4b04      	ldr	r3, [pc, #16]	; (8008424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008412:	60bb      	str	r3, [r7, #8]
      break;
 8008414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008416:	68bb      	ldr	r3, [r7, #8]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008420:	40023800 	.word	0x40023800
 8008424:	00f42400 	.word	0x00f42400
 8008428:	007a1200 	.word	0x007a1200

0800842c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800842c:	b480      	push	{r7}
 800842e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <HAL_RCC_GetHCLKFreq+0x14>)
 8008432:	681b      	ldr	r3, [r3, #0]
}
 8008434:	4618      	mov	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	20000000 	.word	0x20000000

08008444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008448:	f7ff fff0 	bl	800842c <HAL_RCC_GetHCLKFreq>
 800844c:	4601      	mov	r1, r0
 800844e:	4b05      	ldr	r3, [pc, #20]	; (8008464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	0a9b      	lsrs	r3, r3, #10
 8008454:	f003 0307 	and.w	r3, r3, #7
 8008458:	4a03      	ldr	r2, [pc, #12]	; (8008468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800845a:	5cd3      	ldrb	r3, [r2, r3]
 800845c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008460:	4618      	mov	r0, r3
 8008462:	bd80      	pop	{r7, pc}
 8008464:	40023800 	.word	0x40023800
 8008468:	0801ad70 	.word	0x0801ad70

0800846c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008470:	f7ff ffdc 	bl	800842c <HAL_RCC_GetHCLKFreq>
 8008474:	4601      	mov	r1, r0
 8008476:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	0b5b      	lsrs	r3, r3, #13
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	4a03      	ldr	r2, [pc, #12]	; (8008490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008482:	5cd3      	ldrb	r3, [r2, r3]
 8008484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008488:	4618      	mov	r0, r3
 800848a:	bd80      	pop	{r7, pc}
 800848c:	40023800 	.word	0x40023800
 8008490:	0801ad70 	.word	0x0801ad70

08008494 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	220f      	movs	r2, #15
 80084a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084a4:	4b12      	ldr	r3, [pc, #72]	; (80084f0 <HAL_RCC_GetClockConfig+0x5c>)
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f003 0203 	and.w	r2, r3, #3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084b0:	4b0f      	ldr	r3, [pc, #60]	; (80084f0 <HAL_RCC_GetClockConfig+0x5c>)
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084bc:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <HAL_RCC_GetClockConfig+0x5c>)
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80084c8:	4b09      	ldr	r3, [pc, #36]	; (80084f0 <HAL_RCC_GetClockConfig+0x5c>)
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80084d6:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <HAL_RCC_GetClockConfig+0x60>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 020f 	and.w	r2, r3, #15
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	601a      	str	r2, [r3, #0]
}
 80084e2:	bf00      	nop
 80084e4:	370c      	adds	r7, #12
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	40023800 	.word	0x40023800
 80084f4:	40023c00 	.word	0x40023c00

080084f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d012      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008520:	4b69      	ldr	r3, [pc, #420]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	4a68      	ldr	r2, [pc, #416]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008526:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800852a:	6093      	str	r3, [r2, #8]
 800852c:	4b66      	ldr	r3, [pc, #408]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008534:	4964      	ldr	r1, [pc, #400]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008536:	4313      	orrs	r3, r2
 8008538:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008542:	2301      	movs	r3, #1
 8008544:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d017      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008552:	4b5d      	ldr	r3, [pc, #372]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008560:	4959      	ldr	r1, [pc, #356]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008562:	4313      	orrs	r3, r2
 8008564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008570:	d101      	bne.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008572:	2301      	movs	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800857e:	2301      	movs	r3, #1
 8008580:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800858e:	4b4e      	ldr	r3, [pc, #312]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008594:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859c:	494a      	ldr	r1, [pc, #296]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ac:	d101      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80085ca:	2301      	movs	r3, #1
 80085cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0320 	and.w	r3, r3, #32
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 808b 	beq.w	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80085dc:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	4a39      	ldr	r2, [pc, #228]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085e6:	6413      	str	r3, [r2, #64]	; 0x40
 80085e8:	4b37      	ldr	r3, [pc, #220]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085f0:	60bb      	str	r3, [r7, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80085f4:	4b35      	ldr	r3, [pc, #212]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a34      	ldr	r2, [pc, #208]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80085fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008600:	f7fd fa5c 	bl	8005abc <HAL_GetTick>
 8008604:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008606:	e008      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008608:	f7fd fa58 	bl	8005abc <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b64      	cmp	r3, #100	; 0x64
 8008614:	d901      	bls.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e31e      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800861a:	4b2c      	ldr	r3, [pc, #176]	; (80086cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008622:	2b00      	cmp	r3, #0
 8008624:	d0f0      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008626:	4b28      	ldr	r3, [pc, #160]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800862e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d035      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	429a      	cmp	r2, r3
 8008642:	d02e      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008644:	4b20      	ldr	r3, [pc, #128]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800864c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800864e:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	4a1d      	ldr	r2, [pc, #116]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008658:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008664:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008666:	4a18      	ldr	r2, [pc, #96]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800866e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b01      	cmp	r3, #1
 8008676:	d114      	bne.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008678:	f7fd fa20 	bl	8005abc <HAL_GetTick>
 800867c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800867e:	e00a      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008680:	f7fd fa1c 	bl	8005abc <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	f241 3288 	movw	r2, #5000	; 0x1388
 800868e:	4293      	cmp	r3, r2
 8008690:	d901      	bls.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e2e0      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0ee      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ae:	d111      	bne.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086bc:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086be:	400b      	ands	r3, r1
 80086c0:	4901      	ldr	r1, [pc, #4]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086c2:	4313      	orrs	r3, r2
 80086c4:	608b      	str	r3, [r1, #8]
 80086c6:	e00b      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80086c8:	40023800 	.word	0x40023800
 80086cc:	40007000 	.word	0x40007000
 80086d0:	0ffffcff 	.word	0x0ffffcff
 80086d4:	4bac      	ldr	r3, [pc, #688]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	4aab      	ldr	r2, [pc, #684]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80086de:	6093      	str	r3, [r2, #8]
 80086e0:	4ba9      	ldr	r3, [pc, #676]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ec:	49a6      	ldr	r1, [pc, #664]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d010      	beq.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80086fe:	4ba2      	ldr	r3, [pc, #648]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008704:	4aa0      	ldr	r2, [pc, #640]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800870a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800870e:	4b9e      	ldr	r3, [pc, #632]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008710:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	499b      	ldr	r1, [pc, #620]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800871a:	4313      	orrs	r3, r2
 800871c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00a      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800872c:	4b96      	ldr	r3, [pc, #600]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800872e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008732:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800873a:	4993      	ldr	r1, [pc, #588]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800873c:	4313      	orrs	r3, r2
 800873e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800874e:	4b8e      	ldr	r3, [pc, #568]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008754:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875c:	498a      	ldr	r1, [pc, #552]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008770:	4b85      	ldr	r3, [pc, #532]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008776:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800877e:	4982      	ldr	r1, [pc, #520]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008780:	4313      	orrs	r3, r2
 8008782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008792:	4b7d      	ldr	r3, [pc, #500]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008798:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	4979      	ldr	r1, [pc, #484]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087a2:	4313      	orrs	r3, r2
 80087a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087b4:	4b74      	ldr	r3, [pc, #464]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ba:	f023 0203 	bic.w	r2, r3, #3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	4971      	ldr	r1, [pc, #452]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80087d6:	4b6c      	ldr	r3, [pc, #432]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087dc:	f023 020c 	bic.w	r2, r3, #12
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087e4:	4968      	ldr	r1, [pc, #416]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80087f8:	4b63      	ldr	r3, [pc, #396]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008806:	4960      	ldr	r1, [pc, #384]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008808:	4313      	orrs	r3, r2
 800880a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800881a:	4b5b      	ldr	r3, [pc, #364]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008820:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008828:	4957      	ldr	r1, [pc, #348]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800883c:	4b52      	ldr	r3, [pc, #328]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008842:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884a:	494f      	ldr	r1, [pc, #316]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800885e:	4b4a      	ldr	r3, [pc, #296]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800886c:	4946      	ldr	r1, [pc, #280]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008880:	4b41      	ldr	r3, [pc, #260]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008886:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888e:	493e      	ldr	r1, [pc, #248]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b0:	4935      	ldr	r1, [pc, #212]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80088c4:	4b30      	ldr	r3, [pc, #192]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088d2:	492d      	ldr	r1, [pc, #180]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d011      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80088e6:	4b28      	ldr	r3, [pc, #160]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f4:	4924      	ldr	r1, [pc, #144]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088f6:	4313      	orrs	r3, r2
 80088f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008904:	d101      	bne.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008906:	2301      	movs	r3, #1
 8008908:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008916:	4b1c      	ldr	r3, [pc, #112]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008924:	4918      	ldr	r1, [pc, #96]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00b      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800893e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008948:	490f      	ldr	r1, [pc, #60]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d005      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800895e:	f040 80d8 	bne.w	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008962:	4b09      	ldr	r3, [pc, #36]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a08      	ldr	r2, [pc, #32]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008968:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800896c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800896e:	f7fd f8a5 	bl	8005abc <HAL_GetTick>
 8008972:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008974:	e00a      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008976:	f7fd f8a1 	bl	8005abc <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b64      	cmp	r3, #100	; 0x64
 8008982:	d903      	bls.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e167      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008988:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800898c:	4bad      	ldr	r3, [pc, #692]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1ee      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0301 	and.w	r3, r3, #1
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d021      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11d      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80089ac:	4ba5      	ldr	r3, [pc, #660]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 0303 	and.w	r3, r3, #3
 80089b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80089ba:	4ba2      	ldr	r3, [pc, #648]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c0:	0e1b      	lsrs	r3, r3, #24
 80089c2:	f003 030f 	and.w	r3, r3, #15
 80089c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	019a      	lsls	r2, r3, #6
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	041b      	lsls	r3, r3, #16
 80089d2:	431a      	orrs	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	061b      	lsls	r3, r3, #24
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	071b      	lsls	r3, r3, #28
 80089e0:	4998      	ldr	r1, [pc, #608]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d004      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089fc:	d00a      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02e      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a12:	d129      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a14:	4b8b      	ldr	r3, [pc, #556]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a1a:	0c1b      	lsrs	r3, r3, #16
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a22:	4b88      	ldr	r3, [pc, #544]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a28:	0f1b      	lsrs	r3, r3, #28
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	019a      	lsls	r2, r3, #6
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	041b      	lsls	r3, r3, #16
 8008a3a:	431a      	orrs	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	061b      	lsls	r3, r3, #24
 8008a42:	431a      	orrs	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	071b      	lsls	r3, r3, #28
 8008a48:	497e      	ldr	r1, [pc, #504]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008a50:	4b7c      	ldr	r3, [pc, #496]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a56:	f023 021f 	bic.w	r2, r3, #31
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	4978      	ldr	r1, [pc, #480]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01d      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a74:	4b73      	ldr	r3, [pc, #460]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a7a:	0e1b      	lsrs	r3, r3, #24
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a82:	4b70      	ldr	r3, [pc, #448]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a88:	0f1b      	lsrs	r3, r3, #28
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	019a      	lsls	r2, r3, #6
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	041b      	lsls	r3, r3, #16
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	061b      	lsls	r3, r3, #24
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	071b      	lsls	r3, r3, #28
 8008aa8:	4966      	ldr	r1, [pc, #408]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d011      	beq.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	019a      	lsls	r2, r3, #6
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	041b      	lsls	r3, r3, #16
 8008ac8:	431a      	orrs	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	071b      	lsls	r3, r3, #28
 8008ad8:	495a      	ldr	r1, [pc, #360]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ae0:	4b58      	ldr	r3, [pc, #352]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a57      	ldr	r2, [pc, #348]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aec:	f7fc ffe6 	bl	8005abc <HAL_GetTick>
 8008af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008af2:	e008      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008af4:	f7fc ffe2 	bl	8005abc <HAL_GetTick>
 8008af8:	4602      	mov	r2, r0
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	2b64      	cmp	r3, #100	; 0x64
 8008b00:	d901      	bls.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e0a8      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b06:	4b4f      	ldr	r3, [pc, #316]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0f0      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	f040 809e 	bne.w	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b1a:	4b4a      	ldr	r3, [pc, #296]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a49      	ldr	r2, [pc, #292]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b26:	f7fc ffc9 	bl	8005abc <HAL_GetTick>
 8008b2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b2c:	e008      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b2e:	f7fc ffc5 	bl	8005abc <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b64      	cmp	r3, #100	; 0x64
 8008b3a:	d901      	bls.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e08b      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b40:	4b40      	ldr	r3, [pc, #256]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b4c:	d0ef      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d009      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d02e      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d12a      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b76:	4b33      	ldr	r3, [pc, #204]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b7c:	0c1b      	lsrs	r3, r3, #16
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b84:	4b2f      	ldr	r3, [pc, #188]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8a:	0f1b      	lsrs	r3, r3, #28
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695b      	ldr	r3, [r3, #20]
 8008b96:	019a      	lsls	r2, r3, #6
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	041b      	lsls	r3, r3, #16
 8008b9c:	431a      	orrs	r2, r3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	061b      	lsls	r3, r3, #24
 8008ba4:	431a      	orrs	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	071b      	lsls	r3, r3, #28
 8008baa:	4926      	ldr	r1, [pc, #152]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bac:	4313      	orrs	r3, r2
 8008bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008bb2:	4b24      	ldr	r3, [pc, #144]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	491f      	ldr	r1, [pc, #124]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d022      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008be0:	d11d      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008be2:	4b18      	ldr	r3, [pc, #96]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bf0:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf6:	0f1b      	lsrs	r3, r3, #28
 8008bf8:	f003 0307 	and.w	r3, r3, #7
 8008bfc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	019a      	lsls	r2, r3, #6
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	061b      	lsls	r3, r3, #24
 8008c10:	431a      	orrs	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	071b      	lsls	r3, r3, #28
 8008c16:	490b      	ldr	r1, [pc, #44]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c2a:	f7fc ff47 	bl	8005abc <HAL_GetTick>
 8008c2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c30:	e00a      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008c32:	f7fc ff43 	bl	8005abc <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b64      	cmp	r3, #100	; 0x64
 8008c3e:	d903      	bls.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e009      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008c44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008c48:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c54:	d1ed      	bne.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	40023800 	.word	0x40023800

08008c64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e022      	b.n	8008cbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d105      	bne.n	8008c8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fb fbd7 	bl	800443c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2203      	movs	r2, #3
 8008c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 f814 	bl	8008cc4 <HAL_SD_InitCard>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e00a      	b.n	8008cbc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008cc4:	b5b0      	push	{r4, r5, r7, lr}
 8008cc6:	b08e      	sub	sp, #56	; 0x38
 8008cc8:	af04      	add	r7, sp, #16
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008ce0:	2376      	movs	r3, #118	; 0x76
 8008ce2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681d      	ldr	r5, [r3, #0]
 8008ce8:	466c      	mov	r4, sp
 8008cea:	f107 0314 	add.w	r3, r7, #20
 8008cee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008cf2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008cf6:	f107 0308 	add.w	r3, r7, #8
 8008cfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f003 fc6d 	bl	800c5dc <SDMMC_Init>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d001      	beq.n	8008d14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e03b      	b.n	8008d8c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d22:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f003 fca1 	bl	800c670 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d3c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 ffca 	bl	8009cd8 <SD_PowerON>
 8008d44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00b      	beq.n	8008d64 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d58:	6a3b      	ldr	r3, [r7, #32]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e013      	b.n	8008d8c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fee9 	bl	8009b3c <SD_InitCard>
 8008d6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	431a      	orrs	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3728      	adds	r7, #40	; 0x28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bdb0      	pop	{r4, r5, r7, pc}

08008d94 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08c      	sub	sp, #48	; 0x30
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
 8008da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0cc      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	f040 80c5 	bne.w	8008f54 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d907      	bls.n	8008dee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e0b3      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2203      	movs	r2, #3
 8008df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	4a53      	ldr	r2, [pc, #332]	; (8008f60 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	4a52      	ldr	r2, [pc, #328]	; (8008f64 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008e1c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	2200      	movs	r2, #0
 8008e24:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3380      	adds	r3, #128	; 0x80
 8008e30:	4619      	mov	r1, r3
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	025b      	lsls	r3, r3, #9
 8008e38:	089b      	lsrs	r3, r3, #2
 8008e3a:	f7fc fffd 	bl	8005e38 <HAL_DMA_Start_IT>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d017      	beq.n	8008e74 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008e52:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a43      	ldr	r2, [pc, #268]	; (8008f68 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e070      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0208 	orr.w	r2, r2, #8
 8008e82:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d002      	beq.n	8008e92 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	025b      	lsls	r3, r3, #9
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f003 fc7c 	bl	800c798 <SDMMC_CmdBlockLength>
 8008ea0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a2e      	ldr	r2, [pc, #184]	; (8008f68 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008eae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	431a      	orrs	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e046      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	025b      	lsls	r3, r3, #9
 8008ed2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008ed4:	2390      	movs	r3, #144	; 0x90
 8008ed6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f107 0210 	add.w	r2, r7, #16
 8008eec:	4611      	mov	r1, r2
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f003 fc26 	bl	800c740 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d90a      	bls.n	8008f10 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2282      	movs	r2, #130	; 0x82
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f06:	4618      	mov	r0, r3
 8008f08:	f003 fc8a 	bl	800c820 <SDMMC_CmdReadMultiBlock>
 8008f0c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008f0e:	e009      	b.n	8008f24 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2281      	movs	r2, #129	; 0x81
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f003 fc5d 	bl	800c7dc <SDMMC_CmdReadSingleBlock>
 8008f22:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d012      	beq.n	8008f50 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a0e      	ldr	r2, [pc, #56]	; (8008f68 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008f30:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e002      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008f50:	2300      	movs	r3, #0
 8008f52:	e000      	b.n	8008f56 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f54:	2302      	movs	r3, #2
  }
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3730      	adds	r7, #48	; 0x30
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	0800994b 	.word	0x0800994b
 8008f64:	080099bd 	.word	0x080099bd
 8008f68:	004005ff 	.word	0x004005ff

08008f6c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08c      	sub	sp, #48	; 0x30
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f88:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0cf      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 80c8 	bne.w	8009132 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	441a      	add	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d907      	bls.n	8008fc6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e0b6      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2203      	movs	r2, #3
 8008fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f042 021a 	orr.w	r2, r2, #26
 8008fe4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	4a54      	ldr	r2, [pc, #336]	; (800913c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008fec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff2:	4a53      	ldr	r2, [pc, #332]	; (8009140 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008ff4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009002:	2b01      	cmp	r3, #1
 8009004:	d002      	beq.n	800900c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	025b      	lsls	r3, r3, #9
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009014:	4618      	mov	r0, r3
 8009016:	f003 fbbf 	bl	800c798 <SDMMC_CmdBlockLength>
 800901a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00f      	beq.n	8009042 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a47      	ldr	r2, [pc, #284]	; (8009144 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8009028:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800902e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009030:	431a      	orrs	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e078      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d90a      	bls.n	800905e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	22a0      	movs	r2, #160	; 0xa0
 800904c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009054:	4618      	mov	r0, r3
 8009056:	f003 fc27 	bl	800c8a8 <SDMMC_CmdWriteMultiBlock>
 800905a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800905c:	e009      	b.n	8009072 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2290      	movs	r2, #144	; 0x90
 8009062:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800906a:	4618      	mov	r0, r3
 800906c:	f003 fbfa 	bl	800c864 <SDMMC_CmdWriteSingleBlock>
 8009070:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	2b00      	cmp	r3, #0
 8009076:	d012      	beq.n	800909e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a31      	ldr	r2, [pc, #196]	; (8009144 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800907e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009086:	431a      	orrs	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e04a      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f042 0208 	orr.w	r2, r2, #8
 80090ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3380      	adds	r3, #128	; 0x80
 80090ba:	461a      	mov	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	025b      	lsls	r3, r3, #9
 80090c0:	089b      	lsrs	r3, r3, #2
 80090c2:	f7fc feb9 	bl	8005e38 <HAL_DMA_Start_IT>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d01a      	beq.n	8009102 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 021a 	bic.w	r2, r2, #26
 80090da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a18      	ldr	r2, [pc, #96]	; (8009144 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80090e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e018      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009102:	f04f 33ff 	mov.w	r3, #4294967295
 8009106:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	025b      	lsls	r3, r3, #9
 800910c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800910e:	2390      	movs	r3, #144	; 0x90
 8009110:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009112:	2300      	movs	r3, #0
 8009114:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009116:	2300      	movs	r3, #0
 8009118:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800911a:	2301      	movs	r3, #1
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f107 0210 	add.w	r2, r7, #16
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f003 fb09 	bl	800c740 <SDMMC_ConfigData>

      return HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	e000      	b.n	8009134 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009132:	2302      	movs	r3, #2
  }
}
 8009134:	4618      	mov	r0, r3
 8009136:	3730      	adds	r7, #48	; 0x30
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	08009921 	.word	0x08009921
 8009140:	080099bd 	.word	0x080099bd
 8009144:	004005ff 	.word	0x004005ff

08009148 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009154:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800915c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d008      	beq.n	8009176 <HAL_SD_IRQHandler+0x2e>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 ffc8 	bl	800a104 <SD_Read_IT>
 8009174:	e153      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800917c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 808d 	beq.w	80092a0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800918e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	4ba3      	ldr	r3, [pc, #652]	; (8009428 <HAL_SD_IRQHandler+0x2e0>)
 800919c:	400b      	ands	r3, r1
 800919e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f022 0201 	bic.w	r2, r2, #1
 80091ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0308 	and.w	r3, r3, #8
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d039      	beq.n	800922e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d104      	bne.n	80091ce <HAL_SD_IRQHandler+0x86>
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f003 0320 	and.w	r3, r3, #32
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d011      	beq.n	80091f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f003 fb8a 	bl	800c8ec <SDMMC_CmdStopTransfer>
 80091d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d008      	beq.n	80091f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f921 	bl	8009434 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f240 523a 	movw	r2, #1338	; 0x53a
 80091fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2201      	movs	r2, #1
 8009200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d104      	bne.n	800921e <HAL_SD_IRQHandler+0xd6>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f003 0302 	and.w	r3, r3, #2
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f005 fb0c 	bl	800e83c <HAL_SD_RxCpltCallback>
 8009224:	e0fb      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f005 fafe 	bl	800e828 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800922c:	e0f7      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 80f2 	beq.w	800941e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f003 0320 	and.w	r3, r3, #32
 8009240:	2b00      	cmp	r3, #0
 8009242:	d011      	beq.n	8009268 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f003 fb4f 	bl	800c8ec <SDMMC_CmdStopTransfer>
 800924e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d008      	beq.n	8009268 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f8e6 	bl	8009434 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	f040 80d5 	bne.w	800941e <HAL_SD_IRQHandler+0x2d6>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	f040 80cf 	bne.w	800941e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0208 	bic.w	r2, r2, #8
 800928e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f005 fac5 	bl	800e828 <HAL_SD_TxCpltCallback>
}
 800929e:	e0be      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <HAL_SD_IRQHandler+0x178>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f003 0308 	and.w	r3, r3, #8
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 ff74 	bl	800a1a6 <SD_Write_IT>
 80092be:	e0ae      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 80a7 	beq.w	800941e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d005      	beq.n	80092ea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	f043 0202 	orr.w	r2, r3, #2
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f0:	f003 0308 	and.w	r3, r3, #8
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	f043 0208 	orr.w	r2, r3, #8
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d005      	beq.n	800931e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009316:	f043 0220 	orr.w	r2, r3, #32
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009324:	f003 0310 	and.w	r3, r3, #16
 8009328:	2b00      	cmp	r3, #0
 800932a:	d005      	beq.n	8009338 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	f043 0210 	orr.w	r2, r3, #16
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009350:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f003 fac8 	bl	800c8ec <SDMMC_CmdStopTransfer>
 800935c:	4602      	mov	r2, r0
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f857 	bl	8009434 <HAL_SD_ErrorCallback>
}
 8009386:	e04a      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800938e:	2b00      	cmp	r3, #0
 8009390:	d045      	beq.n	800941e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f003 0310 	and.w	r3, r3, #16
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <HAL_SD_IRQHandler+0x25e>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f003 0320 	and.w	r3, r3, #32
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d011      	beq.n	80093ca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093aa:	4a20      	ldr	r2, [pc, #128]	; (800942c <HAL_SD_IRQHandler+0x2e4>)
 80093ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fc fda0 	bl	8005ef8 <HAL_DMA_Abort_IT>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d02f      	beq.n	800941e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fb4c 	bl	8009a60 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80093c8:	e029      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d104      	bne.n	80093de <HAL_SD_IRQHandler+0x296>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0302 	and.w	r3, r3, #2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d011      	beq.n	8009402 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e2:	4a13      	ldr	r2, [pc, #76]	; (8009430 <HAL_SD_IRQHandler+0x2e8>)
 80093e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fc fd84 	bl	8005ef8 <HAL_DMA_Abort_IT>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d013      	beq.n	800941e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	4618      	mov	r0, r3
 80093fc:	f000 fb67 	bl	8009ace <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009400:	e00d      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f005 f9fc 	bl	800e814 <HAL_SD_AbortCallback>
}
 800941c:	e7ff      	b.n	800941e <HAL_SD_IRQHandler+0x2d6>
 800941e:	bf00      	nop
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	ffff3ec5 	.word	0xffff3ec5
 800942c:	08009a61 	.word	0x08009a61
 8009430:	08009acf 	.word	0x08009acf

08009434 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800943c:	bf00      	nop
 800943e:	370c      	adds	r7, #12
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009456:	0f9b      	lsrs	r3, r3, #30
 8009458:	b2da      	uxtb	r2, r3
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009462:	0e9b      	lsrs	r3, r3, #26
 8009464:	b2db      	uxtb	r3, r3
 8009466:	f003 030f 	and.w	r3, r3, #15
 800946a:	b2da      	uxtb	r2, r3
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009474:	0e1b      	lsrs	r3, r3, #24
 8009476:	b2db      	uxtb	r3, r3
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	b2da      	uxtb	r2, r3
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009486:	0c1b      	lsrs	r3, r3, #16
 8009488:	b2da      	uxtb	r2, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009492:	0a1b      	lsrs	r3, r3, #8
 8009494:	b2da      	uxtb	r2, r3
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800949e:	b2da      	uxtb	r2, r3
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094a8:	0d1b      	lsrs	r3, r3, #20
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094b4:	0c1b      	lsrs	r3, r3, #16
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	f003 030f 	and.w	r3, r3, #15
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094c6:	0bdb      	lsrs	r3, r3, #15
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094d8:	0b9b      	lsrs	r3, r3, #14
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0301 	and.w	r3, r3, #1
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094ea:	0b5b      	lsrs	r3, r3, #13
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80094fc:	0b1b      	lsrs	r3, r3, #12
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	b2da      	uxtb	r2, r3
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	2200      	movs	r2, #0
 800950e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009514:	2b00      	cmp	r3, #0
 8009516:	d163      	bne.n	80095e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800951c:	009a      	lsls	r2, r3, #2
 800951e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009522:	4013      	ands	r3, r2
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009528:	0f92      	lsrs	r2, r2, #30
 800952a:	431a      	orrs	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009534:	0edb      	lsrs	r3, r3, #27
 8009536:	b2db      	uxtb	r3, r3
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	b2da      	uxtb	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009546:	0e1b      	lsrs	r3, r3, #24
 8009548:	b2db      	uxtb	r3, r3
 800954a:	f003 0307 	and.w	r3, r3, #7
 800954e:	b2da      	uxtb	r2, r3
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	0d5b      	lsrs	r3, r3, #21
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0307 	and.w	r3, r3, #7
 8009560:	b2da      	uxtb	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956a:	0c9b      	lsrs	r3, r3, #18
 800956c:	b2db      	uxtb	r3, r3
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	b2da      	uxtb	r2, r3
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800957c:	0bdb      	lsrs	r3, r3, #15
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	b2da      	uxtb	r2, r3
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	7e1b      	ldrb	r3, [r3, #24]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	3302      	adds	r3, #2
 80095a0:	2201      	movs	r2, #1
 80095a2:	fa02 f303 	lsl.w	r3, r2, r3
 80095a6:	687a      	ldr	r2, [r7, #4]
 80095a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80095aa:	fb02 f203 	mul.w	r2, r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	7a1b      	ldrb	r3, [r3, #8]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	2201      	movs	r2, #1
 80095be:	409a      	lsls	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80095cc:	0a52      	lsrs	r2, r2, #9
 80095ce:	fb02 f203 	mul.w	r2, r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095dc:	661a      	str	r2, [r3, #96]	; 0x60
 80095de:	e031      	b.n	8009644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d11d      	bne.n	8009624 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ec:	041b      	lsls	r3, r3, #16
 80095ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095f6:	0c1b      	lsrs	r3, r3, #16
 80095f8:	431a      	orrs	r2, r3
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	3301      	adds	r3, #1
 8009604:	029a      	lsls	r2, r3, #10
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009618:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	661a      	str	r2, [r3, #96]	; 0x60
 8009622:	e00f      	b.n	8009644 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a58      	ldr	r2, [pc, #352]	; (800978c <HAL_SD_GetCardCSD+0x344>)
 800962a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009630:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e09d      	b.n	8009780 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009648:	0b9b      	lsrs	r3, r3, #14
 800964a:	b2db      	uxtb	r3, r3
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	b2da      	uxtb	r2, r3
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800965a:	09db      	lsrs	r3, r3, #7
 800965c:	b2db      	uxtb	r3, r3
 800965e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009662:	b2da      	uxtb	r2, r3
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800966c:	b2db      	uxtb	r3, r3
 800966e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967c:	0fdb      	lsrs	r3, r3, #31
 800967e:	b2da      	uxtb	r2, r3
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009688:	0f5b      	lsrs	r3, r3, #29
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	b2da      	uxtb	r2, r3
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	0e9b      	lsrs	r3, r3, #26
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0307 	and.w	r3, r3, #7
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ac:	0d9b      	lsrs	r3, r3, #22
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	f003 030f 	and.w	r3, r3, #15
 80096b4:	b2da      	uxtb	r2, r3
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096be:	0d5b      	lsrs	r3, r3, #21
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096da:	0c1b      	lsrs	r3, r3, #16
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ee:	0bdb      	lsrs	r3, r3, #15
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	b2da      	uxtb	r2, r3
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009702:	0b9b      	lsrs	r3, r3, #14
 8009704:	b2db      	uxtb	r3, r3
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	b2da      	uxtb	r2, r3
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009716:	0b5b      	lsrs	r3, r3, #13
 8009718:	b2db      	uxtb	r3, r3
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	b2da      	uxtb	r2, r3
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	0b1b      	lsrs	r3, r3, #12
 800972c:	b2db      	uxtb	r3, r3
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973e:	0a9b      	lsrs	r3, r3, #10
 8009740:	b2db      	uxtb	r3, r3
 8009742:	f003 0303 	and.w	r3, r3, #3
 8009746:	b2da      	uxtb	r2, r3
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	0a1b      	lsrs	r3, r3, #8
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	b2da      	uxtb	r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009766:	085b      	lsrs	r3, r3, #1
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976e:	b2da      	uxtb	r2, r3
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr
 800978c:	004005ff 	.word	0x004005ff

08009790 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80097e8:	b5b0      	push	{r4, r5, r7, lr}
 80097ea:	b08e      	sub	sp, #56	; 0x38
 80097ec:	af04      	add	r7, sp, #16
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2203      	movs	r2, #3
 80097f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097fe:	2b03      	cmp	r3, #3
 8009800:	d02e      	beq.n	8009860 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009808:	d106      	bne.n	8009818 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800980e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	639a      	str	r2, [r3, #56]	; 0x38
 8009816:	e029      	b.n	800986c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800981e:	d10a      	bne.n	8009836 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fb0f 	bl	8009e44 <SD_WideBus_Enable>
 8009826:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
 8009834:	e01a      	b.n	800986c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10a      	bne.n	8009852 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fb4c 	bl	8009eda <SD_WideBus_Disable>
 8009842:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	431a      	orrs	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
 8009850:	e00c      	b.n	800986c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
 800985e:	e005      	b.n	800986c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a18      	ldr	r2, [pc, #96]	; (80098dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800987a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2201      	movs	r2, #1
 8009880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e024      	b.n	80098d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681d      	ldr	r5, [r3, #0]
 80098ae:	466c      	mov	r4, sp
 80098b0:	f107 0318 	add.w	r3, r7, #24
 80098b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80098b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098bc:	f107 030c 	add.w	r3, r7, #12
 80098c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098c2:	4628      	mov	r0, r5
 80098c4:	f002 fe8a 	bl	800c5dc <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3728      	adds	r7, #40	; 0x28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bdb0      	pop	{r4, r5, r7, pc}
 80098da:	bf00      	nop
 80098dc:	004005ff 	.word	0x004005ff

080098e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80098ec:	f107 030c 	add.w	r3, r7, #12
 80098f0:	4619      	mov	r1, r3
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fa7e 	bl	8009df4 <SD_SendStatus>
 80098f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	431a      	orrs	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	0a5b      	lsrs	r3, r3, #9
 8009910:	f003 030f 	and.w	r3, r3, #15
 8009914:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009916:	693b      	ldr	r3, [r7, #16]
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800993c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800993e:	bf00      	nop
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800995c:	2b82      	cmp	r3, #130	; 0x82
 800995e:	d111      	bne.n	8009984 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4618      	mov	r0, r3
 8009966:	f002 ffc1 	bl	800c8ec <SDMMC_CmdStopTransfer>
 800996a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d008      	beq.n	8009984 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	431a      	orrs	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f7ff fd58 	bl	8009434 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0208 	bic.w	r2, r2, #8
 8009992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f240 523a 	movw	r2, #1338	; 0x53a
 800999c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80099ac:	68f8      	ldr	r0, [r7, #12]
 80099ae:	f004 ff45 	bl	800e83c <HAL_SD_RxCpltCallback>
#endif
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7fc fc40 	bl	8006250 <HAL_DMA_GetError>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d03e      	beq.n	8009a54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d002      	beq.n	80099f2 <SD_DMAError+0x36>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d12d      	bne.n	8009a4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a19      	ldr	r2, [pc, #100]	; (8009a5c <SD_DMAError+0xa0>)
 80099f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009a08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009a16:	6978      	ldr	r0, [r7, #20]
 8009a18:	f7ff ff62 	bl	80098e0 <HAL_SD_GetCardState>
 8009a1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2b06      	cmp	r3, #6
 8009a22:	d002      	beq.n	8009a2a <SD_DMAError+0x6e>
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d10a      	bne.n	8009a40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f002 ff5c 	bl	800c8ec <SDMMC_CmdStopTransfer>
 8009a34:	4602      	mov	r2, r0
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	431a      	orrs	r2, r3
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009a4e:	6978      	ldr	r0, [r7, #20]
 8009a50:	f7ff fcf0 	bl	8009434 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009a54:	bf00      	nop
 8009a56:	3718      	adds	r7, #24
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}
 8009a5c:	004005ff 	.word	0x004005ff

08009a60 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff ff31 	bl	80098e0 <HAL_SD_GetCardState>
 8009a7e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b06      	cmp	r3, #6
 8009a92:	d002      	beq.n	8009a9a <SD_DMATxAbort+0x3a>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b05      	cmp	r3, #5
 8009a98:	d10a      	bne.n	8009ab0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f002 ff24 	bl	800c8ec <SDMMC_CmdStopTransfer>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f004 feab 	bl	800e814 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009abe:	e002      	b.n	8009ac6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f7ff fcb7 	bl	8009434 <HAL_SD_ErrorCallback>
}
 8009ac6:	bf00      	nop
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b084      	sub	sp, #16
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ada:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ae4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f7ff fefa 	bl	80098e0 <HAL_SD_GetCardState>
 8009aec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b06      	cmp	r3, #6
 8009b00:	d002      	beq.n	8009b08 <SD_DMARxAbort+0x3a>
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d10a      	bne.n	8009b1e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f002 feed 	bl	800c8ec <SDMMC_CmdStopTransfer>
 8009b12:	4602      	mov	r2, r0
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d103      	bne.n	8009b2e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f004 fe74 	bl	800e814 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009b2c:	e002      	b.n	8009b34 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f7ff fc80 	bl	8009434 <HAL_SD_ErrorCallback>
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009b3c:	b5b0      	push	{r4, r5, r7, lr}
 8009b3e:	b094      	sub	sp, #80	; 0x50
 8009b40:	af04      	add	r7, sp, #16
 8009b42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009b44:	2301      	movs	r3, #1
 8009b46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f002 fd9e 	bl	800c68e <SDMMC_GetPowerState>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009b5c:	e0b7      	b.n	8009cce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b62:	2b03      	cmp	r3, #3
 8009b64:	d02f      	beq.n	8009bc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f002 ffc9 	bl	800cb02 <SDMMC_CmdSendCID>
 8009b70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <SD_InitCard+0x40>
    {
      return errorstate;
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	e0a8      	b.n	8009cce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f002 fdc9 	bl	800c71a <SDMMC_GetResponse>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	2104      	movs	r1, #4
 8009b94:	4618      	mov	r0, r3
 8009b96:	f002 fdc0 	bl	800c71a <SDMMC_GetResponse>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2108      	movs	r1, #8
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f002 fdb7 	bl	800c71a <SDMMC_GetResponse>
 8009bac:	4602      	mov	r2, r0
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	210c      	movs	r1, #12
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f002 fdae 	bl	800c71a <SDMMC_GetResponse>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d00d      	beq.n	8009bea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f107 020e 	add.w	r2, r7, #14
 8009bd6:	4611      	mov	r1, r2
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 ffcf 	bl	800cb7c <SDMMC_CmdSetRelAdd>
 8009bde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <SD_InitCard+0xae>
    {
      return errorstate;
 8009be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009be8:	e071      	b.n	8009cce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d036      	beq.n	8009c60 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bf2:	89fb      	ldrh	r3, [r7, #14]
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	4619      	mov	r1, r3
 8009c06:	4610      	mov	r0, r2
 8009c08:	f002 ff99 	bl	800cb3e <SDMMC_CmdSendCSD>
 8009c0c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c16:	e05a      	b.n	8009cce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f002 fd7b 	bl	800c71a <SDMMC_GetResponse>
 8009c24:	4602      	mov	r2, r0
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2104      	movs	r1, #4
 8009c30:	4618      	mov	r0, r3
 8009c32:	f002 fd72 	bl	800c71a <SDMMC_GetResponse>
 8009c36:	4602      	mov	r2, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2108      	movs	r1, #8
 8009c42:	4618      	mov	r0, r3
 8009c44:	f002 fd69 	bl	800c71a <SDMMC_GetResponse>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	210c      	movs	r1, #12
 8009c54:	4618      	mov	r0, r3
 8009c56:	f002 fd60 	bl	800c71a <SDMMC_GetResponse>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2104      	movs	r1, #4
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 fd57 	bl	800c71a <SDMMC_GetResponse>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	0d1a      	lsrs	r2, r3, #20
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c74:	f107 0310 	add.w	r3, r7, #16
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff fbe4 	bl	8009448 <HAL_SD_GetCardCSD>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d002      	beq.n	8009c8c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c8a:	e020      	b.n	8009cce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6819      	ldr	r1, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c94:	041b      	lsls	r3, r3, #16
 8009c96:	f04f 0400 	mov.w	r4, #0
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4623      	mov	r3, r4
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	f002 fe46 	bl	800c930 <SDMMC_CmdSelDesel>
 8009ca4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <SD_InitCard+0x174>
  {
    return errorstate;
 8009cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cae:	e00e      	b.n	8009cce <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681d      	ldr	r5, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	466c      	mov	r4, sp
 8009cb8:	f103 0210 	add.w	r2, r3, #16
 8009cbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8009cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f002 fc88 	bl	800c5dc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3740      	adds	r7, #64	; 0x40
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009cd8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f002 fe40 	bl	800c976 <SDMMC_CmdGoIdleState>
 8009cf6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	e072      	b.n	8009de8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4618      	mov	r0, r3
 8009d08:	f002 fe53 	bl	800c9b2 <SDMMC_CmdOperCond>
 8009d0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f002 fe29 	bl	800c976 <SDMMC_CmdGoIdleState>
 8009d24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d004      	beq.n	8009d36 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	e05b      	b.n	8009de8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d137      	bne.n	8009dae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2100      	movs	r1, #0
 8009d44:	4618      	mov	r0, r3
 8009d46:	f002 fe53 	bl	800c9f0 <SDMMC_CmdAppCommand>
 8009d4a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d02d      	beq.n	8009dae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d56:	e047      	b.n	8009de8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f002 fe46 	bl	800c9f0 <SDMMC_CmdAppCommand>
 8009d64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <SD_PowerON+0x98>
    {
      return errorstate;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	e03b      	b.n	8009de8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	491e      	ldr	r1, [pc, #120]	; (8009df0 <SD_PowerON+0x118>)
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 fe5c 	bl	800ca34 <SDMMC_CmdAppOperCommand>
 8009d7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009d84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d88:	e02e      	b.n	8009de8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f002 fcc2 	bl	800c71a <SDMMC_GetResponse>
 8009d96:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	0fdb      	lsrs	r3, r3, #31
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <SD_PowerON+0xcc>
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <SD_PowerON+0xce>
 8009da4:	2300      	movs	r3, #0
 8009da6:	613b      	str	r3, [r7, #16]

    count++;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	3301      	adds	r3, #1
 8009dac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d802      	bhi.n	8009dbe <SD_PowerON+0xe6>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0cc      	beq.n	8009d58 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d902      	bls.n	8009dce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dcc:	e00c      	b.n	8009de8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d003      	beq.n	8009de0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8009dde:	e002      	b.n	8009de6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	c1100000 	.word	0xc1100000

08009df4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009e04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e08:	e018      	b.n	8009e3c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	4619      	mov	r1, r3
 8009e16:	4610      	mov	r0, r2
 8009e18:	f002 fed1 	bl	800cbbe <SDMMC_CmdSendStatus>
 8009e1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d001      	beq.n	8009e28 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	e009      	b.n	8009e3c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f002 fc73 	bl	800c71a <SDMMC_GetResponse>
 8009e34:	4602      	mov	r2, r0
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f002 fc5d 	bl	800c71a <SDMMC_GetResponse>
 8009e60:	4603      	mov	r3, r0
 8009e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e6a:	d102      	bne.n	8009e72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e70:	e02f      	b.n	8009ed2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e72:	f107 030c 	add.w	r3, r7, #12
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f879 	bl	8009f70 <SD_FindSCR>
 8009e7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	e023      	b.n	8009ed2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d01c      	beq.n	8009ece <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	f002 fda5 	bl	800c9f0 <SDMMC_CmdAppCommand>
 8009ea6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	e00f      	b.n	8009ed2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f002 fddf 	bl	800ca7c <SDMMC_CmdBusWidth>
 8009ebe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d001      	beq.n	8009eca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	e003      	b.n	8009ed2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e001      	b.n	8009ed2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ece:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f002 fc12 	bl	800c71a <SDMMC_GetResponse>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009efc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f00:	d102      	bne.n	8009f08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009f02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f06:	e02f      	b.n	8009f68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009f08:	f107 030c 	add.w	r3, r7, #12
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f82e 	bl	8009f70 <SD_FindSCR>
 8009f14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	e023      	b.n	8009f68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01c      	beq.n	8009f64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f32:	041b      	lsls	r3, r3, #16
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f002 fd5a 	bl	800c9f0 <SDMMC_CmdAppCommand>
 8009f3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d001      	beq.n	8009f48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	e00f      	b.n	8009f68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f002 fd94 	bl	800ca7c <SDMMC_CmdBusWidth>
 8009f54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	e003      	b.n	8009f68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e001      	b.n	8009f68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009f64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009f70:	b590      	push	{r4, r7, lr}
 8009f72:	b08f      	sub	sp, #60	; 0x3c
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009f7a:	f7fb fd9f 	bl	8005abc <HAL_GetTick>
 8009f7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009f84:	2300      	movs	r3, #0
 8009f86:	60bb      	str	r3, [r7, #8]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	2108      	movs	r1, #8
 8009f96:	4618      	mov	r0, r3
 8009f98:	f002 fbfe 	bl	800c798 <SDMMC_CmdBlockLength>
 8009f9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	e0a9      	b.n	800a0fc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681a      	ldr	r2, [r3, #0]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb0:	041b      	lsls	r3, r3, #16
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	f002 fd1b 	bl	800c9f0 <SDMMC_CmdAppCommand>
 8009fba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d001      	beq.n	8009fc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc4:	e09a      	b.n	800a0fc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009fcc:	2308      	movs	r3, #8
 8009fce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009fd0:	2330      	movs	r3, #48	; 0x30
 8009fd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f107 0210 	add.w	r2, r7, #16
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4618      	mov	r0, r3
 8009fec:	f002 fba8 	bl	800c740 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f002 fd63 	bl	800cac0 <SDMMC_CmdSendSCR>
 8009ffa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d022      	beq.n	800a048 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a004:	e07a      	b.n	800a0fc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00e      	beq.n	800a032 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6819      	ldr	r1, [r3, #0]
 800a018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	f107 0208 	add.w	r2, r7, #8
 800a020:	18d4      	adds	r4, r2, r3
 800a022:	4608      	mov	r0, r1
 800a024:	f002 fb06 	bl	800c634 <SDMMC_ReadFIFO>
 800a028:	4603      	mov	r3, r0
 800a02a:	6023      	str	r3, [r4, #0]
      index++;
 800a02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a02e:	3301      	adds	r3, #1
 800a030:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a032:	f7fb fd43 	bl	8005abc <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d102      	bne.n	800a048 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a042:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a046:	e059      	b.n	800a0fc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a04e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a052:	4013      	ands	r3, r2
 800a054:	2b00      	cmp	r3, #0
 800a056:	d0d6      	beq.n	800a006 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a05e:	f003 0308 	and.w	r3, r3, #8
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2208      	movs	r2, #8
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a06e:	2308      	movs	r3, #8
 800a070:	e044      	b.n	800a0fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d005      	beq.n	800a08c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2202      	movs	r2, #2
 800a086:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a088:	2302      	movs	r3, #2
 800a08a:	e037      	b.n	800a0fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a092:	f003 0320 	and.w	r3, r3, #32
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a0a2:	2320      	movs	r3, #32
 800a0a4:	e02a      	b.n	800a0fc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f240 523a 	movw	r2, #1338	; 0x53a
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	061a      	lsls	r2, r3, #24
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	0a1b      	lsrs	r3, r3, #8
 800a0c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	0e1b      	lsrs	r3, r3, #24
 800a0cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d0:	601a      	str	r2, [r3, #0]
    scr++;
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	3304      	adds	r3, #4
 800a0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	061a      	lsls	r2, r3, #24
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a0e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	0a1b      	lsrs	r3, r3, #8
 800a0ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	0e1b      	lsrs	r3, r3, #24
 800a0f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	373c      	adds	r7, #60	; 0x3c
 800a100:	46bd      	mov	sp, r7
 800a102:	bd90      	pop	{r4, r7, pc}

0800a104 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a116:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d03f      	beq.n	800a19e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a11e:	2300      	movs	r3, #0
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e033      	b.n	800a18c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f002 fa83 	bl	800c634 <SDMMC_ReadFIFO>
 800a12e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	b2da      	uxtb	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	3b01      	subs	r3, #1
 800a142:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3301      	adds	r3, #1
 800a152:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3b01      	subs	r3, #1
 800a158:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	0c1b      	lsrs	r3, r3, #16
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	3b01      	subs	r3, #1
 800a16e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	0e1b      	lsrs	r3, r3, #24
 800a174:	b2da      	uxtb	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	3b01      	subs	r3, #1
 800a184:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	3301      	adds	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b07      	cmp	r3, #7
 800a190:	d9c8      	bls.n	800a124 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a19e:	bf00      	nop
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d043      	beq.n	800a248 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]
 800a1c4:	e037      	b.n	800a236 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	021a      	lsls	r2, r3, #8
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	041a      	lsls	r2, r3, #16
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3301      	adds	r3, #1
 800a200:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	3b01      	subs	r3, #1
 800a206:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	061a      	lsls	r2, r3, #24
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	4313      	orrs	r3, r2
 800a212:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	3301      	adds	r3, #1
 800a218:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f107 0208 	add.w	r2, r7, #8
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f002 fa0f 	bl	800c64e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	3301      	adds	r3, #1
 800a234:	617b      	str	r3, [r7, #20]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b07      	cmp	r3, #7
 800a23a:	d9c4      	bls.n	800a1c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68fa      	ldr	r2, [r7, #12]
 800a240:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a248:	bf00      	nop
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b084      	sub	sp, #16
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e084      	b.n	800a36c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7fa f9c7 	bl	8004610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a298:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2a2:	d902      	bls.n	800a2aa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
 800a2a8:	e002      	b.n	800a2b0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a2b8:	d007      	beq.n	800a2ca <HAL_SPI_Init+0x7a>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2c2:	d002      	beq.n	800a2ca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d10b      	bne.n	800a2ea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2da:	d903      	bls.n	800a2e4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	631a      	str	r2, [r3, #48]	; 0x30
 800a2e2:	e002      	b.n	800a2ea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685a      	ldr	r2, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	695b      	ldr	r3, [r3, #20]
 800a2fe:	431a      	orrs	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a308:	431a      	orrs	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	431a      	orrs	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6a1b      	ldr	r3, [r3, #32]
 800a314:	ea42 0103 	orr.w	r1, r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	430a      	orrs	r2, r1
 800a322:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	0c1b      	lsrs	r3, r3, #16
 800a32a:	f003 0204 	and.w	r2, r3, #4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a338:	431a      	orrs	r2, r3
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	ea42 0103 	orr.w	r1, r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	430a      	orrs	r2, r1
 800a34a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69da      	ldr	r2, [r3, #28]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a35a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d110      	bne.n	800a3b0 <HAL_SPI_Receive_DMA+0x3c>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a396:	d10b      	bne.n	800a3b0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2204      	movs	r2, #4
 800a39c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a3a0:	88fb      	ldrh	r3, [r7, #6]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	68b9      	ldr	r1, [r7, #8]
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f000 f900 	bl	800a5ac <HAL_SPI_TransmitReceive_DMA>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	e0f3      	b.n	800a598 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_SPI_Receive_DMA+0x4a>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e0ec      	b.n	800a598 <HAL_SPI_Receive_DMA+0x224>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d002      	beq.n	800a3d8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3d6:	e0da      	b.n	800a58e <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <HAL_SPI_Receive_DMA+0x70>
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d102      	bne.n	800a3ea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3e8:	e0d1      	b.n	800a58e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	88fa      	ldrh	r2, [r7, #6]
 800a402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	88fa      	ldrh	r2, [r7, #6]
 800a40a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42e:	d107      	bne.n	800a440 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a43e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a44e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a458:	d908      	bls.n	800a46c <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a468:	605a      	str	r2, [r3, #4]
 800a46a:	e042      	b.n	800a4f2 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685a      	ldr	r2, [r3, #4]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a47a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a486:	d134      	bne.n	800a4f2 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	685a      	ldr	r2, [r3, #4]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a496:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	f003 0301 	and.w	r3, r3, #1
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d111      	bne.n	800a4cc <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	685a      	ldr	r2, [r3, #4]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	085b      	lsrs	r3, r3, #1
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a4ca:	e012      	b.n	800a4f2 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f6:	4a2a      	ldr	r2, [pc, #168]	; (800a5a0 <HAL_SPI_Receive_DMA+0x22c>)
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fe:	4a29      	ldr	r2, [pc, #164]	; (800a5a4 <HAL_SPI_Receive_DMA+0x230>)
 800a500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a506:	4a28      	ldr	r2, [pc, #160]	; (800a5a8 <HAL_SPI_Receive_DMA+0x234>)
 800a508:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50e:	2200      	movs	r2, #0
 800a510:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	330c      	adds	r3, #12
 800a51c:	4619      	mov	r1, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a522:	461a      	mov	r2, r3
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	f7fb fc84 	bl	8005e38 <HAL_DMA_Start_IT>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00c      	beq.n	800a550 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a53a:	f043 0210 	orr.w	r2, r3, #16
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a54e:	e01e      	b.n	800a58e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55a:	2b40      	cmp	r3, #64	; 0x40
 800a55c:	d007      	beq.n	800a56e <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a56c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f042 0220 	orr.w	r2, r2, #32
 800a57c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685a      	ldr	r2, [r3, #4]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f042 0201 	orr.w	r2, r2, #1
 800a58c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3718      	adds	r7, #24
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	0800ac2d 	.word	0x0800ac2d
 800a5a4:	0800ab15 	.word	0x0800ab15
 800a5a8:	0800ac65 	.word	0x0800ac65

0800a5ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d101      	bne.n	800a5cc <HAL_SPI_TransmitReceive_DMA+0x20>
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	e16c      	b.n	800a8a6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a5e2:	7dbb      	ldrb	r3, [r7, #22]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d00d      	beq.n	800a604 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5ee:	d106      	bne.n	800a5fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d102      	bne.n	800a5fe <HAL_SPI_TransmitReceive_DMA+0x52>
 800a5f8:	7dbb      	ldrb	r3, [r7, #22]
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	d002      	beq.n	800a604 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a5fe:	2302      	movs	r3, #2
 800a600:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a602:	e14b      	b.n	800a89c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d005      	beq.n	800a616 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a610:	887b      	ldrh	r3, [r7, #2]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d102      	bne.n	800a61c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a61a:	e13f      	b.n	800a89c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b04      	cmp	r3, #4
 800a626:	d003      	beq.n	800a630 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2205      	movs	r2, #5
 800a62c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	887a      	ldrh	r2, [r7, #2]
 800a640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	887a      	ldrh	r2, [r7, #2]
 800a646:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	887a      	ldrh	r2, [r7, #2]
 800a652:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	887a      	ldrh	r2, [r7, #2]
 800a65a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2200      	movs	r2, #0
 800a668:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a678:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a682:	d908      	bls.n	800a696 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a692:	605a      	str	r2, [r3, #4]
 800a694:	e06f      	b.n	800a776 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a6a4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6aa:	699b      	ldr	r3, [r3, #24]
 800a6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b0:	d126      	bne.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a6b6:	f003 0301 	and.w	r3, r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10f      	bne.n	800a6de <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6cc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	085b      	lsrs	r3, r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a6dc:	e010      	b.n	800a700 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	685a      	ldr	r2, [r3, #4]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a704:	699b      	ldr	r3, [r3, #24]
 800a706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a70a:	d134      	bne.n	800a776 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a71a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a722:	b29b      	uxth	r3, r3
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d111      	bne.n	800a750 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a73a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a742:	b29b      	uxth	r3, r3
 800a744:	085b      	lsrs	r3, r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a74e:	e012      	b.n	800a776 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a75e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a766:	b29b      	uxth	r3, r3
 800a768:	085b      	lsrs	r3, r3, #1
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	3301      	adds	r3, #1
 800a76e:	b29a      	uxth	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b04      	cmp	r3, #4
 800a780:	d108      	bne.n	800a794 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a786:	4a4a      	ldr	r2, [pc, #296]	; (800a8b0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a788:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a78e:	4a49      	ldr	r2, [pc, #292]	; (800a8b4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800a790:	63da      	str	r2, [r3, #60]	; 0x3c
 800a792:	e007      	b.n	800a7a4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a798:	4a47      	ldr	r2, [pc, #284]	; (800a8b8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800a79a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a0:	4a46      	ldr	r2, [pc, #280]	; (800a8bc <HAL_SPI_TransmitReceive_DMA+0x310>)
 800a7a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a8:	4a45      	ldr	r2, [pc, #276]	; (800a8c0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800a7aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	330c      	adds	r3, #12
 800a7be:	4619      	mov	r1, r3
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	f7fb fb33 	bl	8005e38 <HAL_DMA_Start_IT>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00c      	beq.n	800a7f2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7dc:	f043 0210 	orr.w	r2, r3, #16
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a7f0:	e054      	b.n	800a89c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f042 0201 	orr.w	r2, r2, #1
 800a800:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a806:	2200      	movs	r2, #0
 800a808:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80e:	2200      	movs	r2, #0
 800a810:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a816:	2200      	movs	r2, #0
 800a818:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81e:	2200      	movs	r2, #0
 800a820:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	4619      	mov	r1, r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	330c      	adds	r3, #12
 800a832:	461a      	mov	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a838:	b29b      	uxth	r3, r3
 800a83a:	f7fb fafd 	bl	8005e38 <HAL_DMA_Start_IT>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00c      	beq.n	800a85e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a848:	f043 0210 	orr.w	r2, r3, #16
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a850:	2301      	movs	r3, #1
 800a852:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800a85c:	e01e      	b.n	800a89c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a868:	2b40      	cmp	r3, #64	; 0x40
 800a86a:	d007      	beq.n	800a87c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a87a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0220 	orr.w	r2, r2, #32
 800a88a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	685a      	ldr	r2, [r3, #4]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f042 0202 	orr.w	r2, r2, #2
 800a89a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	0800ac2d 	.word	0x0800ac2d
 800a8b4:	0800ab15 	.word	0x0800ab15
 800a8b8:	0800ac49 	.word	0x0800ac49
 800a8bc:	0800ab9b 	.word	0x0800ab9b
 800a8c0:	0800ac65 	.word	0x0800ac65

0800a8c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	099b      	lsrs	r3, r3, #6
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10f      	bne.n	800a908 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00a      	beq.n	800a908 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a8f2:	69fb      	ldr	r3, [r7, #28]
 800a8f4:	099b      	lsrs	r3, r3, #6
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d004      	beq.n	800a908 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
    return;
 800a906:	e0d8      	b.n	800aaba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	085b      	lsrs	r3, r3, #1
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d00a      	beq.n	800a92a <HAL_SPI_IRQHandler+0x66>
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	09db      	lsrs	r3, r3, #7
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	4798      	blx	r3
    return;
 800a928:	e0c7      	b.n	800aaba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	095b      	lsrs	r3, r3, #5
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10c      	bne.n	800a950 <HAL_SPI_IRQHandler+0x8c>
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	099b      	lsrs	r3, r3, #6
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d106      	bne.n	800a950 <HAL_SPI_IRQHandler+0x8c>
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	0a1b      	lsrs	r3, r3, #8
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	f000 80b5 	beq.w	800aaba <HAL_SPI_IRQHandler+0x1f6>
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	095b      	lsrs	r3, r3, #5
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	f000 80ae 	beq.w	800aaba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	099b      	lsrs	r3, r3, #6
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d023      	beq.n	800a9b2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b03      	cmp	r3, #3
 800a974:	d011      	beq.n	800a99a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a97a:	f043 0204 	orr.w	r2, r3, #4
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a982:	2300      	movs	r3, #0
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	617b      	str	r3, [r7, #20]
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	e00b      	b.n	800a9b2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a99a:	2300      	movs	r3, #0
 800a99c:	613b      	str	r3, [r7, #16]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	613b      	str	r3, [r7, #16]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	613b      	str	r3, [r7, #16]
 800a9ae:	693b      	ldr	r3, [r7, #16]
        return;
 800a9b0:	e083      	b.n	800aaba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	095b      	lsrs	r3, r3, #5
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d014      	beq.n	800a9e8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c2:	f043 0201 	orr.w	r2, r3, #1
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	60fb      	str	r3, [r7, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9e4:	601a      	str	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00c      	beq.n	800aa0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9f8:	f043 0208 	orr.w	r2, r3, #8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aa00:	2300      	movs	r3, #0
 800aa02:	60bb      	str	r3, [r7, #8]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	60bb      	str	r3, [r7, #8]
 800aa0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d050      	beq.n	800aab8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aa24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	f003 0302 	and.w	r3, r3, #2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <HAL_SPI_IRQHandler+0x17e>
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d034      	beq.n	800aaac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	685a      	ldr	r2, [r3, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0203 	bic.w	r2, r2, #3
 800aa50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d011      	beq.n	800aa7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5e:	4a18      	ldr	r2, [pc, #96]	; (800aac0 <HAL_SPI_IRQHandler+0x1fc>)
 800aa60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa66:	4618      	mov	r0, r3
 800aa68:	f7fb fa46 	bl	8005ef8 <HAL_DMA_Abort_IT>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d016      	beq.n	800aab4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8a:	4a0d      	ldr	r2, [pc, #52]	; (800aac0 <HAL_SPI_IRQHandler+0x1fc>)
 800aa8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fb fa30 	bl	8005ef8 <HAL_DMA_Abort_IT>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d00a      	beq.n	800aab4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800aaaa:	e003      	b.n	800aab4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 f827 	bl	800ab00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aab2:	e000      	b.n	800aab6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800aab4:	bf00      	nop
    return;
 800aab6:	bf00      	nop
 800aab8:	bf00      	nop
  }
}
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	0800aca5 	.word	0x0800aca5

0800aac4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr

0800aaec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800aaf4:	bf00      	nop
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab22:	f7fa ffcb 	bl	8005abc <HAL_GetTick>
 800ab26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab36:	d02a      	beq.n	800ab8e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	685a      	ldr	r2, [r3, #4]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f022 0220 	bic.w	r2, r2, #32
 800ab46:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0203 	bic.w	r2, r2, #3
 800ab56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	2164      	movs	r1, #100	; 0x64
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	f000 f98d 	bl	800ae7c <SPI_EndRxTransaction>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	2201      	movs	r2, #1
 800ab7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff ffba 	bl	800ab00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab8c:	e002      	b.n	800ab94 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f7fa fc50 	bl	8005434 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b084      	sub	sp, #16
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aba8:	f7fa ff88 	bl	8005abc <HAL_GetTick>
 800abac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abbc:	d030      	beq.n	800ac20 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0220 	bic.w	r2, r2, #32
 800abcc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800abce:	68ba      	ldr	r2, [r7, #8]
 800abd0:	2164      	movs	r1, #100	; 0x64
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f000 f9aa 	bl	800af2c <SPI_EndRxTxTransaction>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d005      	beq.n	800abea <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	f043 0220 	orr.w	r2, r3, #32
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0203 	bic.w	r2, r2, #3
 800abf8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2200      	movs	r2, #0
 800abfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f7ff ff71 	bl	800ab00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ac1e:	e002      	b.n	800ac26 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f7ff ff4f 	bl	800aac4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac38:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f7ff ff4c 	bl	800aad8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac40:	bf00      	nop
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7ff ff48 	bl	800aaec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	685a      	ldr	r2, [r3, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0203 	bic.w	r2, r2, #3
 800ac80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac86:	f043 0210 	orr.w	r2, r3, #16
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7ff ff32 	bl	800ab00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ac9c:	bf00      	nop
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2200      	movs	r2, #0
 800acb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f7ff ff1d 	bl	800ab00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800acc6:	bf00      	nop
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	603b      	str	r3, [r7, #0]
 800acda:	4613      	mov	r3, r2
 800acdc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800acde:	e04c      	b.n	800ad7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace6:	d048      	beq.n	800ad7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ace8:	f7fa fee8 	bl	8005abc <HAL_GetTick>
 800acec:	4602      	mov	r2, r0
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	1ad3      	subs	r3, r2, r3
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d902      	bls.n	800acfe <SPI_WaitFlagStateUntilTimeout+0x30>
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d13d      	bne.n	800ad7a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ad0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ad16:	d111      	bne.n	800ad3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad20:	d004      	beq.n	800ad2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad2a:	d107      	bne.n	800ad3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad44:	d10f      	bne.n	800ad66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2201      	movs	r2, #1
 800ad6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e00f      	b.n	800ad9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	4013      	ands	r3, r2
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	bf0c      	ite	eq
 800ad8a:	2301      	moveq	r3, #1
 800ad8c:	2300      	movne	r3, #0
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d1a3      	bne.n	800ace0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b084      	sub	sp, #16
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	60f8      	str	r0, [r7, #12]
 800adaa:	60b9      	str	r1, [r7, #8]
 800adac:	607a      	str	r2, [r7, #4]
 800adae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800adb0:	e057      	b.n	800ae62 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800adb8:	d106      	bne.n	800adc8 <SPI_WaitFifoStateUntilTimeout+0x26>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d103      	bne.n	800adc8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	330c      	adds	r3, #12
 800adc6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adce:	d048      	beq.n	800ae62 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800add0:	f7fa fe74 	bl	8005abc <HAL_GetTick>
 800add4:	4602      	mov	r2, r0
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d902      	bls.n	800ade6 <SPI_WaitFifoStateUntilTimeout+0x44>
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d13d      	bne.n	800ae62 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800adf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adfe:	d111      	bne.n	800ae24 <SPI_WaitFifoStateUntilTimeout+0x82>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae08:	d004      	beq.n	800ae14 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae12:	d107      	bne.n	800ae24 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2c:	d10f      	bne.n	800ae4e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ae3c:	601a      	str	r2, [r3, #0]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	e008      	b.n	800ae74 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689a      	ldr	r2, [r3, #8]
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d19f      	bne.n	800adb2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae90:	d111      	bne.n	800aeb6 <SPI_EndRxTransaction+0x3a>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae9a:	d004      	beq.n	800aea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea4:	d107      	bne.n	800aeb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2200      	movs	r2, #0
 800aebe:	2180      	movs	r1, #128	; 0x80
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f7ff ff04 	bl	800acce <SPI_WaitFlagStateUntilTimeout>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d007      	beq.n	800aedc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aed0:	f043 0220 	orr.w	r2, r3, #32
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e023      	b.n	800af24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aee4:	d11d      	bne.n	800af22 <SPI_EndRxTransaction+0xa6>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeee:	d004      	beq.n	800aefa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	689b      	ldr	r3, [r3, #8]
 800aef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aef8:	d113      	bne.n	800af22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2200      	movs	r2, #0
 800af02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af06:	68f8      	ldr	r0, [r7, #12]
 800af08:	f7ff ff4b 	bl	800ada2 <SPI_WaitFifoStateUntilTimeout>
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d007      	beq.n	800af22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af16:	f043 0220 	orr.w	r2, r3, #32
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e000      	b.n	800af24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b086      	sub	sp, #24
 800af30:	af02      	add	r7, sp, #8
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	2200      	movs	r2, #0
 800af40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7ff ff2c 	bl	800ada2 <SPI_WaitFifoStateUntilTimeout>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d007      	beq.n	800af60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af54:	f043 0220 	orr.w	r2, r3, #32
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	e027      	b.n	800afb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2200      	movs	r2, #0
 800af68:	2180      	movs	r1, #128	; 0x80
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff feaf 	bl	800acce <SPI_WaitFlagStateUntilTimeout>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d007      	beq.n	800af86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af7a:	f043 0220 	orr.w	r2, r3, #32
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800af82:	2303      	movs	r3, #3
 800af84:	e014      	b.n	800afb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff ff05 	bl	800ada2 <SPI_WaitFifoStateUntilTimeout>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d007      	beq.n	800afae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afa2:	f043 0220 	orr.w	r2, r3, #32
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800afaa:	2303      	movs	r3, #3
 800afac:	e000      	b.n	800afb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800afc4:	e00c      	b.n	800afe0 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	3301      	adds	r3, #1
 800afca:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800afd4:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800afd6:	7bfb      	ldrb	r3, [r7, #15]
 800afd8:	2b04      	cmp	r3, #4
 800afda:	d101      	bne.n	800afe0 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800afdc:	2303      	movs	r3, #3
 800afde:	e007      	b.n	800aff0 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1eb      	bne.n	800afc6 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d101      	bne.n	800b00e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e01d      	b.n	800b04a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b00      	cmp	r3, #0
 800b018:	d106      	bne.n	800b028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f815 	bl	800b052 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2202      	movs	r2, #2
 800b02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	3304      	adds	r3, #4
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f000 f986 	bl	800b34c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b05a:	bf00      	nop
 800b05c:	370c      	adds	r7, #12
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
	...

0800b068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b068:	b480      	push	{r7}
 800b06a:	b085      	sub	sp, #20
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	68da      	ldr	r2, [r3, #12]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0201 	orr.w	r2, r2, #1
 800b07e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689a      	ldr	r2, [r3, #8]
 800b086:	4b0c      	ldr	r3, [pc, #48]	; (800b0b8 <HAL_TIM_Base_Start_IT+0x50>)
 800b088:	4013      	ands	r3, r2
 800b08a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2b06      	cmp	r3, #6
 800b090:	d00b      	beq.n	800b0aa <HAL_TIM_Base_Start_IT+0x42>
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b098:	d007      	beq.n	800b0aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f042 0201 	orr.w	r2, r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	00010007 	.word	0x00010007

0800b0bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	691b      	ldr	r3, [r3, #16]
 800b0ca:	f003 0302 	and.w	r3, r3, #2
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d122      	bne.n	800b118 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	f003 0302 	and.w	r3, r3, #2
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d11b      	bne.n	800b118 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f06f 0202 	mvn.w	r2, #2
 800b0e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	699b      	ldr	r3, [r3, #24]
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f905 	bl	800b30e <HAL_TIM_IC_CaptureCallback>
 800b104:	e005      	b.n	800b112 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f8f7 	bl	800b2fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f908 	bl	800b322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	f003 0304 	and.w	r3, r3, #4
 800b122:	2b04      	cmp	r3, #4
 800b124:	d122      	bne.n	800b16c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f003 0304 	and.w	r3, r3, #4
 800b130:	2b04      	cmp	r3, #4
 800b132:	d11b      	bne.n	800b16c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f06f 0204 	mvn.w	r2, #4
 800b13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2202      	movs	r2, #2
 800b142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d003      	beq.n	800b15a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f8db 	bl	800b30e <HAL_TIM_IC_CaptureCallback>
 800b158:	e005      	b.n	800b166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f8cd 	bl	800b2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 f8de 	bl	800b322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	f003 0308 	and.w	r3, r3, #8
 800b176:	2b08      	cmp	r3, #8
 800b178:	d122      	bne.n	800b1c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b08      	cmp	r3, #8
 800b186:	d11b      	bne.n	800b1c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f06f 0208 	mvn.w	r2, #8
 800b190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2204      	movs	r2, #4
 800b196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	69db      	ldr	r3, [r3, #28]
 800b19e:	f003 0303 	and.w	r3, r3, #3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d003      	beq.n	800b1ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f000 f8b1 	bl	800b30e <HAL_TIM_IC_CaptureCallback>
 800b1ac:	e005      	b.n	800b1ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f8a3 	bl	800b2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f8b4 	bl	800b322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	f003 0310 	and.w	r3, r3, #16
 800b1ca:	2b10      	cmp	r3, #16
 800b1cc:	d122      	bne.n	800b214 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b10      	cmp	r3, #16
 800b1da:	d11b      	bne.n	800b214 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f06f 0210 	mvn.w	r2, #16
 800b1e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2208      	movs	r2, #8
 800b1ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 f887 	bl	800b30e <HAL_TIM_IC_CaptureCallback>
 800b200:	e005      	b.n	800b20e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f879 	bl	800b2fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f88a 	bl	800b322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	f003 0301 	and.w	r3, r3, #1
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d10e      	bne.n	800b240 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	f003 0301 	and.w	r3, r3, #1
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d107      	bne.n	800b240 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f06f 0201 	mvn.w	r2, #1
 800b238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f7f9 f8bc 	bl	80043b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b24a:	2b80      	cmp	r3, #128	; 0x80
 800b24c:	d10e      	bne.n	800b26c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b258:	2b80      	cmp	r3, #128	; 0x80
 800b25a:	d107      	bne.n	800b26c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f000 f91a 	bl	800b4a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	691b      	ldr	r3, [r3, #16]
 800b272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b27a:	d10e      	bne.n	800b29a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b286:	2b80      	cmp	r3, #128	; 0x80
 800b288:	d107      	bne.n	800b29a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f000 f90d 	bl	800b4b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2a4:	2b40      	cmp	r3, #64	; 0x40
 800b2a6:	d10e      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b2:	2b40      	cmp	r3, #64	; 0x40
 800b2b4:	d107      	bne.n	800b2c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f838 	bl	800b336 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	f003 0320 	and.w	r3, r3, #32
 800b2d0:	2b20      	cmp	r3, #32
 800b2d2:	d10e      	bne.n	800b2f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	f003 0320 	and.w	r3, r3, #32
 800b2de:	2b20      	cmp	r3, #32
 800b2e0:	d107      	bne.n	800b2f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f06f 0220 	mvn.w	r2, #32
 800b2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f8cd 	bl	800b48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b2f2:	bf00      	nop
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2fa:	b480      	push	{r7}
 800b2fc:	b083      	sub	sp, #12
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b302:	bf00      	nop
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b322:	b480      	push	{r7}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b32a:	bf00      	nop
 800b32c:	370c      	adds	r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
	...

0800b34c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a40      	ldr	r2, [pc, #256]	; (800b460 <TIM_Base_SetConfig+0x114>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d013      	beq.n	800b38c <TIM_Base_SetConfig+0x40>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36a:	d00f      	beq.n	800b38c <TIM_Base_SetConfig+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a3d      	ldr	r2, [pc, #244]	; (800b464 <TIM_Base_SetConfig+0x118>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00b      	beq.n	800b38c <TIM_Base_SetConfig+0x40>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a3c      	ldr	r2, [pc, #240]	; (800b468 <TIM_Base_SetConfig+0x11c>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d007      	beq.n	800b38c <TIM_Base_SetConfig+0x40>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a3b      	ldr	r2, [pc, #236]	; (800b46c <TIM_Base_SetConfig+0x120>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d003      	beq.n	800b38c <TIM_Base_SetConfig+0x40>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a3a      	ldr	r2, [pc, #232]	; (800b470 <TIM_Base_SetConfig+0x124>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d108      	bne.n	800b39e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a2f      	ldr	r2, [pc, #188]	; (800b460 <TIM_Base_SetConfig+0x114>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d02b      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ac:	d027      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a2c      	ldr	r2, [pc, #176]	; (800b464 <TIM_Base_SetConfig+0x118>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d023      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a2b      	ldr	r2, [pc, #172]	; (800b468 <TIM_Base_SetConfig+0x11c>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d01f      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a2a      	ldr	r2, [pc, #168]	; (800b46c <TIM_Base_SetConfig+0x120>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d01b      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a29      	ldr	r2, [pc, #164]	; (800b470 <TIM_Base_SetConfig+0x124>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d017      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a28      	ldr	r2, [pc, #160]	; (800b474 <TIM_Base_SetConfig+0x128>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d013      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a27      	ldr	r2, [pc, #156]	; (800b478 <TIM_Base_SetConfig+0x12c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d00f      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a26      	ldr	r2, [pc, #152]	; (800b47c <TIM_Base_SetConfig+0x130>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d00b      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a25      	ldr	r2, [pc, #148]	; (800b480 <TIM_Base_SetConfig+0x134>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d007      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a24      	ldr	r2, [pc, #144]	; (800b484 <TIM_Base_SetConfig+0x138>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d003      	beq.n	800b3fe <TIM_Base_SetConfig+0xb2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a23      	ldr	r2, [pc, #140]	; (800b488 <TIM_Base_SetConfig+0x13c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d108      	bne.n	800b410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	695b      	ldr	r3, [r3, #20]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	689a      	ldr	r2, [r3, #8]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a0a      	ldr	r2, [pc, #40]	; (800b460 <TIM_Base_SetConfig+0x114>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d003      	beq.n	800b444 <TIM_Base_SetConfig+0xf8>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a0c      	ldr	r2, [pc, #48]	; (800b470 <TIM_Base_SetConfig+0x124>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d103      	bne.n	800b44c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	691a      	ldr	r2, [r3, #16]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	615a      	str	r2, [r3, #20]
}
 800b452:	bf00      	nop
 800b454:	3714      	adds	r7, #20
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	40010000 	.word	0x40010000
 800b464:	40000400 	.word	0x40000400
 800b468:	40000800 	.word	0x40000800
 800b46c:	40000c00 	.word	0x40000c00
 800b470:	40010400 	.word	0x40010400
 800b474:	40014000 	.word	0x40014000
 800b478:	40014400 	.word	0x40014400
 800b47c:	40014800 	.word	0x40014800
 800b480:	40001800 	.word	0x40001800
 800b484:	40001c00 	.word	0x40001c00
 800b488:	40002000 	.word	0x40002000

0800b48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b083      	sub	sp, #12
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e040      	b.n	800b55c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d106      	bne.n	800b4f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7f9 f9b0 	bl	8004850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2224      	movs	r2, #36	; 0x24
 800b4f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0201 	bic.w	r2, r2, #1
 800b504:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fb7c 	bl	800bc04 <UART_SetConfig>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d101      	bne.n	800b516 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	e022      	b.n	800b55c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fe1a 	bl	800c158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	685a      	ldr	r2, [r3, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689a      	ldr	r2, [r3, #8]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fea1 	bl	800c29c <UART_CheckIdleState>
 800b55a:	4603      	mov	r3, r0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08a      	sub	sp, #40	; 0x28
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	4613      	mov	r3, r2
 800b572:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b578:	2b20      	cmp	r3, #32
 800b57a:	d17f      	bne.n	800b67c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <HAL_UART_Transmit+0x24>
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e078      	b.n	800b67e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b592:	2b01      	cmp	r3, #1
 800b594:	d101      	bne.n	800b59a <HAL_UART_Transmit+0x36>
 800b596:	2302      	movs	r3, #2
 800b598:	e071      	b.n	800b67e <HAL_UART_Transmit+0x11a>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2201      	movs	r2, #1
 800b59e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2221      	movs	r2, #33	; 0x21
 800b5ac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b5ae:	f7fa fa85 	bl	8005abc <HAL_GetTick>
 800b5b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	88fa      	ldrh	r2, [r7, #6]
 800b5b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	88fa      	ldrh	r2, [r7, #6]
 800b5c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5cc:	d108      	bne.n	800b5e0 <HAL_UART_Transmit+0x7c>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d104      	bne.n	800b5e0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	61bb      	str	r3, [r7, #24]
 800b5de:	e003      	b.n	800b5e8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b5f0:	e02c      	b.n	800b64c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2180      	movs	r1, #128	; 0x80
 800b5fc:	68f8      	ldr	r0, [r7, #12]
 800b5fe:	f000 fe7c 	bl	800c2fa <UART_WaitOnFlagUntilTimeout>
 800b602:	4603      	mov	r3, r0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b608:	2303      	movs	r3, #3
 800b60a:	e038      	b.n	800b67e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d10b      	bne.n	800b62a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	881b      	ldrh	r3, [r3, #0]
 800b616:	461a      	mov	r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	3302      	adds	r3, #2
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	e007      	b.n	800b63a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	781a      	ldrb	r2, [r3, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	3301      	adds	r3, #1
 800b638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b640:	b29b      	uxth	r3, r3
 800b642:	3b01      	subs	r3, #1
 800b644:	b29a      	uxth	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b652:	b29b      	uxth	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1cc      	bne.n	800b5f2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	2200      	movs	r2, #0
 800b660:	2140      	movs	r1, #64	; 0x40
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 fe49 	bl	800c2fa <UART_WaitOnFlagUntilTimeout>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e005      	b.n	800b67e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2220      	movs	r2, #32
 800b676:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b678:	2300      	movs	r3, #0
 800b67a:	e000      	b.n	800b67e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b67c:	2302      	movs	r3, #2
  }
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3720      	adds	r7, #32
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b08a      	sub	sp, #40	; 0x28
 800b68a:	af02      	add	r7, sp, #8
 800b68c:	60f8      	str	r0, [r7, #12]
 800b68e:	60b9      	str	r1, [r7, #8]
 800b690:	603b      	str	r3, [r7, #0]
 800b692:	4613      	mov	r3, r2
 800b694:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b69a:	2b20      	cmp	r3, #32
 800b69c:	f040 80ba 	bne.w	800b814 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <HAL_UART_Receive+0x26>
 800b6a6:	88fb      	ldrh	r3, [r7, #6]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e0b2      	b.n	800b816 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d101      	bne.n	800b6be <HAL_UART_Receive+0x38>
 800b6ba:	2302      	movs	r3, #2
 800b6bc:	e0ab      	b.n	800b816 <HAL_UART_Receive+0x190>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2222      	movs	r2, #34	; 0x22
 800b6d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b6d2:	f7fa f9f3 	bl	8005abc <HAL_GetTick>
 800b6d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	88fa      	ldrh	r2, [r7, #6]
 800b6dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	88fa      	ldrh	r2, [r7, #6]
 800b6e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	689b      	ldr	r3, [r3, #8]
 800b6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f0:	d10e      	bne.n	800b710 <HAL_UART_Receive+0x8a>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <HAL_UART_Receive+0x80>
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b704:	e02d      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	22ff      	movs	r2, #255	; 0xff
 800b70a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b70e:	e028      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d10d      	bne.n	800b734 <HAL_UART_Receive+0xae>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d104      	bne.n	800b72a <HAL_UART_Receive+0xa4>
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	22ff      	movs	r2, #255	; 0xff
 800b724:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b728:	e01b      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	227f      	movs	r2, #127	; 0x7f
 800b72e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b732:	e016      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b73c:	d10d      	bne.n	800b75a <HAL_UART_Receive+0xd4>
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d104      	bne.n	800b750 <HAL_UART_Receive+0xca>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	227f      	movs	r2, #127	; 0x7f
 800b74a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b74e:	e008      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	223f      	movs	r2, #63	; 0x3f
 800b754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b758:	e003      	b.n	800b762 <HAL_UART_Receive+0xdc>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b768:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b772:	d108      	bne.n	800b786 <HAL_UART_Receive+0x100>
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d104      	bne.n	800b786 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800b77c:	2300      	movs	r3, #0
 800b77e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	e003      	b.n	800b78e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b796:	e032      	b.n	800b7fe <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2120      	movs	r1, #32
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f000 fda9 	bl	800c2fa <UART_WaitOnFlagUntilTimeout>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e031      	b.n	800b816 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10c      	bne.n	800b7d2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	8a7b      	ldrh	r3, [r7, #18]
 800b7c2:	4013      	ands	r3, r2
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	3302      	adds	r3, #2
 800b7ce:	61bb      	str	r3, [r7, #24]
 800b7d0:	e00c      	b.n	800b7ec <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7d8:	b2da      	uxtb	r2, r3
 800b7da:	8a7b      	ldrh	r3, [r7, #18]
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	4013      	ands	r3, r2
 800b7e0:	b2da      	uxtb	r2, r3
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	3b01      	subs	r3, #1
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b804:	b29b      	uxth	r3, r3
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1c6      	bne.n	800b798 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2220      	movs	r2, #32
 800b80e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	e000      	b.n	800b816 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800b814:	2302      	movs	r3, #2
  }
}
 800b816:	4618      	mov	r0, r3
 800b818:	3720      	adds	r7, #32
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	4613      	mov	r3, r2
 800b82c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b832:	2b20      	cmp	r3, #32
 800b834:	f040 808a 	bne.w	800b94c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <HAL_UART_Receive_IT+0x24>
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e082      	b.n	800b94e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b84e:	2b01      	cmp	r3, #1
 800b850:	d101      	bne.n	800b856 <HAL_UART_Receive_IT+0x36>
 800b852:	2302      	movs	r3, #2
 800b854:	e07b      	b.n	800b94e <HAL_UART_Receive_IT+0x12e>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	88fa      	ldrh	r2, [r7, #6]
 800b868:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	88fa      	ldrh	r2, [r7, #6]
 800b870:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	689b      	ldr	r3, [r3, #8]
 800b87e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b882:	d10e      	bne.n	800b8a2 <HAL_UART_Receive_IT+0x82>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d105      	bne.n	800b898 <HAL_UART_Receive_IT+0x78>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b896:	e02d      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	22ff      	movs	r2, #255	; 0xff
 800b89c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b8a0:	e028      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	689b      	ldr	r3, [r3, #8]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10d      	bne.n	800b8c6 <HAL_UART_Receive_IT+0xa6>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d104      	bne.n	800b8bc <HAL_UART_Receive_IT+0x9c>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	22ff      	movs	r2, #255	; 0xff
 800b8b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b8ba:	e01b      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	227f      	movs	r2, #127	; 0x7f
 800b8c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b8c4:	e016      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ce:	d10d      	bne.n	800b8ec <HAL_UART_Receive_IT+0xcc>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d104      	bne.n	800b8e2 <HAL_UART_Receive_IT+0xc2>
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	227f      	movs	r2, #127	; 0x7f
 800b8dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b8e0:	e008      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	223f      	movs	r2, #63	; 0x3f
 800b8e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b8ea:	e003      	b.n	800b8f4 <HAL_UART_Receive_IT+0xd4>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2222      	movs	r2, #34	; 0x22
 800b8fe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	689a      	ldr	r2, [r3, #8]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f042 0201 	orr.w	r2, r2, #1
 800b90e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b918:	d107      	bne.n	800b92a <HAL_UART_Receive_IT+0x10a>
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	691b      	ldr	r3, [r3, #16]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d103      	bne.n	800b92a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	4a0d      	ldr	r2, [pc, #52]	; (800b95c <HAL_UART_Receive_IT+0x13c>)
 800b926:	661a      	str	r2, [r3, #96]	; 0x60
 800b928:	e002      	b.n	800b930 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	4a0c      	ldr	r2, [pc, #48]	; (800b960 <HAL_UART_Receive_IT+0x140>)
 800b92e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2200      	movs	r2, #0
 800b934:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b946:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b948:	2300      	movs	r3, #0
 800b94a:	e000      	b.n	800b94e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b94c:	2302      	movs	r3, #2
  }
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3714      	adds	r7, #20
 800b952:	46bd      	mov	sp, r7
 800b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop
 800b95c:	0800c535 	.word	0x0800c535
 800b960:	0800c48f 	.word	0x0800c48f

0800b964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b984:	69fa      	ldr	r2, [r7, #28]
 800b986:	f640 030f 	movw	r3, #2063	; 0x80f
 800b98a:	4013      	ands	r3, r2
 800b98c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d113      	bne.n	800b9bc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b994:	69fb      	ldr	r3, [r7, #28]
 800b996:	f003 0320 	and.w	r3, r3, #32
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00e      	beq.n	800b9bc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b99e:	69bb      	ldr	r3, [r7, #24]
 800b9a0:	f003 0320 	and.w	r3, r3, #32
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d009      	beq.n	800b9bc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 8100 	beq.w	800bbb2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
      }
      return;
 800b9ba:	e0fa      	b.n	800bbb2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f000 80d5 	beq.w	800bb6e <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d105      	bne.n	800b9da <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 80ca 	beq.w	800bb6e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00e      	beq.n	800ba02 <HAL_UART_IRQHandler+0x9e>
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d009      	beq.n	800ba02 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9fa:	f043 0201 	orr.w	r2, r3, #1
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00e      	beq.n	800ba2a <HAL_UART_IRQHandler+0xc6>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	f003 0301 	and.w	r3, r3, #1
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba22:	f043 0204 	orr.w	r2, r3, #4
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d00e      	beq.n	800ba52 <HAL_UART_IRQHandler+0xee>
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d009      	beq.n	800ba52 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2204      	movs	r2, #4
 800ba44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba4a:	f043 0202 	orr.w	r2, r3, #2
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d013      	beq.n	800ba84 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f003 0320 	and.w	r3, r3, #32
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d104      	bne.n	800ba70 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d009      	beq.n	800ba84 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2208      	movs	r2, #8
 800ba76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba7c:	f043 0208 	orr.w	r2, r3, #8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba84:	69fb      	ldr	r3, [r7, #28]
 800ba86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00f      	beq.n	800baae <HAL_UART_IRQHandler+0x14a>
 800ba8e:	69bb      	ldr	r3, [r7, #24]
 800ba90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00a      	beq.n	800baae <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baa6:	f043 0220 	orr.w	r2, r3, #32
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d07f      	beq.n	800bbb6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	f003 0320 	and.w	r3, r3, #32
 800babc:	2b00      	cmp	r3, #0
 800babe:	d00c      	beq.n	800bada <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	f003 0320 	and.w	r3, r3, #32
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bade:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baea:	2b40      	cmp	r3, #64	; 0x40
 800baec:	d004      	beq.n	800baf8 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d031      	beq.n	800bb5c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc79 	bl	800c3f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b40      	cmp	r3, #64	; 0x40
 800bb0a:	d123      	bne.n	800bb54 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689a      	ldr	r2, [r3, #8]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb1a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d013      	beq.n	800bb4c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb28:	4a26      	ldr	r2, [pc, #152]	; (800bbc4 <HAL_UART_IRQHandler+0x260>)
 800bb2a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb30:	4618      	mov	r0, r3
 800bb32:	f7fa f9e1 	bl	8005ef8 <HAL_DMA_Abort_IT>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d016      	beq.n	800bb6a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bb46:	4610      	mov	r0, r2
 800bb48:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb4a:	e00e      	b.n	800bb6a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f84f 	bl	800bbf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb52:	e00a      	b.n	800bb6a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f84b 	bl	800bbf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb5a:	e006      	b.n	800bb6a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f847 	bl	800bbf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800bb68:	e025      	b.n	800bbb6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb6a:	bf00      	nop
    return;
 800bb6c:	e023      	b.n	800bbb6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00d      	beq.n	800bb94 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d008      	beq.n	800bb94 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d017      	beq.n	800bbba <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	4798      	blx	r3
    }
    return;
 800bb92:	e012      	b.n	800bbba <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00e      	beq.n	800bbbc <HAL_UART_IRQHandler+0x258>
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d009      	beq.n	800bbbc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fc57 	bl	800c45c <UART_EndTransmit_IT>
    return;
 800bbae:	bf00      	nop
 800bbb0:	e004      	b.n	800bbbc <HAL_UART_IRQHandler+0x258>
      return;
 800bbb2:	bf00      	nop
 800bbb4:	e002      	b.n	800bbbc <HAL_UART_IRQHandler+0x258>
    return;
 800bbb6:	bf00      	nop
 800bbb8:	e000      	b.n	800bbbc <HAL_UART_IRQHandler+0x258>
    return;
 800bbba:	bf00      	nop
  }

}
 800bbbc:	3720      	adds	r7, #32
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800c431 	.word	0x0800c431

0800bbc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	695b      	ldr	r3, [r3, #20]
 800bc22:	431a      	orrs	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	4313      	orrs	r3, r2
 800bc2a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	4bb1      	ldr	r3, [pc, #708]	; (800bef8 <UART_SetConfig+0x2f4>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	6939      	ldr	r1, [r7, #16]
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	68da      	ldr	r2, [r3, #12]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	430a      	orrs	r2, r1
 800bc54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6a1b      	ldr	r3, [r3, #32]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	693a      	ldr	r2, [r7, #16]
 800bc76:	430a      	orrs	r2, r1
 800bc78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a9f      	ldr	r2, [pc, #636]	; (800befc <UART_SetConfig+0x2f8>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d121      	bne.n	800bcc8 <UART_SetConfig+0xc4>
 800bc84:	4b9e      	ldr	r3, [pc, #632]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bc86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc8a:	f003 0303 	and.w	r3, r3, #3
 800bc8e:	2b03      	cmp	r3, #3
 800bc90:	d816      	bhi.n	800bcc0 <UART_SetConfig+0xbc>
 800bc92:	a201      	add	r2, pc, #4	; (adr r2, 800bc98 <UART_SetConfig+0x94>)
 800bc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc98:	0800bca9 	.word	0x0800bca9
 800bc9c:	0800bcb5 	.word	0x0800bcb5
 800bca0:	0800bcaf 	.word	0x0800bcaf
 800bca4:	0800bcbb 	.word	0x0800bcbb
 800bca8:	2301      	movs	r3, #1
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	e151      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bcae:	2302      	movs	r3, #2
 800bcb0:	77fb      	strb	r3, [r7, #31]
 800bcb2:	e14e      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bcb4:	2304      	movs	r3, #4
 800bcb6:	77fb      	strb	r3, [r7, #31]
 800bcb8:	e14b      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bcba:	2308      	movs	r3, #8
 800bcbc:	77fb      	strb	r3, [r7, #31]
 800bcbe:	e148      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bcc0:	2310      	movs	r3, #16
 800bcc2:	77fb      	strb	r3, [r7, #31]
 800bcc4:	bf00      	nop
 800bcc6:	e144      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a8d      	ldr	r2, [pc, #564]	; (800bf04 <UART_SetConfig+0x300>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d134      	bne.n	800bd3c <UART_SetConfig+0x138>
 800bcd2:	4b8b      	ldr	r3, [pc, #556]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bcd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd8:	f003 030c 	and.w	r3, r3, #12
 800bcdc:	2b0c      	cmp	r3, #12
 800bcde:	d829      	bhi.n	800bd34 <UART_SetConfig+0x130>
 800bce0:	a201      	add	r2, pc, #4	; (adr r2, 800bce8 <UART_SetConfig+0xe4>)
 800bce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce6:	bf00      	nop
 800bce8:	0800bd1d 	.word	0x0800bd1d
 800bcec:	0800bd35 	.word	0x0800bd35
 800bcf0:	0800bd35 	.word	0x0800bd35
 800bcf4:	0800bd35 	.word	0x0800bd35
 800bcf8:	0800bd29 	.word	0x0800bd29
 800bcfc:	0800bd35 	.word	0x0800bd35
 800bd00:	0800bd35 	.word	0x0800bd35
 800bd04:	0800bd35 	.word	0x0800bd35
 800bd08:	0800bd23 	.word	0x0800bd23
 800bd0c:	0800bd35 	.word	0x0800bd35
 800bd10:	0800bd35 	.word	0x0800bd35
 800bd14:	0800bd35 	.word	0x0800bd35
 800bd18:	0800bd2f 	.word	0x0800bd2f
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	77fb      	strb	r3, [r7, #31]
 800bd20:	e117      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd22:	2302      	movs	r3, #2
 800bd24:	77fb      	strb	r3, [r7, #31]
 800bd26:	e114      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd28:	2304      	movs	r3, #4
 800bd2a:	77fb      	strb	r3, [r7, #31]
 800bd2c:	e111      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd2e:	2308      	movs	r3, #8
 800bd30:	77fb      	strb	r3, [r7, #31]
 800bd32:	e10e      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd34:	2310      	movs	r3, #16
 800bd36:	77fb      	strb	r3, [r7, #31]
 800bd38:	bf00      	nop
 800bd3a:	e10a      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a71      	ldr	r2, [pc, #452]	; (800bf08 <UART_SetConfig+0x304>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d120      	bne.n	800bd88 <UART_SetConfig+0x184>
 800bd46:	4b6e      	ldr	r3, [pc, #440]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bd50:	2b10      	cmp	r3, #16
 800bd52:	d00f      	beq.n	800bd74 <UART_SetConfig+0x170>
 800bd54:	2b10      	cmp	r3, #16
 800bd56:	d802      	bhi.n	800bd5e <UART_SetConfig+0x15a>
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <UART_SetConfig+0x164>
 800bd5c:	e010      	b.n	800bd80 <UART_SetConfig+0x17c>
 800bd5e:	2b20      	cmp	r3, #32
 800bd60:	d005      	beq.n	800bd6e <UART_SetConfig+0x16a>
 800bd62:	2b30      	cmp	r3, #48	; 0x30
 800bd64:	d009      	beq.n	800bd7a <UART_SetConfig+0x176>
 800bd66:	e00b      	b.n	800bd80 <UART_SetConfig+0x17c>
 800bd68:	2300      	movs	r3, #0
 800bd6a:	77fb      	strb	r3, [r7, #31]
 800bd6c:	e0f1      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e0ee      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd74:	2304      	movs	r3, #4
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e0eb      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd7a:	2308      	movs	r3, #8
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e0e8      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd80:	2310      	movs	r3, #16
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	bf00      	nop
 800bd86:	e0e4      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a5f      	ldr	r2, [pc, #380]	; (800bf0c <UART_SetConfig+0x308>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d120      	bne.n	800bdd4 <UART_SetConfig+0x1d0>
 800bd92:	4b5b      	ldr	r3, [pc, #364]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bd9c:	2b40      	cmp	r3, #64	; 0x40
 800bd9e:	d00f      	beq.n	800bdc0 <UART_SetConfig+0x1bc>
 800bda0:	2b40      	cmp	r3, #64	; 0x40
 800bda2:	d802      	bhi.n	800bdaa <UART_SetConfig+0x1a6>
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d005      	beq.n	800bdb4 <UART_SetConfig+0x1b0>
 800bda8:	e010      	b.n	800bdcc <UART_SetConfig+0x1c8>
 800bdaa:	2b80      	cmp	r3, #128	; 0x80
 800bdac:	d005      	beq.n	800bdba <UART_SetConfig+0x1b6>
 800bdae:	2bc0      	cmp	r3, #192	; 0xc0
 800bdb0:	d009      	beq.n	800bdc6 <UART_SetConfig+0x1c2>
 800bdb2:	e00b      	b.n	800bdcc <UART_SetConfig+0x1c8>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	77fb      	strb	r3, [r7, #31]
 800bdb8:	e0cb      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bdba:	2302      	movs	r3, #2
 800bdbc:	77fb      	strb	r3, [r7, #31]
 800bdbe:	e0c8      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bdc0:	2304      	movs	r3, #4
 800bdc2:	77fb      	strb	r3, [r7, #31]
 800bdc4:	e0c5      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bdc6:	2308      	movs	r3, #8
 800bdc8:	77fb      	strb	r3, [r7, #31]
 800bdca:	e0c2      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bdcc:	2310      	movs	r3, #16
 800bdce:	77fb      	strb	r3, [r7, #31]
 800bdd0:	bf00      	nop
 800bdd2:	e0be      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a4d      	ldr	r2, [pc, #308]	; (800bf10 <UART_SetConfig+0x30c>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d124      	bne.n	800be28 <UART_SetConfig+0x224>
 800bdde:	4b48      	ldr	r3, [pc, #288]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bde4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdec:	d012      	beq.n	800be14 <UART_SetConfig+0x210>
 800bdee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdf2:	d802      	bhi.n	800bdfa <UART_SetConfig+0x1f6>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <UART_SetConfig+0x204>
 800bdf8:	e012      	b.n	800be20 <UART_SetConfig+0x21c>
 800bdfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfe:	d006      	beq.n	800be0e <UART_SetConfig+0x20a>
 800be00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be04:	d009      	beq.n	800be1a <UART_SetConfig+0x216>
 800be06:	e00b      	b.n	800be20 <UART_SetConfig+0x21c>
 800be08:	2300      	movs	r3, #0
 800be0a:	77fb      	strb	r3, [r7, #31]
 800be0c:	e0a1      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be0e:	2302      	movs	r3, #2
 800be10:	77fb      	strb	r3, [r7, #31]
 800be12:	e09e      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be14:	2304      	movs	r3, #4
 800be16:	77fb      	strb	r3, [r7, #31]
 800be18:	e09b      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be1a:	2308      	movs	r3, #8
 800be1c:	77fb      	strb	r3, [r7, #31]
 800be1e:	e098      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be20:	2310      	movs	r3, #16
 800be22:	77fb      	strb	r3, [r7, #31]
 800be24:	bf00      	nop
 800be26:	e094      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a39      	ldr	r2, [pc, #228]	; (800bf14 <UART_SetConfig+0x310>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d124      	bne.n	800be7c <UART_SetConfig+0x278>
 800be32:	4b33      	ldr	r3, [pc, #204]	; (800bf00 <UART_SetConfig+0x2fc>)
 800be34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800be3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be40:	d012      	beq.n	800be68 <UART_SetConfig+0x264>
 800be42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be46:	d802      	bhi.n	800be4e <UART_SetConfig+0x24a>
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d007      	beq.n	800be5c <UART_SetConfig+0x258>
 800be4c:	e012      	b.n	800be74 <UART_SetConfig+0x270>
 800be4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be52:	d006      	beq.n	800be62 <UART_SetConfig+0x25e>
 800be54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be58:	d009      	beq.n	800be6e <UART_SetConfig+0x26a>
 800be5a:	e00b      	b.n	800be74 <UART_SetConfig+0x270>
 800be5c:	2301      	movs	r3, #1
 800be5e:	77fb      	strb	r3, [r7, #31]
 800be60:	e077      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be62:	2302      	movs	r3, #2
 800be64:	77fb      	strb	r3, [r7, #31]
 800be66:	e074      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be68:	2304      	movs	r3, #4
 800be6a:	77fb      	strb	r3, [r7, #31]
 800be6c:	e071      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be6e:	2308      	movs	r3, #8
 800be70:	77fb      	strb	r3, [r7, #31]
 800be72:	e06e      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be74:	2310      	movs	r3, #16
 800be76:	77fb      	strb	r3, [r7, #31]
 800be78:	bf00      	nop
 800be7a:	e06a      	b.n	800bf52 <UART_SetConfig+0x34e>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a25      	ldr	r2, [pc, #148]	; (800bf18 <UART_SetConfig+0x314>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d124      	bne.n	800bed0 <UART_SetConfig+0x2cc>
 800be86:	4b1e      	ldr	r3, [pc, #120]	; (800bf00 <UART_SetConfig+0x2fc>)
 800be88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be8c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be94:	d012      	beq.n	800bebc <UART_SetConfig+0x2b8>
 800be96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be9a:	d802      	bhi.n	800bea2 <UART_SetConfig+0x29e>
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d007      	beq.n	800beb0 <UART_SetConfig+0x2ac>
 800bea0:	e012      	b.n	800bec8 <UART_SetConfig+0x2c4>
 800bea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea6:	d006      	beq.n	800beb6 <UART_SetConfig+0x2b2>
 800bea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800beac:	d009      	beq.n	800bec2 <UART_SetConfig+0x2be>
 800beae:	e00b      	b.n	800bec8 <UART_SetConfig+0x2c4>
 800beb0:	2300      	movs	r3, #0
 800beb2:	77fb      	strb	r3, [r7, #31]
 800beb4:	e04d      	b.n	800bf52 <UART_SetConfig+0x34e>
 800beb6:	2302      	movs	r3, #2
 800beb8:	77fb      	strb	r3, [r7, #31]
 800beba:	e04a      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bebc:	2304      	movs	r3, #4
 800bebe:	77fb      	strb	r3, [r7, #31]
 800bec0:	e047      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bec2:	2308      	movs	r3, #8
 800bec4:	77fb      	strb	r3, [r7, #31]
 800bec6:	e044      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bec8:	2310      	movs	r3, #16
 800beca:	77fb      	strb	r3, [r7, #31]
 800becc:	bf00      	nop
 800bece:	e040      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	4a11      	ldr	r2, [pc, #68]	; (800bf1c <UART_SetConfig+0x318>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d139      	bne.n	800bf4e <UART_SetConfig+0x34a>
 800beda:	4b09      	ldr	r3, [pc, #36]	; (800bf00 <UART_SetConfig+0x2fc>)
 800bedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bee0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bee8:	d027      	beq.n	800bf3a <UART_SetConfig+0x336>
 800beea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800beee:	d817      	bhi.n	800bf20 <UART_SetConfig+0x31c>
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01c      	beq.n	800bf2e <UART_SetConfig+0x32a>
 800bef4:	e027      	b.n	800bf46 <UART_SetConfig+0x342>
 800bef6:	bf00      	nop
 800bef8:	efff69f3 	.word	0xefff69f3
 800befc:	40011000 	.word	0x40011000
 800bf00:	40023800 	.word	0x40023800
 800bf04:	40004400 	.word	0x40004400
 800bf08:	40004800 	.word	0x40004800
 800bf0c:	40004c00 	.word	0x40004c00
 800bf10:	40005000 	.word	0x40005000
 800bf14:	40011400 	.word	0x40011400
 800bf18:	40007800 	.word	0x40007800
 800bf1c:	40007c00 	.word	0x40007c00
 800bf20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf24:	d006      	beq.n	800bf34 <UART_SetConfig+0x330>
 800bf26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bf2a:	d009      	beq.n	800bf40 <UART_SetConfig+0x33c>
 800bf2c:	e00b      	b.n	800bf46 <UART_SetConfig+0x342>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	77fb      	strb	r3, [r7, #31]
 800bf32:	e00e      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bf34:	2302      	movs	r3, #2
 800bf36:	77fb      	strb	r3, [r7, #31]
 800bf38:	e00b      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bf3a:	2304      	movs	r3, #4
 800bf3c:	77fb      	strb	r3, [r7, #31]
 800bf3e:	e008      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bf40:	2308      	movs	r3, #8
 800bf42:	77fb      	strb	r3, [r7, #31]
 800bf44:	e005      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bf46:	2310      	movs	r3, #16
 800bf48:	77fb      	strb	r3, [r7, #31]
 800bf4a:	bf00      	nop
 800bf4c:	e001      	b.n	800bf52 <UART_SetConfig+0x34e>
 800bf4e:	2310      	movs	r3, #16
 800bf50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf5a:	d17f      	bne.n	800c05c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bf5c:	7ffb      	ldrb	r3, [r7, #31]
 800bf5e:	2b08      	cmp	r3, #8
 800bf60:	d85c      	bhi.n	800c01c <UART_SetConfig+0x418>
 800bf62:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <UART_SetConfig+0x364>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf8d 	.word	0x0800bf8d
 800bf6c:	0800bfad 	.word	0x0800bfad
 800bf70:	0800bfcd 	.word	0x0800bfcd
 800bf74:	0800c01d 	.word	0x0800c01d
 800bf78:	0800bfe5 	.word	0x0800bfe5
 800bf7c:	0800c01d 	.word	0x0800c01d
 800bf80:	0800c01d 	.word	0x0800c01d
 800bf84:	0800c01d 	.word	0x0800c01d
 800bf88:	0800c005 	.word	0x0800c005
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf8c:	f7fc fa5a 	bl	8008444 <HAL_RCC_GetPCLK1Freq>
 800bf90:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	005a      	lsls	r2, r3, #1
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	085b      	lsrs	r3, r3, #1
 800bf9c:	441a      	add	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	61bb      	str	r3, [r7, #24]
        break;
 800bfaa:	e03a      	b.n	800c022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bfac:	f7fc fa5e 	bl	800846c <HAL_RCC_GetPCLK2Freq>
 800bfb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	005a      	lsls	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	685b      	ldr	r3, [r3, #4]
 800bfba:	085b      	lsrs	r3, r3, #1
 800bfbc:	441a      	add	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	61bb      	str	r3, [r7, #24]
        break;
 800bfca:	e02a      	b.n	800c022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	085a      	lsrs	r2, r3, #1
 800bfd2:	4b5f      	ldr	r3, [pc, #380]	; (800c150 <UART_SetConfig+0x54c>)
 800bfd4:	4413      	add	r3, r2
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	6852      	ldr	r2, [r2, #4]
 800bfda:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	61bb      	str	r3, [r7, #24]
        break;
 800bfe2:	e01e      	b.n	800c022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bfe4:	f7fc f94a 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800bfe8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	005a      	lsls	r2, r3, #1
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	085b      	lsrs	r3, r3, #1
 800bff4:	441a      	add	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffe:	b29b      	uxth	r3, r3
 800c000:	61bb      	str	r3, [r7, #24]
        break;
 800c002:	e00e      	b.n	800c022 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	fbb2 f3f3 	udiv	r3, r2, r3
 800c016:	b29b      	uxth	r3, r3
 800c018:	61bb      	str	r3, [r7, #24]
        break;
 800c01a:	e002      	b.n	800c022 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	75fb      	strb	r3, [r7, #23]
        break;
 800c020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c022:	69bb      	ldr	r3, [r7, #24]
 800c024:	2b0f      	cmp	r3, #15
 800c026:	d916      	bls.n	800c056 <UART_SetConfig+0x452>
 800c028:	69bb      	ldr	r3, [r7, #24]
 800c02a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02e:	d212      	bcs.n	800c056 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	b29b      	uxth	r3, r3
 800c034:	f023 030f 	bic.w	r3, r3, #15
 800c038:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c03a:	69bb      	ldr	r3, [r7, #24]
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	b29b      	uxth	r3, r3
 800c040:	f003 0307 	and.w	r3, r3, #7
 800c044:	b29a      	uxth	r2, r3
 800c046:	897b      	ldrh	r3, [r7, #10]
 800c048:	4313      	orrs	r3, r2
 800c04a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	897a      	ldrh	r2, [r7, #10]
 800c052:	60da      	str	r2, [r3, #12]
 800c054:	e070      	b.n	800c138 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
 800c05a:	e06d      	b.n	800c138 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800c05c:	7ffb      	ldrb	r3, [r7, #31]
 800c05e:	2b08      	cmp	r3, #8
 800c060:	d859      	bhi.n	800c116 <UART_SetConfig+0x512>
 800c062:	a201      	add	r2, pc, #4	; (adr r2, 800c068 <UART_SetConfig+0x464>)
 800c064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c068:	0800c08d 	.word	0x0800c08d
 800c06c:	0800c0ab 	.word	0x0800c0ab
 800c070:	0800c0c9 	.word	0x0800c0c9
 800c074:	0800c117 	.word	0x0800c117
 800c078:	0800c0e1 	.word	0x0800c0e1
 800c07c:	0800c117 	.word	0x0800c117
 800c080:	0800c117 	.word	0x0800c117
 800c084:	0800c117 	.word	0x0800c117
 800c088:	0800c0ff 	.word	0x0800c0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c08c:	f7fc f9da 	bl	8008444 <HAL_RCC_GetPCLK1Freq>
 800c090:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	085a      	lsrs	r2, r3, #1
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	441a      	add	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	61bb      	str	r3, [r7, #24]
        break;
 800c0a8:	e038      	b.n	800c11c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0aa:	f7fc f9df 	bl	800846c <HAL_RCC_GetPCLK2Freq>
 800c0ae:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	085a      	lsrs	r2, r3, #1
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	441a      	add	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	61bb      	str	r3, [r7, #24]
        break;
 800c0c6:	e029      	b.n	800c11c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	085a      	lsrs	r2, r3, #1
 800c0ce:	4b21      	ldr	r3, [pc, #132]	; (800c154 <UART_SetConfig+0x550>)
 800c0d0:	4413      	add	r3, r2
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	6852      	ldr	r2, [r2, #4]
 800c0d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	61bb      	str	r3, [r7, #24]
        break;
 800c0de:	e01d      	b.n	800c11c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c0e0:	f7fc f8cc 	bl	800827c <HAL_RCC_GetSysClockFreq>
 800c0e4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	085a      	lsrs	r2, r3, #1
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	441a      	add	r2, r3
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f8:	b29b      	uxth	r3, r3
 800c0fa:	61bb      	str	r3, [r7, #24]
        break;
 800c0fc:	e00e      	b.n	800c11c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	085b      	lsrs	r3, r3, #1
 800c104:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c110:	b29b      	uxth	r3, r3
 800c112:	61bb      	str	r3, [r7, #24]
        break;
 800c114:	e002      	b.n	800c11c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	75fb      	strb	r3, [r7, #23]
        break;
 800c11a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c11c:	69bb      	ldr	r3, [r7, #24]
 800c11e:	2b0f      	cmp	r3, #15
 800c120:	d908      	bls.n	800c134 <UART_SetConfig+0x530>
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c128:	d204      	bcs.n	800c134 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	60da      	str	r2, [r3, #12]
 800c132:	e001      	b.n	800c138 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2200      	movs	r2, #0
 800c142:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c144:	7dfb      	ldrb	r3, [r7, #23]
}
 800c146:	4618      	mov	r0, r3
 800c148:	3720      	adds	r7, #32
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	01e84800 	.word	0x01e84800
 800c154:	00f42400 	.word	0x00f42400

0800c158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c164:	f003 0301 	and.w	r3, r3, #1
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00a      	beq.n	800c182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	430a      	orrs	r2, r1
 800c180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c186:	f003 0302 	and.w	r3, r3, #2
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	685b      	ldr	r3, [r3, #4]
 800c194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	430a      	orrs	r2, r1
 800c1a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d00a      	beq.n	800c1c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	430a      	orrs	r2, r1
 800c1c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ca:	f003 0308 	and.w	r3, r3, #8
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d00a      	beq.n	800c1e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	430a      	orrs	r2, r1
 800c1e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ec:	f003 0310 	and.w	r3, r3, #16
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00a      	beq.n	800c20a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c20e:	f003 0320 	and.w	r3, r3, #32
 800c212:	2b00      	cmp	r3, #0
 800c214:	d00a      	beq.n	800c22c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	430a      	orrs	r2, r1
 800c22a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	d01a      	beq.n	800c26e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	685b      	ldr	r3, [r3, #4]
 800c23e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	430a      	orrs	r2, r1
 800c24c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c256:	d10a      	bne.n	800c26e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	685b      	ldr	r3, [r3, #4]
 800c25e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	430a      	orrs	r2, r1
 800c26c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	430a      	orrs	r2, r1
 800c28e:	605a      	str	r2, [r3, #4]
  }
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af02      	add	r7, sp, #8
 800c2a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c2aa:	f7f9 fc07 	bl	8005abc <HAL_GetTick>
 800c2ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0308 	and.w	r3, r3, #8
 800c2ba:	2b08      	cmp	r3, #8
 800c2bc:	d10e      	bne.n	800c2dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f814 	bl	800c2fa <UART_WaitOnFlagUntilTimeout>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d001      	beq.n	800c2dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e00a      	b.n	800c2f2 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2220      	movs	r2, #32
 800c2e6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c2f0:	2300      	movs	r3, #0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c2fa:	b580      	push	{r7, lr}
 800c2fc:	b084      	sub	sp, #16
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	60f8      	str	r0, [r7, #12]
 800c302:	60b9      	str	r1, [r7, #8]
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c30a:	e05d      	b.n	800c3c8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c30c:	69bb      	ldr	r3, [r7, #24]
 800c30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c312:	d059      	beq.n	800c3c8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c314:	f7f9 fbd2 	bl	8005abc <HAL_GetTick>
 800c318:	4602      	mov	r2, r0
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	1ad3      	subs	r3, r2, r3
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	429a      	cmp	r2, r3
 800c322:	d302      	bcc.n	800c32a <UART_WaitOnFlagUntilTimeout+0x30>
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d11b      	bne.n	800c362 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c338:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	689a      	ldr	r2, [r3, #8]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f022 0201 	bic.w	r2, r2, #1
 800c348:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2220      	movs	r2, #32
 800c34e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2220      	movs	r2, #32
 800c354:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2200      	movs	r2, #0
 800c35a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c35e:	2303      	movs	r3, #3
 800c360:	e042      	b.n	800c3e8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d02b      	beq.n	800c3c8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	69db      	ldr	r3, [r3, #28]
 800c376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c37a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c37e:	d123      	bne.n	800c3c8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c388:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c398:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	689a      	ldr	r2, [r3, #8]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f022 0201 	bic.w	r2, r2, #1
 800c3a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c3c4:	2303      	movs	r3, #3
 800c3c6:	e00f      	b.n	800c3e8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	69da      	ldr	r2, [r3, #28]
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	bf0c      	ite	eq
 800c3d8:	2301      	moveq	r3, #1
 800c3da:	2300      	movne	r3, #0
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	79fb      	ldrb	r3, [r7, #7]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d092      	beq.n	800c30c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3710      	adds	r7, #16
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c406:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689a      	ldr	r2, [r3, #8]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f022 0201 	bic.w	r2, r2, #1
 800c416:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2220      	movs	r2, #32
 800c41c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c43c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2200      	movs	r2, #0
 800c44a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7ff fbce 	bl	800bbf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c454:	bf00      	nop
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c472:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2220      	movs	r2, #32
 800c478:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2200      	movs	r2, #0
 800c47e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f7ff fba1 	bl	800bbc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c486:	bf00      	nop
 800c488:	3708      	adds	r7, #8
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c49c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4a2:	2b22      	cmp	r3, #34	; 0x22
 800c4a4:	d13a      	bne.n	800c51c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ac:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c4ae:	89bb      	ldrh	r3, [r7, #12]
 800c4b0:	b2d9      	uxtb	r1, r3
 800c4b2:	89fb      	ldrh	r3, [r7, #14]
 800c4b4:	b2da      	uxtb	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ba:	400a      	ands	r2, r1
 800c4bc:	b2d2      	uxtb	r2, r2
 800c4be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4c4:	1c5a      	adds	r2, r3, #1
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	3b01      	subs	r3, #1
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d121      	bne.n	800c52c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c4f6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 0201 	bic.w	r2, r2, #1
 800c506:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7ff fb61 	bl	800bbdc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c51a:	e007      	b.n	800c52c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	699a      	ldr	r2, [r3, #24]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f042 0208 	orr.w	r2, r2, #8
 800c52a:	619a      	str	r2, [r3, #24]
}
 800c52c:	bf00      	nop
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c542:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c548:	2b22      	cmp	r3, #34	; 0x22
 800c54a:	d13a      	bne.n	800c5c2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c552:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c558:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c55a:	89ba      	ldrh	r2, [r7, #12]
 800c55c:	89fb      	ldrh	r3, [r7, #14]
 800c55e:	4013      	ands	r3, r2
 800c560:	b29a      	uxth	r2, r3
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c56a:	1c9a      	adds	r2, r3, #2
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c576:	b29b      	uxth	r3, r3
 800c578:	3b01      	subs	r3, #1
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c588:	b29b      	uxth	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d121      	bne.n	800c5d2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681a      	ldr	r2, [r3, #0]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c59c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f022 0201 	bic.w	r2, r2, #1
 800c5ac:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2220      	movs	r2, #32
 800c5b2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff fb0e 	bl	800bbdc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c5c0:	e007      	b.n	800c5d2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	699a      	ldr	r2, [r3, #24]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f042 0208 	orr.w	r2, r2, #8
 800c5d0:	619a      	str	r2, [r3, #24]
}
 800c5d2:	bf00      	nop
 800c5d4:	3710      	adds	r7, #16
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c5dc:	b084      	sub	sp, #16
 800c5de:	b480      	push	{r7}
 800c5e0:	b085      	sub	sp, #20
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
 800c5e6:	f107 001c 	add.w	r0, r7, #28
 800c5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c5f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c5f6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c5fa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c5fe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c602:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c606:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	4313      	orrs	r3, r2
 800c60c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	4b07      	ldr	r3, [pc, #28]	; (800c630 <SDMMC_Init+0x54>)
 800c614:	4013      	ands	r3, r2
 800c616:	68fa      	ldr	r2, [r7, #12]
 800c618:	431a      	orrs	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	b004      	add	sp, #16
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop
 800c630:	ffff8100 	.word	0xffff8100

0800c634 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c642:	4618      	mov	r0, r3
 800c644:	370c      	adds	r7, #12
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c662:	2300      	movs	r3, #0
}
 800c664:	4618      	mov	r0, r3
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66e:	4770      	bx	lr

0800c670 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2203      	movs	r2, #3
 800c67c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c67e:	2002      	movs	r0, #2
 800c680:	f7f9 fa28 	bl	8005ad4 <HAL_Delay>
  
  return HAL_OK;
 800c684:	2300      	movs	r3, #0
}
 800c686:	4618      	mov	r0, r3
 800c688:	3708      	adds	r7, #8
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}

0800c68e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0303 	and.w	r3, r3, #3
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	370c      	adds	r7, #12
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
	...

0800c6ac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	681a      	ldr	r2, [r3, #0]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6ca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c6d0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c6d6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	68da      	ldr	r2, [r3, #12]
 800c6e2:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <SDMMC_SendCommand+0x50>)
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	fffff000 	.word	0xfffff000

0800c700 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	b2db      	uxtb	r3, r3
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b085      	sub	sp, #20
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3314      	adds	r3, #20
 800c728:	461a      	mov	r2, r3
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	4413      	add	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
}  
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c74a:	2300      	movs	r3, #0
 800c74c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685a      	ldr	r2, [r3, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c766:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c76c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c772:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	431a      	orrs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c78a:	2300      	movs	r3, #0

}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b088      	sub	sp, #32
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c7a6:	2310      	movs	r3, #16
 800c7a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7aa:	2340      	movs	r3, #64	; 0x40
 800c7ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7b8:	f107 0308 	add.w	r3, r7, #8
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f7ff ff74 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c7c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7c8:	2110      	movs	r1, #16
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 fa42 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c7d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3720      	adds	r7, #32
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}

0800c7dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c7ea:	2311      	movs	r3, #17
 800c7ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7ee:	2340      	movs	r3, #64	; 0x40
 800c7f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7fc:	f107 0308 	add.w	r3, r7, #8
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7ff ff52 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c808:	f241 3288 	movw	r2, #5000	; 0x1388
 800c80c:	2111      	movs	r1, #17
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 fa20 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c814:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c816:	69fb      	ldr	r3, [r7, #28]
}
 800c818:	4618      	mov	r0, r3
 800c81a:	3720      	adds	r7, #32
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}

0800c820 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b088      	sub	sp, #32
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c82e:	2312      	movs	r3, #18
 800c830:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c832:	2340      	movs	r3, #64	; 0x40
 800c834:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c836:	2300      	movs	r3, #0
 800c838:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c83a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c83e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c840:	f107 0308 	add.w	r3, r7, #8
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f7ff ff30 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c850:	2112      	movs	r1, #18
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f9fe 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c85a:	69fb      	ldr	r3, [r7, #28]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c872:	2318      	movs	r3, #24
 800c874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c876:	2340      	movs	r3, #64	; 0x40
 800c878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c87a:	2300      	movs	r3, #0
 800c87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c884:	f107 0308 	add.w	r3, r7, #8
 800c888:	4619      	mov	r1, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f7ff ff0e 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c890:	f241 3288 	movw	r2, #5000	; 0x1388
 800c894:	2118      	movs	r1, #24
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9dc 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c89e:	69fb      	ldr	r3, [r7, #28]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c8b6:	2319      	movs	r3, #25
 800c8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ba:	2340      	movs	r3, #64	; 0x40
 800c8bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8c8:	f107 0308 	add.w	r3, r7, #8
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff feec 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c8d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d8:	2119      	movs	r1, #25
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f9ba 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c8e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e2:	69fb      	ldr	r3, [r7, #28]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3720      	adds	r7, #32
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b088      	sub	sp, #32
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c8f8:	230c      	movs	r3, #12
 800c8fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8fc:	2340      	movs	r3, #64	; 0x40
 800c8fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c900:	2300      	movs	r3, #0
 800c902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c908:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90a:	f107 0308 	add.w	r3, r7, #8
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff fecb 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c916:	4a05      	ldr	r2, [pc, #20]	; (800c92c <SDMMC_CmdStopTransfer+0x40>)
 800c918:	210c      	movs	r1, #12
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f99a 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c920:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c922:	69fb      	ldr	r3, [r7, #28]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3720      	adds	r7, #32
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	05f5e100 	.word	0x05f5e100

0800c930 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c940:	2307      	movs	r3, #7
 800c942:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c944:	2340      	movs	r3, #64	; 0x40
 800c946:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c948:	2300      	movs	r3, #0
 800c94a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c94c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c950:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c952:	f107 0310 	add.w	r3, r7, #16
 800c956:	4619      	mov	r1, r3
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fea7 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c95e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c962:	2107      	movs	r1, #7
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f975 	bl	800cc54 <SDMMC_GetCmdResp1>
 800c96a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3728      	adds	r7, #40	; 0x28
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b088      	sub	sp, #32
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c982:	2300      	movs	r3, #0
 800c984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c986:	2300      	movs	r3, #0
 800c988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c98a:	2300      	movs	r3, #0
 800c98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c98e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c994:	f107 0308 	add.w	r3, r7, #8
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff fe86 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f92f 	bl	800cc04 <SDMMC_GetCmdError>
 800c9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9a8:	69fb      	ldr	r3, [r7, #28]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3720      	adds	r7, #32
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b088      	sub	sp, #32
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c9ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c9c0:	2308      	movs	r3, #8
 800c9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9d2:	f107 0308 	add.w	r3, r7, #8
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7ff fe67 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fb18 	bl	800d014 <SDMMC_GetCmdResp7>
 800c9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c9fe:	2337      	movs	r3, #55	; 0x37
 800ca00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca02:	2340      	movs	r3, #64	; 0x40
 800ca04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff fe48 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ca1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca20:	2137      	movs	r1, #55	; 0x37
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 f916 	bl	800cc54 <SDMMC_GetCmdResp1>
 800ca28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	4b0d      	ldr	r3, [pc, #52]	; (800ca78 <SDMMC_CmdAppOperCommand+0x44>)
 800ca42:	4313      	orrs	r3, r2
 800ca44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ca46:	2329      	movs	r3, #41	; 0x29
 800ca48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca4a:	2340      	movs	r3, #64	; 0x40
 800ca4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7ff fe24 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f000 fa27 	bl	800ceb8 <SDMMC_GetCmdResp3>
 800ca6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3720      	adds	r7, #32
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	80100000 	.word	0x80100000

0800ca7c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ca8a:	2306      	movs	r3, #6
 800ca8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca8e:	2340      	movs	r3, #64	; 0x40
 800ca90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca92:	2300      	movs	r3, #0
 800ca94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca9c:	f107 0308 	add.w	r3, r7, #8
 800caa0:	4619      	mov	r1, r3
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff fe02 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800caa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800caac:	2106      	movs	r1, #6
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 f8d0 	bl	800cc54 <SDMMC_GetCmdResp1>
 800cab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab6:	69fb      	ldr	r3, [r7, #28]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cacc:	2333      	movs	r3, #51	; 0x33
 800cace:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cad0:	2340      	movs	r3, #64	; 0x40
 800cad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cad4:	2300      	movs	r3, #0
 800cad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cadc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f7ff fde1 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800caea:	f241 3288 	movw	r2, #5000	; 0x1388
 800caee:	2133      	movs	r1, #51	; 0x33
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 f8af 	bl	800cc54 <SDMMC_GetCmdResp1>
 800caf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf8:	69fb      	ldr	r3, [r7, #28]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3720      	adds	r7, #32
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b088      	sub	sp, #32
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cb0e:	2302      	movs	r3, #2
 800cb10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb12:	23c0      	movs	r3, #192	; 0xc0
 800cb14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb16:	2300      	movs	r3, #0
 800cb18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb20:	f107 0308 	add.w	r3, r7, #8
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f7ff fdc0 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 f97d 	bl	800ce2c <SDMMC_GetCmdResp2>
 800cb32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb34:	69fb      	ldr	r3, [r7, #28]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3720      	adds	r7, #32
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}

0800cb3e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b088      	sub	sp, #32
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
 800cb46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cb4c:	2309      	movs	r3, #9
 800cb4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cb50:	23c0      	movs	r3, #192	; 0xc0
 800cb52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb54:	2300      	movs	r3, #0
 800cb56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb5e:	f107 0308 	add.w	r3, r7, #8
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff fda1 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f000 f95e 	bl	800ce2c <SDMMC_GetCmdResp2>
 800cb70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb72:	69fb      	ldr	r3, [r7, #28]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3720      	adds	r7, #32
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b088      	sub	sp, #32
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb86:	2300      	movs	r3, #0
 800cb88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cb8a:	2303      	movs	r3, #3
 800cb8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb8e:	2340      	movs	r3, #64	; 0x40
 800cb90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb92:	2300      	movs	r3, #0
 800cb94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb9c:	f107 0308 	add.w	r3, r7, #8
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff fd82 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	2103      	movs	r1, #3
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 f9bd 	bl	800cf2c <SDMMC_GetCmdResp6>
 800cbb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbb4:	69fb      	ldr	r3, [r7, #28]
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3720      	adds	r7, #32
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}

0800cbbe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cbbe:	b580      	push	{r7, lr}
 800cbc0:	b088      	sub	sp, #32
 800cbc2:	af00      	add	r7, sp, #0
 800cbc4:	6078      	str	r0, [r7, #4]
 800cbc6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cbcc:	230d      	movs	r3, #13
 800cbce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbd0:	2340      	movs	r3, #64	; 0x40
 800cbd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbde:	f107 0308 	add.w	r3, r7, #8
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff fd61 	bl	800c6ac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cbea:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbee:	210d      	movs	r1, #13
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f82f 	bl	800cc54 <SDMMC_GetCmdResp1>
 800cbf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbf8:	69fb      	ldr	r3, [r7, #28]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cc04:	b490      	push	{r4, r7}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <SDMMC_GetCmdError+0x48>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a0f      	ldr	r2, [pc, #60]	; (800cc50 <SDMMC_GetCmdError+0x4c>)
 800cc12:	fba2 2303 	umull	r2, r3, r2, r3
 800cc16:	0a5b      	lsrs	r3, r3, #9
 800cc18:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc1c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc20:	4623      	mov	r3, r4
 800cc22:	1e5c      	subs	r4, r3, #1
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc2c:	e009      	b.n	800cc42 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d0f2      	beq.n	800cc20 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	22c5      	movs	r2, #197	; 0xc5
 800cc3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cc40:	2300      	movs	r3, #0
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3708      	adds	r7, #8
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bc90      	pop	{r4, r7}
 800cc4a:	4770      	bx	lr
 800cc4c:	20000000 	.word	0x20000000
 800cc50:	10624dd3 	.word	0x10624dd3

0800cc54 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cc62:	4b6f      	ldr	r3, [pc, #444]	; (800ce20 <SDMMC_GetCmdResp1+0x1cc>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a6f      	ldr	r2, [pc, #444]	; (800ce24 <SDMMC_GetCmdResp1+0x1d0>)
 800cc68:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6c:	0a5b      	lsrs	r3, r3, #9
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc74:	4623      	mov	r3, r4
 800cc76:	1e5c      	subs	r4, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d102      	bne.n	800cc82 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc80:	e0c9      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc86:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d0f0      	beq.n	800cc74 <SDMMC_GetCmdResp1+0x20>
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1eb      	bne.n	800cc74 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca0:	f003 0304 	and.w	r3, r3, #4
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccae:	2304      	movs	r3, #4
 800ccb0:	e0b1      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0a6      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	22c5      	movs	r2, #197	; 0xc5
 800cccc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f7ff fd16 	bl	800c700 <SDMMC_GetCommandResponse>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	7afb      	ldrb	r3, [r7, #11]
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	d001      	beq.n	800cce2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e099      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cce2:	2100      	movs	r1, #0
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f7ff fd18 	bl	800c71a <SDMMC_GetResponse>
 800ccea:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	4b4e      	ldr	r3, [pc, #312]	; (800ce28 <SDMMC_GetCmdResp1+0x1d4>)
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e08d      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da02      	bge.n	800cd06 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cd00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cd04:	e087      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cd10:	2340      	movs	r3, #64	; 0x40
 800cd12:	e080      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cd1e:	2380      	movs	r3, #128	; 0x80
 800cd20:	e079      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d002      	beq.n	800cd32 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cd2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd30:	e071      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d002      	beq.n	800cd42 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cd3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd40:	e069      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cd4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd50:	e061      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cd5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd60:	e059      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d002      	beq.n	800cd72 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd70:	e051      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd80:	e049      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cd8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd90:	e041      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cd9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cda0:	e039      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cdac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cdb0:	e031      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cdbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cdc0:	e029      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cdcc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cdd0:	e021      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cde0:	e019      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cdec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cdf0:	e011      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cdfc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ce00:	e009      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ce02:	693b      	ldr	r3, [r7, #16]
 800ce04:	f003 0308 	and.w	r3, r3, #8
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ce0c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ce10:	e001      	b.n	800ce16 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	371c      	adds	r7, #28
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd90      	pop	{r4, r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000000 	.word	0x20000000
 800ce24:	10624dd3 	.word	0x10624dd3
 800ce28:	fdffe008 	.word	0xfdffe008

0800ce2c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ce2c:	b490      	push	{r4, r7}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce34:	4b1e      	ldr	r3, [pc, #120]	; (800ceb0 <SDMMC_GetCmdResp2+0x84>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a1e      	ldr	r2, [pc, #120]	; (800ceb4 <SDMMC_GetCmdResp2+0x88>)
 800ce3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce3e:	0a5b      	lsrs	r3, r3, #9
 800ce40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce44:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce48:	4623      	mov	r3, r4
 800ce4a:	1e5c      	subs	r4, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce54:	e026      	b.n	800cea4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0f0      	beq.n	800ce48 <SDMMC_GetCmdResp2+0x1c>
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1eb      	bne.n	800ce48 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce74:	f003 0304 	and.w	r3, r3, #4
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d004      	beq.n	800ce86 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2204      	movs	r2, #4
 800ce80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ce82:	2304      	movs	r3, #4
 800ce84:	e00e      	b.n	800cea4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d004      	beq.n	800ce9c <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2201      	movs	r2, #1
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e003      	b.n	800cea4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	22c5      	movs	r2, #197	; 0xc5
 800cea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cea2:	2300      	movs	r3, #0
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bc90      	pop	{r4, r7}
 800ceac:	4770      	bx	lr
 800ceae:	bf00      	nop
 800ceb0:	20000000 	.word	0x20000000
 800ceb4:	10624dd3 	.word	0x10624dd3

0800ceb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ceb8:	b490      	push	{r4, r7}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cec0:	4b18      	ldr	r3, [pc, #96]	; (800cf24 <SDMMC_GetCmdResp3+0x6c>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a18      	ldr	r2, [pc, #96]	; (800cf28 <SDMMC_GetCmdResp3+0x70>)
 800cec6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceca:	0a5b      	lsrs	r3, r3, #9
 800cecc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ced0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ced4:	4623      	mov	r3, r4
 800ced6:	1e5c      	subs	r4, r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d102      	bne.n	800cee2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cedc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cee0:	e01b      	b.n	800cf1a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0f0      	beq.n	800ced4 <SDMMC_GetCmdResp3+0x1c>
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d1eb      	bne.n	800ced4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf00:	f003 0304 	and.w	r3, r3, #4
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d004      	beq.n	800cf12 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2204      	movs	r2, #4
 800cf0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf0e:	2304      	movs	r3, #4
 800cf10:	e003      	b.n	800cf1a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	22c5      	movs	r2, #197	; 0xc5
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3710      	adds	r7, #16
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bc90      	pop	{r4, r7}
 800cf22:	4770      	bx	lr
 800cf24:	20000000 	.word	0x20000000
 800cf28:	10624dd3 	.word	0x10624dd3

0800cf2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cf2c:	b590      	push	{r4, r7, lr}
 800cf2e:	b087      	sub	sp, #28
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	460b      	mov	r3, r1
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf3a:	4b34      	ldr	r3, [pc, #208]	; (800d00c <SDMMC_GetCmdResp6+0xe0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a34      	ldr	r2, [pc, #208]	; (800d010 <SDMMC_GetCmdResp6+0xe4>)
 800cf40:	fba2 2303 	umull	r2, r3, r2, r3
 800cf44:	0a5b      	lsrs	r3, r3, #9
 800cf46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cf4e:	4623      	mov	r3, r4
 800cf50:	1e5c      	subs	r4, r3, #1
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf56:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf5a:	e052      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf60:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0f0      	beq.n	800cf4e <SDMMC_GetCmdResp6+0x22>
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1eb      	bne.n	800cf4e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7a:	f003 0304 	and.w	r3, r3, #4
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d004      	beq.n	800cf8c <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2204      	movs	r2, #4
 800cf86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf88:	2304      	movs	r3, #4
 800cf8a:	e03a      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf90:	f003 0301 	and.w	r3, r3, #1
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d004      	beq.n	800cfa2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	e02f      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cfa2:	68f8      	ldr	r0, [r7, #12]
 800cfa4:	f7ff fbac 	bl	800c700 <SDMMC_GetCommandResponse>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	461a      	mov	r2, r3
 800cfac:	7afb      	ldrb	r3, [r7, #11]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d001      	beq.n	800cfb6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e025      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	22c5      	movs	r2, #197	; 0xc5
 800cfba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	68f8      	ldr	r0, [r7, #12]
 800cfc0:	f7ff fbab 	bl	800c71a <SDMMC_GetResponse>
 800cfc4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	0c1b      	lsrs	r3, r3, #16
 800cfd4:	b29a      	uxth	r2, r3
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	e011      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfec:	e009      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cffc:	e001      	b.n	800d002 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d002:	4618      	mov	r0, r3
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	bd90      	pop	{r4, r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000000 	.word	0x20000000
 800d010:	10624dd3 	.word	0x10624dd3

0800d014 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d014:	b490      	push	{r4, r7}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d01c:	4b21      	ldr	r3, [pc, #132]	; (800d0a4 <SDMMC_GetCmdResp7+0x90>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a21      	ldr	r2, [pc, #132]	; (800d0a8 <SDMMC_GetCmdResp7+0x94>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	0a5b      	lsrs	r3, r3, #9
 800d028:	f241 3288 	movw	r2, #5000	; 0x1388
 800d02c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d030:	4623      	mov	r3, r4
 800d032:	1e5c      	subs	r4, r3, #1
 800d034:	2b00      	cmp	r3, #0
 800d036:	d102      	bne.n	800d03e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d038:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d03c:	e02c      	b.n	800d098 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d042:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0f0      	beq.n	800d030 <SDMMC_GetCmdResp7+0x1c>
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d054:	2b00      	cmp	r3, #0
 800d056:	d1eb      	bne.n	800d030 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05c:	f003 0304 	and.w	r3, r3, #4
 800d060:	2b00      	cmp	r3, #0
 800d062:	d004      	beq.n	800d06e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2204      	movs	r2, #4
 800d068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d06a:	2304      	movs	r3, #4
 800d06c:	e014      	b.n	800d098 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d072:	f003 0301 	and.w	r3, r3, #1
 800d076:	2b00      	cmp	r3, #0
 800d078:	d004      	beq.n	800d084 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d080:	2301      	movs	r3, #1
 800d082:	e009      	b.n	800d098 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2240      	movs	r2, #64	; 0x40
 800d094:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d096:	2300      	movs	r3, #0
  
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bc90      	pop	{r4, r7}
 800d0a0:	4770      	bx	lr
 800d0a2:	bf00      	nop
 800d0a4:	20000000 	.word	0x20000000
 800d0a8:	10624dd3 	.word	0x10624dd3

0800d0ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d0ac:	b084      	sub	sp, #16
 800d0ae:	b580      	push	{r7, lr}
 800d0b0:	b084      	sub	sp, #16
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	f107 001c 	add.w	r0, r7, #28
 800d0ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d120      	bne.n	800d106 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	68da      	ldr	r2, [r3, #12]
 800d0d4:	4b20      	ldr	r3, [pc, #128]	; (800d158 <USB_CoreInit+0xac>)
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	68db      	ldr	r3, [r3, #12]
 800d0e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ea:	2b01      	cmp	r3, #1
 800d0ec:	d105      	bne.n	800d0fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	68db      	ldr	r3, [r3, #12]
 800d0f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f001 fac4 	bl	800e688 <USB_CoreReset>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]
 800d104:	e010      	b.n	800d128 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f001 fab8 	bl	800e688 <USB_CoreReset>
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d120:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800d128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d10b      	bne.n	800d146 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	f043 0206 	orr.w	r2, r3, #6
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	689b      	ldr	r3, [r3, #8]
 800d13e:	f043 0220 	orr.w	r2, r3, #32
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d146:	7bfb      	ldrb	r3, [r7, #15]
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d152:	b004      	add	sp, #16
 800d154:	4770      	bx	lr
 800d156:	bf00      	nop
 800d158:	ffbdffbf 	.word	0xffbdffbf

0800d15c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b087      	sub	sp, #28
 800d160:	af00      	add	r7, sp, #0
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	60b9      	str	r1, [r7, #8]
 800d166:	4613      	mov	r3, r2
 800d168:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	2b02      	cmp	r3, #2
 800d16e:	d165      	bne.n	800d23c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	4a41      	ldr	r2, [pc, #260]	; (800d278 <USB_SetTurnaroundTime+0x11c>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d906      	bls.n	800d186 <USB_SetTurnaroundTime+0x2a>
 800d178:	68bb      	ldr	r3, [r7, #8]
 800d17a:	4a40      	ldr	r2, [pc, #256]	; (800d27c <USB_SetTurnaroundTime+0x120>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d802      	bhi.n	800d186 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d180:	230f      	movs	r3, #15
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	e062      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	4a3c      	ldr	r2, [pc, #240]	; (800d27c <USB_SetTurnaroundTime+0x120>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d906      	bls.n	800d19c <USB_SetTurnaroundTime+0x40>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	4a3b      	ldr	r2, [pc, #236]	; (800d280 <USB_SetTurnaroundTime+0x124>)
 800d192:	4293      	cmp	r3, r2
 800d194:	d802      	bhi.n	800d19c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d196:	230e      	movs	r3, #14
 800d198:	617b      	str	r3, [r7, #20]
 800d19a:	e057      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	4a38      	ldr	r2, [pc, #224]	; (800d280 <USB_SetTurnaroundTime+0x124>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d906      	bls.n	800d1b2 <USB_SetTurnaroundTime+0x56>
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	4a37      	ldr	r2, [pc, #220]	; (800d284 <USB_SetTurnaroundTime+0x128>)
 800d1a8:	4293      	cmp	r3, r2
 800d1aa:	d802      	bhi.n	800d1b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d1ac:	230d      	movs	r3, #13
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	e04c      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	4a33      	ldr	r2, [pc, #204]	; (800d284 <USB_SetTurnaroundTime+0x128>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d906      	bls.n	800d1c8 <USB_SetTurnaroundTime+0x6c>
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	4a32      	ldr	r2, [pc, #200]	; (800d288 <USB_SetTurnaroundTime+0x12c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d802      	bhi.n	800d1c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d1c2:	230c      	movs	r3, #12
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	e041      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	4a2f      	ldr	r2, [pc, #188]	; (800d288 <USB_SetTurnaroundTime+0x12c>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d906      	bls.n	800d1de <USB_SetTurnaroundTime+0x82>
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	4a2e      	ldr	r2, [pc, #184]	; (800d28c <USB_SetTurnaroundTime+0x130>)
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d802      	bhi.n	800d1de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d1d8:	230b      	movs	r3, #11
 800d1da:	617b      	str	r3, [r7, #20]
 800d1dc:	e036      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	4a2a      	ldr	r2, [pc, #168]	; (800d28c <USB_SetTurnaroundTime+0x130>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d906      	bls.n	800d1f4 <USB_SetTurnaroundTime+0x98>
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	4a29      	ldr	r2, [pc, #164]	; (800d290 <USB_SetTurnaroundTime+0x134>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d802      	bhi.n	800d1f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	617b      	str	r3, [r7, #20]
 800d1f2:	e02b      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	4a26      	ldr	r2, [pc, #152]	; (800d290 <USB_SetTurnaroundTime+0x134>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d906      	bls.n	800d20a <USB_SetTurnaroundTime+0xae>
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	4a25      	ldr	r2, [pc, #148]	; (800d294 <USB_SetTurnaroundTime+0x138>)
 800d200:	4293      	cmp	r3, r2
 800d202:	d802      	bhi.n	800d20a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d204:	2309      	movs	r3, #9
 800d206:	617b      	str	r3, [r7, #20]
 800d208:	e020      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	4a21      	ldr	r2, [pc, #132]	; (800d294 <USB_SetTurnaroundTime+0x138>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d906      	bls.n	800d220 <USB_SetTurnaroundTime+0xc4>
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	4a20      	ldr	r2, [pc, #128]	; (800d298 <USB_SetTurnaroundTime+0x13c>)
 800d216:	4293      	cmp	r3, r2
 800d218:	d802      	bhi.n	800d220 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d21a:	2308      	movs	r3, #8
 800d21c:	617b      	str	r3, [r7, #20]
 800d21e:	e015      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	4a1d      	ldr	r2, [pc, #116]	; (800d298 <USB_SetTurnaroundTime+0x13c>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d906      	bls.n	800d236 <USB_SetTurnaroundTime+0xda>
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	4a1c      	ldr	r2, [pc, #112]	; (800d29c <USB_SetTurnaroundTime+0x140>)
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d802      	bhi.n	800d236 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d230:	2307      	movs	r3, #7
 800d232:	617b      	str	r3, [r7, #20]
 800d234:	e00a      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d236:	2306      	movs	r3, #6
 800d238:	617b      	str	r3, [r7, #20]
 800d23a:	e007      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d23c:	79fb      	ldrb	r3, [r7, #7]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d102      	bne.n	800d248 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d242:	2309      	movs	r3, #9
 800d244:	617b      	str	r3, [r7, #20]
 800d246:	e001      	b.n	800d24c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d248:	2309      	movs	r3, #9
 800d24a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	68da      	ldr	r2, [r3, #12]
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	029b      	lsls	r3, r3, #10
 800d260:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d264:	431a      	orrs	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	371c      	adds	r7, #28
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr
 800d278:	00d8acbf 	.word	0x00d8acbf
 800d27c:	00e4e1bf 	.word	0x00e4e1bf
 800d280:	00f423ff 	.word	0x00f423ff
 800d284:	0106737f 	.word	0x0106737f
 800d288:	011a499f 	.word	0x011a499f
 800d28c:	01312cff 	.word	0x01312cff
 800d290:	014ca43f 	.word	0x014ca43f
 800d294:	016e35ff 	.word	0x016e35ff
 800d298:	01a6ab1f 	.word	0x01a6ab1f
 800d29c:	01e847ff 	.word	0x01e847ff

0800d2a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	f043 0201 	orr.w	r2, r3, #1
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d2c2:	b480      	push	{r7}
 800d2c4:	b083      	sub	sp, #12
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	689b      	ldr	r3, [r3, #8]
 800d2ce:	f023 0201 	bic.w	r2, r3, #1
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	460b      	mov	r3, r1
 800d2ee:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	68db      	ldr	r3, [r3, #12]
 800d2f4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d2fc:	78fb      	ldrb	r3, [r7, #3]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d106      	bne.n	800d310 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	68db      	ldr	r3, [r3, #12]
 800d306:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	60da      	str	r2, [r3, #12]
 800d30e:	e00b      	b.n	800d328 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d106      	bne.n	800d324 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	60da      	str	r2, [r3, #12]
 800d322:	e001      	b.n	800d328 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e003      	b.n	800d330 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d328:	2032      	movs	r0, #50	; 0x32
 800d32a:	f7f8 fbd3 	bl	8005ad4 <HAL_Delay>

  return HAL_OK;
 800d32e:	2300      	movs	r3, #0
}
 800d330:	4618      	mov	r0, r3
 800d332:	3708      	adds	r7, #8
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d338:	b084      	sub	sp, #16
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b086      	sub	sp, #24
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d34a:	2300      	movs	r3, #0
 800d34c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d352:	2300      	movs	r3, #0
 800d354:	613b      	str	r3, [r7, #16]
 800d356:	e009      	b.n	800d36c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	3340      	adds	r3, #64	; 0x40
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	2200      	movs	r2, #0
 800d364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	3301      	adds	r3, #1
 800d36a:	613b      	str	r3, [r7, #16]
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	2b0e      	cmp	r3, #14
 800d370:	d9f2      	bls.n	800d358 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d374:	2b00      	cmp	r3, #0
 800d376:	d11c      	bne.n	800d3b2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	68fa      	ldr	r2, [r7, #12]
 800d382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d386:	f043 0302 	orr.w	r3, r3, #2
 800d38a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	601a      	str	r2, [r3, #0]
 800d3b0:	e005      	b.n	800d3be <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d8:	461a      	mov	r2, r3
 800d3da:	680b      	ldr	r3, [r1, #0]
 800d3dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e0:	2b01      	cmp	r3, #1
 800d3e2:	d10c      	bne.n	800d3fe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 f959 	bl	800d6a4 <USB_SetDevSpeed>
 800d3f2:	e018      	b.n	800d426 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d3f4:	2101      	movs	r1, #1
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f954 	bl	800d6a4 <USB_SetDevSpeed>
 800d3fc:	e013      	b.n	800d426 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d400:	2b03      	cmp	r3, #3
 800d402:	d10c      	bne.n	800d41e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	2b00      	cmp	r3, #0
 800d408:	d104      	bne.n	800d414 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d40a:	2100      	movs	r1, #0
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f949 	bl	800d6a4 <USB_SetDevSpeed>
 800d412:	e008      	b.n	800d426 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d414:	2101      	movs	r1, #1
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 f944 	bl	800d6a4 <USB_SetDevSpeed>
 800d41c:	e003      	b.n	800d426 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d41e:	2103      	movs	r1, #3
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f93f 	bl	800d6a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d426:	2110      	movs	r1, #16
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f000 f8f3 	bl	800d614 <USB_FlushTxFifo>
 800d42e:	4603      	mov	r3, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d001      	beq.n	800d438 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d434:	2301      	movs	r3, #1
 800d436:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f911 	bl	800d660 <USB_FlushRxFifo>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d444:	2301      	movs	r3, #1
 800d446:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44e:	461a      	mov	r2, r3
 800d450:	2300      	movs	r3, #0
 800d452:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d45a:	461a      	mov	r2, r3
 800d45c:	2300      	movs	r3, #0
 800d45e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d466:	461a      	mov	r2, r3
 800d468:	2300      	movs	r3, #0
 800d46a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d46c:	2300      	movs	r3, #0
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	e043      	b.n	800d4fa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	015a      	lsls	r2, r3, #5
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	4413      	add	r3, r2
 800d47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d484:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d488:	d118      	bne.n	800d4bc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d10a      	bne.n	800d4a6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49c:	461a      	mov	r2, r3
 800d49e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d4a2:	6013      	str	r3, [r2, #0]
 800d4a4:	e013      	b.n	800d4ce <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	015a      	lsls	r2, r3, #5
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d4b8:	6013      	str	r3, [r2, #0]
 800d4ba:	e008      	b.n	800d4ce <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	015a      	lsls	r2, r3, #5
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	4413      	add	r3, r2
 800d4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c8:	461a      	mov	r2, r3
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	015a      	lsls	r2, r3, #5
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	4413      	add	r3, r2
 800d4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4da:	461a      	mov	r2, r3
 800d4dc:	2300      	movs	r3, #0
 800d4de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	015a      	lsls	r2, r3, #5
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d4f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	613b      	str	r3, [r7, #16]
 800d4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fc:	693a      	ldr	r2, [r7, #16]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d3b7      	bcc.n	800d472 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d502:	2300      	movs	r3, #0
 800d504:	613b      	str	r3, [r7, #16]
 800d506:	e043      	b.n	800d590 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d508:	693b      	ldr	r3, [r7, #16]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d51a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d51e:	d118      	bne.n	800d552 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d10a      	bne.n	800d53c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d526:	693b      	ldr	r3, [r7, #16]
 800d528:	015a      	lsls	r2, r3, #5
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	4413      	add	r3, r2
 800d52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d532:	461a      	mov	r2, r3
 800d534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d538:	6013      	str	r3, [r2, #0]
 800d53a:	e013      	b.n	800d564 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	015a      	lsls	r2, r3, #5
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	4413      	add	r3, r2
 800d544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d548:	461a      	mov	r2, r3
 800d54a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d54e:	6013      	str	r3, [r2, #0]
 800d550:	e008      	b.n	800d564 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	015a      	lsls	r2, r3, #5
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	4413      	add	r3, r2
 800d55a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d55e:	461a      	mov	r2, r3
 800d560:	2300      	movs	r3, #0
 800d562:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d570:	461a      	mov	r2, r3
 800d572:	2300      	movs	r3, #0
 800d574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	015a      	lsls	r2, r3, #5
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	4413      	add	r3, r2
 800d57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d582:	461a      	mov	r2, r3
 800d584:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d588:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	3301      	adds	r3, #1
 800d58e:	613b      	str	r3, [r7, #16]
 800d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d592:	693a      	ldr	r2, [r7, #16]
 800d594:	429a      	cmp	r2, r3
 800d596:	d3b7      	bcc.n	800d508 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	68fa      	ldr	r2, [r7, #12]
 800d5a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d5a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d5b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d105      	bne.n	800d5cc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	699b      	ldr	r3, [r3, #24]
 800d5c4:	f043 0210 	orr.w	r2, r3, #16
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	699a      	ldr	r2, [r3, #24]
 800d5d0:	4b0e      	ldr	r3, [pc, #56]	; (800d60c <USB_DevInit+0x2d4>)
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	f043 0208 	orr.w	r2, r3, #8
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d5ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d105      	bne.n	800d5fc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	699a      	ldr	r2, [r3, #24]
 800d5f4:	4b06      	ldr	r3, [pc, #24]	; (800d610 <USB_DevInit+0x2d8>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3718      	adds	r7, #24
 800d602:	46bd      	mov	sp, r7
 800d604:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d608:	b004      	add	sp, #16
 800d60a:	4770      	bx	lr
 800d60c:	803c3800 	.word	0x803c3800
 800d610:	40000004 	.word	0x40000004

0800d614 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d61e:	2300      	movs	r3, #0
 800d620:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	019b      	lsls	r3, r3, #6
 800d626:	f043 0220 	orr.w	r2, r3, #32
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3301      	adds	r3, #1
 800d632:	60fb      	str	r3, [r7, #12]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	4a09      	ldr	r2, [pc, #36]	; (800d65c <USB_FlushTxFifo+0x48>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d901      	bls.n	800d640 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e006      	b.n	800d64e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	f003 0320 	and.w	r3, r3, #32
 800d648:	2b20      	cmp	r3, #32
 800d64a:	d0f0      	beq.n	800d62e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d64c:	2300      	movs	r3, #0
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3714      	adds	r7, #20
 800d652:	46bd      	mov	sp, r7
 800d654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d658:	4770      	bx	lr
 800d65a:	bf00      	nop
 800d65c:	00030d40 	.word	0x00030d40

0800d660 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d668:	2300      	movs	r3, #0
 800d66a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2210      	movs	r2, #16
 800d670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3301      	adds	r3, #1
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <USB_FlushRxFifo+0x40>)
 800d67c:	4293      	cmp	r3, r2
 800d67e:	d901      	bls.n	800d684 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d680:	2303      	movs	r3, #3
 800d682:	e006      	b.n	800d692 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b10      	cmp	r3, #16
 800d68e:	d0f0      	beq.n	800d672 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	00030d40 	.word	0x00030d40

0800d6a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	78fb      	ldrb	r3, [r7, #3]
 800d6be:	68f9      	ldr	r1, [r7, #12]
 800d6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3714      	adds	r7, #20
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr

0800d6d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d6d6:	b480      	push	{r7}
 800d6d8:	b087      	sub	sp, #28
 800d6da:	af00      	add	r7, sp, #0
 800d6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6e8:	689b      	ldr	r3, [r3, #8]
 800d6ea:	f003 0306 	and.w	r3, r3, #6
 800d6ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d102      	bne.n	800d6fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	75fb      	strb	r3, [r7, #23]
 800d6fa:	e00a      	b.n	800d712 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d002      	beq.n	800d708 <USB_GetDevSpeed+0x32>
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	2b06      	cmp	r3, #6
 800d706:	d102      	bne.n	800d70e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d708:	2302      	movs	r3, #2
 800d70a:	75fb      	strb	r3, [r7, #23]
 800d70c:	e001      	b.n	800d712 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d70e:	230f      	movs	r3, #15
 800d710:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
}
 800d714:	4618      	mov	r0, r3
 800d716:	371c      	adds	r7, #28
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	785b      	ldrb	r3, [r3, #1]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d139      	bne.n	800d7b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d742:	69da      	ldr	r2, [r3, #28]
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	781b      	ldrb	r3, [r3, #0]
 800d748:	f003 030f 	and.w	r3, r3, #15
 800d74c:	2101      	movs	r1, #1
 800d74e:	fa01 f303 	lsl.w	r3, r1, r3
 800d752:	b29b      	uxth	r3, r3
 800d754:	68f9      	ldr	r1, [r7, #12]
 800d756:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d75a:	4313      	orrs	r3, r2
 800d75c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	015a      	lsls	r2, r3, #5
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	4413      	add	r3, r2
 800d766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d770:	2b00      	cmp	r3, #0
 800d772:	d153      	bne.n	800d81c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	015a      	lsls	r2, r3, #5
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	4413      	add	r3, r2
 800d77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	78db      	ldrb	r3, [r3, #3]
 800d78e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d790:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	059b      	lsls	r3, r3, #22
 800d796:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d798:	431a      	orrs	r2, r3
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	0159      	lsls	r1, r3, #5
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	440b      	add	r3, r1
 800d7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4b20      	ldr	r3, [pc, #128]	; (800d82c <USB_ActivateEndpoint+0x10c>)
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	600b      	str	r3, [r1, #0]
 800d7ae:	e035      	b.n	800d81c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7b6:	69da      	ldr	r2, [r3, #28]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	f003 030f 	and.w	r3, r3, #15
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d7c6:	041b      	lsls	r3, r3, #16
 800d7c8:	68f9      	ldr	r1, [r7, #12]
 800d7ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	015a      	lsls	r2, r3, #5
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	4413      	add	r3, r2
 800d7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d119      	bne.n	800d81c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	015a      	lsls	r2, r3, #5
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	78db      	ldrb	r3, [r3, #3]
 800d802:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d804:	430b      	orrs	r3, r1
 800d806:	431a      	orrs	r2, r3
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	0159      	lsls	r1, r3, #5
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	440b      	add	r3, r1
 800d810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d814:	4619      	mov	r1, r3
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <USB_ActivateEndpoint+0x10c>)
 800d818:	4313      	orrs	r3, r2
 800d81a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d81c:	2300      	movs	r3, #0
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	10008000 	.word	0x10008000

0800d830 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d830:	b480      	push	{r7}
 800d832:	b085      	sub	sp, #20
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	785b      	ldrb	r3, [r3, #1]
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d161      	bne.n	800d910 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	015a      	lsls	r2, r3, #5
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	4413      	add	r3, r2
 800d854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d85e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d862:	d11f      	bne.n	800d8a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	015a      	lsls	r2, r3, #5
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	4413      	add	r3, r2
 800d86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	0151      	lsls	r1, r2, #5
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	440a      	add	r2, r1
 800d87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d87e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d882:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	015a      	lsls	r2, r3, #5
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	4413      	add	r3, r2
 800d88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	68ba      	ldr	r2, [r7, #8]
 800d894:	0151      	lsls	r1, r2, #5
 800d896:	68fa      	ldr	r2, [r7, #12]
 800d898:	440a      	add	r2, r1
 800d89a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d89e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d8a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	f003 030f 	and.w	r3, r3, #15
 800d8b4:	2101      	movs	r1, #1
 800d8b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	43db      	mvns	r3, r3
 800d8be:	68f9      	ldr	r1, [r7, #12]
 800d8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8c4:	4013      	ands	r3, r2
 800d8c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8ce:	69da      	ldr	r2, [r3, #28]
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	f003 030f 	and.w	r3, r3, #15
 800d8d8:	2101      	movs	r1, #1
 800d8da:	fa01 f303 	lsl.w	r3, r1, r3
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	68f9      	ldr	r1, [r7, #12]
 800d8e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	015a      	lsls	r2, r3, #5
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	4413      	add	r3, r2
 800d8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	0159      	lsls	r1, r3, #5
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	440b      	add	r3, r1
 800d902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d906:	4619      	mov	r1, r3
 800d908:	4b35      	ldr	r3, [pc, #212]	; (800d9e0 <USB_DeactivateEndpoint+0x1b0>)
 800d90a:	4013      	ands	r3, r2
 800d90c:	600b      	str	r3, [r1, #0]
 800d90e:	e060      	b.n	800d9d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	015a      	lsls	r2, r3, #5
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	4413      	add	r3, r2
 800d918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d926:	d11f      	bne.n	800d968 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	015a      	lsls	r2, r3, #5
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	4413      	add	r3, r2
 800d930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	68ba      	ldr	r2, [r7, #8]
 800d938:	0151      	lsls	r1, r2, #5
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	440a      	add	r2, r1
 800d93e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d946:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	015a      	lsls	r2, r3, #5
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	4413      	add	r3, r2
 800d950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68ba      	ldr	r2, [r7, #8]
 800d958:	0151      	lsls	r1, r2, #5
 800d95a:	68fa      	ldr	r2, [r7, #12]
 800d95c:	440a      	add	r2, r1
 800d95e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d96e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	f003 030f 	and.w	r3, r3, #15
 800d978:	2101      	movs	r1, #1
 800d97a:	fa01 f303 	lsl.w	r3, r1, r3
 800d97e:	041b      	lsls	r3, r3, #16
 800d980:	43db      	mvns	r3, r3
 800d982:	68f9      	ldr	r1, [r7, #12]
 800d984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d988:	4013      	ands	r3, r2
 800d98a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d992:	69da      	ldr	r2, [r3, #28]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	f003 030f 	and.w	r3, r3, #15
 800d99c:	2101      	movs	r1, #1
 800d99e:	fa01 f303 	lsl.w	r3, r1, r3
 800d9a2:	041b      	lsls	r3, r3, #16
 800d9a4:	43db      	mvns	r3, r3
 800d9a6:	68f9      	ldr	r1, [r7, #12]
 800d9a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	015a      	lsls	r2, r3, #5
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9bc:	681a      	ldr	r2, [r3, #0]
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	0159      	lsls	r1, r3, #5
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	440b      	add	r3, r1
 800d9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <USB_DeactivateEndpoint+0x1b4>)
 800d9ce:	4013      	ands	r3, r2
 800d9d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3714      	adds	r7, #20
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr
 800d9e0:	ec337800 	.word	0xec337800
 800d9e4:	eff37800 	.word	0xeff37800

0800d9e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b08a      	sub	sp, #40	; 0x28
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	60b9      	str	r1, [r7, #8]
 800d9f2:	4613      	mov	r3, r2
 800d9f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	2b01      	cmp	r3, #1
 800da06:	f040 8163 	bne.w	800dcd0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	695b      	ldr	r3, [r3, #20]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d132      	bne.n	800da78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	015a      	lsls	r2, r3, #5
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	4413      	add	r3, r2
 800da1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da1e:	691a      	ldr	r2, [r3, #16]
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	0159      	lsls	r1, r3, #5
 800da24:	69fb      	ldr	r3, [r7, #28]
 800da26:	440b      	add	r3, r1
 800da28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2c:	4619      	mov	r1, r3
 800da2e:	4ba5      	ldr	r3, [pc, #660]	; (800dcc4 <USB_EPStartXfer+0x2dc>)
 800da30:	4013      	ands	r3, r2
 800da32:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	015a      	lsls	r2, r3, #5
 800da38:	69fb      	ldr	r3, [r7, #28]
 800da3a:	4413      	add	r3, r2
 800da3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	0151      	lsls	r1, r2, #5
 800da46:	69fa      	ldr	r2, [r7, #28]
 800da48:	440a      	add	r2, r1
 800da4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	015a      	lsls	r2, r3, #5
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	4413      	add	r3, r2
 800da5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da60:	691a      	ldr	r2, [r3, #16]
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	0159      	lsls	r1, r3, #5
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	440b      	add	r3, r1
 800da6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da6e:	4619      	mov	r1, r3
 800da70:	4b95      	ldr	r3, [pc, #596]	; (800dcc8 <USB_EPStartXfer+0x2e0>)
 800da72:	4013      	ands	r3, r2
 800da74:	610b      	str	r3, [r1, #16]
 800da76:	e074      	b.n	800db62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800da78:	69bb      	ldr	r3, [r7, #24]
 800da7a:	015a      	lsls	r2, r3, #5
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	4413      	add	r3, r2
 800da80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da84:	691a      	ldr	r2, [r3, #16]
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	0159      	lsls	r1, r3, #5
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	440b      	add	r3, r1
 800da8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da92:	4619      	mov	r1, r3
 800da94:	4b8c      	ldr	r3, [pc, #560]	; (800dcc8 <USB_EPStartXfer+0x2e0>)
 800da96:	4013      	ands	r3, r2
 800da98:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800da9a:	69bb      	ldr	r3, [r7, #24]
 800da9c:	015a      	lsls	r2, r3, #5
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	4413      	add	r3, r2
 800daa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daa6:	691a      	ldr	r2, [r3, #16]
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	0159      	lsls	r1, r3, #5
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	440b      	add	r3, r1
 800dab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab4:	4619      	mov	r1, r3
 800dab6:	4b83      	ldr	r3, [pc, #524]	; (800dcc4 <USB_EPStartXfer+0x2dc>)
 800dab8:	4013      	ands	r3, r2
 800daba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	015a      	lsls	r2, r3, #5
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	4413      	add	r3, r2
 800dac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dac8:	691a      	ldr	r2, [r3, #16]
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	6959      	ldr	r1, [r3, #20]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	440b      	add	r3, r1
 800dad4:	1e59      	subs	r1, r3, #1
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	fbb1 f3f3 	udiv	r3, r1, r3
 800dade:	04d9      	lsls	r1, r3, #19
 800dae0:	4b7a      	ldr	r3, [pc, #488]	; (800dccc <USB_EPStartXfer+0x2e4>)
 800dae2:	400b      	ands	r3, r1
 800dae4:	69b9      	ldr	r1, [r7, #24]
 800dae6:	0148      	lsls	r0, r1, #5
 800dae8:	69f9      	ldr	r1, [r7, #28]
 800daea:	4401      	add	r1, r0
 800daec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800daf0:	4313      	orrs	r3, r2
 800daf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800daf4:	69bb      	ldr	r3, [r7, #24]
 800daf6:	015a      	lsls	r2, r3, #5
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	4413      	add	r3, r2
 800dafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db00:	691a      	ldr	r2, [r3, #16]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db0a:	69b9      	ldr	r1, [r7, #24]
 800db0c:	0148      	lsls	r0, r1, #5
 800db0e:	69f9      	ldr	r1, [r7, #28]
 800db10:	4401      	add	r1, r0
 800db12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800db16:	4313      	orrs	r3, r2
 800db18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	78db      	ldrb	r3, [r3, #3]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d11f      	bne.n	800db62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	015a      	lsls	r2, r3, #5
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	4413      	add	r3, r2
 800db2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	69ba      	ldr	r2, [r7, #24]
 800db32:	0151      	lsls	r1, r2, #5
 800db34:	69fa      	ldr	r2, [r7, #28]
 800db36:	440a      	add	r2, r1
 800db38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800db40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	015a      	lsls	r2, r3, #5
 800db46:	69fb      	ldr	r3, [r7, #28]
 800db48:	4413      	add	r3, r2
 800db4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4e:	691b      	ldr	r3, [r3, #16]
 800db50:	69ba      	ldr	r2, [r7, #24]
 800db52:	0151      	lsls	r1, r2, #5
 800db54:	69fa      	ldr	r2, [r7, #28]
 800db56:	440a      	add	r2, r1
 800db58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d14b      	bne.n	800dc00 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d009      	beq.n	800db84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800db70:	69bb      	ldr	r3, [r7, #24]
 800db72:	015a      	lsls	r2, r3, #5
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	4413      	add	r3, r2
 800db78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db7c:	461a      	mov	r2, r3
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	691b      	ldr	r3, [r3, #16]
 800db82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	78db      	ldrb	r3, [r3, #3]
 800db88:	2b01      	cmp	r3, #1
 800db8a:	d128      	bne.n	800dbde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d110      	bne.n	800dbbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	015a      	lsls	r2, r3, #5
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	4413      	add	r3, r2
 800dba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	69ba      	ldr	r2, [r7, #24]
 800dbac:	0151      	lsls	r1, r2, #5
 800dbae:	69fa      	ldr	r2, [r7, #28]
 800dbb0:	440a      	add	r2, r1
 800dbb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dbba:	6013      	str	r3, [r2, #0]
 800dbbc:	e00f      	b.n	800dbde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dbbe:	69bb      	ldr	r3, [r7, #24]
 800dbc0:	015a      	lsls	r2, r3, #5
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	69ba      	ldr	r2, [r7, #24]
 800dbce:	0151      	lsls	r1, r2, #5
 800dbd0:	69fa      	ldr	r2, [r7, #28]
 800dbd2:	440a      	add	r2, r1
 800dbd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	015a      	lsls	r2, r3, #5
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	4413      	add	r3, r2
 800dbe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	69ba      	ldr	r2, [r7, #24]
 800dbee:	0151      	lsls	r1, r2, #5
 800dbf0:	69fa      	ldr	r2, [r7, #28]
 800dbf2:	440a      	add	r2, r1
 800dbf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dbfc:	6013      	str	r3, [r2, #0]
 800dbfe:	e133      	b.n	800de68 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	015a      	lsls	r2, r3, #5
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	4413      	add	r3, r2
 800dc08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	69ba      	ldr	r2, [r7, #24]
 800dc10:	0151      	lsls	r1, r2, #5
 800dc12:	69fa      	ldr	r2, [r7, #28]
 800dc14:	440a      	add	r2, r1
 800dc16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dc1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	78db      	ldrb	r3, [r3, #3]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d015      	beq.n	800dc54 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	f000 811b 	beq.w	800de68 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	f003 030f 	and.w	r3, r3, #15
 800dc42:	2101      	movs	r1, #1
 800dc44:	fa01 f303 	lsl.w	r3, r1, r3
 800dc48:	69f9      	ldr	r1, [r7, #28]
 800dc4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	634b      	str	r3, [r1, #52]	; 0x34
 800dc52:	e109      	b.n	800de68 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d110      	bne.n	800dc86 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	015a      	lsls	r2, r3, #5
 800dc68:	69fb      	ldr	r3, [r7, #28]
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	69ba      	ldr	r2, [r7, #24]
 800dc74:	0151      	lsls	r1, r2, #5
 800dc76:	69fa      	ldr	r2, [r7, #28]
 800dc78:	440a      	add	r2, r1
 800dc7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	e00f      	b.n	800dca6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dc86:	69bb      	ldr	r3, [r7, #24]
 800dc88:	015a      	lsls	r2, r3, #5
 800dc8a:	69fb      	ldr	r3, [r7, #28]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	69ba      	ldr	r2, [r7, #24]
 800dc96:	0151      	lsls	r1, r2, #5
 800dc98:	69fa      	ldr	r2, [r7, #28]
 800dc9a:	440a      	add	r2, r1
 800dc9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dca4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	68d9      	ldr	r1, [r3, #12]
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	781a      	ldrb	r2, [r3, #0]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	b298      	uxth	r0, r3
 800dcb4:	79fb      	ldrb	r3, [r7, #7]
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	4603      	mov	r3, r0
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f000 fa38 	bl	800e130 <USB_WritePacket>
 800dcc0:	e0d2      	b.n	800de68 <USB_EPStartXfer+0x480>
 800dcc2:	bf00      	nop
 800dcc4:	e007ffff 	.word	0xe007ffff
 800dcc8:	fff80000 	.word	0xfff80000
 800dccc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcdc:	691a      	ldr	r2, [r3, #16]
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	0159      	lsls	r1, r3, #5
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	440b      	add	r3, r1
 800dce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcea:	4619      	mov	r1, r3
 800dcec:	4b61      	ldr	r3, [pc, #388]	; (800de74 <USB_EPStartXfer+0x48c>)
 800dcee:	4013      	ands	r3, r2
 800dcf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dcf2:	69bb      	ldr	r3, [r7, #24]
 800dcf4:	015a      	lsls	r2, r3, #5
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfe:	691a      	ldr	r2, [r3, #16]
 800dd00:	69bb      	ldr	r3, [r7, #24]
 800dd02:	0159      	lsls	r1, r3, #5
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	440b      	add	r3, r1
 800dd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	4b5a      	ldr	r3, [pc, #360]	; (800de78 <USB_EPStartXfer+0x490>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	695b      	ldr	r3, [r3, #20]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d123      	bne.n	800dd64 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	015a      	lsls	r2, r3, #5
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	4413      	add	r3, r2
 800dd24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd28:	691a      	ldr	r2, [r3, #16]
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dd32:	69b9      	ldr	r1, [r7, #24]
 800dd34:	0148      	lsls	r0, r1, #5
 800dd36:	69f9      	ldr	r1, [r7, #28]
 800dd38:	4401      	add	r1, r0
 800dd3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	69ba      	ldr	r2, [r7, #24]
 800dd52:	0151      	lsls	r1, r2, #5
 800dd54:	69fa      	ldr	r2, [r7, #28]
 800dd56:	440a      	add	r2, r1
 800dd58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd60:	6113      	str	r3, [r2, #16]
 800dd62:	e033      	b.n	800ddcc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	695a      	ldr	r2, [r3, #20]
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	4413      	add	r3, r2
 800dd6e:	1e5a      	subs	r2, r3, #1
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	689b      	ldr	r3, [r3, #8]
 800dd74:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd78:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	015a      	lsls	r2, r3, #5
 800dd7e:	69fb      	ldr	r3, [r7, #28]
 800dd80:	4413      	add	r3, r2
 800dd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd86:	691a      	ldr	r2, [r3, #16]
 800dd88:	8afb      	ldrh	r3, [r7, #22]
 800dd8a:	04d9      	lsls	r1, r3, #19
 800dd8c:	4b3b      	ldr	r3, [pc, #236]	; (800de7c <USB_EPStartXfer+0x494>)
 800dd8e:	400b      	ands	r3, r1
 800dd90:	69b9      	ldr	r1, [r7, #24]
 800dd92:	0148      	lsls	r0, r1, #5
 800dd94:	69f9      	ldr	r1, [r7, #28]
 800dd96:	4401      	add	r1, r0
 800dd98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	015a      	lsls	r2, r3, #5
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	4413      	add	r3, r2
 800dda8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddac:	691a      	ldr	r2, [r3, #16]
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	689b      	ldr	r3, [r3, #8]
 800ddb2:	8af9      	ldrh	r1, [r7, #22]
 800ddb4:	fb01 f303 	mul.w	r3, r1, r3
 800ddb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddbc:	69b9      	ldr	r1, [r7, #24]
 800ddbe:	0148      	lsls	r0, r1, #5
 800ddc0:	69f9      	ldr	r1, [r7, #28]
 800ddc2:	4401      	add	r1, r0
 800ddc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d10d      	bne.n	800ddee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d009      	beq.n	800ddee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	68d9      	ldr	r1, [r3, #12]
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	015a      	lsls	r2, r3, #5
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	4413      	add	r3, r2
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	460a      	mov	r2, r1
 800ddec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	78db      	ldrb	r3, [r3, #3]
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d128      	bne.n	800de48 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de02:	2b00      	cmp	r3, #0
 800de04:	d110      	bne.n	800de28 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	015a      	lsls	r2, r3, #5
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	4413      	add	r3, r2
 800de0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	69ba      	ldr	r2, [r7, #24]
 800de16:	0151      	lsls	r1, r2, #5
 800de18:	69fa      	ldr	r2, [r7, #28]
 800de1a:	440a      	add	r2, r1
 800de1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	e00f      	b.n	800de48 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	015a      	lsls	r2, r3, #5
 800de2c:	69fb      	ldr	r3, [r7, #28]
 800de2e:	4413      	add	r3, r2
 800de30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	69ba      	ldr	r2, [r7, #24]
 800de38:	0151      	lsls	r1, r2, #5
 800de3a:	69fa      	ldr	r2, [r7, #28]
 800de3c:	440a      	add	r2, r1
 800de3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de48:	69bb      	ldr	r3, [r7, #24]
 800de4a:	015a      	lsls	r2, r3, #5
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	4413      	add	r3, r2
 800de50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	69ba      	ldr	r2, [r7, #24]
 800de58:	0151      	lsls	r1, r2, #5
 800de5a:	69fa      	ldr	r2, [r7, #28]
 800de5c:	440a      	add	r2, r1
 800de5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de68:	2300      	movs	r3, #0
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3720      	adds	r7, #32
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	fff80000 	.word	0xfff80000
 800de78:	e007ffff 	.word	0xe007ffff
 800de7c:	1ff80000 	.word	0x1ff80000

0800de80 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800de80:	b480      	push	{r7}
 800de82:	b087      	sub	sp, #28
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	4613      	mov	r3, r2
 800de8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	f040 80cd 	bne.w	800e03c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	695b      	ldr	r3, [r3, #20]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d132      	bne.n	800df10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	015a      	lsls	r2, r3, #5
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	4413      	add	r3, r2
 800deb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800deb6:	691a      	ldr	r2, [r3, #16]
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	0159      	lsls	r1, r3, #5
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	440b      	add	r3, r1
 800dec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dec4:	4619      	mov	r1, r3
 800dec6:	4b98      	ldr	r3, [pc, #608]	; (800e128 <USB_EP0StartXfer+0x2a8>)
 800dec8:	4013      	ands	r3, r2
 800deca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	015a      	lsls	r2, r3, #5
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	4413      	add	r3, r2
 800ded4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	0151      	lsls	r1, r2, #5
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	440a      	add	r2, r1
 800dee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dee6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800deea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	015a      	lsls	r2, r3, #5
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	4413      	add	r3, r2
 800def4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def8:	691a      	ldr	r2, [r3, #16]
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	0159      	lsls	r1, r3, #5
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	440b      	add	r3, r1
 800df02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df06:	4619      	mov	r1, r3
 800df08:	4b88      	ldr	r3, [pc, #544]	; (800e12c <USB_EP0StartXfer+0x2ac>)
 800df0a:	4013      	ands	r3, r2
 800df0c:	610b      	str	r3, [r1, #16]
 800df0e:	e04e      	b.n	800dfae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	015a      	lsls	r2, r3, #5
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	4413      	add	r3, r2
 800df18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df1c:	691a      	ldr	r2, [r3, #16]
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	0159      	lsls	r1, r3, #5
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	440b      	add	r3, r1
 800df26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df2a:	4619      	mov	r1, r3
 800df2c:	4b7f      	ldr	r3, [pc, #508]	; (800e12c <USB_EP0StartXfer+0x2ac>)
 800df2e:	4013      	ands	r3, r2
 800df30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	015a      	lsls	r2, r3, #5
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	4413      	add	r3, r2
 800df3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df3e:	691a      	ldr	r2, [r3, #16]
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	0159      	lsls	r1, r3, #5
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	440b      	add	r3, r1
 800df48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4c:	4619      	mov	r1, r3
 800df4e:	4b76      	ldr	r3, [pc, #472]	; (800e128 <USB_EP0StartXfer+0x2a8>)
 800df50:	4013      	ands	r3, r2
 800df52:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	695a      	ldr	r2, [r3, #20]
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d903      	bls.n	800df68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	689a      	ldr	r2, [r3, #8]
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	015a      	lsls	r2, r3, #5
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	4413      	add	r3, r2
 800df70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	693a      	ldr	r2, [r7, #16]
 800df78:	0151      	lsls	r1, r2, #5
 800df7a:	697a      	ldr	r2, [r7, #20]
 800df7c:	440a      	add	r2, r1
 800df7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	015a      	lsls	r2, r3, #5
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	4413      	add	r3, r2
 800df90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df94:	691a      	ldr	r2, [r3, #16]
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df9e:	6939      	ldr	r1, [r7, #16]
 800dfa0:	0148      	lsls	r0, r1, #5
 800dfa2:	6979      	ldr	r1, [r7, #20]
 800dfa4:	4401      	add	r1, r0
 800dfa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dfae:	79fb      	ldrb	r3, [r7, #7]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d11e      	bne.n	800dff2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d009      	beq.n	800dfd0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	015a      	lsls	r2, r3, #5
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	4413      	add	r3, r2
 800dfc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfc8:	461a      	mov	r2, r3
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	0151      	lsls	r1, r2, #5
 800dfe2:	697a      	ldr	r2, [r7, #20]
 800dfe4:	440a      	add	r2, r1
 800dfe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dfee:	6013      	str	r3, [r2, #0]
 800dff0:	e092      	b.n	800e118 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	015a      	lsls	r2, r3, #5
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	4413      	add	r3, r2
 800dffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	693a      	ldr	r2, [r7, #16]
 800e002:	0151      	lsls	r1, r2, #5
 800e004:	697a      	ldr	r2, [r7, #20]
 800e006:	440a      	add	r2, r1
 800e008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e010:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d07e      	beq.n	800e118 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	f003 030f 	and.w	r3, r3, #15
 800e02a:	2101      	movs	r1, #1
 800e02c:	fa01 f303 	lsl.w	r3, r1, r3
 800e030:	6979      	ldr	r1, [r7, #20]
 800e032:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e036:	4313      	orrs	r3, r2
 800e038:	634b      	str	r3, [r1, #52]	; 0x34
 800e03a:	e06d      	b.n	800e118 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	015a      	lsls	r2, r3, #5
 800e040:	697b      	ldr	r3, [r7, #20]
 800e042:	4413      	add	r3, r2
 800e044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e048:	691a      	ldr	r2, [r3, #16]
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	0159      	lsls	r1, r3, #5
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	440b      	add	r3, r1
 800e052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e056:	4619      	mov	r1, r3
 800e058:	4b34      	ldr	r3, [pc, #208]	; (800e12c <USB_EP0StartXfer+0x2ac>)
 800e05a:	4013      	ands	r3, r2
 800e05c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	015a      	lsls	r2, r3, #5
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	4413      	add	r3, r2
 800e066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e06a:	691a      	ldr	r2, [r3, #16]
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	0159      	lsls	r1, r3, #5
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	440b      	add	r3, r1
 800e074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e078:	4619      	mov	r1, r3
 800e07a:	4b2b      	ldr	r3, [pc, #172]	; (800e128 <USB_EP0StartXfer+0x2a8>)
 800e07c:	4013      	ands	r3, r2
 800e07e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	695b      	ldr	r3, [r3, #20]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	689a      	ldr	r2, [r3, #8]
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	015a      	lsls	r2, r3, #5
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	4413      	add	r3, r2
 800e098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	693a      	ldr	r2, [r7, #16]
 800e0a0:	0151      	lsls	r1, r2, #5
 800e0a2:	697a      	ldr	r2, [r7, #20]
 800e0a4:	440a      	add	r2, r1
 800e0a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e0ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	015a      	lsls	r2, r3, #5
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0bc:	691a      	ldr	r2, [r3, #16]
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e0c6:	6939      	ldr	r1, [r7, #16]
 800e0c8:	0148      	lsls	r0, r1, #5
 800e0ca:	6979      	ldr	r1, [r7, #20]
 800e0cc:	4401      	add	r1, r0
 800e0ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e0d6:	79fb      	ldrb	r3, [r7, #7]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d10d      	bne.n	800e0f8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	68d9      	ldr	r1, [r3, #12]
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	015a      	lsls	r2, r3, #5
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0f4:	460a      	mov	r2, r1
 800e0f6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	015a      	lsls	r2, r3, #5
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	4413      	add	r3, r2
 800e100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	0151      	lsls	r1, r2, #5
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	440a      	add	r2, r1
 800e10e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e116:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	371c      	adds	r7, #28
 800e11e:	46bd      	mov	sp, r7
 800e120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	e007ffff 	.word	0xe007ffff
 800e12c:	fff80000 	.word	0xfff80000

0800e130 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e130:	b480      	push	{r7}
 800e132:	b089      	sub	sp, #36	; 0x24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4611      	mov	r1, r2
 800e13c:	461a      	mov	r2, r3
 800e13e:	460b      	mov	r3, r1
 800e140:	71fb      	strb	r3, [r7, #7]
 800e142:	4613      	mov	r3, r2
 800e144:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800e14e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e152:	2b00      	cmp	r3, #0
 800e154:	d11a      	bne.n	800e18c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e156:	88bb      	ldrh	r3, [r7, #4]
 800e158:	3303      	adds	r3, #3
 800e15a:	089b      	lsrs	r3, r3, #2
 800e15c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e15e:	2300      	movs	r3, #0
 800e160:	61bb      	str	r3, [r7, #24]
 800e162:	e00f      	b.n	800e184 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	031a      	lsls	r2, r3, #12
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e170:	461a      	mov	r2, r3
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	3304      	adds	r3, #4
 800e17c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e17e:	69bb      	ldr	r3, [r7, #24]
 800e180:	3301      	adds	r3, #1
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	69ba      	ldr	r2, [r7, #24]
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d3eb      	bcc.n	800e164 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3724      	adds	r7, #36	; 0x24
 800e192:	46bd      	mov	sp, r7
 800e194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e198:	4770      	bx	lr

0800e19a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e19a:	b480      	push	{r7}
 800e19c:	b089      	sub	sp, #36	; 0x24
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	60f8      	str	r0, [r7, #12]
 800e1a2:	60b9      	str	r1, [r7, #8]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800e1b0:	88fb      	ldrh	r3, [r7, #6]
 800e1b2:	3303      	adds	r3, #3
 800e1b4:	089b      	lsrs	r3, r3, #2
 800e1b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	e00b      	b.n	800e1d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	3304      	adds	r3, #4
 800e1ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e1d0:	69bb      	ldr	r3, [r7, #24]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	61bb      	str	r3, [r7, #24]
 800e1d6:	69ba      	ldr	r2, [r7, #24]
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d3ef      	bcc.n	800e1be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e1de:	69fb      	ldr	r3, [r7, #28]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3724      	adds	r7, #36	; 0x24
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	785b      	ldrb	r3, [r3, #1]
 800e204:	2b01      	cmp	r3, #1
 800e206:	d12c      	bne.n	800e262 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	015a      	lsls	r2, r3, #5
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	4413      	add	r3, r2
 800e210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2b00      	cmp	r3, #0
 800e218:	db12      	blt.n	800e240 <USB_EPSetStall+0x54>
 800e21a:	68bb      	ldr	r3, [r7, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00f      	beq.n	800e240 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	015a      	lsls	r2, r3, #5
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	4413      	add	r3, r2
 800e228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	68ba      	ldr	r2, [r7, #8]
 800e230:	0151      	lsls	r1, r2, #5
 800e232:	68fa      	ldr	r2, [r7, #12]
 800e234:	440a      	add	r2, r1
 800e236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e23a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e23e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	015a      	lsls	r2, r3, #5
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	0151      	lsls	r1, r2, #5
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	440a      	add	r2, r1
 800e256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	e02b      	b.n	800e2ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	db12      	blt.n	800e29a <USB_EPSetStall+0xae>
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00f      	beq.n	800e29a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	015a      	lsls	r2, r3, #5
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	4413      	add	r3, r2
 800e282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	0151      	lsls	r1, r2, #5
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	440a      	add	r2, r1
 800e290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e294:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e298:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	015a      	lsls	r2, r3, #5
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	0151      	lsls	r1, r2, #5
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	440a      	add	r2, r1
 800e2b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e2b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3714      	adds	r7, #20
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b085      	sub	sp, #20
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
 800e2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	785b      	ldrb	r3, [r3, #1]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d128      	bne.n	800e336 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	015a      	lsls	r2, r3, #5
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	0151      	lsls	r1, r2, #5
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	440a      	add	r2, r1
 800e2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e302:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	78db      	ldrb	r3, [r3, #3]
 800e308:	2b03      	cmp	r3, #3
 800e30a:	d003      	beq.n	800e314 <USB_EPClearStall+0x4c>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	78db      	ldrb	r3, [r3, #3]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d138      	bne.n	800e386 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	0151      	lsls	r1, r2, #5
 800e326:	68fa      	ldr	r2, [r7, #12]
 800e328:	440a      	add	r2, r1
 800e32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e32e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	e027      	b.n	800e386 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	015a      	lsls	r2, r3, #5
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	4413      	add	r3, r2
 800e33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	0151      	lsls	r1, r2, #5
 800e348:	68fa      	ldr	r2, [r7, #12]
 800e34a:	440a      	add	r2, r1
 800e34c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e350:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e354:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	78db      	ldrb	r3, [r3, #3]
 800e35a:	2b03      	cmp	r3, #3
 800e35c:	d003      	beq.n	800e366 <USB_EPClearStall+0x9e>
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	78db      	ldrb	r3, [r3, #3]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d10f      	bne.n	800e386 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	015a      	lsls	r2, r3, #5
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	4413      	add	r3, r2
 800e36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	68ba      	ldr	r2, [r7, #8]
 800e376:	0151      	lsls	r1, r2, #5
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	440a      	add	r2, r1
 800e37c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e384:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e386:	2300      	movs	r3, #0
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	460b      	mov	r3, r1
 800e39e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68fa      	ldr	r2, [r7, #12]
 800e3ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e3b6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	78fb      	ldrb	r3, [r7, #3]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e3c8:	68f9      	ldr	r1, [r7, #12]
 800e3ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3ce:	4313      	orrs	r3, r2
 800e3d0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e3d2:	2300      	movs	r3, #0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3714      	adds	r7, #20
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b084      	sub	sp, #16
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3f2:	685b      	ldr	r3, [r3, #4]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3fa:	f023 0302 	bic.w	r3, r3, #2
 800e3fe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e400:	2003      	movs	r0, #3
 800e402:	f7f7 fb67 	bl	8005ad4 <HAL_Delay>

  return HAL_OK;
 800e406:	2300      	movs	r3, #0
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e42a:	f043 0302 	orr.w	r3, r3, #2
 800e42e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e430:	2003      	movs	r0, #3
 800e432:	f7f7 fb4f 	bl	8005ad4 <HAL_Delay>

  return HAL_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e440:	b480      	push	{r7}
 800e442:	b085      	sub	sp, #20
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	695b      	ldr	r3, [r3, #20]
 800e44c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	699b      	ldr	r3, [r3, #24]
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	4013      	ands	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e458:	68fb      	ldr	r3, [r7, #12]
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3714      	adds	r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr

0800e466 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e466:	b480      	push	{r7}
 800e468:	b085      	sub	sp, #20
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e482:	69db      	ldr	r3, [r3, #28]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	4013      	ands	r3, r2
 800e488:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	0c1b      	lsrs	r3, r3, #16
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3714      	adds	r7, #20
 800e492:	46bd      	mov	sp, r7
 800e494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e498:	4770      	bx	lr

0800e49a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e49a:	b480      	push	{r7}
 800e49c:	b085      	sub	sp, #20
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4b6:	69db      	ldr	r3, [r3, #28]
 800e4b8:	68ba      	ldr	r2, [r7, #8]
 800e4ba:	4013      	ands	r3, r2
 800e4bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	b29b      	uxth	r3, r3
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr

0800e4ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e4ce:	b480      	push	{r7}
 800e4d0:	b085      	sub	sp, #20
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	6078      	str	r0, [r7, #4]
 800e4d6:	460b      	mov	r3, r1
 800e4d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	015a      	lsls	r2, r3, #5
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	68ba      	ldr	r2, [r7, #8]
 800e4f8:	4013      	ands	r3, r2
 800e4fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e4fc:	68bb      	ldr	r3, [r7, #8]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3714      	adds	r7, #20
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr

0800e50a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e50a:	b480      	push	{r7}
 800e50c:	b087      	sub	sp, #28
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	460b      	mov	r3, r1
 800e514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e520:	691b      	ldr	r3, [r3, #16]
 800e522:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e52a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e52e:	78fb      	ldrb	r3, [r7, #3]
 800e530:	f003 030f 	and.w	r3, r3, #15
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	fa22 f303 	lsr.w	r3, r2, r3
 800e53a:	01db      	lsls	r3, r3, #7
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	693a      	ldr	r2, [r7, #16]
 800e540:	4313      	orrs	r3, r2
 800e542:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e544:	78fb      	ldrb	r3, [r7, #3]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e550:	689b      	ldr	r3, [r3, #8]
 800e552:	693a      	ldr	r2, [r7, #16]
 800e554:	4013      	ands	r3, r2
 800e556:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e558:	68bb      	ldr	r3, [r7, #8]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	371c      	adds	r7, #28
 800e55e:	46bd      	mov	sp, r7
 800e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e564:	4770      	bx	lr

0800e566 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	f003 0301 	and.w	r3, r3, #1
}
 800e576:	4618      	mov	r0, r3
 800e578:	370c      	adds	r7, #12
 800e57a:	46bd      	mov	sp, r7
 800e57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e580:	4770      	bx	lr
	...

0800e584 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e59e:	4619      	mov	r1, r3
 800e5a0:	4b09      	ldr	r3, [pc, #36]	; (800e5c8 <USB_ActivateSetup+0x44>)
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	68fa      	ldr	r2, [r7, #12]
 800e5b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e5b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3714      	adds	r7, #20
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr
 800e5c8:	fffff800 	.word	0xfffff800

0800e5cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b087      	sub	sp, #28
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	607a      	str	r2, [r7, #4]
 800e5d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	333c      	adds	r3, #60	; 0x3c
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	4a26      	ldr	r2, [pc, #152]	; (800e684 <USB_EP0_OutStart+0xb8>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d90a      	bls.n	800e606 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e5fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e600:	d101      	bne.n	800e606 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e602:	2300      	movs	r3, #0
 800e604:	e037      	b.n	800e676 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e60c:	461a      	mov	r2, r3
 800e60e:	2300      	movs	r3, #0
 800e610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e618:	691b      	ldr	r3, [r3, #16]
 800e61a:	697a      	ldr	r2, [r7, #20]
 800e61c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e62c:	691b      	ldr	r3, [r3, #16]
 800e62e:	697a      	ldr	r2, [r7, #20]
 800e630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e634:	f043 0318 	orr.w	r3, r3, #24
 800e638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e63a:	697b      	ldr	r3, [r7, #20]
 800e63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e640:	691b      	ldr	r3, [r3, #16]
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e648:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e64c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e64e:	7afb      	ldrb	r3, [r7, #11]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d10f      	bne.n	800e674 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e65a:	461a      	mov	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	697a      	ldr	r2, [r7, #20]
 800e66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e66e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	371c      	adds	r7, #28
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	4f54300a 	.word	0x4f54300a

0800e688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e688:	b480      	push	{r7}
 800e68a:	b085      	sub	sp, #20
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e690:	2300      	movs	r3, #0
 800e692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3301      	adds	r3, #1
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	4a13      	ldr	r2, [pc, #76]	; (800e6ec <USB_CoreReset+0x64>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d901      	bls.n	800e6a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e6a2:	2303      	movs	r3, #3
 800e6a4:	e01b      	b.n	800e6de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	691b      	ldr	r3, [r3, #16]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	daf2      	bge.n	800e694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	f043 0201 	orr.w	r2, r3, #1
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	4a09      	ldr	r2, [pc, #36]	; (800e6ec <USB_CoreReset+0x64>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d901      	bls.n	800e6d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e6cc:	2303      	movs	r3, #3
 800e6ce:	e006      	b.n	800e6de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	691b      	ldr	r3, [r3, #16]
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d0f0      	beq.n	800e6be <USB_CoreReset+0x36>

  return HAL_OK;
 800e6dc:	2300      	movs	r3, #0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3714      	adds	r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	00030d40 	.word	0x00030d40

0800e6f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e6f4:	4904      	ldr	r1, [pc, #16]	; (800e708 <MX_FATFS_Init+0x18>)
 800e6f6:	4805      	ldr	r0, [pc, #20]	; (800e70c <MX_FATFS_Init+0x1c>)
 800e6f8:	f004 fd5e 	bl	80131b8 <FATFS_LinkDriver>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	461a      	mov	r2, r3
 800e700:	4b03      	ldr	r3, [pc, #12]	; (800e710 <MX_FATFS_Init+0x20>)
 800e702:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e704:	bf00      	nop
 800e706:	bd80      	pop	{r7, pc}
 800e708:	2002721c 	.word	0x2002721c
 800e70c:	0801ad84 	.word	0x0801ad84
 800e710:	20027218 	.word	0x20027218

0800e714 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e714:	b480      	push	{r7}
 800e716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e718:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e72a:	2300      	movs	r3, #0
 800e72c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e72e:	f000 f896 	bl	800e85e <BSP_SD_IsDetected>
 800e732:	4603      	mov	r3, r0
 800e734:	2b01      	cmp	r3, #1
 800e736:	d001      	beq.n	800e73c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e738:	2302      	movs	r3, #2
 800e73a:	e012      	b.n	800e762 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e73c:	480b      	ldr	r0, [pc, #44]	; (800e76c <BSP_SD_Init+0x48>)
 800e73e:	f7fa fa91 	bl	8008c64 <HAL_SD_Init>
 800e742:	4603      	mov	r3, r0
 800e744:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d109      	bne.n	800e760 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e74c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e750:	4806      	ldr	r0, [pc, #24]	; (800e76c <BSP_SD_Init+0x48>)
 800e752:	f7fb f849 	bl	80097e8 <HAL_SD_ConfigWideBusOperation>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d001      	beq.n	800e760 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e75c:	2301      	movs	r3, #1
 800e75e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e760:	79fb      	ldrb	r3, [r7, #7]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3708      	adds	r7, #8
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20008ad4 	.word	0x20008ad4

0800e770 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af00      	add	r7, sp, #0
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	60b9      	str	r1, [r7, #8]
 800e77a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	68ba      	ldr	r2, [r7, #8]
 800e784:	68f9      	ldr	r1, [r7, #12]
 800e786:	4806      	ldr	r0, [pc, #24]	; (800e7a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e788:	f7fa fb04 	bl	8008d94 <HAL_SD_ReadBlocks_DMA>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e796:	7dfb      	ldrb	r3, [r7, #23]
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3718      	adds	r7, #24
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}
 800e7a0:	20008ad4 	.word	0x20008ad4

0800e7a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	68f9      	ldr	r1, [r7, #12]
 800e7ba:	4806      	ldr	r0, [pc, #24]	; (800e7d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e7bc:	f7fa fbd6 	bl	8008f6c <HAL_SD_WriteBlocks_DMA>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	20008ad4 	.word	0x20008ad4

0800e7d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e7dc:	4805      	ldr	r0, [pc, #20]	; (800e7f4 <BSP_SD_GetCardState+0x1c>)
 800e7de:	f7fb f87f 	bl	80098e0 <HAL_SD_GetCardState>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b04      	cmp	r3, #4
 800e7e6:	bf14      	ite	ne
 800e7e8:	2301      	movne	r3, #1
 800e7ea:	2300      	moveq	r3, #0
 800e7ec:	b2db      	uxtb	r3, r3
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	20008ad4 	.word	0x20008ad4

0800e7f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	4803      	ldr	r0, [pc, #12]	; (800e810 <BSP_SD_GetCardInfo+0x18>)
 800e804:	f7fa ffc4 	bl	8009790 <HAL_SD_GetCardInfo>
}
 800e808:	bf00      	nop
 800e80a:	3708      	adds	r7, #8
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	20008ad4 	.word	0x20008ad4

0800e814 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e81c:	f000 f818 	bl	800e850 <BSP_SD_AbortCallback>
}
 800e820:	bf00      	nop
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b082      	sub	sp, #8
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e830:	f000 f998 	bl	800eb64 <BSP_SD_WriteCpltCallback>
}
 800e834:	bf00      	nop
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e844:	f000 f9a0 	bl	800eb88 <BSP_SD_ReadCpltCallback>
}
 800e848:	bf00      	nop
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e850:	b480      	push	{r7}
 800e852:	af00      	add	r7, sp, #0

}
 800e854:	bf00      	nop
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e85e:	b480      	push	{r7}
 800e860:	b083      	sub	sp, #12
 800e862:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e864:	2301      	movs	r3, #1
 800e866:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	b2db      	uxtb	r3, r3
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	370c      	adds	r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800e880:	f004 fd84 	bl	801338c <osKernelGetTickCount>
 800e884:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800e886:	e006      	b.n	800e896 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e888:	f7ff ffa6 	bl	800e7d8 <BSP_SD_GetCardState>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d101      	bne.n	800e896 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e892:	2300      	movs	r3, #0
 800e894:	e009      	b.n	800e8aa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800e896:	f004 fd79 	bl	801338c <osKernelGetTickCount>
 800e89a:	4602      	mov	r2, r0
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	687a      	ldr	r2, [r7, #4]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d8f0      	bhi.n	800e888 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e8a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e8be:	4b0b      	ldr	r3, [pc, #44]	; (800e8ec <SD_CheckStatus+0x38>)
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8c4:	f7ff ff88 	bl	800e7d8 <BSP_SD_GetCardState>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d107      	bne.n	800e8de <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e8ce:	4b07      	ldr	r3, [pc, #28]	; (800e8ec <SD_CheckStatus+0x38>)
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	f023 0301 	bic.w	r3, r3, #1
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	4b04      	ldr	r3, [pc, #16]	; (800e8ec <SD_CheckStatus+0x38>)
 800e8dc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e8de:	4b03      	ldr	r3, [pc, #12]	; (800e8ec <SD_CheckStatus+0x38>)
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	b2db      	uxtb	r3, r3
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	20000009 	.word	0x20000009

0800e8f0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e8fa:	4b1c      	ldr	r3, [pc, #112]	; (800e96c <SD_initialize+0x7c>)
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e900:	f004 fcec 	bl	80132dc <osKernelGetState>
 800e904:	4603      	mov	r3, r0
 800e906:	2b02      	cmp	r3, #2
 800e908:	d129      	bne.n	800e95e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e90a:	f7ff ff0b 	bl	800e724 <BSP_SD_Init>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d107      	bne.n	800e924 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e914:	79fb      	ldrb	r3, [r7, #7]
 800e916:	4618      	mov	r0, r3
 800e918:	f7ff ffcc 	bl	800e8b4 <SD_CheckStatus>
 800e91c:	4603      	mov	r3, r0
 800e91e:	461a      	mov	r2, r3
 800e920:	4b12      	ldr	r3, [pc, #72]	; (800e96c <SD_initialize+0x7c>)
 800e922:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e924:	4b11      	ldr	r3, [pc, #68]	; (800e96c <SD_initialize+0x7c>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d017      	beq.n	800e95e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800e92e:	4b10      	ldr	r3, [pc, #64]	; (800e970 <SD_initialize+0x80>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d107      	bne.n	800e946 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e936:	2200      	movs	r2, #0
 800e938:	2102      	movs	r1, #2
 800e93a:	200a      	movs	r0, #10
 800e93c:	f005 f946 	bl	8013bcc <osMessageQueueNew>
 800e940:	4602      	mov	r2, r0
 800e942:	4b0b      	ldr	r3, [pc, #44]	; (800e970 <SD_initialize+0x80>)
 800e944:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800e946:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <SD_initialize+0x80>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d107      	bne.n	800e95e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <SD_initialize+0x7c>)
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	f043 0301 	orr.w	r3, r3, #1
 800e958:	b2da      	uxtb	r2, r3
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <SD_initialize+0x7c>)
 800e95c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e95e:	4b03      	ldr	r3, [pc, #12]	; (800e96c <SD_initialize+0x7c>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	b2db      	uxtb	r3, r3
}
 800e964:	4618      	mov	r0, r3
 800e966:	3708      	adds	r7, #8
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	20000009 	.word	0x20000009
 800e970:	20000430 	.word	0x20000430

0800e974 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	4603      	mov	r3, r0
 800e97c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e97e:	79fb      	ldrb	r3, [r7, #7]
 800e980:	4618      	mov	r0, r3
 800e982:	f7ff ff97 	bl	800e8b4 <SD_CheckStatus>
 800e986:	4603      	mov	r3, r0
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3708      	adds	r7, #8
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b088      	sub	sp, #32
 800e994:	af00      	add	r7, sp, #0
 800e996:	60b9      	str	r1, [r7, #8]
 800e998:	607a      	str	r2, [r7, #4]
 800e99a:	603b      	str	r3, [r7, #0]
 800e99c:	4603      	mov	r3, r0
 800e99e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e9a0:	2301      	movs	r3, #1
 800e9a2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e9a4:	f247 5030 	movw	r0, #30000	; 0x7530
 800e9a8:	f7ff ff66 	bl	800e878 <SD_CheckStatusWithTimeout>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	da01      	bge.n	800e9b6 <SD_read+0x26>
  {
    return res;
 800e9b2:	7ffb      	ldrb	r3, [r7, #31]
 800e9b4:	e02f      	b.n	800ea16 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	6879      	ldr	r1, [r7, #4]
 800e9ba:	68b8      	ldr	r0, [r7, #8]
 800e9bc:	f7ff fed8 	bl	800e770 <BSP_SD_ReadBlocks_DMA>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800e9c4:	7fbb      	ldrb	r3, [r7, #30]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d124      	bne.n	800ea14 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e9ca:	4b15      	ldr	r3, [pc, #84]	; (800ea20 <SD_read+0x90>)
 800e9cc:	6818      	ldr	r0, [r3, #0]
 800e9ce:	f107 0112 	add.w	r1, r7, #18
 800e9d2:	f247 5330 	movw	r3, #30000	; 0x7530
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	f005 f9f2 	bl	8013dc0 <osMessageQueueGet>
 800e9dc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d117      	bne.n	800ea14 <SD_read+0x84>
 800e9e4:	8a7b      	ldrh	r3, [r7, #18]
 800e9e6:	2b01      	cmp	r3, #1
 800e9e8:	d114      	bne.n	800ea14 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800e9ea:	f004 fccf 	bl	801338c <osKernelGetTickCount>
 800e9ee:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e9f0:	e007      	b.n	800ea02 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e9f2:	f7ff fef1 	bl	800e7d8 <BSP_SD_GetCardState>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d102      	bne.n	800ea02 <SD_read+0x72>
              {
                res = RES_OK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ea00:	e008      	b.n	800ea14 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ea02:	f004 fcc3 	bl	801338c <osKernelGetTickCount>
 800ea06:	4602      	mov	r2, r0
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	f247 522f 	movw	r2, #29999	; 0x752f
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d9ee      	bls.n	800e9f2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ea14:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3720      	adds	r7, #32
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	20000430 	.word	0x20000430

0800ea24 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b088      	sub	sp, #32
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	60b9      	str	r1, [r7, #8]
 800ea2c:	607a      	str	r2, [r7, #4]
 800ea2e:	603b      	str	r3, [r7, #0]
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ea38:	f247 5030 	movw	r0, #30000	; 0x7530
 800ea3c:	f7ff ff1c 	bl	800e878 <SD_CheckStatusWithTimeout>
 800ea40:	4603      	mov	r3, r0
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	da01      	bge.n	800ea4a <SD_write+0x26>
  {
    return res;
 800ea46:	7ffb      	ldrb	r3, [r7, #31]
 800ea48:	e02d      	b.n	800eaa6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	6879      	ldr	r1, [r7, #4]
 800ea4e:	68b8      	ldr	r0, [r7, #8]
 800ea50:	f7ff fea8 	bl	800e7a4 <BSP_SD_WriteBlocks_DMA>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d124      	bne.n	800eaa4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ea5a:	4b15      	ldr	r3, [pc, #84]	; (800eab0 <SD_write+0x8c>)
 800ea5c:	6818      	ldr	r0, [r3, #0]
 800ea5e:	f107 0112 	add.w	r1, r7, #18
 800ea62:	f247 5330 	movw	r3, #30000	; 0x7530
 800ea66:	2200      	movs	r2, #0
 800ea68:	f005 f9aa 	bl	8013dc0 <osMessageQueueGet>
 800ea6c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d117      	bne.n	800eaa4 <SD_write+0x80>
 800ea74:	8a7b      	ldrh	r3, [r7, #18]
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d114      	bne.n	800eaa4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800ea7a:	f004 fc87 	bl	801338c <osKernelGetTickCount>
 800ea7e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ea80:	e007      	b.n	800ea92 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ea82:	f7ff fea9 	bl	800e7d8 <BSP_SD_GetCardState>
 800ea86:	4603      	mov	r3, r0
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d102      	bne.n	800ea92 <SD_write+0x6e>
          {
            res = RES_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	77fb      	strb	r3, [r7, #31]
            break;
 800ea90:	e008      	b.n	800eaa4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800ea92:	f004 fc7b 	bl	801338c <osKernelGetTickCount>
 800ea96:	4602      	mov	r2, r0
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	1ad3      	subs	r3, r2, r3
 800ea9c:	f247 522f 	movw	r2, #29999	; 0x752f
 800eaa0:	4293      	cmp	r3, r2
 800eaa2:	d9ee      	bls.n	800ea82 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800eaa4:	7ffb      	ldrb	r3, [r7, #31]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3720      	adds	r7, #32
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	20000430 	.word	0x20000430

0800eab4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b08c      	sub	sp, #48	; 0x30
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	4603      	mov	r3, r0
 800eabc:	603a      	str	r2, [r7, #0]
 800eabe:	71fb      	strb	r3, [r7, #7]
 800eac0:	460b      	mov	r3, r1
 800eac2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800eac4:	2301      	movs	r3, #1
 800eac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800eaca:	4b25      	ldr	r3, [pc, #148]	; (800eb60 <SD_ioctl+0xac>)
 800eacc:	781b      	ldrb	r3, [r3, #0]
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	f003 0301 	and.w	r3, r3, #1
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <SD_ioctl+0x28>
 800ead8:	2303      	movs	r3, #3
 800eada:	e03c      	b.n	800eb56 <SD_ioctl+0xa2>

  switch (cmd)
 800eadc:	79bb      	ldrb	r3, [r7, #6]
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d834      	bhi.n	800eb4c <SD_ioctl+0x98>
 800eae2:	a201      	add	r2, pc, #4	; (adr r2, 800eae8 <SD_ioctl+0x34>)
 800eae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae8:	0800eaf9 	.word	0x0800eaf9
 800eaec:	0800eb01 	.word	0x0800eb01
 800eaf0:	0800eb19 	.word	0x0800eb19
 800eaf4:	0800eb33 	.word	0x0800eb33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eafe:	e028      	b.n	800eb52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb00:	f107 030c 	add.w	r3, r7, #12
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fe77 	bl	800e7f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800eb0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb16:	e01c      	b.n	800eb52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb18:	f107 030c 	add.w	r3, r7, #12
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7ff fe6b 	bl	800e7f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb30:	e00f      	b.n	800eb52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800eb32:	f107 030c 	add.w	r3, r7, #12
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7ff fe5e 	bl	800e7f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800eb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb3e:	0a5a      	lsrs	r2, r3, #9
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800eb4a:	e002      	b.n	800eb52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800eb4c:	2304      	movs	r3, #4
 800eb4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800eb52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3730      	adds	r7, #48	; 0x30
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	20000009 	.word	0x20000009

0800eb64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b082      	sub	sp, #8
 800eb68:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800eb6a:	2302      	movs	r3, #2
 800eb6c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800eb6e:	4b05      	ldr	r3, [pc, #20]	; (800eb84 <BSP_SD_WriteCpltCallback+0x20>)
 800eb70:	6818      	ldr	r0, [r3, #0]
 800eb72:	1db9      	adds	r1, r7, #6
 800eb74:	2300      	movs	r3, #0
 800eb76:	2200      	movs	r2, #0
 800eb78:	f005 f8ae 	bl	8013cd8 <osMessageQueuePut>
#endif
}
 800eb7c:	bf00      	nop
 800eb7e:	3708      	adds	r7, #8
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	20000430 	.word	0x20000430

0800eb88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800eb8e:	2301      	movs	r3, #1
 800eb90:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800eb92:	4b05      	ldr	r3, [pc, #20]	; (800eba8 <BSP_SD_ReadCpltCallback+0x20>)
 800eb94:	6818      	ldr	r0, [r3, #0]
 800eb96:	1db9      	adds	r1, r7, #6
 800eb98:	2300      	movs	r3, #0
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f005 f89c 	bl	8013cd8 <osMessageQueuePut>
#endif
}
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	20000430 	.word	0x20000430

0800ebac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ebb8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ebbc:	f009 f8d2 	bl	8017d64 <malloc>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d105      	bne.n	800ebd6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ebd2:	2302      	movs	r3, #2
 800ebd4:	e066      	b.n	800eca4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68fa      	ldr	r2, [r7, #12]
 800ebda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	7c1b      	ldrb	r3, [r3, #16]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d119      	bne.n	800ec1a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ebe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebea:	2202      	movs	r2, #2
 800ebec:	2181      	movs	r1, #129	; 0x81
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f008 feeb 	bl	80179ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ebfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebfe:	2202      	movs	r2, #2
 800ec00:	2101      	movs	r1, #1
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f008 fee1 	bl	80179ca <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2210      	movs	r2, #16
 800ec14:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ec18:	e016      	b.n	800ec48 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ec1a:	2340      	movs	r3, #64	; 0x40
 800ec1c:	2202      	movs	r2, #2
 800ec1e:	2181      	movs	r1, #129	; 0x81
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f008 fed2 	bl	80179ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ec2c:	2340      	movs	r3, #64	; 0x40
 800ec2e:	2202      	movs	r2, #2
 800ec30:	2101      	movs	r1, #1
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f008 fec9 	bl	80179ca <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2210      	movs	r2, #16
 800ec44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ec48:	2308      	movs	r3, #8
 800ec4a:	2203      	movs	r2, #3
 800ec4c:	2182      	movs	r1, #130	; 0x82
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f008 febb 	bl	80179ca <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	7c1b      	ldrb	r3, [r3, #16]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d109      	bne.n	800ec92 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec88:	2101      	movs	r1, #1
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f008 ff8c 	bl	8017ba8 <USBD_LL_PrepareReceive>
 800ec90:	e007      	b.n	800eca2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ec98:	2340      	movs	r3, #64	; 0x40
 800ec9a:	2101      	movs	r1, #1
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f008 ff83 	bl	8017ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eca2:	2300      	movs	r3, #0
}
 800eca4:	4618      	mov	r0, r3
 800eca6:	3710      	adds	r7, #16
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}

0800ecac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ecbc:	2181      	movs	r1, #129	; 0x81
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f008 fea9 	bl	8017a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ecca:	2101      	movs	r1, #1
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f008 fea2 	bl	8017a16 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ecda:	2182      	movs	r1, #130	; 0x82
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f008 fe9a 	bl	8017a16 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00e      	beq.n	800ed1a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f009 f831 	bl	8017d74 <free>
    pdev->pClassData = NULL;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2200      	movs	r2, #0
 800ed16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3710      	adds	r7, #16
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b086      	sub	sp, #24
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed34:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800ed36:	2300      	movs	r3, #0
 800ed38:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d03a      	beq.n	800edc4 <USBD_CDC_Setup+0xa0>
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	f040 8097 	bne.w	800ee82 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	88db      	ldrh	r3, [r3, #6]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d029      	beq.n	800edb0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	b25b      	sxtb	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	da11      	bge.n	800ed8a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed6c:	689b      	ldr	r3, [r3, #8]
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ed72:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	88d2      	ldrh	r2, [r2, #6]
 800ed78:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ed7a:	6939      	ldr	r1, [r7, #16]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	88db      	ldrh	r3, [r3, #6]
 800ed80:	461a      	mov	r2, r3
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f001 fa97 	bl	80102b6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ed88:	e082      	b.n	800ee90 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	785a      	ldrb	r2, [r3, #1]
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	88db      	ldrh	r3, [r3, #6]
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800eda0:	6939      	ldr	r1, [r7, #16]
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	88db      	ldrh	r3, [r3, #6]
 800eda6:	461a      	mov	r2, r3
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f001 fab0 	bl	801030e <USBD_CtlPrepareRx>
    break;
 800edae:	e06f      	b.n	800ee90 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	7850      	ldrb	r0, [r2, #1]
 800edbc:	2200      	movs	r2, #0
 800edbe:	6839      	ldr	r1, [r7, #0]
 800edc0:	4798      	blx	r3
    break;
 800edc2:	e065      	b.n	800ee90 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	785b      	ldrb	r3, [r3, #1]
 800edc8:	2b0b      	cmp	r3, #11
 800edca:	d84f      	bhi.n	800ee6c <USBD_CDC_Setup+0x148>
 800edcc:	a201      	add	r2, pc, #4	; (adr r2, 800edd4 <USBD_CDC_Setup+0xb0>)
 800edce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edd2:	bf00      	nop
 800edd4:	0800ee05 	.word	0x0800ee05
 800edd8:	0800ee7b 	.word	0x0800ee7b
 800eddc:	0800ee6d 	.word	0x0800ee6d
 800ede0:	0800ee6d 	.word	0x0800ee6d
 800ede4:	0800ee6d 	.word	0x0800ee6d
 800ede8:	0800ee6d 	.word	0x0800ee6d
 800edec:	0800ee6d 	.word	0x0800ee6d
 800edf0:	0800ee6d 	.word	0x0800ee6d
 800edf4:	0800ee6d 	.word	0x0800ee6d
 800edf8:	0800ee6d 	.word	0x0800ee6d
 800edfc:	0800ee2d 	.word	0x0800ee2d
 800ee00:	0800ee55 	.word	0x0800ee55
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee0a:	2b03      	cmp	r3, #3
 800ee0c:	d107      	bne.n	800ee1e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ee0e:	f107 030c 	add.w	r3, r7, #12
 800ee12:	2202      	movs	r2, #2
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f001 fa4d 	bl	80102b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ee1c:	e030      	b.n	800ee80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ee1e:	6839      	ldr	r1, [r7, #0]
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f001 f9d7 	bl	80101d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee26:	2303      	movs	r3, #3
 800ee28:	75fb      	strb	r3, [r7, #23]
      break;
 800ee2a:	e029      	b.n	800ee80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee32:	2b03      	cmp	r3, #3
 800ee34:	d107      	bne.n	800ee46 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ee36:	f107 030f 	add.w	r3, r7, #15
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f001 fa39 	bl	80102b6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ee44:	e01c      	b.n	800ee80 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f001 f9c3 	bl	80101d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	75fb      	strb	r3, [r7, #23]
      break;
 800ee52:	e015      	b.n	800ee80 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee5a:	2b03      	cmp	r3, #3
 800ee5c:	d00f      	beq.n	800ee7e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	6878      	ldr	r0, [r7, #4]
 800ee62:	f001 f9b7 	bl	80101d4 <USBD_CtlError>
        ret = USBD_FAIL;
 800ee66:	2303      	movs	r3, #3
 800ee68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ee6a:	e008      	b.n	800ee7e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ee6c:	6839      	ldr	r1, [r7, #0]
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f001 f9b0 	bl	80101d4 <USBD_CtlError>
      ret = USBD_FAIL;
 800ee74:	2303      	movs	r3, #3
 800ee76:	75fb      	strb	r3, [r7, #23]
      break;
 800ee78:	e002      	b.n	800ee80 <USBD_CDC_Setup+0x15c>
      break;
 800ee7a:	bf00      	nop
 800ee7c:	e008      	b.n	800ee90 <USBD_CDC_Setup+0x16c>
      break;
 800ee7e:	bf00      	nop
    }
    break;
 800ee80:	e006      	b.n	800ee90 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ee82:	6839      	ldr	r1, [r7, #0]
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f001 f9a5 	bl	80101d4 <USBD_CtlError>
    ret = USBD_FAIL;
 800ee8a:	2303      	movs	r3, #3
 800ee8c:	75fb      	strb	r3, [r7, #23]
    break;
 800ee8e:	bf00      	nop
  }

  return (uint8_t)ret;
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3718      	adds	r7, #24
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop

0800ee9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b084      	sub	sp, #16
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	460b      	mov	r3, r1
 800eea6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eeae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d101      	bne.n	800eebe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eeba:	2303      	movs	r3, #3
 800eebc:	e049      	b.n	800ef52 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eec4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eec6:	78fa      	ldrb	r2, [r7, #3]
 800eec8:	6879      	ldr	r1, [r7, #4]
 800eeca:	4613      	mov	r3, r2
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4413      	add	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	440b      	add	r3, r1
 800eed4:	3318      	adds	r3, #24
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d029      	beq.n	800ef30 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eedc:	78fa      	ldrb	r2, [r7, #3]
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	440b      	add	r3, r1
 800eeea:	3318      	adds	r3, #24
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	78f9      	ldrb	r1, [r7, #3]
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	460b      	mov	r3, r1
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	1a5b      	subs	r3, r3, r1
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4403      	add	r3, r0
 800eefc:	3344      	adds	r3, #68	; 0x44
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	fbb2 f1f3 	udiv	r1, r2, r3
 800ef04:	fb03 f301 	mul.w	r3, r3, r1
 800ef08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d110      	bne.n	800ef30 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ef0e:	78fa      	ldrb	r2, [r7, #3]
 800ef10:	6879      	ldr	r1, [r7, #4]
 800ef12:	4613      	mov	r3, r2
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	4413      	add	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	440b      	add	r3, r1
 800ef1c:	3318      	adds	r3, #24
 800ef1e:	2200      	movs	r2, #0
 800ef20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ef22:	78f9      	ldrb	r1, [r7, #3]
 800ef24:	2300      	movs	r3, #0
 800ef26:	2200      	movs	r2, #0
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f008 fe1c 	bl	8017b66 <USBD_LL_Transmit>
 800ef2e:	e00f      	b.n	800ef50 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	2200      	movs	r2, #0
 800ef34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	68ba      	ldr	r2, [r7, #8]
 800ef42:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ef46:	68ba      	ldr	r2, [r7, #8]
 800ef48:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ef4c:	78fa      	ldrb	r2, [r7, #3]
 800ef4e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}

0800ef5a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef5a:	b580      	push	{r7, lr}
 800ef5c:	b084      	sub	sp, #16
 800ef5e:	af00      	add	r7, sp, #0
 800ef60:	6078      	str	r0, [r7, #4]
 800ef62:	460b      	mov	r3, r1
 800ef64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d101      	bne.n	800ef7c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	e015      	b.n	800efa8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ef7c:	78fb      	ldrb	r3, [r7, #3]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f008 fe32 	bl	8017bea <USBD_LL_GetRxDataSize>
 800ef86:	4602      	mov	r2, r0
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800efa2:	4611      	mov	r1, r2
 800efa4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800efa6:	2300      	movs	r3, #0
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efbe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d015      	beq.n	800eff6 <USBD_CDC_EP0_RxReady+0x46>
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800efd0:	2bff      	cmp	r3, #255	; 0xff
 800efd2:	d010      	beq.n	800eff6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efda:	689b      	ldr	r3, [r3, #8]
 800efdc:	68fa      	ldr	r2, [r7, #12]
 800efde:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800efe2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800efea:	b292      	uxth	r2, r2
 800efec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	22ff      	movs	r2, #255	; 0xff
 800eff2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3710      	adds	r7, #16
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2243      	movs	r2, #67	; 0x43
 800f00c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f00e:	4b03      	ldr	r3, [pc, #12]	; (800f01c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr
 800f01c:	20000094 	.word	0x20000094

0800f020 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2243      	movs	r2, #67	; 0x43
 800f02c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f02e:	4b03      	ldr	r3, [pc, #12]	; (800f03c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr
 800f03c:	20000050 	.word	0x20000050

0800f040 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2243      	movs	r2, #67	; 0x43
 800f04c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f04e:	4b03      	ldr	r3, [pc, #12]	; (800f05c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f050:	4618      	mov	r0, r3
 800f052:	370c      	adds	r7, #12
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr
 800f05c:	200000d8 	.word	0x200000d8

0800f060 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f060:	b480      	push	{r7}
 800f062:	b083      	sub	sp, #12
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	220a      	movs	r2, #10
 800f06c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f06e:	4b03      	ldr	r3, [pc, #12]	; (800f07c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	2000000c 	.word	0x2000000c

0800f080 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f090:	2303      	movs	r3, #3
 800f092:	e004      	b.n	800f09e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	370c      	adds	r7, #12
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f0aa:	b480      	push	{r7}
 800f0ac:	b087      	sub	sp, #28
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	60f8      	str	r0, [r7, #12]
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0bc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	68ba      	ldr	r2, [r7, #8]
 800f0c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	371c      	adds	r7, #28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f0f6:	2300      	movs	r3, #0
}
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr

0800f104 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b084      	sub	sp, #16
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f112:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f11e:	2303      	movs	r3, #3
 800f120:	e016      	b.n	800f150 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	7c1b      	ldrb	r3, [r3, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f134:	2101      	movs	r1, #1
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f008 fd36 	bl	8017ba8 <USBD_LL_PrepareReceive>
 800f13c:	e007      	b.n	800f14e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f144:	2340      	movs	r3, #64	; 0x40
 800f146:	2101      	movs	r1, #1
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f008 fd2d 	bl	8017ba8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f14e:	2300      	movs	r3, #0
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	4613      	mov	r3, r2
 800f164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f16c:	2303      	movs	r3, #3
 800f16e:	e025      	b.n	800f1bc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2200      	movs	r2, #0
 800f190:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d003      	beq.n	800f1a2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	79fa      	ldrb	r2, [r7, #7]
 800f1ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f008 fba3 	bl	80178fc <USBD_LL_Init>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3718      	adds	r7, #24
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d101      	bne.n	800f1dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	e010      	b.n	800f1fe <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1ec:	f107 020e 	add.w	r2, r7, #14
 800f1f0:	4610      	mov	r0, r2
 800f1f2:	4798      	blx	r3
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3710      	adds	r7, #16
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}

0800f206 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b082      	sub	sp, #8
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f008 fbc0 	bl	8017994 <USBD_LL_Start>
 800f214:	4603      	mov	r3, r0
}
 800f216:	4618      	mov	r0, r3
 800f218:	3708      	adds	r7, #8
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f21e:	b480      	push	{r7}
 800f220:	b083      	sub	sp, #12
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	370c      	adds	r7, #12
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	460b      	mov	r3, r1
 800f23e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f240:	2303      	movs	r3, #3
 800f242:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d009      	beq.n	800f262 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	78fa      	ldrb	r2, [r7, #3]
 800f258:	4611      	mov	r1, r2
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	4798      	blx	r3
 800f25e:	4603      	mov	r3, r0
 800f260:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f262:	7bfb      	ldrb	r3, [r7, #15]
}
 800f264:	4618      	mov	r0, r3
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}

0800f26c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d007      	beq.n	800f292 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	78fa      	ldrb	r2, [r7, #3]
 800f28c:	4611      	mov	r1, r2
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	4798      	blx	r3
  }

  return USBD_OK;
 800f292:	2300      	movs	r3, #0
}
 800f294:	4618      	mov	r0, r3
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}

0800f29c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b084      	sub	sp, #16
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f000 ff56 	bl	8010160 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f2d0:	f003 031f 	and.w	r3, r3, #31
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d00e      	beq.n	800f2f6 <USBD_LL_SetupStage+0x5a>
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d302      	bcc.n	800f2e2 <USBD_LL_SetupStage+0x46>
 800f2dc:	2b02      	cmp	r3, #2
 800f2de:	d014      	beq.n	800f30a <USBD_LL_SetupStage+0x6e>
 800f2e0:	e01d      	b.n	800f31e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa18 	bl	800f720 <USBD_StdDevReq>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f2f4:	e020      	b.n	800f338 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f000 fa7c 	bl	800f7fc <USBD_StdItfReq>
 800f304:	4603      	mov	r3, r0
 800f306:	73fb      	strb	r3, [r7, #15]
      break;
 800f308:	e016      	b.n	800f338 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f310:	4619      	mov	r1, r3
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fab8 	bl	800f888 <USBD_StdEPReq>
 800f318:	4603      	mov	r3, r0
 800f31a:	73fb      	strb	r3, [r7, #15]
      break;
 800f31c:	e00c      	b.n	800f338 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f008 fb91 	bl	8017a54 <USBD_LL_StallEP>
 800f332:	4603      	mov	r3, r0
 800f334:	73fb      	strb	r3, [r7, #15]
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}

0800f342 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f342:	b580      	push	{r7, lr}
 800f344:	b086      	sub	sp, #24
 800f346:	af00      	add	r7, sp, #0
 800f348:	60f8      	str	r0, [r7, #12]
 800f34a:	460b      	mov	r3, r1
 800f34c:	607a      	str	r2, [r7, #4]
 800f34e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f350:	7afb      	ldrb	r3, [r7, #11]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d137      	bne.n	800f3c6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f35c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f364:	2b03      	cmp	r3, #3
 800f366:	d14a      	bne.n	800f3fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	689a      	ldr	r2, [r3, #8]
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	68db      	ldr	r3, [r3, #12]
 800f370:	429a      	cmp	r2, r3
 800f372:	d913      	bls.n	800f39c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	689a      	ldr	r2, [r3, #8]
 800f378:	693b      	ldr	r3, [r7, #16]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	1ad2      	subs	r2, r2, r3
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	68da      	ldr	r2, [r3, #12]
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	4293      	cmp	r3, r2
 800f38c:	bf28      	it	cs
 800f38e:	4613      	movcs	r3, r2
 800f390:	461a      	mov	r2, r3
 800f392:	6879      	ldr	r1, [r7, #4]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 ffd7 	bl	8010348 <USBD_CtlContinueRx>
 800f39a:	e030      	b.n	800f3fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a2:	691b      	ldr	r3, [r3, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d00a      	beq.n	800f3be <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f3ae:	2b03      	cmp	r3, #3
 800f3b0:	d105      	bne.n	800f3be <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3b8:	691b      	ldr	r3, [r3, #16]
 800f3ba:	68f8      	ldr	r0, [r7, #12]
 800f3bc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	f000 ffd3 	bl	801036a <USBD_CtlSendStatus>
 800f3c4:	e01b      	b.n	800f3fe <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d013      	beq.n	800f3fa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f3d8:	2b03      	cmp	r3, #3
 800f3da:	d10e      	bne.n	800f3fa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3e2:	699b      	ldr	r3, [r3, #24]
 800f3e4:	7afa      	ldrb	r2, [r7, #11]
 800f3e6:	4611      	mov	r1, r2
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	4798      	blx	r3
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f3f0:	7dfb      	ldrb	r3, [r7, #23]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d003      	beq.n	800f3fe <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f3f6:	7dfb      	ldrb	r3, [r7, #23]
 800f3f8:	e002      	b.n	800f400 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f3fa:	2303      	movs	r3, #3
 800f3fc:	e000      	b.n	800f400 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f3fe:	2300      	movs	r3, #0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3718      	adds	r7, #24
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b086      	sub	sp, #24
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	460b      	mov	r3, r1
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f416:	7afb      	ldrb	r3, [r7, #11]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d16a      	bne.n	800f4f2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	3314      	adds	r3, #20
 800f420:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f428:	2b02      	cmp	r3, #2
 800f42a:	d155      	bne.n	800f4d8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	689a      	ldr	r2, [r3, #8]
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	429a      	cmp	r2, r3
 800f436:	d914      	bls.n	800f462 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	689a      	ldr	r2, [r3, #8]
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	1ad2      	subs	r2, r2, r3
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f446:	693b      	ldr	r3, [r7, #16]
 800f448:	689b      	ldr	r3, [r3, #8]
 800f44a:	461a      	mov	r2, r3
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f000 ff4c 	bl	80102ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f454:	2300      	movs	r3, #0
 800f456:	2200      	movs	r2, #0
 800f458:	2100      	movs	r1, #0
 800f45a:	68f8      	ldr	r0, [r7, #12]
 800f45c:	f008 fba4 	bl	8017ba8 <USBD_LL_PrepareReceive>
 800f460:	e03a      	b.n	800f4d8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	68da      	ldr	r2, [r3, #12]
 800f466:	693b      	ldr	r3, [r7, #16]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d11c      	bne.n	800f4a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	685a      	ldr	r2, [r3, #4]
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f476:	429a      	cmp	r2, r3
 800f478:	d316      	bcc.n	800f4a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	685a      	ldr	r2, [r3, #4]
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f484:	429a      	cmp	r2, r3
 800f486:	d20f      	bcs.n	800f4a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f488:	2200      	movs	r2, #0
 800f48a:	2100      	movs	r1, #0
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 ff2d 	bl	80102ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2200      	movs	r2, #0
 800f496:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f49a:	2300      	movs	r3, #0
 800f49c:	2200      	movs	r2, #0
 800f49e:	2100      	movs	r1, #0
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f008 fb81 	bl	8017ba8 <USBD_LL_PrepareReceive>
 800f4a6:	e017      	b.n	800f4d8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00a      	beq.n	800f4ca <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f4ba:	2b03      	cmp	r3, #3
 800f4bc:	d105      	bne.n	800f4ca <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4ca:	2180      	movs	r1, #128	; 0x80
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f008 fac1 	bl	8017a54 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	f000 ff5c 	bl	8010390 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d123      	bne.n	800f52a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f4e2:	68f8      	ldr	r0, [r7, #12]
 800f4e4:	f7ff fe9b 	bl	800f21e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f4f0:	e01b      	b.n	800f52a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d013      	beq.n	800f526 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f504:	2b03      	cmp	r3, #3
 800f506:	d10e      	bne.n	800f526 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	7afa      	ldrb	r2, [r7, #11]
 800f512:	4611      	mov	r1, r2
 800f514:	68f8      	ldr	r0, [r7, #12]
 800f516:	4798      	blx	r3
 800f518:	4603      	mov	r3, r0
 800f51a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f51c:	7dfb      	ldrb	r3, [r7, #23]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
 800f524:	e002      	b.n	800f52c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f526:	2303      	movs	r3, #3
 800f528:	e000      	b.n	800f52c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3718      	adds	r7, #24
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}

0800f534 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2201      	movs	r2, #1
 800f540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2200      	movs	r2, #0
 800f548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f560:	2b00      	cmp	r3, #0
 800f562:	d009      	beq.n	800f578 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	687a      	ldr	r2, [r7, #4]
 800f56e:	6852      	ldr	r2, [r2, #4]
 800f570:	b2d2      	uxtb	r2, r2
 800f572:	4611      	mov	r1, r2
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f578:	2340      	movs	r3, #64	; 0x40
 800f57a:	2200      	movs	r2, #0
 800f57c:	2100      	movs	r1, #0
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f008 fa23 	bl	80179ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2240      	movs	r2, #64	; 0x40
 800f590:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f594:	2340      	movs	r3, #64	; 0x40
 800f596:	2200      	movs	r2, #0
 800f598:	2180      	movs	r1, #128	; 0x80
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f008 fa15 	bl	80179ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2240      	movs	r2, #64	; 0x40
 800f5aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}

0800f5b6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	460b      	mov	r3, r1
 800f5c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	78fa      	ldrb	r2, [r7, #3]
 800f5c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f5c8:	2300      	movs	r3, #0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	370c      	adds	r7, #12
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d4:	4770      	bx	lr

0800f5d6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f5d6:	b480      	push	{r7}
 800f5d8:	b083      	sub	sp, #12
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2204      	movs	r2, #4
 800f5ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f5f2:	2300      	movs	r3, #0
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	370c      	adds	r7, #12
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f60e:	2b04      	cmp	r3, #4
 800f610:	d105      	bne.n	800f61e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f61e:	2300      	movs	r3, #0
}
 800f620:	4618      	mov	r0, r3
 800f622:	370c      	adds	r7, #12
 800f624:	46bd      	mov	sp, r7
 800f626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62a:	4770      	bx	lr

0800f62c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f63a:	2b03      	cmp	r3, #3
 800f63c:	d10b      	bne.n	800f656 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f644:	69db      	ldr	r3, [r3, #28]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d005      	beq.n	800f656 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f650:	69db      	ldr	r3, [r3, #28]
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f656:	2300      	movs	r3, #0
}
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	460b      	mov	r3, r1
 800f66a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	4618      	mov	r0, r3
 800f670:	370c      	adds	r7, #12
 800f672:	46bd      	mov	sp, r7
 800f674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f678:	4770      	bx	lr

0800f67a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f67a:	b480      	push	{r7}
 800f67c:	b083      	sub	sp, #12
 800f67e:	af00      	add	r7, sp, #0
 800f680:	6078      	str	r0, [r7, #4]
 800f682:	460b      	mov	r3, r1
 800f684:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f686:	2300      	movs	r3, #0
}
 800f688:	4618      	mov	r0, r3
 800f68a:	370c      	adds	r7, #12
 800f68c:	46bd      	mov	sp, r7
 800f68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f692:	4770      	bx	lr

0800f694 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f6aa:	b580      	push	{r7, lr}
 800f6ac:	b082      	sub	sp, #8
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d009      	beq.n	800f6d8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	6852      	ldr	r2, [r2, #4]
 800f6d0:	b2d2      	uxtb	r2, r2
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	4798      	blx	r3
  }

  return USBD_OK;
 800f6d8:	2300      	movs	r3, #0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}

0800f6e2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f6e2:	b480      	push	{r7}
 800f6e4:	b087      	sub	sp, #28
 800f6e6:	af00      	add	r7, sp, #0
 800f6e8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3301      	adds	r3, #1
 800f6f8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f700:	8a3b      	ldrh	r3, [r7, #16]
 800f702:	021b      	lsls	r3, r3, #8
 800f704:	b21a      	sxth	r2, r3
 800f706:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	b21b      	sxth	r3, r3
 800f70e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f710:	89fb      	ldrh	r3, [r7, #14]
}
 800f712:	4618      	mov	r0, r3
 800f714:	371c      	adds	r7, #28
 800f716:	46bd      	mov	sp, r7
 800f718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71c:	4770      	bx	lr
	...

0800f720 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f736:	2b20      	cmp	r3, #32
 800f738:	d004      	beq.n	800f744 <USBD_StdDevReq+0x24>
 800f73a:	2b40      	cmp	r3, #64	; 0x40
 800f73c:	d002      	beq.n	800f744 <USBD_StdDevReq+0x24>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00a      	beq.n	800f758 <USBD_StdDevReq+0x38>
 800f742:	e050      	b.n	800f7e6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f74a:	689b      	ldr	r3, [r3, #8]
 800f74c:	6839      	ldr	r1, [r7, #0]
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	4798      	blx	r3
 800f752:	4603      	mov	r3, r0
 800f754:	73fb      	strb	r3, [r7, #15]
    break;
 800f756:	e04b      	b.n	800f7f0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	785b      	ldrb	r3, [r3, #1]
 800f75c:	2b09      	cmp	r3, #9
 800f75e:	d83c      	bhi.n	800f7da <USBD_StdDevReq+0xba>
 800f760:	a201      	add	r2, pc, #4	; (adr r2, 800f768 <USBD_StdDevReq+0x48>)
 800f762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f766:	bf00      	nop
 800f768:	0800f7bd 	.word	0x0800f7bd
 800f76c:	0800f7d1 	.word	0x0800f7d1
 800f770:	0800f7db 	.word	0x0800f7db
 800f774:	0800f7c7 	.word	0x0800f7c7
 800f778:	0800f7db 	.word	0x0800f7db
 800f77c:	0800f79b 	.word	0x0800f79b
 800f780:	0800f791 	.word	0x0800f791
 800f784:	0800f7db 	.word	0x0800f7db
 800f788:	0800f7b3 	.word	0x0800f7b3
 800f78c:	0800f7a5 	.word	0x0800f7a5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f790:	6839      	ldr	r1, [r7, #0]
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f9ce 	bl	800fb34 <USBD_GetDescriptor>
      break;
 800f798:	e024      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f79a:	6839      	ldr	r1, [r7, #0]
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fb5d 	bl	800fe5c <USBD_SetAddress>
      break;
 800f7a2:	e01f      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f7a4:	6839      	ldr	r1, [r7, #0]
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f000 fb9a 	bl	800fee0 <USBD_SetConfig>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800f7b0:	e018      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fc37 	bl	8010028 <USBD_GetConfig>
      break;
 800f7ba:	e013      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 fc66 	bl	8010090 <USBD_GetStatus>
      break;
 800f7c4:	e00e      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f7c6:	6839      	ldr	r1, [r7, #0]
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 fc94 	bl	80100f6 <USBD_SetFeature>
      break;
 800f7ce:	e009      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f7d0:	6839      	ldr	r1, [r7, #0]
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f000 fca3 	bl	801011e <USBD_ClrFeature>
      break;
 800f7d8:	e004      	b.n	800f7e4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 fcf9 	bl	80101d4 <USBD_CtlError>
      break;
 800f7e2:	bf00      	nop
    }
    break;
 800f7e4:	e004      	b.n	800f7f0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 fcf3 	bl	80101d4 <USBD_CtlError>
    break;
 800f7ee:	bf00      	nop
  }

  return ret;
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop

0800f7fc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b084      	sub	sp, #16
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f806:	2300      	movs	r3, #0
 800f808:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f812:	2b20      	cmp	r3, #32
 800f814:	d003      	beq.n	800f81e <USBD_StdItfReq+0x22>
 800f816:	2b40      	cmp	r3, #64	; 0x40
 800f818:	d001      	beq.n	800f81e <USBD_StdItfReq+0x22>
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d12a      	bne.n	800f874 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f824:	3b01      	subs	r3, #1
 800f826:	2b02      	cmp	r3, #2
 800f828:	d81d      	bhi.n	800f866 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	889b      	ldrh	r3, [r3, #4]
 800f82e:	b2db      	uxtb	r3, r3
 800f830:	2b01      	cmp	r3, #1
 800f832:	d813      	bhi.n	800f85c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f83a:	689b      	ldr	r3, [r3, #8]
 800f83c:	6839      	ldr	r1, [r7, #0]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	4798      	blx	r3
 800f842:	4603      	mov	r3, r0
 800f844:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	88db      	ldrh	r3, [r3, #6]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d110      	bne.n	800f870 <USBD_StdItfReq+0x74>
 800f84e:	7bfb      	ldrb	r3, [r7, #15]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10d      	bne.n	800f870 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fd88 	bl	801036a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f85a:	e009      	b.n	800f870 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f85c:	6839      	ldr	r1, [r7, #0]
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f000 fcb8 	bl	80101d4 <USBD_CtlError>
      break;
 800f864:	e004      	b.n	800f870 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fcb3 	bl	80101d4 <USBD_CtlError>
      break;
 800f86e:	e000      	b.n	800f872 <USBD_StdItfReq+0x76>
      break;
 800f870:	bf00      	nop
    }
    break;
 800f872:	e004      	b.n	800f87e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fcac 	bl	80101d4 <USBD_CtlError>
    break;
 800f87c:	bf00      	nop
  }

  return ret;
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f880:	4618      	mov	r0, r3
 800f882:	3710      	adds	r7, #16
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f892:	2300      	movs	r3, #0
 800f894:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	889b      	ldrh	r3, [r3, #4]
 800f89a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8a4:	2b20      	cmp	r3, #32
 800f8a6:	d004      	beq.n	800f8b2 <USBD_StdEPReq+0x2a>
 800f8a8:	2b40      	cmp	r3, #64	; 0x40
 800f8aa:	d002      	beq.n	800f8b2 <USBD_StdEPReq+0x2a>
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d00a      	beq.n	800f8c6 <USBD_StdEPReq+0x3e>
 800f8b0:	e135      	b.n	800fb1e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8b8:	689b      	ldr	r3, [r3, #8]
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	4798      	blx	r3
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800f8c4:	e130      	b.n	800fb28 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	785b      	ldrb	r3, [r3, #1]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d03e      	beq.n	800f94c <USBD_StdEPReq+0xc4>
 800f8ce:	2b03      	cmp	r3, #3
 800f8d0:	d002      	beq.n	800f8d8 <USBD_StdEPReq+0x50>
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d077      	beq.n	800f9c6 <USBD_StdEPReq+0x13e>
 800f8d6:	e11c      	b.n	800fb12 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d002      	beq.n	800f8e8 <USBD_StdEPReq+0x60>
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d015      	beq.n	800f912 <USBD_StdEPReq+0x8a>
 800f8e6:	e02b      	b.n	800f940 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8e8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d00c      	beq.n	800f908 <USBD_StdEPReq+0x80>
 800f8ee:	7bbb      	ldrb	r3, [r7, #14]
 800f8f0:	2b80      	cmp	r3, #128	; 0x80
 800f8f2:	d009      	beq.n	800f908 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8f4:	7bbb      	ldrb	r3, [r7, #14]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f008 f8ab 	bl	8017a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8fe:	2180      	movs	r1, #128	; 0x80
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f008 f8a7 	bl	8017a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f906:	e020      	b.n	800f94a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f908:	6839      	ldr	r1, [r7, #0]
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 fc62 	bl	80101d4 <USBD_CtlError>
        break;
 800f910:	e01b      	b.n	800f94a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	885b      	ldrh	r3, [r3, #2]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d10e      	bne.n	800f938 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d00b      	beq.n	800f938 <USBD_StdEPReq+0xb0>
 800f920:	7bbb      	ldrb	r3, [r7, #14]
 800f922:	2b80      	cmp	r3, #128	; 0x80
 800f924:	d008      	beq.n	800f938 <USBD_StdEPReq+0xb0>
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	88db      	ldrh	r3, [r3, #6]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d104      	bne.n	800f938 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f92e:	7bbb      	ldrb	r3, [r7, #14]
 800f930:	4619      	mov	r1, r3
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f008 f88e 	bl	8017a54 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 fd16 	bl	801036a <USBD_CtlSendStatus>

        break;
 800f93e:	e004      	b.n	800f94a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f940:	6839      	ldr	r1, [r7, #0]
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f000 fc46 	bl	80101d4 <USBD_CtlError>
        break;
 800f948:	bf00      	nop
      }
      break;
 800f94a:	e0e7      	b.n	800fb1c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f952:	2b02      	cmp	r3, #2
 800f954:	d002      	beq.n	800f95c <USBD_StdEPReq+0xd4>
 800f956:	2b03      	cmp	r3, #3
 800f958:	d015      	beq.n	800f986 <USBD_StdEPReq+0xfe>
 800f95a:	e02d      	b.n	800f9b8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d00c      	beq.n	800f97c <USBD_StdEPReq+0xf4>
 800f962:	7bbb      	ldrb	r3, [r7, #14]
 800f964:	2b80      	cmp	r3, #128	; 0x80
 800f966:	d009      	beq.n	800f97c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f968:	7bbb      	ldrb	r3, [r7, #14]
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f008 f871 	bl	8017a54 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f972:	2180      	movs	r1, #128	; 0x80
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f008 f86d 	bl	8017a54 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f97a:	e023      	b.n	800f9c4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f97c:	6839      	ldr	r1, [r7, #0]
 800f97e:	6878      	ldr	r0, [r7, #4]
 800f980:	f000 fc28 	bl	80101d4 <USBD_CtlError>
        break;
 800f984:	e01e      	b.n	800f9c4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	885b      	ldrh	r3, [r3, #2]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d119      	bne.n	800f9c2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f98e:	7bbb      	ldrb	r3, [r7, #14]
 800f990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f994:	2b00      	cmp	r3, #0
 800f996:	d004      	beq.n	800f9a2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f998:	7bbb      	ldrb	r3, [r7, #14]
 800f99a:	4619      	mov	r1, r3
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f008 f878 	bl	8017a92 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f000 fce1 	bl	801036a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	6839      	ldr	r1, [r7, #0]
 800f9b2:	6878      	ldr	r0, [r7, #4]
 800f9b4:	4798      	blx	r3
        }
        break;
 800f9b6:	e004      	b.n	800f9c2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f9b8:	6839      	ldr	r1, [r7, #0]
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f000 fc0a 	bl	80101d4 <USBD_CtlError>
        break;
 800f9c0:	e000      	b.n	800f9c4 <USBD_StdEPReq+0x13c>
        break;
 800f9c2:	bf00      	nop
      }
      break;
 800f9c4:	e0aa      	b.n	800fb1c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d002      	beq.n	800f9d6 <USBD_StdEPReq+0x14e>
 800f9d0:	2b03      	cmp	r3, #3
 800f9d2:	d032      	beq.n	800fa3a <USBD_StdEPReq+0x1b2>
 800f9d4:	e097      	b.n	800fb06 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d007      	beq.n	800f9ec <USBD_StdEPReq+0x164>
 800f9dc:	7bbb      	ldrb	r3, [r7, #14]
 800f9de:	2b80      	cmp	r3, #128	; 0x80
 800f9e0:	d004      	beq.n	800f9ec <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 fbf5 	bl	80101d4 <USBD_CtlError>
          break;
 800f9ea:	e091      	b.n	800fb10 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	da0b      	bge.n	800fa0c <USBD_StdEPReq+0x184>
 800f9f4:	7bbb      	ldrb	r3, [r7, #14]
 800f9f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	009b      	lsls	r3, r3, #2
 800f9fe:	4413      	add	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	3310      	adds	r3, #16
 800fa04:	687a      	ldr	r2, [r7, #4]
 800fa06:	4413      	add	r3, r2
 800fa08:	3304      	adds	r3, #4
 800fa0a:	e00b      	b.n	800fa24 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fa0c:	7bbb      	ldrb	r3, [r7, #14]
 800fa0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa12:	4613      	mov	r3, r2
 800fa14:	009b      	lsls	r3, r3, #2
 800fa16:	4413      	add	r3, r2
 800fa18:	009b      	lsls	r3, r3, #2
 800fa1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	4413      	add	r3, r2
 800fa22:	3304      	adds	r3, #4
 800fa24:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	4619      	mov	r1, r3
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 fc3f 	bl	80102b6 <USBD_CtlSendData>
        break;
 800fa38:	e06a      	b.n	800fb10 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fa3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	da11      	bge.n	800fa66 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	f003 020f 	and.w	r2, r3, #15
 800fa48:	6879      	ldr	r1, [r7, #4]
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	009b      	lsls	r3, r3, #2
 800fa4e:	4413      	add	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	440b      	add	r3, r1
 800fa54:	3324      	adds	r3, #36	; 0x24
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d117      	bne.n	800fa8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f000 fbb8 	bl	80101d4 <USBD_CtlError>
            break;
 800fa64:	e054      	b.n	800fb10 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fa66:	7bbb      	ldrb	r3, [r7, #14]
 800fa68:	f003 020f 	and.w	r2, r3, #15
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	4613      	mov	r3, r2
 800fa70:	009b      	lsls	r3, r3, #2
 800fa72:	4413      	add	r3, r2
 800fa74:	009b      	lsls	r3, r3, #2
 800fa76:	440b      	add	r3, r1
 800fa78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d104      	bne.n	800fa8c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f000 fba5 	bl	80101d4 <USBD_CtlError>
            break;
 800fa8a:	e041      	b.n	800fb10 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	da0b      	bge.n	800faac <USBD_StdEPReq+0x224>
 800fa94:	7bbb      	ldrb	r3, [r7, #14]
 800fa96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa9a:	4613      	mov	r3, r2
 800fa9c:	009b      	lsls	r3, r3, #2
 800fa9e:	4413      	add	r3, r2
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	3310      	adds	r3, #16
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	4413      	add	r3, r2
 800faa8:	3304      	adds	r3, #4
 800faaa:	e00b      	b.n	800fac4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800faac:	7bbb      	ldrb	r3, [r7, #14]
 800faae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab2:	4613      	mov	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fabe:	687a      	ldr	r2, [r7, #4]
 800fac0:	4413      	add	r3, r2
 800fac2:	3304      	adds	r3, #4
 800fac4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fac6:	7bbb      	ldrb	r3, [r7, #14]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d002      	beq.n	800fad2 <USBD_StdEPReq+0x24a>
 800facc:	7bbb      	ldrb	r3, [r7, #14]
 800face:	2b80      	cmp	r3, #128	; 0x80
 800fad0:	d103      	bne.n	800fada <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	2200      	movs	r2, #0
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	e00e      	b.n	800faf8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fada:	7bbb      	ldrb	r3, [r7, #14]
 800fadc:	4619      	mov	r1, r3
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f007 fff6 	bl	8017ad0 <USBD_LL_IsStallEP>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2201      	movs	r2, #1
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	e002      	b.n	800faf8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2202      	movs	r2, #2
 800fafc:	4619      	mov	r1, r3
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fbd9 	bl	80102b6 <USBD_CtlSendData>
          break;
 800fb04:	e004      	b.n	800fb10 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f000 fb63 	bl	80101d4 <USBD_CtlError>
        break;
 800fb0e:	bf00      	nop
      }
      break;
 800fb10:	e004      	b.n	800fb1c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fb12:	6839      	ldr	r1, [r7, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	f000 fb5d 	bl	80101d4 <USBD_CtlError>
      break;
 800fb1a:	bf00      	nop
    }
    break;
 800fb1c:	e004      	b.n	800fb28 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f000 fb57 	bl	80101d4 <USBD_CtlError>
    break;
 800fb26:	bf00      	nop
  }

  return ret;
 800fb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3710      	adds	r7, #16
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
	...

0800fb34 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b084      	sub	sp, #16
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
 800fb3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fb42:	2300      	movs	r3, #0
 800fb44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fb46:	2300      	movs	r3, #0
 800fb48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fb4a:	683b      	ldr	r3, [r7, #0]
 800fb4c:	885b      	ldrh	r3, [r3, #2]
 800fb4e:	0a1b      	lsrs	r3, r3, #8
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	3b01      	subs	r3, #1
 800fb54:	2b0e      	cmp	r3, #14
 800fb56:	f200 8152 	bhi.w	800fdfe <USBD_GetDescriptor+0x2ca>
 800fb5a:	a201      	add	r2, pc, #4	; (adr r2, 800fb60 <USBD_GetDescriptor+0x2c>)
 800fb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb60:	0800fbd1 	.word	0x0800fbd1
 800fb64:	0800fbe9 	.word	0x0800fbe9
 800fb68:	0800fc29 	.word	0x0800fc29
 800fb6c:	0800fdff 	.word	0x0800fdff
 800fb70:	0800fdff 	.word	0x0800fdff
 800fb74:	0800fd9f 	.word	0x0800fd9f
 800fb78:	0800fdcb 	.word	0x0800fdcb
 800fb7c:	0800fdff 	.word	0x0800fdff
 800fb80:	0800fdff 	.word	0x0800fdff
 800fb84:	0800fdff 	.word	0x0800fdff
 800fb88:	0800fdff 	.word	0x0800fdff
 800fb8c:	0800fdff 	.word	0x0800fdff
 800fb90:	0800fdff 	.word	0x0800fdff
 800fb94:	0800fdff 	.word	0x0800fdff
 800fb98:	0800fb9d 	.word	0x0800fb9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fba2:	69db      	ldr	r3, [r3, #28]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00b      	beq.n	800fbc0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbae:	69db      	ldr	r3, [r3, #28]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	7c12      	ldrb	r2, [r2, #16]
 800fbb4:	f107 0108 	add.w	r1, r7, #8
 800fbb8:	4610      	mov	r0, r2
 800fbba:	4798      	blx	r3
 800fbbc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fbbe:	e126      	b.n	800fe0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fbc0:	6839      	ldr	r1, [r7, #0]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fb06 	bl	80101d4 <USBD_CtlError>
      err++;
 800fbc8:	7afb      	ldrb	r3, [r7, #11]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	72fb      	strb	r3, [r7, #11]
    break;
 800fbce:	e11e      	b.n	800fe0e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	7c12      	ldrb	r2, [r2, #16]
 800fbdc:	f107 0108 	add.w	r1, r7, #8
 800fbe0:	4610      	mov	r0, r2
 800fbe2:	4798      	blx	r3
 800fbe4:	60f8      	str	r0, [r7, #12]
    break;
 800fbe6:	e112      	b.n	800fe0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	7c1b      	ldrb	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10d      	bne.n	800fc0c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbf8:	f107 0208 	add.w	r2, r7, #8
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	4798      	blx	r3
 800fc00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	3301      	adds	r3, #1
 800fc06:	2202      	movs	r2, #2
 800fc08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fc0a:	e100      	b.n	800fe0e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc14:	f107 0208 	add.w	r2, r7, #8
 800fc18:	4610      	mov	r0, r2
 800fc1a:	4798      	blx	r3
 800fc1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	3301      	adds	r3, #1
 800fc22:	2202      	movs	r2, #2
 800fc24:	701a      	strb	r2, [r3, #0]
    break;
 800fc26:	e0f2      	b.n	800fe0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	885b      	ldrh	r3, [r3, #2]
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b05      	cmp	r3, #5
 800fc30:	f200 80ac 	bhi.w	800fd8c <USBD_GetDescriptor+0x258>
 800fc34:	a201      	add	r2, pc, #4	; (adr r2, 800fc3c <USBD_GetDescriptor+0x108>)
 800fc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc3a:	bf00      	nop
 800fc3c:	0800fc55 	.word	0x0800fc55
 800fc40:	0800fc89 	.word	0x0800fc89
 800fc44:	0800fcbd 	.word	0x0800fcbd
 800fc48:	0800fcf1 	.word	0x0800fcf1
 800fc4c:	0800fd25 	.word	0x0800fd25
 800fc50:	0800fd59 	.word	0x0800fd59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc5a:	685b      	ldr	r3, [r3, #4]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d00b      	beq.n	800fc78 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	7c12      	ldrb	r2, [r2, #16]
 800fc6c:	f107 0108 	add.w	r1, r7, #8
 800fc70:	4610      	mov	r0, r2
 800fc72:	4798      	blx	r3
 800fc74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc76:	e091      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fc78:	6839      	ldr	r1, [r7, #0]
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 faaa 	bl	80101d4 <USBD_CtlError>
        err++;
 800fc80:	7afb      	ldrb	r3, [r7, #11]
 800fc82:	3301      	adds	r3, #1
 800fc84:	72fb      	strb	r3, [r7, #11]
      break;
 800fc86:	e089      	b.n	800fd9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d00b      	beq.n	800fcac <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fc9a:	689b      	ldr	r3, [r3, #8]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	7c12      	ldrb	r2, [r2, #16]
 800fca0:	f107 0108 	add.w	r1, r7, #8
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
 800fca8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcaa:	e077      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fcac:	6839      	ldr	r1, [r7, #0]
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f000 fa90 	bl	80101d4 <USBD_CtlError>
        err++;
 800fcb4:	7afb      	ldrb	r3, [r7, #11]
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	72fb      	strb	r3, [r7, #11]
      break;
 800fcba:	e06f      	b.n	800fd9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00b      	beq.n	800fce0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	7c12      	ldrb	r2, [r2, #16]
 800fcd4:	f107 0108 	add.w	r1, r7, #8
 800fcd8:	4610      	mov	r0, r2
 800fcda:	4798      	blx	r3
 800fcdc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcde:	e05d      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fce0:	6839      	ldr	r1, [r7, #0]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	f000 fa76 	bl	80101d4 <USBD_CtlError>
        err++;
 800fce8:	7afb      	ldrb	r3, [r7, #11]
 800fcea:	3301      	adds	r3, #1
 800fcec:	72fb      	strb	r3, [r7, #11]
      break;
 800fcee:	e055      	b.n	800fd9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00b      	beq.n	800fd14 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	7c12      	ldrb	r2, [r2, #16]
 800fd08:	f107 0108 	add.w	r1, r7, #8
 800fd0c:	4610      	mov	r0, r2
 800fd0e:	4798      	blx	r3
 800fd10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd12:	e043      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fa5c 	bl	80101d4 <USBD_CtlError>
        err++;
 800fd1c:	7afb      	ldrb	r3, [r7, #11]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	72fb      	strb	r3, [r7, #11]
      break;
 800fd22:	e03b      	b.n	800fd9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d00b      	beq.n	800fd48 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	7c12      	ldrb	r2, [r2, #16]
 800fd3c:	f107 0108 	add.w	r1, r7, #8
 800fd40:	4610      	mov	r0, r2
 800fd42:	4798      	blx	r3
 800fd44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd46:	e029      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fd48:	6839      	ldr	r1, [r7, #0]
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f000 fa42 	bl	80101d4 <USBD_CtlError>
        err++;
 800fd50:	7afb      	ldrb	r3, [r7, #11]
 800fd52:	3301      	adds	r3, #1
 800fd54:	72fb      	strb	r3, [r7, #11]
      break;
 800fd56:	e021      	b.n	800fd9c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd5e:	699b      	ldr	r3, [r3, #24]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d00b      	beq.n	800fd7c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fd6a:	699b      	ldr	r3, [r3, #24]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	7c12      	ldrb	r2, [r2, #16]
 800fd70:	f107 0108 	add.w	r1, r7, #8
 800fd74:	4610      	mov	r0, r2
 800fd76:	4798      	blx	r3
 800fd78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd7a:	e00f      	b.n	800fd9c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fd7c:	6839      	ldr	r1, [r7, #0]
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fa28 	bl	80101d4 <USBD_CtlError>
        err++;
 800fd84:	7afb      	ldrb	r3, [r7, #11]
 800fd86:	3301      	adds	r3, #1
 800fd88:	72fb      	strb	r3, [r7, #11]
      break;
 800fd8a:	e007      	b.n	800fd9c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fd8c:	6839      	ldr	r1, [r7, #0]
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 fa20 	bl	80101d4 <USBD_CtlError>
      err++;
 800fd94:	7afb      	ldrb	r3, [r7, #11]
 800fd96:	3301      	adds	r3, #1
 800fd98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fd9a:	bf00      	nop
    }
    break;
 800fd9c:	e037      	b.n	800fe0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	7c1b      	ldrb	r3, [r3, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d109      	bne.n	800fdba <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdae:	f107 0208 	add.w	r2, r7, #8
 800fdb2:	4610      	mov	r0, r2
 800fdb4:	4798      	blx	r3
 800fdb6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fdb8:	e029      	b.n	800fe0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fdba:	6839      	ldr	r1, [r7, #0]
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f000 fa09 	bl	80101d4 <USBD_CtlError>
      err++;
 800fdc2:	7afb      	ldrb	r3, [r7, #11]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	72fb      	strb	r3, [r7, #11]
    break;
 800fdc8:	e021      	b.n	800fe0e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7c1b      	ldrb	r3, [r3, #16]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10d      	bne.n	800fdee <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdda:	f107 0208 	add.w	r2, r7, #8
 800fdde:	4610      	mov	r0, r2
 800fde0:	4798      	blx	r3
 800fde2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	3301      	adds	r3, #1
 800fde8:	2207      	movs	r2, #7
 800fdea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fdec:	e00f      	b.n	800fe0e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fdee:	6839      	ldr	r1, [r7, #0]
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 f9ef 	bl	80101d4 <USBD_CtlError>
      err++;
 800fdf6:	7afb      	ldrb	r3, [r7, #11]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	72fb      	strb	r3, [r7, #11]
    break;
 800fdfc:	e007      	b.n	800fe0e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f9e7 	bl	80101d4 <USBD_CtlError>
    err++;
 800fe06:	7afb      	ldrb	r3, [r7, #11]
 800fe08:	3301      	adds	r3, #1
 800fe0a:	72fb      	strb	r3, [r7, #11]
    break;
 800fe0c:	bf00      	nop
  }

  if (err != 0U)
 800fe0e:	7afb      	ldrb	r3, [r7, #11]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d11e      	bne.n	800fe52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	88db      	ldrh	r3, [r3, #6]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d016      	beq.n	800fe4a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800fe1c:	893b      	ldrh	r3, [r7, #8]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00e      	beq.n	800fe40 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	88da      	ldrh	r2, [r3, #6]
 800fe26:	893b      	ldrh	r3, [r7, #8]
 800fe28:	4293      	cmp	r3, r2
 800fe2a:	bf28      	it	cs
 800fe2c:	4613      	movcs	r3, r2
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fe32:	893b      	ldrh	r3, [r7, #8]
 800fe34:	461a      	mov	r2, r3
 800fe36:	68f9      	ldr	r1, [r7, #12]
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fa3c 	bl	80102b6 <USBD_CtlSendData>
 800fe3e:	e009      	b.n	800fe54 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fe40:	6839      	ldr	r1, [r7, #0]
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f9c6 	bl	80101d4 <USBD_CtlError>
 800fe48:	e004      	b.n	800fe54 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 fa8d 	bl	801036a <USBD_CtlSendStatus>
 800fe50:	e000      	b.n	800fe54 <USBD_GetDescriptor+0x320>
    return;
 800fe52:	bf00      	nop
    }
  }
}
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}
 800fe5a:	bf00      	nop

0800fe5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	889b      	ldrh	r3, [r3, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d130      	bne.n	800fed0 <USBD_SetAddress+0x74>
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	88db      	ldrh	r3, [r3, #6]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d12c      	bne.n	800fed0 <USBD_SetAddress+0x74>
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	885b      	ldrh	r3, [r3, #2]
 800fe7a:	2b7f      	cmp	r3, #127	; 0x7f
 800fe7c:	d828      	bhi.n	800fed0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	885b      	ldrh	r3, [r3, #2]
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d104      	bne.n	800fe9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800fe94:	6839      	ldr	r1, [r7, #0]
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	f000 f99c 	bl	80101d4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe9c:	e01c      	b.n	800fed8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	7bfa      	ldrb	r2, [r7, #15]
 800fea2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fea6:	7bfb      	ldrb	r3, [r7, #15]
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f007 fe3c 	bl	8017b28 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fa5a 	bl	801036a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d004      	beq.n	800fec6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	2202      	movs	r2, #2
 800fec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fec4:	e008      	b.n	800fed8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2201      	movs	r2, #1
 800feca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fece:	e003      	b.n	800fed8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fed0:	6839      	ldr	r1, [r7, #0]
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 f97e 	bl	80101d4 <USBD_CtlError>
  }
}
 800fed8:	bf00      	nop
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}

0800fee0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b084      	sub	sp, #16
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800feea:	2300      	movs	r3, #0
 800feec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	885b      	ldrh	r3, [r3, #2]
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	4b4b      	ldr	r3, [pc, #300]	; (8010024 <USBD_SetConfig+0x144>)
 800fef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fef8:	4b4a      	ldr	r3, [pc, #296]	; (8010024 <USBD_SetConfig+0x144>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d905      	bls.n	800ff0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ff00:	6839      	ldr	r1, [r7, #0]
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f000 f966 	bl	80101d4 <USBD_CtlError>
    return USBD_FAIL;
 800ff08:	2303      	movs	r3, #3
 800ff0a:	e087      	b.n	801001c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d002      	beq.n	800ff1c <USBD_SetConfig+0x3c>
 800ff16:	2b03      	cmp	r3, #3
 800ff18:	d025      	beq.n	800ff66 <USBD_SetConfig+0x86>
 800ff1a:	e071      	b.n	8010000 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ff1c:	4b41      	ldr	r3, [pc, #260]	; (8010024 <USBD_SetConfig+0x144>)
 800ff1e:	781b      	ldrb	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d01c      	beq.n	800ff5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ff24:	4b3f      	ldr	r3, [pc, #252]	; (8010024 <USBD_SetConfig+0x144>)
 800ff26:	781b      	ldrb	r3, [r3, #0]
 800ff28:	461a      	mov	r2, r3
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff2e:	4b3d      	ldr	r3, [pc, #244]	; (8010024 <USBD_SetConfig+0x144>)
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	4619      	mov	r1, r3
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f7ff f97d 	bl	800f234 <USBD_SetClassConfig>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ff3e:	7bfb      	ldrb	r3, [r7, #15]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d004      	beq.n	800ff4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f944 	bl	80101d4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ff4c:	e065      	b.n	801001a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 fa0b 	bl	801036a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2203      	movs	r2, #3
 800ff58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ff5c:	e05d      	b.n	801001a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ff5e:	6878      	ldr	r0, [r7, #4]
 800ff60:	f000 fa03 	bl	801036a <USBD_CtlSendStatus>
    break;
 800ff64:	e059      	b.n	801001a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ff66:	4b2f      	ldr	r3, [pc, #188]	; (8010024 <USBD_SetConfig+0x144>)
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d112      	bne.n	800ff94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	2202      	movs	r2, #2
 800ff72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ff76:	4b2b      	ldr	r3, [pc, #172]	; (8010024 <USBD_SetConfig+0x144>)
 800ff78:	781b      	ldrb	r3, [r3, #0]
 800ff7a:	461a      	mov	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff80:	4b28      	ldr	r3, [pc, #160]	; (8010024 <USBD_SetConfig+0x144>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	4619      	mov	r1, r3
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7ff f970 	bl	800f26c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f9ec 	bl	801036a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ff92:	e042      	b.n	801001a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ff94:	4b23      	ldr	r3, [pc, #140]	; (8010024 <USBD_SetConfig+0x144>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d02a      	beq.n	800fff8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	685b      	ldr	r3, [r3, #4]
 800ffa6:	b2db      	uxtb	r3, r3
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff f95e 	bl	800f26c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800ffb0:	4b1c      	ldr	r3, [pc, #112]	; (8010024 <USBD_SetConfig+0x144>)
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ffba:	4b1a      	ldr	r3, [pc, #104]	; (8010024 <USBD_SetConfig+0x144>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f7ff f937 	bl	800f234 <USBD_SetClassConfig>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800ffca:	7bfb      	ldrb	r3, [r7, #15]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00f      	beq.n	800fff0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800ffd0:	6839      	ldr	r1, [r7, #0]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f8fe 	bl	80101d4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	4619      	mov	r1, r3
 800ffe0:	6878      	ldr	r0, [r7, #4]
 800ffe2:	f7ff f943 	bl	800f26c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2202      	movs	r2, #2
 800ffea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ffee:	e014      	b.n	801001a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f9ba 	bl	801036a <USBD_CtlSendStatus>
    break;
 800fff6:	e010      	b.n	801001a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f9b6 	bl	801036a <USBD_CtlSendStatus>
    break;
 800fffe:	e00c      	b.n	801001a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f8e6 	bl	80101d4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010008:	4b06      	ldr	r3, [pc, #24]	; (8010024 <USBD_SetConfig+0x144>)
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	4619      	mov	r1, r3
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f7ff f92c 	bl	800f26c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8010014:	2303      	movs	r3, #3
 8010016:	73fb      	strb	r3, [r7, #15]
    break;
 8010018:	bf00      	nop
  }

  return ret;
 801001a:	7bfb      	ldrb	r3, [r7, #15]
}
 801001c:	4618      	mov	r0, r3
 801001e:	3710      	adds	r7, #16
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}
 8010024:	20000434 	.word	0x20000434

08010028 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b082      	sub	sp, #8
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	88db      	ldrh	r3, [r3, #6]
 8010036:	2b01      	cmp	r3, #1
 8010038:	d004      	beq.n	8010044 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801003a:	6839      	ldr	r1, [r7, #0]
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f000 f8c9 	bl	80101d4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8010042:	e021      	b.n	8010088 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801004a:	2b01      	cmp	r3, #1
 801004c:	db17      	blt.n	801007e <USBD_GetConfig+0x56>
 801004e:	2b02      	cmp	r3, #2
 8010050:	dd02      	ble.n	8010058 <USBD_GetConfig+0x30>
 8010052:	2b03      	cmp	r3, #3
 8010054:	d00b      	beq.n	801006e <USBD_GetConfig+0x46>
 8010056:	e012      	b.n	801007e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2200      	movs	r2, #0
 801005c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	3308      	adds	r3, #8
 8010062:	2201      	movs	r2, #1
 8010064:	4619      	mov	r1, r3
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f000 f925 	bl	80102b6 <USBD_CtlSendData>
      break;
 801006c:	e00c      	b.n	8010088 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3304      	adds	r3, #4
 8010072:	2201      	movs	r2, #1
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 f91d 	bl	80102b6 <USBD_CtlSendData>
      break;
 801007c:	e004      	b.n	8010088 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f8a7 	bl	80101d4 <USBD_CtlError>
      break;
 8010086:	bf00      	nop
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80100a0:	3b01      	subs	r3, #1
 80100a2:	2b02      	cmp	r3, #2
 80100a4:	d81e      	bhi.n	80100e4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	88db      	ldrh	r3, [r3, #6]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d004      	beq.n	80100b8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80100ae:	6839      	ldr	r1, [r7, #0]
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 f88f 	bl	80101d4 <USBD_CtlError>
      break;
 80100b6:	e01a      	b.n	80100ee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2201      	movs	r2, #1
 80100bc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d005      	beq.n	80100d4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	f043 0202 	orr.w	r2, r3, #2
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	330c      	adds	r3, #12
 80100d8:	2202      	movs	r2, #2
 80100da:	4619      	mov	r1, r3
 80100dc:	6878      	ldr	r0, [r7, #4]
 80100de:	f000 f8ea 	bl	80102b6 <USBD_CtlSendData>
    break;
 80100e2:	e004      	b.n	80100ee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80100e4:	6839      	ldr	r1, [r7, #0]
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f874 	bl	80101d4 <USBD_CtlError>
    break;
 80100ec:	bf00      	nop
  }
}
 80100ee:	bf00      	nop
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b082      	sub	sp, #8
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	885b      	ldrh	r3, [r3, #2]
 8010104:	2b01      	cmp	r3, #1
 8010106:	d106      	bne.n	8010116 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2201      	movs	r2, #1
 801010c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 f92a 	bl	801036a <USBD_CtlSendStatus>
  }
}
 8010116:	bf00      	nop
 8010118:	3708      	adds	r7, #8
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b082      	sub	sp, #8
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801012e:	3b01      	subs	r3, #1
 8010130:	2b02      	cmp	r3, #2
 8010132:	d80b      	bhi.n	801014c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010134:	683b      	ldr	r3, [r7, #0]
 8010136:	885b      	ldrh	r3, [r3, #2]
 8010138:	2b01      	cmp	r3, #1
 801013a:	d10c      	bne.n	8010156 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2200      	movs	r2, #0
 8010140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f000 f910 	bl	801036a <USBD_CtlSendStatus>
      }
      break;
 801014a:	e004      	b.n	8010156 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	f000 f840 	bl	80101d4 <USBD_CtlError>
      break;
 8010154:	e000      	b.n	8010158 <USBD_ClrFeature+0x3a>
      break;
 8010156:	bf00      	nop
  }
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	781a      	ldrb	r2, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	3301      	adds	r3, #1
 801017a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	781a      	ldrb	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3301      	adds	r3, #1
 8010188:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f7ff faa9 	bl	800f6e2 <SWAPBYTE>
 8010190:	4603      	mov	r3, r0
 8010192:	461a      	mov	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	3301      	adds	r3, #1
 801019c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	3301      	adds	r3, #1
 80101a2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80101a4:	68f8      	ldr	r0, [r7, #12]
 80101a6:	f7ff fa9c 	bl	800f6e2 <SWAPBYTE>
 80101aa:	4603      	mov	r3, r0
 80101ac:	461a      	mov	r2, r3
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	3301      	adds	r3, #1
 80101b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	3301      	adds	r3, #1
 80101bc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80101be:	68f8      	ldr	r0, [r7, #12]
 80101c0:	f7ff fa8f 	bl	800f6e2 <SWAPBYTE>
 80101c4:	4603      	mov	r3, r0
 80101c6:	461a      	mov	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	80da      	strh	r2, [r3, #6]
}
 80101cc:	bf00      	nop
 80101ce:	3710      	adds	r7, #16
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80101de:	2180      	movs	r1, #128	; 0x80
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f007 fc37 	bl	8017a54 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101e6:	2100      	movs	r1, #0
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f007 fc33 	bl	8017a54 <USBD_LL_StallEP>
}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}

080101f6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80101f6:	b580      	push	{r7, lr}
 80101f8:	b086      	sub	sp, #24
 80101fa:	af00      	add	r7, sp, #0
 80101fc:	60f8      	str	r0, [r7, #12]
 80101fe:	60b9      	str	r1, [r7, #8]
 8010200:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010202:	2300      	movs	r3, #0
 8010204:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d036      	beq.n	801027a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010210:	6938      	ldr	r0, [r7, #16]
 8010212:	f000 f836 	bl	8010282 <USBD_GetLen>
 8010216:	4603      	mov	r3, r0
 8010218:	3301      	adds	r3, #1
 801021a:	b29b      	uxth	r3, r3
 801021c:	005b      	lsls	r3, r3, #1
 801021e:	b29a      	uxth	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	4413      	add	r3, r2
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	7812      	ldrb	r2, [r2, #0]
 801022e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010230:	7dfb      	ldrb	r3, [r7, #23]
 8010232:	3301      	adds	r3, #1
 8010234:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010236:	7dfb      	ldrb	r3, [r7, #23]
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	4413      	add	r3, r2
 801023c:	2203      	movs	r2, #3
 801023e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010240:	7dfb      	ldrb	r3, [r7, #23]
 8010242:	3301      	adds	r3, #1
 8010244:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010246:	e013      	b.n	8010270 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010248:	7dfb      	ldrb	r3, [r7, #23]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	4413      	add	r3, r2
 801024e:	693a      	ldr	r2, [r7, #16]
 8010250:	7812      	ldrb	r2, [r2, #0]
 8010252:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010254:	693b      	ldr	r3, [r7, #16]
 8010256:	3301      	adds	r3, #1
 8010258:	613b      	str	r3, [r7, #16]
    idx++;
 801025a:	7dfb      	ldrb	r3, [r7, #23]
 801025c:	3301      	adds	r3, #1
 801025e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010260:	7dfb      	ldrb	r3, [r7, #23]
 8010262:	68ba      	ldr	r2, [r7, #8]
 8010264:	4413      	add	r3, r2
 8010266:	2200      	movs	r2, #0
 8010268:	701a      	strb	r2, [r3, #0]
    idx++;
 801026a:	7dfb      	ldrb	r3, [r7, #23]
 801026c:	3301      	adds	r3, #1
 801026e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	781b      	ldrb	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1e7      	bne.n	8010248 <USBD_GetString+0x52>
 8010278:	e000      	b.n	801027c <USBD_GetString+0x86>
    return;
 801027a:	bf00      	nop
  }
}
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}

08010282 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010282:	b480      	push	{r7}
 8010284:	b085      	sub	sp, #20
 8010286:	af00      	add	r7, sp, #0
 8010288:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801028a:	2300      	movs	r3, #0
 801028c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010292:	e005      	b.n	80102a0 <USBD_GetLen+0x1e>
  {
    len++;
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	3301      	adds	r3, #1
 8010298:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	3301      	adds	r3, #1
 801029e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d1f5      	bne.n	8010294 <USBD_GetLen+0x12>
  }

  return len;
 80102a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	3714      	adds	r7, #20
 80102ae:	46bd      	mov	sp, r7
 80102b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b4:	4770      	bx	lr

080102b6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80102b6:	b580      	push	{r7, lr}
 80102b8:	b084      	sub	sp, #16
 80102ba:	af00      	add	r7, sp, #0
 80102bc:	60f8      	str	r0, [r7, #12]
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2202      	movs	r2, #2
 80102c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	2100      	movs	r1, #0
 80102dc:	68f8      	ldr	r0, [r7, #12]
 80102de:	f007 fc42 	bl	8017b66 <USBD_LL_Transmit>

  return USBD_OK;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3710      	adds	r7, #16
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b084      	sub	sp, #16
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	2100      	movs	r1, #0
 80102fe:	68f8      	ldr	r0, [r7, #12]
 8010300:	f007 fc31 	bl	8017b66 <USBD_LL_Transmit>

  return USBD_OK;
 8010304:	2300      	movs	r3, #0
}
 8010306:	4618      	mov	r0, r3
 8010308:	3710      	adds	r7, #16
 801030a:	46bd      	mov	sp, r7
 801030c:	bd80      	pop	{r7, pc}

0801030e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801030e:	b580      	push	{r7, lr}
 8010310:	b084      	sub	sp, #16
 8010312:	af00      	add	r7, sp, #0
 8010314:	60f8      	str	r0, [r7, #12]
 8010316:	60b9      	str	r1, [r7, #8]
 8010318:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2203      	movs	r2, #3
 801031e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	687a      	ldr	r2, [r7, #4]
 8010326:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68ba      	ldr	r2, [r7, #8]
 8010336:	2100      	movs	r1, #0
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f007 fc35 	bl	8017ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801033e:	2300      	movs	r3, #0
}
 8010340:	4618      	mov	r0, r3
 8010342:	3710      	adds	r7, #16
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}

08010348 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b084      	sub	sp, #16
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	2100      	movs	r1, #0
 801035a:	68f8      	ldr	r0, [r7, #12]
 801035c:	f007 fc24 	bl	8017ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3710      	adds	r7, #16
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b082      	sub	sp, #8
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2204      	movs	r2, #4
 8010376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801037a:	2300      	movs	r3, #0
 801037c:	2200      	movs	r2, #0
 801037e:	2100      	movs	r1, #0
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f007 fbf0 	bl	8017b66 <USBD_LL_Transmit>

  return USBD_OK;
 8010386:	2300      	movs	r3, #0
}
 8010388:	4618      	mov	r0, r3
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2205      	movs	r2, #5
 801039c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103a0:	2300      	movs	r3, #0
 80103a2:	2200      	movs	r2, #0
 80103a4:	2100      	movs	r1, #0
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f007 fbfe 	bl	8017ba8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ac:	2300      	movs	r3, #0
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3708      	adds	r7, #8
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
	...

080103b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	4a08      	ldr	r2, [pc, #32]	; (80103e8 <disk_status+0x30>)
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	4413      	add	r3, r2
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	79fa      	ldrb	r2, [r7, #7]
 80103d0:	4905      	ldr	r1, [pc, #20]	; (80103e8 <disk_status+0x30>)
 80103d2:	440a      	add	r2, r1
 80103d4:	7a12      	ldrb	r2, [r2, #8]
 80103d6:	4610      	mov	r0, r2
 80103d8:	4798      	blx	r3
 80103da:	4603      	mov	r3, r0
 80103dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80103de:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}
 80103e8:	20000460 	.word	0x20000460

080103ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b084      	sub	sp, #16
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	4603      	mov	r3, r0
 80103f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80103f6:	2300      	movs	r3, #0
 80103f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80103fa:	79fb      	ldrb	r3, [r7, #7]
 80103fc:	4a0d      	ldr	r2, [pc, #52]	; (8010434 <disk_initialize+0x48>)
 80103fe:	5cd3      	ldrb	r3, [r2, r3]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d111      	bne.n	8010428 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010404:	79fb      	ldrb	r3, [r7, #7]
 8010406:	4a0b      	ldr	r2, [pc, #44]	; (8010434 <disk_initialize+0x48>)
 8010408:	2101      	movs	r1, #1
 801040a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	4a09      	ldr	r2, [pc, #36]	; (8010434 <disk_initialize+0x48>)
 8010410:	009b      	lsls	r3, r3, #2
 8010412:	4413      	add	r3, r2
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	79fa      	ldrb	r2, [r7, #7]
 801041a:	4906      	ldr	r1, [pc, #24]	; (8010434 <disk_initialize+0x48>)
 801041c:	440a      	add	r2, r1
 801041e:	7a12      	ldrb	r2, [r2, #8]
 8010420:	4610      	mov	r0, r2
 8010422:	4798      	blx	r3
 8010424:	4603      	mov	r3, r0
 8010426:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010428:	7bfb      	ldrb	r3, [r7, #15]
}
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	20000460 	.word	0x20000460

08010438 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010438:	b590      	push	{r4, r7, lr}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	60b9      	str	r1, [r7, #8]
 8010440:	607a      	str	r2, [r7, #4]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4603      	mov	r3, r0
 8010446:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010448:	7bfb      	ldrb	r3, [r7, #15]
 801044a:	4a0a      	ldr	r2, [pc, #40]	; (8010474 <disk_read+0x3c>)
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	4413      	add	r3, r2
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	689c      	ldr	r4, [r3, #8]
 8010454:	7bfb      	ldrb	r3, [r7, #15]
 8010456:	4a07      	ldr	r2, [pc, #28]	; (8010474 <disk_read+0x3c>)
 8010458:	4413      	add	r3, r2
 801045a:	7a18      	ldrb	r0, [r3, #8]
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	68b9      	ldr	r1, [r7, #8]
 8010462:	47a0      	blx	r4
 8010464:	4603      	mov	r3, r0
 8010466:	75fb      	strb	r3, [r7, #23]
  return res;
 8010468:	7dfb      	ldrb	r3, [r7, #23]
}
 801046a:	4618      	mov	r0, r3
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	bd90      	pop	{r4, r7, pc}
 8010472:	bf00      	nop
 8010474:	20000460 	.word	0x20000460

08010478 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010478:	b590      	push	{r4, r7, lr}
 801047a:	b087      	sub	sp, #28
 801047c:	af00      	add	r7, sp, #0
 801047e:	60b9      	str	r1, [r7, #8]
 8010480:	607a      	str	r2, [r7, #4]
 8010482:	603b      	str	r3, [r7, #0]
 8010484:	4603      	mov	r3, r0
 8010486:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	4a0a      	ldr	r2, [pc, #40]	; (80104b4 <disk_write+0x3c>)
 801048c:	009b      	lsls	r3, r3, #2
 801048e:	4413      	add	r3, r2
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	68dc      	ldr	r4, [r3, #12]
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	4a07      	ldr	r2, [pc, #28]	; (80104b4 <disk_write+0x3c>)
 8010498:	4413      	add	r3, r2
 801049a:	7a18      	ldrb	r0, [r3, #8]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	687a      	ldr	r2, [r7, #4]
 80104a0:	68b9      	ldr	r1, [r7, #8]
 80104a2:	47a0      	blx	r4
 80104a4:	4603      	mov	r3, r0
 80104a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80104a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	371c      	adds	r7, #28
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd90      	pop	{r4, r7, pc}
 80104b2:	bf00      	nop
 80104b4:	20000460 	.word	0x20000460

080104b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	4603      	mov	r3, r0
 80104c0:	603a      	str	r2, [r7, #0]
 80104c2:	71fb      	strb	r3, [r7, #7]
 80104c4:	460b      	mov	r3, r1
 80104c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	4a09      	ldr	r2, [pc, #36]	; (80104f0 <disk_ioctl+0x38>)
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4413      	add	r3, r2
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	79fa      	ldrb	r2, [r7, #7]
 80104d6:	4906      	ldr	r1, [pc, #24]	; (80104f0 <disk_ioctl+0x38>)
 80104d8:	440a      	add	r2, r1
 80104da:	7a10      	ldrb	r0, [r2, #8]
 80104dc:	79b9      	ldrb	r1, [r7, #6]
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	4798      	blx	r3
 80104e2:	4603      	mov	r3, r0
 80104e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80104e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	20000460 	.word	0x20000460

080104f4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80104f4:	b480      	push	{r7}
 80104f6:	b085      	sub	sp, #20
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	3301      	adds	r3, #1
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010504:	89fb      	ldrh	r3, [r7, #14]
 8010506:	021b      	lsls	r3, r3, #8
 8010508:	b21a      	sxth	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	b21b      	sxth	r3, r3
 8010510:	4313      	orrs	r3, r2
 8010512:	b21b      	sxth	r3, r3
 8010514:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010516:	89fb      	ldrh	r3, [r7, #14]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3714      	adds	r7, #20
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	3303      	adds	r3, #3
 8010530:	781b      	ldrb	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	021b      	lsls	r3, r3, #8
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	3202      	adds	r2, #2
 801053c:	7812      	ldrb	r2, [r2, #0]
 801053e:	4313      	orrs	r3, r2
 8010540:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	021b      	lsls	r3, r3, #8
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	3201      	adds	r2, #1
 801054a:	7812      	ldrb	r2, [r2, #0]
 801054c:	4313      	orrs	r3, r2
 801054e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	021b      	lsls	r3, r3, #8
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	7812      	ldrb	r2, [r2, #0]
 8010558:	4313      	orrs	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]
	return rv;
 801055c:	68fb      	ldr	r3, [r7, #12]
}
 801055e:	4618      	mov	r0, r3
 8010560:	3714      	adds	r7, #20
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr

0801056a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801056a:	b480      	push	{r7}
 801056c:	b083      	sub	sp, #12
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	460b      	mov	r3, r1
 8010574:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	1c5a      	adds	r2, r3, #1
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	887a      	ldrh	r2, [r7, #2]
 801057e:	b2d2      	uxtb	r2, r2
 8010580:	701a      	strb	r2, [r3, #0]
 8010582:	887b      	ldrh	r3, [r7, #2]
 8010584:	0a1b      	lsrs	r3, r3, #8
 8010586:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	1c5a      	adds	r2, r3, #1
 801058c:	607a      	str	r2, [r7, #4]
 801058e:	887a      	ldrh	r2, [r7, #2]
 8010590:	b2d2      	uxtb	r2, r2
 8010592:	701a      	strb	r2, [r3, #0]
}
 8010594:	bf00      	nop
 8010596:	370c      	adds	r7, #12
 8010598:	46bd      	mov	sp, r7
 801059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801059e:	4770      	bx	lr

080105a0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	607a      	str	r2, [r7, #4]
 80105b0:	683a      	ldr	r2, [r7, #0]
 80105b2:	b2d2      	uxtb	r2, r2
 80105b4:	701a      	strb	r2, [r3, #0]
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	0a1b      	lsrs	r3, r3, #8
 80105ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	1c5a      	adds	r2, r3, #1
 80105c0:	607a      	str	r2, [r7, #4]
 80105c2:	683a      	ldr	r2, [r7, #0]
 80105c4:	b2d2      	uxtb	r2, r2
 80105c6:	701a      	strb	r2, [r3, #0]
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	0a1b      	lsrs	r3, r3, #8
 80105cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	1c5a      	adds	r2, r3, #1
 80105d2:	607a      	str	r2, [r7, #4]
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	b2d2      	uxtb	r2, r2
 80105d8:	701a      	strb	r2, [r3, #0]
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	0a1b      	lsrs	r3, r3, #8
 80105de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	1c5a      	adds	r2, r3, #1
 80105e4:	607a      	str	r2, [r7, #4]
 80105e6:	683a      	ldr	r2, [r7, #0]
 80105e8:	b2d2      	uxtb	r2, r2
 80105ea:	701a      	strb	r2, [r3, #0]
}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80105f8:	b480      	push	{r7}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d00d      	beq.n	801062e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010612:	693a      	ldr	r2, [r7, #16]
 8010614:	1c53      	adds	r3, r2, #1
 8010616:	613b      	str	r3, [r7, #16]
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	1c59      	adds	r1, r3, #1
 801061c:	6179      	str	r1, [r7, #20]
 801061e:	7812      	ldrb	r2, [r2, #0]
 8010620:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	3b01      	subs	r3, #1
 8010626:	607b      	str	r3, [r7, #4]
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1f1      	bne.n	8010612 <mem_cpy+0x1a>
	}
}
 801062e:	bf00      	nop
 8010630:	371c      	adds	r7, #28
 8010632:	46bd      	mov	sp, r7
 8010634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010638:	4770      	bx	lr

0801063a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801063a:	b480      	push	{r7}
 801063c:	b087      	sub	sp, #28
 801063e:	af00      	add	r7, sp, #0
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	60b9      	str	r1, [r7, #8]
 8010644:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	1c5a      	adds	r2, r3, #1
 801064e:	617a      	str	r2, [r7, #20]
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	b2d2      	uxtb	r2, r2
 8010654:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	3b01      	subs	r3, #1
 801065a:	607b      	str	r3, [r7, #4]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d1f3      	bne.n	801064a <mem_set+0x10>
}
 8010662:	bf00      	nop
 8010664:	371c      	adds	r7, #28
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr

0801066e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801066e:	b480      	push	{r7}
 8010670:	b089      	sub	sp, #36	; 0x24
 8010672:	af00      	add	r7, sp, #0
 8010674:	60f8      	str	r0, [r7, #12]
 8010676:	60b9      	str	r1, [r7, #8]
 8010678:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	61fb      	str	r3, [r7, #28]
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010686:	69fb      	ldr	r3, [r7, #28]
 8010688:	1c5a      	adds	r2, r3, #1
 801068a:	61fa      	str	r2, [r7, #28]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	4619      	mov	r1, r3
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	1c5a      	adds	r2, r3, #1
 8010694:	61ba      	str	r2, [r7, #24]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	1acb      	subs	r3, r1, r3
 801069a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	3b01      	subs	r3, #1
 80106a0:	607b      	str	r3, [r7, #4]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d002      	beq.n	80106ae <mem_cmp+0x40>
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0eb      	beq.n	8010686 <mem_cmp+0x18>

	return r;
 80106ae:	697b      	ldr	r3, [r7, #20]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3724      	adds	r7, #36	; 0x24
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80106c6:	e002      	b.n	80106ce <chk_chr+0x12>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3301      	adds	r3, #1
 80106cc:	607b      	str	r3, [r7, #4]
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	781b      	ldrb	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d005      	beq.n	80106e2 <chk_chr+0x26>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	4293      	cmp	r3, r2
 80106e0:	d1f2      	bne.n	80106c8 <chk_chr+0xc>
	return *str;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	781b      	ldrb	r3, [r3, #0]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d009      	beq.n	8010714 <lock_fs+0x22>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	4618      	mov	r0, r3
 8010706:	f002 fd8d 	bl	8013224 <ff_req_grant>
 801070a:	4603      	mov	r3, r0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <lock_fs+0x22>
 8010710:	2301      	movs	r3, #1
 8010712:	e000      	b.n	8010716 <lock_fs+0x24>
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}

0801071e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801071e:	b580      	push	{r7, lr}
 8010720:	b082      	sub	sp, #8
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
 8010726:	460b      	mov	r3, r1
 8010728:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00d      	beq.n	801074c <unlock_fs+0x2e>
 8010730:	78fb      	ldrb	r3, [r7, #3]
 8010732:	2b0c      	cmp	r3, #12
 8010734:	d00a      	beq.n	801074c <unlock_fs+0x2e>
 8010736:	78fb      	ldrb	r3, [r7, #3]
 8010738:	2b0b      	cmp	r3, #11
 801073a:	d007      	beq.n	801074c <unlock_fs+0x2e>
 801073c:	78fb      	ldrb	r3, [r7, #3]
 801073e:	2b0f      	cmp	r3, #15
 8010740:	d004      	beq.n	801074c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	68db      	ldr	r3, [r3, #12]
 8010746:	4618      	mov	r0, r3
 8010748:	f002 fd81 	bl	801324e <ff_rel_grant>
	}
}
 801074c:	bf00      	nop
 801074e:	3708      	adds	r7, #8
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010754:	b480      	push	{r7}
 8010756:	b085      	sub	sp, #20
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801075e:	2300      	movs	r3, #0
 8010760:	60bb      	str	r3, [r7, #8]
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	60fb      	str	r3, [r7, #12]
 8010766:	e029      	b.n	80107bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010768:	4a27      	ldr	r2, [pc, #156]	; (8010808 <chk_lock+0xb4>)
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	011b      	lsls	r3, r3, #4
 801076e:	4413      	add	r3, r2
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d01d      	beq.n	80107b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010776:	4a24      	ldr	r2, [pc, #144]	; (8010808 <chk_lock+0xb4>)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	4413      	add	r3, r2
 801077e:	681a      	ldr	r2, [r3, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	429a      	cmp	r2, r3
 8010786:	d116      	bne.n	80107b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010788:	4a1f      	ldr	r2, [pc, #124]	; (8010808 <chk_lock+0xb4>)
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	011b      	lsls	r3, r3, #4
 801078e:	4413      	add	r3, r2
 8010790:	3304      	adds	r3, #4
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010798:	429a      	cmp	r2, r3
 801079a:	d10c      	bne.n	80107b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801079c:	4a1a      	ldr	r2, [pc, #104]	; (8010808 <chk_lock+0xb4>)
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	011b      	lsls	r3, r3, #4
 80107a2:	4413      	add	r3, r2
 80107a4:	3308      	adds	r3, #8
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d102      	bne.n	80107b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80107b0:	e007      	b.n	80107c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80107b2:	2301      	movs	r3, #1
 80107b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	3301      	adds	r3, #1
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2b01      	cmp	r3, #1
 80107c0:	d9d2      	bls.n	8010768 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	2b02      	cmp	r3, #2
 80107c6:	d109      	bne.n	80107dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d102      	bne.n	80107d4 <chk_lock+0x80>
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b02      	cmp	r3, #2
 80107d2:	d101      	bne.n	80107d8 <chk_lock+0x84>
 80107d4:	2300      	movs	r3, #0
 80107d6:	e010      	b.n	80107fa <chk_lock+0xa6>
 80107d8:	2312      	movs	r3, #18
 80107da:	e00e      	b.n	80107fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d108      	bne.n	80107f4 <chk_lock+0xa0>
 80107e2:	4a09      	ldr	r2, [pc, #36]	; (8010808 <chk_lock+0xb4>)
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	011b      	lsls	r3, r3, #4
 80107e8:	4413      	add	r3, r2
 80107ea:	330c      	adds	r3, #12
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107f2:	d101      	bne.n	80107f8 <chk_lock+0xa4>
 80107f4:	2310      	movs	r3, #16
 80107f6:	e000      	b.n	80107fa <chk_lock+0xa6>
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3714      	adds	r7, #20
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr
 8010806:	bf00      	nop
 8010808:	20000440 	.word	0x20000440

0801080c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010812:	2300      	movs	r3, #0
 8010814:	607b      	str	r3, [r7, #4]
 8010816:	e002      	b.n	801081e <enq_lock+0x12>
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3301      	adds	r3, #1
 801081c:	607b      	str	r3, [r7, #4]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2b01      	cmp	r3, #1
 8010822:	d806      	bhi.n	8010832 <enq_lock+0x26>
 8010824:	4a09      	ldr	r2, [pc, #36]	; (801084c <enq_lock+0x40>)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	011b      	lsls	r3, r3, #4
 801082a:	4413      	add	r3, r2
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1f2      	bne.n	8010818 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2b02      	cmp	r3, #2
 8010836:	bf14      	ite	ne
 8010838:	2301      	movne	r3, #1
 801083a:	2300      	moveq	r3, #0
 801083c:	b2db      	uxtb	r3, r3
}
 801083e:	4618      	mov	r0, r3
 8010840:	370c      	adds	r7, #12
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	20000440 	.word	0x20000440

08010850 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010850:	b480      	push	{r7}
 8010852:	b085      	sub	sp, #20
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
 8010858:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801085a:	2300      	movs	r3, #0
 801085c:	60fb      	str	r3, [r7, #12]
 801085e:	e01f      	b.n	80108a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010860:	4a41      	ldr	r2, [pc, #260]	; (8010968 <inc_lock+0x118>)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	011b      	lsls	r3, r3, #4
 8010866:	4413      	add	r3, r2
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	d113      	bne.n	801089a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010872:	4a3d      	ldr	r2, [pc, #244]	; (8010968 <inc_lock+0x118>)
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	011b      	lsls	r3, r3, #4
 8010878:	4413      	add	r3, r2
 801087a:	3304      	adds	r3, #4
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010882:	429a      	cmp	r2, r3
 8010884:	d109      	bne.n	801089a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010886:	4a38      	ldr	r2, [pc, #224]	; (8010968 <inc_lock+0x118>)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	011b      	lsls	r3, r3, #4
 801088c:	4413      	add	r3, r2
 801088e:	3308      	adds	r3, #8
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010896:	429a      	cmp	r2, r3
 8010898:	d006      	beq.n	80108a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3301      	adds	r3, #1
 801089e:	60fb      	str	r3, [r7, #12]
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d9dc      	bls.n	8010860 <inc_lock+0x10>
 80108a6:	e000      	b.n	80108aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80108a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2b02      	cmp	r3, #2
 80108ae:	d132      	bne.n	8010916 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80108b0:	2300      	movs	r3, #0
 80108b2:	60fb      	str	r3, [r7, #12]
 80108b4:	e002      	b.n	80108bc <inc_lock+0x6c>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	3301      	adds	r3, #1
 80108ba:	60fb      	str	r3, [r7, #12]
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d806      	bhi.n	80108d0 <inc_lock+0x80>
 80108c2:	4a29      	ldr	r2, [pc, #164]	; (8010968 <inc_lock+0x118>)
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	011b      	lsls	r3, r3, #4
 80108c8:	4413      	add	r3, r2
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1f2      	bne.n	80108b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	2b02      	cmp	r3, #2
 80108d4:	d101      	bne.n	80108da <inc_lock+0x8a>
 80108d6:	2300      	movs	r3, #0
 80108d8:	e040      	b.n	801095c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4922      	ldr	r1, [pc, #136]	; (8010968 <inc_lock+0x118>)
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	011b      	lsls	r3, r3, #4
 80108e4:	440b      	add	r3, r1
 80108e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	689a      	ldr	r2, [r3, #8]
 80108ec:	491e      	ldr	r1, [pc, #120]	; (8010968 <inc_lock+0x118>)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	011b      	lsls	r3, r3, #4
 80108f2:	440b      	add	r3, r1
 80108f4:	3304      	adds	r3, #4
 80108f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	695a      	ldr	r2, [r3, #20]
 80108fc:	491a      	ldr	r1, [pc, #104]	; (8010968 <inc_lock+0x118>)
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	011b      	lsls	r3, r3, #4
 8010902:	440b      	add	r3, r1
 8010904:	3308      	adds	r3, #8
 8010906:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010908:	4a17      	ldr	r2, [pc, #92]	; (8010968 <inc_lock+0x118>)
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	011b      	lsls	r3, r3, #4
 801090e:	4413      	add	r3, r2
 8010910:	330c      	adds	r3, #12
 8010912:	2200      	movs	r2, #0
 8010914:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d009      	beq.n	8010930 <inc_lock+0xe0>
 801091c:	4a12      	ldr	r2, [pc, #72]	; (8010968 <inc_lock+0x118>)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	011b      	lsls	r3, r3, #4
 8010922:	4413      	add	r3, r2
 8010924:	330c      	adds	r3, #12
 8010926:	881b      	ldrh	r3, [r3, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d001      	beq.n	8010930 <inc_lock+0xe0>
 801092c:	2300      	movs	r3, #0
 801092e:	e015      	b.n	801095c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d108      	bne.n	8010948 <inc_lock+0xf8>
 8010936:	4a0c      	ldr	r2, [pc, #48]	; (8010968 <inc_lock+0x118>)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	011b      	lsls	r3, r3, #4
 801093c:	4413      	add	r3, r2
 801093e:	330c      	adds	r3, #12
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	3301      	adds	r3, #1
 8010944:	b29a      	uxth	r2, r3
 8010946:	e001      	b.n	801094c <inc_lock+0xfc>
 8010948:	f44f 7280 	mov.w	r2, #256	; 0x100
 801094c:	4906      	ldr	r1, [pc, #24]	; (8010968 <inc_lock+0x118>)
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	011b      	lsls	r3, r3, #4
 8010952:	440b      	add	r3, r1
 8010954:	330c      	adds	r3, #12
 8010956:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	3301      	adds	r3, #1
}
 801095c:	4618      	mov	r0, r3
 801095e:	3714      	adds	r7, #20
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr
 8010968:	20000440 	.word	0x20000440

0801096c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	3b01      	subs	r3, #1
 8010978:	607b      	str	r3, [r7, #4]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2b01      	cmp	r3, #1
 801097e:	d825      	bhi.n	80109cc <dec_lock+0x60>
		n = Files[i].ctr;
 8010980:	4a17      	ldr	r2, [pc, #92]	; (80109e0 <dec_lock+0x74>)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	011b      	lsls	r3, r3, #4
 8010986:	4413      	add	r3, r2
 8010988:	330c      	adds	r3, #12
 801098a:	881b      	ldrh	r3, [r3, #0]
 801098c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801098e:	89fb      	ldrh	r3, [r7, #14]
 8010990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010994:	d101      	bne.n	801099a <dec_lock+0x2e>
 8010996:	2300      	movs	r3, #0
 8010998:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801099a:	89fb      	ldrh	r3, [r7, #14]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d002      	beq.n	80109a6 <dec_lock+0x3a>
 80109a0:	89fb      	ldrh	r3, [r7, #14]
 80109a2:	3b01      	subs	r3, #1
 80109a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80109a6:	4a0e      	ldr	r2, [pc, #56]	; (80109e0 <dec_lock+0x74>)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	011b      	lsls	r3, r3, #4
 80109ac:	4413      	add	r3, r2
 80109ae:	330c      	adds	r3, #12
 80109b0:	89fa      	ldrh	r2, [r7, #14]
 80109b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80109b4:	89fb      	ldrh	r3, [r7, #14]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <dec_lock+0x5a>
 80109ba:	4a09      	ldr	r2, [pc, #36]	; (80109e0 <dec_lock+0x74>)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	011b      	lsls	r3, r3, #4
 80109c0:	4413      	add	r3, r2
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80109c6:	2300      	movs	r3, #0
 80109c8:	737b      	strb	r3, [r7, #13]
 80109ca:	e001      	b.n	80109d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80109cc:	2302      	movs	r3, #2
 80109ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80109d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	3714      	adds	r7, #20
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop
 80109e0:	20000440 	.word	0x20000440

080109e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80109ec:	2300      	movs	r3, #0
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	e010      	b.n	8010a14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80109f2:	4a0d      	ldr	r2, [pc, #52]	; (8010a28 <clear_lock+0x44>)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	011b      	lsls	r3, r3, #4
 80109f8:	4413      	add	r3, r2
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	687a      	ldr	r2, [r7, #4]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d105      	bne.n	8010a0e <clear_lock+0x2a>
 8010a02:	4a09      	ldr	r2, [pc, #36]	; (8010a28 <clear_lock+0x44>)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	4413      	add	r3, r2
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	3301      	adds	r3, #1
 8010a12:	60fb      	str	r3, [r7, #12]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d9eb      	bls.n	80109f2 <clear_lock+0xe>
	}
}
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000440 	.word	0x20000440

08010a2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b086      	sub	sp, #24
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	78db      	ldrb	r3, [r3, #3]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d034      	beq.n	8010aaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7858      	ldrb	r0, [r3, #1]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a50:	2301      	movs	r3, #1
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	f7ff fd10 	bl	8010478 <disk_write>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d002      	beq.n	8010a64 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	73fb      	strb	r3, [r7, #15]
 8010a62:	e022      	b.n	8010aaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2200      	movs	r2, #0
 8010a68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a6e:	697a      	ldr	r2, [r7, #20]
 8010a70:	1ad2      	subs	r2, r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	429a      	cmp	r2, r3
 8010a78:	d217      	bcs.n	8010aaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	789b      	ldrb	r3, [r3, #2]
 8010a7e:	613b      	str	r3, [r7, #16]
 8010a80:	e010      	b.n	8010aa4 <sync_window+0x78>
					wsect += fs->fsize;
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	69db      	ldr	r3, [r3, #28]
 8010a86:	697a      	ldr	r2, [r7, #20]
 8010a88:	4413      	add	r3, r2
 8010a8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	7858      	ldrb	r0, [r3, #1]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010a96:	2301      	movs	r3, #1
 8010a98:	697a      	ldr	r2, [r7, #20]
 8010a9a:	f7ff fced 	bl	8010478 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a9e:	693b      	ldr	r3, [r7, #16]
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	613b      	str	r3, [r7, #16]
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d8eb      	bhi.n	8010a82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b084      	sub	sp, #16
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d01b      	beq.n	8010b04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7ff ffad 	bl	8010a2c <sync_window>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d113      	bne.n	8010b04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	7858      	ldrb	r0, [r3, #1]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010ae6:	2301      	movs	r3, #1
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	f7ff fca5 	bl	8010438 <disk_read>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d004      	beq.n	8010afe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010af4:	f04f 33ff 	mov.w	r3, #4294967295
 8010af8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010afa:	2301      	movs	r3, #1
 8010afc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	683a      	ldr	r2, [r7, #0]
 8010b02:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
	...

08010b10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7ff ff87 	bl	8010a2c <sync_window>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010b22:	7bfb      	ldrb	r3, [r7, #15]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d158      	bne.n	8010bda <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	d148      	bne.n	8010bc2 <sync_fs+0xb2>
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	791b      	ldrb	r3, [r3, #4]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	d144      	bne.n	8010bc2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	3334      	adds	r3, #52	; 0x34
 8010b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b40:	2100      	movs	r1, #0
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7ff fd79 	bl	801063a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3334      	adds	r3, #52	; 0x34
 8010b4c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010b50:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff fd08 	bl	801056a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	3334      	adds	r3, #52	; 0x34
 8010b5e:	4921      	ldr	r1, [pc, #132]	; (8010be4 <sync_fs+0xd4>)
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7ff fd1d 	bl	80105a0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	3334      	adds	r3, #52	; 0x34
 8010b6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010b6e:	491e      	ldr	r1, [pc, #120]	; (8010be8 <sync_fs+0xd8>)
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff fd15 	bl	80105a0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	3334      	adds	r3, #52	; 0x34
 8010b7a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	695b      	ldr	r3, [r3, #20]
 8010b82:	4619      	mov	r1, r3
 8010b84:	4610      	mov	r0, r2
 8010b86:	f7ff fd0b 	bl	80105a0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	3334      	adds	r3, #52	; 0x34
 8010b8e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	691b      	ldr	r3, [r3, #16]
 8010b96:	4619      	mov	r1, r3
 8010b98:	4610      	mov	r0, r2
 8010b9a:	f7ff fd01 	bl	80105a0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6a1b      	ldr	r3, [r3, #32]
 8010ba2:	1c5a      	adds	r2, r3, #1
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	7858      	ldrb	r0, [r3, #1]
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f7ff fc5e 	bl	8010478 <disk_write>
			fs->fsi_flag = 0;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	785b      	ldrb	r3, [r3, #1]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	2100      	movs	r1, #0
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7ff fc74 	bl	80104b8 <disk_ioctl>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d001      	beq.n	8010bda <sync_fs+0xca>
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bdc:	4618      	mov	r0, r3
 8010bde:	3710      	adds	r7, #16
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	41615252 	.word	0x41615252
 8010be8:	61417272 	.word	0x61417272

08010bec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	3b02      	subs	r3, #2
 8010bfa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	699b      	ldr	r3, [r3, #24]
 8010c00:	3b02      	subs	r3, #2
 8010c02:	683a      	ldr	r2, [r7, #0]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d301      	bcc.n	8010c0c <clust2sect+0x20>
 8010c08:	2300      	movs	r3, #0
 8010c0a:	e008      	b.n	8010c1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	895b      	ldrh	r3, [r3, #10]
 8010c10:	461a      	mov	r2, r3
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	fb03 f202 	mul.w	r2, r3, r2
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c1c:	4413      	add	r3, r2
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	370c      	adds	r7, #12
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr

08010c2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010c2a:	b580      	push	{r7, lr}
 8010c2c:	b086      	sub	sp, #24
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
 8010c32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	2b01      	cmp	r3, #1
 8010c3e:	d904      	bls.n	8010c4a <get_fat+0x20>
 8010c40:	693b      	ldr	r3, [r7, #16]
 8010c42:	699b      	ldr	r3, [r3, #24]
 8010c44:	683a      	ldr	r2, [r7, #0]
 8010c46:	429a      	cmp	r2, r3
 8010c48:	d302      	bcc.n	8010c50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	617b      	str	r3, [r7, #20]
 8010c4e:	e08c      	b.n	8010d6a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010c50:	f04f 33ff 	mov.w	r3, #4294967295
 8010c54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	781b      	ldrb	r3, [r3, #0]
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	d045      	beq.n	8010cea <get_fat+0xc0>
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d05d      	beq.n	8010d1e <get_fat+0xf4>
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d177      	bne.n	8010d56 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	60fb      	str	r3, [r7, #12]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	085b      	lsrs	r3, r3, #1
 8010c6e:	68fa      	ldr	r2, [r7, #12]
 8010c70:	4413      	add	r3, r2
 8010c72:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	0a5b      	lsrs	r3, r3, #9
 8010c7c:	4413      	add	r3, r2
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6938      	ldr	r0, [r7, #16]
 8010c82:	f7ff ff17 	bl	8010ab4 <move_window>
 8010c86:	4603      	mov	r3, r0
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d167      	bne.n	8010d5c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	1c5a      	adds	r2, r3, #1
 8010c90:	60fa      	str	r2, [r7, #12]
 8010c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c96:	693a      	ldr	r2, [r7, #16]
 8010c98:	4413      	add	r3, r2
 8010c9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c9e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	0a5b      	lsrs	r3, r3, #9
 8010ca8:	4413      	add	r3, r2
 8010caa:	4619      	mov	r1, r3
 8010cac:	6938      	ldr	r0, [r7, #16]
 8010cae:	f7ff ff01 	bl	8010ab4 <move_window>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d153      	bne.n	8010d60 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cbe:	693a      	ldr	r2, [r7, #16]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010cc6:	021b      	lsls	r3, r3, #8
 8010cc8:	461a      	mov	r2, r3
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	4313      	orrs	r3, r2
 8010cce:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	f003 0301 	and.w	r3, r3, #1
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d002      	beq.n	8010ce0 <get_fat+0xb6>
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	091b      	lsrs	r3, r3, #4
 8010cde:	e002      	b.n	8010ce6 <get_fat+0xbc>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010ce6:	617b      	str	r3, [r7, #20]
			break;
 8010ce8:	e03f      	b.n	8010d6a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	0a1b      	lsrs	r3, r3, #8
 8010cf2:	4413      	add	r3, r2
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	6938      	ldr	r0, [r7, #16]
 8010cf8:	f7ff fedc 	bl	8010ab4 <move_window>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d130      	bne.n	8010d64 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	005b      	lsls	r3, r3, #1
 8010d0c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010d10:	4413      	add	r3, r2
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7ff fbee 	bl	80104f4 <ld_word>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	617b      	str	r3, [r7, #20]
			break;
 8010d1c:	e025      	b.n	8010d6a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	09db      	lsrs	r3, r3, #7
 8010d26:	4413      	add	r3, r2
 8010d28:	4619      	mov	r1, r3
 8010d2a:	6938      	ldr	r0, [r7, #16]
 8010d2c:	f7ff fec2 	bl	8010ab4 <move_window>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d118      	bne.n	8010d68 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d44:	4413      	add	r3, r2
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7ff fbec 	bl	8010524 <ld_dword>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010d52:	617b      	str	r3, [r7, #20]
			break;
 8010d54:	e009      	b.n	8010d6a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010d56:	2301      	movs	r3, #1
 8010d58:	617b      	str	r3, [r7, #20]
 8010d5a:	e006      	b.n	8010d6a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d5c:	bf00      	nop
 8010d5e:	e004      	b.n	8010d6a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010d60:	bf00      	nop
 8010d62:	e002      	b.n	8010d6a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d64:	bf00      	nop
 8010d66:	e000      	b.n	8010d6a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d68:	bf00      	nop
		}
	}

	return val;
 8010d6a:	697b      	ldr	r3, [r7, #20]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3718      	adds	r7, #24
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010d74:	b590      	push	{r4, r7, lr}
 8010d76:	b089      	sub	sp, #36	; 0x24
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010d80:	2302      	movs	r3, #2
 8010d82:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	2b01      	cmp	r3, #1
 8010d88:	f240 80d6 	bls.w	8010f38 <put_fat+0x1c4>
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	68ba      	ldr	r2, [r7, #8]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	f080 80d0 	bcs.w	8010f38 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b02      	cmp	r3, #2
 8010d9e:	d073      	beq.n	8010e88 <put_fat+0x114>
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	f000 8091 	beq.w	8010ec8 <put_fat+0x154>
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	f040 80c6 	bne.w	8010f38 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	61bb      	str	r3, [r7, #24]
 8010db0:	69bb      	ldr	r3, [r7, #24]
 8010db2:	085b      	lsrs	r3, r3, #1
 8010db4:	69ba      	ldr	r2, [r7, #24]
 8010db6:	4413      	add	r3, r2
 8010db8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	0a5b      	lsrs	r3, r3, #9
 8010dc2:	4413      	add	r3, r2
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f7ff fe74 	bl	8010ab4 <move_window>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010dd0:	7ffb      	ldrb	r3, [r7, #31]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	f040 80a9 	bne.w	8010f2a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	1c59      	adds	r1, r3, #1
 8010de2:	61b9      	str	r1, [r7, #24]
 8010de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010de8:	4413      	add	r3, r2
 8010dea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	f003 0301 	and.w	r3, r3, #1
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d00d      	beq.n	8010e12 <put_fat+0x9e>
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	b25b      	sxtb	r3, r3
 8010dfc:	f003 030f 	and.w	r3, r3, #15
 8010e00:	b25a      	sxtb	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	011b      	lsls	r3, r3, #4
 8010e08:	b25b      	sxtb	r3, r3
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	b25b      	sxtb	r3, r3
 8010e0e:	b2db      	uxtb	r3, r3
 8010e10:	e001      	b.n	8010e16 <put_fat+0xa2>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	b2db      	uxtb	r3, r3
 8010e16:	697a      	ldr	r2, [r7, #20]
 8010e18:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e24:	69bb      	ldr	r3, [r7, #24]
 8010e26:	0a5b      	lsrs	r3, r3, #9
 8010e28:	4413      	add	r3, r2
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f7ff fe41 	bl	8010ab4 <move_window>
 8010e32:	4603      	mov	r3, r0
 8010e34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e36:	7ffb      	ldrb	r3, [r7, #31]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d178      	bne.n	8010f2e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010e48:	4413      	add	r3, r2
 8010e4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	f003 0301 	and.w	r3, r3, #1
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d003      	beq.n	8010e5e <put_fat+0xea>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	091b      	lsrs	r3, r3, #4
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	e00e      	b.n	8010e7c <put_fat+0x108>
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	b25b      	sxtb	r3, r3
 8010e64:	f023 030f 	bic.w	r3, r3, #15
 8010e68:	b25a      	sxtb	r2, r3
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	0a1b      	lsrs	r3, r3, #8
 8010e6e:	b25b      	sxtb	r3, r3
 8010e70:	f003 030f 	and.w	r3, r3, #15
 8010e74:	b25b      	sxtb	r3, r3
 8010e76:	4313      	orrs	r3, r2
 8010e78:	b25b      	sxtb	r3, r3
 8010e7a:	b2db      	uxtb	r3, r3
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2201      	movs	r2, #1
 8010e84:	70da      	strb	r2, [r3, #3]
			break;
 8010e86:	e057      	b.n	8010f38 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	0a1b      	lsrs	r3, r3, #8
 8010e90:	4413      	add	r3, r2
 8010e92:	4619      	mov	r1, r3
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f7ff fe0d 	bl	8010ab4 <move_window>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e9e:	7ffb      	ldrb	r3, [r7, #31]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d146      	bne.n	8010f32 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	005b      	lsls	r3, r3, #1
 8010eae:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010eb2:	4413      	add	r3, r2
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	b292      	uxth	r2, r2
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7ff fb55 	bl	801056a <st_word>
			fs->wflag = 1;
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	70da      	strb	r2, [r3, #3]
			break;
 8010ec6:	e037      	b.n	8010f38 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	09db      	lsrs	r3, r3, #7
 8010ed0:	4413      	add	r3, r2
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f7ff fded 	bl	8010ab4 <move_window>
 8010eda:	4603      	mov	r3, r0
 8010edc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010ede:	7ffb      	ldrb	r3, [r7, #31]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d128      	bne.n	8010f36 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010ef0:	68bb      	ldr	r3, [r7, #8]
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010ef8:	4413      	add	r3, r2
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7ff fb12 	bl	8010524 <ld_dword>
 8010f00:	4603      	mov	r3, r0
 8010f02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010f06:	4323      	orrs	r3, r4
 8010f08:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010f18:	4413      	add	r3, r2
 8010f1a:	6879      	ldr	r1, [r7, #4]
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f7ff fb3f 	bl	80105a0 <st_dword>
			fs->wflag = 1;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2201      	movs	r2, #1
 8010f26:	70da      	strb	r2, [r3, #3]
			break;
 8010f28:	e006      	b.n	8010f38 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010f2a:	bf00      	nop
 8010f2c:	e004      	b.n	8010f38 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010f2e:	bf00      	nop
 8010f30:	e002      	b.n	8010f38 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010f32:	bf00      	nop
 8010f34:	e000      	b.n	8010f38 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010f36:	bf00      	nop
		}
	}
	return res;
 8010f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3724      	adds	r7, #36	; 0x24
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd90      	pop	{r4, r7, pc}

08010f42 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010f42:	b580      	push	{r7, lr}
 8010f44:	b088      	sub	sp, #32
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	60f8      	str	r0, [r7, #12]
 8010f4a:	60b9      	str	r1, [r7, #8]
 8010f4c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010f58:	68bb      	ldr	r3, [r7, #8]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d904      	bls.n	8010f68 <remove_chain+0x26>
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	699b      	ldr	r3, [r3, #24]
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d301      	bcc.n	8010f6c <remove_chain+0x2a>
 8010f68:	2302      	movs	r3, #2
 8010f6a:	e04b      	b.n	8011004 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d00c      	beq.n	8010f8c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010f72:	f04f 32ff 	mov.w	r2, #4294967295
 8010f76:	6879      	ldr	r1, [r7, #4]
 8010f78:	69b8      	ldr	r0, [r7, #24]
 8010f7a:	f7ff fefb 	bl	8010d74 <put_fat>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010f82:	7ffb      	ldrb	r3, [r7, #31]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d001      	beq.n	8010f8c <remove_chain+0x4a>
 8010f88:	7ffb      	ldrb	r3, [r7, #31]
 8010f8a:	e03b      	b.n	8011004 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f7ff fe4b 	bl	8010c2a <get_fat>
 8010f94:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d031      	beq.n	8011000 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d101      	bne.n	8010fa6 <remove_chain+0x64>
 8010fa2:	2302      	movs	r3, #2
 8010fa4:	e02e      	b.n	8011004 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fac:	d101      	bne.n	8010fb2 <remove_chain+0x70>
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e028      	b.n	8011004 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	68b9      	ldr	r1, [r7, #8]
 8010fb6:	69b8      	ldr	r0, [r7, #24]
 8010fb8:	f7ff fedc 	bl	8010d74 <put_fat>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010fc0:	7ffb      	ldrb	r3, [r7, #31]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d001      	beq.n	8010fca <remove_chain+0x88>
 8010fc6:	7ffb      	ldrb	r3, [r7, #31]
 8010fc8:	e01c      	b.n	8011004 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	695a      	ldr	r2, [r3, #20]
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	699b      	ldr	r3, [r3, #24]
 8010fd2:	3b02      	subs	r3, #2
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d20b      	bcs.n	8010ff0 <remove_chain+0xae>
			fs->free_clst++;
 8010fd8:	69bb      	ldr	r3, [r7, #24]
 8010fda:	695b      	ldr	r3, [r3, #20]
 8010fdc:	1c5a      	adds	r2, r3, #1
 8010fde:	69bb      	ldr	r3, [r7, #24]
 8010fe0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	791b      	ldrb	r3, [r3, #4]
 8010fe6:	f043 0301 	orr.w	r3, r3, #1
 8010fea:	b2da      	uxtb	r2, r3
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010ff0:	697b      	ldr	r3, [r7, #20]
 8010ff2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	699b      	ldr	r3, [r3, #24]
 8010ff8:	68ba      	ldr	r2, [r7, #8]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d3c6      	bcc.n	8010f8c <remove_chain+0x4a>
 8010ffe:	e000      	b.n	8011002 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011000:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011002:	2300      	movs	r3, #0
}
 8011004:	4618      	mov	r0, r3
 8011006:	3720      	adds	r7, #32
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d10d      	bne.n	801103e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	691b      	ldr	r3, [r3, #16]
 8011026:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d004      	beq.n	8011038 <create_chain+0x2c>
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	699b      	ldr	r3, [r3, #24]
 8011032:	69ba      	ldr	r2, [r7, #24]
 8011034:	429a      	cmp	r2, r3
 8011036:	d31b      	bcc.n	8011070 <create_chain+0x64>
 8011038:	2301      	movs	r3, #1
 801103a:	61bb      	str	r3, [r7, #24]
 801103c:	e018      	b.n	8011070 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801103e:	6839      	ldr	r1, [r7, #0]
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7ff fdf2 	bl	8010c2a <get_fat>
 8011046:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2b01      	cmp	r3, #1
 801104c:	d801      	bhi.n	8011052 <create_chain+0x46>
 801104e:	2301      	movs	r3, #1
 8011050:	e070      	b.n	8011134 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d101      	bne.n	801105e <create_chain+0x52>
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	e06a      	b.n	8011134 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801105e:	693b      	ldr	r3, [r7, #16]
 8011060:	699b      	ldr	r3, [r3, #24]
 8011062:	68fa      	ldr	r2, [r7, #12]
 8011064:	429a      	cmp	r2, r3
 8011066:	d201      	bcs.n	801106c <create_chain+0x60>
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	e063      	b.n	8011134 <create_chain+0x128>
		scl = clst;
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011070:	69bb      	ldr	r3, [r7, #24]
 8011072:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011074:	69fb      	ldr	r3, [r7, #28]
 8011076:	3301      	adds	r3, #1
 8011078:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	699b      	ldr	r3, [r3, #24]
 801107e:	69fa      	ldr	r2, [r7, #28]
 8011080:	429a      	cmp	r2, r3
 8011082:	d307      	bcc.n	8011094 <create_chain+0x88>
				ncl = 2;
 8011084:	2302      	movs	r3, #2
 8011086:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011088:	69fa      	ldr	r2, [r7, #28]
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	429a      	cmp	r2, r3
 801108e:	d901      	bls.n	8011094 <create_chain+0x88>
 8011090:	2300      	movs	r3, #0
 8011092:	e04f      	b.n	8011134 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011094:	69f9      	ldr	r1, [r7, #28]
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f7ff fdc7 	bl	8010c2a <get_fat>
 801109c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00e      	beq.n	80110c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2b01      	cmp	r3, #1
 80110a8:	d003      	beq.n	80110b2 <create_chain+0xa6>
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b0:	d101      	bne.n	80110b6 <create_chain+0xaa>
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	e03e      	b.n	8011134 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80110b6:	69fa      	ldr	r2, [r7, #28]
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d1da      	bne.n	8011074 <create_chain+0x68>
 80110be:	2300      	movs	r3, #0
 80110c0:	e038      	b.n	8011134 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80110c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80110c4:	f04f 32ff 	mov.w	r2, #4294967295
 80110c8:	69f9      	ldr	r1, [r7, #28]
 80110ca:	6938      	ldr	r0, [r7, #16]
 80110cc:	f7ff fe52 	bl	8010d74 <put_fat>
 80110d0:	4603      	mov	r3, r0
 80110d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80110d4:	7dfb      	ldrb	r3, [r7, #23]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d109      	bne.n	80110ee <create_chain+0xe2>
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d006      	beq.n	80110ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80110e0:	69fa      	ldr	r2, [r7, #28]
 80110e2:	6839      	ldr	r1, [r7, #0]
 80110e4:	6938      	ldr	r0, [r7, #16]
 80110e6:	f7ff fe45 	bl	8010d74 <put_fat>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d116      	bne.n	8011122 <create_chain+0x116>
		fs->last_clst = ncl;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	69fa      	ldr	r2, [r7, #28]
 80110f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	695a      	ldr	r2, [r3, #20]
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	699b      	ldr	r3, [r3, #24]
 8011102:	3b02      	subs	r3, #2
 8011104:	429a      	cmp	r2, r3
 8011106:	d804      	bhi.n	8011112 <create_chain+0x106>
 8011108:	693b      	ldr	r3, [r7, #16]
 801110a:	695b      	ldr	r3, [r3, #20]
 801110c:	1e5a      	subs	r2, r3, #1
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	791b      	ldrb	r3, [r3, #4]
 8011116:	f043 0301 	orr.w	r3, r3, #1
 801111a:	b2da      	uxtb	r2, r3
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	711a      	strb	r2, [r3, #4]
 8011120:	e007      	b.n	8011132 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011122:	7dfb      	ldrb	r3, [r7, #23]
 8011124:	2b01      	cmp	r3, #1
 8011126:	d102      	bne.n	801112e <create_chain+0x122>
 8011128:	f04f 33ff 	mov.w	r3, #4294967295
 801112c:	e000      	b.n	8011130 <create_chain+0x124>
 801112e:	2301      	movs	r3, #1
 8011130:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011132:	69fb      	ldr	r3, [r7, #28]
}
 8011134:	4618      	mov	r0, r3
 8011136:	3720      	adds	r7, #32
 8011138:	46bd      	mov	sp, r7
 801113a:	bd80      	pop	{r7, pc}

0801113c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801113c:	b480      	push	{r7}
 801113e:	b087      	sub	sp, #28
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
 8011144:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011150:	3304      	adds	r3, #4
 8011152:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	0a5b      	lsrs	r3, r3, #9
 8011158:	68fa      	ldr	r2, [r7, #12]
 801115a:	8952      	ldrh	r2, [r2, #10]
 801115c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011160:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	1d1a      	adds	r2, r3, #4
 8011166:	613a      	str	r2, [r7, #16]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <clmt_clust+0x3a>
 8011172:	2300      	movs	r3, #0
 8011174:	e010      	b.n	8011198 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	429a      	cmp	r2, r3
 801117c:	d307      	bcc.n	801118e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	1ad3      	subs	r3, r2, r3
 8011184:	617b      	str	r3, [r7, #20]
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	3304      	adds	r3, #4
 801118a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801118c:	e7e9      	b.n	8011162 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801118e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	4413      	add	r3, r2
}
 8011198:	4618      	mov	r0, r3
 801119a:	371c      	adds	r7, #28
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80111ba:	d204      	bcs.n	80111c6 <dir_sdi+0x22>
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	f003 031f 	and.w	r3, r3, #31
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <dir_sdi+0x26>
		return FR_INT_ERR;
 80111c6:	2302      	movs	r3, #2
 80111c8:	e063      	b.n	8011292 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	683a      	ldr	r2, [r7, #0]
 80111ce:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d106      	bne.n	80111ea <dir_sdi+0x46>
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	2b02      	cmp	r3, #2
 80111e2:	d902      	bls.n	80111ea <dir_sdi+0x46>
		clst = fs->dirbase;
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111e8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10c      	bne.n	801120a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	095b      	lsrs	r3, r3, #5
 80111f4:	693a      	ldr	r2, [r7, #16]
 80111f6:	8912      	ldrh	r2, [r2, #8]
 80111f8:	4293      	cmp	r3, r2
 80111fa:	d301      	bcc.n	8011200 <dir_sdi+0x5c>
 80111fc:	2302      	movs	r3, #2
 80111fe:	e048      	b.n	8011292 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	61da      	str	r2, [r3, #28]
 8011208:	e029      	b.n	801125e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	895b      	ldrh	r3, [r3, #10]
 801120e:	025b      	lsls	r3, r3, #9
 8011210:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011212:	e019      	b.n	8011248 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6979      	ldr	r1, [r7, #20]
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff fd06 	bl	8010c2a <get_fat>
 801121e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011226:	d101      	bne.n	801122c <dir_sdi+0x88>
 8011228:	2301      	movs	r3, #1
 801122a:	e032      	b.n	8011292 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d904      	bls.n	801123c <dir_sdi+0x98>
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	699b      	ldr	r3, [r3, #24]
 8011236:	697a      	ldr	r2, [r7, #20]
 8011238:	429a      	cmp	r2, r3
 801123a:	d301      	bcc.n	8011240 <dir_sdi+0x9c>
 801123c:	2302      	movs	r3, #2
 801123e:	e028      	b.n	8011292 <dir_sdi+0xee>
			ofs -= csz;
 8011240:	683a      	ldr	r2, [r7, #0]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	1ad3      	subs	r3, r2, r3
 8011246:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011248:	683a      	ldr	r2, [r7, #0]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	429a      	cmp	r2, r3
 801124e:	d2e1      	bcs.n	8011214 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011250:	6979      	ldr	r1, [r7, #20]
 8011252:	6938      	ldr	r0, [r7, #16]
 8011254:	f7ff fcca 	bl	8010bec <clust2sect>
 8011258:	4602      	mov	r2, r0
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	697a      	ldr	r2, [r7, #20]
 8011262:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	69db      	ldr	r3, [r3, #28]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d101      	bne.n	8011270 <dir_sdi+0xcc>
 801126c:	2302      	movs	r3, #2
 801126e:	e010      	b.n	8011292 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	69da      	ldr	r2, [r3, #28]
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	0a5b      	lsrs	r3, r3, #9
 8011278:	441a      	add	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801128a:	441a      	add	r2, r3
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011290:	2300      	movs	r3, #0
}
 8011292:	4618      	mov	r0, r3
 8011294:	3718      	adds	r7, #24
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b086      	sub	sp, #24
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	695b      	ldr	r3, [r3, #20]
 80112ae:	3320      	adds	r3, #32
 80112b0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	69db      	ldr	r3, [r3, #28]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d003      	beq.n	80112c2 <dir_next+0x28>
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80112c0:	d301      	bcc.n	80112c6 <dir_next+0x2c>
 80112c2:	2304      	movs	r3, #4
 80112c4:	e0aa      	b.n	801141c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f040 8098 	bne.w	8011402 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	69db      	ldr	r3, [r3, #28]
 80112d6:	1c5a      	adds	r2, r3, #1
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	699b      	ldr	r3, [r3, #24]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d10b      	bne.n	80112fc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	095b      	lsrs	r3, r3, #5
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	8912      	ldrh	r2, [r2, #8]
 80112ec:	4293      	cmp	r3, r2
 80112ee:	f0c0 8088 	bcc.w	8011402 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2200      	movs	r2, #0
 80112f6:	61da      	str	r2, [r3, #28]
 80112f8:	2304      	movs	r3, #4
 80112fa:	e08f      	b.n	801141c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	0a5b      	lsrs	r3, r3, #9
 8011300:	68fa      	ldr	r2, [r7, #12]
 8011302:	8952      	ldrh	r2, [r2, #10]
 8011304:	3a01      	subs	r2, #1
 8011306:	4013      	ands	r3, r2
 8011308:	2b00      	cmp	r3, #0
 801130a:	d17a      	bne.n	8011402 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	699b      	ldr	r3, [r3, #24]
 8011312:	4619      	mov	r1, r3
 8011314:	4610      	mov	r0, r2
 8011316:	f7ff fc88 	bl	8010c2a <get_fat>
 801131a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	2b01      	cmp	r3, #1
 8011320:	d801      	bhi.n	8011326 <dir_next+0x8c>
 8011322:	2302      	movs	r3, #2
 8011324:	e07a      	b.n	801141c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	f1b3 3fff 	cmp.w	r3, #4294967295
 801132c:	d101      	bne.n	8011332 <dir_next+0x98>
 801132e:	2301      	movs	r3, #1
 8011330:	e074      	b.n	801141c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	699b      	ldr	r3, [r3, #24]
 8011336:	697a      	ldr	r2, [r7, #20]
 8011338:	429a      	cmp	r2, r3
 801133a:	d358      	bcc.n	80113ee <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d104      	bne.n	801134c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	2200      	movs	r2, #0
 8011346:	61da      	str	r2, [r3, #28]
 8011348:	2304      	movs	r3, #4
 801134a:	e067      	b.n	801141c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	699b      	ldr	r3, [r3, #24]
 8011352:	4619      	mov	r1, r3
 8011354:	4610      	mov	r0, r2
 8011356:	f7ff fe59 	bl	801100c <create_chain>
 801135a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801135c:	697b      	ldr	r3, [r7, #20]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d101      	bne.n	8011366 <dir_next+0xcc>
 8011362:	2307      	movs	r3, #7
 8011364:	e05a      	b.n	801141c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011366:	697b      	ldr	r3, [r7, #20]
 8011368:	2b01      	cmp	r3, #1
 801136a:	d101      	bne.n	8011370 <dir_next+0xd6>
 801136c:	2302      	movs	r3, #2
 801136e:	e055      	b.n	801141c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011376:	d101      	bne.n	801137c <dir_next+0xe2>
 8011378:	2301      	movs	r3, #1
 801137a:	e04f      	b.n	801141c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801137c:	68f8      	ldr	r0, [r7, #12]
 801137e:	f7ff fb55 	bl	8010a2c <sync_window>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <dir_next+0xf2>
 8011388:	2301      	movs	r3, #1
 801138a:	e047      	b.n	801141c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	3334      	adds	r3, #52	; 0x34
 8011390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011394:	2100      	movs	r1, #0
 8011396:	4618      	mov	r0, r3
 8011398:	f7ff f94f 	bl	801063a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801139c:	2300      	movs	r3, #0
 801139e:	613b      	str	r3, [r7, #16]
 80113a0:	6979      	ldr	r1, [r7, #20]
 80113a2:	68f8      	ldr	r0, [r7, #12]
 80113a4:	f7ff fc22 	bl	8010bec <clust2sect>
 80113a8:	4602      	mov	r2, r0
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	631a      	str	r2, [r3, #48]	; 0x30
 80113ae:	e012      	b.n	80113d6 <dir_next+0x13c>
						fs->wflag = 1;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2201      	movs	r2, #1
 80113b4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80113b6:	68f8      	ldr	r0, [r7, #12]
 80113b8:	f7ff fb38 	bl	8010a2c <sync_window>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <dir_next+0x12c>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e02a      	b.n	801141c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	3301      	adds	r3, #1
 80113ca:	613b      	str	r3, [r7, #16]
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113d0:	1c5a      	adds	r2, r3, #1
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	631a      	str	r2, [r3, #48]	; 0x30
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	895b      	ldrh	r3, [r3, #10]
 80113da:	461a      	mov	r2, r3
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	4293      	cmp	r3, r2
 80113e0:	d3e6      	bcc.n	80113b0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	1ad2      	subs	r2, r2, r3
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	697a      	ldr	r2, [r7, #20]
 80113f2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80113f4:	6979      	ldr	r1, [r7, #20]
 80113f6:	68f8      	ldr	r0, [r7, #12]
 80113f8:	f7ff fbf8 	bl	8010bec <clust2sect>
 80113fc:	4602      	mov	r2, r0
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011414:	441a      	add	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801141a:	2300      	movs	r3, #0
}
 801141c:	4618      	mov	r0, r3
 801141e:	3718      	adds	r7, #24
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b086      	sub	sp, #24
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011434:	2100      	movs	r1, #0
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f7ff feb4 	bl	80111a4 <dir_sdi>
 801143c:	4603      	mov	r3, r0
 801143e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011440:	7dfb      	ldrb	r3, [r7, #23]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d12b      	bne.n	801149e <dir_alloc+0x7a>
		n = 0;
 8011446:	2300      	movs	r3, #0
 8011448:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	69db      	ldr	r3, [r3, #28]
 801144e:	4619      	mov	r1, r3
 8011450:	68f8      	ldr	r0, [r7, #12]
 8011452:	f7ff fb2f 	bl	8010ab4 <move_window>
 8011456:	4603      	mov	r3, r0
 8011458:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801145a:	7dfb      	ldrb	r3, [r7, #23]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d11d      	bne.n	801149c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a1b      	ldr	r3, [r3, #32]
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	2be5      	cmp	r3, #229	; 0xe5
 8011468:	d004      	beq.n	8011474 <dir_alloc+0x50>
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6a1b      	ldr	r3, [r3, #32]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d107      	bne.n	8011484 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	3301      	adds	r3, #1
 8011478:	613b      	str	r3, [r7, #16]
 801147a:	693a      	ldr	r2, [r7, #16]
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	429a      	cmp	r2, r3
 8011480:	d102      	bne.n	8011488 <dir_alloc+0x64>
 8011482:	e00c      	b.n	801149e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011484:	2300      	movs	r3, #0
 8011486:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011488:	2101      	movs	r1, #1
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f7ff ff05 	bl	801129a <dir_next>
 8011490:	4603      	mov	r3, r0
 8011492:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011494:	7dfb      	ldrb	r3, [r7, #23]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d0d7      	beq.n	801144a <dir_alloc+0x26>
 801149a:	e000      	b.n	801149e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801149c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801149e:	7dfb      	ldrb	r3, [r7, #23]
 80114a0:	2b04      	cmp	r3, #4
 80114a2:	d101      	bne.n	80114a8 <dir_alloc+0x84>
 80114a4:	2307      	movs	r3, #7
 80114a6:	75fb      	strb	r3, [r7, #23]
	return res;
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b084      	sub	sp, #16
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	331a      	adds	r3, #26
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7ff f817 	bl	80104f4 <ld_word>
 80114c6:	4603      	mov	r3, r0
 80114c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	2b03      	cmp	r3, #3
 80114d0:	d109      	bne.n	80114e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	3314      	adds	r3, #20
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7ff f80c 	bl	80104f4 <ld_word>
 80114dc:	4603      	mov	r3, r0
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	68fa      	ldr	r2, [r7, #12]
 80114e2:	4313      	orrs	r3, r2
 80114e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80114e6:	68fb      	ldr	r3, [r7, #12]
}
 80114e8:	4618      	mov	r0, r3
 80114ea:	3710      	adds	r7, #16
 80114ec:	46bd      	mov	sp, r7
 80114ee:	bd80      	pop	{r7, pc}

080114f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	60b9      	str	r1, [r7, #8]
 80114fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	331a      	adds	r3, #26
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	b292      	uxth	r2, r2
 8011504:	4611      	mov	r1, r2
 8011506:	4618      	mov	r0, r3
 8011508:	f7ff f82f 	bl	801056a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	2b03      	cmp	r3, #3
 8011512:	d109      	bne.n	8011528 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	f103 0214 	add.w	r2, r3, #20
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	0c1b      	lsrs	r3, r3, #16
 801151e:	b29b      	uxth	r3, r3
 8011520:	4619      	mov	r1, r3
 8011522:	4610      	mov	r0, r2
 8011524:	f7ff f821 	bl	801056a <st_word>
	}
}
 8011528:	bf00      	nop
 801152a:	3710      	adds	r7, #16
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801153a:	2304      	movs	r3, #4
 801153c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011544:	e03c      	b.n	80115c0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	69db      	ldr	r3, [r3, #28]
 801154a:	4619      	mov	r1, r3
 801154c:	6938      	ldr	r0, [r7, #16]
 801154e:	f7ff fab1 	bl	8010ab4 <move_window>
 8011552:	4603      	mov	r3, r0
 8011554:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011556:	7dfb      	ldrb	r3, [r7, #23]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d136      	bne.n	80115ca <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a1b      	ldr	r3, [r3, #32]
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011564:	7bfb      	ldrb	r3, [r7, #15]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d102      	bne.n	8011570 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801156a:	2304      	movs	r3, #4
 801156c:	75fb      	strb	r3, [r7, #23]
 801156e:	e031      	b.n	80115d4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	6a1b      	ldr	r3, [r3, #32]
 8011574:	330b      	adds	r3, #11
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801157c:	73bb      	strb	r3, [r7, #14]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	7bba      	ldrb	r2, [r7, #14]
 8011582:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011584:	7bfb      	ldrb	r3, [r7, #15]
 8011586:	2be5      	cmp	r3, #229	; 0xe5
 8011588:	d011      	beq.n	80115ae <dir_read+0x7e>
 801158a:	7bfb      	ldrb	r3, [r7, #15]
 801158c:	2b2e      	cmp	r3, #46	; 0x2e
 801158e:	d00e      	beq.n	80115ae <dir_read+0x7e>
 8011590:	7bbb      	ldrb	r3, [r7, #14]
 8011592:	2b0f      	cmp	r3, #15
 8011594:	d00b      	beq.n	80115ae <dir_read+0x7e>
 8011596:	7bbb      	ldrb	r3, [r7, #14]
 8011598:	f023 0320 	bic.w	r3, r3, #32
 801159c:	2b08      	cmp	r3, #8
 801159e:	bf0c      	ite	eq
 80115a0:	2301      	moveq	r3, #1
 80115a2:	2300      	movne	r3, #0
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	461a      	mov	r2, r3
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	4293      	cmp	r3, r2
 80115ac:	d00f      	beq.n	80115ce <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80115ae:	2100      	movs	r1, #0
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7ff fe72 	bl	801129a <dir_next>
 80115b6:	4603      	mov	r3, r0
 80115b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80115ba:	7dfb      	ldrb	r3, [r7, #23]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d108      	bne.n	80115d2 <dir_read+0xa2>
	while (dp->sect) {
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	69db      	ldr	r3, [r3, #28]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d1be      	bne.n	8011546 <dir_read+0x16>
 80115c8:	e004      	b.n	80115d4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80115ca:	bf00      	nop
 80115cc:	e002      	b.n	80115d4 <dir_read+0xa4>
				break;
 80115ce:	bf00      	nop
 80115d0:	e000      	b.n	80115d4 <dir_read+0xa4>
		if (res != FR_OK) break;
 80115d2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80115d4:	7dfb      	ldrb	r3, [r7, #23]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d002      	beq.n	80115e0 <dir_read+0xb0>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	2200      	movs	r2, #0
 80115de:	61da      	str	r2, [r3, #28]
	return res;
 80115e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3718      	adds	r7, #24
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80115ea:	b580      	push	{r7, lr}
 80115ec:	b086      	sub	sp, #24
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80115f8:	2100      	movs	r1, #0
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f7ff fdd2 	bl	80111a4 <dir_sdi>
 8011600:	4603      	mov	r3, r0
 8011602:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011604:	7dfb      	ldrb	r3, [r7, #23]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d001      	beq.n	801160e <dir_find+0x24>
 801160a:	7dfb      	ldrb	r3, [r7, #23]
 801160c:	e03e      	b.n	801168c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	69db      	ldr	r3, [r3, #28]
 8011612:	4619      	mov	r1, r3
 8011614:	6938      	ldr	r0, [r7, #16]
 8011616:	f7ff fa4d 	bl	8010ab4 <move_window>
 801161a:	4603      	mov	r3, r0
 801161c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801161e:	7dfb      	ldrb	r3, [r7, #23]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d12f      	bne.n	8011684 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6a1b      	ldr	r3, [r3, #32]
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801162c:	7bfb      	ldrb	r3, [r7, #15]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d102      	bne.n	8011638 <dir_find+0x4e>
 8011632:	2304      	movs	r3, #4
 8011634:	75fb      	strb	r3, [r7, #23]
 8011636:	e028      	b.n	801168a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6a1b      	ldr	r3, [r3, #32]
 801163c:	330b      	adds	r3, #11
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011644:	b2da      	uxtb	r2, r3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6a1b      	ldr	r3, [r3, #32]
 801164e:	330b      	adds	r3, #11
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	f003 0308 	and.w	r3, r3, #8
 8011656:	2b00      	cmp	r3, #0
 8011658:	d10a      	bne.n	8011670 <dir_find+0x86>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6a18      	ldr	r0, [r3, #32]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	3324      	adds	r3, #36	; 0x24
 8011662:	220b      	movs	r2, #11
 8011664:	4619      	mov	r1, r3
 8011666:	f7ff f802 	bl	801066e <mem_cmp>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d00b      	beq.n	8011688 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011670:	2100      	movs	r1, #0
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7ff fe11 	bl	801129a <dir_next>
 8011678:	4603      	mov	r3, r0
 801167a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801167c:	7dfb      	ldrb	r3, [r7, #23]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d0c5      	beq.n	801160e <dir_find+0x24>
 8011682:	e002      	b.n	801168a <dir_find+0xa0>
		if (res != FR_OK) break;
 8011684:	bf00      	nop
 8011686:	e000      	b.n	801168a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011688:	bf00      	nop

	return res;
 801168a:	7dfb      	ldrb	r3, [r7, #23]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3718      	adds	r7, #24
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b084      	sub	sp, #16
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80116a2:	2101      	movs	r1, #1
 80116a4:	6878      	ldr	r0, [r7, #4]
 80116a6:	f7ff febd 	bl	8011424 <dir_alloc>
 80116aa:	4603      	mov	r3, r0
 80116ac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d11c      	bne.n	80116ee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	69db      	ldr	r3, [r3, #28]
 80116b8:	4619      	mov	r1, r3
 80116ba:	68b8      	ldr	r0, [r7, #8]
 80116bc:	f7ff f9fa 	bl	8010ab4 <move_window>
 80116c0:	4603      	mov	r3, r0
 80116c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d111      	bne.n	80116ee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6a1b      	ldr	r3, [r3, #32]
 80116ce:	2220      	movs	r2, #32
 80116d0:	2100      	movs	r1, #0
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fe ffb1 	bl	801063a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	6a18      	ldr	r0, [r3, #32]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	3324      	adds	r3, #36	; 0x24
 80116e0:	220b      	movs	r2, #11
 80116e2:	4619      	mov	r1, r3
 80116e4:	f7fe ff88 	bl	80105f8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	2201      	movs	r2, #1
 80116ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80116ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3710      	adds	r7, #16
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	2200      	movs	r2, #0
 8011706:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	69db      	ldr	r3, [r3, #28]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d04e      	beq.n	80117ae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011710:	2300      	movs	r3, #0
 8011712:	613b      	str	r3, [r7, #16]
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011718:	e021      	b.n	801175e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6a1a      	ldr	r2, [r3, #32]
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	1c59      	adds	r1, r3, #1
 8011722:	6179      	str	r1, [r7, #20]
 8011724:	4413      	add	r3, r2
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801172a:	7bfb      	ldrb	r3, [r7, #15]
 801172c:	2b20      	cmp	r3, #32
 801172e:	d100      	bne.n	8011732 <get_fileinfo+0x3a>
 8011730:	e015      	b.n	801175e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011732:	7bfb      	ldrb	r3, [r7, #15]
 8011734:	2b05      	cmp	r3, #5
 8011736:	d101      	bne.n	801173c <get_fileinfo+0x44>
 8011738:	23e5      	movs	r3, #229	; 0xe5
 801173a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	2b09      	cmp	r3, #9
 8011740:	d106      	bne.n	8011750 <get_fileinfo+0x58>
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	613a      	str	r2, [r7, #16]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	4413      	add	r3, r2
 801174c:	222e      	movs	r2, #46	; 0x2e
 801174e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8011750:	693b      	ldr	r3, [r7, #16]
 8011752:	1c5a      	adds	r2, r3, #1
 8011754:	613a      	str	r2, [r7, #16]
 8011756:	683a      	ldr	r2, [r7, #0]
 8011758:	4413      	add	r3, r2
 801175a:	7bfa      	ldrb	r2, [r7, #15]
 801175c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	2b0a      	cmp	r3, #10
 8011762:	d9da      	bls.n	801171a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8011764:	683a      	ldr	r2, [r7, #0]
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	4413      	add	r3, r2
 801176a:	3309      	adds	r3, #9
 801176c:	2200      	movs	r2, #0
 801176e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6a1b      	ldr	r3, [r3, #32]
 8011774:	7ada      	ldrb	r2, [r3, #11]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6a1b      	ldr	r3, [r3, #32]
 801177e:	331c      	adds	r3, #28
 8011780:	4618      	mov	r0, r3
 8011782:	f7fe fecf 	bl	8010524 <ld_dword>
 8011786:	4602      	mov	r2, r0
 8011788:	683b      	ldr	r3, [r7, #0]
 801178a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a1b      	ldr	r3, [r3, #32]
 8011790:	3316      	adds	r3, #22
 8011792:	4618      	mov	r0, r3
 8011794:	f7fe fec6 	bl	8010524 <ld_dword>
 8011798:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	b29a      	uxth	r2, r3
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	80da      	strh	r2, [r3, #6]
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	0c1b      	lsrs	r3, r3, #16
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	809a      	strh	r2, [r3, #4]
 80117ac:	e000      	b.n	80117b0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80117ae:	bf00      	nop
}
 80117b0:	3718      	adds	r7, #24
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
	...

080117b8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	1c59      	adds	r1, r3, #1
 80117c6:	687a      	ldr	r2, [r7, #4]
 80117c8:	6011      	str	r1, [r2, #0]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80117ce:	89fb      	ldrh	r3, [r7, #14]
 80117d0:	2b60      	cmp	r3, #96	; 0x60
 80117d2:	d905      	bls.n	80117e0 <get_achar+0x28>
 80117d4:	89fb      	ldrh	r3, [r7, #14]
 80117d6:	2b7a      	cmp	r3, #122	; 0x7a
 80117d8:	d802      	bhi.n	80117e0 <get_achar+0x28>
 80117da:	89fb      	ldrh	r3, [r7, #14]
 80117dc:	3b20      	subs	r3, #32
 80117de:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80117e0:	89fb      	ldrh	r3, [r7, #14]
 80117e2:	2b7f      	cmp	r3, #127	; 0x7f
 80117e4:	d904      	bls.n	80117f0 <get_achar+0x38>
 80117e6:	89fb      	ldrh	r3, [r7, #14]
 80117e8:	3b80      	subs	r3, #128	; 0x80
 80117ea:	4a05      	ldr	r2, [pc, #20]	; (8011800 <get_achar+0x48>)
 80117ec:	5cd3      	ldrb	r3, [r2, r3]
 80117ee:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80117f0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80117f2:	4618      	mov	r0, r3
 80117f4:	3714      	adds	r7, #20
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	0801ad98 	.word	0x0801ad98

08011804 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b08a      	sub	sp, #40	; 0x28
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	607a      	str	r2, [r7, #4]
 8011810:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8011812:	e009      	b.n	8011828 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8011814:	f107 0308 	add.w	r3, r7, #8
 8011818:	4618      	mov	r0, r3
 801181a:	f7ff ffcd 	bl	80117b8 <get_achar>
 801181e:	4603      	mov	r3, r0
 8011820:	2b00      	cmp	r3, #0
 8011822:	d101      	bne.n	8011828 <pattern_matching+0x24>
 8011824:	2300      	movs	r3, #0
 8011826:	e064      	b.n	80118f2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	1e5a      	subs	r2, r3, #1
 801182c:	607a      	str	r2, [r7, #4]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d1f0      	bne.n	8011814 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d104      	bne.n	8011844 <pattern_matching+0x40>
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <pattern_matching+0x40>
 8011840:	2301      	movs	r3, #1
 8011842:	e056      	b.n	80118f2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	781b      	ldrb	r3, [r3, #0]
 8011850:	2b3f      	cmp	r3, #63	; 0x3f
 8011852:	d003      	beq.n	801185c <pattern_matching+0x58>
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	781b      	ldrb	r3, [r3, #0]
 8011858:	2b2a      	cmp	r3, #42	; 0x2a
 801185a:	d126      	bne.n	80118aa <pattern_matching+0xa6>
				nm = nx = 0;
 801185c:	2300      	movs	r3, #0
 801185e:	61fb      	str	r3, [r7, #28]
 8011860:	69fb      	ldr	r3, [r7, #28]
 8011862:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	617a      	str	r2, [r7, #20]
 801186a:	781b      	ldrb	r3, [r3, #0]
 801186c:	2b3f      	cmp	r3, #63	; 0x3f
 801186e:	d103      	bne.n	8011878 <pattern_matching+0x74>
 8011870:	6a3b      	ldr	r3, [r7, #32]
 8011872:	3301      	adds	r3, #1
 8011874:	623b      	str	r3, [r7, #32]
 8011876:	e001      	b.n	801187c <pattern_matching+0x78>
 8011878:	2301      	movs	r3, #1
 801187a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	781b      	ldrb	r3, [r3, #0]
 8011880:	2b3f      	cmp	r3, #63	; 0x3f
 8011882:	d0ef      	beq.n	8011864 <pattern_matching+0x60>
 8011884:	697b      	ldr	r3, [r7, #20]
 8011886:	781b      	ldrb	r3, [r3, #0]
 8011888:	2b2a      	cmp	r3, #42	; 0x2a
 801188a:	d0eb      	beq.n	8011864 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801188c:	6978      	ldr	r0, [r7, #20]
 801188e:	6939      	ldr	r1, [r7, #16]
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	6a3a      	ldr	r2, [r7, #32]
 8011894:	f7ff ffb6 	bl	8011804 <pattern_matching>
 8011898:	4603      	mov	r3, r0
 801189a:	2b00      	cmp	r3, #0
 801189c:	d001      	beq.n	80118a2 <pattern_matching+0x9e>
 801189e:	2301      	movs	r3, #1
 80118a0:	e027      	b.n	80118f2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	781b      	ldrb	r3, [r3, #0]
 80118a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80118a8:	e017      	b.n	80118da <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80118aa:	f107 0314 	add.w	r3, r7, #20
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7ff ff82 	bl	80117b8 <get_achar>
 80118b4:	4603      	mov	r3, r0
 80118b6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80118b8:	f107 0310 	add.w	r3, r7, #16
 80118bc:	4618      	mov	r0, r3
 80118be:	f7ff ff7b 	bl	80117b8 <get_achar>
 80118c2:	4603      	mov	r3, r0
 80118c4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80118c6:	8b7a      	ldrh	r2, [r7, #26]
 80118c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d104      	bne.n	80118d8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80118ce:	8b7b      	ldrh	r3, [r7, #26]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1bb      	bne.n	801184c <pattern_matching+0x48>
 80118d4:	2301      	movs	r3, #1
 80118d6:	e00c      	b.n	80118f2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80118d8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80118da:	f107 0308 	add.w	r3, r7, #8
 80118de:	4618      	mov	r0, r3
 80118e0:	f7ff ff6a 	bl	80117b8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d002      	beq.n	80118f0 <pattern_matching+0xec>
 80118ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1a9      	bne.n	8011844 <pattern_matching+0x40>

	return 0;
 80118f0:	2300      	movs	r3, #0
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3728      	adds	r7, #40	; 0x28
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
	...

080118fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b088      	sub	sp, #32
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	60fb      	str	r3, [r7, #12]
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	3324      	adds	r3, #36	; 0x24
 8011910:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011912:	220b      	movs	r2, #11
 8011914:	2120      	movs	r1, #32
 8011916:	68b8      	ldr	r0, [r7, #8]
 8011918:	f7fe fe8f 	bl	801063a <mem_set>
	si = i = 0; ni = 8;
 801191c:	2300      	movs	r3, #0
 801191e:	613b      	str	r3, [r7, #16]
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	617b      	str	r3, [r7, #20]
 8011924:	2308      	movs	r3, #8
 8011926:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	1c5a      	adds	r2, r3, #1
 801192c:	617a      	str	r2, [r7, #20]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	4413      	add	r3, r2
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011936:	7ffb      	ldrb	r3, [r7, #31]
 8011938:	2b20      	cmp	r3, #32
 801193a:	d94e      	bls.n	80119da <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801193c:	7ffb      	ldrb	r3, [r7, #31]
 801193e:	2b2f      	cmp	r3, #47	; 0x2f
 8011940:	d006      	beq.n	8011950 <create_name+0x54>
 8011942:	7ffb      	ldrb	r3, [r7, #31]
 8011944:	2b5c      	cmp	r3, #92	; 0x5c
 8011946:	d110      	bne.n	801196a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011948:	e002      	b.n	8011950 <create_name+0x54>
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	3301      	adds	r3, #1
 801194e:	617b      	str	r3, [r7, #20]
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	4413      	add	r3, r2
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	2b2f      	cmp	r3, #47	; 0x2f
 801195a:	d0f6      	beq.n	801194a <create_name+0x4e>
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	4413      	add	r3, r2
 8011962:	781b      	ldrb	r3, [r3, #0]
 8011964:	2b5c      	cmp	r3, #92	; 0x5c
 8011966:	d0f0      	beq.n	801194a <create_name+0x4e>
			break;
 8011968:	e038      	b.n	80119dc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801196a:	7ffb      	ldrb	r3, [r7, #31]
 801196c:	2b2e      	cmp	r3, #46	; 0x2e
 801196e:	d003      	beq.n	8011978 <create_name+0x7c>
 8011970:	693a      	ldr	r2, [r7, #16]
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	429a      	cmp	r2, r3
 8011976:	d30c      	bcc.n	8011992 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011978:	69bb      	ldr	r3, [r7, #24]
 801197a:	2b0b      	cmp	r3, #11
 801197c:	d002      	beq.n	8011984 <create_name+0x88>
 801197e:	7ffb      	ldrb	r3, [r7, #31]
 8011980:	2b2e      	cmp	r3, #46	; 0x2e
 8011982:	d001      	beq.n	8011988 <create_name+0x8c>
 8011984:	2306      	movs	r3, #6
 8011986:	e044      	b.n	8011a12 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011988:	2308      	movs	r3, #8
 801198a:	613b      	str	r3, [r7, #16]
 801198c:	230b      	movs	r3, #11
 801198e:	61bb      	str	r3, [r7, #24]
			continue;
 8011990:	e022      	b.n	80119d8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011992:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011996:	2b00      	cmp	r3, #0
 8011998:	da04      	bge.n	80119a4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801199a:	7ffb      	ldrb	r3, [r7, #31]
 801199c:	3b80      	subs	r3, #128	; 0x80
 801199e:	4a1f      	ldr	r2, [pc, #124]	; (8011a1c <create_name+0x120>)
 80119a0:	5cd3      	ldrb	r3, [r2, r3]
 80119a2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80119a4:	7ffb      	ldrb	r3, [r7, #31]
 80119a6:	4619      	mov	r1, r3
 80119a8:	481d      	ldr	r0, [pc, #116]	; (8011a20 <create_name+0x124>)
 80119aa:	f7fe fe87 	bl	80106bc <chk_chr>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <create_name+0xbc>
 80119b4:	2306      	movs	r3, #6
 80119b6:	e02c      	b.n	8011a12 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80119b8:	7ffb      	ldrb	r3, [r7, #31]
 80119ba:	2b60      	cmp	r3, #96	; 0x60
 80119bc:	d905      	bls.n	80119ca <create_name+0xce>
 80119be:	7ffb      	ldrb	r3, [r7, #31]
 80119c0:	2b7a      	cmp	r3, #122	; 0x7a
 80119c2:	d802      	bhi.n	80119ca <create_name+0xce>
 80119c4:	7ffb      	ldrb	r3, [r7, #31]
 80119c6:	3b20      	subs	r3, #32
 80119c8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80119ca:	693b      	ldr	r3, [r7, #16]
 80119cc:	1c5a      	adds	r2, r3, #1
 80119ce:	613a      	str	r2, [r7, #16]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	4413      	add	r3, r2
 80119d4:	7ffa      	ldrb	r2, [r7, #31]
 80119d6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80119d8:	e7a6      	b.n	8011928 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80119da:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	441a      	add	r2, r3
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d101      	bne.n	80119f0 <create_name+0xf4>
 80119ec:	2306      	movs	r3, #6
 80119ee:	e010      	b.n	8011a12 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80119f0:	68bb      	ldr	r3, [r7, #8]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	2be5      	cmp	r3, #229	; 0xe5
 80119f6:	d102      	bne.n	80119fe <create_name+0x102>
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	2205      	movs	r2, #5
 80119fc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80119fe:	7ffb      	ldrb	r3, [r7, #31]
 8011a00:	2b20      	cmp	r3, #32
 8011a02:	d801      	bhi.n	8011a08 <create_name+0x10c>
 8011a04:	2204      	movs	r2, #4
 8011a06:	e000      	b.n	8011a0a <create_name+0x10e>
 8011a08:	2200      	movs	r2, #0
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	330b      	adds	r3, #11
 8011a0e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011a10:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3720      	adds	r7, #32
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0801ad98 	.word	0x0801ad98
 8011a20:	0801ab9c 	.word	0x0801ab9c

08011a24 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b086      	sub	sp, #24
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011a38:	e002      	b.n	8011a40 <follow_path+0x1c>
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	3301      	adds	r3, #1
 8011a3e:	603b      	str	r3, [r7, #0]
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	2b2f      	cmp	r3, #47	; 0x2f
 8011a46:	d0f8      	beq.n	8011a3a <follow_path+0x16>
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	2b5c      	cmp	r3, #92	; 0x5c
 8011a4e:	d0f4      	beq.n	8011a3a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	2200      	movs	r2, #0
 8011a54:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	2b1f      	cmp	r3, #31
 8011a5c:	d80a      	bhi.n	8011a74 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2280      	movs	r2, #128	; 0x80
 8011a62:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011a66:	2100      	movs	r1, #0
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ff fb9b 	bl	80111a4 <dir_sdi>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75fb      	strb	r3, [r7, #23]
 8011a72:	e043      	b.n	8011afc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a74:	463b      	mov	r3, r7
 8011a76:	4619      	mov	r1, r3
 8011a78:	6878      	ldr	r0, [r7, #4]
 8011a7a:	f7ff ff3f 	bl	80118fc <create_name>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011a82:	7dfb      	ldrb	r3, [r7, #23]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d134      	bne.n	8011af2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7ff fdae 	bl	80115ea <dir_find>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a98:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00a      	beq.n	8011ab6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
 8011aa2:	2b04      	cmp	r3, #4
 8011aa4:	d127      	bne.n	8011af6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011aa6:	7afb      	ldrb	r3, [r7, #11]
 8011aa8:	f003 0304 	and.w	r3, r3, #4
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d122      	bne.n	8011af6 <follow_path+0xd2>
 8011ab0:	2305      	movs	r3, #5
 8011ab2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011ab4:	e01f      	b.n	8011af6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011ab6:	7afb      	ldrb	r3, [r7, #11]
 8011ab8:	f003 0304 	and.w	r3, r3, #4
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d11c      	bne.n	8011afa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	799b      	ldrb	r3, [r3, #6]
 8011ac4:	f003 0310 	and.w	r3, r3, #16
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d102      	bne.n	8011ad2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011acc:	2305      	movs	r3, #5
 8011ace:	75fb      	strb	r3, [r7, #23]
 8011ad0:	e014      	b.n	8011afc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	695b      	ldr	r3, [r3, #20]
 8011adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ae0:	4413      	add	r3, r2
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f7ff fce4 	bl	80114b2 <ld_clust>
 8011aea:	4602      	mov	r2, r0
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011af0:	e7c0      	b.n	8011a74 <follow_path+0x50>
			if (res != FR_OK) break;
 8011af2:	bf00      	nop
 8011af4:	e002      	b.n	8011afc <follow_path+0xd8>
				break;
 8011af6:	bf00      	nop
 8011af8:	e000      	b.n	8011afc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011afa:	bf00      	nop
			}
		}
	}

	return res;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011afe:	4618      	mov	r0, r3
 8011b00:	3718      	adds	r7, #24
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bd80      	pop	{r7, pc}

08011b06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011b06:	b480      	push	{r7}
 8011b08:	b087      	sub	sp, #28
 8011b0a:	af00      	add	r7, sp, #0
 8011b0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d031      	beq.n	8011b80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	617b      	str	r3, [r7, #20]
 8011b22:	e002      	b.n	8011b2a <get_ldnumber+0x24>
 8011b24:	697b      	ldr	r3, [r7, #20]
 8011b26:	3301      	adds	r3, #1
 8011b28:	617b      	str	r3, [r7, #20]
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	2b20      	cmp	r3, #32
 8011b30:	d903      	bls.n	8011b3a <get_ldnumber+0x34>
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	2b3a      	cmp	r3, #58	; 0x3a
 8011b38:	d1f4      	bne.n	8011b24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b3a      	cmp	r3, #58	; 0x3a
 8011b40:	d11c      	bne.n	8011b7c <get_ldnumber+0x76>
			tp = *path;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	1c5a      	adds	r2, r3, #1
 8011b4c:	60fa      	str	r2, [r7, #12]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	3b30      	subs	r3, #48	; 0x30
 8011b52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	2b09      	cmp	r3, #9
 8011b58:	d80e      	bhi.n	8011b78 <get_ldnumber+0x72>
 8011b5a:	68fa      	ldr	r2, [r7, #12]
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d10a      	bne.n	8011b78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d107      	bne.n	8011b78 <get_ldnumber+0x72>
					vol = (int)i;
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011b6c:	697b      	ldr	r3, [r7, #20]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	617b      	str	r3, [r7, #20]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	697a      	ldr	r2, [r7, #20]
 8011b76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	e002      	b.n	8011b82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011b80:	693b      	ldr	r3, [r7, #16]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	371c      	adds	r7, #28
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr
	...

08011b90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	2200      	movs	r2, #0
 8011b9e:	70da      	strb	r2, [r3, #3]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ba6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011ba8:	6839      	ldr	r1, [r7, #0]
 8011baa:	6878      	ldr	r0, [r7, #4]
 8011bac:	f7fe ff82 	bl	8010ab4 <move_window>
 8011bb0:	4603      	mov	r3, r0
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d001      	beq.n	8011bba <check_fs+0x2a>
 8011bb6:	2304      	movs	r3, #4
 8011bb8:	e038      	b.n	8011c2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	3334      	adds	r3, #52	; 0x34
 8011bbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f7fe fc96 	bl	80104f4 <ld_word>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	461a      	mov	r2, r3
 8011bcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d001      	beq.n	8011bd8 <check_fs+0x48>
 8011bd4:	2303      	movs	r3, #3
 8011bd6:	e029      	b.n	8011c2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011bde:	2be9      	cmp	r3, #233	; 0xe9
 8011be0:	d009      	beq.n	8011bf6 <check_fs+0x66>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011be8:	2beb      	cmp	r3, #235	; 0xeb
 8011bea:	d11e      	bne.n	8011c2a <check_fs+0x9a>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011bf2:	2b90      	cmp	r3, #144	; 0x90
 8011bf4:	d119      	bne.n	8011c2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	3334      	adds	r3, #52	; 0x34
 8011bfa:	3336      	adds	r3, #54	; 0x36
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fe fc91 	bl	8010524 <ld_dword>
 8011c02:	4603      	mov	r3, r0
 8011c04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011c08:	4a0a      	ldr	r2, [pc, #40]	; (8011c34 <check_fs+0xa4>)
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	d101      	bne.n	8011c12 <check_fs+0x82>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	e00c      	b.n	8011c2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	3334      	adds	r3, #52	; 0x34
 8011c16:	3352      	adds	r3, #82	; 0x52
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fe fc83 	bl	8010524 <ld_dword>
 8011c1e:	4602      	mov	r2, r0
 8011c20:	4b05      	ldr	r3, [pc, #20]	; (8011c38 <check_fs+0xa8>)
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d101      	bne.n	8011c2a <check_fs+0x9a>
 8011c26:	2300      	movs	r3, #0
 8011c28:	e000      	b.n	8011c2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011c2a:	2302      	movs	r3, #2
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	00544146 	.word	0x00544146
 8011c38:	33544146 	.word	0x33544146

08011c3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b096      	sub	sp, #88	; 0x58
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	4613      	mov	r3, r2
 8011c48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f7ff ff58 	bl	8011b06 <get_ldnumber>
 8011c56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	da01      	bge.n	8011c62 <find_volume+0x26>
 8011c5e:	230b      	movs	r3, #11
 8011c60:	e236      	b.n	80120d0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011c62:	4aac      	ldr	r2, [pc, #688]	; (8011f14 <find_volume+0x2d8>)
 8011c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d101      	bne.n	8011c76 <find_volume+0x3a>
 8011c72:	230c      	movs	r3, #12
 8011c74:	e22c      	b.n	80120d0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8011c76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c78:	f7fe fd3b 	bl	80106f2 <lock_fs>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d101      	bne.n	8011c86 <find_volume+0x4a>
 8011c82:	230f      	movs	r3, #15
 8011c84:	e224      	b.n	80120d0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011c8c:	79fb      	ldrb	r3, [r7, #7]
 8011c8e:	f023 0301 	bic.w	r3, r3, #1
 8011c92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d01a      	beq.n	8011cd2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8011c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9e:	785b      	ldrb	r3, [r3, #1]
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	f7fe fb89 	bl	80103b8 <disk_status>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cb0:	f003 0301 	and.w	r3, r3, #1
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10c      	bne.n	8011cd2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011cb8:	79fb      	ldrb	r3, [r7, #7]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d007      	beq.n	8011cce <find_volume+0x92>
 8011cbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cc2:	f003 0304 	and.w	r3, r3, #4
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d001      	beq.n	8011cce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8011cca:	230a      	movs	r3, #10
 8011ccc:	e200      	b.n	80120d0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8011cce:	2300      	movs	r3, #0
 8011cd0:	e1fe      	b.n	80120d0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cda:	b2da      	uxtb	r2, r3
 8011cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce2:	785b      	ldrb	r3, [r3, #1]
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fe fb81 	bl	80103ec <disk_initialize>
 8011cea:	4603      	mov	r3, r0
 8011cec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011cf0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cf4:	f003 0301 	and.w	r3, r3, #1
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d001      	beq.n	8011d00 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011cfc:	2303      	movs	r3, #3
 8011cfe:	e1e7      	b.n	80120d0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011d00:	79fb      	ldrb	r3, [r7, #7]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d007      	beq.n	8011d16 <find_volume+0xda>
 8011d06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d0a:	f003 0304 	and.w	r3, r3, #4
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011d12:	230a      	movs	r3, #10
 8011d14:	e1dc      	b.n	80120d0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011d1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d1e:	f7ff ff37 	bl	8011b90 <check_fs>
 8011d22:	4603      	mov	r3, r0
 8011d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d2c:	2b02      	cmp	r3, #2
 8011d2e:	d14b      	bne.n	8011dc8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d30:	2300      	movs	r3, #0
 8011d32:	643b      	str	r3, [r7, #64]	; 0x40
 8011d34:	e01f      	b.n	8011d76 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d3e:	011b      	lsls	r3, r3, #4
 8011d40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011d44:	4413      	add	r3, r2
 8011d46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	781b      	ldrb	r3, [r3, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d006      	beq.n	8011d60 <find_volume+0x124>
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	3308      	adds	r3, #8
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fe fbe4 	bl	8010524 <ld_dword>
 8011d5c:	4602      	mov	r2, r0
 8011d5e:	e000      	b.n	8011d62 <find_volume+0x126>
 8011d60:	2200      	movs	r2, #0
 8011d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011d6a:	440b      	add	r3, r1
 8011d6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d72:	3301      	adds	r3, #1
 8011d74:	643b      	str	r3, [r7, #64]	; 0x40
 8011d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d78:	2b03      	cmp	r3, #3
 8011d7a:	d9dc      	bls.n	8011d36 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d002      	beq.n	8011d8c <find_volume+0x150>
 8011d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d94:	4413      	add	r3, r2
 8011d96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011d9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d005      	beq.n	8011dae <find_volume+0x172>
 8011da2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011da4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011da6:	f7ff fef3 	bl	8011b90 <check_fs>
 8011daa:	4603      	mov	r3, r0
 8011dac:	e000      	b.n	8011db0 <find_volume+0x174>
 8011dae:	2303      	movs	r3, #3
 8011db0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011db4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	d905      	bls.n	8011dc8 <find_volume+0x18c>
 8011dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8011dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dc4:	2b03      	cmp	r3, #3
 8011dc6:	d9e1      	bls.n	8011d8c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dcc:	2b04      	cmp	r3, #4
 8011dce:	d101      	bne.n	8011dd4 <find_volume+0x198>
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	e17d      	b.n	80120d0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011dd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d901      	bls.n	8011de0 <find_volume+0x1a4>
 8011ddc:	230d      	movs	r3, #13
 8011dde:	e177      	b.n	80120d0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de2:	3334      	adds	r3, #52	; 0x34
 8011de4:	330b      	adds	r3, #11
 8011de6:	4618      	mov	r0, r3
 8011de8:	f7fe fb84 	bl	80104f4 <ld_word>
 8011dec:	4603      	mov	r3, r0
 8011dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011df2:	d001      	beq.n	8011df8 <find_volume+0x1bc>
 8011df4:	230d      	movs	r3, #13
 8011df6:	e16b      	b.n	80120d0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfa:	3334      	adds	r3, #52	; 0x34
 8011dfc:	3316      	adds	r3, #22
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fe fb78 	bl	80104f4 <ld_word>
 8011e04:	4603      	mov	r3, r0
 8011e06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d106      	bne.n	8011e1c <find_volume+0x1e0>
 8011e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e10:	3334      	adds	r3, #52	; 0x34
 8011e12:	3324      	adds	r3, #36	; 0x24
 8011e14:	4618      	mov	r0, r3
 8011e16:	f7fe fb85 	bl	8010524 <ld_dword>
 8011e1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011e20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2e:	789b      	ldrb	r3, [r3, #2]
 8011e30:	2b01      	cmp	r3, #1
 8011e32:	d005      	beq.n	8011e40 <find_volume+0x204>
 8011e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e36:	789b      	ldrb	r3, [r3, #2]
 8011e38:	2b02      	cmp	r3, #2
 8011e3a:	d001      	beq.n	8011e40 <find_volume+0x204>
 8011e3c:	230d      	movs	r3, #13
 8011e3e:	e147      	b.n	80120d0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e42:	789b      	ldrb	r3, [r3, #2]
 8011e44:	461a      	mov	r2, r3
 8011e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e48:	fb02 f303 	mul.w	r3, r2, r3
 8011e4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011e54:	b29a      	uxth	r2, r3
 8011e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5c:	895b      	ldrh	r3, [r3, #10]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d008      	beq.n	8011e74 <find_volume+0x238>
 8011e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e64:	895b      	ldrh	r3, [r3, #10]
 8011e66:	461a      	mov	r2, r3
 8011e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6a:	895b      	ldrh	r3, [r3, #10]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	4013      	ands	r3, r2
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d001      	beq.n	8011e78 <find_volume+0x23c>
 8011e74:	230d      	movs	r3, #13
 8011e76:	e12b      	b.n	80120d0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7a:	3334      	adds	r3, #52	; 0x34
 8011e7c:	3311      	adds	r3, #17
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fe fb38 	bl	80104f4 <ld_word>
 8011e84:	4603      	mov	r3, r0
 8011e86:	461a      	mov	r2, r3
 8011e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8e:	891b      	ldrh	r3, [r3, #8]
 8011e90:	f003 030f 	and.w	r3, r3, #15
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d001      	beq.n	8011e9e <find_volume+0x262>
 8011e9a:	230d      	movs	r3, #13
 8011e9c:	e118      	b.n	80120d0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea0:	3334      	adds	r3, #52	; 0x34
 8011ea2:	3313      	adds	r3, #19
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7fe fb25 	bl	80104f4 <ld_word>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d106      	bne.n	8011ec2 <find_volume+0x286>
 8011eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb6:	3334      	adds	r3, #52	; 0x34
 8011eb8:	3320      	adds	r3, #32
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7fe fb32 	bl	8010524 <ld_dword>
 8011ec0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec4:	3334      	adds	r3, #52	; 0x34
 8011ec6:	330e      	adds	r3, #14
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7fe fb13 	bl	80104f4 <ld_word>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011ed2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d101      	bne.n	8011edc <find_volume+0x2a0>
 8011ed8:	230d      	movs	r3, #13
 8011eda:	e0f9      	b.n	80120d0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011edc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee0:	4413      	add	r3, r2
 8011ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ee4:	8912      	ldrh	r2, [r2, #8]
 8011ee6:	0912      	lsrs	r2, r2, #4
 8011ee8:	b292      	uxth	r2, r2
 8011eea:	4413      	add	r3, r2
 8011eec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d201      	bcs.n	8011efa <find_volume+0x2be>
 8011ef6:	230d      	movs	r3, #13
 8011ef8:	e0ea      	b.n	80120d0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011f02:	8952      	ldrh	r2, [r2, #10]
 8011f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d103      	bne.n	8011f18 <find_volume+0x2dc>
 8011f10:	230d      	movs	r3, #13
 8011f12:	e0dd      	b.n	80120d0 <find_volume+0x494>
 8011f14:	20000438 	.word	0x20000438
		fmt = FS_FAT32;
 8011f18:	2303      	movs	r3, #3
 8011f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f20:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011f24:	4293      	cmp	r3, r2
 8011f26:	d802      	bhi.n	8011f2e <find_volume+0x2f2>
 8011f28:	2302      	movs	r3, #2
 8011f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f30:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011f34:	4293      	cmp	r3, r2
 8011f36:	d802      	bhi.n	8011f3e <find_volume+0x302>
 8011f38:	2301      	movs	r3, #1
 8011f3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f40:	1c9a      	adds	r2, r3, #2
 8011f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f44:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f4a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011f4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f50:	441a      	add	r2, r3
 8011f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f54:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	441a      	add	r2, r3
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f64:	2b03      	cmp	r3, #3
 8011f66:	d11e      	bne.n	8011fa6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f6a:	3334      	adds	r3, #52	; 0x34
 8011f6c:	332a      	adds	r3, #42	; 0x2a
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe fac0 	bl	80104f4 <ld_word>
 8011f74:	4603      	mov	r3, r0
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d001      	beq.n	8011f7e <find_volume+0x342>
 8011f7a:	230d      	movs	r3, #13
 8011f7c:	e0a8      	b.n	80120d0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f80:	891b      	ldrh	r3, [r3, #8]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d001      	beq.n	8011f8a <find_volume+0x34e>
 8011f86:	230d      	movs	r3, #13
 8011f88:	e0a2      	b.n	80120d0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8c:	3334      	adds	r3, #52	; 0x34
 8011f8e:	332c      	adds	r3, #44	; 0x2c
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe fac7 	bl	8010524 <ld_dword>
 8011f96:	4602      	mov	r2, r0
 8011f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9e:	699b      	ldr	r3, [r3, #24]
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8011fa4:	e01f      	b.n	8011fe6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	891b      	ldrh	r3, [r3, #8]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d101      	bne.n	8011fb2 <find_volume+0x376>
 8011fae:	230d      	movs	r3, #13
 8011fb0:	e08e      	b.n	80120d0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fb8:	441a      	add	r2, r3
 8011fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011fbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fc2:	2b02      	cmp	r3, #2
 8011fc4:	d103      	bne.n	8011fce <find_volume+0x392>
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc8:	699b      	ldr	r3, [r3, #24]
 8011fca:	005b      	lsls	r3, r3, #1
 8011fcc:	e00a      	b.n	8011fe4 <find_volume+0x3a8>
 8011fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd0:	699a      	ldr	r2, [r3, #24]
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	4413      	add	r3, r2
 8011fd8:	085a      	lsrs	r2, r3, #1
 8011fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fdc:	699b      	ldr	r3, [r3, #24]
 8011fde:	f003 0301 	and.w	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011fe4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe8:	69da      	ldr	r2, [r3, #28]
 8011fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011ff0:	0a5b      	lsrs	r3, r3, #9
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d201      	bcs.n	8011ffa <find_volume+0x3be>
 8011ff6:	230d      	movs	r3, #13
 8011ff8:	e06a      	b.n	80120d0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8012000:	615a      	str	r2, [r3, #20]
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	695a      	ldr	r2, [r3, #20]
 8012006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012008:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801200a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200c:	2280      	movs	r2, #128	; 0x80
 801200e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012010:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012014:	2b03      	cmp	r3, #3
 8012016:	d149      	bne.n	80120ac <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	3334      	adds	r3, #52	; 0x34
 801201c:	3330      	adds	r3, #48	; 0x30
 801201e:	4618      	mov	r0, r3
 8012020:	f7fe fa68 	bl	80104f4 <ld_word>
 8012024:	4603      	mov	r3, r0
 8012026:	2b01      	cmp	r3, #1
 8012028:	d140      	bne.n	80120ac <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801202c:	3301      	adds	r3, #1
 801202e:	4619      	mov	r1, r3
 8012030:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012032:	f7fe fd3f 	bl	8010ab4 <move_window>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d137      	bne.n	80120ac <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 801203c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203e:	2200      	movs	r2, #0
 8012040:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012044:	3334      	adds	r3, #52	; 0x34
 8012046:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801204a:	4618      	mov	r0, r3
 801204c:	f7fe fa52 	bl	80104f4 <ld_word>
 8012050:	4603      	mov	r3, r0
 8012052:	461a      	mov	r2, r3
 8012054:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012058:	429a      	cmp	r2, r3
 801205a:	d127      	bne.n	80120ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801205c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205e:	3334      	adds	r3, #52	; 0x34
 8012060:	4618      	mov	r0, r3
 8012062:	f7fe fa5f 	bl	8010524 <ld_dword>
 8012066:	4602      	mov	r2, r0
 8012068:	4b1b      	ldr	r3, [pc, #108]	; (80120d8 <find_volume+0x49c>)
 801206a:	429a      	cmp	r2, r3
 801206c:	d11e      	bne.n	80120ac <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012070:	3334      	adds	r3, #52	; 0x34
 8012072:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012076:	4618      	mov	r0, r3
 8012078:	f7fe fa54 	bl	8010524 <ld_dword>
 801207c:	4602      	mov	r2, r0
 801207e:	4b17      	ldr	r3, [pc, #92]	; (80120dc <find_volume+0x4a0>)
 8012080:	429a      	cmp	r2, r3
 8012082:	d113      	bne.n	80120ac <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	3334      	adds	r3, #52	; 0x34
 8012088:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801208c:	4618      	mov	r0, r3
 801208e:	f7fe fa49 	bl	8010524 <ld_dword>
 8012092:	4602      	mov	r2, r0
 8012094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012096:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	3334      	adds	r3, #52	; 0x34
 801209c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fe fa3f 	bl	8010524 <ld_dword>
 80120a6:	4602      	mov	r2, r0
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80120ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ae:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80120b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80120b4:	4b0a      	ldr	r3, [pc, #40]	; (80120e0 <find_volume+0x4a4>)
 80120b6:	881b      	ldrh	r3, [r3, #0]
 80120b8:	3301      	adds	r3, #1
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	4b08      	ldr	r3, [pc, #32]	; (80120e0 <find_volume+0x4a4>)
 80120be:	801a      	strh	r2, [r3, #0]
 80120c0:	4b07      	ldr	r3, [pc, #28]	; (80120e0 <find_volume+0x4a4>)
 80120c2:	881a      	ldrh	r2, [r3, #0]
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80120c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80120ca:	f7fe fc8b 	bl	80109e4 <clear_lock>
#endif
	return FR_OK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3758      	adds	r7, #88	; 0x58
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	41615252 	.word	0x41615252
 80120dc:	61417272 	.word	0x61417272
 80120e0:	2000043c 	.word	0x2000043c

080120e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80120ee:	2309      	movs	r3, #9
 80120f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d02e      	beq.n	8012156 <validate+0x72>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d02a      	beq.n	8012156 <validate+0x72>
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d025      	beq.n	8012156 <validate+0x72>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	889a      	ldrh	r2, [r3, #4]
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	88db      	ldrh	r3, [r3, #6]
 8012114:	429a      	cmp	r2, r3
 8012116:	d11e      	bne.n	8012156 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	4618      	mov	r0, r3
 801211e:	f7fe fae8 	bl	80106f2 <lock_fs>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d014      	beq.n	8012152 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	785b      	ldrb	r3, [r3, #1]
 801212e:	4618      	mov	r0, r3
 8012130:	f7fe f942 	bl	80103b8 <disk_status>
 8012134:	4603      	mov	r3, r0
 8012136:	f003 0301 	and.w	r3, r3, #1
 801213a:	2b00      	cmp	r3, #0
 801213c:	d102      	bne.n	8012144 <validate+0x60>
				res = FR_OK;
 801213e:	2300      	movs	r3, #0
 8012140:	73fb      	strb	r3, [r7, #15]
 8012142:	e008      	b.n	8012156 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	2100      	movs	r1, #0
 801214a:	4618      	mov	r0, r3
 801214c:	f7fe fae7 	bl	801071e <unlock_fs>
 8012150:	e001      	b.n	8012156 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012152:	230f      	movs	r3, #15
 8012154:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	2b00      	cmp	r3, #0
 801215a:	d102      	bne.n	8012162 <validate+0x7e>
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	e000      	b.n	8012164 <validate+0x80>
 8012162:	2300      	movs	r3, #0
 8012164:	683a      	ldr	r2, [r7, #0]
 8012166:	6013      	str	r3, [r2, #0]
	return res;
 8012168:	7bfb      	ldrb	r3, [r7, #15]
}
 801216a:	4618      	mov	r0, r3
 801216c:	3710      	adds	r7, #16
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
	...

08012174 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b088      	sub	sp, #32
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	4613      	mov	r3, r2
 8012180:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012186:	f107 0310 	add.w	r3, r7, #16
 801218a:	4618      	mov	r0, r3
 801218c:	f7ff fcbb 	bl	8011b06 <get_ldnumber>
 8012190:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012192:	69fb      	ldr	r3, [r7, #28]
 8012194:	2b00      	cmp	r3, #0
 8012196:	da01      	bge.n	801219c <f_mount+0x28>
 8012198:	230b      	movs	r3, #11
 801219a:	e048      	b.n	801222e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801219c:	4a26      	ldr	r2, [pc, #152]	; (8012238 <f_mount+0xc4>)
 801219e:	69fb      	ldr	r3, [r7, #28]
 80121a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80121a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d00f      	beq.n	80121cc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80121ac:	69b8      	ldr	r0, [r7, #24]
 80121ae:	f7fe fc19 	bl	80109e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	68db      	ldr	r3, [r3, #12]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f001 f828 	bl	801320c <ff_del_syncobj>
 80121bc:	4603      	mov	r3, r0
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d101      	bne.n	80121c6 <f_mount+0x52>
 80121c2:	2302      	movs	r3, #2
 80121c4:	e033      	b.n	801222e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	2200      	movs	r2, #0
 80121ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00f      	beq.n	80121f2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	330c      	adds	r3, #12
 80121e0:	4619      	mov	r1, r3
 80121e2:	4610      	mov	r0, r2
 80121e4:	f000 fff7 	bl	80131d6 <ff_cre_syncobj>
 80121e8:	4603      	mov	r3, r0
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d101      	bne.n	80121f2 <f_mount+0x7e>
 80121ee:	2302      	movs	r3, #2
 80121f0:	e01d      	b.n	801222e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	4910      	ldr	r1, [pc, #64]	; (8012238 <f_mount+0xc4>)
 80121f6:	69fb      	ldr	r3, [r7, #28]
 80121f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d002      	beq.n	8012208 <f_mount+0x94>
 8012202:	79fb      	ldrb	r3, [r7, #7]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d001      	beq.n	801220c <f_mount+0x98>
 8012208:	2300      	movs	r3, #0
 801220a:	e010      	b.n	801222e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801220c:	f107 010c 	add.w	r1, r7, #12
 8012210:	f107 0308 	add.w	r3, r7, #8
 8012214:	2200      	movs	r2, #0
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff fd10 	bl	8011c3c <find_volume>
 801221c:	4603      	mov	r3, r0
 801221e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	7dfa      	ldrb	r2, [r7, #23]
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f7fe fa79 	bl	801071e <unlock_fs>
 801222c:	7dfb      	ldrb	r3, [r7, #23]
}
 801222e:	4618      	mov	r0, r3
 8012230:	3720      	adds	r7, #32
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	bf00      	nop
 8012238:	20000438 	.word	0x20000438

0801223c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b09a      	sub	sp, #104	; 0x68
 8012240:	af00      	add	r7, sp, #0
 8012242:	60f8      	str	r0, [r7, #12]
 8012244:	60b9      	str	r1, [r7, #8]
 8012246:	4613      	mov	r3, r2
 8012248:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d101      	bne.n	8012254 <f_open+0x18>
 8012250:	2309      	movs	r3, #9
 8012252:	e1b4      	b.n	80125be <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012254:	79fb      	ldrb	r3, [r7, #7]
 8012256:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801225a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801225c:	79fa      	ldrb	r2, [r7, #7]
 801225e:	f107 0114 	add.w	r1, r7, #20
 8012262:	f107 0308 	add.w	r3, r7, #8
 8012266:	4618      	mov	r0, r3
 8012268:	f7ff fce8 	bl	8011c3c <find_volume>
 801226c:	4603      	mov	r3, r0
 801226e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8012272:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012276:	2b00      	cmp	r3, #0
 8012278:	f040 8191 	bne.w	801259e <f_open+0x362>
		dj.obj.fs = fs;
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012280:	68ba      	ldr	r2, [r7, #8]
 8012282:	f107 0318 	add.w	r3, r7, #24
 8012286:	4611      	mov	r1, r2
 8012288:	4618      	mov	r0, r3
 801228a:	f7ff fbcb 	bl	8011a24 <follow_path>
 801228e:	4603      	mov	r3, r0
 8012290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012298:	2b00      	cmp	r3, #0
 801229a:	d11a      	bne.n	80122d2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801229c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80122a0:	b25b      	sxtb	r3, r3
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	da03      	bge.n	80122ae <f_open+0x72>
				res = FR_INVALID_NAME;
 80122a6:	2306      	movs	r3, #6
 80122a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80122ac:	e011      	b.n	80122d2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	f023 0301 	bic.w	r3, r3, #1
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	bf14      	ite	ne
 80122b8:	2301      	movne	r3, #1
 80122ba:	2300      	moveq	r3, #0
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	461a      	mov	r2, r3
 80122c0:	f107 0318 	add.w	r3, r7, #24
 80122c4:	4611      	mov	r1, r2
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7fe fa44 	bl	8010754 <chk_lock>
 80122cc:	4603      	mov	r3, r0
 80122ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80122d2:	79fb      	ldrb	r3, [r7, #7]
 80122d4:	f003 031c 	and.w	r3, r3, #28
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d07f      	beq.n	80123dc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80122dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d017      	beq.n	8012314 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80122e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122e8:	2b04      	cmp	r3, #4
 80122ea:	d10e      	bne.n	801230a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80122ec:	f7fe fa8e 	bl	801080c <enq_lock>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d006      	beq.n	8012304 <f_open+0xc8>
 80122f6:	f107 0318 	add.w	r3, r7, #24
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7ff f9ca 	bl	8011694 <dir_register>
 8012300:	4603      	mov	r3, r0
 8012302:	e000      	b.n	8012306 <f_open+0xca>
 8012304:	2312      	movs	r3, #18
 8012306:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801230a:	79fb      	ldrb	r3, [r7, #7]
 801230c:	f043 0308 	orr.w	r3, r3, #8
 8012310:	71fb      	strb	r3, [r7, #7]
 8012312:	e010      	b.n	8012336 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012314:	7fbb      	ldrb	r3, [r7, #30]
 8012316:	f003 0311 	and.w	r3, r3, #17
 801231a:	2b00      	cmp	r3, #0
 801231c:	d003      	beq.n	8012326 <f_open+0xea>
					res = FR_DENIED;
 801231e:	2307      	movs	r3, #7
 8012320:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012324:	e007      	b.n	8012336 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012326:	79fb      	ldrb	r3, [r7, #7]
 8012328:	f003 0304 	and.w	r3, r3, #4
 801232c:	2b00      	cmp	r3, #0
 801232e:	d002      	beq.n	8012336 <f_open+0xfa>
 8012330:	2308      	movs	r3, #8
 8012332:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012336:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801233a:	2b00      	cmp	r3, #0
 801233c:	d168      	bne.n	8012410 <f_open+0x1d4>
 801233e:	79fb      	ldrb	r3, [r7, #7]
 8012340:	f003 0308 	and.w	r3, r3, #8
 8012344:	2b00      	cmp	r3, #0
 8012346:	d063      	beq.n	8012410 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012348:	f7fc f9e4 	bl	800e714 <get_fattime>
 801234c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012350:	330e      	adds	r3, #14
 8012352:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012354:	4618      	mov	r0, r3
 8012356:	f7fe f923 	bl	80105a0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801235c:	3316      	adds	r3, #22
 801235e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012360:	4618      	mov	r0, r3
 8012362:	f7fe f91d 	bl	80105a0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012368:	330b      	adds	r3, #11
 801236a:	2220      	movs	r2, #32
 801236c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012372:	4611      	mov	r1, r2
 8012374:	4618      	mov	r0, r3
 8012376:	f7ff f89c 	bl	80114b2 <ld_clust>
 801237a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012380:	2200      	movs	r2, #0
 8012382:	4618      	mov	r0, r3
 8012384:	f7ff f8b4 	bl	80114f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238a:	331c      	adds	r3, #28
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f7fe f906 	bl	80105a0 <st_dword>
					fs->wflag = 1;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	2201      	movs	r2, #1
 8012398:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801239a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801239c:	2b00      	cmp	r3, #0
 801239e:	d037      	beq.n	8012410 <f_open+0x1d4>
						dw = fs->winsect;
 80123a0:	697b      	ldr	r3, [r7, #20]
 80123a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80123a6:	f107 0318 	add.w	r3, r7, #24
 80123aa:	2200      	movs	r2, #0
 80123ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fe fdc7 	bl	8010f42 <remove_chain>
 80123b4:	4603      	mov	r3, r0
 80123b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80123ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d126      	bne.n	8012410 <f_open+0x1d4>
							res = move_window(fs, dw);
 80123c2:	697b      	ldr	r3, [r7, #20]
 80123c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fe fb74 	bl	8010ab4 <move_window>
 80123cc:	4603      	mov	r3, r0
 80123ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80123d6:	3a01      	subs	r2, #1
 80123d8:	611a      	str	r2, [r3, #16]
 80123da:	e019      	b.n	8012410 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80123dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d115      	bne.n	8012410 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80123e4:	7fbb      	ldrb	r3, [r7, #30]
 80123e6:	f003 0310 	and.w	r3, r3, #16
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d003      	beq.n	80123f6 <f_open+0x1ba>
					res = FR_NO_FILE;
 80123ee:	2304      	movs	r3, #4
 80123f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80123f4:	e00c      	b.n	8012410 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80123f6:	79fb      	ldrb	r3, [r7, #7]
 80123f8:	f003 0302 	and.w	r3, r3, #2
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d007      	beq.n	8012410 <f_open+0x1d4>
 8012400:	7fbb      	ldrb	r3, [r7, #30]
 8012402:	f003 0301 	and.w	r3, r3, #1
 8012406:	2b00      	cmp	r3, #0
 8012408:	d002      	beq.n	8012410 <f_open+0x1d4>
						res = FR_DENIED;
 801240a:	2307      	movs	r3, #7
 801240c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012414:	2b00      	cmp	r3, #0
 8012416:	d128      	bne.n	801246a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012418:	79fb      	ldrb	r3, [r7, #7]
 801241a:	f003 0308 	and.w	r3, r3, #8
 801241e:	2b00      	cmp	r3, #0
 8012420:	d003      	beq.n	801242a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012422:	79fb      	ldrb	r3, [r7, #7]
 8012424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012428:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012432:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012438:	79fb      	ldrb	r3, [r7, #7]
 801243a:	f023 0301 	bic.w	r3, r3, #1
 801243e:	2b00      	cmp	r3, #0
 8012440:	bf14      	ite	ne
 8012442:	2301      	movne	r3, #1
 8012444:	2300      	moveq	r3, #0
 8012446:	b2db      	uxtb	r3, r3
 8012448:	461a      	mov	r2, r3
 801244a:	f107 0318 	add.w	r3, r7, #24
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7fe f9fd 	bl	8010850 <inc_lock>
 8012456:	4602      	mov	r2, r0
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	691b      	ldr	r3, [r3, #16]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d102      	bne.n	801246a <f_open+0x22e>
 8012464:	2302      	movs	r3, #2
 8012466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801246a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801246e:	2b00      	cmp	r3, #0
 8012470:	f040 8095 	bne.w	801259e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012478:	4611      	mov	r1, r2
 801247a:	4618      	mov	r0, r3
 801247c:	f7ff f819 	bl	80114b2 <ld_clust>
 8012480:	4602      	mov	r2, r0
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012488:	331c      	adds	r3, #28
 801248a:	4618      	mov	r0, r3
 801248c:	f7fe f84a 	bl	8010524 <ld_dword>
 8012490:	4602      	mov	r2, r0
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	2200      	movs	r2, #0
 801249a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801249c:	697a      	ldr	r2, [r7, #20]
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	88da      	ldrh	r2, [r3, #6]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	79fa      	ldrb	r2, [r7, #7]
 80124ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2200      	movs	r2, #0
 80124b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2200      	movs	r2, #0
 80124ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	2200      	movs	r2, #0
 80124c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	3330      	adds	r3, #48	; 0x30
 80124c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124ca:	2100      	movs	r1, #0
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7fe f8b4 	bl	801063a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80124d2:	79fb      	ldrb	r3, [r7, #7]
 80124d4:	f003 0320 	and.w	r3, r3, #32
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d060      	beq.n	801259e <f_open+0x362>
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	68db      	ldr	r3, [r3, #12]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d05c      	beq.n	801259e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68da      	ldr	r2, [r3, #12]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	895b      	ldrh	r3, [r3, #10]
 80124f0:	025b      	lsls	r3, r3, #9
 80124f2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	68db      	ldr	r3, [r3, #12]
 80124fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012500:	e016      	b.n	8012530 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012506:	4618      	mov	r0, r3
 8012508:	f7fe fb8f 	bl	8010c2a <get_fat>
 801250c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801250e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012510:	2b01      	cmp	r3, #1
 8012512:	d802      	bhi.n	801251a <f_open+0x2de>
 8012514:	2302      	movs	r3, #2
 8012516:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012520:	d102      	bne.n	8012528 <f_open+0x2ec>
 8012522:	2301      	movs	r3, #1
 8012524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801252a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801252c:	1ad3      	subs	r3, r2, r3
 801252e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012534:	2b00      	cmp	r3, #0
 8012536:	d103      	bne.n	8012540 <f_open+0x304>
 8012538:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801253a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801253c:	429a      	cmp	r2, r3
 801253e:	d8e0      	bhi.n	8012502 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012544:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801254a:	2b00      	cmp	r3, #0
 801254c:	d127      	bne.n	801259e <f_open+0x362>
 801254e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012554:	2b00      	cmp	r3, #0
 8012556:	d022      	beq.n	801259e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012558:	697b      	ldr	r3, [r7, #20]
 801255a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801255c:	4618      	mov	r0, r3
 801255e:	f7fe fb45 	bl	8010bec <clust2sect>
 8012562:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012566:	2b00      	cmp	r3, #0
 8012568:	d103      	bne.n	8012572 <f_open+0x336>
						res = FR_INT_ERR;
 801256a:	2302      	movs	r3, #2
 801256c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012570:	e015      	b.n	801259e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012574:	0a5a      	lsrs	r2, r3, #9
 8012576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012578:	441a      	add	r2, r3
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801257e:	697b      	ldr	r3, [r7, #20]
 8012580:	7858      	ldrb	r0, [r3, #1]
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6a1a      	ldr	r2, [r3, #32]
 801258c:	2301      	movs	r3, #1
 801258e:	f7fd ff53 	bl	8010438 <disk_read>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <f_open+0x362>
 8012598:	2301      	movs	r3, #1
 801259a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801259e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <f_open+0x370>
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	2200      	movs	r2, #0
 80125aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80125b2:	4611      	mov	r1, r2
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fe f8b2 	bl	801071e <unlock_fs>
 80125ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80125be:	4618      	mov	r0, r3
 80125c0:	3768      	adds	r7, #104	; 0x68
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd80      	pop	{r7, pc}

080125c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b08c      	sub	sp, #48	; 0x30
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	60f8      	str	r0, [r7, #12]
 80125ce:	60b9      	str	r1, [r7, #8]
 80125d0:	607a      	str	r2, [r7, #4]
 80125d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	2200      	movs	r2, #0
 80125dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f107 0210 	add.w	r2, r7, #16
 80125e4:	4611      	mov	r1, r2
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7ff fd7c 	bl	80120e4 <validate>
 80125ec:	4603      	mov	r3, r0
 80125ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80125f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d107      	bne.n	801260a <f_write+0x44>
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	7d5b      	ldrb	r3, [r3, #21]
 80125fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012606:	2b00      	cmp	r3, #0
 8012608:	d009      	beq.n	801261e <f_write+0x58>
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012610:	4611      	mov	r1, r2
 8012612:	4618      	mov	r0, r3
 8012614:	f7fe f883 	bl	801071e <unlock_fs>
 8012618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801261c:	e173      	b.n	8012906 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	7d1b      	ldrb	r3, [r3, #20]
 8012622:	f003 0302 	and.w	r3, r3, #2
 8012626:	2b00      	cmp	r3, #0
 8012628:	d106      	bne.n	8012638 <f_write+0x72>
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	2107      	movs	r1, #7
 801262e:	4618      	mov	r0, r3
 8012630:	f7fe f875 	bl	801071e <unlock_fs>
 8012634:	2307      	movs	r3, #7
 8012636:	e166      	b.n	8012906 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	699a      	ldr	r2, [r3, #24]
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	441a      	add	r2, r3
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	699b      	ldr	r3, [r3, #24]
 8012644:	429a      	cmp	r2, r3
 8012646:	f080 814b 	bcs.w	80128e0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	699b      	ldr	r3, [r3, #24]
 801264e:	43db      	mvns	r3, r3
 8012650:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012652:	e145      	b.n	80128e0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801265c:	2b00      	cmp	r3, #0
 801265e:	f040 8101 	bne.w	8012864 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	699b      	ldr	r3, [r3, #24]
 8012666:	0a5b      	lsrs	r3, r3, #9
 8012668:	693a      	ldr	r2, [r7, #16]
 801266a:	8952      	ldrh	r2, [r2, #10]
 801266c:	3a01      	subs	r2, #1
 801266e:	4013      	ands	r3, r2
 8012670:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d14d      	bne.n	8012714 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	699b      	ldr	r3, [r3, #24]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d10c      	bne.n	801269a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012688:	2b00      	cmp	r3, #0
 801268a:	d11a      	bne.n	80126c2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2100      	movs	r1, #0
 8012690:	4618      	mov	r0, r3
 8012692:	f7fe fcbb 	bl	801100c <create_chain>
 8012696:	62b8      	str	r0, [r7, #40]	; 0x28
 8012698:	e013      	b.n	80126c2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d007      	beq.n	80126b2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	699b      	ldr	r3, [r3, #24]
 80126a6:	4619      	mov	r1, r3
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7fe fd47 	bl	801113c <clmt_clust>
 80126ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80126b0:	e007      	b.n	80126c2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80126b2:	68fa      	ldr	r2, [r7, #12]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	69db      	ldr	r3, [r3, #28]
 80126b8:	4619      	mov	r1, r3
 80126ba:	4610      	mov	r0, r2
 80126bc:	f7fe fca6 	bl	801100c <create_chain>
 80126c0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80126c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	f000 8110 	beq.w	80128ea <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80126ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d109      	bne.n	80126e4 <f_write+0x11e>
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2202      	movs	r2, #2
 80126d4:	755a      	strb	r2, [r3, #21]
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	2102      	movs	r1, #2
 80126da:	4618      	mov	r0, r3
 80126dc:	f7fe f81f 	bl	801071e <unlock_fs>
 80126e0:	2302      	movs	r3, #2
 80126e2:	e110      	b.n	8012906 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126ea:	d109      	bne.n	8012700 <f_write+0x13a>
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	2201      	movs	r2, #1
 80126f0:	755a      	strb	r2, [r3, #21]
 80126f2:	693b      	ldr	r3, [r7, #16]
 80126f4:	2101      	movs	r1, #1
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fe f811 	bl	801071e <unlock_fs>
 80126fc:	2301      	movs	r3, #1
 80126fe:	e102      	b.n	8012906 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012704:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d102      	bne.n	8012714 <f_write+0x14e>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012712:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	7d1b      	ldrb	r3, [r3, #20]
 8012718:	b25b      	sxtb	r3, r3
 801271a:	2b00      	cmp	r3, #0
 801271c:	da1d      	bge.n	801275a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	7858      	ldrb	r0, [r3, #1]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	6a1a      	ldr	r2, [r3, #32]
 801272c:	2301      	movs	r3, #1
 801272e:	f7fd fea3 	bl	8010478 <disk_write>
 8012732:	4603      	mov	r3, r0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d009      	beq.n	801274c <f_write+0x186>
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2201      	movs	r2, #1
 801273c:	755a      	strb	r2, [r3, #21]
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	2101      	movs	r1, #1
 8012742:	4618      	mov	r0, r3
 8012744:	f7fd ffeb 	bl	801071e <unlock_fs>
 8012748:	2301      	movs	r3, #1
 801274a:	e0dc      	b.n	8012906 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	7d1b      	ldrb	r3, [r3, #20]
 8012750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012754:	b2da      	uxtb	r2, r3
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801275a:	693a      	ldr	r2, [r7, #16]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	4619      	mov	r1, r3
 8012762:	4610      	mov	r0, r2
 8012764:	f7fe fa42 	bl	8010bec <clust2sect>
 8012768:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d109      	bne.n	8012784 <f_write+0x1be>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2202      	movs	r2, #2
 8012774:	755a      	strb	r2, [r3, #21]
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	2102      	movs	r1, #2
 801277a:	4618      	mov	r0, r3
 801277c:	f7fd ffcf 	bl	801071e <unlock_fs>
 8012780:	2302      	movs	r3, #2
 8012782:	e0c0      	b.n	8012906 <f_write+0x340>
			sect += csect;
 8012784:	697a      	ldr	r2, [r7, #20]
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	4413      	add	r3, r2
 801278a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	0a5b      	lsrs	r3, r3, #9
 8012790:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012792:	6a3b      	ldr	r3, [r7, #32]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d041      	beq.n	801281c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012798:	69ba      	ldr	r2, [r7, #24]
 801279a:	6a3b      	ldr	r3, [r7, #32]
 801279c:	4413      	add	r3, r2
 801279e:	693a      	ldr	r2, [r7, #16]
 80127a0:	8952      	ldrh	r2, [r2, #10]
 80127a2:	4293      	cmp	r3, r2
 80127a4:	d905      	bls.n	80127b2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	895b      	ldrh	r3, [r3, #10]
 80127aa:	461a      	mov	r2, r3
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	1ad3      	subs	r3, r2, r3
 80127b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	7858      	ldrb	r0, [r3, #1]
 80127b6:	6a3b      	ldr	r3, [r7, #32]
 80127b8:	697a      	ldr	r2, [r7, #20]
 80127ba:	69f9      	ldr	r1, [r7, #28]
 80127bc:	f7fd fe5c 	bl	8010478 <disk_write>
 80127c0:	4603      	mov	r3, r0
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d009      	beq.n	80127da <f_write+0x214>
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2201      	movs	r2, #1
 80127ca:	755a      	strb	r2, [r3, #21]
 80127cc:	693b      	ldr	r3, [r7, #16]
 80127ce:	2101      	movs	r1, #1
 80127d0:	4618      	mov	r0, r3
 80127d2:	f7fd ffa4 	bl	801071e <unlock_fs>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e095      	b.n	8012906 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	6a1a      	ldr	r2, [r3, #32]
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	1ad3      	subs	r3, r2, r3
 80127e2:	6a3a      	ldr	r2, [r7, #32]
 80127e4:	429a      	cmp	r2, r3
 80127e6:	d915      	bls.n	8012814 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6a1a      	ldr	r2, [r3, #32]
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	025b      	lsls	r3, r3, #9
 80127f8:	69fa      	ldr	r2, [r7, #28]
 80127fa:	4413      	add	r3, r2
 80127fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012800:	4619      	mov	r1, r3
 8012802:	f7fd fef9 	bl	80105f8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	7d1b      	ldrb	r3, [r3, #20]
 801280a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801280e:	b2da      	uxtb	r2, r3
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012814:	6a3b      	ldr	r3, [r7, #32]
 8012816:	025b      	lsls	r3, r3, #9
 8012818:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801281a:	e044      	b.n	80128a6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	6a1b      	ldr	r3, [r3, #32]
 8012820:	697a      	ldr	r2, [r7, #20]
 8012822:	429a      	cmp	r2, r3
 8012824:	d01b      	beq.n	801285e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	699a      	ldr	r2, [r3, #24]
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801282e:	429a      	cmp	r2, r3
 8012830:	d215      	bcs.n	801285e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012832:	693b      	ldr	r3, [r7, #16]
 8012834:	7858      	ldrb	r0, [r3, #1]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801283c:	2301      	movs	r3, #1
 801283e:	697a      	ldr	r2, [r7, #20]
 8012840:	f7fd fdfa 	bl	8010438 <disk_read>
 8012844:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012846:	2b00      	cmp	r3, #0
 8012848:	d009      	beq.n	801285e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2201      	movs	r2, #1
 801284e:	755a      	strb	r2, [r3, #21]
 8012850:	693b      	ldr	r3, [r7, #16]
 8012852:	2101      	movs	r1, #1
 8012854:	4618      	mov	r0, r3
 8012856:	f7fd ff62 	bl	801071e <unlock_fs>
 801285a:	2301      	movs	r3, #1
 801285c:	e053      	b.n	8012906 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	697a      	ldr	r2, [r7, #20]
 8012862:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	699b      	ldr	r3, [r3, #24]
 8012868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801286c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012870:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	429a      	cmp	r2, r3
 8012878:	d901      	bls.n	801287e <f_write+0x2b8>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	699b      	ldr	r3, [r3, #24]
 8012888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801288c:	4413      	add	r3, r2
 801288e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012890:	69f9      	ldr	r1, [r7, #28]
 8012892:	4618      	mov	r0, r3
 8012894:	f7fd feb0 	bl	80105f8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	7d1b      	ldrb	r3, [r3, #20]
 801289c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80128a0:	b2da      	uxtb	r2, r3
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80128a6:	69fa      	ldr	r2, [r7, #28]
 80128a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128aa:	4413      	add	r3, r2
 80128ac:	61fb      	str	r3, [r7, #28]
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	699a      	ldr	r2, [r3, #24]
 80128b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b4:	441a      	add	r2, r3
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	619a      	str	r2, [r3, #24]
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	68da      	ldr	r2, [r3, #12]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	699b      	ldr	r3, [r3, #24]
 80128c2:	429a      	cmp	r2, r3
 80128c4:	bf38      	it	cc
 80128c6:	461a      	movcc	r2, r3
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	60da      	str	r2, [r3, #12]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	441a      	add	r2, r3
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	601a      	str	r2, [r3, #0]
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	f47f aeb6 	bne.w	8012654 <f_write+0x8e>
 80128e8:	e000      	b.n	80128ec <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80128ea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	7d1b      	ldrb	r3, [r3, #20]
 80128f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80128fa:	693b      	ldr	r3, [r7, #16]
 80128fc:	2100      	movs	r1, #0
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fd ff0d 	bl	801071e <unlock_fs>
 8012904:	2300      	movs	r3, #0
}
 8012906:	4618      	mov	r0, r3
 8012908:	3730      	adds	r7, #48	; 0x30
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}

0801290e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801290e:	b580      	push	{r7, lr}
 8012910:	b086      	sub	sp, #24
 8012912:	af00      	add	r7, sp, #0
 8012914:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f107 0208 	add.w	r2, r7, #8
 801291c:	4611      	mov	r1, r2
 801291e:	4618      	mov	r0, r3
 8012920:	f7ff fbe0 	bl	80120e4 <validate>
 8012924:	4603      	mov	r3, r0
 8012926:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012928:	7dfb      	ldrb	r3, [r7, #23]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d16d      	bne.n	8012a0a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	7d1b      	ldrb	r3, [r3, #20]
 8012932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012936:	2b00      	cmp	r3, #0
 8012938:	d067      	beq.n	8012a0a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	7d1b      	ldrb	r3, [r3, #20]
 801293e:	b25b      	sxtb	r3, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	da1a      	bge.n	801297a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	7858      	ldrb	r0, [r3, #1]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a1a      	ldr	r2, [r3, #32]
 8012952:	2301      	movs	r3, #1
 8012954:	f7fd fd90 	bl	8010478 <disk_write>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d006      	beq.n	801296c <f_sync+0x5e>
 801295e:	68bb      	ldr	r3, [r7, #8]
 8012960:	2101      	movs	r1, #1
 8012962:	4618      	mov	r0, r3
 8012964:	f7fd fedb 	bl	801071e <unlock_fs>
 8012968:	2301      	movs	r3, #1
 801296a:	e055      	b.n	8012a18 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7d1b      	ldrb	r3, [r3, #20]
 8012970:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012974:	b2da      	uxtb	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801297a:	f7fb fecb 	bl	800e714 <get_fattime>
 801297e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012980:	68ba      	ldr	r2, [r7, #8]
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012986:	4619      	mov	r1, r3
 8012988:	4610      	mov	r0, r2
 801298a:	f7fe f893 	bl	8010ab4 <move_window>
 801298e:	4603      	mov	r3, r0
 8012990:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012992:	7dfb      	ldrb	r3, [r7, #23]
 8012994:	2b00      	cmp	r3, #0
 8012996:	d138      	bne.n	8012a0a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801299c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	330b      	adds	r3, #11
 80129a2:	781a      	ldrb	r2, [r3, #0]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	330b      	adds	r3, #11
 80129a8:	f042 0220 	orr.w	r2, r2, #32
 80129ac:	b2d2      	uxtb	r2, r2
 80129ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6818      	ldr	r0, [r3, #0]
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	461a      	mov	r2, r3
 80129ba:	68f9      	ldr	r1, [r7, #12]
 80129bc:	f7fe fd98 	bl	80114f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	f103 021c 	add.w	r2, r3, #28
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	68db      	ldr	r3, [r3, #12]
 80129ca:	4619      	mov	r1, r3
 80129cc:	4610      	mov	r0, r2
 80129ce:	f7fd fde7 	bl	80105a0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3316      	adds	r3, #22
 80129d6:	6939      	ldr	r1, [r7, #16]
 80129d8:	4618      	mov	r0, r3
 80129da:	f7fd fde1 	bl	80105a0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	3312      	adds	r3, #18
 80129e2:	2100      	movs	r1, #0
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7fd fdc0 	bl	801056a <st_word>
					fs->wflag = 1;
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	2201      	movs	r2, #1
 80129ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe f88c 	bl	8010b10 <sync_fs>
 80129f8:	4603      	mov	r3, r0
 80129fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	7d1b      	ldrb	r3, [r3, #20]
 8012a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a04:	b2da      	uxtb	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	7dfa      	ldrb	r2, [r7, #23]
 8012a0e:	4611      	mov	r1, r2
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fd fe84 	bl	801071e <unlock_fs>
 8012a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3718      	adds	r7, #24
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b090      	sub	sp, #64	; 0x40
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	f107 0208 	add.w	r2, r7, #8
 8012a30:	4611      	mov	r1, r2
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff fb56 	bl	80120e4 <validate>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012a3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d103      	bne.n	8012a4e <f_lseek+0x2e>
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7d5b      	ldrb	r3, [r3, #21]
 8012a4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d009      	beq.n	8012a6a <f_lseek+0x4a>
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012a5c:	4611      	mov	r1, r2
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7fd fe5d 	bl	801071e <unlock_fs>
 8012a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012a68:	e229      	b.n	8012ebe <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	f000 80ea 	beq.w	8012c48 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7a:	d164      	bne.n	8012b46 <f_lseek+0x126>
			tbl = fp->cltbl;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a80:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a84:	1d1a      	adds	r2, r3, #4
 8012a86:	627a      	str	r2, [r7, #36]	; 0x24
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	617b      	str	r3, [r7, #20]
 8012a8c:	2302      	movs	r3, #2
 8012a8e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	689b      	ldr	r3, [r3, #8]
 8012a94:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d044      	beq.n	8012b26 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9e:	613b      	str	r3, [r7, #16]
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aa6:	3302      	adds	r3, #2
 8012aa8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8012aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aac:	60fb      	str	r3, [r7, #12]
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7fe f8b6 	bl	8010c2a <get_fat>
 8012abe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d809      	bhi.n	8012ada <f_lseek+0xba>
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2202      	movs	r2, #2
 8012aca:	755a      	strb	r2, [r3, #21]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	2102      	movs	r1, #2
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fd fe24 	bl	801071e <unlock_fs>
 8012ad6:	2302      	movs	r3, #2
 8012ad8:	e1f1      	b.n	8012ebe <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae0:	d109      	bne.n	8012af6 <f_lseek+0xd6>
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	755a      	strb	r2, [r3, #21]
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	2101      	movs	r1, #1
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fd fe16 	bl	801071e <unlock_fs>
 8012af2:	2301      	movs	r3, #1
 8012af4:	e1e3      	b.n	8012ebe <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	3301      	adds	r3, #1
 8012afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d0d4      	beq.n	8012aaa <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	d809      	bhi.n	8012b1c <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8012b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0a:	1d1a      	adds	r2, r3, #4
 8012b0c:	627a      	str	r2, [r7, #36]	; 0x24
 8012b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b10:	601a      	str	r2, [r3, #0]
 8012b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b14:	1d1a      	adds	r2, r3, #4
 8012b16:	627a      	str	r2, [r7, #36]	; 0x24
 8012b18:	693a      	ldr	r2, [r7, #16]
 8012b1a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	699b      	ldr	r3, [r3, #24]
 8012b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d3ba      	bcc.n	8012a9c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b2c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b30:	697b      	ldr	r3, [r7, #20]
 8012b32:	429a      	cmp	r2, r3
 8012b34:	d803      	bhi.n	8012b3e <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	2200      	movs	r2, #0
 8012b3a:	601a      	str	r2, [r3, #0]
 8012b3c:	e1b6      	b.n	8012eac <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012b3e:	2311      	movs	r3, #17
 8012b40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012b44:	e1b2      	b.n	8012eac <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	68db      	ldr	r3, [r3, #12]
 8012b4a:	683a      	ldr	r2, [r7, #0]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d902      	bls.n	8012b56 <f_lseek+0x136>
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	683a      	ldr	r2, [r7, #0]
 8012b5a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	f000 81a4 	beq.w	8012eac <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	3b01      	subs	r3, #1
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f7fe fae6 	bl	801113c <clmt_clust>
 8012b70:	4602      	mov	r2, r0
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	69db      	ldr	r3, [r3, #28]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	4610      	mov	r0, r2
 8012b80:	f7fe f834 	bl	8010bec <clust2sect>
 8012b84:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d109      	bne.n	8012ba0 <f_lseek+0x180>
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2202      	movs	r2, #2
 8012b90:	755a      	strb	r2, [r3, #21]
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	2102      	movs	r1, #2
 8012b96:	4618      	mov	r0, r3
 8012b98:	f7fd fdc1 	bl	801071e <unlock_fs>
 8012b9c:	2302      	movs	r3, #2
 8012b9e:	e18e      	b.n	8012ebe <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	0a5b      	lsrs	r3, r3, #9
 8012ba6:	68ba      	ldr	r2, [r7, #8]
 8012ba8:	8952      	ldrh	r2, [r2, #10]
 8012baa:	3a01      	subs	r2, #1
 8012bac:	4013      	ands	r3, r2
 8012bae:	69ba      	ldr	r2, [r7, #24]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	699b      	ldr	r3, [r3, #24]
 8012bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	f000 8175 	beq.w	8012eac <f_lseek+0x48c>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a1b      	ldr	r3, [r3, #32]
 8012bc6:	69ba      	ldr	r2, [r7, #24]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	f000 816f 	beq.w	8012eac <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	7d1b      	ldrb	r3, [r3, #20]
 8012bd2:	b25b      	sxtb	r3, r3
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da1d      	bge.n	8012c14 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	7858      	ldrb	r0, [r3, #1]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6a1a      	ldr	r2, [r3, #32]
 8012be6:	2301      	movs	r3, #1
 8012be8:	f7fd fc46 	bl	8010478 <disk_write>
 8012bec:	4603      	mov	r3, r0
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d009      	beq.n	8012c06 <f_lseek+0x1e6>
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2201      	movs	r2, #1
 8012bf6:	755a      	strb	r2, [r3, #21]
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	2101      	movs	r1, #1
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fd fd8e 	bl	801071e <unlock_fs>
 8012c02:	2301      	movs	r3, #1
 8012c04:	e15b      	b.n	8012ebe <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	7d1b      	ldrb	r3, [r3, #20]
 8012c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c0e:	b2da      	uxtb	r2, r3
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	7858      	ldrb	r0, [r3, #1]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c1e:	2301      	movs	r3, #1
 8012c20:	69ba      	ldr	r2, [r7, #24]
 8012c22:	f7fd fc09 	bl	8010438 <disk_read>
 8012c26:	4603      	mov	r3, r0
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d009      	beq.n	8012c40 <f_lseek+0x220>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	2201      	movs	r2, #1
 8012c30:	755a      	strb	r2, [r3, #21]
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2101      	movs	r1, #1
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fd fd71 	bl	801071e <unlock_fs>
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e13e      	b.n	8012ebe <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	69ba      	ldr	r2, [r7, #24]
 8012c44:	621a      	str	r2, [r3, #32]
 8012c46:	e131      	b.n	8012eac <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	683a      	ldr	r2, [r7, #0]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d908      	bls.n	8012c64 <f_lseek+0x244>
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	7d1b      	ldrb	r3, [r3, #20]
 8012c56:	f003 0302 	and.w	r3, r3, #2
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d102      	bne.n	8012c64 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	699b      	ldr	r3, [r3, #24]
 8012c68:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c72:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 80c0 	beq.w	8012dfc <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	895b      	ldrh	r3, [r3, #10]
 8012c80:	025b      	lsls	r3, r3, #9
 8012c82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012c84:	6a3b      	ldr	r3, [r7, #32]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d01b      	beq.n	8012cc2 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	1e5a      	subs	r2, r3, #1
 8012c8e:	69fb      	ldr	r3, [r7, #28]
 8012c90:	fbb2 f2f3 	udiv	r2, r2, r3
 8012c94:	6a3b      	ldr	r3, [r7, #32]
 8012c96:	1e59      	subs	r1, r3, #1
 8012c98:	69fb      	ldr	r3, [r7, #28]
 8012c9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d30f      	bcc.n	8012cc2 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012ca2:	6a3b      	ldr	r3, [r7, #32]
 8012ca4:	1e5a      	subs	r2, r3, #1
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	425b      	negs	r3, r3
 8012caa:	401a      	ands	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	699b      	ldr	r3, [r3, #24]
 8012cb4:	683a      	ldr	r2, [r7, #0]
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	69db      	ldr	r3, [r3, #28]
 8012cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cc0:	e02c      	b.n	8012d1c <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	689b      	ldr	r3, [r3, #8]
 8012cc6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d123      	bne.n	8012d16 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7fe f99a 	bl	801100c <create_chain>
 8012cd8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cdc:	2b01      	cmp	r3, #1
 8012cde:	d109      	bne.n	8012cf4 <f_lseek+0x2d4>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2202      	movs	r2, #2
 8012ce4:	755a      	strb	r2, [r3, #21]
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	2102      	movs	r1, #2
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fd fd17 	bl	801071e <unlock_fs>
 8012cf0:	2302      	movs	r3, #2
 8012cf2:	e0e4      	b.n	8012ebe <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cfa:	d109      	bne.n	8012d10 <f_lseek+0x2f0>
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2201      	movs	r2, #1
 8012d00:	755a      	strb	r2, [r3, #21]
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	2101      	movs	r1, #1
 8012d06:	4618      	mov	r0, r3
 8012d08:	f7fd fd09 	bl	801071e <unlock_fs>
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	e0d6      	b.n	8012ebe <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d14:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d1a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d06c      	beq.n	8012dfc <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012d22:	e044      	b.n	8012dae <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012d24:	683a      	ldr	r2, [r7, #0]
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	603b      	str	r3, [r7, #0]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	699a      	ldr	r2, [r3, #24]
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	441a      	add	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	7d1b      	ldrb	r3, [r3, #20]
 8012d3c:	f003 0302 	and.w	r3, r3, #2
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d00b      	beq.n	8012d5c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f7fe f95f 	bl	801100c <create_chain>
 8012d4e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d108      	bne.n	8012d68 <f_lseek+0x348>
							ofs = 0; break;
 8012d56:	2300      	movs	r3, #0
 8012d58:	603b      	str	r3, [r7, #0]
 8012d5a:	e02c      	b.n	8012db6 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7fd ff62 	bl	8010c2a <get_fat>
 8012d66:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d6e:	d109      	bne.n	8012d84 <f_lseek+0x364>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2201      	movs	r2, #1
 8012d74:	755a      	strb	r2, [r3, #21]
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	2101      	movs	r1, #1
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f7fd fccf 	bl	801071e <unlock_fs>
 8012d80:	2301      	movs	r3, #1
 8012d82:	e09c      	b.n	8012ebe <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	2b01      	cmp	r3, #1
 8012d88:	d904      	bls.n	8012d94 <f_lseek+0x374>
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	699b      	ldr	r3, [r3, #24]
 8012d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d309      	bcc.n	8012da8 <f_lseek+0x388>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2202      	movs	r2, #2
 8012d98:	755a      	strb	r2, [r3, #21]
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	2102      	movs	r1, #2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7fd fcbd 	bl	801071e <unlock_fs>
 8012da4:	2302      	movs	r3, #2
 8012da6:	e08a      	b.n	8012ebe <f_lseek+0x49e>
					fp->clust = clst;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012dac:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012dae:	683a      	ldr	r2, [r7, #0]
 8012db0:	69fb      	ldr	r3, [r7, #28]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d8b6      	bhi.n	8012d24 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	699a      	ldr	r2, [r3, #24]
 8012dba:	683b      	ldr	r3, [r7, #0]
 8012dbc:	441a      	add	r2, r3
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d017      	beq.n	8012dfc <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd ff0b 	bl	8010bec <clust2sect>
 8012dd6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d109      	bne.n	8012df2 <f_lseek+0x3d2>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2202      	movs	r2, #2
 8012de2:	755a      	strb	r2, [r3, #21]
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	2102      	movs	r1, #2
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fd fc98 	bl	801071e <unlock_fs>
 8012dee:	2302      	movs	r3, #2
 8012df0:	e065      	b.n	8012ebe <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	0a5b      	lsrs	r3, r3, #9
 8012df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012df8:	4413      	add	r3, r2
 8012dfa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	699a      	ldr	r2, [r3, #24]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	429a      	cmp	r2, r3
 8012e06:	d90a      	bls.n	8012e1e <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	699a      	ldr	r2, [r3, #24]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	7d1b      	ldrb	r3, [r3, #20]
 8012e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e18:	b2da      	uxtb	r2, r3
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	699b      	ldr	r3, [r3, #24]
 8012e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d040      	beq.n	8012eac <f_lseek+0x48c>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	6a1b      	ldr	r3, [r3, #32]
 8012e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d03b      	beq.n	8012eac <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	7d1b      	ldrb	r3, [r3, #20]
 8012e38:	b25b      	sxtb	r3, r3
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	da1d      	bge.n	8012e7a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	7858      	ldrb	r0, [r3, #1]
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6a1a      	ldr	r2, [r3, #32]
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	f7fd fb13 	bl	8010478 <disk_write>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d009      	beq.n	8012e6c <f_lseek+0x44c>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	755a      	strb	r2, [r3, #21]
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	2101      	movs	r1, #1
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fd fc5b 	bl	801071e <unlock_fs>
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e028      	b.n	8012ebe <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	7d1b      	ldrb	r3, [r3, #20]
 8012e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e74:	b2da      	uxtb	r2, r3
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	7858      	ldrb	r0, [r3, #1]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012e84:	2301      	movs	r3, #1
 8012e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e88:	f7fd fad6 	bl	8010438 <disk_read>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d009      	beq.n	8012ea6 <f_lseek+0x486>
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2201      	movs	r2, #1
 8012e96:	755a      	strb	r2, [r3, #21]
 8012e98:	68bb      	ldr	r3, [r7, #8]
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fd fc3e 	bl	801071e <unlock_fs>
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e00b      	b.n	8012ebe <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012eaa:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012eb2:	4611      	mov	r1, r2
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7fd fc32 	bl	801071e <unlock_fs>
 8012eba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3740      	adds	r7, #64	; 0x40
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}

08012ec6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012ec6:	b580      	push	{r7, lr}
 8012ec8:	b086      	sub	sp, #24
 8012eca:	af00      	add	r7, sp, #0
 8012ecc:	6078      	str	r0, [r7, #4]
 8012ece:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d101      	bne.n	8012eda <f_opendir+0x14>
 8012ed6:	2309      	movs	r3, #9
 8012ed8:	e06a      	b.n	8012fb0 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012ede:	f107 010c 	add.w	r1, r7, #12
 8012ee2:	463b      	mov	r3, r7
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	f7fe fea8 	bl	8011c3c <find_volume>
 8012eec:	4603      	mov	r3, r0
 8012eee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012ef0:	7dfb      	ldrb	r3, [r7, #23]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d14f      	bne.n	8012f96 <f_opendir+0xd0>
		obj->fs = fs;
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	693b      	ldr	r3, [r7, #16]
 8012efa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012efc:	683b      	ldr	r3, [r7, #0]
 8012efe:	4619      	mov	r1, r3
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f7fe fd8f 	bl	8011a24 <follow_path>
 8012f06:	4603      	mov	r3, r0
 8012f08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012f0a:	7dfb      	ldrb	r3, [r7, #23]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d13d      	bne.n	8012f8c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f16:	b25b      	sxtb	r3, r3
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db12      	blt.n	8012f42 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	799b      	ldrb	r3, [r3, #6]
 8012f20:	f003 0310 	and.w	r3, r3, #16
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d00a      	beq.n	8012f3e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012f28:	68fa      	ldr	r2, [r7, #12]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6a1b      	ldr	r3, [r3, #32]
 8012f2e:	4619      	mov	r1, r3
 8012f30:	4610      	mov	r0, r2
 8012f32:	f7fe fabe 	bl	80114b2 <ld_clust>
 8012f36:	4602      	mov	r2, r0
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	609a      	str	r2, [r3, #8]
 8012f3c:	e001      	b.n	8012f42 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012f3e:	2305      	movs	r3, #5
 8012f40:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012f42:	7dfb      	ldrb	r3, [r7, #23]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d121      	bne.n	8012f8c <f_opendir+0xc6>
				obj->id = fs->id;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	88da      	ldrh	r2, [r3, #6]
 8012f4c:	693b      	ldr	r3, [r7, #16]
 8012f4e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012f50:	2100      	movs	r1, #0
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f7fe f926 	bl	80111a4 <dir_sdi>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012f5c:	7dfb      	ldrb	r3, [r7, #23]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d114      	bne.n	8012f8c <f_opendir+0xc6>
					if (obj->sclust) {
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	689b      	ldr	r3, [r3, #8]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d00d      	beq.n	8012f86 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f7fd fc6f 	bl	8010850 <inc_lock>
 8012f72:	4602      	mov	r2, r0
 8012f74:	693b      	ldr	r3, [r7, #16]
 8012f76:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	691b      	ldr	r3, [r3, #16]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d105      	bne.n	8012f8c <f_opendir+0xc6>
 8012f80:	2312      	movs	r3, #18
 8012f82:	75fb      	strb	r3, [r7, #23]
 8012f84:	e002      	b.n	8012f8c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	2200      	movs	r2, #0
 8012f8a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012f8c:	7dfb      	ldrb	r3, [r7, #23]
 8012f8e:	2b04      	cmp	r3, #4
 8012f90:	d101      	bne.n	8012f96 <f_opendir+0xd0>
 8012f92:	2305      	movs	r3, #5
 8012f94:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012f96:	7dfb      	ldrb	r3, [r7, #23]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d002      	beq.n	8012fa2 <f_opendir+0xdc>
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	2200      	movs	r2, #0
 8012fa0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	7dfa      	ldrb	r2, [r7, #23]
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7fd fbb8 	bl	801071e <unlock_fs>
 8012fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3718      	adds	r7, #24
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	f107 0208 	add.w	r2, r7, #8
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7ff f88b 	bl	80120e4 <validate>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012fd2:	7bfb      	ldrb	r3, [r7, #15]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d115      	bne.n	8013004 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	691b      	ldr	r3, [r3, #16]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d006      	beq.n	8012fee <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	691b      	ldr	r3, [r3, #16]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7fd fcc1 	bl	801096c <dec_lock>
 8012fea:	4603      	mov	r3, r0
 8012fec:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012fee:	7bfb      	ldrb	r3, [r7, #15]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d102      	bne.n	8012ffa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	2100      	movs	r1, #0
 8012ffe:	4618      	mov	r0, r3
 8013000:	f7fd fb8d 	bl	801071e <unlock_fs>
#endif
	}
	return res;
 8013004:	7bfb      	ldrb	r3, [r7, #15]
}
 8013006:	4618      	mov	r0, r3
 8013008:	3710      	adds	r7, #16
 801300a:	46bd      	mov	sp, r7
 801300c:	bd80      	pop	{r7, pc}

0801300e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801300e:	b580      	push	{r7, lr}
 8013010:	b084      	sub	sp, #16
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f107 0208 	add.w	r2, r7, #8
 801301e:	4611      	mov	r1, r2
 8013020:	4618      	mov	r0, r3
 8013022:	f7ff f85f 	bl	80120e4 <validate>
 8013026:	4603      	mov	r3, r0
 8013028:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801302a:	7bfb      	ldrb	r3, [r7, #15]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d126      	bne.n	801307e <f_readdir+0x70>
		if (!fno) {
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d106      	bne.n	8013044 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8013036:	2100      	movs	r1, #0
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f7fe f8b3 	bl	80111a4 <dir_sdi>
 801303e:	4603      	mov	r3, r0
 8013040:	73fb      	strb	r3, [r7, #15]
 8013042:	e01c      	b.n	801307e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8013044:	2100      	movs	r1, #0
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7fe fa72 	bl	8011530 <dir_read>
 801304c:	4603      	mov	r3, r0
 801304e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8013050:	7bfb      	ldrb	r3, [r7, #15]
 8013052:	2b04      	cmp	r3, #4
 8013054:	d101      	bne.n	801305a <f_readdir+0x4c>
 8013056:	2300      	movs	r3, #0
 8013058:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801305a:	7bfb      	ldrb	r3, [r7, #15]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d10e      	bne.n	801307e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8013060:	6839      	ldr	r1, [r7, #0]
 8013062:	6878      	ldr	r0, [r7, #4]
 8013064:	f7fe fb48 	bl	80116f8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8013068:	2100      	movs	r1, #0
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7fe f915 	bl	801129a <dir_next>
 8013070:	4603      	mov	r3, r0
 8013072:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8013074:	7bfb      	ldrb	r3, [r7, #15]
 8013076:	2b04      	cmp	r3, #4
 8013078:	d101      	bne.n	801307e <f_readdir+0x70>
 801307a:	2300      	movs	r3, #0
 801307c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	7bfa      	ldrb	r2, [r7, #15]
 8013082:	4611      	mov	r1, r2
 8013084:	4618      	mov	r0, r3
 8013086:	f7fd fb4a 	bl	801071e <unlock_fs>
 801308a:	7bfb      	ldrb	r3, [r7, #15]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3710      	adds	r7, #16
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801309e:	6839      	ldr	r1, [r7, #0]
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff ffb4 	bl	801300e <f_readdir>
 80130a6:	4603      	mov	r3, r0
 80130a8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 80130aa:	7bfb      	ldrb	r3, [r7, #15]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d114      	bne.n	80130da <f_findnext+0x46>
 80130b0:	683b      	ldr	r3, [r7, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d011      	beq.n	80130da <f_findnext+0x46>
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	7a5b      	ldrb	r3, [r3, #9]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d00d      	beq.n	80130da <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	f103 0109 	add.w	r1, r3, #9
 80130c8:	2300      	movs	r3, #0
 80130ca:	2200      	movs	r2, #0
 80130cc:	f7fe fb9a 	bl	8011804 <pattern_matching>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d100      	bne.n	80130d8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80130d6:	e7e2      	b.n	801309e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80130d8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80130da:	7bfb      	ldrb	r3, [r7, #15]
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3710      	adds	r7, #16
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b086      	sub	sp, #24
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	60f8      	str	r0, [r7, #12]
 80130ec:	60b9      	str	r1, [r7, #8]
 80130ee:	607a      	str	r2, [r7, #4]
 80130f0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	683a      	ldr	r2, [r7, #0]
 80130f6:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80130f8:	6879      	ldr	r1, [r7, #4]
 80130fa:	68f8      	ldr	r0, [r7, #12]
 80130fc:	f7ff fee3 	bl	8012ec6 <f_opendir>
 8013100:	4603      	mov	r3, r0
 8013102:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013104:	7dfb      	ldrb	r3, [r7, #23]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d105      	bne.n	8013116 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 801310a:	68b9      	ldr	r1, [r7, #8]
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7ff ffc1 	bl	8013094 <f_findnext>
 8013112:	4603      	mov	r3, r0
 8013114:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8013116:	7dfb      	ldrb	r3, [r7, #23]
}
 8013118:	4618      	mov	r0, r3
 801311a:	3718      	adds	r7, #24
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013120:	b480      	push	{r7}
 8013122:	b087      	sub	sp, #28
 8013124:	af00      	add	r7, sp, #0
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	4613      	mov	r3, r2
 801312c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801312e:	2301      	movs	r3, #1
 8013130:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013132:	2300      	movs	r3, #0
 8013134:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013136:	4b1f      	ldr	r3, [pc, #124]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013138:	7a5b      	ldrb	r3, [r3, #9]
 801313a:	b2db      	uxtb	r3, r3
 801313c:	2b00      	cmp	r3, #0
 801313e:	d131      	bne.n	80131a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013140:	4b1c      	ldr	r3, [pc, #112]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013142:	7a5b      	ldrb	r3, [r3, #9]
 8013144:	b2db      	uxtb	r3, r3
 8013146:	461a      	mov	r2, r3
 8013148:	4b1a      	ldr	r3, [pc, #104]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 801314a:	2100      	movs	r1, #0
 801314c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801314e:	4b19      	ldr	r3, [pc, #100]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013150:	7a5b      	ldrb	r3, [r3, #9]
 8013152:	b2db      	uxtb	r3, r3
 8013154:	4a17      	ldr	r2, [pc, #92]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	4413      	add	r3, r2
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801315e:	4b15      	ldr	r3, [pc, #84]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013160:	7a5b      	ldrb	r3, [r3, #9]
 8013162:	b2db      	uxtb	r3, r3
 8013164:	461a      	mov	r2, r3
 8013166:	4b13      	ldr	r3, [pc, #76]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013168:	4413      	add	r3, r2
 801316a:	79fa      	ldrb	r2, [r7, #7]
 801316c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801316e:	4b11      	ldr	r3, [pc, #68]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 8013170:	7a5b      	ldrb	r3, [r3, #9]
 8013172:	b2db      	uxtb	r3, r3
 8013174:	1c5a      	adds	r2, r3, #1
 8013176:	b2d1      	uxtb	r1, r2
 8013178:	4a0e      	ldr	r2, [pc, #56]	; (80131b4 <FATFS_LinkDriverEx+0x94>)
 801317a:	7251      	strb	r1, [r2, #9]
 801317c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801317e:	7dbb      	ldrb	r3, [r7, #22]
 8013180:	3330      	adds	r3, #48	; 0x30
 8013182:	b2da      	uxtb	r2, r3
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	3301      	adds	r3, #1
 801318c:	223a      	movs	r2, #58	; 0x3a
 801318e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	3302      	adds	r3, #2
 8013194:	222f      	movs	r2, #47	; 0x2f
 8013196:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	3303      	adds	r3, #3
 801319c:	2200      	movs	r2, #0
 801319e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80131a0:	2300      	movs	r3, #0
 80131a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80131a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	371c      	adds	r7, #28
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	20000460 	.word	0x20000460

080131b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b082      	sub	sp, #8
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
 80131c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80131c2:	2200      	movs	r2, #0
 80131c4:	6839      	ldr	r1, [r7, #0]
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f7ff ffaa 	bl	8013120 <FATFS_LinkDriverEx>
 80131cc:	4603      	mov	r3, r0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3708      	adds	r7, #8
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}

080131d6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80131d6:	b580      	push	{r7, lr}
 80131d8:	b084      	sub	sp, #16
 80131da:	af00      	add	r7, sp, #0
 80131dc:	4603      	mov	r3, r0
 80131de:	6039      	str	r1, [r7, #0]
 80131e0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80131e2:	2200      	movs	r2, #0
 80131e4:	2101      	movs	r1, #1
 80131e6:	2001      	movs	r0, #1
 80131e8:	f000 fb5e 	bl	80138a8 <osSemaphoreNew>
 80131ec:	4602      	mov	r2, r0
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80131f2:	683b      	ldr	r3, [r7, #0]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	bf14      	ite	ne
 80131fa:	2301      	movne	r3, #1
 80131fc:	2300      	moveq	r3, #0
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	60fb      	str	r3, [r7, #12]

    return ret;
 8013202:	68fb      	ldr	r3, [r7, #12]
}
 8013204:	4618      	mov	r0, r3
 8013206:	3710      	adds	r7, #16
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}

0801320c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f000 fca3 	bl	8013b60 <osSemaphoreDelete>
#endif
    return 1;
 801321a:	2301      	movs	r3, #1
}
 801321c:	4618      	mov	r0, r3
 801321e:	3708      	adds	r7, #8
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801322c:	2300      	movs	r3, #0
 801322e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013230:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f000 fbd5 	bl	80139e4 <osSemaphoreAcquire>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d101      	bne.n	8013244 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013240:	2301      	movs	r3, #1
 8013242:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013244:	68fb      	ldr	r3, [r7, #12]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3710      	adds	r7, #16
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}

0801324e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801324e:	b580      	push	{r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013256:	6878      	ldr	r0, [r7, #4]
 8013258:	f000 fc2a 	bl	8013ab0 <osSemaphoreRelease>
#endif
}
 801325c:	bf00      	nop
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013264:	b480      	push	{r7}
 8013266:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8013268:	bf00      	nop
 801326a:	46bd      	mov	sp, r7
 801326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013270:	4770      	bx	lr
	...

08013274 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013274:	b480      	push	{r7}
 8013276:	b085      	sub	sp, #20
 8013278:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801327a:	f3ef 8305 	mrs	r3, IPSR
 801327e:	60bb      	str	r3, [r7, #8]
  return(result);
 8013280:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013282:	2b00      	cmp	r3, #0
 8013284:	d10f      	bne.n	80132a6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013286:	f3ef 8310 	mrs	r3, PRIMASK
 801328a:	607b      	str	r3, [r7, #4]
  return(result);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d105      	bne.n	801329e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013292:	f3ef 8311 	mrs	r3, BASEPRI
 8013296:	603b      	str	r3, [r7, #0]
  return(result);
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d007      	beq.n	80132ae <osKernelInitialize+0x3a>
 801329e:	4b0e      	ldr	r3, [pc, #56]	; (80132d8 <osKernelInitialize+0x64>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b02      	cmp	r3, #2
 80132a4:	d103      	bne.n	80132ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80132a6:	f06f 0305 	mvn.w	r3, #5
 80132aa:	60fb      	str	r3, [r7, #12]
 80132ac:	e00c      	b.n	80132c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80132ae:	4b0a      	ldr	r3, [pc, #40]	; (80132d8 <osKernelInitialize+0x64>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d105      	bne.n	80132c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80132b6:	4b08      	ldr	r3, [pc, #32]	; (80132d8 <osKernelInitialize+0x64>)
 80132b8:	2201      	movs	r2, #1
 80132ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80132bc:	2300      	movs	r3, #0
 80132be:	60fb      	str	r3, [r7, #12]
 80132c0:	e002      	b.n	80132c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80132c2:	f04f 33ff 	mov.w	r3, #4294967295
 80132c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80132c8:	68fb      	ldr	r3, [r7, #12]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3714      	adds	r7, #20
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	2000046c 	.word	0x2000046c

080132dc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 80132dc:	b580      	push	{r7, lr}
 80132de:	b082      	sub	sp, #8
 80132e0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80132e2:	f002 fe7b 	bl	8015fdc <xTaskGetSchedulerState>
 80132e6:	4603      	mov	r3, r0
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d004      	beq.n	80132f6 <osKernelGetState+0x1a>
 80132ec:	2b02      	cmp	r3, #2
 80132ee:	d105      	bne.n	80132fc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80132f0:	2302      	movs	r3, #2
 80132f2:	607b      	str	r3, [r7, #4]
      break;
 80132f4:	e00c      	b.n	8013310 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80132f6:	2303      	movs	r3, #3
 80132f8:	607b      	str	r3, [r7, #4]
      break;
 80132fa:	e009      	b.n	8013310 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80132fc:	4b07      	ldr	r3, [pc, #28]	; (801331c <osKernelGetState+0x40>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	2b01      	cmp	r3, #1
 8013302:	d102      	bne.n	801330a <osKernelGetState+0x2e>
        state = osKernelReady;
 8013304:	2301      	movs	r3, #1
 8013306:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8013308:	e001      	b.n	801330e <osKernelGetState+0x32>
        state = osKernelInactive;
 801330a:	2300      	movs	r3, #0
 801330c:	607b      	str	r3, [r7, #4]
      break;
 801330e:	bf00      	nop
  }

  return (state);
 8013310:	687b      	ldr	r3, [r7, #4]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	2000046c 	.word	0x2000046c

08013320 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8013320:	b580      	push	{r7, lr}
 8013322:	b084      	sub	sp, #16
 8013324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013326:	f3ef 8305 	mrs	r3, IPSR
 801332a:	60bb      	str	r3, [r7, #8]
  return(result);
 801332c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801332e:	2b00      	cmp	r3, #0
 8013330:	d10f      	bne.n	8013352 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013332:	f3ef 8310 	mrs	r3, PRIMASK
 8013336:	607b      	str	r3, [r7, #4]
  return(result);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d105      	bne.n	801334a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801333e:	f3ef 8311 	mrs	r3, BASEPRI
 8013342:	603b      	str	r3, [r7, #0]
  return(result);
 8013344:	683b      	ldr	r3, [r7, #0]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d007      	beq.n	801335a <osKernelStart+0x3a>
 801334a:	4b0f      	ldr	r3, [pc, #60]	; (8013388 <osKernelStart+0x68>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	2b02      	cmp	r3, #2
 8013350:	d103      	bne.n	801335a <osKernelStart+0x3a>
    stat = osErrorISR;
 8013352:	f06f 0305 	mvn.w	r3, #5
 8013356:	60fb      	str	r3, [r7, #12]
 8013358:	e010      	b.n	801337c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801335a:	4b0b      	ldr	r3, [pc, #44]	; (8013388 <osKernelStart+0x68>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b01      	cmp	r3, #1
 8013360:	d109      	bne.n	8013376 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013362:	f7ff ff7f 	bl	8013264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013366:	4b08      	ldr	r3, [pc, #32]	; (8013388 <osKernelStart+0x68>)
 8013368:	2202      	movs	r2, #2
 801336a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801336c:	f002 f9c8 	bl	8015700 <vTaskStartScheduler>
      stat = osOK;
 8013370:	2300      	movs	r3, #0
 8013372:	60fb      	str	r3, [r7, #12]
 8013374:	e002      	b.n	801337c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8013376:	f04f 33ff 	mov.w	r3, #4294967295
 801337a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801337c:	68fb      	ldr	r3, [r7, #12]
}
 801337e:	4618      	mov	r0, r3
 8013380:	3710      	adds	r7, #16
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	2000046c 	.word	0x2000046c

0801338c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013392:	f3ef 8305 	mrs	r3, IPSR
 8013396:	60bb      	str	r3, [r7, #8]
  return(result);
 8013398:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 801339a:	2b00      	cmp	r3, #0
 801339c:	d10f      	bne.n	80133be <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801339e:	f3ef 8310 	mrs	r3, PRIMASK
 80133a2:	607b      	str	r3, [r7, #4]
  return(result);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d105      	bne.n	80133b6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133aa:	f3ef 8311 	mrs	r3, BASEPRI
 80133ae:	603b      	str	r3, [r7, #0]
  return(result);
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d007      	beq.n	80133c6 <osKernelGetTickCount+0x3a>
 80133b6:	4b08      	ldr	r3, [pc, #32]	; (80133d8 <osKernelGetTickCount+0x4c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b02      	cmp	r3, #2
 80133bc:	d103      	bne.n	80133c6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80133be:	f002 fac3 	bl	8015948 <xTaskGetTickCountFromISR>
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	e002      	b.n	80133cc <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80133c6:	f002 faaf 	bl	8015928 <xTaskGetTickCount>
 80133ca:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80133cc:	68fb      	ldr	r3, [r7, #12]
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	3710      	adds	r7, #16
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	2000046c 	.word	0x2000046c

080133dc <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80133dc:	b480      	push	{r7}
 80133de:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80133e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	46bd      	mov	sp, r7
 80133e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ec:	4770      	bx	lr
	...

080133f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b090      	sub	sp, #64	; 0x40
 80133f4:	af04      	add	r7, sp, #16
 80133f6:	60f8      	str	r0, [r7, #12]
 80133f8:	60b9      	str	r1, [r7, #8]
 80133fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80133fc:	2300      	movs	r3, #0
 80133fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013400:	f3ef 8305 	mrs	r3, IPSR
 8013404:	61fb      	str	r3, [r7, #28]
  return(result);
 8013406:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8013408:	2b00      	cmp	r3, #0
 801340a:	f040 808f 	bne.w	801352c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801340e:	f3ef 8310 	mrs	r3, PRIMASK
 8013412:	61bb      	str	r3, [r7, #24]
  return(result);
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d105      	bne.n	8013426 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801341a:	f3ef 8311 	mrs	r3, BASEPRI
 801341e:	617b      	str	r3, [r7, #20]
  return(result);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d003      	beq.n	801342e <osThreadNew+0x3e>
 8013426:	4b44      	ldr	r3, [pc, #272]	; (8013538 <osThreadNew+0x148>)
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	2b02      	cmp	r3, #2
 801342c:	d07e      	beq.n	801352c <osThreadNew+0x13c>
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d07b      	beq.n	801352c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8013434:	2380      	movs	r3, #128	; 0x80
 8013436:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8013438:	2318      	movs	r3, #24
 801343a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801343c:	2300      	movs	r3, #0
 801343e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8013440:	f04f 33ff 	mov.w	r3, #4294967295
 8013444:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d045      	beq.n	80134d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d002      	beq.n	801345a <osThreadNew+0x6a>
        name = attr->name;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	699b      	ldr	r3, [r3, #24]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d002      	beq.n	8013468 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	699b      	ldr	r3, [r3, #24]
 8013466:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801346a:	2b00      	cmp	r3, #0
 801346c:	d008      	beq.n	8013480 <osThreadNew+0x90>
 801346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013470:	2b38      	cmp	r3, #56	; 0x38
 8013472:	d805      	bhi.n	8013480 <osThreadNew+0x90>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	685b      	ldr	r3, [r3, #4]
 8013478:	f003 0301 	and.w	r3, r3, #1
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <osThreadNew+0x94>
        return (NULL);
 8013480:	2300      	movs	r3, #0
 8013482:	e054      	b.n	801352e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	695b      	ldr	r3, [r3, #20]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d003      	beq.n	8013494 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	089b      	lsrs	r3, r3, #2
 8013492:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	689b      	ldr	r3, [r3, #8]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d00e      	beq.n	80134ba <osThreadNew+0xca>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	2b5b      	cmp	r3, #91	; 0x5b
 80134a2:	d90a      	bls.n	80134ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d006      	beq.n	80134ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	695b      	ldr	r3, [r3, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <osThreadNew+0xca>
        mem = 1;
 80134b4:	2301      	movs	r3, #1
 80134b6:	623b      	str	r3, [r7, #32]
 80134b8:	e010      	b.n	80134dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	689b      	ldr	r3, [r3, #8]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10c      	bne.n	80134dc <osThreadNew+0xec>
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d108      	bne.n	80134dc <osThreadNew+0xec>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	691b      	ldr	r3, [r3, #16]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d104      	bne.n	80134dc <osThreadNew+0xec>
          mem = 0;
 80134d2:	2300      	movs	r3, #0
 80134d4:	623b      	str	r3, [r7, #32]
 80134d6:	e001      	b.n	80134dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80134d8:	2300      	movs	r3, #0
 80134da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80134dc:	6a3b      	ldr	r3, [r7, #32]
 80134de:	2b01      	cmp	r3, #1
 80134e0:	d110      	bne.n	8013504 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80134ea:	9202      	str	r2, [sp, #8]
 80134ec:	9301      	str	r3, [sp, #4]
 80134ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134f8:	68f8      	ldr	r0, [r7, #12]
 80134fa:	f001 fea5 	bl	8015248 <xTaskCreateStatic>
 80134fe:	4603      	mov	r3, r0
 8013500:	613b      	str	r3, [r7, #16]
 8013502:	e013      	b.n	801352c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8013504:	6a3b      	ldr	r3, [r7, #32]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d110      	bne.n	801352c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801350c:	b29a      	uxth	r2, r3
 801350e:	f107 0310 	add.w	r3, r7, #16
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f001 fef3 	bl	8015308 <xTaskCreate>
 8013522:	4603      	mov	r3, r0
 8013524:	2b01      	cmp	r3, #1
 8013526:	d001      	beq.n	801352c <osThreadNew+0x13c>
          hTask = NULL;
 8013528:	2300      	movs	r3, #0
 801352a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801352c:	693b      	ldr	r3, [r7, #16]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3730      	adds	r7, #48	; 0x30
 8013532:	46bd      	mov	sp, r7
 8013534:	bd80      	pop	{r7, pc}
 8013536:	bf00      	nop
 8013538:	2000046c 	.word	0x2000046c

0801353c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013544:	f3ef 8305 	mrs	r3, IPSR
 8013548:	613b      	str	r3, [r7, #16]
  return(result);
 801354a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801354c:	2b00      	cmp	r3, #0
 801354e:	d10f      	bne.n	8013570 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013550:	f3ef 8310 	mrs	r3, PRIMASK
 8013554:	60fb      	str	r3, [r7, #12]
  return(result);
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d105      	bne.n	8013568 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801355c:	f3ef 8311 	mrs	r3, BASEPRI
 8013560:	60bb      	str	r3, [r7, #8]
  return(result);
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d007      	beq.n	8013578 <osDelay+0x3c>
 8013568:	4b0a      	ldr	r3, [pc, #40]	; (8013594 <osDelay+0x58>)
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	2b02      	cmp	r3, #2
 801356e:	d103      	bne.n	8013578 <osDelay+0x3c>
    stat = osErrorISR;
 8013570:	f06f 0305 	mvn.w	r3, #5
 8013574:	617b      	str	r3, [r7, #20]
 8013576:	e007      	b.n	8013588 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8013578:	2300      	movs	r3, #0
 801357a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <osDelay+0x4c>
      vTaskDelay(ticks);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f002 f886 	bl	8015694 <vTaskDelay>
    }
  }

  return (stat);
 8013588:	697b      	ldr	r3, [r7, #20]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3718      	adds	r7, #24
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
 8013592:	bf00      	nop
 8013594:	2000046c 	.word	0x2000046c

08013598 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8013598:	b580      	push	{r7, lr}
 801359a:	b088      	sub	sp, #32
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135a0:	f3ef 8305 	mrs	r3, IPSR
 80135a4:	617b      	str	r3, [r7, #20]
  return(result);
 80135a6:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d10f      	bne.n	80135cc <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135ac:	f3ef 8310 	mrs	r3, PRIMASK
 80135b0:	613b      	str	r3, [r7, #16]
  return(result);
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d105      	bne.n	80135c4 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80135b8:	f3ef 8311 	mrs	r3, BASEPRI
 80135bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d007      	beq.n	80135d4 <osDelayUntil+0x3c>
 80135c4:	4b13      	ldr	r3, [pc, #76]	; (8013614 <osDelayUntil+0x7c>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b02      	cmp	r3, #2
 80135ca:	d103      	bne.n	80135d4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 80135cc:	f06f 0305 	mvn.w	r3, #5
 80135d0:	61fb      	str	r3, [r7, #28]
 80135d2:	e019      	b.n	8013608 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 80135d4:	2300      	movs	r3, #0
 80135d6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 80135d8:	f002 f9a6 	bl	8015928 <xTaskGetTickCount>
 80135dc:	4603      	mov	r3, r0
 80135de:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	687a      	ldr	r2, [r7, #4]
 80135e4:	1ad3      	subs	r3, r2, r3
 80135e6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d009      	beq.n	8013602 <osDelayUntil+0x6a>
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	db06      	blt.n	8013602 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 80135f4:	f107 0308 	add.w	r3, r7, #8
 80135f8:	69b9      	ldr	r1, [r7, #24]
 80135fa:	4618      	mov	r0, r3
 80135fc:	f001 ffca 	bl	8015594 <vTaskDelayUntil>
 8013600:	e002      	b.n	8013608 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8013602:	f06f 0303 	mvn.w	r3, #3
 8013606:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8013608:	69fb      	ldr	r3, [r7, #28]
}
 801360a:	4618      	mov	r0, r3
 801360c:	3720      	adds	r7, #32
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	2000046c 	.word	0x2000046c

08013618 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8013618:	b580      	push	{r7, lr}
 801361a:	b08a      	sub	sp, #40	; 0x28
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8013620:	2300      	movs	r3, #0
 8013622:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013624:	f3ef 8305 	mrs	r3, IPSR
 8013628:	613b      	str	r3, [r7, #16]
  return(result);
 801362a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 801362c:	2b00      	cmp	r3, #0
 801362e:	f040 8085 	bne.w	801373c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013632:	f3ef 8310 	mrs	r3, PRIMASK
 8013636:	60fb      	str	r3, [r7, #12]
  return(result);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d105      	bne.n	801364a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801363e:	f3ef 8311 	mrs	r3, BASEPRI
 8013642:	60bb      	str	r3, [r7, #8]
  return(result);
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d003      	beq.n	8013652 <osMutexNew+0x3a>
 801364a:	4b3f      	ldr	r3, [pc, #252]	; (8013748 <osMutexNew+0x130>)
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	2b02      	cmp	r3, #2
 8013650:	d074      	beq.n	801373c <osMutexNew+0x124>
    if (attr != NULL) {
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d003      	beq.n	8013660 <osMutexNew+0x48>
      type = attr->attr_bits;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	623b      	str	r3, [r7, #32]
 801365e:	e001      	b.n	8013664 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8013660:	2300      	movs	r3, #0
 8013662:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	f003 0301 	and.w	r3, r3, #1
 801366a:	2b00      	cmp	r3, #0
 801366c:	d002      	beq.n	8013674 <osMutexNew+0x5c>
      rmtx = 1U;
 801366e:	2301      	movs	r3, #1
 8013670:	61fb      	str	r3, [r7, #28]
 8013672:	e001      	b.n	8013678 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8013674:	2300      	movs	r3, #0
 8013676:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8013678:	6a3b      	ldr	r3, [r7, #32]
 801367a:	f003 0308 	and.w	r3, r3, #8
 801367e:	2b00      	cmp	r3, #0
 8013680:	d15c      	bne.n	801373c <osMutexNew+0x124>
      mem = -1;
 8013682:	f04f 33ff 	mov.w	r3, #4294967295
 8013686:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d015      	beq.n	80136ba <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	689b      	ldr	r3, [r3, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d006      	beq.n	80136a4 <osMutexNew+0x8c>
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	68db      	ldr	r3, [r3, #12]
 801369a:	2b4f      	cmp	r3, #79	; 0x4f
 801369c:	d902      	bls.n	80136a4 <osMutexNew+0x8c>
          mem = 1;
 801369e:	2301      	movs	r3, #1
 80136a0:	61bb      	str	r3, [r7, #24]
 80136a2:	e00c      	b.n	80136be <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	689b      	ldr	r3, [r3, #8]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d108      	bne.n	80136be <osMutexNew+0xa6>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d104      	bne.n	80136be <osMutexNew+0xa6>
            mem = 0;
 80136b4:	2300      	movs	r3, #0
 80136b6:	61bb      	str	r3, [r7, #24]
 80136b8:	e001      	b.n	80136be <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80136ba:	2300      	movs	r3, #0
 80136bc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d112      	bne.n	80136ea <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80136c4:	69fb      	ldr	r3, [r7, #28]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d007      	beq.n	80136da <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	689b      	ldr	r3, [r3, #8]
 80136ce:	4619      	mov	r1, r3
 80136d0:	2004      	movs	r0, #4
 80136d2:	f000 fe4c 	bl	801436e <xQueueCreateMutexStatic>
 80136d6:	6278      	str	r0, [r7, #36]	; 0x24
 80136d8:	e016      	b.n	8013708 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	689b      	ldr	r3, [r3, #8]
 80136de:	4619      	mov	r1, r3
 80136e0:	2001      	movs	r0, #1
 80136e2:	f000 fe44 	bl	801436e <xQueueCreateMutexStatic>
 80136e6:	6278      	str	r0, [r7, #36]	; 0x24
 80136e8:	e00e      	b.n	8013708 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d10b      	bne.n	8013708 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d004      	beq.n	8013700 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80136f6:	2004      	movs	r0, #4
 80136f8:	f000 fe21 	bl	801433e <xQueueCreateMutex>
 80136fc:	6278      	str	r0, [r7, #36]	; 0x24
 80136fe:	e003      	b.n	8013708 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8013700:	2001      	movs	r0, #1
 8013702:	f000 fe1c 	bl	801433e <xQueueCreateMutex>
 8013706:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8013708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370a:	2b00      	cmp	r3, #0
 801370c:	d00c      	beq.n	8013728 <osMutexNew+0x110>
        if (attr != NULL) {
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d003      	beq.n	801371c <osMutexNew+0x104>
          name = attr->name;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	617b      	str	r3, [r7, #20]
 801371a:	e001      	b.n	8013720 <osMutexNew+0x108>
        } else {
          name = NULL;
 801371c:	2300      	movs	r3, #0
 801371e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8013720:	6979      	ldr	r1, [r7, #20]
 8013722:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013724:	f001 fd0a 	bl	801513c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8013728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801372a:	2b00      	cmp	r3, #0
 801372c:	d006      	beq.n	801373c <osMutexNew+0x124>
 801372e:	69fb      	ldr	r3, [r7, #28]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d003      	beq.n	801373c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	f043 0301 	orr.w	r3, r3, #1
 801373a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801373e:	4618      	mov	r0, r3
 8013740:	3728      	adds	r7, #40	; 0x28
 8013742:	46bd      	mov	sp, r7
 8013744:	bd80      	pop	{r7, pc}
 8013746:	bf00      	nop
 8013748:	2000046c 	.word	0x2000046c

0801374c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801374c:	b580      	push	{r7, lr}
 801374e:	b088      	sub	sp, #32
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f023 0301 	bic.w	r3, r3, #1
 801375c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	f003 0301 	and.w	r3, r3, #1
 8013764:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013766:	2300      	movs	r3, #0
 8013768:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801376a:	f3ef 8305 	mrs	r3, IPSR
 801376e:	613b      	str	r3, [r7, #16]
  return(result);
 8013770:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8013772:	2b00      	cmp	r3, #0
 8013774:	d10f      	bne.n	8013796 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013776:	f3ef 8310 	mrs	r3, PRIMASK
 801377a:	60fb      	str	r3, [r7, #12]
  return(result);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d105      	bne.n	801378e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013782:	f3ef 8311 	mrs	r3, BASEPRI
 8013786:	60bb      	str	r3, [r7, #8]
  return(result);
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d007      	beq.n	801379e <osMutexAcquire+0x52>
 801378e:	4b1d      	ldr	r3, [pc, #116]	; (8013804 <osMutexAcquire+0xb8>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	2b02      	cmp	r3, #2
 8013794:	d103      	bne.n	801379e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8013796:	f06f 0305 	mvn.w	r3, #5
 801379a:	61fb      	str	r3, [r7, #28]
 801379c:	e02c      	b.n	80137f8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801379e:	69bb      	ldr	r3, [r7, #24]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d103      	bne.n	80137ac <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80137a4:	f06f 0303 	mvn.w	r3, #3
 80137a8:	61fb      	str	r3, [r7, #28]
 80137aa:	e025      	b.n	80137f8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d011      	beq.n	80137d6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80137b2:	6839      	ldr	r1, [r7, #0]
 80137b4:	69b8      	ldr	r0, [r7, #24]
 80137b6:	f000 fe2a 	bl	801440e <xQueueTakeMutexRecursive>
 80137ba:	4603      	mov	r3, r0
 80137bc:	2b01      	cmp	r3, #1
 80137be:	d01b      	beq.n	80137f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d003      	beq.n	80137ce <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80137c6:	f06f 0301 	mvn.w	r3, #1
 80137ca:	61fb      	str	r3, [r7, #28]
 80137cc:	e014      	b.n	80137f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80137ce:	f06f 0302 	mvn.w	r3, #2
 80137d2:	61fb      	str	r3, [r7, #28]
 80137d4:	e010      	b.n	80137f8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80137d6:	6839      	ldr	r1, [r7, #0]
 80137d8:	69b8      	ldr	r0, [r7, #24]
 80137da:	f001 f9cf 	bl	8014b7c <xQueueSemaphoreTake>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b01      	cmp	r3, #1
 80137e2:	d009      	beq.n	80137f8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80137e4:	683b      	ldr	r3, [r7, #0]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d003      	beq.n	80137f2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80137ea:	f06f 0301 	mvn.w	r3, #1
 80137ee:	61fb      	str	r3, [r7, #28]
 80137f0:	e002      	b.n	80137f8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80137f2:	f06f 0302 	mvn.w	r3, #2
 80137f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80137f8:	69fb      	ldr	r3, [r7, #28]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3720      	adds	r7, #32
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	2000046c 	.word	0x2000046c

08013808 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8013808:	b580      	push	{r7, lr}
 801380a:	b088      	sub	sp, #32
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f023 0301 	bic.w	r3, r3, #1
 8013816:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f003 0301 	and.w	r3, r3, #1
 801381e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013820:	2300      	movs	r3, #0
 8013822:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013824:	f3ef 8305 	mrs	r3, IPSR
 8013828:	613b      	str	r3, [r7, #16]
  return(result);
 801382a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801382c:	2b00      	cmp	r3, #0
 801382e:	d10f      	bne.n	8013850 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013830:	f3ef 8310 	mrs	r3, PRIMASK
 8013834:	60fb      	str	r3, [r7, #12]
  return(result);
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d105      	bne.n	8013848 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801383c:	f3ef 8311 	mrs	r3, BASEPRI
 8013840:	60bb      	str	r3, [r7, #8]
  return(result);
 8013842:	68bb      	ldr	r3, [r7, #8]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d007      	beq.n	8013858 <osMutexRelease+0x50>
 8013848:	4b16      	ldr	r3, [pc, #88]	; (80138a4 <osMutexRelease+0x9c>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	2b02      	cmp	r3, #2
 801384e:	d103      	bne.n	8013858 <osMutexRelease+0x50>
    stat = osErrorISR;
 8013850:	f06f 0305 	mvn.w	r3, #5
 8013854:	61fb      	str	r3, [r7, #28]
 8013856:	e01f      	b.n	8013898 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8013858:	69bb      	ldr	r3, [r7, #24]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d103      	bne.n	8013866 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801385e:	f06f 0303 	mvn.w	r3, #3
 8013862:	61fb      	str	r3, [r7, #28]
 8013864:	e018      	b.n	8013898 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d009      	beq.n	8013880 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801386c:	69b8      	ldr	r0, [r7, #24]
 801386e:	f000 fd99 	bl	80143a4 <xQueueGiveMutexRecursive>
 8013872:	4603      	mov	r3, r0
 8013874:	2b01      	cmp	r3, #1
 8013876:	d00f      	beq.n	8013898 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013878:	f06f 0302 	mvn.w	r3, #2
 801387c:	61fb      	str	r3, [r7, #28]
 801387e:	e00b      	b.n	8013898 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8013880:	2300      	movs	r3, #0
 8013882:	2200      	movs	r2, #0
 8013884:	2100      	movs	r1, #0
 8013886:	69b8      	ldr	r0, [r7, #24]
 8013888:	f000 fe66 	bl	8014558 <xQueueGenericSend>
 801388c:	4603      	mov	r3, r0
 801388e:	2b01      	cmp	r3, #1
 8013890:	d002      	beq.n	8013898 <osMutexRelease+0x90>
        stat = osErrorResource;
 8013892:	f06f 0302 	mvn.w	r3, #2
 8013896:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8013898:	69fb      	ldr	r3, [r7, #28]
}
 801389a:	4618      	mov	r0, r3
 801389c:	3720      	adds	r7, #32
 801389e:	46bd      	mov	sp, r7
 80138a0:	bd80      	pop	{r7, pc}
 80138a2:	bf00      	nop
 80138a4:	2000046c 	.word	0x2000046c

080138a8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80138a8:	b580      	push	{r7, lr}
 80138aa:	b08c      	sub	sp, #48	; 0x30
 80138ac:	af02      	add	r7, sp, #8
 80138ae:	60f8      	str	r0, [r7, #12]
 80138b0:	60b9      	str	r1, [r7, #8]
 80138b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80138b4:	2300      	movs	r3, #0
 80138b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80138b8:	f3ef 8305 	mrs	r3, IPSR
 80138bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80138be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	f040 8087 	bne.w	80139d4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80138c6:	f3ef 8310 	mrs	r3, PRIMASK
 80138ca:	617b      	str	r3, [r7, #20]
  return(result);
 80138cc:	697b      	ldr	r3, [r7, #20]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d105      	bne.n	80138de <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80138d2:	f3ef 8311 	mrs	r3, BASEPRI
 80138d6:	613b      	str	r3, [r7, #16]
  return(result);
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d003      	beq.n	80138e6 <osSemaphoreNew+0x3e>
 80138de:	4b40      	ldr	r3, [pc, #256]	; (80139e0 <osSemaphoreNew+0x138>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	2b02      	cmp	r3, #2
 80138e4:	d076      	beq.n	80139d4 <osSemaphoreNew+0x12c>
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d073      	beq.n	80139d4 <osSemaphoreNew+0x12c>
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	d86f      	bhi.n	80139d4 <osSemaphoreNew+0x12c>
    mem = -1;
 80138f4:	f04f 33ff 	mov.w	r3, #4294967295
 80138f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d015      	beq.n	801392c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	689b      	ldr	r3, [r3, #8]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d006      	beq.n	8013916 <osSemaphoreNew+0x6e>
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	2b4f      	cmp	r3, #79	; 0x4f
 801390e:	d902      	bls.n	8013916 <osSemaphoreNew+0x6e>
        mem = 1;
 8013910:	2301      	movs	r3, #1
 8013912:	623b      	str	r3, [r7, #32]
 8013914:	e00c      	b.n	8013930 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	689b      	ldr	r3, [r3, #8]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d108      	bne.n	8013930 <osSemaphoreNew+0x88>
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	68db      	ldr	r3, [r3, #12]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d104      	bne.n	8013930 <osSemaphoreNew+0x88>
          mem = 0;
 8013926:	2300      	movs	r3, #0
 8013928:	623b      	str	r3, [r7, #32]
 801392a:	e001      	b.n	8013930 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801392c:	2300      	movs	r3, #0
 801392e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8013930:	6a3b      	ldr	r3, [r7, #32]
 8013932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013936:	d04d      	beq.n	80139d4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b01      	cmp	r3, #1
 801393c:	d129      	bne.n	8013992 <osSemaphoreNew+0xea>
        if (mem == 1) {
 801393e:	6a3b      	ldr	r3, [r7, #32]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d10b      	bne.n	801395c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	689a      	ldr	r2, [r3, #8]
 8013948:	2303      	movs	r3, #3
 801394a:	9300      	str	r3, [sp, #0]
 801394c:	4613      	mov	r3, r2
 801394e:	2200      	movs	r2, #0
 8013950:	2100      	movs	r1, #0
 8013952:	2001      	movs	r0, #1
 8013954:	f000 fbf8 	bl	8014148 <xQueueGenericCreateStatic>
 8013958:	6278      	str	r0, [r7, #36]	; 0x24
 801395a:	e005      	b.n	8013968 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801395c:	2203      	movs	r2, #3
 801395e:	2100      	movs	r1, #0
 8013960:	2001      	movs	r0, #1
 8013962:	f000 fc6e 	bl	8014242 <xQueueGenericCreate>
 8013966:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8013968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801396a:	2b00      	cmp	r3, #0
 801396c:	d022      	beq.n	80139b4 <osSemaphoreNew+0x10c>
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d01f      	beq.n	80139b4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013974:	2300      	movs	r3, #0
 8013976:	2200      	movs	r2, #0
 8013978:	2100      	movs	r1, #0
 801397a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801397c:	f000 fdec 	bl	8014558 <xQueueGenericSend>
 8013980:	4603      	mov	r3, r0
 8013982:	2b01      	cmp	r3, #1
 8013984:	d016      	beq.n	80139b4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8013986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013988:	f001 fa8b 	bl	8014ea2 <vQueueDelete>
            hSemaphore = NULL;
 801398c:	2300      	movs	r3, #0
 801398e:	627b      	str	r3, [r7, #36]	; 0x24
 8013990:	e010      	b.n	80139b4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8013992:	6a3b      	ldr	r3, [r7, #32]
 8013994:	2b01      	cmp	r3, #1
 8013996:	d108      	bne.n	80139aa <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	461a      	mov	r2, r3
 801399e:	68b9      	ldr	r1, [r7, #8]
 80139a0:	68f8      	ldr	r0, [r7, #12]
 80139a2:	f000 fd6b 	bl	801447c <xQueueCreateCountingSemaphoreStatic>
 80139a6:	6278      	str	r0, [r7, #36]	; 0x24
 80139a8:	e004      	b.n	80139b4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80139aa:	68b9      	ldr	r1, [r7, #8]
 80139ac:	68f8      	ldr	r0, [r7, #12]
 80139ae:	f000 fd9e 	bl	80144ee <xQueueCreateCountingSemaphore>
 80139b2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80139b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d00c      	beq.n	80139d4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d003      	beq.n	80139c8 <osSemaphoreNew+0x120>
          name = attr->name;
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	61fb      	str	r3, [r7, #28]
 80139c6:	e001      	b.n	80139cc <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80139c8:	2300      	movs	r3, #0
 80139ca:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80139cc:	69f9      	ldr	r1, [r7, #28]
 80139ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80139d0:	f001 fbb4 	bl	801513c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80139d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80139d6:	4618      	mov	r0, r3
 80139d8:	3728      	adds	r7, #40	; 0x28
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}
 80139de:	bf00      	nop
 80139e0:	2000046c 	.word	0x2000046c

080139e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b088      	sub	sp, #32
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80139f2:	2300      	movs	r3, #0
 80139f4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80139f6:	69bb      	ldr	r3, [r7, #24]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d103      	bne.n	8013a04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80139fc:	f06f 0303 	mvn.w	r3, #3
 8013a00:	61fb      	str	r3, [r7, #28]
 8013a02:	e04b      	b.n	8013a9c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a04:	f3ef 8305 	mrs	r3, IPSR
 8013a08:	617b      	str	r3, [r7, #20]
  return(result);
 8013a0a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d10f      	bne.n	8013a30 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a10:	f3ef 8310 	mrs	r3, PRIMASK
 8013a14:	613b      	str	r3, [r7, #16]
  return(result);
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d105      	bne.n	8013a28 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8013a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d026      	beq.n	8013a76 <osSemaphoreAcquire+0x92>
 8013a28:	4b1f      	ldr	r3, [pc, #124]	; (8013aa8 <osSemaphoreAcquire+0xc4>)
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b02      	cmp	r3, #2
 8013a2e:	d122      	bne.n	8013a76 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d003      	beq.n	8013a3e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8013a36:	f06f 0303 	mvn.w	r3, #3
 8013a3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8013a3c:	e02d      	b.n	8013a9a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8013a42:	f107 0308 	add.w	r3, r7, #8
 8013a46:	461a      	mov	r2, r3
 8013a48:	2100      	movs	r1, #0
 8013a4a:	69b8      	ldr	r0, [r7, #24]
 8013a4c:	f001 f9a6 	bl	8014d9c <xQueueReceiveFromISR>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b01      	cmp	r3, #1
 8013a54:	d003      	beq.n	8013a5e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8013a56:	f06f 0302 	mvn.w	r3, #2
 8013a5a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8013a5c:	e01d      	b.n	8013a9a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d01a      	beq.n	8013a9a <osSemaphoreAcquire+0xb6>
 8013a64:	4b11      	ldr	r3, [pc, #68]	; (8013aac <osSemaphoreAcquire+0xc8>)
 8013a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a6a:	601a      	str	r2, [r3, #0]
 8013a6c:	f3bf 8f4f 	dsb	sy
 8013a70:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8013a74:	e011      	b.n	8013a9a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8013a76:	6839      	ldr	r1, [r7, #0]
 8013a78:	69b8      	ldr	r0, [r7, #24]
 8013a7a:	f001 f87f 	bl	8014b7c <xQueueSemaphoreTake>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d00b      	beq.n	8013a9c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d003      	beq.n	8013a92 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8013a8a:	f06f 0301 	mvn.w	r3, #1
 8013a8e:	61fb      	str	r3, [r7, #28]
 8013a90:	e004      	b.n	8013a9c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8013a92:	f06f 0302 	mvn.w	r3, #2
 8013a96:	61fb      	str	r3, [r7, #28]
 8013a98:	e000      	b.n	8013a9c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8013a9a:	bf00      	nop
      }
    }
  }

  return (stat);
 8013a9c:	69fb      	ldr	r3, [r7, #28]
}
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	3720      	adds	r7, #32
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	2000046c 	.word	0x2000046c
 8013aac:	e000ed04 	.word	0xe000ed04

08013ab0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b088      	sub	sp, #32
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013abc:	2300      	movs	r3, #0
 8013abe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d103      	bne.n	8013ace <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8013ac6:	f06f 0303 	mvn.w	r3, #3
 8013aca:	61fb      	str	r3, [r7, #28]
 8013acc:	e03e      	b.n	8013b4c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ace:	f3ef 8305 	mrs	r3, IPSR
 8013ad2:	617b      	str	r3, [r7, #20]
  return(result);
 8013ad4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d10f      	bne.n	8013afa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ada:	f3ef 8310 	mrs	r3, PRIMASK
 8013ade:	613b      	str	r3, [r7, #16]
  return(result);
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d105      	bne.n	8013af2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8013aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d01e      	beq.n	8013b30 <osSemaphoreRelease+0x80>
 8013af2:	4b19      	ldr	r3, [pc, #100]	; (8013b58 <osSemaphoreRelease+0xa8>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	2b02      	cmp	r3, #2
 8013af8:	d11a      	bne.n	8013b30 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8013afa:	2300      	movs	r3, #0
 8013afc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013afe:	f107 0308 	add.w	r3, r7, #8
 8013b02:	4619      	mov	r1, r3
 8013b04:	69b8      	ldr	r0, [r7, #24]
 8013b06:	f000 fec5 	bl	8014894 <xQueueGiveFromISR>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d003      	beq.n	8013b18 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8013b10:	f06f 0302 	mvn.w	r3, #2
 8013b14:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013b16:	e018      	b.n	8013b4a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d015      	beq.n	8013b4a <osSemaphoreRelease+0x9a>
 8013b1e:	4b0f      	ldr	r3, [pc, #60]	; (8013b5c <osSemaphoreRelease+0xac>)
 8013b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b24:	601a      	str	r2, [r3, #0]
 8013b26:	f3bf 8f4f 	dsb	sy
 8013b2a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013b2e:	e00c      	b.n	8013b4a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013b30:	2300      	movs	r3, #0
 8013b32:	2200      	movs	r2, #0
 8013b34:	2100      	movs	r1, #0
 8013b36:	69b8      	ldr	r0, [r7, #24]
 8013b38:	f000 fd0e 	bl	8014558 <xQueueGenericSend>
 8013b3c:	4603      	mov	r3, r0
 8013b3e:	2b01      	cmp	r3, #1
 8013b40:	d004      	beq.n	8013b4c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8013b42:	f06f 0302 	mvn.w	r3, #2
 8013b46:	61fb      	str	r3, [r7, #28]
 8013b48:	e000      	b.n	8013b4c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013b4a:	bf00      	nop
    }
  }

  return (stat);
 8013b4c:	69fb      	ldr	r3, [r7, #28]
}
 8013b4e:	4618      	mov	r0, r3
 8013b50:	3720      	adds	r7, #32
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	2000046c 	.word	0x2000046c
 8013b5c:	e000ed04 	.word	0xe000ed04

08013b60 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b088      	sub	sp, #32
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b6c:	f3ef 8305 	mrs	r3, IPSR
 8013b70:	617b      	str	r3, [r7, #20]
  return(result);
 8013b72:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d10f      	bne.n	8013b98 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b78:	f3ef 8310 	mrs	r3, PRIMASK
 8013b7c:	613b      	str	r3, [r7, #16]
  return(result);
 8013b7e:	693b      	ldr	r3, [r7, #16]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d105      	bne.n	8013b90 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b84:	f3ef 8311 	mrs	r3, BASEPRI
 8013b88:	60fb      	str	r3, [r7, #12]
  return(result);
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d007      	beq.n	8013ba0 <osSemaphoreDelete+0x40>
 8013b90:	4b0d      	ldr	r3, [pc, #52]	; (8013bc8 <osSemaphoreDelete+0x68>)
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	2b02      	cmp	r3, #2
 8013b96:	d103      	bne.n	8013ba0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8013b98:	f06f 0305 	mvn.w	r3, #5
 8013b9c:	61fb      	str	r3, [r7, #28]
 8013b9e:	e00e      	b.n	8013bbe <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8013ba0:	69bb      	ldr	r3, [r7, #24]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d103      	bne.n	8013bae <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8013ba6:	f06f 0303 	mvn.w	r3, #3
 8013baa:	61fb      	str	r3, [r7, #28]
 8013bac:	e007      	b.n	8013bbe <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8013bae:	69b8      	ldr	r0, [r7, #24]
 8013bb0:	f001 faec 	bl	801518c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8013bb8:	69b8      	ldr	r0, [r7, #24]
 8013bba:	f001 f972 	bl	8014ea2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8013bbe:	69fb      	ldr	r3, [r7, #28]
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3720      	adds	r7, #32
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	2000046c 	.word	0x2000046c

08013bcc <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08c      	sub	sp, #48	; 0x30
 8013bd0:	af02      	add	r7, sp, #8
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013bdc:	f3ef 8305 	mrs	r3, IPSR
 8013be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8013be2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d170      	bne.n	8013cca <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013be8:	f3ef 8310 	mrs	r3, PRIMASK
 8013bec:	617b      	str	r3, [r7, #20]
  return(result);
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d105      	bne.n	8013c00 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013bf4:	f3ef 8311 	mrs	r3, BASEPRI
 8013bf8:	613b      	str	r3, [r7, #16]
  return(result);
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d003      	beq.n	8013c08 <osMessageQueueNew+0x3c>
 8013c00:	4b34      	ldr	r3, [pc, #208]	; (8013cd4 <osMessageQueueNew+0x108>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	2b02      	cmp	r3, #2
 8013c06:	d060      	beq.n	8013cca <osMessageQueueNew+0xfe>
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d05d      	beq.n	8013cca <osMessageQueueNew+0xfe>
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d05a      	beq.n	8013cca <osMessageQueueNew+0xfe>
    mem = -1;
 8013c14:	f04f 33ff 	mov.w	r3, #4294967295
 8013c18:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d029      	beq.n	8013c74 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	689b      	ldr	r3, [r3, #8]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d012      	beq.n	8013c4e <osMessageQueueNew+0x82>
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	68db      	ldr	r3, [r3, #12]
 8013c2c:	2b4f      	cmp	r3, #79	; 0x4f
 8013c2e:	d90e      	bls.n	8013c4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d00a      	beq.n	8013c4e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	695a      	ldr	r2, [r3, #20]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	68b9      	ldr	r1, [r7, #8]
 8013c40:	fb01 f303 	mul.w	r3, r1, r3
 8013c44:	429a      	cmp	r2, r3
 8013c46:	d302      	bcc.n	8013c4e <osMessageQueueNew+0x82>
        mem = 1;
 8013c48:	2301      	movs	r3, #1
 8013c4a:	623b      	str	r3, [r7, #32]
 8013c4c:	e014      	b.n	8013c78 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	689b      	ldr	r3, [r3, #8]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d110      	bne.n	8013c78 <osMessageQueueNew+0xac>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d10c      	bne.n	8013c78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d108      	bne.n	8013c78 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	695b      	ldr	r3, [r3, #20]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d104      	bne.n	8013c78 <osMessageQueueNew+0xac>
          mem = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	623b      	str	r3, [r7, #32]
 8013c72:	e001      	b.n	8013c78 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013c78:	6a3b      	ldr	r3, [r7, #32]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d10c      	bne.n	8013c98 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	691a      	ldr	r2, [r3, #16]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6899      	ldr	r1, [r3, #8]
 8013c86:	2300      	movs	r3, #0
 8013c88:	9300      	str	r3, [sp, #0]
 8013c8a:	460b      	mov	r3, r1
 8013c8c:	68b9      	ldr	r1, [r7, #8]
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f000 fa5a 	bl	8014148 <xQueueGenericCreateStatic>
 8013c94:	6278      	str	r0, [r7, #36]	; 0x24
 8013c96:	e008      	b.n	8013caa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013c98:	6a3b      	ldr	r3, [r7, #32]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d105      	bne.n	8013caa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	68b9      	ldr	r1, [r7, #8]
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f000 facd 	bl	8014242 <xQueueGenericCreate>
 8013ca8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00c      	beq.n	8013cca <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d003      	beq.n	8013cbe <osMessageQueueNew+0xf2>
        name = attr->name;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	61fb      	str	r3, [r7, #28]
 8013cbc:	e001      	b.n	8013cc2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013cc2:	69f9      	ldr	r1, [r7, #28]
 8013cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cc6:	f001 fa39 	bl	801513c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3728      	adds	r7, #40	; 0x28
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	2000046c 	.word	0x2000046c

08013cd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b08a      	sub	sp, #40	; 0x28
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	603b      	str	r3, [r7, #0]
 8013ce4:	4613      	mov	r3, r2
 8013ce6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013cec:	2300      	movs	r3, #0
 8013cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cf0:	f3ef 8305 	mrs	r3, IPSR
 8013cf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8013cf6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d10f      	bne.n	8013d1c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8013d00:	61bb      	str	r3, [r7, #24]
  return(result);
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d105      	bne.n	8013d14 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013d08:	f3ef 8311 	mrs	r3, BASEPRI
 8013d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d02c      	beq.n	8013d6e <osMessageQueuePut+0x96>
 8013d14:	4b28      	ldr	r3, [pc, #160]	; (8013db8 <osMessageQueuePut+0xe0>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	2b02      	cmp	r3, #2
 8013d1a:	d128      	bne.n	8013d6e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d1c:	6a3b      	ldr	r3, [r7, #32]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d005      	beq.n	8013d2e <osMessageQueuePut+0x56>
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d002      	beq.n	8013d2e <osMessageQueuePut+0x56>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d003      	beq.n	8013d36 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013d2e:	f06f 0303 	mvn.w	r3, #3
 8013d32:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d34:	e039      	b.n	8013daa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013d36:	2300      	movs	r3, #0
 8013d38:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013d3a:	f107 0210 	add.w	r2, r7, #16
 8013d3e:	2300      	movs	r3, #0
 8013d40:	68b9      	ldr	r1, [r7, #8]
 8013d42:	6a38      	ldr	r0, [r7, #32]
 8013d44:	f000 fd0a 	bl	801475c <xQueueGenericSendFromISR>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	2b01      	cmp	r3, #1
 8013d4c:	d003      	beq.n	8013d56 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013d4e:	f06f 0302 	mvn.w	r3, #2
 8013d52:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d54:	e029      	b.n	8013daa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d026      	beq.n	8013daa <osMessageQueuePut+0xd2>
 8013d5c:	4b17      	ldr	r3, [pc, #92]	; (8013dbc <osMessageQueuePut+0xe4>)
 8013d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d62:	601a      	str	r2, [r3, #0]
 8013d64:	f3bf 8f4f 	dsb	sy
 8013d68:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013d6c:	e01d      	b.n	8013daa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013d6e:	6a3b      	ldr	r3, [r7, #32]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <osMessageQueuePut+0xa2>
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d103      	bne.n	8013d82 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013d7a:	f06f 0303 	mvn.w	r3, #3
 8013d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8013d80:	e014      	b.n	8013dac <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013d82:	2300      	movs	r3, #0
 8013d84:	683a      	ldr	r2, [r7, #0]
 8013d86:	68b9      	ldr	r1, [r7, #8]
 8013d88:	6a38      	ldr	r0, [r7, #32]
 8013d8a:	f000 fbe5 	bl	8014558 <xQueueGenericSend>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d00b      	beq.n	8013dac <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d003      	beq.n	8013da2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013d9a:	f06f 0301 	mvn.w	r3, #1
 8013d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8013da0:	e004      	b.n	8013dac <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013da2:	f06f 0302 	mvn.w	r3, #2
 8013da6:	627b      	str	r3, [r7, #36]	; 0x24
 8013da8:	e000      	b.n	8013dac <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013daa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3728      	adds	r7, #40	; 0x28
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}
 8013db6:	bf00      	nop
 8013db8:	2000046c 	.word	0x2000046c
 8013dbc:	e000ed04 	.word	0xe000ed04

08013dc0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b08a      	sub	sp, #40	; 0x28
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	607a      	str	r2, [r7, #4]
 8013dcc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013dd6:	f3ef 8305 	mrs	r3, IPSR
 8013dda:	61fb      	str	r3, [r7, #28]
  return(result);
 8013ddc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d10f      	bne.n	8013e02 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013de2:	f3ef 8310 	mrs	r3, PRIMASK
 8013de6:	61bb      	str	r3, [r7, #24]
  return(result);
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d105      	bne.n	8013dfa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013dee:	f3ef 8311 	mrs	r3, BASEPRI
 8013df2:	617b      	str	r3, [r7, #20]
  return(result);
 8013df4:	697b      	ldr	r3, [r7, #20]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d02c      	beq.n	8013e54 <osMessageQueueGet+0x94>
 8013dfa:	4b28      	ldr	r3, [pc, #160]	; (8013e9c <osMessageQueueGet+0xdc>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b02      	cmp	r3, #2
 8013e00:	d128      	bne.n	8013e54 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e02:	6a3b      	ldr	r3, [r7, #32]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d005      	beq.n	8013e14 <osMessageQueueGet+0x54>
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d002      	beq.n	8013e14 <osMessageQueueGet+0x54>
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d003      	beq.n	8013e1c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013e14:	f06f 0303 	mvn.w	r3, #3
 8013e18:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e1a:	e038      	b.n	8013e8e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013e20:	f107 0310 	add.w	r3, r7, #16
 8013e24:	461a      	mov	r2, r3
 8013e26:	68b9      	ldr	r1, [r7, #8]
 8013e28:	6a38      	ldr	r0, [r7, #32]
 8013e2a:	f000 ffb7 	bl	8014d9c <xQueueReceiveFromISR>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	2b01      	cmp	r3, #1
 8013e32:	d003      	beq.n	8013e3c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013e34:	f06f 0302 	mvn.w	r3, #2
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e3a:	e028      	b.n	8013e8e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d025      	beq.n	8013e8e <osMessageQueueGet+0xce>
 8013e42:	4b17      	ldr	r3, [pc, #92]	; (8013ea0 <osMessageQueueGet+0xe0>)
 8013e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e48:	601a      	str	r2, [r3, #0]
 8013e4a:	f3bf 8f4f 	dsb	sy
 8013e4e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e52:	e01c      	b.n	8013e8e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013e54:	6a3b      	ldr	r3, [r7, #32]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d002      	beq.n	8013e60 <osMessageQueueGet+0xa0>
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d103      	bne.n	8013e68 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013e60:	f06f 0303 	mvn.w	r3, #3
 8013e64:	627b      	str	r3, [r7, #36]	; 0x24
 8013e66:	e013      	b.n	8013e90 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	6a38      	ldr	r0, [r7, #32]
 8013e6e:	f000 fda3 	bl	80149b8 <xQueueReceive>
 8013e72:	4603      	mov	r3, r0
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d00b      	beq.n	8013e90 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d003      	beq.n	8013e86 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013e7e:	f06f 0301 	mvn.w	r3, #1
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
 8013e84:	e004      	b.n	8013e90 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013e86:	f06f 0302 	mvn.w	r3, #2
 8013e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8013e8c:	e000      	b.n	8013e90 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013e8e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013e92:	4618      	mov	r0, r3
 8013e94:	3728      	adds	r7, #40	; 0x28
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}
 8013e9a:	bf00      	nop
 8013e9c:	2000046c 	.word	0x2000046c
 8013ea0:	e000ed04 	.word	0xe000ed04

08013ea4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013ea4:	b480      	push	{r7}
 8013ea6:	b085      	sub	sp, #20
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	4a07      	ldr	r2, [pc, #28]	; (8013ed0 <vApplicationGetIdleTaskMemory+0x2c>)
 8013eb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	4a06      	ldr	r2, [pc, #24]	; (8013ed4 <vApplicationGetIdleTaskMemory+0x30>)
 8013eba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	2280      	movs	r2, #128	; 0x80
 8013ec0:	601a      	str	r2, [r3, #0]
}
 8013ec2:	bf00      	nop
 8013ec4:	3714      	adds	r7, #20
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	20000470 	.word	0x20000470
 8013ed4:	200004cc 	.word	0x200004cc

08013ed8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	60f8      	str	r0, [r7, #12]
 8013ee0:	60b9      	str	r1, [r7, #8]
 8013ee2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	4a07      	ldr	r2, [pc, #28]	; (8013f04 <vApplicationGetTimerTaskMemory+0x2c>)
 8013ee8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	4a06      	ldr	r2, [pc, #24]	; (8013f08 <vApplicationGetTimerTaskMemory+0x30>)
 8013eee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ef6:	601a      	str	r2, [r3, #0]
}
 8013ef8:	bf00      	nop
 8013efa:	3714      	adds	r7, #20
 8013efc:	46bd      	mov	sp, r7
 8013efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f02:	4770      	bx	lr
 8013f04:	200006cc 	.word	0x200006cc
 8013f08:	20000728 	.word	0x20000728

08013f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b083      	sub	sp, #12
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f103 0208 	add.w	r2, r3, #8
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f04f 32ff 	mov.w	r2, #4294967295
 8013f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	f103 0208 	add.w	r2, r3, #8
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f103 0208 	add.w	r2, r3, #8
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2200      	movs	r2, #0
 8013f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013f40:	bf00      	nop
 8013f42:	370c      	adds	r7, #12
 8013f44:	46bd      	mov	sp, r7
 8013f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4a:	4770      	bx	lr

08013f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013f4c:	b480      	push	{r7}
 8013f4e:	b083      	sub	sp, #12
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2200      	movs	r2, #0
 8013f58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013f5a:	bf00      	nop
 8013f5c:	370c      	adds	r7, #12
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f64:	4770      	bx	lr

08013f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013f66:	b480      	push	{r7}
 8013f68:	b085      	sub	sp, #20
 8013f6a:	af00      	add	r7, sp, #0
 8013f6c:	6078      	str	r0, [r7, #4]
 8013f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	685b      	ldr	r3, [r3, #4]
 8013f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	68fa      	ldr	r2, [r7, #12]
 8013f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	689a      	ldr	r2, [r3, #8]
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	683a      	ldr	r2, [r7, #0]
 8013f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	683a      	ldr	r2, [r7, #0]
 8013f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	687a      	ldr	r2, [r7, #4]
 8013f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	1c5a      	adds	r2, r3, #1
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	601a      	str	r2, [r3, #0]
}
 8013fa2:	bf00      	nop
 8013fa4:	3714      	adds	r7, #20
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr

08013fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013fae:	b480      	push	{r7}
 8013fb0:	b085      	sub	sp, #20
 8013fb2:	af00      	add	r7, sp, #0
 8013fb4:	6078      	str	r0, [r7, #4]
 8013fb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013fc4:	d103      	bne.n	8013fce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	691b      	ldr	r3, [r3, #16]
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e00c      	b.n	8013fe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	3308      	adds	r3, #8
 8013fd2:	60fb      	str	r3, [r7, #12]
 8013fd4:	e002      	b.n	8013fdc <vListInsert+0x2e>
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	685b      	ldr	r3, [r3, #4]
 8013fda:	60fb      	str	r3, [r7, #12]
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	68ba      	ldr	r2, [r7, #8]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d2f6      	bcs.n	8013fd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	685a      	ldr	r2, [r3, #4]
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	685b      	ldr	r3, [r3, #4]
 8013ff4:	683a      	ldr	r2, [r7, #0]
 8013ff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	68fa      	ldr	r2, [r7, #12]
 8013ffc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	683a      	ldr	r2, [r7, #0]
 8014002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	1c5a      	adds	r2, r3, #1
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	601a      	str	r2, [r3, #0]
}
 8014014:	bf00      	nop
 8014016:	3714      	adds	r7, #20
 8014018:	46bd      	mov	sp, r7
 801401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401e:	4770      	bx	lr

08014020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014020:	b480      	push	{r7}
 8014022:	b085      	sub	sp, #20
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	691b      	ldr	r3, [r3, #16]
 801402c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	6892      	ldr	r2, [r2, #8]
 8014036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	689b      	ldr	r3, [r3, #8]
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	6852      	ldr	r2, [r2, #4]
 8014040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	687a      	ldr	r2, [r7, #4]
 8014048:	429a      	cmp	r2, r3
 801404a:	d103      	bne.n	8014054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	689a      	ldr	r2, [r3, #8]
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	1e5a      	subs	r2, r3, #1
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	681b      	ldr	r3, [r3, #0]
}
 8014068:	4618      	mov	r0, r3
 801406a:	3714      	adds	r7, #20
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr

08014074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
 801407c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d10b      	bne.n	80140a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408c:	b672      	cpsid	i
 801408e:	f383 8811 	msr	BASEPRI, r3
 8014092:	f3bf 8f6f 	isb	sy
 8014096:	f3bf 8f4f 	dsb	sy
 801409a:	b662      	cpsie	i
 801409c:	60bb      	str	r3, [r7, #8]
 801409e:	e7fe      	b.n	801409e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80140a0:	f002 fdda 	bl	8016c58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140b0:	fb01 f303 	mul.w	r3, r1, r3
 80140b4:	441a      	add	r2, r3
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2200      	movs	r2, #0
 80140be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	681a      	ldr	r2, [r3, #0]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140d0:	3b01      	subs	r3, #1
 80140d2:	68f9      	ldr	r1, [r7, #12]
 80140d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80140d6:	fb01 f303 	mul.w	r3, r1, r3
 80140da:	441a      	add	r2, r3
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	22ff      	movs	r2, #255	; 0xff
 80140e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	22ff      	movs	r2, #255	; 0xff
 80140ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d114      	bne.n	8014120 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	691b      	ldr	r3, [r3, #16]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d01a      	beq.n	8014134 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	3310      	adds	r3, #16
 8014102:	4618      	mov	r0, r3
 8014104:	f001 fd9c 	bl	8015c40 <xTaskRemoveFromEventList>
 8014108:	4603      	mov	r3, r0
 801410a:	2b00      	cmp	r3, #0
 801410c:	d012      	beq.n	8014134 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801410e:	4b0d      	ldr	r3, [pc, #52]	; (8014144 <xQueueGenericReset+0xd0>)
 8014110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014114:	601a      	str	r2, [r3, #0]
 8014116:	f3bf 8f4f 	dsb	sy
 801411a:	f3bf 8f6f 	isb	sy
 801411e:	e009      	b.n	8014134 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	3310      	adds	r3, #16
 8014124:	4618      	mov	r0, r3
 8014126:	f7ff fef1 	bl	8013f0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	3324      	adds	r3, #36	; 0x24
 801412e:	4618      	mov	r0, r3
 8014130:	f7ff feec 	bl	8013f0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014134:	f002 fdc2 	bl	8016cbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014138:	2301      	movs	r3, #1
}
 801413a:	4618      	mov	r0, r3
 801413c:	3710      	adds	r7, #16
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	e000ed04 	.word	0xe000ed04

08014148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014148:	b580      	push	{r7, lr}
 801414a:	b08e      	sub	sp, #56	; 0x38
 801414c:	af02      	add	r7, sp, #8
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
 8014154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d10b      	bne.n	8014174 <xQueueGenericCreateStatic+0x2c>
 801415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014160:	b672      	cpsid	i
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	b662      	cpsie	i
 8014170:	62bb      	str	r3, [r7, #40]	; 0x28
 8014172:	e7fe      	b.n	8014172 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014174:	683b      	ldr	r3, [r7, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d10b      	bne.n	8014192 <xQueueGenericCreateStatic+0x4a>
 801417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417e:	b672      	cpsid	i
 8014180:	f383 8811 	msr	BASEPRI, r3
 8014184:	f3bf 8f6f 	isb	sy
 8014188:	f3bf 8f4f 	dsb	sy
 801418c:	b662      	cpsie	i
 801418e:	627b      	str	r3, [r7, #36]	; 0x24
 8014190:	e7fe      	b.n	8014190 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d002      	beq.n	801419e <xQueueGenericCreateStatic+0x56>
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d001      	beq.n	80141a2 <xQueueGenericCreateStatic+0x5a>
 801419e:	2301      	movs	r3, #1
 80141a0:	e000      	b.n	80141a4 <xQueueGenericCreateStatic+0x5c>
 80141a2:	2300      	movs	r3, #0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d10b      	bne.n	80141c0 <xQueueGenericCreateStatic+0x78>
 80141a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ac:	b672      	cpsid	i
 80141ae:	f383 8811 	msr	BASEPRI, r3
 80141b2:	f3bf 8f6f 	isb	sy
 80141b6:	f3bf 8f4f 	dsb	sy
 80141ba:	b662      	cpsie	i
 80141bc:	623b      	str	r3, [r7, #32]
 80141be:	e7fe      	b.n	80141be <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d102      	bne.n	80141cc <xQueueGenericCreateStatic+0x84>
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d101      	bne.n	80141d0 <xQueueGenericCreateStatic+0x88>
 80141cc:	2301      	movs	r3, #1
 80141ce:	e000      	b.n	80141d2 <xQueueGenericCreateStatic+0x8a>
 80141d0:	2300      	movs	r3, #0
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d10b      	bne.n	80141ee <xQueueGenericCreateStatic+0xa6>
 80141d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141da:	b672      	cpsid	i
 80141dc:	f383 8811 	msr	BASEPRI, r3
 80141e0:	f3bf 8f6f 	isb	sy
 80141e4:	f3bf 8f4f 	dsb	sy
 80141e8:	b662      	cpsie	i
 80141ea:	61fb      	str	r3, [r7, #28]
 80141ec:	e7fe      	b.n	80141ec <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80141ee:	2350      	movs	r3, #80	; 0x50
 80141f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	2b50      	cmp	r3, #80	; 0x50
 80141f6:	d00b      	beq.n	8014210 <xQueueGenericCreateStatic+0xc8>
 80141f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fc:	b672      	cpsid	i
 80141fe:	f383 8811 	msr	BASEPRI, r3
 8014202:	f3bf 8f6f 	isb	sy
 8014206:	f3bf 8f4f 	dsb	sy
 801420a:	b662      	cpsie	i
 801420c:	61bb      	str	r3, [r7, #24]
 801420e:	e7fe      	b.n	801420e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014210:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014218:	2b00      	cmp	r3, #0
 801421a:	d00d      	beq.n	8014238 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421e:	2201      	movs	r2, #1
 8014220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014224:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422a:	9300      	str	r3, [sp, #0]
 801422c:	4613      	mov	r3, r2
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	68b9      	ldr	r1, [r7, #8]
 8014232:	68f8      	ldr	r0, [r7, #12]
 8014234:	f000 f846 	bl	80142c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801423a:	4618      	mov	r0, r3
 801423c:	3730      	adds	r7, #48	; 0x30
 801423e:	46bd      	mov	sp, r7
 8014240:	bd80      	pop	{r7, pc}

08014242 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014242:	b580      	push	{r7, lr}
 8014244:	b08a      	sub	sp, #40	; 0x28
 8014246:	af02      	add	r7, sp, #8
 8014248:	60f8      	str	r0, [r7, #12]
 801424a:	60b9      	str	r1, [r7, #8]
 801424c:	4613      	mov	r3, r2
 801424e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d10b      	bne.n	801426e <xQueueGenericCreate+0x2c>
 8014256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801425a:	b672      	cpsid	i
 801425c:	f383 8811 	msr	BASEPRI, r3
 8014260:	f3bf 8f6f 	isb	sy
 8014264:	f3bf 8f4f 	dsb	sy
 8014268:	b662      	cpsie	i
 801426a:	613b      	str	r3, [r7, #16]
 801426c:	e7fe      	b.n	801426c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d102      	bne.n	801427a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014274:	2300      	movs	r3, #0
 8014276:	61fb      	str	r3, [r7, #28]
 8014278:	e004      	b.n	8014284 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	fb02 f303 	mul.w	r3, r2, r3
 8014282:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	3350      	adds	r3, #80	; 0x50
 8014288:	4618      	mov	r0, r3
 801428a:	f002 fe07 	bl	8016e9c <pvPortMalloc>
 801428e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014290:	69bb      	ldr	r3, [r7, #24]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d011      	beq.n	80142ba <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014296:	69bb      	ldr	r3, [r7, #24]
 8014298:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	3350      	adds	r3, #80	; 0x50
 801429e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80142a0:	69bb      	ldr	r3, [r7, #24]
 80142a2:	2200      	movs	r2, #0
 80142a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80142a8:	79fa      	ldrb	r2, [r7, #7]
 80142aa:	69bb      	ldr	r3, [r7, #24]
 80142ac:	9300      	str	r3, [sp, #0]
 80142ae:	4613      	mov	r3, r2
 80142b0:	697a      	ldr	r2, [r7, #20]
 80142b2:	68b9      	ldr	r1, [r7, #8]
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f000 f805 	bl	80142c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80142ba:	69bb      	ldr	r3, [r7, #24]
	}
 80142bc:	4618      	mov	r0, r3
 80142be:	3720      	adds	r7, #32
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	607a      	str	r2, [r7, #4]
 80142d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d103      	bne.n	80142e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80142d8:	69bb      	ldr	r3, [r7, #24]
 80142da:	69ba      	ldr	r2, [r7, #24]
 80142dc:	601a      	str	r2, [r3, #0]
 80142de:	e002      	b.n	80142e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80142e6:	69bb      	ldr	r3, [r7, #24]
 80142e8:	68fa      	ldr	r2, [r7, #12]
 80142ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80142ec:	69bb      	ldr	r3, [r7, #24]
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80142f2:	2101      	movs	r1, #1
 80142f4:	69b8      	ldr	r0, [r7, #24]
 80142f6:	f7ff febd 	bl	8014074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	78fa      	ldrb	r2, [r7, #3]
 80142fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014302:	bf00      	nop
 8014304:	3710      	adds	r7, #16
 8014306:	46bd      	mov	sp, r7
 8014308:	bd80      	pop	{r7, pc}

0801430a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801430a:	b580      	push	{r7, lr}
 801430c:	b082      	sub	sp, #8
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d00e      	beq.n	8014336 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2200      	movs	r2, #0
 801431c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2200      	movs	r2, #0
 8014322:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801432a:	2300      	movs	r3, #0
 801432c:	2200      	movs	r2, #0
 801432e:	2100      	movs	r1, #0
 8014330:	6878      	ldr	r0, [r7, #4]
 8014332:	f000 f911 	bl	8014558 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014336:	bf00      	nop
 8014338:	3708      	adds	r7, #8
 801433a:	46bd      	mov	sp, r7
 801433c:	bd80      	pop	{r7, pc}

0801433e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801433e:	b580      	push	{r7, lr}
 8014340:	b086      	sub	sp, #24
 8014342:	af00      	add	r7, sp, #0
 8014344:	4603      	mov	r3, r0
 8014346:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014348:	2301      	movs	r3, #1
 801434a:	617b      	str	r3, [r7, #20]
 801434c:	2300      	movs	r3, #0
 801434e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014350:	79fb      	ldrb	r3, [r7, #7]
 8014352:	461a      	mov	r2, r3
 8014354:	6939      	ldr	r1, [r7, #16]
 8014356:	6978      	ldr	r0, [r7, #20]
 8014358:	f7ff ff73 	bl	8014242 <xQueueGenericCreate>
 801435c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801435e:	68f8      	ldr	r0, [r7, #12]
 8014360:	f7ff ffd3 	bl	801430a <prvInitialiseMutex>

		return xNewQueue;
 8014364:	68fb      	ldr	r3, [r7, #12]
	}
 8014366:	4618      	mov	r0, r3
 8014368:	3718      	adds	r7, #24
 801436a:	46bd      	mov	sp, r7
 801436c:	bd80      	pop	{r7, pc}

0801436e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801436e:	b580      	push	{r7, lr}
 8014370:	b088      	sub	sp, #32
 8014372:	af02      	add	r7, sp, #8
 8014374:	4603      	mov	r3, r0
 8014376:	6039      	str	r1, [r7, #0]
 8014378:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801437a:	2301      	movs	r3, #1
 801437c:	617b      	str	r3, [r7, #20]
 801437e:	2300      	movs	r3, #0
 8014380:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014382:	79fb      	ldrb	r3, [r7, #7]
 8014384:	9300      	str	r3, [sp, #0]
 8014386:	683b      	ldr	r3, [r7, #0]
 8014388:	2200      	movs	r2, #0
 801438a:	6939      	ldr	r1, [r7, #16]
 801438c:	6978      	ldr	r0, [r7, #20]
 801438e:	f7ff fedb 	bl	8014148 <xQueueGenericCreateStatic>
 8014392:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014394:	68f8      	ldr	r0, [r7, #12]
 8014396:	f7ff ffb8 	bl	801430a <prvInitialiseMutex>

		return xNewQueue;
 801439a:	68fb      	ldr	r3, [r7, #12]
	}
 801439c:	4618      	mov	r0, r3
 801439e:	3718      	adds	r7, #24
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80143a4:	b590      	push	{r4, r7, lr}
 80143a6:	b087      	sub	sp, #28
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80143b0:	693b      	ldr	r3, [r7, #16]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d10b      	bne.n	80143ce <xQueueGiveMutexRecursive+0x2a>
 80143b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143ba:	b672      	cpsid	i
 80143bc:	f383 8811 	msr	BASEPRI, r3
 80143c0:	f3bf 8f6f 	isb	sy
 80143c4:	f3bf 8f4f 	dsb	sy
 80143c8:	b662      	cpsie	i
 80143ca:	60fb      	str	r3, [r7, #12]
 80143cc:	e7fe      	b.n	80143cc <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	689c      	ldr	r4, [r3, #8]
 80143d2:	f001 fdf3 	bl	8015fbc <xTaskGetCurrentTaskHandle>
 80143d6:	4603      	mov	r3, r0
 80143d8:	429c      	cmp	r4, r3
 80143da:	d111      	bne.n	8014400 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80143dc:	693b      	ldr	r3, [r7, #16]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	1e5a      	subs	r2, r3, #1
 80143e2:	693b      	ldr	r3, [r7, #16]
 80143e4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d105      	bne.n	80143fa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80143ee:	2300      	movs	r3, #0
 80143f0:	2200      	movs	r2, #0
 80143f2:	2100      	movs	r1, #0
 80143f4:	6938      	ldr	r0, [r7, #16]
 80143f6:	f000 f8af 	bl	8014558 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80143fa:	2301      	movs	r3, #1
 80143fc:	617b      	str	r3, [r7, #20]
 80143fe:	e001      	b.n	8014404 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8014400:	2300      	movs	r3, #0
 8014402:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8014404:	697b      	ldr	r3, [r7, #20]
	}
 8014406:	4618      	mov	r0, r3
 8014408:	371c      	adds	r7, #28
 801440a:	46bd      	mov	sp, r7
 801440c:	bd90      	pop	{r4, r7, pc}

0801440e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801440e:	b590      	push	{r4, r7, lr}
 8014410:	b087      	sub	sp, #28
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d10b      	bne.n	801443a <xQueueTakeMutexRecursive+0x2c>
 8014422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014426:	b672      	cpsid	i
 8014428:	f383 8811 	msr	BASEPRI, r3
 801442c:	f3bf 8f6f 	isb	sy
 8014430:	f3bf 8f4f 	dsb	sy
 8014434:	b662      	cpsie	i
 8014436:	60fb      	str	r3, [r7, #12]
 8014438:	e7fe      	b.n	8014438 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	689c      	ldr	r4, [r3, #8]
 801443e:	f001 fdbd 	bl	8015fbc <xTaskGetCurrentTaskHandle>
 8014442:	4603      	mov	r3, r0
 8014444:	429c      	cmp	r4, r3
 8014446:	d107      	bne.n	8014458 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	1c5a      	adds	r2, r3, #1
 801444e:	693b      	ldr	r3, [r7, #16]
 8014450:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014452:	2301      	movs	r3, #1
 8014454:	617b      	str	r3, [r7, #20]
 8014456:	e00c      	b.n	8014472 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8014458:	6839      	ldr	r1, [r7, #0]
 801445a:	6938      	ldr	r0, [r7, #16]
 801445c:	f000 fb8e 	bl	8014b7c <xQueueSemaphoreTake>
 8014460:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d004      	beq.n	8014472 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014468:	693b      	ldr	r3, [r7, #16]
 801446a:	68db      	ldr	r3, [r3, #12]
 801446c:	1c5a      	adds	r2, r3, #1
 801446e:	693b      	ldr	r3, [r7, #16]
 8014470:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014472:	697b      	ldr	r3, [r7, #20]
	}
 8014474:	4618      	mov	r0, r3
 8014476:	371c      	adds	r7, #28
 8014478:	46bd      	mov	sp, r7
 801447a:	bd90      	pop	{r4, r7, pc}

0801447c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801447c:	b580      	push	{r7, lr}
 801447e:	b08a      	sub	sp, #40	; 0x28
 8014480:	af02      	add	r7, sp, #8
 8014482:	60f8      	str	r0, [r7, #12]
 8014484:	60b9      	str	r1, [r7, #8]
 8014486:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10b      	bne.n	80144a6 <xQueueCreateCountingSemaphoreStatic+0x2a>
 801448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014492:	b672      	cpsid	i
 8014494:	f383 8811 	msr	BASEPRI, r3
 8014498:	f3bf 8f6f 	isb	sy
 801449c:	f3bf 8f4f 	dsb	sy
 80144a0:	b662      	cpsie	i
 80144a2:	61bb      	str	r3, [r7, #24]
 80144a4:	e7fe      	b.n	80144a4 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80144a6:	68ba      	ldr	r2, [r7, #8]
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d90b      	bls.n	80144c6 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80144ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144b2:	b672      	cpsid	i
 80144b4:	f383 8811 	msr	BASEPRI, r3
 80144b8:	f3bf 8f6f 	isb	sy
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	b662      	cpsie	i
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e7fe      	b.n	80144c4 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80144c6:	2302      	movs	r3, #2
 80144c8:	9300      	str	r3, [sp, #0]
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2200      	movs	r2, #0
 80144ce:	2100      	movs	r1, #0
 80144d0:	68f8      	ldr	r0, [r7, #12]
 80144d2:	f7ff fe39 	bl	8014148 <xQueueGenericCreateStatic>
 80144d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d002      	beq.n	80144e4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80144e4:	69fb      	ldr	r3, [r7, #28]
	}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3720      	adds	r7, #32
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b086      	sub	sp, #24
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
 80144f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d10b      	bne.n	8014516 <xQueueCreateCountingSemaphore+0x28>
 80144fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014502:	b672      	cpsid	i
 8014504:	f383 8811 	msr	BASEPRI, r3
 8014508:	f3bf 8f6f 	isb	sy
 801450c:	f3bf 8f4f 	dsb	sy
 8014510:	b662      	cpsie	i
 8014512:	613b      	str	r3, [r7, #16]
 8014514:	e7fe      	b.n	8014514 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014516:	683a      	ldr	r2, [r7, #0]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	429a      	cmp	r2, r3
 801451c:	d90b      	bls.n	8014536 <xQueueCreateCountingSemaphore+0x48>
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	b672      	cpsid	i
 8014524:	f383 8811 	msr	BASEPRI, r3
 8014528:	f3bf 8f6f 	isb	sy
 801452c:	f3bf 8f4f 	dsb	sy
 8014530:	b662      	cpsie	i
 8014532:	60fb      	str	r3, [r7, #12]
 8014534:	e7fe      	b.n	8014534 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014536:	2202      	movs	r2, #2
 8014538:	2100      	movs	r1, #0
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7ff fe81 	bl	8014242 <xQueueGenericCreate>
 8014540:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014542:	697b      	ldr	r3, [r7, #20]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d002      	beq.n	801454e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014548:	697b      	ldr	r3, [r7, #20]
 801454a:	683a      	ldr	r2, [r7, #0]
 801454c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801454e:	697b      	ldr	r3, [r7, #20]
	}
 8014550:	4618      	mov	r0, r3
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b08e      	sub	sp, #56	; 0x38
 801455c:	af00      	add	r7, sp, #0
 801455e:	60f8      	str	r0, [r7, #12]
 8014560:	60b9      	str	r1, [r7, #8]
 8014562:	607a      	str	r2, [r7, #4]
 8014564:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014566:	2300      	movs	r3, #0
 8014568:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801456e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014570:	2b00      	cmp	r3, #0
 8014572:	d10b      	bne.n	801458c <xQueueGenericSend+0x34>
 8014574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014578:	b672      	cpsid	i
 801457a:	f383 8811 	msr	BASEPRI, r3
 801457e:	f3bf 8f6f 	isb	sy
 8014582:	f3bf 8f4f 	dsb	sy
 8014586:	b662      	cpsie	i
 8014588:	62bb      	str	r3, [r7, #40]	; 0x28
 801458a:	e7fe      	b.n	801458a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801458c:	68bb      	ldr	r3, [r7, #8]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d103      	bne.n	801459a <xQueueGenericSend+0x42>
 8014592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014596:	2b00      	cmp	r3, #0
 8014598:	d101      	bne.n	801459e <xQueueGenericSend+0x46>
 801459a:	2301      	movs	r3, #1
 801459c:	e000      	b.n	80145a0 <xQueueGenericSend+0x48>
 801459e:	2300      	movs	r3, #0
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d10b      	bne.n	80145bc <xQueueGenericSend+0x64>
 80145a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145a8:	b672      	cpsid	i
 80145aa:	f383 8811 	msr	BASEPRI, r3
 80145ae:	f3bf 8f6f 	isb	sy
 80145b2:	f3bf 8f4f 	dsb	sy
 80145b6:	b662      	cpsie	i
 80145b8:	627b      	str	r3, [r7, #36]	; 0x24
 80145ba:	e7fe      	b.n	80145ba <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	2b02      	cmp	r3, #2
 80145c0:	d103      	bne.n	80145ca <xQueueGenericSend+0x72>
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80145c6:	2b01      	cmp	r3, #1
 80145c8:	d101      	bne.n	80145ce <xQueueGenericSend+0x76>
 80145ca:	2301      	movs	r3, #1
 80145cc:	e000      	b.n	80145d0 <xQueueGenericSend+0x78>
 80145ce:	2300      	movs	r3, #0
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10b      	bne.n	80145ec <xQueueGenericSend+0x94>
 80145d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145d8:	b672      	cpsid	i
 80145da:	f383 8811 	msr	BASEPRI, r3
 80145de:	f3bf 8f6f 	isb	sy
 80145e2:	f3bf 8f4f 	dsb	sy
 80145e6:	b662      	cpsie	i
 80145e8:	623b      	str	r3, [r7, #32]
 80145ea:	e7fe      	b.n	80145ea <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145ec:	f001 fcf6 	bl	8015fdc <xTaskGetSchedulerState>
 80145f0:	4603      	mov	r3, r0
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d102      	bne.n	80145fc <xQueueGenericSend+0xa4>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d101      	bne.n	8014600 <xQueueGenericSend+0xa8>
 80145fc:	2301      	movs	r3, #1
 80145fe:	e000      	b.n	8014602 <xQueueGenericSend+0xaa>
 8014600:	2300      	movs	r3, #0
 8014602:	2b00      	cmp	r3, #0
 8014604:	d10b      	bne.n	801461e <xQueueGenericSend+0xc6>
 8014606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801460a:	b672      	cpsid	i
 801460c:	f383 8811 	msr	BASEPRI, r3
 8014610:	f3bf 8f6f 	isb	sy
 8014614:	f3bf 8f4f 	dsb	sy
 8014618:	b662      	cpsie	i
 801461a:	61fb      	str	r3, [r7, #28]
 801461c:	e7fe      	b.n	801461c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801461e:	f002 fb1b 	bl	8016c58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801462a:	429a      	cmp	r2, r3
 801462c:	d302      	bcc.n	8014634 <xQueueGenericSend+0xdc>
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	2b02      	cmp	r3, #2
 8014632:	d129      	bne.n	8014688 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014634:	683a      	ldr	r2, [r7, #0]
 8014636:	68b9      	ldr	r1, [r7, #8]
 8014638:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801463a:	f000 fc6e 	bl	8014f1a <prvCopyDataToQueue>
 801463e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014644:	2b00      	cmp	r3, #0
 8014646:	d010      	beq.n	801466a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801464a:	3324      	adds	r3, #36	; 0x24
 801464c:	4618      	mov	r0, r3
 801464e:	f001 faf7 	bl	8015c40 <xTaskRemoveFromEventList>
 8014652:	4603      	mov	r3, r0
 8014654:	2b00      	cmp	r3, #0
 8014656:	d013      	beq.n	8014680 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014658:	4b3f      	ldr	r3, [pc, #252]	; (8014758 <xQueueGenericSend+0x200>)
 801465a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801465e:	601a      	str	r2, [r3, #0]
 8014660:	f3bf 8f4f 	dsb	sy
 8014664:	f3bf 8f6f 	isb	sy
 8014668:	e00a      	b.n	8014680 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801466c:	2b00      	cmp	r3, #0
 801466e:	d007      	beq.n	8014680 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014670:	4b39      	ldr	r3, [pc, #228]	; (8014758 <xQueueGenericSend+0x200>)
 8014672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014676:	601a      	str	r2, [r3, #0]
 8014678:	f3bf 8f4f 	dsb	sy
 801467c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014680:	f002 fb1c 	bl	8016cbc <vPortExitCritical>
				return pdPASS;
 8014684:	2301      	movs	r3, #1
 8014686:	e063      	b.n	8014750 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d103      	bne.n	8014696 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801468e:	f002 fb15 	bl	8016cbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014692:	2300      	movs	r3, #0
 8014694:	e05c      	b.n	8014750 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014698:	2b00      	cmp	r3, #0
 801469a:	d106      	bne.n	80146aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801469c:	f107 0314 	add.w	r3, r7, #20
 80146a0:	4618      	mov	r0, r3
 80146a2:	f001 fb31 	bl	8015d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80146a6:	2301      	movs	r3, #1
 80146a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80146aa:	f002 fb07 	bl	8016cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80146ae:	f001 f88f 	bl	80157d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80146b2:	f002 fad1 	bl	8016c58 <vPortEnterCritical>
 80146b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80146bc:	b25b      	sxtb	r3, r3
 80146be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146c2:	d103      	bne.n	80146cc <xQueueGenericSend+0x174>
 80146c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c6:	2200      	movs	r2, #0
 80146c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80146d2:	b25b      	sxtb	r3, r3
 80146d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146d8:	d103      	bne.n	80146e2 <xQueueGenericSend+0x18a>
 80146da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146dc:	2200      	movs	r2, #0
 80146de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80146e2:	f002 faeb 	bl	8016cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80146e6:	1d3a      	adds	r2, r7, #4
 80146e8:	f107 0314 	add.w	r3, r7, #20
 80146ec:	4611      	mov	r1, r2
 80146ee:	4618      	mov	r0, r3
 80146f0:	f001 fb20 	bl	8015d34 <xTaskCheckForTimeOut>
 80146f4:	4603      	mov	r3, r0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d124      	bne.n	8014744 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80146fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146fc:	f000 fd05 	bl	801510a <prvIsQueueFull>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d018      	beq.n	8014738 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014708:	3310      	adds	r3, #16
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	4611      	mov	r1, r2
 801470e:	4618      	mov	r0, r3
 8014710:	f001 fa44 	bl	8015b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014716:	f000 fc90 	bl	801503a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801471a:	f001 f867 	bl	80157ec <xTaskResumeAll>
 801471e:	4603      	mov	r3, r0
 8014720:	2b00      	cmp	r3, #0
 8014722:	f47f af7c 	bne.w	801461e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014726:	4b0c      	ldr	r3, [pc, #48]	; (8014758 <xQueueGenericSend+0x200>)
 8014728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801472c:	601a      	str	r2, [r3, #0]
 801472e:	f3bf 8f4f 	dsb	sy
 8014732:	f3bf 8f6f 	isb	sy
 8014736:	e772      	b.n	801461e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801473a:	f000 fc7e 	bl	801503a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801473e:	f001 f855 	bl	80157ec <xTaskResumeAll>
 8014742:	e76c      	b.n	801461e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014746:	f000 fc78 	bl	801503a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801474a:	f001 f84f 	bl	80157ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801474e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014750:	4618      	mov	r0, r3
 8014752:	3738      	adds	r7, #56	; 0x38
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	e000ed04 	.word	0xe000ed04

0801475c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b08e      	sub	sp, #56	; 0x38
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	607a      	str	r2, [r7, #4]
 8014768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	2b00      	cmp	r3, #0
 8014772:	d10b      	bne.n	801478c <xQueueGenericSendFromISR+0x30>
 8014774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014778:	b672      	cpsid	i
 801477a:	f383 8811 	msr	BASEPRI, r3
 801477e:	f3bf 8f6f 	isb	sy
 8014782:	f3bf 8f4f 	dsb	sy
 8014786:	b662      	cpsie	i
 8014788:	627b      	str	r3, [r7, #36]	; 0x24
 801478a:	e7fe      	b.n	801478a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d103      	bne.n	801479a <xQueueGenericSendFromISR+0x3e>
 8014792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014796:	2b00      	cmp	r3, #0
 8014798:	d101      	bne.n	801479e <xQueueGenericSendFromISR+0x42>
 801479a:	2301      	movs	r3, #1
 801479c:	e000      	b.n	80147a0 <xQueueGenericSendFromISR+0x44>
 801479e:	2300      	movs	r3, #0
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d10b      	bne.n	80147bc <xQueueGenericSendFromISR+0x60>
 80147a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147a8:	b672      	cpsid	i
 80147aa:	f383 8811 	msr	BASEPRI, r3
 80147ae:	f3bf 8f6f 	isb	sy
 80147b2:	f3bf 8f4f 	dsb	sy
 80147b6:	b662      	cpsie	i
 80147b8:	623b      	str	r3, [r7, #32]
 80147ba:	e7fe      	b.n	80147ba <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	2b02      	cmp	r3, #2
 80147c0:	d103      	bne.n	80147ca <xQueueGenericSendFromISR+0x6e>
 80147c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d101      	bne.n	80147ce <xQueueGenericSendFromISR+0x72>
 80147ca:	2301      	movs	r3, #1
 80147cc:	e000      	b.n	80147d0 <xQueueGenericSendFromISR+0x74>
 80147ce:	2300      	movs	r3, #0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d10b      	bne.n	80147ec <xQueueGenericSendFromISR+0x90>
 80147d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d8:	b672      	cpsid	i
 80147da:	f383 8811 	msr	BASEPRI, r3
 80147de:	f3bf 8f6f 	isb	sy
 80147e2:	f3bf 8f4f 	dsb	sy
 80147e6:	b662      	cpsie	i
 80147e8:	61fb      	str	r3, [r7, #28]
 80147ea:	e7fe      	b.n	80147ea <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147ec:	f002 fb14 	bl	8016e18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80147f0:	f3ef 8211 	mrs	r2, BASEPRI
 80147f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147f8:	b672      	cpsid	i
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	b662      	cpsie	i
 8014808:	61ba      	str	r2, [r7, #24]
 801480a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801480c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801480e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014818:	429a      	cmp	r2, r3
 801481a:	d302      	bcc.n	8014822 <xQueueGenericSendFromISR+0xc6>
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	2b02      	cmp	r3, #2
 8014820:	d12c      	bne.n	801487c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801482c:	683a      	ldr	r2, [r7, #0]
 801482e:	68b9      	ldr	r1, [r7, #8]
 8014830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014832:	f000 fb72 	bl	8014f1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014836:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801483e:	d112      	bne.n	8014866 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014844:	2b00      	cmp	r3, #0
 8014846:	d016      	beq.n	8014876 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484a:	3324      	adds	r3, #36	; 0x24
 801484c:	4618      	mov	r0, r3
 801484e:	f001 f9f7 	bl	8015c40 <xTaskRemoveFromEventList>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d00e      	beq.n	8014876 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d00b      	beq.n	8014876 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	2201      	movs	r2, #1
 8014862:	601a      	str	r2, [r3, #0]
 8014864:	e007      	b.n	8014876 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801486a:	3301      	adds	r3, #1
 801486c:	b2db      	uxtb	r3, r3
 801486e:	b25a      	sxtb	r2, r3
 8014870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014876:	2301      	movs	r3, #1
 8014878:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801487a:	e001      	b.n	8014880 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801487c:	2300      	movs	r3, #0
 801487e:	637b      	str	r3, [r7, #52]	; 0x34
 8014880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014882:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801488a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801488c:	4618      	mov	r0, r3
 801488e:	3738      	adds	r7, #56	; 0x38
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b08e      	sub	sp, #56	; 0x38
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d10b      	bne.n	80148c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80148a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ac:	b672      	cpsid	i
 80148ae:	f383 8811 	msr	BASEPRI, r3
 80148b2:	f3bf 8f6f 	isb	sy
 80148b6:	f3bf 8f4f 	dsb	sy
 80148ba:	b662      	cpsie	i
 80148bc:	623b      	str	r3, [r7, #32]
 80148be:	e7fe      	b.n	80148be <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80148c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d00b      	beq.n	80148e0 <xQueueGiveFromISR+0x4c>
 80148c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148cc:	b672      	cpsid	i
 80148ce:	f383 8811 	msr	BASEPRI, r3
 80148d2:	f3bf 8f6f 	isb	sy
 80148d6:	f3bf 8f4f 	dsb	sy
 80148da:	b662      	cpsie	i
 80148dc:	61fb      	str	r3, [r7, #28]
 80148de:	e7fe      	b.n	80148de <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80148e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d103      	bne.n	80148f0 <xQueueGiveFromISR+0x5c>
 80148e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d101      	bne.n	80148f4 <xQueueGiveFromISR+0x60>
 80148f0:	2301      	movs	r3, #1
 80148f2:	e000      	b.n	80148f6 <xQueueGiveFromISR+0x62>
 80148f4:	2300      	movs	r3, #0
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d10b      	bne.n	8014912 <xQueueGiveFromISR+0x7e>
 80148fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148fe:	b672      	cpsid	i
 8014900:	f383 8811 	msr	BASEPRI, r3
 8014904:	f3bf 8f6f 	isb	sy
 8014908:	f3bf 8f4f 	dsb	sy
 801490c:	b662      	cpsie	i
 801490e:	61bb      	str	r3, [r7, #24]
 8014910:	e7fe      	b.n	8014910 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014912:	f002 fa81 	bl	8016e18 <vPortValidateInterruptPriority>
	__asm volatile
 8014916:	f3ef 8211 	mrs	r2, BASEPRI
 801491a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801491e:	b672      	cpsid	i
 8014920:	f383 8811 	msr	BASEPRI, r3
 8014924:	f3bf 8f6f 	isb	sy
 8014928:	f3bf 8f4f 	dsb	sy
 801492c:	b662      	cpsie	i
 801492e:	617a      	str	r2, [r7, #20]
 8014930:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014932:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014934:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801493a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014942:	429a      	cmp	r2, r3
 8014944:	d22b      	bcs.n	801499e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801494c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014952:	1c5a      	adds	r2, r3, #1
 8014954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014956:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014958:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014960:	d112      	bne.n	8014988 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014966:	2b00      	cmp	r3, #0
 8014968:	d016      	beq.n	8014998 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801496c:	3324      	adds	r3, #36	; 0x24
 801496e:	4618      	mov	r0, r3
 8014970:	f001 f966 	bl	8015c40 <xTaskRemoveFromEventList>
 8014974:	4603      	mov	r3, r0
 8014976:	2b00      	cmp	r3, #0
 8014978:	d00e      	beq.n	8014998 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d00b      	beq.n	8014998 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014980:	683b      	ldr	r3, [r7, #0]
 8014982:	2201      	movs	r2, #1
 8014984:	601a      	str	r2, [r3, #0]
 8014986:	e007      	b.n	8014998 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801498c:	3301      	adds	r3, #1
 801498e:	b2db      	uxtb	r3, r3
 8014990:	b25a      	sxtb	r2, r3
 8014992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014998:	2301      	movs	r3, #1
 801499a:	637b      	str	r3, [r7, #52]	; 0x34
 801499c:	e001      	b.n	80149a2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801499e:	2300      	movs	r3, #0
 80149a0:	637b      	str	r3, [r7, #52]	; 0x34
 80149a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149a4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80149ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3738      	adds	r7, #56	; 0x38
 80149b2:	46bd      	mov	sp, r7
 80149b4:	bd80      	pop	{r7, pc}
	...

080149b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80149b8:	b580      	push	{r7, lr}
 80149ba:	b08c      	sub	sp, #48	; 0x30
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80149c4:	2300      	movs	r3, #0
 80149c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80149cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d10b      	bne.n	80149ea <xQueueReceive+0x32>
	__asm volatile
 80149d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149d6:	b672      	cpsid	i
 80149d8:	f383 8811 	msr	BASEPRI, r3
 80149dc:	f3bf 8f6f 	isb	sy
 80149e0:	f3bf 8f4f 	dsb	sy
 80149e4:	b662      	cpsie	i
 80149e6:	623b      	str	r3, [r7, #32]
 80149e8:	e7fe      	b.n	80149e8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80149ea:	68bb      	ldr	r3, [r7, #8]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d103      	bne.n	80149f8 <xQueueReceive+0x40>
 80149f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d101      	bne.n	80149fc <xQueueReceive+0x44>
 80149f8:	2301      	movs	r3, #1
 80149fa:	e000      	b.n	80149fe <xQueueReceive+0x46>
 80149fc:	2300      	movs	r3, #0
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d10b      	bne.n	8014a1a <xQueueReceive+0x62>
 8014a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a06:	b672      	cpsid	i
 8014a08:	f383 8811 	msr	BASEPRI, r3
 8014a0c:	f3bf 8f6f 	isb	sy
 8014a10:	f3bf 8f4f 	dsb	sy
 8014a14:	b662      	cpsie	i
 8014a16:	61fb      	str	r3, [r7, #28]
 8014a18:	e7fe      	b.n	8014a18 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014a1a:	f001 fadf 	bl	8015fdc <xTaskGetSchedulerState>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d102      	bne.n	8014a2a <xQueueReceive+0x72>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d101      	bne.n	8014a2e <xQueueReceive+0x76>
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e000      	b.n	8014a30 <xQueueReceive+0x78>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d10b      	bne.n	8014a4c <xQueueReceive+0x94>
 8014a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a38:	b672      	cpsid	i
 8014a3a:	f383 8811 	msr	BASEPRI, r3
 8014a3e:	f3bf 8f6f 	isb	sy
 8014a42:	f3bf 8f4f 	dsb	sy
 8014a46:	b662      	cpsie	i
 8014a48:	61bb      	str	r3, [r7, #24]
 8014a4a:	e7fe      	b.n	8014a4a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014a4c:	f002 f904 	bl	8016c58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a54:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d01f      	beq.n	8014a9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014a5c:	68b9      	ldr	r1, [r7, #8]
 8014a5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014a60:	f000 fac5 	bl	8014fee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a66:	1e5a      	subs	r2, r3, #1
 8014a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a6e:	691b      	ldr	r3, [r3, #16]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00f      	beq.n	8014a94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a76:	3310      	adds	r3, #16
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 f8e1 	bl	8015c40 <xTaskRemoveFromEventList>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d007      	beq.n	8014a94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014a84:	4b3c      	ldr	r3, [pc, #240]	; (8014b78 <xQueueReceive+0x1c0>)
 8014a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a8a:	601a      	str	r2, [r3, #0]
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014a94:	f002 f912 	bl	8016cbc <vPortExitCritical>
				return pdPASS;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	e069      	b.n	8014b70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d103      	bne.n	8014aaa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014aa2:	f002 f90b 	bl	8016cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014aa6:	2300      	movs	r3, #0
 8014aa8:	e062      	b.n	8014b70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d106      	bne.n	8014abe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014ab0:	f107 0310 	add.w	r3, r7, #16
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	f001 f927 	bl	8015d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014aba:	2301      	movs	r3, #1
 8014abc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014abe:	f002 f8fd 	bl	8016cbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ac2:	f000 fe85 	bl	80157d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ac6:	f002 f8c7 	bl	8016c58 <vPortEnterCritical>
 8014aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ad0:	b25b      	sxtb	r3, r3
 8014ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ad6:	d103      	bne.n	8014ae0 <xQueueReceive+0x128>
 8014ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ada:	2200      	movs	r2, #0
 8014adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014ae6:	b25b      	sxtb	r3, r3
 8014ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aec:	d103      	bne.n	8014af6 <xQueueReceive+0x13e>
 8014aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014af6:	f002 f8e1 	bl	8016cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014afa:	1d3a      	adds	r2, r7, #4
 8014afc:	f107 0310 	add.w	r3, r7, #16
 8014b00:	4611      	mov	r1, r2
 8014b02:	4618      	mov	r0, r3
 8014b04:	f001 f916 	bl	8015d34 <xTaskCheckForTimeOut>
 8014b08:	4603      	mov	r3, r0
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d123      	bne.n	8014b56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b10:	f000 fae5 	bl	80150de <prvIsQueueEmpty>
 8014b14:	4603      	mov	r3, r0
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d017      	beq.n	8014b4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1c:	3324      	adds	r3, #36	; 0x24
 8014b1e:	687a      	ldr	r2, [r7, #4]
 8014b20:	4611      	mov	r1, r2
 8014b22:	4618      	mov	r0, r3
 8014b24:	f001 f83a 	bl	8015b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b2a:	f000 fa86 	bl	801503a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014b2e:	f000 fe5d 	bl	80157ec <xTaskResumeAll>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d189      	bne.n	8014a4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014b38:	4b0f      	ldr	r3, [pc, #60]	; (8014b78 <xQueueReceive+0x1c0>)
 8014b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b3e:	601a      	str	r2, [r3, #0]
 8014b40:	f3bf 8f4f 	dsb	sy
 8014b44:	f3bf 8f6f 	isb	sy
 8014b48:	e780      	b.n	8014a4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014b4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b4c:	f000 fa75 	bl	801503a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014b50:	f000 fe4c 	bl	80157ec <xTaskResumeAll>
 8014b54:	e77a      	b.n	8014a4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b58:	f000 fa6f 	bl	801503a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014b5c:	f000 fe46 	bl	80157ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014b62:	f000 fabc 	bl	80150de <prvIsQueueEmpty>
 8014b66:	4603      	mov	r3, r0
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	f43f af6f 	beq.w	8014a4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014b6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3730      	adds	r7, #48	; 0x30
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	e000ed04 	.word	0xe000ed04

08014b7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b08e      	sub	sp, #56	; 0x38
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014b86:	2300      	movs	r3, #0
 8014b88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d10b      	bne.n	8014bb0 <xQueueSemaphoreTake+0x34>
 8014b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9c:	b672      	cpsid	i
 8014b9e:	f383 8811 	msr	BASEPRI, r3
 8014ba2:	f3bf 8f6f 	isb	sy
 8014ba6:	f3bf 8f4f 	dsb	sy
 8014baa:	b662      	cpsie	i
 8014bac:	623b      	str	r3, [r7, #32]
 8014bae:	e7fe      	b.n	8014bae <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d00b      	beq.n	8014bd0 <xQueueSemaphoreTake+0x54>
 8014bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bbc:	b672      	cpsid	i
 8014bbe:	f383 8811 	msr	BASEPRI, r3
 8014bc2:	f3bf 8f6f 	isb	sy
 8014bc6:	f3bf 8f4f 	dsb	sy
 8014bca:	b662      	cpsie	i
 8014bcc:	61fb      	str	r3, [r7, #28]
 8014bce:	e7fe      	b.n	8014bce <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014bd0:	f001 fa04 	bl	8015fdc <xTaskGetSchedulerState>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d102      	bne.n	8014be0 <xQueueSemaphoreTake+0x64>
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d101      	bne.n	8014be4 <xQueueSemaphoreTake+0x68>
 8014be0:	2301      	movs	r3, #1
 8014be2:	e000      	b.n	8014be6 <xQueueSemaphoreTake+0x6a>
 8014be4:	2300      	movs	r3, #0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d10b      	bne.n	8014c02 <xQueueSemaphoreTake+0x86>
 8014bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bee:	b672      	cpsid	i
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	b662      	cpsie	i
 8014bfe:	61bb      	str	r3, [r7, #24]
 8014c00:	e7fe      	b.n	8014c00 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c02:	f002 f829 	bl	8016c58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c0a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d024      	beq.n	8014c5c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c14:	1e5a      	subs	r2, r3, #1
 8014c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c18:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d104      	bne.n	8014c2c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014c22:	f001 fb55 	bl	80162d0 <pvTaskIncrementMutexHeldCount>
 8014c26:	4602      	mov	r2, r0
 8014c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	691b      	ldr	r3, [r3, #16]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d00f      	beq.n	8014c54 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c36:	3310      	adds	r3, #16
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f001 f801 	bl	8015c40 <xTaskRemoveFromEventList>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d007      	beq.n	8014c54 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014c44:	4b54      	ldr	r3, [pc, #336]	; (8014d98 <xQueueSemaphoreTake+0x21c>)
 8014c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014c4a:	601a      	str	r2, [r3, #0]
 8014c4c:	f3bf 8f4f 	dsb	sy
 8014c50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014c54:	f002 f832 	bl	8016cbc <vPortExitCritical>
				return pdPASS;
 8014c58:	2301      	movs	r3, #1
 8014c5a:	e098      	b.n	8014d8e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d112      	bne.n	8014c88 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d00b      	beq.n	8014c80 <xQueueSemaphoreTake+0x104>
 8014c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c6c:	b672      	cpsid	i
 8014c6e:	f383 8811 	msr	BASEPRI, r3
 8014c72:	f3bf 8f6f 	isb	sy
 8014c76:	f3bf 8f4f 	dsb	sy
 8014c7a:	b662      	cpsie	i
 8014c7c:	617b      	str	r3, [r7, #20]
 8014c7e:	e7fe      	b.n	8014c7e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014c80:	f002 f81c 	bl	8016cbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014c84:	2300      	movs	r3, #0
 8014c86:	e082      	b.n	8014d8e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d106      	bne.n	8014c9c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c8e:	f107 030c 	add.w	r3, r7, #12
 8014c92:	4618      	mov	r0, r3
 8014c94:	f001 f838 	bl	8015d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c98:	2301      	movs	r3, #1
 8014c9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c9c:	f002 f80e 	bl	8016cbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ca0:	f000 fd96 	bl	80157d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ca4:	f001 ffd8 	bl	8016c58 <vPortEnterCritical>
 8014ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014caa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014cae:	b25b      	sxtb	r3, r3
 8014cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cb4:	d103      	bne.n	8014cbe <xQueueSemaphoreTake+0x142>
 8014cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb8:	2200      	movs	r2, #0
 8014cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014cc4:	b25b      	sxtb	r3, r3
 8014cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cca:	d103      	bne.n	8014cd4 <xQueueSemaphoreTake+0x158>
 8014ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cce:	2200      	movs	r2, #0
 8014cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014cd4:	f001 fff2 	bl	8016cbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014cd8:	463a      	mov	r2, r7
 8014cda:	f107 030c 	add.w	r3, r7, #12
 8014cde:	4611      	mov	r1, r2
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f001 f827 	bl	8015d34 <xTaskCheckForTimeOut>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d132      	bne.n	8014d52 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cee:	f000 f9f6 	bl	80150de <prvIsQueueEmpty>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d026      	beq.n	8014d46 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d109      	bne.n	8014d14 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014d00:	f001 ffaa 	bl	8016c58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f001 f985 	bl	8016018 <xTaskPriorityInherit>
 8014d0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014d10:	f001 ffd4 	bl	8016cbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d16:	3324      	adds	r3, #36	; 0x24
 8014d18:	683a      	ldr	r2, [r7, #0]
 8014d1a:	4611      	mov	r1, r2
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 ff3d 	bl	8015b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d24:	f000 f989 	bl	801503a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014d28:	f000 fd60 	bl	80157ec <xTaskResumeAll>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f47f af67 	bne.w	8014c02 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014d34:	4b18      	ldr	r3, [pc, #96]	; (8014d98 <xQueueSemaphoreTake+0x21c>)
 8014d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d3a:	601a      	str	r2, [r3, #0]
 8014d3c:	f3bf 8f4f 	dsb	sy
 8014d40:	f3bf 8f6f 	isb	sy
 8014d44:	e75d      	b.n	8014c02 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014d46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d48:	f000 f977 	bl	801503a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d4c:	f000 fd4e 	bl	80157ec <xTaskResumeAll>
 8014d50:	e757      	b.n	8014c02 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014d52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d54:	f000 f971 	bl	801503a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d58:	f000 fd48 	bl	80157ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d5e:	f000 f9be 	bl	80150de <prvIsQueueEmpty>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	f43f af4c 	beq.w	8014c02 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d00d      	beq.n	8014d8c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014d70:	f001 ff72 	bl	8016c58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014d74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d76:	f000 f8b8 	bl	8014eea <prvGetDisinheritPriorityAfterTimeout>
 8014d7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d7e:	689b      	ldr	r3, [r3, #8]
 8014d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d82:	4618      	mov	r0, r3
 8014d84:	f001 fa20 	bl	80161c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014d88:	f001 ff98 	bl	8016cbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d8e:	4618      	mov	r0, r3
 8014d90:	3738      	adds	r7, #56	; 0x38
 8014d92:	46bd      	mov	sp, r7
 8014d94:	bd80      	pop	{r7, pc}
 8014d96:	bf00      	nop
 8014d98:	e000ed04 	.word	0xe000ed04

08014d9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b08e      	sub	sp, #56	; 0x38
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	60f8      	str	r0, [r7, #12]
 8014da4:	60b9      	str	r1, [r7, #8]
 8014da6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d10b      	bne.n	8014dca <xQueueReceiveFromISR+0x2e>
 8014db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014db6:	b672      	cpsid	i
 8014db8:	f383 8811 	msr	BASEPRI, r3
 8014dbc:	f3bf 8f6f 	isb	sy
 8014dc0:	f3bf 8f4f 	dsb	sy
 8014dc4:	b662      	cpsie	i
 8014dc6:	623b      	str	r3, [r7, #32]
 8014dc8:	e7fe      	b.n	8014dc8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d103      	bne.n	8014dd8 <xQueueReceiveFromISR+0x3c>
 8014dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d101      	bne.n	8014ddc <xQueueReceiveFromISR+0x40>
 8014dd8:	2301      	movs	r3, #1
 8014dda:	e000      	b.n	8014dde <xQueueReceiveFromISR+0x42>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d10b      	bne.n	8014dfa <xQueueReceiveFromISR+0x5e>
 8014de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014de6:	b672      	cpsid	i
 8014de8:	f383 8811 	msr	BASEPRI, r3
 8014dec:	f3bf 8f6f 	isb	sy
 8014df0:	f3bf 8f4f 	dsb	sy
 8014df4:	b662      	cpsie	i
 8014df6:	61fb      	str	r3, [r7, #28]
 8014df8:	e7fe      	b.n	8014df8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014dfa:	f002 f80d 	bl	8016e18 <vPortValidateInterruptPriority>
	__asm volatile
 8014dfe:	f3ef 8211 	mrs	r2, BASEPRI
 8014e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e06:	b672      	cpsid	i
 8014e08:	f383 8811 	msr	BASEPRI, r3
 8014e0c:	f3bf 8f6f 	isb	sy
 8014e10:	f3bf 8f4f 	dsb	sy
 8014e14:	b662      	cpsie	i
 8014e16:	61ba      	str	r2, [r7, #24]
 8014e18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014e1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d02f      	beq.n	8014e8a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014e34:	68b9      	ldr	r1, [r7, #8]
 8014e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e38:	f000 f8d9 	bl	8014fee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e3e:	1e5a      	subs	r2, r3, #1
 8014e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014e44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e4c:	d112      	bne.n	8014e74 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e50:	691b      	ldr	r3, [r3, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d016      	beq.n	8014e84 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e58:	3310      	adds	r3, #16
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f000 fef0 	bl	8015c40 <xTaskRemoveFromEventList>
 8014e60:	4603      	mov	r3, r0
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00e      	beq.n	8014e84 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00b      	beq.n	8014e84 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2201      	movs	r2, #1
 8014e70:	601a      	str	r2, [r3, #0]
 8014e72:	e007      	b.n	8014e84 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e78:	3301      	adds	r3, #1
 8014e7a:	b2db      	uxtb	r3, r3
 8014e7c:	b25a      	sxtb	r2, r3
 8014e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014e84:	2301      	movs	r3, #1
 8014e86:	637b      	str	r3, [r7, #52]	; 0x34
 8014e88:	e001      	b.n	8014e8e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8014e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3738      	adds	r7, #56	; 0x38
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}

08014ea2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014ea2:	b580      	push	{r7, lr}
 8014ea4:	b084      	sub	sp, #16
 8014ea6:	af00      	add	r7, sp, #0
 8014ea8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d10b      	bne.n	8014ecc <vQueueDelete+0x2a>
	__asm volatile
 8014eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eb8:	b672      	cpsid	i
 8014eba:	f383 8811 	msr	BASEPRI, r3
 8014ebe:	f3bf 8f6f 	isb	sy
 8014ec2:	f3bf 8f4f 	dsb	sy
 8014ec6:	b662      	cpsie	i
 8014ec8:	60bb      	str	r3, [r7, #8]
 8014eca:	e7fe      	b.n	8014eca <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014ecc:	68f8      	ldr	r0, [r7, #12]
 8014ece:	f000 f95d 	bl	801518c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d102      	bne.n	8014ee2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8014edc:	68f8      	ldr	r0, [r7, #12]
 8014ede:	f002 f8a5 	bl	801702c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014ee2:	bf00      	nop
 8014ee4:	3710      	adds	r7, #16
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	bd80      	pop	{r7, pc}

08014eea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014eea:	b480      	push	{r7}
 8014eec:	b085      	sub	sp, #20
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d006      	beq.n	8014f08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014f04:	60fb      	str	r3, [r7, #12]
 8014f06:	e001      	b.n	8014f0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
	}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3714      	adds	r7, #20
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b086      	sub	sp, #24
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	60f8      	str	r0, [r7, #12]
 8014f22:	60b9      	str	r1, [r7, #8]
 8014f24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014f26:	2300      	movs	r3, #0
 8014f28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d10d      	bne.n	8014f54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d14d      	bne.n	8014fdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	689b      	ldr	r3, [r3, #8]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f001 f8cf 	bl	80160e8 <xTaskPriorityDisinherit>
 8014f4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	609a      	str	r2, [r3, #8]
 8014f52:	e043      	b.n	8014fdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d119      	bne.n	8014f8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	6858      	ldr	r0, [r3, #4]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f62:	461a      	mov	r2, r3
 8014f64:	68b9      	ldr	r1, [r7, #8]
 8014f66:	f002 ff0d 	bl	8017d84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	685a      	ldr	r2, [r3, #4]
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f72:	441a      	add	r2, r3
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	685a      	ldr	r2, [r3, #4]
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	689b      	ldr	r3, [r3, #8]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d32b      	bcc.n	8014fdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	605a      	str	r2, [r3, #4]
 8014f8c:	e026      	b.n	8014fdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	68d8      	ldr	r0, [r3, #12]
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f96:	461a      	mov	r2, r3
 8014f98:	68b9      	ldr	r1, [r7, #8]
 8014f9a:	f002 fef3 	bl	8017d84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	68da      	ldr	r2, [r3, #12]
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fa6:	425b      	negs	r3, r3
 8014fa8:	441a      	add	r2, r3
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	68da      	ldr	r2, [r3, #12]
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d207      	bcs.n	8014fca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	689a      	ldr	r2, [r3, #8]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fc2:	425b      	negs	r3, r3
 8014fc4:	441a      	add	r2, r3
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d105      	bne.n	8014fdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014fd0:	693b      	ldr	r3, [r7, #16]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d002      	beq.n	8014fdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	3b01      	subs	r3, #1
 8014fda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	1c5a      	adds	r2, r3, #1
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014fe4:	697b      	ldr	r3, [r7, #20]
}
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}

08014fee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014fee:	b580      	push	{r7, lr}
 8014ff0:	b082      	sub	sp, #8
 8014ff2:	af00      	add	r7, sp, #0
 8014ff4:	6078      	str	r0, [r7, #4]
 8014ff6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d018      	beq.n	8015032 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	68da      	ldr	r2, [r3, #12]
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015008:	441a      	add	r2, r3
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	68da      	ldr	r2, [r3, #12]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	689b      	ldr	r3, [r3, #8]
 8015016:	429a      	cmp	r2, r3
 8015018:	d303      	bcc.n	8015022 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	68d9      	ldr	r1, [r3, #12]
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801502a:	461a      	mov	r2, r3
 801502c:	6838      	ldr	r0, [r7, #0]
 801502e:	f002 fea9 	bl	8017d84 <memcpy>
	}
}
 8015032:	bf00      	nop
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}

0801503a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801503a:	b580      	push	{r7, lr}
 801503c:	b084      	sub	sp, #16
 801503e:	af00      	add	r7, sp, #0
 8015040:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015042:	f001 fe09 	bl	8016c58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801504c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801504e:	e011      	b.n	8015074 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015054:	2b00      	cmp	r3, #0
 8015056:	d012      	beq.n	801507e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	3324      	adds	r3, #36	; 0x24
 801505c:	4618      	mov	r0, r3
 801505e:	f000 fdef 	bl	8015c40 <xTaskRemoveFromEventList>
 8015062:	4603      	mov	r3, r0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d001      	beq.n	801506c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015068:	f000 fec8 	bl	8015dfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801506c:	7bfb      	ldrb	r3, [r7, #15]
 801506e:	3b01      	subs	r3, #1
 8015070:	b2db      	uxtb	r3, r3
 8015072:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015078:	2b00      	cmp	r3, #0
 801507a:	dce9      	bgt.n	8015050 <prvUnlockQueue+0x16>
 801507c:	e000      	b.n	8015080 <prvUnlockQueue+0x46>
					break;
 801507e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	22ff      	movs	r2, #255	; 0xff
 8015084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015088:	f001 fe18 	bl	8016cbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801508c:	f001 fde4 	bl	8016c58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015096:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015098:	e011      	b.n	80150be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	691b      	ldr	r3, [r3, #16]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d012      	beq.n	80150c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	3310      	adds	r3, #16
 80150a6:	4618      	mov	r0, r3
 80150a8:	f000 fdca 	bl	8015c40 <xTaskRemoveFromEventList>
 80150ac:	4603      	mov	r3, r0
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d001      	beq.n	80150b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80150b2:	f000 fea3 	bl	8015dfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80150b6:	7bbb      	ldrb	r3, [r7, #14]
 80150b8:	3b01      	subs	r3, #1
 80150ba:	b2db      	uxtb	r3, r3
 80150bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80150be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	dce9      	bgt.n	801509a <prvUnlockQueue+0x60>
 80150c6:	e000      	b.n	80150ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80150c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	22ff      	movs	r2, #255	; 0xff
 80150ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80150d2:	f001 fdf3 	bl	8016cbc <vPortExitCritical>
}
 80150d6:	bf00      	nop
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b084      	sub	sp, #16
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80150e6:	f001 fdb7 	bl	8016c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d102      	bne.n	80150f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80150f2:	2301      	movs	r3, #1
 80150f4:	60fb      	str	r3, [r7, #12]
 80150f6:	e001      	b.n	80150fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80150f8:	2300      	movs	r3, #0
 80150fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80150fc:	f001 fdde 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 8015100:	68fb      	ldr	r3, [r7, #12]
}
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b084      	sub	sp, #16
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015112:	f001 fda1 	bl	8016c58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801511e:	429a      	cmp	r2, r3
 8015120:	d102      	bne.n	8015128 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015122:	2301      	movs	r3, #1
 8015124:	60fb      	str	r3, [r7, #12]
 8015126:	e001      	b.n	801512c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015128:	2300      	movs	r3, #0
 801512a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801512c:	f001 fdc6 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 8015130:	68fb      	ldr	r3, [r7, #12]
}
 8015132:	4618      	mov	r0, r3
 8015134:	3710      	adds	r7, #16
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
	...

0801513c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801513c:	b480      	push	{r7}
 801513e:	b085      	sub	sp, #20
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
 8015144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015146:	2300      	movs	r3, #0
 8015148:	60fb      	str	r3, [r7, #12]
 801514a:	e014      	b.n	8015176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801514c:	4a0e      	ldr	r2, [pc, #56]	; (8015188 <vQueueAddToRegistry+0x4c>)
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d10b      	bne.n	8015170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015158:	490b      	ldr	r1, [pc, #44]	; (8015188 <vQueueAddToRegistry+0x4c>)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	683a      	ldr	r2, [r7, #0]
 801515e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015162:	4a09      	ldr	r2, [pc, #36]	; (8015188 <vQueueAddToRegistry+0x4c>)
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	00db      	lsls	r3, r3, #3
 8015168:	4413      	add	r3, r2
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801516e:	e005      	b.n	801517c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	3301      	adds	r3, #1
 8015174:	60fb      	str	r3, [r7, #12]
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	2b07      	cmp	r3, #7
 801517a:	d9e7      	bls.n	801514c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801517c:	bf00      	nop
 801517e:	3714      	adds	r7, #20
 8015180:	46bd      	mov	sp, r7
 8015182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015186:	4770      	bx	lr
 8015188:	20027684 	.word	0x20027684

0801518c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801518c:	b480      	push	{r7}
 801518e:	b085      	sub	sp, #20
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015194:	2300      	movs	r3, #0
 8015196:	60fb      	str	r3, [r7, #12]
 8015198:	e016      	b.n	80151c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801519a:	4a10      	ldr	r2, [pc, #64]	; (80151dc <vQueueUnregisterQueue+0x50>)
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	00db      	lsls	r3, r3, #3
 80151a0:	4413      	add	r3, r2
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	429a      	cmp	r2, r3
 80151a8:	d10b      	bne.n	80151c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80151aa:	4a0c      	ldr	r2, [pc, #48]	; (80151dc <vQueueUnregisterQueue+0x50>)
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2100      	movs	r1, #0
 80151b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80151b4:	4a09      	ldr	r2, [pc, #36]	; (80151dc <vQueueUnregisterQueue+0x50>)
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	00db      	lsls	r3, r3, #3
 80151ba:	4413      	add	r3, r2
 80151bc:	2200      	movs	r2, #0
 80151be:	605a      	str	r2, [r3, #4]
				break;
 80151c0:	e005      	b.n	80151ce <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	3301      	adds	r3, #1
 80151c6:	60fb      	str	r3, [r7, #12]
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	2b07      	cmp	r3, #7
 80151cc:	d9e5      	bls.n	801519a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80151ce:	bf00      	nop
 80151d0:	3714      	adds	r7, #20
 80151d2:	46bd      	mov	sp, r7
 80151d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d8:	4770      	bx	lr
 80151da:	bf00      	nop
 80151dc:	20027684 	.word	0x20027684

080151e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80151e0:	b580      	push	{r7, lr}
 80151e2:	b086      	sub	sp, #24
 80151e4:	af00      	add	r7, sp, #0
 80151e6:	60f8      	str	r0, [r7, #12]
 80151e8:	60b9      	str	r1, [r7, #8]
 80151ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80151f0:	f001 fd32 	bl	8016c58 <vPortEnterCritical>
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151fa:	b25b      	sxtb	r3, r3
 80151fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015200:	d103      	bne.n	801520a <vQueueWaitForMessageRestricted+0x2a>
 8015202:	697b      	ldr	r3, [r7, #20]
 8015204:	2200      	movs	r2, #0
 8015206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015210:	b25b      	sxtb	r3, r3
 8015212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015216:	d103      	bne.n	8015220 <vQueueWaitForMessageRestricted+0x40>
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	2200      	movs	r2, #0
 801521c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015220:	f001 fd4c 	bl	8016cbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015224:	697b      	ldr	r3, [r7, #20]
 8015226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015228:	2b00      	cmp	r3, #0
 801522a:	d106      	bne.n	801523a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	3324      	adds	r3, #36	; 0x24
 8015230:	687a      	ldr	r2, [r7, #4]
 8015232:	68b9      	ldr	r1, [r7, #8]
 8015234:	4618      	mov	r0, r3
 8015236:	f000 fcd7 	bl	8015be8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801523a:	6978      	ldr	r0, [r7, #20]
 801523c:	f7ff fefd 	bl	801503a <prvUnlockQueue>
	}
 8015240:	bf00      	nop
 8015242:	3718      	adds	r7, #24
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}

08015248 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015248:	b580      	push	{r7, lr}
 801524a:	b08e      	sub	sp, #56	; 0x38
 801524c:	af04      	add	r7, sp, #16
 801524e:	60f8      	str	r0, [r7, #12]
 8015250:	60b9      	str	r1, [r7, #8]
 8015252:	607a      	str	r2, [r7, #4]
 8015254:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015258:	2b00      	cmp	r3, #0
 801525a:	d10b      	bne.n	8015274 <xTaskCreateStatic+0x2c>
 801525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015260:	b672      	cpsid	i
 8015262:	f383 8811 	msr	BASEPRI, r3
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	f3bf 8f4f 	dsb	sy
 801526e:	b662      	cpsie	i
 8015270:	623b      	str	r3, [r7, #32]
 8015272:	e7fe      	b.n	8015272 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8015274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015276:	2b00      	cmp	r3, #0
 8015278:	d10b      	bne.n	8015292 <xTaskCreateStatic+0x4a>
 801527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801527e:	b672      	cpsid	i
 8015280:	f383 8811 	msr	BASEPRI, r3
 8015284:	f3bf 8f6f 	isb	sy
 8015288:	f3bf 8f4f 	dsb	sy
 801528c:	b662      	cpsie	i
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	e7fe      	b.n	8015290 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015292:	235c      	movs	r3, #92	; 0x5c
 8015294:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015296:	693b      	ldr	r3, [r7, #16]
 8015298:	2b5c      	cmp	r3, #92	; 0x5c
 801529a:	d00b      	beq.n	80152b4 <xTaskCreateStatic+0x6c>
 801529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152a0:	b672      	cpsid	i
 80152a2:	f383 8811 	msr	BASEPRI, r3
 80152a6:	f3bf 8f6f 	isb	sy
 80152aa:	f3bf 8f4f 	dsb	sy
 80152ae:	b662      	cpsie	i
 80152b0:	61bb      	str	r3, [r7, #24]
 80152b2:	e7fe      	b.n	80152b2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80152b4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80152b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d01e      	beq.n	80152fa <xTaskCreateStatic+0xb2>
 80152bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d01b      	beq.n	80152fa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80152c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80152c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80152ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80152cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ce:	2202      	movs	r2, #2
 80152d0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80152d4:	2300      	movs	r3, #0
 80152d6:	9303      	str	r3, [sp, #12]
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	9302      	str	r3, [sp, #8]
 80152dc:	f107 0314 	add.w	r3, r7, #20
 80152e0:	9301      	str	r3, [sp, #4]
 80152e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e4:	9300      	str	r3, [sp, #0]
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	68b9      	ldr	r1, [r7, #8]
 80152ec:	68f8      	ldr	r0, [r7, #12]
 80152ee:	f000 f850 	bl	8015392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80152f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152f4:	f000 f8de 	bl	80154b4 <prvAddNewTaskToReadyList>
 80152f8:	e001      	b.n	80152fe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80152fa:	2300      	movs	r3, #0
 80152fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80152fe:	697b      	ldr	r3, [r7, #20]
	}
 8015300:	4618      	mov	r0, r3
 8015302:	3728      	adds	r7, #40	; 0x28
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015308:	b580      	push	{r7, lr}
 801530a:	b08c      	sub	sp, #48	; 0x30
 801530c:	af04      	add	r7, sp, #16
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	603b      	str	r3, [r7, #0]
 8015314:	4613      	mov	r3, r2
 8015316:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015318:	88fb      	ldrh	r3, [r7, #6]
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	4618      	mov	r0, r3
 801531e:	f001 fdbd 	bl	8016e9c <pvPortMalloc>
 8015322:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d00e      	beq.n	8015348 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801532a:	205c      	movs	r0, #92	; 0x5c
 801532c:	f001 fdb6 	bl	8016e9c <pvPortMalloc>
 8015330:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d003      	beq.n	8015340 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	697a      	ldr	r2, [r7, #20]
 801533c:	631a      	str	r2, [r3, #48]	; 0x30
 801533e:	e005      	b.n	801534c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015340:	6978      	ldr	r0, [r7, #20]
 8015342:	f001 fe73 	bl	801702c <vPortFree>
 8015346:	e001      	b.n	801534c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015348:	2300      	movs	r3, #0
 801534a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d017      	beq.n	8015382 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015352:	69fb      	ldr	r3, [r7, #28]
 8015354:	2200      	movs	r2, #0
 8015356:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801535a:	88fa      	ldrh	r2, [r7, #6]
 801535c:	2300      	movs	r3, #0
 801535e:	9303      	str	r3, [sp, #12]
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	9302      	str	r3, [sp, #8]
 8015364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015366:	9301      	str	r3, [sp, #4]
 8015368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536a:	9300      	str	r3, [sp, #0]
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	68b9      	ldr	r1, [r7, #8]
 8015370:	68f8      	ldr	r0, [r7, #12]
 8015372:	f000 f80e 	bl	8015392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015376:	69f8      	ldr	r0, [r7, #28]
 8015378:	f000 f89c 	bl	80154b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801537c:	2301      	movs	r3, #1
 801537e:	61bb      	str	r3, [r7, #24]
 8015380:	e002      	b.n	8015388 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015382:	f04f 33ff 	mov.w	r3, #4294967295
 8015386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015388:	69bb      	ldr	r3, [r7, #24]
	}
 801538a:	4618      	mov	r0, r3
 801538c:	3720      	adds	r7, #32
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}

08015392 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015392:	b580      	push	{r7, lr}
 8015394:	b088      	sub	sp, #32
 8015396:	af00      	add	r7, sp, #0
 8015398:	60f8      	str	r0, [r7, #12]
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
 801539e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	009b      	lsls	r3, r3, #2
 80153a8:	461a      	mov	r2, r3
 80153aa:	21a5      	movs	r1, #165	; 0xa5
 80153ac:	f002 fcf5 	bl	8017d9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80153b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80153b4:	6879      	ldr	r1, [r7, #4]
 80153b6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80153ba:	440b      	add	r3, r1
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	4413      	add	r3, r2
 80153c0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80153c2:	69bb      	ldr	r3, [r7, #24]
 80153c4:	f023 0307 	bic.w	r3, r3, #7
 80153c8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80153ca:	69bb      	ldr	r3, [r7, #24]
 80153cc:	f003 0307 	and.w	r3, r3, #7
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00b      	beq.n	80153ec <prvInitialiseNewTask+0x5a>
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	b672      	cpsid	i
 80153da:	f383 8811 	msr	BASEPRI, r3
 80153de:	f3bf 8f6f 	isb	sy
 80153e2:	f3bf 8f4f 	dsb	sy
 80153e6:	b662      	cpsie	i
 80153e8:	617b      	str	r3, [r7, #20]
 80153ea:	e7fe      	b.n	80153ea <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d01f      	beq.n	8015432 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80153f2:	2300      	movs	r3, #0
 80153f4:	61fb      	str	r3, [r7, #28]
 80153f6:	e012      	b.n	801541e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80153f8:	68ba      	ldr	r2, [r7, #8]
 80153fa:	69fb      	ldr	r3, [r7, #28]
 80153fc:	4413      	add	r3, r2
 80153fe:	7819      	ldrb	r1, [r3, #0]
 8015400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015402:	69fb      	ldr	r3, [r7, #28]
 8015404:	4413      	add	r3, r2
 8015406:	3334      	adds	r3, #52	; 0x34
 8015408:	460a      	mov	r2, r1
 801540a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	4413      	add	r3, r2
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	2b00      	cmp	r3, #0
 8015416:	d006      	beq.n	8015426 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	3301      	adds	r3, #1
 801541c:	61fb      	str	r3, [r7, #28]
 801541e:	69fb      	ldr	r3, [r7, #28]
 8015420:	2b0f      	cmp	r3, #15
 8015422:	d9e9      	bls.n	80153f8 <prvInitialiseNewTask+0x66>
 8015424:	e000      	b.n	8015428 <prvInitialiseNewTask+0x96>
			{
				break;
 8015426:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542a:	2200      	movs	r2, #0
 801542c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015430:	e003      	b.n	801543a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015434:	2200      	movs	r2, #0
 8015436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801543a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801543c:	2b37      	cmp	r3, #55	; 0x37
 801543e:	d901      	bls.n	8015444 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015440:	2337      	movs	r3, #55	; 0x37
 8015442:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015448:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801544a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801544c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801544e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	2200      	movs	r2, #0
 8015454:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015458:	3304      	adds	r3, #4
 801545a:	4618      	mov	r0, r3
 801545c:	f7fe fd76 	bl	8013f4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015462:	3318      	adds	r3, #24
 8015464:	4618      	mov	r0, r3
 8015466:	f7fe fd71 	bl	8013f4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801546a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801546c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801546e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015472:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015478:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801547e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015482:	2200      	movs	r2, #0
 8015484:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015488:	2200      	movs	r2, #0
 801548a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	68f9      	ldr	r1, [r7, #12]
 8015492:	69b8      	ldr	r0, [r7, #24]
 8015494:	f001 fad8 	bl	8016a48 <pxPortInitialiseStack>
 8015498:	4602      	mov	r2, r0
 801549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801549c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d002      	beq.n	80154aa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80154a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154aa:	bf00      	nop
 80154ac:	3720      	adds	r7, #32
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
	...

080154b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b082      	sub	sp, #8
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80154bc:	f001 fbcc 	bl	8016c58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80154c0:	4b2d      	ldr	r3, [pc, #180]	; (8015578 <prvAddNewTaskToReadyList+0xc4>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	3301      	adds	r3, #1
 80154c6:	4a2c      	ldr	r2, [pc, #176]	; (8015578 <prvAddNewTaskToReadyList+0xc4>)
 80154c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80154ca:	4b2c      	ldr	r3, [pc, #176]	; (801557c <prvAddNewTaskToReadyList+0xc8>)
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80154d2:	4a2a      	ldr	r2, [pc, #168]	; (801557c <prvAddNewTaskToReadyList+0xc8>)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80154d8:	4b27      	ldr	r3, [pc, #156]	; (8015578 <prvAddNewTaskToReadyList+0xc4>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	2b01      	cmp	r3, #1
 80154de:	d110      	bne.n	8015502 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80154e0:	f000 fcb0 	bl	8015e44 <prvInitialiseTaskLists>
 80154e4:	e00d      	b.n	8015502 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80154e6:	4b26      	ldr	r3, [pc, #152]	; (8015580 <prvAddNewTaskToReadyList+0xcc>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d109      	bne.n	8015502 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80154ee:	4b23      	ldr	r3, [pc, #140]	; (801557c <prvAddNewTaskToReadyList+0xc8>)
 80154f0:	681b      	ldr	r3, [r3, #0]
 80154f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d802      	bhi.n	8015502 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80154fc:	4a1f      	ldr	r2, [pc, #124]	; (801557c <prvAddNewTaskToReadyList+0xc8>)
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015502:	4b20      	ldr	r3, [pc, #128]	; (8015584 <prvAddNewTaskToReadyList+0xd0>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	3301      	adds	r3, #1
 8015508:	4a1e      	ldr	r2, [pc, #120]	; (8015584 <prvAddNewTaskToReadyList+0xd0>)
 801550a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801550c:	4b1d      	ldr	r3, [pc, #116]	; (8015584 <prvAddNewTaskToReadyList+0xd0>)
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015518:	4b1b      	ldr	r3, [pc, #108]	; (8015588 <prvAddNewTaskToReadyList+0xd4>)
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	429a      	cmp	r2, r3
 801551e:	d903      	bls.n	8015528 <prvAddNewTaskToReadyList+0x74>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015524:	4a18      	ldr	r2, [pc, #96]	; (8015588 <prvAddNewTaskToReadyList+0xd4>)
 8015526:	6013      	str	r3, [r2, #0]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801552c:	4613      	mov	r3, r2
 801552e:	009b      	lsls	r3, r3, #2
 8015530:	4413      	add	r3, r2
 8015532:	009b      	lsls	r3, r3, #2
 8015534:	4a15      	ldr	r2, [pc, #84]	; (801558c <prvAddNewTaskToReadyList+0xd8>)
 8015536:	441a      	add	r2, r3
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	3304      	adds	r3, #4
 801553c:	4619      	mov	r1, r3
 801553e:	4610      	mov	r0, r2
 8015540:	f7fe fd11 	bl	8013f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015544:	f001 fbba 	bl	8016cbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015548:	4b0d      	ldr	r3, [pc, #52]	; (8015580 <prvAddNewTaskToReadyList+0xcc>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d00e      	beq.n	801556e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015550:	4b0a      	ldr	r3, [pc, #40]	; (801557c <prvAddNewTaskToReadyList+0xc8>)
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801555a:	429a      	cmp	r2, r3
 801555c:	d207      	bcs.n	801556e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801555e:	4b0c      	ldr	r3, [pc, #48]	; (8015590 <prvAddNewTaskToReadyList+0xdc>)
 8015560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015564:	601a      	str	r2, [r3, #0]
 8015566:	f3bf 8f4f 	dsb	sy
 801556a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801556e:	bf00      	nop
 8015570:	3708      	adds	r7, #8
 8015572:	46bd      	mov	sp, r7
 8015574:	bd80      	pop	{r7, pc}
 8015576:	bf00      	nop
 8015578:	20000ffc 	.word	0x20000ffc
 801557c:	20000b28 	.word	0x20000b28
 8015580:	20001008 	.word	0x20001008
 8015584:	20001018 	.word	0x20001018
 8015588:	20001004 	.word	0x20001004
 801558c:	20000b2c 	.word	0x20000b2c
 8015590:	e000ed04 	.word	0xe000ed04

08015594 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8015594:	b580      	push	{r7, lr}
 8015596:	b08a      	sub	sp, #40	; 0x28
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801559e:	2300      	movs	r3, #0
 80155a0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d10b      	bne.n	80155c0 <vTaskDelayUntil+0x2c>
 80155a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ac:	b672      	cpsid	i
 80155ae:	f383 8811 	msr	BASEPRI, r3
 80155b2:	f3bf 8f6f 	isb	sy
 80155b6:	f3bf 8f4f 	dsb	sy
 80155ba:	b662      	cpsie	i
 80155bc:	617b      	str	r3, [r7, #20]
 80155be:	e7fe      	b.n	80155be <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d10b      	bne.n	80155de <vTaskDelayUntil+0x4a>
 80155c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ca:	b672      	cpsid	i
 80155cc:	f383 8811 	msr	BASEPRI, r3
 80155d0:	f3bf 8f6f 	isb	sy
 80155d4:	f3bf 8f4f 	dsb	sy
 80155d8:	b662      	cpsie	i
 80155da:	613b      	str	r3, [r7, #16]
 80155dc:	e7fe      	b.n	80155dc <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 80155de:	4b2a      	ldr	r3, [pc, #168]	; (8015688 <vTaskDelayUntil+0xf4>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d00b      	beq.n	80155fe <vTaskDelayUntil+0x6a>
 80155e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ea:	b672      	cpsid	i
 80155ec:	f383 8811 	msr	BASEPRI, r3
 80155f0:	f3bf 8f6f 	isb	sy
 80155f4:	f3bf 8f4f 	dsb	sy
 80155f8:	b662      	cpsie	i
 80155fa:	60fb      	str	r3, [r7, #12]
 80155fc:	e7fe      	b.n	80155fc <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 80155fe:	f000 f8e7 	bl	80157d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8015602:	4b22      	ldr	r3, [pc, #136]	; (801568c <vTaskDelayUntil+0xf8>)
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	683a      	ldr	r2, [r7, #0]
 801560e:	4413      	add	r3, r2
 8015610:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	6a3a      	ldr	r2, [r7, #32]
 8015618:	429a      	cmp	r2, r3
 801561a:	d20b      	bcs.n	8015634 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	69fa      	ldr	r2, [r7, #28]
 8015622:	429a      	cmp	r2, r3
 8015624:	d211      	bcs.n	801564a <vTaskDelayUntil+0xb6>
 8015626:	69fa      	ldr	r2, [r7, #28]
 8015628:	6a3b      	ldr	r3, [r7, #32]
 801562a:	429a      	cmp	r2, r3
 801562c:	d90d      	bls.n	801564a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801562e:	2301      	movs	r3, #1
 8015630:	627b      	str	r3, [r7, #36]	; 0x24
 8015632:	e00a      	b.n	801564a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	69fa      	ldr	r2, [r7, #28]
 801563a:	429a      	cmp	r2, r3
 801563c:	d303      	bcc.n	8015646 <vTaskDelayUntil+0xb2>
 801563e:	69fa      	ldr	r2, [r7, #28]
 8015640:	6a3b      	ldr	r3, [r7, #32]
 8015642:	429a      	cmp	r2, r3
 8015644:	d901      	bls.n	801564a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8015646:	2301      	movs	r3, #1
 8015648:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	69fa      	ldr	r2, [r7, #28]
 801564e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8015650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015652:	2b00      	cmp	r3, #0
 8015654:	d006      	beq.n	8015664 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8015656:	69fa      	ldr	r2, [r7, #28]
 8015658:	6a3b      	ldr	r3, [r7, #32]
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	2100      	movs	r1, #0
 801565e:	4618      	mov	r0, r3
 8015660:	f000 fe4a 	bl	80162f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8015664:	f000 f8c2 	bl	80157ec <xTaskResumeAll>
 8015668:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d107      	bne.n	8015680 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8015670:	4b07      	ldr	r3, [pc, #28]	; (8015690 <vTaskDelayUntil+0xfc>)
 8015672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015676:	601a      	str	r2, [r3, #0]
 8015678:	f3bf 8f4f 	dsb	sy
 801567c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015680:	bf00      	nop
 8015682:	3728      	adds	r7, #40	; 0x28
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	20001024 	.word	0x20001024
 801568c:	20001000 	.word	0x20001000
 8015690:	e000ed04 	.word	0xe000ed04

08015694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801569c:	2300      	movs	r3, #0
 801569e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d018      	beq.n	80156d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80156a6:	4b14      	ldr	r3, [pc, #80]	; (80156f8 <vTaskDelay+0x64>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d00b      	beq.n	80156c6 <vTaskDelay+0x32>
 80156ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b2:	b672      	cpsid	i
 80156b4:	f383 8811 	msr	BASEPRI, r3
 80156b8:	f3bf 8f6f 	isb	sy
 80156bc:	f3bf 8f4f 	dsb	sy
 80156c0:	b662      	cpsie	i
 80156c2:	60bb      	str	r3, [r7, #8]
 80156c4:	e7fe      	b.n	80156c4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80156c6:	f000 f883 	bl	80157d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80156ca:	2100      	movs	r1, #0
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f000 fe13 	bl	80162f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80156d2:	f000 f88b 	bl	80157ec <xTaskResumeAll>
 80156d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d107      	bne.n	80156ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80156de:	4b07      	ldr	r3, [pc, #28]	; (80156fc <vTaskDelay+0x68>)
 80156e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156e4:	601a      	str	r2, [r3, #0]
 80156e6:	f3bf 8f4f 	dsb	sy
 80156ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80156ee:	bf00      	nop
 80156f0:	3710      	adds	r7, #16
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}
 80156f6:	bf00      	nop
 80156f8:	20001024 	.word	0x20001024
 80156fc:	e000ed04 	.word	0xe000ed04

08015700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015700:	b580      	push	{r7, lr}
 8015702:	b08a      	sub	sp, #40	; 0x28
 8015704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015706:	2300      	movs	r3, #0
 8015708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801570a:	2300      	movs	r3, #0
 801570c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801570e:	463a      	mov	r2, r7
 8015710:	1d39      	adds	r1, r7, #4
 8015712:	f107 0308 	add.w	r3, r7, #8
 8015716:	4618      	mov	r0, r3
 8015718:	f7fe fbc4 	bl	8013ea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801571c:	6839      	ldr	r1, [r7, #0]
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	68ba      	ldr	r2, [r7, #8]
 8015722:	9202      	str	r2, [sp, #8]
 8015724:	9301      	str	r3, [sp, #4]
 8015726:	2300      	movs	r3, #0
 8015728:	9300      	str	r3, [sp, #0]
 801572a:	2300      	movs	r3, #0
 801572c:	460a      	mov	r2, r1
 801572e:	4922      	ldr	r1, [pc, #136]	; (80157b8 <vTaskStartScheduler+0xb8>)
 8015730:	4822      	ldr	r0, [pc, #136]	; (80157bc <vTaskStartScheduler+0xbc>)
 8015732:	f7ff fd89 	bl	8015248 <xTaskCreateStatic>
 8015736:	4602      	mov	r2, r0
 8015738:	4b21      	ldr	r3, [pc, #132]	; (80157c0 <vTaskStartScheduler+0xc0>)
 801573a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801573c:	4b20      	ldr	r3, [pc, #128]	; (80157c0 <vTaskStartScheduler+0xc0>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d002      	beq.n	801574a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015744:	2301      	movs	r3, #1
 8015746:	617b      	str	r3, [r7, #20]
 8015748:	e001      	b.n	801574e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801574a:	2300      	movs	r3, #0
 801574c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	2b01      	cmp	r3, #1
 8015752:	d102      	bne.n	801575a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015754:	f000 fe24 	bl	80163a0 <xTimerCreateTimerTask>
 8015758:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d117      	bne.n	8015790 <vTaskStartScheduler+0x90>
 8015760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015764:	b672      	cpsid	i
 8015766:	f383 8811 	msr	BASEPRI, r3
 801576a:	f3bf 8f6f 	isb	sy
 801576e:	f3bf 8f4f 	dsb	sy
 8015772:	b662      	cpsie	i
 8015774:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015776:	4b13      	ldr	r3, [pc, #76]	; (80157c4 <vTaskStartScheduler+0xc4>)
 8015778:	f04f 32ff 	mov.w	r2, #4294967295
 801577c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801577e:	4b12      	ldr	r3, [pc, #72]	; (80157c8 <vTaskStartScheduler+0xc8>)
 8015780:	2201      	movs	r2, #1
 8015782:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015784:	4b11      	ldr	r3, [pc, #68]	; (80157cc <vTaskStartScheduler+0xcc>)
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801578a:	f001 f9e9 	bl	8016b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801578e:	e00f      	b.n	80157b0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015796:	d10b      	bne.n	80157b0 <vTaskStartScheduler+0xb0>
 8015798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801579c:	b672      	cpsid	i
 801579e:	f383 8811 	msr	BASEPRI, r3
 80157a2:	f3bf 8f6f 	isb	sy
 80157a6:	f3bf 8f4f 	dsb	sy
 80157aa:	b662      	cpsie	i
 80157ac:	60fb      	str	r3, [r7, #12]
 80157ae:	e7fe      	b.n	80157ae <vTaskStartScheduler+0xae>
}
 80157b0:	bf00      	nop
 80157b2:	3718      	adds	r7, #24
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	0801abe0 	.word	0x0801abe0
 80157bc:	08015e15 	.word	0x08015e15
 80157c0:	20001020 	.word	0x20001020
 80157c4:	2000101c 	.word	0x2000101c
 80157c8:	20001008 	.word	0x20001008
 80157cc:	20001000 	.word	0x20001000

080157d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80157d0:	b480      	push	{r7}
 80157d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80157d4:	4b04      	ldr	r3, [pc, #16]	; (80157e8 <vTaskSuspendAll+0x18>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	3301      	adds	r3, #1
 80157da:	4a03      	ldr	r2, [pc, #12]	; (80157e8 <vTaskSuspendAll+0x18>)
 80157dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80157de:	bf00      	nop
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	20001024 	.word	0x20001024

080157ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b084      	sub	sp, #16
 80157f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80157f2:	2300      	movs	r3, #0
 80157f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80157f6:	2300      	movs	r3, #0
 80157f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80157fa:	4b42      	ldr	r3, [pc, #264]	; (8015904 <xTaskResumeAll+0x118>)
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d10b      	bne.n	801581a <xTaskResumeAll+0x2e>
 8015802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015806:	b672      	cpsid	i
 8015808:	f383 8811 	msr	BASEPRI, r3
 801580c:	f3bf 8f6f 	isb	sy
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	b662      	cpsie	i
 8015816:	603b      	str	r3, [r7, #0]
 8015818:	e7fe      	b.n	8015818 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801581a:	f001 fa1d 	bl	8016c58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801581e:	4b39      	ldr	r3, [pc, #228]	; (8015904 <xTaskResumeAll+0x118>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	3b01      	subs	r3, #1
 8015824:	4a37      	ldr	r2, [pc, #220]	; (8015904 <xTaskResumeAll+0x118>)
 8015826:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015828:	4b36      	ldr	r3, [pc, #216]	; (8015904 <xTaskResumeAll+0x118>)
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d162      	bne.n	80158f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015830:	4b35      	ldr	r3, [pc, #212]	; (8015908 <xTaskResumeAll+0x11c>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	d05e      	beq.n	80158f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015838:	e02f      	b.n	801589a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801583a:	4b34      	ldr	r3, [pc, #208]	; (801590c <xTaskResumeAll+0x120>)
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	3318      	adds	r3, #24
 8015846:	4618      	mov	r0, r3
 8015848:	f7fe fbea 	bl	8014020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	3304      	adds	r3, #4
 8015850:	4618      	mov	r0, r3
 8015852:	f7fe fbe5 	bl	8014020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801585a:	4b2d      	ldr	r3, [pc, #180]	; (8015910 <xTaskResumeAll+0x124>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	429a      	cmp	r2, r3
 8015860:	d903      	bls.n	801586a <xTaskResumeAll+0x7e>
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015866:	4a2a      	ldr	r2, [pc, #168]	; (8015910 <xTaskResumeAll+0x124>)
 8015868:	6013      	str	r3, [r2, #0]
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801586e:	4613      	mov	r3, r2
 8015870:	009b      	lsls	r3, r3, #2
 8015872:	4413      	add	r3, r2
 8015874:	009b      	lsls	r3, r3, #2
 8015876:	4a27      	ldr	r2, [pc, #156]	; (8015914 <xTaskResumeAll+0x128>)
 8015878:	441a      	add	r2, r3
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	3304      	adds	r3, #4
 801587e:	4619      	mov	r1, r3
 8015880:	4610      	mov	r0, r2
 8015882:	f7fe fb70 	bl	8013f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801588a:	4b23      	ldr	r3, [pc, #140]	; (8015918 <xTaskResumeAll+0x12c>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015890:	429a      	cmp	r2, r3
 8015892:	d302      	bcc.n	801589a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015894:	4b21      	ldr	r3, [pc, #132]	; (801591c <xTaskResumeAll+0x130>)
 8015896:	2201      	movs	r2, #1
 8015898:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801589a:	4b1c      	ldr	r3, [pc, #112]	; (801590c <xTaskResumeAll+0x120>)
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d1cb      	bne.n	801583a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d001      	beq.n	80158ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80158a8:	f000 fb68 	bl	8015f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80158ac:	4b1c      	ldr	r3, [pc, #112]	; (8015920 <xTaskResumeAll+0x134>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d010      	beq.n	80158da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80158b8:	f000 f858 	bl	801596c <xTaskIncrementTick>
 80158bc:	4603      	mov	r3, r0
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d002      	beq.n	80158c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80158c2:	4b16      	ldr	r3, [pc, #88]	; (801591c <xTaskResumeAll+0x130>)
 80158c4:	2201      	movs	r2, #1
 80158c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	3b01      	subs	r3, #1
 80158cc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1f1      	bne.n	80158b8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80158d4:	4b12      	ldr	r3, [pc, #72]	; (8015920 <xTaskResumeAll+0x134>)
 80158d6:	2200      	movs	r2, #0
 80158d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80158da:	4b10      	ldr	r3, [pc, #64]	; (801591c <xTaskResumeAll+0x130>)
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d009      	beq.n	80158f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80158e2:	2301      	movs	r3, #1
 80158e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80158e6:	4b0f      	ldr	r3, [pc, #60]	; (8015924 <xTaskResumeAll+0x138>)
 80158e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80158ec:	601a      	str	r2, [r3, #0]
 80158ee:	f3bf 8f4f 	dsb	sy
 80158f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80158f6:	f001 f9e1 	bl	8016cbc <vPortExitCritical>

	return xAlreadyYielded;
 80158fa:	68bb      	ldr	r3, [r7, #8]
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3710      	adds	r7, #16
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	20001024 	.word	0x20001024
 8015908:	20000ffc 	.word	0x20000ffc
 801590c:	20000fbc 	.word	0x20000fbc
 8015910:	20001004 	.word	0x20001004
 8015914:	20000b2c 	.word	0x20000b2c
 8015918:	20000b28 	.word	0x20000b28
 801591c:	20001010 	.word	0x20001010
 8015920:	2000100c 	.word	0x2000100c
 8015924:	e000ed04 	.word	0xe000ed04

08015928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015928:	b480      	push	{r7}
 801592a:	b083      	sub	sp, #12
 801592c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801592e:	4b05      	ldr	r3, [pc, #20]	; (8015944 <xTaskGetTickCount+0x1c>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015934:	687b      	ldr	r3, [r7, #4]
}
 8015936:	4618      	mov	r0, r3
 8015938:	370c      	adds	r7, #12
 801593a:	46bd      	mov	sp, r7
 801593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015940:	4770      	bx	lr
 8015942:	bf00      	nop
 8015944:	20001000 	.word	0x20001000

08015948 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801594e:	f001 fa63 	bl	8016e18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015952:	2300      	movs	r3, #0
 8015954:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015956:	4b04      	ldr	r3, [pc, #16]	; (8015968 <xTaskGetTickCountFromISR+0x20>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801595c:	683b      	ldr	r3, [r7, #0]
}
 801595e:	4618      	mov	r0, r3
 8015960:	3708      	adds	r7, #8
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	20001000 	.word	0x20001000

0801596c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801596c:	b580      	push	{r7, lr}
 801596e:	b086      	sub	sp, #24
 8015970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015972:	2300      	movs	r3, #0
 8015974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015976:	4b4f      	ldr	r3, [pc, #316]	; (8015ab4 <xTaskIncrementTick+0x148>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	2b00      	cmp	r3, #0
 801597c:	f040 808a 	bne.w	8015a94 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015980:	4b4d      	ldr	r3, [pc, #308]	; (8015ab8 <xTaskIncrementTick+0x14c>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	3301      	adds	r3, #1
 8015986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015988:	4a4b      	ldr	r2, [pc, #300]	; (8015ab8 <xTaskIncrementTick+0x14c>)
 801598a:	693b      	ldr	r3, [r7, #16]
 801598c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d121      	bne.n	80159d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015994:	4b49      	ldr	r3, [pc, #292]	; (8015abc <xTaskIncrementTick+0x150>)
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00b      	beq.n	80159b6 <xTaskIncrementTick+0x4a>
 801599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159a2:	b672      	cpsid	i
 80159a4:	f383 8811 	msr	BASEPRI, r3
 80159a8:	f3bf 8f6f 	isb	sy
 80159ac:	f3bf 8f4f 	dsb	sy
 80159b0:	b662      	cpsie	i
 80159b2:	603b      	str	r3, [r7, #0]
 80159b4:	e7fe      	b.n	80159b4 <xTaskIncrementTick+0x48>
 80159b6:	4b41      	ldr	r3, [pc, #260]	; (8015abc <xTaskIncrementTick+0x150>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	60fb      	str	r3, [r7, #12]
 80159bc:	4b40      	ldr	r3, [pc, #256]	; (8015ac0 <xTaskIncrementTick+0x154>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4a3e      	ldr	r2, [pc, #248]	; (8015abc <xTaskIncrementTick+0x150>)
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	4a3e      	ldr	r2, [pc, #248]	; (8015ac0 <xTaskIncrementTick+0x154>)
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6013      	str	r3, [r2, #0]
 80159ca:	4b3e      	ldr	r3, [pc, #248]	; (8015ac4 <xTaskIncrementTick+0x158>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	3301      	adds	r3, #1
 80159d0:	4a3c      	ldr	r2, [pc, #240]	; (8015ac4 <xTaskIncrementTick+0x158>)
 80159d2:	6013      	str	r3, [r2, #0]
 80159d4:	f000 fad2 	bl	8015f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80159d8:	4b3b      	ldr	r3, [pc, #236]	; (8015ac8 <xTaskIncrementTick+0x15c>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	693a      	ldr	r2, [r7, #16]
 80159de:	429a      	cmp	r2, r3
 80159e0:	d349      	bcc.n	8015a76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159e2:	4b36      	ldr	r3, [pc, #216]	; (8015abc <xTaskIncrementTick+0x150>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	681b      	ldr	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d104      	bne.n	80159f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80159ec:	4b36      	ldr	r3, [pc, #216]	; (8015ac8 <xTaskIncrementTick+0x15c>)
 80159ee:	f04f 32ff 	mov.w	r2, #4294967295
 80159f2:	601a      	str	r2, [r3, #0]
					break;
 80159f4:	e03f      	b.n	8015a76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159f6:	4b31      	ldr	r3, [pc, #196]	; (8015abc <xTaskIncrementTick+0x150>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015a06:	693a      	ldr	r2, [r7, #16]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d203      	bcs.n	8015a16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015a0e:	4a2e      	ldr	r2, [pc, #184]	; (8015ac8 <xTaskIncrementTick+0x15c>)
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015a14:	e02f      	b.n	8015a76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	3304      	adds	r3, #4
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7fe fb00 	bl	8014020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d004      	beq.n	8015a32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	3318      	adds	r3, #24
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f7fe faf7 	bl	8014020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015a32:	68bb      	ldr	r3, [r7, #8]
 8015a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a36:	4b25      	ldr	r3, [pc, #148]	; (8015acc <xTaskIncrementTick+0x160>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d903      	bls.n	8015a46 <xTaskIncrementTick+0xda>
 8015a3e:	68bb      	ldr	r3, [r7, #8]
 8015a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a42:	4a22      	ldr	r2, [pc, #136]	; (8015acc <xTaskIncrementTick+0x160>)
 8015a44:	6013      	str	r3, [r2, #0]
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	4413      	add	r3, r2
 8015a50:	009b      	lsls	r3, r3, #2
 8015a52:	4a1f      	ldr	r2, [pc, #124]	; (8015ad0 <xTaskIncrementTick+0x164>)
 8015a54:	441a      	add	r2, r3
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	4610      	mov	r0, r2
 8015a5e:	f7fe fa82 	bl	8013f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a66:	4b1b      	ldr	r3, [pc, #108]	; (8015ad4 <xTaskIncrementTick+0x168>)
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a6c:	429a      	cmp	r2, r3
 8015a6e:	d3b8      	bcc.n	80159e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015a70:	2301      	movs	r3, #1
 8015a72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015a74:	e7b5      	b.n	80159e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015a76:	4b17      	ldr	r3, [pc, #92]	; (8015ad4 <xTaskIncrementTick+0x168>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a7c:	4914      	ldr	r1, [pc, #80]	; (8015ad0 <xTaskIncrementTick+0x164>)
 8015a7e:	4613      	mov	r3, r2
 8015a80:	009b      	lsls	r3, r3, #2
 8015a82:	4413      	add	r3, r2
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	440b      	add	r3, r1
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	2b01      	cmp	r3, #1
 8015a8c:	d907      	bls.n	8015a9e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8015a8e:	2301      	movs	r3, #1
 8015a90:	617b      	str	r3, [r7, #20]
 8015a92:	e004      	b.n	8015a9e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8015a94:	4b10      	ldr	r3, [pc, #64]	; (8015ad8 <xTaskIncrementTick+0x16c>)
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	4a0f      	ldr	r2, [pc, #60]	; (8015ad8 <xTaskIncrementTick+0x16c>)
 8015a9c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8015a9e:	4b0f      	ldr	r3, [pc, #60]	; (8015adc <xTaskIncrementTick+0x170>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d001      	beq.n	8015aaa <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8015aaa:	697b      	ldr	r3, [r7, #20]
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3718      	adds	r7, #24
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	20001024 	.word	0x20001024
 8015ab8:	20001000 	.word	0x20001000
 8015abc:	20000fb4 	.word	0x20000fb4
 8015ac0:	20000fb8 	.word	0x20000fb8
 8015ac4:	20001014 	.word	0x20001014
 8015ac8:	2000101c 	.word	0x2000101c
 8015acc:	20001004 	.word	0x20001004
 8015ad0:	20000b2c 	.word	0x20000b2c
 8015ad4:	20000b28 	.word	0x20000b28
 8015ad8:	2000100c 	.word	0x2000100c
 8015adc:	20001010 	.word	0x20001010

08015ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	b085      	sub	sp, #20
 8015ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015ae6:	4b28      	ldr	r3, [pc, #160]	; (8015b88 <vTaskSwitchContext+0xa8>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d003      	beq.n	8015af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015aee:	4b27      	ldr	r3, [pc, #156]	; (8015b8c <vTaskSwitchContext+0xac>)
 8015af0:	2201      	movs	r2, #1
 8015af2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015af4:	e042      	b.n	8015b7c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8015af6:	4b25      	ldr	r3, [pc, #148]	; (8015b8c <vTaskSwitchContext+0xac>)
 8015af8:	2200      	movs	r2, #0
 8015afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015afc:	4b24      	ldr	r3, [pc, #144]	; (8015b90 <vTaskSwitchContext+0xb0>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	60fb      	str	r3, [r7, #12]
 8015b02:	e011      	b.n	8015b28 <vTaskSwitchContext+0x48>
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d10b      	bne.n	8015b22 <vTaskSwitchContext+0x42>
 8015b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b0e:	b672      	cpsid	i
 8015b10:	f383 8811 	msr	BASEPRI, r3
 8015b14:	f3bf 8f6f 	isb	sy
 8015b18:	f3bf 8f4f 	dsb	sy
 8015b1c:	b662      	cpsie	i
 8015b1e:	607b      	str	r3, [r7, #4]
 8015b20:	e7fe      	b.n	8015b20 <vTaskSwitchContext+0x40>
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	3b01      	subs	r3, #1
 8015b26:	60fb      	str	r3, [r7, #12]
 8015b28:	491a      	ldr	r1, [pc, #104]	; (8015b94 <vTaskSwitchContext+0xb4>)
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	4613      	mov	r3, r2
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	4413      	add	r3, r2
 8015b32:	009b      	lsls	r3, r3, #2
 8015b34:	440b      	add	r3, r1
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d0e3      	beq.n	8015b04 <vTaskSwitchContext+0x24>
 8015b3c:	68fa      	ldr	r2, [r7, #12]
 8015b3e:	4613      	mov	r3, r2
 8015b40:	009b      	lsls	r3, r3, #2
 8015b42:	4413      	add	r3, r2
 8015b44:	009b      	lsls	r3, r3, #2
 8015b46:	4a13      	ldr	r2, [pc, #76]	; (8015b94 <vTaskSwitchContext+0xb4>)
 8015b48:	4413      	add	r3, r2
 8015b4a:	60bb      	str	r3, [r7, #8]
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	685a      	ldr	r2, [r3, #4]
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	605a      	str	r2, [r3, #4]
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	685a      	ldr	r2, [r3, #4]
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	3308      	adds	r3, #8
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d104      	bne.n	8015b6c <vTaskSwitchContext+0x8c>
 8015b62:	68bb      	ldr	r3, [r7, #8]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	685a      	ldr	r2, [r3, #4]
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	605a      	str	r2, [r3, #4]
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	685b      	ldr	r3, [r3, #4]
 8015b70:	68db      	ldr	r3, [r3, #12]
 8015b72:	4a09      	ldr	r2, [pc, #36]	; (8015b98 <vTaskSwitchContext+0xb8>)
 8015b74:	6013      	str	r3, [r2, #0]
 8015b76:	4a06      	ldr	r2, [pc, #24]	; (8015b90 <vTaskSwitchContext+0xb0>)
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	6013      	str	r3, [r2, #0]
}
 8015b7c:	bf00      	nop
 8015b7e:	3714      	adds	r7, #20
 8015b80:	46bd      	mov	sp, r7
 8015b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b86:	4770      	bx	lr
 8015b88:	20001024 	.word	0x20001024
 8015b8c:	20001010 	.word	0x20001010
 8015b90:	20001004 	.word	0x20001004
 8015b94:	20000b2c 	.word	0x20000b2c
 8015b98:	20000b28 	.word	0x20000b28

08015b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015b9c:	b580      	push	{r7, lr}
 8015b9e:	b084      	sub	sp, #16
 8015ba0:	af00      	add	r7, sp, #0
 8015ba2:	6078      	str	r0, [r7, #4]
 8015ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d10b      	bne.n	8015bc4 <vTaskPlaceOnEventList+0x28>
 8015bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb0:	b672      	cpsid	i
 8015bb2:	f383 8811 	msr	BASEPRI, r3
 8015bb6:	f3bf 8f6f 	isb	sy
 8015bba:	f3bf 8f4f 	dsb	sy
 8015bbe:	b662      	cpsie	i
 8015bc0:	60fb      	str	r3, [r7, #12]
 8015bc2:	e7fe      	b.n	8015bc2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015bc4:	4b07      	ldr	r3, [pc, #28]	; (8015be4 <vTaskPlaceOnEventList+0x48>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	3318      	adds	r3, #24
 8015bca:	4619      	mov	r1, r3
 8015bcc:	6878      	ldr	r0, [r7, #4]
 8015bce:	f7fe f9ee 	bl	8013fae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	6838      	ldr	r0, [r7, #0]
 8015bd6:	f000 fb8f 	bl	80162f8 <prvAddCurrentTaskToDelayedList>
}
 8015bda:	bf00      	nop
 8015bdc:	3710      	adds	r7, #16
 8015bde:	46bd      	mov	sp, r7
 8015be0:	bd80      	pop	{r7, pc}
 8015be2:	bf00      	nop
 8015be4:	20000b28 	.word	0x20000b28

08015be8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b086      	sub	sp, #24
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	60b9      	str	r1, [r7, #8]
 8015bf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d10b      	bne.n	8015c12 <vTaskPlaceOnEventListRestricted+0x2a>
 8015bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bfe:	b672      	cpsid	i
 8015c00:	f383 8811 	msr	BASEPRI, r3
 8015c04:	f3bf 8f6f 	isb	sy
 8015c08:	f3bf 8f4f 	dsb	sy
 8015c0c:	b662      	cpsie	i
 8015c0e:	617b      	str	r3, [r7, #20]
 8015c10:	e7fe      	b.n	8015c10 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015c12:	4b0a      	ldr	r3, [pc, #40]	; (8015c3c <vTaskPlaceOnEventListRestricted+0x54>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	3318      	adds	r3, #24
 8015c18:	4619      	mov	r1, r3
 8015c1a:	68f8      	ldr	r0, [r7, #12]
 8015c1c:	f7fe f9a3 	bl	8013f66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d002      	beq.n	8015c2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015c26:	f04f 33ff 	mov.w	r3, #4294967295
 8015c2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015c2c:	6879      	ldr	r1, [r7, #4]
 8015c2e:	68b8      	ldr	r0, [r7, #8]
 8015c30:	f000 fb62 	bl	80162f8 <prvAddCurrentTaskToDelayedList>
	}
 8015c34:	bf00      	nop
 8015c36:	3718      	adds	r7, #24
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	20000b28 	.word	0x20000b28

08015c40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b086      	sub	sp, #24
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	68db      	ldr	r3, [r3, #12]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10b      	bne.n	8015c6e <xTaskRemoveFromEventList+0x2e>
 8015c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5a:	b672      	cpsid	i
 8015c5c:	f383 8811 	msr	BASEPRI, r3
 8015c60:	f3bf 8f6f 	isb	sy
 8015c64:	f3bf 8f4f 	dsb	sy
 8015c68:	b662      	cpsie	i
 8015c6a:	60fb      	str	r3, [r7, #12]
 8015c6c:	e7fe      	b.n	8015c6c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015c6e:	693b      	ldr	r3, [r7, #16]
 8015c70:	3318      	adds	r3, #24
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7fe f9d4 	bl	8014020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c78:	4b1d      	ldr	r3, [pc, #116]	; (8015cf0 <xTaskRemoveFromEventList+0xb0>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d11d      	bne.n	8015cbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015c80:	693b      	ldr	r3, [r7, #16]
 8015c82:	3304      	adds	r3, #4
 8015c84:	4618      	mov	r0, r3
 8015c86:	f7fe f9cb 	bl	8014020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c8e:	4b19      	ldr	r3, [pc, #100]	; (8015cf4 <xTaskRemoveFromEventList+0xb4>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d903      	bls.n	8015c9e <xTaskRemoveFromEventList+0x5e>
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c9a:	4a16      	ldr	r2, [pc, #88]	; (8015cf4 <xTaskRemoveFromEventList+0xb4>)
 8015c9c:	6013      	str	r3, [r2, #0]
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	4413      	add	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	4a13      	ldr	r2, [pc, #76]	; (8015cf8 <xTaskRemoveFromEventList+0xb8>)
 8015cac:	441a      	add	r2, r3
 8015cae:	693b      	ldr	r3, [r7, #16]
 8015cb0:	3304      	adds	r3, #4
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	4610      	mov	r0, r2
 8015cb6:	f7fe f956 	bl	8013f66 <vListInsertEnd>
 8015cba:	e005      	b.n	8015cc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	3318      	adds	r3, #24
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	480e      	ldr	r0, [pc, #56]	; (8015cfc <xTaskRemoveFromEventList+0xbc>)
 8015cc4:	f7fe f94f 	bl	8013f66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ccc:	4b0c      	ldr	r3, [pc, #48]	; (8015d00 <xTaskRemoveFromEventList+0xc0>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d905      	bls.n	8015ce2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015cda:	4b0a      	ldr	r3, [pc, #40]	; (8015d04 <xTaskRemoveFromEventList+0xc4>)
 8015cdc:	2201      	movs	r2, #1
 8015cde:	601a      	str	r2, [r3, #0]
 8015ce0:	e001      	b.n	8015ce6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015ce6:	697b      	ldr	r3, [r7, #20]
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3718      	adds	r7, #24
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	20001024 	.word	0x20001024
 8015cf4:	20001004 	.word	0x20001004
 8015cf8:	20000b2c 	.word	0x20000b2c
 8015cfc:	20000fbc 	.word	0x20000fbc
 8015d00:	20000b28 	.word	0x20000b28
 8015d04:	20001010 	.word	0x20001010

08015d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b083      	sub	sp, #12
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015d10:	4b06      	ldr	r3, [pc, #24]	; (8015d2c <vTaskInternalSetTimeOutState+0x24>)
 8015d12:	681a      	ldr	r2, [r3, #0]
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015d18:	4b05      	ldr	r3, [pc, #20]	; (8015d30 <vTaskInternalSetTimeOutState+0x28>)
 8015d1a:	681a      	ldr	r2, [r3, #0]
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	605a      	str	r2, [r3, #4]
}
 8015d20:	bf00      	nop
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr
 8015d2c:	20001014 	.word	0x20001014
 8015d30:	20001000 	.word	0x20001000

08015d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b088      	sub	sp, #32
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
 8015d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d10b      	bne.n	8015d5c <xTaskCheckForTimeOut+0x28>
 8015d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d48:	b672      	cpsid	i
 8015d4a:	f383 8811 	msr	BASEPRI, r3
 8015d4e:	f3bf 8f6f 	isb	sy
 8015d52:	f3bf 8f4f 	dsb	sy
 8015d56:	b662      	cpsie	i
 8015d58:	613b      	str	r3, [r7, #16]
 8015d5a:	e7fe      	b.n	8015d5a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015d5c:	683b      	ldr	r3, [r7, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10b      	bne.n	8015d7a <xTaskCheckForTimeOut+0x46>
 8015d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d66:	b672      	cpsid	i
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	b662      	cpsie	i
 8015d76:	60fb      	str	r3, [r7, #12]
 8015d78:	e7fe      	b.n	8015d78 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015d7a:	f000 ff6d 	bl	8016c58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015d7e:	4b1d      	ldr	r3, [pc, #116]	; (8015df4 <xTaskCheckForTimeOut+0xc0>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	685b      	ldr	r3, [r3, #4]
 8015d88:	69ba      	ldr	r2, [r7, #24]
 8015d8a:	1ad3      	subs	r3, r2, r3
 8015d8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d96:	d102      	bne.n	8015d9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	61fb      	str	r3, [r7, #28]
 8015d9c:	e023      	b.n	8015de6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	681a      	ldr	r2, [r3, #0]
 8015da2:	4b15      	ldr	r3, [pc, #84]	; (8015df8 <xTaskCheckForTimeOut+0xc4>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d007      	beq.n	8015dba <xTaskCheckForTimeOut+0x86>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	69ba      	ldr	r2, [r7, #24]
 8015db0:	429a      	cmp	r2, r3
 8015db2:	d302      	bcc.n	8015dba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015db4:	2301      	movs	r3, #1
 8015db6:	61fb      	str	r3, [r7, #28]
 8015db8:	e015      	b.n	8015de6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	697a      	ldr	r2, [r7, #20]
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d20b      	bcs.n	8015ddc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	681a      	ldr	r2, [r3, #0]
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	1ad2      	subs	r2, r2, r3
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015dd0:	6878      	ldr	r0, [r7, #4]
 8015dd2:	f7ff ff99 	bl	8015d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	61fb      	str	r3, [r7, #28]
 8015dda:	e004      	b.n	8015de6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	2200      	movs	r2, #0
 8015de0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015de2:	2301      	movs	r3, #1
 8015de4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015de6:	f000 ff69 	bl	8016cbc <vPortExitCritical>

	return xReturn;
 8015dea:	69fb      	ldr	r3, [r7, #28]
}
 8015dec:	4618      	mov	r0, r3
 8015dee:	3720      	adds	r7, #32
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}
 8015df4:	20001000 	.word	0x20001000
 8015df8:	20001014 	.word	0x20001014

08015dfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015e00:	4b03      	ldr	r3, [pc, #12]	; (8015e10 <vTaskMissedYield+0x14>)
 8015e02:	2201      	movs	r2, #1
 8015e04:	601a      	str	r2, [r3, #0]
}
 8015e06:	bf00      	nop
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr
 8015e10:	20001010 	.word	0x20001010

08015e14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b082      	sub	sp, #8
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015e1c:	f000 f852 	bl	8015ec4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015e20:	4b06      	ldr	r3, [pc, #24]	; (8015e3c <prvIdleTask+0x28>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	2b01      	cmp	r3, #1
 8015e26:	d9f9      	bls.n	8015e1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015e28:	4b05      	ldr	r3, [pc, #20]	; (8015e40 <prvIdleTask+0x2c>)
 8015e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e2e:	601a      	str	r2, [r3, #0]
 8015e30:	f3bf 8f4f 	dsb	sy
 8015e34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015e38:	e7f0      	b.n	8015e1c <prvIdleTask+0x8>
 8015e3a:	bf00      	nop
 8015e3c:	20000b2c 	.word	0x20000b2c
 8015e40:	e000ed04 	.word	0xe000ed04

08015e44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b082      	sub	sp, #8
 8015e48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	607b      	str	r3, [r7, #4]
 8015e4e:	e00c      	b.n	8015e6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	4613      	mov	r3, r2
 8015e54:	009b      	lsls	r3, r3, #2
 8015e56:	4413      	add	r3, r2
 8015e58:	009b      	lsls	r3, r3, #2
 8015e5a:	4a12      	ldr	r2, [pc, #72]	; (8015ea4 <prvInitialiseTaskLists+0x60>)
 8015e5c:	4413      	add	r3, r2
 8015e5e:	4618      	mov	r0, r3
 8015e60:	f7fe f854 	bl	8013f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	3301      	adds	r3, #1
 8015e68:	607b      	str	r3, [r7, #4]
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	2b37      	cmp	r3, #55	; 0x37
 8015e6e:	d9ef      	bls.n	8015e50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e70:	480d      	ldr	r0, [pc, #52]	; (8015ea8 <prvInitialiseTaskLists+0x64>)
 8015e72:	f7fe f84b 	bl	8013f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e76:	480d      	ldr	r0, [pc, #52]	; (8015eac <prvInitialiseTaskLists+0x68>)
 8015e78:	f7fe f848 	bl	8013f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e7c:	480c      	ldr	r0, [pc, #48]	; (8015eb0 <prvInitialiseTaskLists+0x6c>)
 8015e7e:	f7fe f845 	bl	8013f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e82:	480c      	ldr	r0, [pc, #48]	; (8015eb4 <prvInitialiseTaskLists+0x70>)
 8015e84:	f7fe f842 	bl	8013f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e88:	480b      	ldr	r0, [pc, #44]	; (8015eb8 <prvInitialiseTaskLists+0x74>)
 8015e8a:	f7fe f83f 	bl	8013f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e8e:	4b0b      	ldr	r3, [pc, #44]	; (8015ebc <prvInitialiseTaskLists+0x78>)
 8015e90:	4a05      	ldr	r2, [pc, #20]	; (8015ea8 <prvInitialiseTaskLists+0x64>)
 8015e92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e94:	4b0a      	ldr	r3, [pc, #40]	; (8015ec0 <prvInitialiseTaskLists+0x7c>)
 8015e96:	4a05      	ldr	r2, [pc, #20]	; (8015eac <prvInitialiseTaskLists+0x68>)
 8015e98:	601a      	str	r2, [r3, #0]
}
 8015e9a:	bf00      	nop
 8015e9c:	3708      	adds	r7, #8
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	20000b2c 	.word	0x20000b2c
 8015ea8:	20000f8c 	.word	0x20000f8c
 8015eac:	20000fa0 	.word	0x20000fa0
 8015eb0:	20000fbc 	.word	0x20000fbc
 8015eb4:	20000fd0 	.word	0x20000fd0
 8015eb8:	20000fe8 	.word	0x20000fe8
 8015ebc:	20000fb4 	.word	0x20000fb4
 8015ec0:	20000fb8 	.word	0x20000fb8

08015ec4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015eca:	e019      	b.n	8015f00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015ecc:	f000 fec4 	bl	8016c58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ed0:	4b0f      	ldr	r3, [pc, #60]	; (8015f10 <prvCheckTasksWaitingTermination+0x4c>)
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	68db      	ldr	r3, [r3, #12]
 8015ed6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	3304      	adds	r3, #4
 8015edc:	4618      	mov	r0, r3
 8015ede:	f7fe f89f 	bl	8014020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015ee2:	4b0c      	ldr	r3, [pc, #48]	; (8015f14 <prvCheckTasksWaitingTermination+0x50>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	3b01      	subs	r3, #1
 8015ee8:	4a0a      	ldr	r2, [pc, #40]	; (8015f14 <prvCheckTasksWaitingTermination+0x50>)
 8015eea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015eec:	4b0a      	ldr	r3, [pc, #40]	; (8015f18 <prvCheckTasksWaitingTermination+0x54>)
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	3b01      	subs	r3, #1
 8015ef2:	4a09      	ldr	r2, [pc, #36]	; (8015f18 <prvCheckTasksWaitingTermination+0x54>)
 8015ef4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015ef6:	f000 fee1 	bl	8016cbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f000 f80e 	bl	8015f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015f00:	4b05      	ldr	r3, [pc, #20]	; (8015f18 <prvCheckTasksWaitingTermination+0x54>)
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d1e1      	bne.n	8015ecc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015f08:	bf00      	nop
 8015f0a:	3708      	adds	r7, #8
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	bd80      	pop	{r7, pc}
 8015f10:	20000fd0 	.word	0x20000fd0
 8015f14:	20000ffc 	.word	0x20000ffc
 8015f18:	20000fe4 	.word	0x20000fe4

08015f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d108      	bne.n	8015f40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f32:	4618      	mov	r0, r3
 8015f34:	f001 f87a 	bl	801702c <vPortFree>
				vPortFree( pxTCB );
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f001 f877 	bl	801702c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015f3e:	e019      	b.n	8015f74 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d103      	bne.n	8015f52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015f4a:	6878      	ldr	r0, [r7, #4]
 8015f4c:	f001 f86e 	bl	801702c <vPortFree>
	}
 8015f50:	e010      	b.n	8015f74 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015f58:	2b02      	cmp	r3, #2
 8015f5a:	d00b      	beq.n	8015f74 <prvDeleteTCB+0x58>
 8015f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f60:	b672      	cpsid	i
 8015f62:	f383 8811 	msr	BASEPRI, r3
 8015f66:	f3bf 8f6f 	isb	sy
 8015f6a:	f3bf 8f4f 	dsb	sy
 8015f6e:	b662      	cpsie	i
 8015f70:	60fb      	str	r3, [r7, #12]
 8015f72:	e7fe      	b.n	8015f72 <prvDeleteTCB+0x56>
	}
 8015f74:	bf00      	nop
 8015f76:	3710      	adds	r7, #16
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}

08015f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015f7c:	b480      	push	{r7}
 8015f7e:	b083      	sub	sp, #12
 8015f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f82:	4b0c      	ldr	r3, [pc, #48]	; (8015fb4 <prvResetNextTaskUnblockTime+0x38>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d104      	bne.n	8015f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015f8c:	4b0a      	ldr	r3, [pc, #40]	; (8015fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8015f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015f94:	e008      	b.n	8015fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f96:	4b07      	ldr	r3, [pc, #28]	; (8015fb4 <prvResetNextTaskUnblockTime+0x38>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	68db      	ldr	r3, [r3, #12]
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	685b      	ldr	r3, [r3, #4]
 8015fa4:	4a04      	ldr	r2, [pc, #16]	; (8015fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8015fa6:	6013      	str	r3, [r2, #0]
}
 8015fa8:	bf00      	nop
 8015faa:	370c      	adds	r7, #12
 8015fac:	46bd      	mov	sp, r7
 8015fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb2:	4770      	bx	lr
 8015fb4:	20000fb4 	.word	0x20000fb4
 8015fb8:	2000101c 	.word	0x2000101c

08015fbc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015fc2:	4b05      	ldr	r3, [pc, #20]	; (8015fd8 <xTaskGetCurrentTaskHandle+0x1c>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015fc8:	687b      	ldr	r3, [r7, #4]
	}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	370c      	adds	r7, #12
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	20000b28 	.word	0x20000b28

08015fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015fdc:	b480      	push	{r7}
 8015fde:	b083      	sub	sp, #12
 8015fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015fe2:	4b0b      	ldr	r3, [pc, #44]	; (8016010 <xTaskGetSchedulerState+0x34>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d102      	bne.n	8015ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015fea:	2301      	movs	r3, #1
 8015fec:	607b      	str	r3, [r7, #4]
 8015fee:	e008      	b.n	8016002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ff0:	4b08      	ldr	r3, [pc, #32]	; (8016014 <xTaskGetSchedulerState+0x38>)
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d102      	bne.n	8015ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015ff8:	2302      	movs	r3, #2
 8015ffa:	607b      	str	r3, [r7, #4]
 8015ffc:	e001      	b.n	8016002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015ffe:	2300      	movs	r3, #0
 8016000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016002:	687b      	ldr	r3, [r7, #4]
	}
 8016004:	4618      	mov	r0, r3
 8016006:	370c      	adds	r7, #12
 8016008:	46bd      	mov	sp, r7
 801600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600e:	4770      	bx	lr
 8016010:	20001008 	.word	0x20001008
 8016014:	20001024 	.word	0x20001024

08016018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8016018:	b580      	push	{r7, lr}
 801601a:	b084      	sub	sp, #16
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8016024:	2300      	movs	r3, #0
 8016026:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d051      	beq.n	80160d2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016032:	4b2a      	ldr	r3, [pc, #168]	; (80160dc <xTaskPriorityInherit+0xc4>)
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016038:	429a      	cmp	r2, r3
 801603a:	d241      	bcs.n	80160c0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	699b      	ldr	r3, [r3, #24]
 8016040:	2b00      	cmp	r3, #0
 8016042:	db06      	blt.n	8016052 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016044:	4b25      	ldr	r3, [pc, #148]	; (80160dc <xTaskPriorityInherit+0xc4>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801604a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	6959      	ldr	r1, [r3, #20]
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801605a:	4613      	mov	r3, r2
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	4413      	add	r3, r2
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	4a1f      	ldr	r2, [pc, #124]	; (80160e0 <xTaskPriorityInherit+0xc8>)
 8016064:	4413      	add	r3, r2
 8016066:	4299      	cmp	r1, r3
 8016068:	d122      	bne.n	80160b0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	3304      	adds	r3, #4
 801606e:	4618      	mov	r0, r3
 8016070:	f7fd ffd6 	bl	8014020 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016074:	4b19      	ldr	r3, [pc, #100]	; (80160dc <xTaskPriorityInherit+0xc4>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016082:	4b18      	ldr	r3, [pc, #96]	; (80160e4 <xTaskPriorityInherit+0xcc>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	429a      	cmp	r2, r3
 8016088:	d903      	bls.n	8016092 <xTaskPriorityInherit+0x7a>
 801608a:	68bb      	ldr	r3, [r7, #8]
 801608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801608e:	4a15      	ldr	r2, [pc, #84]	; (80160e4 <xTaskPriorityInherit+0xcc>)
 8016090:	6013      	str	r3, [r2, #0]
 8016092:	68bb      	ldr	r3, [r7, #8]
 8016094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016096:	4613      	mov	r3, r2
 8016098:	009b      	lsls	r3, r3, #2
 801609a:	4413      	add	r3, r2
 801609c:	009b      	lsls	r3, r3, #2
 801609e:	4a10      	ldr	r2, [pc, #64]	; (80160e0 <xTaskPriorityInherit+0xc8>)
 80160a0:	441a      	add	r2, r3
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	3304      	adds	r3, #4
 80160a6:	4619      	mov	r1, r3
 80160a8:	4610      	mov	r0, r2
 80160aa:	f7fd ff5c 	bl	8013f66 <vListInsertEnd>
 80160ae:	e004      	b.n	80160ba <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80160b0:	4b0a      	ldr	r3, [pc, #40]	; (80160dc <xTaskPriorityInherit+0xc4>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80160ba:	2301      	movs	r3, #1
 80160bc:	60fb      	str	r3, [r7, #12]
 80160be:	e008      	b.n	80160d2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80160c4:	4b05      	ldr	r3, [pc, #20]	; (80160dc <xTaskPriorityInherit+0xc4>)
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160ca:	429a      	cmp	r2, r3
 80160cc:	d201      	bcs.n	80160d2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80160ce:	2301      	movs	r3, #1
 80160d0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80160d2:	68fb      	ldr	r3, [r7, #12]
	}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3710      	adds	r7, #16
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	20000b28 	.word	0x20000b28
 80160e0:	20000b2c 	.word	0x20000b2c
 80160e4:	20001004 	.word	0x20001004

080160e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b086      	sub	sp, #24
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80160f4:	2300      	movs	r3, #0
 80160f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d058      	beq.n	80161b0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80160fe:	4b2f      	ldr	r3, [pc, #188]	; (80161bc <xTaskPriorityDisinherit+0xd4>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	693a      	ldr	r2, [r7, #16]
 8016104:	429a      	cmp	r2, r3
 8016106:	d00b      	beq.n	8016120 <xTaskPriorityDisinherit+0x38>
 8016108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801610c:	b672      	cpsid	i
 801610e:	f383 8811 	msr	BASEPRI, r3
 8016112:	f3bf 8f6f 	isb	sy
 8016116:	f3bf 8f4f 	dsb	sy
 801611a:	b662      	cpsie	i
 801611c:	60fb      	str	r3, [r7, #12]
 801611e:	e7fe      	b.n	801611e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8016120:	693b      	ldr	r3, [r7, #16]
 8016122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016124:	2b00      	cmp	r3, #0
 8016126:	d10b      	bne.n	8016140 <xTaskPriorityDisinherit+0x58>
 8016128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612c:	b672      	cpsid	i
 801612e:	f383 8811 	msr	BASEPRI, r3
 8016132:	f3bf 8f6f 	isb	sy
 8016136:	f3bf 8f4f 	dsb	sy
 801613a:	b662      	cpsie	i
 801613c:	60bb      	str	r3, [r7, #8]
 801613e:	e7fe      	b.n	801613e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8016140:	693b      	ldr	r3, [r7, #16]
 8016142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016144:	1e5a      	subs	r2, r3, #1
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801614e:	693b      	ldr	r3, [r7, #16]
 8016150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016152:	429a      	cmp	r2, r3
 8016154:	d02c      	beq.n	80161b0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801615a:	2b00      	cmp	r3, #0
 801615c:	d128      	bne.n	80161b0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	3304      	adds	r3, #4
 8016162:	4618      	mov	r0, r3
 8016164:	f7fd ff5c 	bl	8014020 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801617c:	693b      	ldr	r3, [r7, #16]
 801617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016180:	4b0f      	ldr	r3, [pc, #60]	; (80161c0 <xTaskPriorityDisinherit+0xd8>)
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	429a      	cmp	r2, r3
 8016186:	d903      	bls.n	8016190 <xTaskPriorityDisinherit+0xa8>
 8016188:	693b      	ldr	r3, [r7, #16]
 801618a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801618c:	4a0c      	ldr	r2, [pc, #48]	; (80161c0 <xTaskPriorityDisinherit+0xd8>)
 801618e:	6013      	str	r3, [r2, #0]
 8016190:	693b      	ldr	r3, [r7, #16]
 8016192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016194:	4613      	mov	r3, r2
 8016196:	009b      	lsls	r3, r3, #2
 8016198:	4413      	add	r3, r2
 801619a:	009b      	lsls	r3, r3, #2
 801619c:	4a09      	ldr	r2, [pc, #36]	; (80161c4 <xTaskPriorityDisinherit+0xdc>)
 801619e:	441a      	add	r2, r3
 80161a0:	693b      	ldr	r3, [r7, #16]
 80161a2:	3304      	adds	r3, #4
 80161a4:	4619      	mov	r1, r3
 80161a6:	4610      	mov	r0, r2
 80161a8:	f7fd fedd 	bl	8013f66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80161ac:	2301      	movs	r3, #1
 80161ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80161b0:	697b      	ldr	r3, [r7, #20]
	}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3718      	adds	r7, #24
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bd80      	pop	{r7, pc}
 80161ba:	bf00      	nop
 80161bc:	20000b28 	.word	0x20000b28
 80161c0:	20001004 	.word	0x20001004
 80161c4:	20000b2c 	.word	0x20000b2c

080161c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b088      	sub	sp, #32
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80161d6:	2301      	movs	r3, #1
 80161d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d06c      	beq.n	80162ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80161e0:	69bb      	ldr	r3, [r7, #24]
 80161e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d10b      	bne.n	8016200 <vTaskPriorityDisinheritAfterTimeout+0x38>
 80161e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161ec:	b672      	cpsid	i
 80161ee:	f383 8811 	msr	BASEPRI, r3
 80161f2:	f3bf 8f6f 	isb	sy
 80161f6:	f3bf 8f4f 	dsb	sy
 80161fa:	b662      	cpsie	i
 80161fc:	60fb      	str	r3, [r7, #12]
 80161fe:	e7fe      	b.n	80161fe <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016200:	69bb      	ldr	r3, [r7, #24]
 8016202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016204:	683a      	ldr	r2, [r7, #0]
 8016206:	429a      	cmp	r2, r3
 8016208:	d902      	bls.n	8016210 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	61fb      	str	r3, [r7, #28]
 801620e:	e002      	b.n	8016216 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016210:	69bb      	ldr	r3, [r7, #24]
 8016212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016214:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016216:	69bb      	ldr	r3, [r7, #24]
 8016218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801621a:	69fa      	ldr	r2, [r7, #28]
 801621c:	429a      	cmp	r2, r3
 801621e:	d04c      	beq.n	80162ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016220:	69bb      	ldr	r3, [r7, #24]
 8016222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016224:	697a      	ldr	r2, [r7, #20]
 8016226:	429a      	cmp	r2, r3
 8016228:	d147      	bne.n	80162ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801622a:	4b26      	ldr	r3, [pc, #152]	; (80162c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	69ba      	ldr	r2, [r7, #24]
 8016230:	429a      	cmp	r2, r3
 8016232:	d10b      	bne.n	801624c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8016234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016238:	b672      	cpsid	i
 801623a:	f383 8811 	msr	BASEPRI, r3
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f3bf 8f4f 	dsb	sy
 8016246:	b662      	cpsie	i
 8016248:	60bb      	str	r3, [r7, #8]
 801624a:	e7fe      	b.n	801624a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801624c:	69bb      	ldr	r3, [r7, #24]
 801624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016250:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016252:	69bb      	ldr	r3, [r7, #24]
 8016254:	69fa      	ldr	r2, [r7, #28]
 8016256:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016258:	69bb      	ldr	r3, [r7, #24]
 801625a:	699b      	ldr	r3, [r3, #24]
 801625c:	2b00      	cmp	r3, #0
 801625e:	db04      	blt.n	801626a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016260:	69fb      	ldr	r3, [r7, #28]
 8016262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016266:	69bb      	ldr	r3, [r7, #24]
 8016268:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801626a:	69bb      	ldr	r3, [r7, #24]
 801626c:	6959      	ldr	r1, [r3, #20]
 801626e:	693a      	ldr	r2, [r7, #16]
 8016270:	4613      	mov	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	4413      	add	r3, r2
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	4a13      	ldr	r2, [pc, #76]	; (80162c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801627a:	4413      	add	r3, r2
 801627c:	4299      	cmp	r1, r3
 801627e:	d11c      	bne.n	80162ba <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016280:	69bb      	ldr	r3, [r7, #24]
 8016282:	3304      	adds	r3, #4
 8016284:	4618      	mov	r0, r3
 8016286:	f7fd fecb 	bl	8014020 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801628a:	69bb      	ldr	r3, [r7, #24]
 801628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801628e:	4b0f      	ldr	r3, [pc, #60]	; (80162cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	429a      	cmp	r2, r3
 8016294:	d903      	bls.n	801629e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801629a:	4a0c      	ldr	r2, [pc, #48]	; (80162cc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801629c:	6013      	str	r3, [r2, #0]
 801629e:	69bb      	ldr	r3, [r7, #24]
 80162a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80162a2:	4613      	mov	r3, r2
 80162a4:	009b      	lsls	r3, r3, #2
 80162a6:	4413      	add	r3, r2
 80162a8:	009b      	lsls	r3, r3, #2
 80162aa:	4a07      	ldr	r2, [pc, #28]	; (80162c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80162ac:	441a      	add	r2, r3
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	3304      	adds	r3, #4
 80162b2:	4619      	mov	r1, r3
 80162b4:	4610      	mov	r0, r2
 80162b6:	f7fd fe56 	bl	8013f66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80162ba:	bf00      	nop
 80162bc:	3720      	adds	r7, #32
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}
 80162c2:	bf00      	nop
 80162c4:	20000b28 	.word	0x20000b28
 80162c8:	20000b2c 	.word	0x20000b2c
 80162cc:	20001004 	.word	0x20001004

080162d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80162d0:	b480      	push	{r7}
 80162d2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80162d4:	4b07      	ldr	r3, [pc, #28]	; (80162f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d004      	beq.n	80162e6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80162dc:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162e2:	3201      	adds	r2, #1
 80162e4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80162e6:	4b03      	ldr	r3, [pc, #12]	; (80162f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80162e8:	681b      	ldr	r3, [r3, #0]
	}
 80162ea:	4618      	mov	r0, r3
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr
 80162f4:	20000b28 	.word	0x20000b28

080162f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
 8016300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016302:	4b21      	ldr	r3, [pc, #132]	; (8016388 <prvAddCurrentTaskToDelayedList+0x90>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016308:	4b20      	ldr	r3, [pc, #128]	; (801638c <prvAddCurrentTaskToDelayedList+0x94>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	3304      	adds	r3, #4
 801630e:	4618      	mov	r0, r3
 8016310:	f7fd fe86 	bl	8014020 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801631a:	d10a      	bne.n	8016332 <prvAddCurrentTaskToDelayedList+0x3a>
 801631c:	683b      	ldr	r3, [r7, #0]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d007      	beq.n	8016332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016322:	4b1a      	ldr	r3, [pc, #104]	; (801638c <prvAddCurrentTaskToDelayedList+0x94>)
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	3304      	adds	r3, #4
 8016328:	4619      	mov	r1, r3
 801632a:	4819      	ldr	r0, [pc, #100]	; (8016390 <prvAddCurrentTaskToDelayedList+0x98>)
 801632c:	f7fd fe1b 	bl	8013f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016330:	e026      	b.n	8016380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	4413      	add	r3, r2
 8016338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801633a:	4b14      	ldr	r3, [pc, #80]	; (801638c <prvAddCurrentTaskToDelayedList+0x94>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	68ba      	ldr	r2, [r7, #8]
 8016340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016342:	68ba      	ldr	r2, [r7, #8]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	429a      	cmp	r2, r3
 8016348:	d209      	bcs.n	801635e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801634a:	4b12      	ldr	r3, [pc, #72]	; (8016394 <prvAddCurrentTaskToDelayedList+0x9c>)
 801634c:	681a      	ldr	r2, [r3, #0]
 801634e:	4b0f      	ldr	r3, [pc, #60]	; (801638c <prvAddCurrentTaskToDelayedList+0x94>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	3304      	adds	r3, #4
 8016354:	4619      	mov	r1, r3
 8016356:	4610      	mov	r0, r2
 8016358:	f7fd fe29 	bl	8013fae <vListInsert>
}
 801635c:	e010      	b.n	8016380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801635e:	4b0e      	ldr	r3, [pc, #56]	; (8016398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016360:	681a      	ldr	r2, [r3, #0]
 8016362:	4b0a      	ldr	r3, [pc, #40]	; (801638c <prvAddCurrentTaskToDelayedList+0x94>)
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	3304      	adds	r3, #4
 8016368:	4619      	mov	r1, r3
 801636a:	4610      	mov	r0, r2
 801636c:	f7fd fe1f 	bl	8013fae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016370:	4b0a      	ldr	r3, [pc, #40]	; (801639c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	68ba      	ldr	r2, [r7, #8]
 8016376:	429a      	cmp	r2, r3
 8016378:	d202      	bcs.n	8016380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801637a:	4a08      	ldr	r2, [pc, #32]	; (801639c <prvAddCurrentTaskToDelayedList+0xa4>)
 801637c:	68bb      	ldr	r3, [r7, #8]
 801637e:	6013      	str	r3, [r2, #0]
}
 8016380:	bf00      	nop
 8016382:	3710      	adds	r7, #16
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}
 8016388:	20001000 	.word	0x20001000
 801638c:	20000b28 	.word	0x20000b28
 8016390:	20000fe8 	.word	0x20000fe8
 8016394:	20000fb8 	.word	0x20000fb8
 8016398:	20000fb4 	.word	0x20000fb4
 801639c:	2000101c 	.word	0x2000101c

080163a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b08a      	sub	sp, #40	; 0x28
 80163a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80163a6:	2300      	movs	r3, #0
 80163a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80163aa:	f000 fb0d 	bl	80169c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80163ae:	4b1d      	ldr	r3, [pc, #116]	; (8016424 <xTimerCreateTimerTask+0x84>)
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d021      	beq.n	80163fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80163b6:	2300      	movs	r3, #0
 80163b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80163ba:	2300      	movs	r3, #0
 80163bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80163be:	1d3a      	adds	r2, r7, #4
 80163c0:	f107 0108 	add.w	r1, r7, #8
 80163c4:	f107 030c 	add.w	r3, r7, #12
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7fd fd85 	bl	8013ed8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80163ce:	6879      	ldr	r1, [r7, #4]
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	68fa      	ldr	r2, [r7, #12]
 80163d4:	9202      	str	r2, [sp, #8]
 80163d6:	9301      	str	r3, [sp, #4]
 80163d8:	2302      	movs	r3, #2
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	2300      	movs	r3, #0
 80163de:	460a      	mov	r2, r1
 80163e0:	4911      	ldr	r1, [pc, #68]	; (8016428 <xTimerCreateTimerTask+0x88>)
 80163e2:	4812      	ldr	r0, [pc, #72]	; (801642c <xTimerCreateTimerTask+0x8c>)
 80163e4:	f7fe ff30 	bl	8015248 <xTaskCreateStatic>
 80163e8:	4602      	mov	r2, r0
 80163ea:	4b11      	ldr	r3, [pc, #68]	; (8016430 <xTimerCreateTimerTask+0x90>)
 80163ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80163ee:	4b10      	ldr	r3, [pc, #64]	; (8016430 <xTimerCreateTimerTask+0x90>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d001      	beq.n	80163fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80163f6:	2301      	movs	r3, #1
 80163f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80163fa:	697b      	ldr	r3, [r7, #20]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d10b      	bne.n	8016418 <xTimerCreateTimerTask+0x78>
 8016400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016404:	b672      	cpsid	i
 8016406:	f383 8811 	msr	BASEPRI, r3
 801640a:	f3bf 8f6f 	isb	sy
 801640e:	f3bf 8f4f 	dsb	sy
 8016412:	b662      	cpsie	i
 8016414:	613b      	str	r3, [r7, #16]
 8016416:	e7fe      	b.n	8016416 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8016418:	697b      	ldr	r3, [r7, #20]
}
 801641a:	4618      	mov	r0, r3
 801641c:	3718      	adds	r7, #24
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	20001058 	.word	0x20001058
 8016428:	0801abe8 	.word	0x0801abe8
 801642c:	0801656d 	.word	0x0801656d
 8016430:	2000105c 	.word	0x2000105c

08016434 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b08a      	sub	sp, #40	; 0x28
 8016438:	af00      	add	r7, sp, #0
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
 8016440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016442:	2300      	movs	r3, #0
 8016444:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d10b      	bne.n	8016464 <xTimerGenericCommand+0x30>
 801644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016450:	b672      	cpsid	i
 8016452:	f383 8811 	msr	BASEPRI, r3
 8016456:	f3bf 8f6f 	isb	sy
 801645a:	f3bf 8f4f 	dsb	sy
 801645e:	b662      	cpsie	i
 8016460:	623b      	str	r3, [r7, #32]
 8016462:	e7fe      	b.n	8016462 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016464:	4b19      	ldr	r3, [pc, #100]	; (80164cc <xTimerGenericCommand+0x98>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d02a      	beq.n	80164c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	2b05      	cmp	r3, #5
 801647c:	dc18      	bgt.n	80164b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801647e:	f7ff fdad 	bl	8015fdc <xTaskGetSchedulerState>
 8016482:	4603      	mov	r3, r0
 8016484:	2b02      	cmp	r3, #2
 8016486:	d109      	bne.n	801649c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016488:	4b10      	ldr	r3, [pc, #64]	; (80164cc <xTimerGenericCommand+0x98>)
 801648a:	6818      	ldr	r0, [r3, #0]
 801648c:	f107 0110 	add.w	r1, r7, #16
 8016490:	2300      	movs	r3, #0
 8016492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016494:	f7fe f860 	bl	8014558 <xQueueGenericSend>
 8016498:	6278      	str	r0, [r7, #36]	; 0x24
 801649a:	e012      	b.n	80164c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801649c:	4b0b      	ldr	r3, [pc, #44]	; (80164cc <xTimerGenericCommand+0x98>)
 801649e:	6818      	ldr	r0, [r3, #0]
 80164a0:	f107 0110 	add.w	r1, r7, #16
 80164a4:	2300      	movs	r3, #0
 80164a6:	2200      	movs	r2, #0
 80164a8:	f7fe f856 	bl	8014558 <xQueueGenericSend>
 80164ac:	6278      	str	r0, [r7, #36]	; 0x24
 80164ae:	e008      	b.n	80164c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80164b0:	4b06      	ldr	r3, [pc, #24]	; (80164cc <xTimerGenericCommand+0x98>)
 80164b2:	6818      	ldr	r0, [r3, #0]
 80164b4:	f107 0110 	add.w	r1, r7, #16
 80164b8:	2300      	movs	r3, #0
 80164ba:	683a      	ldr	r2, [r7, #0]
 80164bc:	f7fe f94e 	bl	801475c <xQueueGenericSendFromISR>
 80164c0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80164c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80164c4:	4618      	mov	r0, r3
 80164c6:	3728      	adds	r7, #40	; 0x28
 80164c8:	46bd      	mov	sp, r7
 80164ca:	bd80      	pop	{r7, pc}
 80164cc:	20001058 	.word	0x20001058

080164d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b088      	sub	sp, #32
 80164d4:	af02      	add	r7, sp, #8
 80164d6:	6078      	str	r0, [r7, #4]
 80164d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164da:	4b23      	ldr	r3, [pc, #140]	; (8016568 <prvProcessExpiredTimer+0x98>)
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	68db      	ldr	r3, [r3, #12]
 80164e0:	68db      	ldr	r3, [r3, #12]
 80164e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80164e4:	697b      	ldr	r3, [r7, #20]
 80164e6:	3304      	adds	r3, #4
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7fd fd99 	bl	8014020 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164f4:	f003 0304 	and.w	r3, r3, #4
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d023      	beq.n	8016544 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	699a      	ldr	r2, [r3, #24]
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	18d1      	adds	r1, r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	683a      	ldr	r2, [r7, #0]
 8016508:	6978      	ldr	r0, [r7, #20]
 801650a:	f000 f8d3 	bl	80166b4 <prvInsertTimerInActiveList>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d020      	beq.n	8016556 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016514:	2300      	movs	r3, #0
 8016516:	9300      	str	r3, [sp, #0]
 8016518:	2300      	movs	r3, #0
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	2100      	movs	r1, #0
 801651e:	6978      	ldr	r0, [r7, #20]
 8016520:	f7ff ff88 	bl	8016434 <xTimerGenericCommand>
 8016524:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d114      	bne.n	8016556 <prvProcessExpiredTimer+0x86>
 801652c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016530:	b672      	cpsid	i
 8016532:	f383 8811 	msr	BASEPRI, r3
 8016536:	f3bf 8f6f 	isb	sy
 801653a:	f3bf 8f4f 	dsb	sy
 801653e:	b662      	cpsie	i
 8016540:	60fb      	str	r3, [r7, #12]
 8016542:	e7fe      	b.n	8016542 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016544:	697b      	ldr	r3, [r7, #20]
 8016546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801654a:	f023 0301 	bic.w	r3, r3, #1
 801654e:	b2da      	uxtb	r2, r3
 8016550:	697b      	ldr	r3, [r7, #20]
 8016552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	6a1b      	ldr	r3, [r3, #32]
 801655a:	6978      	ldr	r0, [r7, #20]
 801655c:	4798      	blx	r3
}
 801655e:	bf00      	nop
 8016560:	3718      	adds	r7, #24
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	20001050 	.word	0x20001050

0801656c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b084      	sub	sp, #16
 8016570:	af00      	add	r7, sp, #0
 8016572:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016574:	f107 0308 	add.w	r3, r7, #8
 8016578:	4618      	mov	r0, r3
 801657a:	f000 f857 	bl	801662c <prvGetNextExpireTime>
 801657e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016580:	68bb      	ldr	r3, [r7, #8]
 8016582:	4619      	mov	r1, r3
 8016584:	68f8      	ldr	r0, [r7, #12]
 8016586:	f000 f803 	bl	8016590 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801658a:	f000 f8d5 	bl	8016738 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801658e:	e7f1      	b.n	8016574 <prvTimerTask+0x8>

08016590 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b084      	sub	sp, #16
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
 8016598:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801659a:	f7ff f919 	bl	80157d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801659e:	f107 0308 	add.w	r3, r7, #8
 80165a2:	4618      	mov	r0, r3
 80165a4:	f000 f866 	bl	8016674 <prvSampleTimeNow>
 80165a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80165aa:	68bb      	ldr	r3, [r7, #8]
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d130      	bne.n	8016612 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d10a      	bne.n	80165cc <prvProcessTimerOrBlockTask+0x3c>
 80165b6:	687a      	ldr	r2, [r7, #4]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d806      	bhi.n	80165cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80165be:	f7ff f915 	bl	80157ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80165c2:	68f9      	ldr	r1, [r7, #12]
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7ff ff83 	bl	80164d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80165ca:	e024      	b.n	8016616 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d008      	beq.n	80165e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80165d2:	4b13      	ldr	r3, [pc, #76]	; (8016620 <prvProcessTimerOrBlockTask+0x90>)
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	681b      	ldr	r3, [r3, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d101      	bne.n	80165e0 <prvProcessTimerOrBlockTask+0x50>
 80165dc:	2301      	movs	r3, #1
 80165de:	e000      	b.n	80165e2 <prvProcessTimerOrBlockTask+0x52>
 80165e0:	2300      	movs	r3, #0
 80165e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80165e4:	4b0f      	ldr	r3, [pc, #60]	; (8016624 <prvProcessTimerOrBlockTask+0x94>)
 80165e6:	6818      	ldr	r0, [r3, #0]
 80165e8:	687a      	ldr	r2, [r7, #4]
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	1ad3      	subs	r3, r2, r3
 80165ee:	683a      	ldr	r2, [r7, #0]
 80165f0:	4619      	mov	r1, r3
 80165f2:	f7fe fdf5 	bl	80151e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80165f6:	f7ff f8f9 	bl	80157ec <xTaskResumeAll>
 80165fa:	4603      	mov	r3, r0
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10a      	bne.n	8016616 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016600:	4b09      	ldr	r3, [pc, #36]	; (8016628 <prvProcessTimerOrBlockTask+0x98>)
 8016602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016606:	601a      	str	r2, [r3, #0]
 8016608:	f3bf 8f4f 	dsb	sy
 801660c:	f3bf 8f6f 	isb	sy
}
 8016610:	e001      	b.n	8016616 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016612:	f7ff f8eb 	bl	80157ec <xTaskResumeAll>
}
 8016616:	bf00      	nop
 8016618:	3710      	adds	r7, #16
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	20001054 	.word	0x20001054
 8016624:	20001058 	.word	0x20001058
 8016628:	e000ed04 	.word	0xe000ed04

0801662c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801662c:	b480      	push	{r7}
 801662e:	b085      	sub	sp, #20
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016634:	4b0e      	ldr	r3, [pc, #56]	; (8016670 <prvGetNextExpireTime+0x44>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d101      	bne.n	8016642 <prvGetNextExpireTime+0x16>
 801663e:	2201      	movs	r2, #1
 8016640:	e000      	b.n	8016644 <prvGetNextExpireTime+0x18>
 8016642:	2200      	movs	r2, #0
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d105      	bne.n	801665c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016650:	4b07      	ldr	r3, [pc, #28]	; (8016670 <prvGetNextExpireTime+0x44>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	68db      	ldr	r3, [r3, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	60fb      	str	r3, [r7, #12]
 801665a:	e001      	b.n	8016660 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801665c:	2300      	movs	r3, #0
 801665e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016660:	68fb      	ldr	r3, [r7, #12]
}
 8016662:	4618      	mov	r0, r3
 8016664:	3714      	adds	r7, #20
 8016666:	46bd      	mov	sp, r7
 8016668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666c:	4770      	bx	lr
 801666e:	bf00      	nop
 8016670:	20001050 	.word	0x20001050

08016674 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b084      	sub	sp, #16
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801667c:	f7ff f954 	bl	8015928 <xTaskGetTickCount>
 8016680:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016682:	4b0b      	ldr	r3, [pc, #44]	; (80166b0 <prvSampleTimeNow+0x3c>)
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	68fa      	ldr	r2, [r7, #12]
 8016688:	429a      	cmp	r2, r3
 801668a:	d205      	bcs.n	8016698 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801668c:	f000 f936 	bl	80168fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	601a      	str	r2, [r3, #0]
 8016696:	e002      	b.n	801669e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2200      	movs	r2, #0
 801669c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801669e:	4a04      	ldr	r2, [pc, #16]	; (80166b0 <prvSampleTimeNow+0x3c>)
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80166a4:	68fb      	ldr	r3, [r7, #12]
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3710      	adds	r7, #16
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}
 80166ae:	bf00      	nop
 80166b0:	20001060 	.word	0x20001060

080166b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b086      	sub	sp, #24
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	60f8      	str	r0, [r7, #12]
 80166bc:	60b9      	str	r1, [r7, #8]
 80166be:	607a      	str	r2, [r7, #4]
 80166c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80166c2:	2300      	movs	r3, #0
 80166c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	68ba      	ldr	r2, [r7, #8]
 80166ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	68fa      	ldr	r2, [r7, #12]
 80166d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80166d2:	68ba      	ldr	r2, [r7, #8]
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	429a      	cmp	r2, r3
 80166d8:	d812      	bhi.n	8016700 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166da:	687a      	ldr	r2, [r7, #4]
 80166dc:	683b      	ldr	r3, [r7, #0]
 80166de:	1ad2      	subs	r2, r2, r3
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	699b      	ldr	r3, [r3, #24]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d302      	bcc.n	80166ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80166e8:	2301      	movs	r3, #1
 80166ea:	617b      	str	r3, [r7, #20]
 80166ec:	e01b      	b.n	8016726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80166ee:	4b10      	ldr	r3, [pc, #64]	; (8016730 <prvInsertTimerInActiveList+0x7c>)
 80166f0:	681a      	ldr	r2, [r3, #0]
 80166f2:	68fb      	ldr	r3, [r7, #12]
 80166f4:	3304      	adds	r3, #4
 80166f6:	4619      	mov	r1, r3
 80166f8:	4610      	mov	r0, r2
 80166fa:	f7fd fc58 	bl	8013fae <vListInsert>
 80166fe:	e012      	b.n	8016726 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	429a      	cmp	r2, r3
 8016706:	d206      	bcs.n	8016716 <prvInsertTimerInActiveList+0x62>
 8016708:	68ba      	ldr	r2, [r7, #8]
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	429a      	cmp	r2, r3
 801670e:	d302      	bcc.n	8016716 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016710:	2301      	movs	r3, #1
 8016712:	617b      	str	r3, [r7, #20]
 8016714:	e007      	b.n	8016726 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016716:	4b07      	ldr	r3, [pc, #28]	; (8016734 <prvInsertTimerInActiveList+0x80>)
 8016718:	681a      	ldr	r2, [r3, #0]
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	3304      	adds	r3, #4
 801671e:	4619      	mov	r1, r3
 8016720:	4610      	mov	r0, r2
 8016722:	f7fd fc44 	bl	8013fae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016726:	697b      	ldr	r3, [r7, #20]
}
 8016728:	4618      	mov	r0, r3
 801672a:	3718      	adds	r7, #24
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}
 8016730:	20001054 	.word	0x20001054
 8016734:	20001050 	.word	0x20001050

08016738 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b08e      	sub	sp, #56	; 0x38
 801673c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801673e:	e0cc      	b.n	80168da <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	2b00      	cmp	r3, #0
 8016744:	da19      	bge.n	801677a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016746:	1d3b      	adds	r3, r7, #4
 8016748:	3304      	adds	r3, #4
 801674a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674e:	2b00      	cmp	r3, #0
 8016750:	d10b      	bne.n	801676a <prvProcessReceivedCommands+0x32>
 8016752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016756:	b672      	cpsid	i
 8016758:	f383 8811 	msr	BASEPRI, r3
 801675c:	f3bf 8f6f 	isb	sy
 8016760:	f3bf 8f4f 	dsb	sy
 8016764:	b662      	cpsie	i
 8016766:	61fb      	str	r3, [r7, #28]
 8016768:	e7fe      	b.n	8016768 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016770:	6850      	ldr	r0, [r2, #4]
 8016772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016774:	6892      	ldr	r2, [r2, #8]
 8016776:	4611      	mov	r1, r2
 8016778:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	2b00      	cmp	r3, #0
 801677e:	f2c0 80ab 	blt.w	80168d8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016788:	695b      	ldr	r3, [r3, #20]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d004      	beq.n	8016798 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801678e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016790:	3304      	adds	r3, #4
 8016792:	4618      	mov	r0, r3
 8016794:	f7fd fc44 	bl	8014020 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016798:	463b      	mov	r3, r7
 801679a:	4618      	mov	r0, r3
 801679c:	f7ff ff6a 	bl	8016674 <prvSampleTimeNow>
 80167a0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2b09      	cmp	r3, #9
 80167a6:	f200 8098 	bhi.w	80168da <prvProcessReceivedCommands+0x1a2>
 80167aa:	a201      	add	r2, pc, #4	; (adr r2, 80167b0 <prvProcessReceivedCommands+0x78>)
 80167ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167b0:	080167d9 	.word	0x080167d9
 80167b4:	080167d9 	.word	0x080167d9
 80167b8:	080167d9 	.word	0x080167d9
 80167bc:	0801684f 	.word	0x0801684f
 80167c0:	08016863 	.word	0x08016863
 80167c4:	080168af 	.word	0x080168af
 80167c8:	080167d9 	.word	0x080167d9
 80167cc:	080167d9 	.word	0x080167d9
 80167d0:	0801684f 	.word	0x0801684f
 80167d4:	08016863 	.word	0x08016863
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80167d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80167de:	f043 0301 	orr.w	r3, r3, #1
 80167e2:	b2da      	uxtb	r2, r3
 80167e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80167ea:	68ba      	ldr	r2, [r7, #8]
 80167ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167ee:	699b      	ldr	r3, [r3, #24]
 80167f0:	18d1      	adds	r1, r2, r3
 80167f2:	68bb      	ldr	r3, [r7, #8]
 80167f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80167f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167f8:	f7ff ff5c 	bl	80166b4 <prvInsertTimerInActiveList>
 80167fc:	4603      	mov	r3, r0
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d06b      	beq.n	80168da <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016804:	6a1b      	ldr	r3, [r3, #32]
 8016806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016808:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801680c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016810:	f003 0304 	and.w	r3, r3, #4
 8016814:	2b00      	cmp	r3, #0
 8016816:	d060      	beq.n	80168da <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016818:	68ba      	ldr	r2, [r7, #8]
 801681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801681c:	699b      	ldr	r3, [r3, #24]
 801681e:	441a      	add	r2, r3
 8016820:	2300      	movs	r3, #0
 8016822:	9300      	str	r3, [sp, #0]
 8016824:	2300      	movs	r3, #0
 8016826:	2100      	movs	r1, #0
 8016828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801682a:	f7ff fe03 	bl	8016434 <xTimerGenericCommand>
 801682e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016830:	6a3b      	ldr	r3, [r7, #32]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d151      	bne.n	80168da <prvProcessReceivedCommands+0x1a2>
 8016836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801683a:	b672      	cpsid	i
 801683c:	f383 8811 	msr	BASEPRI, r3
 8016840:	f3bf 8f6f 	isb	sy
 8016844:	f3bf 8f4f 	dsb	sy
 8016848:	b662      	cpsie	i
 801684a:	61bb      	str	r3, [r7, #24]
 801684c:	e7fe      	b.n	801684c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016854:	f023 0301 	bic.w	r3, r3, #1
 8016858:	b2da      	uxtb	r2, r3
 801685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801685c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8016860:	e03b      	b.n	80168da <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016868:	f043 0301 	orr.w	r3, r3, #1
 801686c:	b2da      	uxtb	r2, r3
 801686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016874:	68ba      	ldr	r2, [r7, #8]
 8016876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016878:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801687c:	699b      	ldr	r3, [r3, #24]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d10b      	bne.n	801689a <prvProcessReceivedCommands+0x162>
 8016882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016886:	b672      	cpsid	i
 8016888:	f383 8811 	msr	BASEPRI, r3
 801688c:	f3bf 8f6f 	isb	sy
 8016890:	f3bf 8f4f 	dsb	sy
 8016894:	b662      	cpsie	i
 8016896:	617b      	str	r3, [r7, #20]
 8016898:	e7fe      	b.n	8016898 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689c:	699a      	ldr	r2, [r3, #24]
 801689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a0:	18d1      	adds	r1, r2, r3
 80168a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168a8:	f7ff ff04 	bl	80166b4 <prvInsertTimerInActiveList>
					break;
 80168ac:	e015      	b.n	80168da <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80168ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80168b4:	f003 0302 	and.w	r3, r3, #2
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d103      	bne.n	80168c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80168bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168be:	f000 fbb5 	bl	801702c <vPortFree>
 80168c2:	e00a      	b.n	80168da <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80168c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80168ca:	f023 0301 	bic.w	r3, r3, #1
 80168ce:	b2da      	uxtb	r2, r3
 80168d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80168d6:	e000      	b.n	80168da <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80168d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80168da:	4b07      	ldr	r3, [pc, #28]	; (80168f8 <prvProcessReceivedCommands+0x1c0>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	1d39      	adds	r1, r7, #4
 80168e0:	2200      	movs	r2, #0
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fe f868 	bl	80149b8 <xQueueReceive>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	f47f af28 	bne.w	8016740 <prvProcessReceivedCommands+0x8>
	}
}
 80168f0:	bf00      	nop
 80168f2:	3730      	adds	r7, #48	; 0x30
 80168f4:	46bd      	mov	sp, r7
 80168f6:	bd80      	pop	{r7, pc}
 80168f8:	20001058 	.word	0x20001058

080168fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80168fc:	b580      	push	{r7, lr}
 80168fe:	b088      	sub	sp, #32
 8016900:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016902:	e049      	b.n	8016998 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016904:	4b2e      	ldr	r3, [pc, #184]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	68db      	ldr	r3, [r3, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801690e:	4b2c      	ldr	r3, [pc, #176]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	68db      	ldr	r3, [r3, #12]
 8016914:	68db      	ldr	r3, [r3, #12]
 8016916:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	3304      	adds	r3, #4
 801691c:	4618      	mov	r0, r3
 801691e:	f7fd fb7f 	bl	8014020 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	6a1b      	ldr	r3, [r3, #32]
 8016926:	68f8      	ldr	r0, [r7, #12]
 8016928:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016930:	f003 0304 	and.w	r3, r3, #4
 8016934:	2b00      	cmp	r3, #0
 8016936:	d02f      	beq.n	8016998 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	699b      	ldr	r3, [r3, #24]
 801693c:	693a      	ldr	r2, [r7, #16]
 801693e:	4413      	add	r3, r2
 8016940:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016942:	68ba      	ldr	r2, [r7, #8]
 8016944:	693b      	ldr	r3, [r7, #16]
 8016946:	429a      	cmp	r2, r3
 8016948:	d90e      	bls.n	8016968 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	68ba      	ldr	r2, [r7, #8]
 801694e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	68fa      	ldr	r2, [r7, #12]
 8016954:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016956:	4b1a      	ldr	r3, [pc, #104]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 8016958:	681a      	ldr	r2, [r3, #0]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	3304      	adds	r3, #4
 801695e:	4619      	mov	r1, r3
 8016960:	4610      	mov	r0, r2
 8016962:	f7fd fb24 	bl	8013fae <vListInsert>
 8016966:	e017      	b.n	8016998 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016968:	2300      	movs	r3, #0
 801696a:	9300      	str	r3, [sp, #0]
 801696c:	2300      	movs	r3, #0
 801696e:	693a      	ldr	r2, [r7, #16]
 8016970:	2100      	movs	r1, #0
 8016972:	68f8      	ldr	r0, [r7, #12]
 8016974:	f7ff fd5e 	bl	8016434 <xTimerGenericCommand>
 8016978:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d10b      	bne.n	8016998 <prvSwitchTimerLists+0x9c>
 8016980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016984:	b672      	cpsid	i
 8016986:	f383 8811 	msr	BASEPRI, r3
 801698a:	f3bf 8f6f 	isb	sy
 801698e:	f3bf 8f4f 	dsb	sy
 8016992:	b662      	cpsie	i
 8016994:	603b      	str	r3, [r7, #0]
 8016996:	e7fe      	b.n	8016996 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016998:	4b09      	ldr	r3, [pc, #36]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d1b0      	bne.n	8016904 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80169a2:	4b07      	ldr	r3, [pc, #28]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80169a8:	4b06      	ldr	r3, [pc, #24]	; (80169c4 <prvSwitchTimerLists+0xc8>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	4a04      	ldr	r2, [pc, #16]	; (80169c0 <prvSwitchTimerLists+0xc4>)
 80169ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80169b0:	4a04      	ldr	r2, [pc, #16]	; (80169c4 <prvSwitchTimerLists+0xc8>)
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	6013      	str	r3, [r2, #0]
}
 80169b6:	bf00      	nop
 80169b8:	3718      	adds	r7, #24
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}
 80169be:	bf00      	nop
 80169c0:	20001050 	.word	0x20001050
 80169c4:	20001054 	.word	0x20001054

080169c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80169ce:	f000 f943 	bl	8016c58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80169d2:	4b15      	ldr	r3, [pc, #84]	; (8016a28 <prvCheckForValidListAndQueue+0x60>)
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d120      	bne.n	8016a1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80169da:	4814      	ldr	r0, [pc, #80]	; (8016a2c <prvCheckForValidListAndQueue+0x64>)
 80169dc:	f7fd fa96 	bl	8013f0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80169e0:	4813      	ldr	r0, [pc, #76]	; (8016a30 <prvCheckForValidListAndQueue+0x68>)
 80169e2:	f7fd fa93 	bl	8013f0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80169e6:	4b13      	ldr	r3, [pc, #76]	; (8016a34 <prvCheckForValidListAndQueue+0x6c>)
 80169e8:	4a10      	ldr	r2, [pc, #64]	; (8016a2c <prvCheckForValidListAndQueue+0x64>)
 80169ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80169ec:	4b12      	ldr	r3, [pc, #72]	; (8016a38 <prvCheckForValidListAndQueue+0x70>)
 80169ee:	4a10      	ldr	r2, [pc, #64]	; (8016a30 <prvCheckForValidListAndQueue+0x68>)
 80169f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80169f2:	2300      	movs	r3, #0
 80169f4:	9300      	str	r3, [sp, #0]
 80169f6:	4b11      	ldr	r3, [pc, #68]	; (8016a3c <prvCheckForValidListAndQueue+0x74>)
 80169f8:	4a11      	ldr	r2, [pc, #68]	; (8016a40 <prvCheckForValidListAndQueue+0x78>)
 80169fa:	2110      	movs	r1, #16
 80169fc:	200a      	movs	r0, #10
 80169fe:	f7fd fba3 	bl	8014148 <xQueueGenericCreateStatic>
 8016a02:	4602      	mov	r2, r0
 8016a04:	4b08      	ldr	r3, [pc, #32]	; (8016a28 <prvCheckForValidListAndQueue+0x60>)
 8016a06:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016a08:	4b07      	ldr	r3, [pc, #28]	; (8016a28 <prvCheckForValidListAndQueue+0x60>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d005      	beq.n	8016a1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016a10:	4b05      	ldr	r3, [pc, #20]	; (8016a28 <prvCheckForValidListAndQueue+0x60>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	490b      	ldr	r1, [pc, #44]	; (8016a44 <prvCheckForValidListAndQueue+0x7c>)
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7fe fb90 	bl	801513c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016a1c:	f000 f94e 	bl	8016cbc <vPortExitCritical>
}
 8016a20:	bf00      	nop
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	20001058 	.word	0x20001058
 8016a2c:	20001028 	.word	0x20001028
 8016a30:	2000103c 	.word	0x2000103c
 8016a34:	20001050 	.word	0x20001050
 8016a38:	20001054 	.word	0x20001054
 8016a3c:	20001104 	.word	0x20001104
 8016a40:	20001064 	.word	0x20001064
 8016a44:	0801abf0 	.word	0x0801abf0

08016a48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016a48:	b480      	push	{r7}
 8016a4a:	b085      	sub	sp, #20
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	60f8      	str	r0, [r7, #12]
 8016a50:	60b9      	str	r1, [r7, #8]
 8016a52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	3b04      	subs	r3, #4
 8016a58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	3b04      	subs	r3, #4
 8016a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	f023 0201 	bic.w	r2, r3, #1
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	3b04      	subs	r3, #4
 8016a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016a78:	4a0c      	ldr	r2, [pc, #48]	; (8016aac <pxPortInitialiseStack+0x64>)
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	3b14      	subs	r3, #20
 8016a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016a84:	687a      	ldr	r2, [r7, #4]
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	3b04      	subs	r3, #4
 8016a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	f06f 0202 	mvn.w	r2, #2
 8016a96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	3b20      	subs	r3, #32
 8016a9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3714      	adds	r7, #20
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr
 8016aac:	08016ab1 	.word	0x08016ab1

08016ab0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b085      	sub	sp, #20
 8016ab4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016aba:	4b13      	ldr	r3, [pc, #76]	; (8016b08 <prvTaskExitError+0x58>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ac2:	d00b      	beq.n	8016adc <prvTaskExitError+0x2c>
 8016ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac8:	b672      	cpsid	i
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	b662      	cpsie	i
 8016ad8:	60fb      	str	r3, [r7, #12]
 8016ada:	e7fe      	b.n	8016ada <prvTaskExitError+0x2a>
 8016adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ae0:	b672      	cpsid	i
 8016ae2:	f383 8811 	msr	BASEPRI, r3
 8016ae6:	f3bf 8f6f 	isb	sy
 8016aea:	f3bf 8f4f 	dsb	sy
 8016aee:	b662      	cpsie	i
 8016af0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016af2:	bf00      	nop
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d0fc      	beq.n	8016af4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016afa:	bf00      	nop
 8016afc:	3714      	adds	r7, #20
 8016afe:	46bd      	mov	sp, r7
 8016b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b04:	4770      	bx	lr
 8016b06:	bf00      	nop
 8016b08:	2000011c 	.word	0x2000011c
 8016b0c:	00000000 	.word	0x00000000

08016b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016b10:	4b07      	ldr	r3, [pc, #28]	; (8016b30 <pxCurrentTCBConst2>)
 8016b12:	6819      	ldr	r1, [r3, #0]
 8016b14:	6808      	ldr	r0, [r1, #0]
 8016b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b1a:	f380 8809 	msr	PSP, r0
 8016b1e:	f3bf 8f6f 	isb	sy
 8016b22:	f04f 0000 	mov.w	r0, #0
 8016b26:	f380 8811 	msr	BASEPRI, r0
 8016b2a:	4770      	bx	lr
 8016b2c:	f3af 8000 	nop.w

08016b30 <pxCurrentTCBConst2>:
 8016b30:	20000b28 	.word	0x20000b28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016b34:	bf00      	nop
 8016b36:	bf00      	nop

08016b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016b38:	4808      	ldr	r0, [pc, #32]	; (8016b5c <prvPortStartFirstTask+0x24>)
 8016b3a:	6800      	ldr	r0, [r0, #0]
 8016b3c:	6800      	ldr	r0, [r0, #0]
 8016b3e:	f380 8808 	msr	MSP, r0
 8016b42:	f04f 0000 	mov.w	r0, #0
 8016b46:	f380 8814 	msr	CONTROL, r0
 8016b4a:	b662      	cpsie	i
 8016b4c:	b661      	cpsie	f
 8016b4e:	f3bf 8f4f 	dsb	sy
 8016b52:	f3bf 8f6f 	isb	sy
 8016b56:	df00      	svc	0
 8016b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016b5a:	bf00      	nop
 8016b5c:	e000ed08 	.word	0xe000ed08

08016b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016b66:	4b36      	ldr	r3, [pc, #216]	; (8016c40 <xPortStartScheduler+0xe0>)
 8016b68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	781b      	ldrb	r3, [r3, #0]
 8016b6e:	b2db      	uxtb	r3, r3
 8016b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	22ff      	movs	r2, #255	; 0xff
 8016b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	b2db      	uxtb	r3, r3
 8016b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016b80:	78fb      	ldrb	r3, [r7, #3]
 8016b82:	b2db      	uxtb	r3, r3
 8016b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016b88:	b2da      	uxtb	r2, r3
 8016b8a:	4b2e      	ldr	r3, [pc, #184]	; (8016c44 <xPortStartScheduler+0xe4>)
 8016b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016b8e:	4b2e      	ldr	r3, [pc, #184]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016b90:	2207      	movs	r2, #7
 8016b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016b94:	e009      	b.n	8016baa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016b96:	4b2c      	ldr	r3, [pc, #176]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	3b01      	subs	r3, #1
 8016b9c:	4a2a      	ldr	r2, [pc, #168]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016ba0:	78fb      	ldrb	r3, [r7, #3]
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	005b      	lsls	r3, r3, #1
 8016ba6:	b2db      	uxtb	r3, r3
 8016ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016baa:	78fb      	ldrb	r3, [r7, #3]
 8016bac:	b2db      	uxtb	r3, r3
 8016bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016bb2:	2b80      	cmp	r3, #128	; 0x80
 8016bb4:	d0ef      	beq.n	8016b96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016bb6:	4b24      	ldr	r3, [pc, #144]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	f1c3 0307 	rsb	r3, r3, #7
 8016bbe:	2b04      	cmp	r3, #4
 8016bc0:	d00b      	beq.n	8016bda <xPortStartScheduler+0x7a>
 8016bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc6:	b672      	cpsid	i
 8016bc8:	f383 8811 	msr	BASEPRI, r3
 8016bcc:	f3bf 8f6f 	isb	sy
 8016bd0:	f3bf 8f4f 	dsb	sy
 8016bd4:	b662      	cpsie	i
 8016bd6:	60bb      	str	r3, [r7, #8]
 8016bd8:	e7fe      	b.n	8016bd8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016bda:	4b1b      	ldr	r3, [pc, #108]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	021b      	lsls	r3, r3, #8
 8016be0:	4a19      	ldr	r2, [pc, #100]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016be2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016be4:	4b18      	ldr	r3, [pc, #96]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016bec:	4a16      	ldr	r2, [pc, #88]	; (8016c48 <xPortStartScheduler+0xe8>)
 8016bee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	b2da      	uxtb	r2, r3
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016bf8:	4b14      	ldr	r3, [pc, #80]	; (8016c4c <xPortStartScheduler+0xec>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a13      	ldr	r2, [pc, #76]	; (8016c4c <xPortStartScheduler+0xec>)
 8016bfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016c02:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016c04:	4b11      	ldr	r3, [pc, #68]	; (8016c4c <xPortStartScheduler+0xec>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4a10      	ldr	r2, [pc, #64]	; (8016c4c <xPortStartScheduler+0xec>)
 8016c0a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016c0e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016c10:	f000 f8d4 	bl	8016dbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016c14:	4b0e      	ldr	r3, [pc, #56]	; (8016c50 <xPortStartScheduler+0xf0>)
 8016c16:	2200      	movs	r2, #0
 8016c18:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016c1a:	f000 f8f3 	bl	8016e04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	; (8016c54 <xPortStartScheduler+0xf4>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	4a0c      	ldr	r2, [pc, #48]	; (8016c54 <xPortStartScheduler+0xf4>)
 8016c24:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016c28:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016c2a:	f7ff ff85 	bl	8016b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016c2e:	f7fe ff57 	bl	8015ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8016c32:	f7ff ff3d 	bl	8016ab0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016c36:	2300      	movs	r3, #0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3710      	adds	r7, #16
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	e000e400 	.word	0xe000e400
 8016c44:	20001154 	.word	0x20001154
 8016c48:	20001158 	.word	0x20001158
 8016c4c:	e000ed20 	.word	0xe000ed20
 8016c50:	2000011c 	.word	0x2000011c
 8016c54:	e000ef34 	.word	0xe000ef34

08016c58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b083      	sub	sp, #12
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c62:	b672      	cpsid	i
 8016c64:	f383 8811 	msr	BASEPRI, r3
 8016c68:	f3bf 8f6f 	isb	sy
 8016c6c:	f3bf 8f4f 	dsb	sy
 8016c70:	b662      	cpsie	i
 8016c72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016c74:	4b0f      	ldr	r3, [pc, #60]	; (8016cb4 <vPortEnterCritical+0x5c>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	4a0e      	ldr	r2, [pc, #56]	; (8016cb4 <vPortEnterCritical+0x5c>)
 8016c7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016c7e:	4b0d      	ldr	r3, [pc, #52]	; (8016cb4 <vPortEnterCritical+0x5c>)
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2b01      	cmp	r3, #1
 8016c84:	d110      	bne.n	8016ca8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016c86:	4b0c      	ldr	r3, [pc, #48]	; (8016cb8 <vPortEnterCritical+0x60>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	b2db      	uxtb	r3, r3
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d00b      	beq.n	8016ca8 <vPortEnterCritical+0x50>
 8016c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c94:	b672      	cpsid	i
 8016c96:	f383 8811 	msr	BASEPRI, r3
 8016c9a:	f3bf 8f6f 	isb	sy
 8016c9e:	f3bf 8f4f 	dsb	sy
 8016ca2:	b662      	cpsie	i
 8016ca4:	603b      	str	r3, [r7, #0]
 8016ca6:	e7fe      	b.n	8016ca6 <vPortEnterCritical+0x4e>
	}
}
 8016ca8:	bf00      	nop
 8016caa:	370c      	adds	r7, #12
 8016cac:	46bd      	mov	sp, r7
 8016cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb2:	4770      	bx	lr
 8016cb4:	2000011c 	.word	0x2000011c
 8016cb8:	e000ed04 	.word	0xe000ed04

08016cbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b083      	sub	sp, #12
 8016cc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016cc2:	4b12      	ldr	r3, [pc, #72]	; (8016d0c <vPortExitCritical+0x50>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d10b      	bne.n	8016ce2 <vPortExitCritical+0x26>
 8016cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cce:	b672      	cpsid	i
 8016cd0:	f383 8811 	msr	BASEPRI, r3
 8016cd4:	f3bf 8f6f 	isb	sy
 8016cd8:	f3bf 8f4f 	dsb	sy
 8016cdc:	b662      	cpsie	i
 8016cde:	607b      	str	r3, [r7, #4]
 8016ce0:	e7fe      	b.n	8016ce0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016ce2:	4b0a      	ldr	r3, [pc, #40]	; (8016d0c <vPortExitCritical+0x50>)
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	3b01      	subs	r3, #1
 8016ce8:	4a08      	ldr	r2, [pc, #32]	; (8016d0c <vPortExitCritical+0x50>)
 8016cea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016cec:	4b07      	ldr	r3, [pc, #28]	; (8016d0c <vPortExitCritical+0x50>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d104      	bne.n	8016cfe <vPortExitCritical+0x42>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016cf8:	683b      	ldr	r3, [r7, #0]
 8016cfa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016cfe:	bf00      	nop
 8016d00:	370c      	adds	r7, #12
 8016d02:	46bd      	mov	sp, r7
 8016d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d08:	4770      	bx	lr
 8016d0a:	bf00      	nop
 8016d0c:	2000011c 	.word	0x2000011c

08016d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016d10:	f3ef 8009 	mrs	r0, PSP
 8016d14:	f3bf 8f6f 	isb	sy
 8016d18:	4b15      	ldr	r3, [pc, #84]	; (8016d70 <pxCurrentTCBConst>)
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	f01e 0f10 	tst.w	lr, #16
 8016d20:	bf08      	it	eq
 8016d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2a:	6010      	str	r0, [r2, #0]
 8016d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016d30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016d34:	b672      	cpsid	i
 8016d36:	f380 8811 	msr	BASEPRI, r0
 8016d3a:	f3bf 8f4f 	dsb	sy
 8016d3e:	f3bf 8f6f 	isb	sy
 8016d42:	b662      	cpsie	i
 8016d44:	f7fe fecc 	bl	8015ae0 <vTaskSwitchContext>
 8016d48:	f04f 0000 	mov.w	r0, #0
 8016d4c:	f380 8811 	msr	BASEPRI, r0
 8016d50:	bc09      	pop	{r0, r3}
 8016d52:	6819      	ldr	r1, [r3, #0]
 8016d54:	6808      	ldr	r0, [r1, #0]
 8016d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d5a:	f01e 0f10 	tst.w	lr, #16
 8016d5e:	bf08      	it	eq
 8016d60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016d64:	f380 8809 	msr	PSP, r0
 8016d68:	f3bf 8f6f 	isb	sy
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop

08016d70 <pxCurrentTCBConst>:
 8016d70:	20000b28 	.word	0x20000b28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016d74:	bf00      	nop
 8016d76:	bf00      	nop

08016d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b082      	sub	sp, #8
 8016d7c:	af00      	add	r7, sp, #0
	__asm volatile
 8016d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d82:	b672      	cpsid	i
 8016d84:	f383 8811 	msr	BASEPRI, r3
 8016d88:	f3bf 8f6f 	isb	sy
 8016d8c:	f3bf 8f4f 	dsb	sy
 8016d90:	b662      	cpsie	i
 8016d92:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016d94:	f7fe fdea 	bl	801596c <xTaskIncrementTick>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d003      	beq.n	8016da6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016d9e:	4b06      	ldr	r3, [pc, #24]	; (8016db8 <SysTick_Handler+0x40>)
 8016da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016da4:	601a      	str	r2, [r3, #0]
 8016da6:	2300      	movs	r3, #0
 8016da8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016db0:	bf00      	nop
 8016db2:	3708      	adds	r7, #8
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}
 8016db8:	e000ed04 	.word	0xe000ed04

08016dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016dbc:	b480      	push	{r7}
 8016dbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016dc0:	4b0b      	ldr	r3, [pc, #44]	; (8016df0 <vPortSetupTimerInterrupt+0x34>)
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016dc6:	4b0b      	ldr	r3, [pc, #44]	; (8016df4 <vPortSetupTimerInterrupt+0x38>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016dcc:	4b0a      	ldr	r3, [pc, #40]	; (8016df8 <vPortSetupTimerInterrupt+0x3c>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4a0a      	ldr	r2, [pc, #40]	; (8016dfc <vPortSetupTimerInterrupt+0x40>)
 8016dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8016dd6:	099b      	lsrs	r3, r3, #6
 8016dd8:	4a09      	ldr	r2, [pc, #36]	; (8016e00 <vPortSetupTimerInterrupt+0x44>)
 8016dda:	3b01      	subs	r3, #1
 8016ddc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016dde:	4b04      	ldr	r3, [pc, #16]	; (8016df0 <vPortSetupTimerInterrupt+0x34>)
 8016de0:	2207      	movs	r2, #7
 8016de2:	601a      	str	r2, [r3, #0]
}
 8016de4:	bf00      	nop
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr
 8016dee:	bf00      	nop
 8016df0:	e000e010 	.word	0xe000e010
 8016df4:	e000e018 	.word	0xe000e018
 8016df8:	20000000 	.word	0x20000000
 8016dfc:	10624dd3 	.word	0x10624dd3
 8016e00:	e000e014 	.word	0xe000e014

08016e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016e04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016e14 <vPortEnableVFP+0x10>
 8016e08:	6801      	ldr	r1, [r0, #0]
 8016e0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016e0e:	6001      	str	r1, [r0, #0]
 8016e10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016e12:	bf00      	nop
 8016e14:	e000ed88 	.word	0xe000ed88

08016e18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016e18:	b480      	push	{r7}
 8016e1a:	b085      	sub	sp, #20
 8016e1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016e1e:	f3ef 8305 	mrs	r3, IPSR
 8016e22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2b0f      	cmp	r3, #15
 8016e28:	d915      	bls.n	8016e56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016e2a:	4a18      	ldr	r2, [pc, #96]	; (8016e8c <vPortValidateInterruptPriority+0x74>)
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	4413      	add	r3, r2
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016e34:	4b16      	ldr	r3, [pc, #88]	; (8016e90 <vPortValidateInterruptPriority+0x78>)
 8016e36:	781b      	ldrb	r3, [r3, #0]
 8016e38:	7afa      	ldrb	r2, [r7, #11]
 8016e3a:	429a      	cmp	r2, r3
 8016e3c:	d20b      	bcs.n	8016e56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e42:	b672      	cpsid	i
 8016e44:	f383 8811 	msr	BASEPRI, r3
 8016e48:	f3bf 8f6f 	isb	sy
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	b662      	cpsie	i
 8016e52:	607b      	str	r3, [r7, #4]
 8016e54:	e7fe      	b.n	8016e54 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016e56:	4b0f      	ldr	r3, [pc, #60]	; (8016e94 <vPortValidateInterruptPriority+0x7c>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016e5e:	4b0e      	ldr	r3, [pc, #56]	; (8016e98 <vPortValidateInterruptPriority+0x80>)
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	429a      	cmp	r2, r3
 8016e64:	d90b      	bls.n	8016e7e <vPortValidateInterruptPriority+0x66>
 8016e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e6a:	b672      	cpsid	i
 8016e6c:	f383 8811 	msr	BASEPRI, r3
 8016e70:	f3bf 8f6f 	isb	sy
 8016e74:	f3bf 8f4f 	dsb	sy
 8016e78:	b662      	cpsie	i
 8016e7a:	603b      	str	r3, [r7, #0]
 8016e7c:	e7fe      	b.n	8016e7c <vPortValidateInterruptPriority+0x64>
	}
 8016e7e:	bf00      	nop
 8016e80:	3714      	adds	r7, #20
 8016e82:	46bd      	mov	sp, r7
 8016e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e88:	4770      	bx	lr
 8016e8a:	bf00      	nop
 8016e8c:	e000e3f0 	.word	0xe000e3f0
 8016e90:	20001154 	.word	0x20001154
 8016e94:	e000ed0c 	.word	0xe000ed0c
 8016e98:	20001158 	.word	0x20001158

08016e9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b08a      	sub	sp, #40	; 0x28
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016ea8:	f7fe fc92 	bl	80157d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016eac:	4b5a      	ldr	r3, [pc, #360]	; (8017018 <pvPortMalloc+0x17c>)
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d101      	bne.n	8016eb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016eb4:	f000 f916 	bl	80170e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016eb8:	4b58      	ldr	r3, [pc, #352]	; (801701c <pvPortMalloc+0x180>)
 8016eba:	681a      	ldr	r2, [r3, #0]
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	4013      	ands	r3, r2
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	f040 8090 	bne.w	8016fe6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d01e      	beq.n	8016f0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016ecc:	2208      	movs	r2, #8
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	4413      	add	r3, r2
 8016ed2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f003 0307 	and.w	r3, r3, #7
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d015      	beq.n	8016f0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f023 0307 	bic.w	r3, r3, #7
 8016ee4:	3308      	adds	r3, #8
 8016ee6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	f003 0307 	and.w	r3, r3, #7
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d00b      	beq.n	8016f0a <pvPortMalloc+0x6e>
 8016ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ef6:	b672      	cpsid	i
 8016ef8:	f383 8811 	msr	BASEPRI, r3
 8016efc:	f3bf 8f6f 	isb	sy
 8016f00:	f3bf 8f4f 	dsb	sy
 8016f04:	b662      	cpsie	i
 8016f06:	617b      	str	r3, [r7, #20]
 8016f08:	e7fe      	b.n	8016f08 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d06a      	beq.n	8016fe6 <pvPortMalloc+0x14a>
 8016f10:	4b43      	ldr	r3, [pc, #268]	; (8017020 <pvPortMalloc+0x184>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	687a      	ldr	r2, [r7, #4]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	d865      	bhi.n	8016fe6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016f1a:	4b42      	ldr	r3, [pc, #264]	; (8017024 <pvPortMalloc+0x188>)
 8016f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016f1e:	4b41      	ldr	r3, [pc, #260]	; (8017024 <pvPortMalloc+0x188>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f24:	e004      	b.n	8016f30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f32:	685b      	ldr	r3, [r3, #4]
 8016f34:	687a      	ldr	r2, [r7, #4]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d903      	bls.n	8016f42 <pvPortMalloc+0xa6>
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d1f1      	bne.n	8016f26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016f42:	4b35      	ldr	r3, [pc, #212]	; (8017018 <pvPortMalloc+0x17c>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f48:	429a      	cmp	r2, r3
 8016f4a:	d04c      	beq.n	8016fe6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016f4c:	6a3b      	ldr	r3, [r7, #32]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2208      	movs	r2, #8
 8016f52:	4413      	add	r3, r2
 8016f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f58:	681a      	ldr	r2, [r3, #0]
 8016f5a:	6a3b      	ldr	r3, [r7, #32]
 8016f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f60:	685a      	ldr	r2, [r3, #4]
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	1ad2      	subs	r2, r2, r3
 8016f66:	2308      	movs	r3, #8
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d920      	bls.n	8016fb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	4413      	add	r3, r2
 8016f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f76:	69bb      	ldr	r3, [r7, #24]
 8016f78:	f003 0307 	and.w	r3, r3, #7
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00b      	beq.n	8016f98 <pvPortMalloc+0xfc>
 8016f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f84:	b672      	cpsid	i
 8016f86:	f383 8811 	msr	BASEPRI, r3
 8016f8a:	f3bf 8f6f 	isb	sy
 8016f8e:	f3bf 8f4f 	dsb	sy
 8016f92:	b662      	cpsie	i
 8016f94:	613b      	str	r3, [r7, #16]
 8016f96:	e7fe      	b.n	8016f96 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9a:	685a      	ldr	r2, [r3, #4]
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016faa:	69b8      	ldr	r0, [r7, #24]
 8016fac:	f000 f8fc 	bl	80171a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016fb0:	4b1b      	ldr	r3, [pc, #108]	; (8017020 <pvPortMalloc+0x184>)
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	1ad3      	subs	r3, r2, r3
 8016fba:	4a19      	ldr	r2, [pc, #100]	; (8017020 <pvPortMalloc+0x184>)
 8016fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016fbe:	4b18      	ldr	r3, [pc, #96]	; (8017020 <pvPortMalloc+0x184>)
 8016fc0:	681a      	ldr	r2, [r3, #0]
 8016fc2:	4b19      	ldr	r3, [pc, #100]	; (8017028 <pvPortMalloc+0x18c>)
 8016fc4:	681b      	ldr	r3, [r3, #0]
 8016fc6:	429a      	cmp	r2, r3
 8016fc8:	d203      	bcs.n	8016fd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016fca:	4b15      	ldr	r3, [pc, #84]	; (8017020 <pvPortMalloc+0x184>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	4a16      	ldr	r2, [pc, #88]	; (8017028 <pvPortMalloc+0x18c>)
 8016fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	4b11      	ldr	r3, [pc, #68]	; (801701c <pvPortMalloc+0x180>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	431a      	orrs	r2, r3
 8016fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe2:	2200      	movs	r2, #0
 8016fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016fe6:	f7fe fc01 	bl	80157ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016fea:	69fb      	ldr	r3, [r7, #28]
 8016fec:	f003 0307 	and.w	r3, r3, #7
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d00b      	beq.n	801700c <pvPortMalloc+0x170>
 8016ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff8:	b672      	cpsid	i
 8016ffa:	f383 8811 	msr	BASEPRI, r3
 8016ffe:	f3bf 8f6f 	isb	sy
 8017002:	f3bf 8f4f 	dsb	sy
 8017006:	b662      	cpsie	i
 8017008:	60fb      	str	r3, [r7, #12]
 801700a:	e7fe      	b.n	801700a <pvPortMalloc+0x16e>
	return pvReturn;
 801700c:	69fb      	ldr	r3, [r7, #28]
}
 801700e:	4618      	mov	r0, r3
 8017010:	3728      	adds	r7, #40	; 0x28
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	20008964 	.word	0x20008964
 801701c:	20008970 	.word	0x20008970
 8017020:	20008968 	.word	0x20008968
 8017024:	2000895c 	.word	0x2000895c
 8017028:	2000896c 	.word	0x2000896c

0801702c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b086      	sub	sp, #24
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d04a      	beq.n	80170d4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801703e:	2308      	movs	r3, #8
 8017040:	425b      	negs	r3, r3
 8017042:	697a      	ldr	r2, [r7, #20]
 8017044:	4413      	add	r3, r2
 8017046:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017048:	697b      	ldr	r3, [r7, #20]
 801704a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801704c:	693b      	ldr	r3, [r7, #16]
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	4b22      	ldr	r3, [pc, #136]	; (80170dc <vPortFree+0xb0>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	4013      	ands	r3, r2
 8017056:	2b00      	cmp	r3, #0
 8017058:	d10b      	bne.n	8017072 <vPortFree+0x46>
 801705a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801705e:	b672      	cpsid	i
 8017060:	f383 8811 	msr	BASEPRI, r3
 8017064:	f3bf 8f6f 	isb	sy
 8017068:	f3bf 8f4f 	dsb	sy
 801706c:	b662      	cpsie	i
 801706e:	60fb      	str	r3, [r7, #12]
 8017070:	e7fe      	b.n	8017070 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d00b      	beq.n	8017092 <vPortFree+0x66>
 801707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707e:	b672      	cpsid	i
 8017080:	f383 8811 	msr	BASEPRI, r3
 8017084:	f3bf 8f6f 	isb	sy
 8017088:	f3bf 8f4f 	dsb	sy
 801708c:	b662      	cpsie	i
 801708e:	60bb      	str	r3, [r7, #8]
 8017090:	e7fe      	b.n	8017090 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017092:	693b      	ldr	r3, [r7, #16]
 8017094:	685a      	ldr	r2, [r3, #4]
 8017096:	4b11      	ldr	r3, [pc, #68]	; (80170dc <vPortFree+0xb0>)
 8017098:	681b      	ldr	r3, [r3, #0]
 801709a:	4013      	ands	r3, r2
 801709c:	2b00      	cmp	r3, #0
 801709e:	d019      	beq.n	80170d4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80170a0:	693b      	ldr	r3, [r7, #16]
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d115      	bne.n	80170d4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80170a8:	693b      	ldr	r3, [r7, #16]
 80170aa:	685a      	ldr	r2, [r3, #4]
 80170ac:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <vPortFree+0xb0>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	43db      	mvns	r3, r3
 80170b2:	401a      	ands	r2, r3
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80170b8:	f7fe fb8a 	bl	80157d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	685a      	ldr	r2, [r3, #4]
 80170c0:	4b07      	ldr	r3, [pc, #28]	; (80170e0 <vPortFree+0xb4>)
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	4413      	add	r3, r2
 80170c6:	4a06      	ldr	r2, [pc, #24]	; (80170e0 <vPortFree+0xb4>)
 80170c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80170ca:	6938      	ldr	r0, [r7, #16]
 80170cc:	f000 f86c 	bl	80171a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80170d0:	f7fe fb8c 	bl	80157ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80170d4:	bf00      	nop
 80170d6:	3718      	adds	r7, #24
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	20008970 	.word	0x20008970
 80170e0:	20008968 	.word	0x20008968

080170e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80170e4:	b480      	push	{r7}
 80170e6:	b085      	sub	sp, #20
 80170e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80170ea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80170ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80170f0:	4b27      	ldr	r3, [pc, #156]	; (8017190 <prvHeapInit+0xac>)
 80170f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	f003 0307 	and.w	r3, r3, #7
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d00c      	beq.n	8017118 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	3307      	adds	r3, #7
 8017102:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	f023 0307 	bic.w	r3, r3, #7
 801710a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801710c:	68ba      	ldr	r2, [r7, #8]
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	1ad3      	subs	r3, r2, r3
 8017112:	4a1f      	ldr	r2, [pc, #124]	; (8017190 <prvHeapInit+0xac>)
 8017114:	4413      	add	r3, r2
 8017116:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801711c:	4a1d      	ldr	r2, [pc, #116]	; (8017194 <prvHeapInit+0xb0>)
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017122:	4b1c      	ldr	r3, [pc, #112]	; (8017194 <prvHeapInit+0xb0>)
 8017124:	2200      	movs	r2, #0
 8017126:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	68ba      	ldr	r2, [r7, #8]
 801712c:	4413      	add	r3, r2
 801712e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017130:	2208      	movs	r2, #8
 8017132:	68fb      	ldr	r3, [r7, #12]
 8017134:	1a9b      	subs	r3, r3, r2
 8017136:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	f023 0307 	bic.w	r3, r3, #7
 801713e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	4a15      	ldr	r2, [pc, #84]	; (8017198 <prvHeapInit+0xb4>)
 8017144:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017146:	4b14      	ldr	r3, [pc, #80]	; (8017198 <prvHeapInit+0xb4>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	2200      	movs	r2, #0
 801714c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801714e:	4b12      	ldr	r3, [pc, #72]	; (8017198 <prvHeapInit+0xb4>)
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	2200      	movs	r2, #0
 8017154:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	68fa      	ldr	r2, [r7, #12]
 801715e:	1ad2      	subs	r2, r2, r3
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017164:	4b0c      	ldr	r3, [pc, #48]	; (8017198 <prvHeapInit+0xb4>)
 8017166:	681a      	ldr	r2, [r3, #0]
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	685b      	ldr	r3, [r3, #4]
 8017170:	4a0a      	ldr	r2, [pc, #40]	; (801719c <prvHeapInit+0xb8>)
 8017172:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	685b      	ldr	r3, [r3, #4]
 8017178:	4a09      	ldr	r2, [pc, #36]	; (80171a0 <prvHeapInit+0xbc>)
 801717a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801717c:	4b09      	ldr	r3, [pc, #36]	; (80171a4 <prvHeapInit+0xc0>)
 801717e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017182:	601a      	str	r2, [r3, #0]
}
 8017184:	bf00      	nop
 8017186:	3714      	adds	r7, #20
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr
 8017190:	2000115c 	.word	0x2000115c
 8017194:	2000895c 	.word	0x2000895c
 8017198:	20008964 	.word	0x20008964
 801719c:	2000896c 	.word	0x2000896c
 80171a0:	20008968 	.word	0x20008968
 80171a4:	20008970 	.word	0x20008970

080171a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80171a8:	b480      	push	{r7}
 80171aa:	b085      	sub	sp, #20
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80171b0:	4b28      	ldr	r3, [pc, #160]	; (8017254 <prvInsertBlockIntoFreeList+0xac>)
 80171b2:	60fb      	str	r3, [r7, #12]
 80171b4:	e002      	b.n	80171bc <prvInsertBlockIntoFreeList+0x14>
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	60fb      	str	r3, [r7, #12]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	687a      	ldr	r2, [r7, #4]
 80171c2:	429a      	cmp	r2, r3
 80171c4:	d8f7      	bhi.n	80171b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	685b      	ldr	r3, [r3, #4]
 80171ce:	68ba      	ldr	r2, [r7, #8]
 80171d0:	4413      	add	r3, r2
 80171d2:	687a      	ldr	r2, [r7, #4]
 80171d4:	429a      	cmp	r2, r3
 80171d6:	d108      	bne.n	80171ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	685a      	ldr	r2, [r3, #4]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	441a      	add	r2, r3
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	68ba      	ldr	r2, [r7, #8]
 80171f4:	441a      	add	r2, r3
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d118      	bne.n	8017230 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	4b15      	ldr	r3, [pc, #84]	; (8017258 <prvInsertBlockIntoFreeList+0xb0>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	429a      	cmp	r2, r3
 8017208:	d00d      	beq.n	8017226 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	685a      	ldr	r2, [r3, #4]
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	441a      	add	r2, r3
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	601a      	str	r2, [r3, #0]
 8017224:	e008      	b.n	8017238 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017226:	4b0c      	ldr	r3, [pc, #48]	; (8017258 <prvInsertBlockIntoFreeList+0xb0>)
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	601a      	str	r2, [r3, #0]
 801722e:	e003      	b.n	8017238 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017238:	68fa      	ldr	r2, [r7, #12]
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	429a      	cmp	r2, r3
 801723e:	d002      	beq.n	8017246 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	687a      	ldr	r2, [r7, #4]
 8017244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017246:	bf00      	nop
 8017248:	3714      	adds	r7, #20
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr
 8017252:	bf00      	nop
 8017254:	2000895c 	.word	0x2000895c
 8017258:	20008964 	.word	0x20008964

0801725c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017260:	2200      	movs	r2, #0
 8017262:	4912      	ldr	r1, [pc, #72]	; (80172ac <MX_USB_DEVICE_Init+0x50>)
 8017264:	4812      	ldr	r0, [pc, #72]	; (80172b0 <MX_USB_DEVICE_Init+0x54>)
 8017266:	f7f7 ff77 	bl	800f158 <USBD_Init>
 801726a:	4603      	mov	r3, r0
 801726c:	2b00      	cmp	r3, #0
 801726e:	d001      	beq.n	8017274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017270:	f7ed f8b4 	bl	80043dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017274:	490f      	ldr	r1, [pc, #60]	; (80172b4 <MX_USB_DEVICE_Init+0x58>)
 8017276:	480e      	ldr	r0, [pc, #56]	; (80172b0 <MX_USB_DEVICE_Init+0x54>)
 8017278:	f7f7 ffa4 	bl	800f1c4 <USBD_RegisterClass>
 801727c:	4603      	mov	r3, r0
 801727e:	2b00      	cmp	r3, #0
 8017280:	d001      	beq.n	8017286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017282:	f7ed f8ab 	bl	80043dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017286:	490c      	ldr	r1, [pc, #48]	; (80172b8 <MX_USB_DEVICE_Init+0x5c>)
 8017288:	4809      	ldr	r0, [pc, #36]	; (80172b0 <MX_USB_DEVICE_Init+0x54>)
 801728a:	f7f7 fef9 	bl	800f080 <USBD_CDC_RegisterInterface>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d001      	beq.n	8017298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017294:	f7ed f8a2 	bl	80043dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017298:	4805      	ldr	r0, [pc, #20]	; (80172b0 <MX_USB_DEVICE_Init+0x54>)
 801729a:	f7f7 ffb4 	bl	800f206 <USBD_Start>
 801729e:	4603      	mov	r3, r0
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d001      	beq.n	80172a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80172a4:	f7ed f89a 	bl	80043dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80172a8:	bf00      	nop
 80172aa:	bd80      	pop	{r7, pc}
 80172ac:	20000134 	.word	0x20000134
 80172b0:	200276c4 	.word	0x200276c4
 80172b4:	20000018 	.word	0x20000018
 80172b8:	20000120 	.word	0x20000120

080172bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80172c0:	2200      	movs	r2, #0
 80172c2:	4905      	ldr	r1, [pc, #20]	; (80172d8 <CDC_Init_FS+0x1c>)
 80172c4:	4805      	ldr	r0, [pc, #20]	; (80172dc <CDC_Init_FS+0x20>)
 80172c6:	f7f7 fef0 	bl	800f0aa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80172ca:	4905      	ldr	r1, [pc, #20]	; (80172e0 <CDC_Init_FS+0x24>)
 80172cc:	4803      	ldr	r0, [pc, #12]	; (80172dc <CDC_Init_FS+0x20>)
 80172ce:	f7f7 ff05 	bl	800f0dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80172d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	20028194 	.word	0x20028194
 80172dc:	200276c4 	.word	0x200276c4
 80172e0:	20027994 	.word	0x20027994

080172e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80172e4:	b480      	push	{r7}
 80172e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80172e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80172ea:	4618      	mov	r0, r3
 80172ec:	46bd      	mov	sp, r7
 80172ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f2:	4770      	bx	lr

080172f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80172f4:	b480      	push	{r7}
 80172f6:	b083      	sub	sp, #12
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	4603      	mov	r3, r0
 80172fc:	6039      	str	r1, [r7, #0]
 80172fe:	71fb      	strb	r3, [r7, #7]
 8017300:	4613      	mov	r3, r2
 8017302:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017304:	79fb      	ldrb	r3, [r7, #7]
 8017306:	2b23      	cmp	r3, #35	; 0x23
 8017308:	d84a      	bhi.n	80173a0 <CDC_Control_FS+0xac>
 801730a:	a201      	add	r2, pc, #4	; (adr r2, 8017310 <CDC_Control_FS+0x1c>)
 801730c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017310:	080173a1 	.word	0x080173a1
 8017314:	080173a1 	.word	0x080173a1
 8017318:	080173a1 	.word	0x080173a1
 801731c:	080173a1 	.word	0x080173a1
 8017320:	080173a1 	.word	0x080173a1
 8017324:	080173a1 	.word	0x080173a1
 8017328:	080173a1 	.word	0x080173a1
 801732c:	080173a1 	.word	0x080173a1
 8017330:	080173a1 	.word	0x080173a1
 8017334:	080173a1 	.word	0x080173a1
 8017338:	080173a1 	.word	0x080173a1
 801733c:	080173a1 	.word	0x080173a1
 8017340:	080173a1 	.word	0x080173a1
 8017344:	080173a1 	.word	0x080173a1
 8017348:	080173a1 	.word	0x080173a1
 801734c:	080173a1 	.word	0x080173a1
 8017350:	080173a1 	.word	0x080173a1
 8017354:	080173a1 	.word	0x080173a1
 8017358:	080173a1 	.word	0x080173a1
 801735c:	080173a1 	.word	0x080173a1
 8017360:	080173a1 	.word	0x080173a1
 8017364:	080173a1 	.word	0x080173a1
 8017368:	080173a1 	.word	0x080173a1
 801736c:	080173a1 	.word	0x080173a1
 8017370:	080173a1 	.word	0x080173a1
 8017374:	080173a1 	.word	0x080173a1
 8017378:	080173a1 	.word	0x080173a1
 801737c:	080173a1 	.word	0x080173a1
 8017380:	080173a1 	.word	0x080173a1
 8017384:	080173a1 	.word	0x080173a1
 8017388:	080173a1 	.word	0x080173a1
 801738c:	080173a1 	.word	0x080173a1
 8017390:	080173a1 	.word	0x080173a1
 8017394:	080173a1 	.word	0x080173a1
 8017398:	080173a1 	.word	0x080173a1
 801739c:	080173a1 	.word	0x080173a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80173a0:	bf00      	nop
  }

  return (USBD_OK);
 80173a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80173a4:	4618      	mov	r0, r3
 80173a6:	370c      	adds	r7, #12
 80173a8:	46bd      	mov	sp, r7
 80173aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ae:	4770      	bx	lr

080173b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b082      	sub	sp, #8
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
 80173b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(osMutexAcquire(usb_data_mutex, 10)){
 80173ba:	4b10      	ldr	r3, [pc, #64]	; (80173fc <CDC_Receive_FS+0x4c>)
 80173bc:	681b      	ldr	r3, [r3, #0]
 80173be:	210a      	movs	r1, #10
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7fc f9c3 	bl	801374c <osMutexAcquire>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d00b      	beq.n	80173e4 <CDC_Receive_FS+0x34>
		memcpy(Buf, usb_data_buffer, *Len);
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	461a      	mov	r2, r3
 80173d2:	490b      	ldr	r1, [pc, #44]	; (8017400 <CDC_Receive_FS+0x50>)
 80173d4:	6878      	ldr	r0, [r7, #4]
 80173d6:	f000 fcd5 	bl	8017d84 <memcpy>
		osMutexRelease(usb_data_mutex);
 80173da:	4b08      	ldr	r3, [pc, #32]	; (80173fc <CDC_Receive_FS+0x4c>)
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	4618      	mov	r0, r3
 80173e0:	f7fc fa12 	bl	8013808 <osMutexRelease>
	}



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80173e4:	6879      	ldr	r1, [r7, #4]
 80173e6:	4807      	ldr	r0, [pc, #28]	; (8017404 <CDC_Receive_FS+0x54>)
 80173e8:	f7f7 fe78 	bl	800f0dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80173ec:	4805      	ldr	r0, [pc, #20]	; (8017404 <CDC_Receive_FS+0x54>)
 80173ee:	f7f7 fe89 	bl	800f104 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80173f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80173f4:	4618      	mov	r0, r3
 80173f6:	3708      	adds	r7, #8
 80173f8:	46bd      	mov	sp, r7
 80173fa:	bd80      	pop	{r7, pc}
 80173fc:	20008acc 	.word	0x20008acc
 8017400:	200002c8 	.word	0x200002c8
 8017404:	200276c4 	.word	0x200276c4

08017408 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017408:	b480      	push	{r7}
 801740a:	b087      	sub	sp, #28
 801740c:	af00      	add	r7, sp, #0
 801740e:	60f8      	str	r0, [r7, #12]
 8017410:	60b9      	str	r1, [r7, #8]
 8017412:	4613      	mov	r3, r2
 8017414:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017416:	2300      	movs	r3, #0
 8017418:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801741a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801741e:	4618      	mov	r0, r3
 8017420:	371c      	adds	r7, #28
 8017422:	46bd      	mov	sp, r7
 8017424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017428:	4770      	bx	lr
	...

0801742c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801742c:	b480      	push	{r7}
 801742e:	b083      	sub	sp, #12
 8017430:	af00      	add	r7, sp, #0
 8017432:	4603      	mov	r3, r0
 8017434:	6039      	str	r1, [r7, #0]
 8017436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017438:	683b      	ldr	r3, [r7, #0]
 801743a:	2212      	movs	r2, #18
 801743c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801743e:	4b03      	ldr	r3, [pc, #12]	; (801744c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017440:	4618      	mov	r0, r3
 8017442:	370c      	adds	r7, #12
 8017444:	46bd      	mov	sp, r7
 8017446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744a:	4770      	bx	lr
 801744c:	20000154 	.word	0x20000154

08017450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017450:	b480      	push	{r7}
 8017452:	b083      	sub	sp, #12
 8017454:	af00      	add	r7, sp, #0
 8017456:	4603      	mov	r3, r0
 8017458:	6039      	str	r1, [r7, #0]
 801745a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	2204      	movs	r2, #4
 8017460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017462:	4b03      	ldr	r3, [pc, #12]	; (8017470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017464:	4618      	mov	r0, r3
 8017466:	370c      	adds	r7, #12
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr
 8017470:	20000174 	.word	0x20000174

08017474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b082      	sub	sp, #8
 8017478:	af00      	add	r7, sp, #0
 801747a:	4603      	mov	r3, r0
 801747c:	6039      	str	r1, [r7, #0]
 801747e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017480:	79fb      	ldrb	r3, [r7, #7]
 8017482:	2b00      	cmp	r3, #0
 8017484:	d105      	bne.n	8017492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	4907      	ldr	r1, [pc, #28]	; (80174a8 <USBD_FS_ProductStrDescriptor+0x34>)
 801748a:	4808      	ldr	r0, [pc, #32]	; (80174ac <USBD_FS_ProductStrDescriptor+0x38>)
 801748c:	f7f8 feb3 	bl	80101f6 <USBD_GetString>
 8017490:	e004      	b.n	801749c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017492:	683a      	ldr	r2, [r7, #0]
 8017494:	4904      	ldr	r1, [pc, #16]	; (80174a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8017496:	4805      	ldr	r0, [pc, #20]	; (80174ac <USBD_FS_ProductStrDescriptor+0x38>)
 8017498:	f7f8 fead 	bl	80101f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801749c:	4b02      	ldr	r3, [pc, #8]	; (80174a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3708      	adds	r7, #8
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	20028994 	.word	0x20028994
 80174ac:	0801abf8 	.word	0x0801abf8

080174b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b082      	sub	sp, #8
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	4603      	mov	r3, r0
 80174b8:	6039      	str	r1, [r7, #0]
 80174ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80174bc:	683a      	ldr	r2, [r7, #0]
 80174be:	4904      	ldr	r1, [pc, #16]	; (80174d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80174c0:	4804      	ldr	r0, [pc, #16]	; (80174d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80174c2:	f7f8 fe98 	bl	80101f6 <USBD_GetString>
  return USBD_StrDesc;
 80174c6:	4b02      	ldr	r3, [pc, #8]	; (80174d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	3708      	adds	r7, #8
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}
 80174d0:	20028994 	.word	0x20028994
 80174d4:	0801ac10 	.word	0x0801ac10

080174d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	4603      	mov	r3, r0
 80174e0:	6039      	str	r1, [r7, #0]
 80174e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80174e4:	683b      	ldr	r3, [r7, #0]
 80174e6:	221a      	movs	r2, #26
 80174e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80174ea:	f000 f855 	bl	8017598 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80174ee:	4b02      	ldr	r3, [pc, #8]	; (80174f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80174f0:	4618      	mov	r0, r3
 80174f2:	3708      	adds	r7, #8
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	20000178 	.word	0x20000178

080174fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
 8017502:	4603      	mov	r3, r0
 8017504:	6039      	str	r1, [r7, #0]
 8017506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017508:	79fb      	ldrb	r3, [r7, #7]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d105      	bne.n	801751a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801750e:	683a      	ldr	r2, [r7, #0]
 8017510:	4907      	ldr	r1, [pc, #28]	; (8017530 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017512:	4808      	ldr	r0, [pc, #32]	; (8017534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017514:	f7f8 fe6f 	bl	80101f6 <USBD_GetString>
 8017518:	e004      	b.n	8017524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801751a:	683a      	ldr	r2, [r7, #0]
 801751c:	4904      	ldr	r1, [pc, #16]	; (8017530 <USBD_FS_ConfigStrDescriptor+0x34>)
 801751e:	4805      	ldr	r0, [pc, #20]	; (8017534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017520:	f7f8 fe69 	bl	80101f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017524:	4b02      	ldr	r3, [pc, #8]	; (8017530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017526:	4618      	mov	r0, r3
 8017528:	3708      	adds	r7, #8
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
 801752e:	bf00      	nop
 8017530:	20028994 	.word	0x20028994
 8017534:	0801ac24 	.word	0x0801ac24

08017538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017538:	b580      	push	{r7, lr}
 801753a:	b082      	sub	sp, #8
 801753c:	af00      	add	r7, sp, #0
 801753e:	4603      	mov	r3, r0
 8017540:	6039      	str	r1, [r7, #0]
 8017542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017544:	79fb      	ldrb	r3, [r7, #7]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	4907      	ldr	r1, [pc, #28]	; (801756c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801754e:	4808      	ldr	r0, [pc, #32]	; (8017570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017550:	f7f8 fe51 	bl	80101f6 <USBD_GetString>
 8017554:	e004      	b.n	8017560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017556:	683a      	ldr	r2, [r7, #0]
 8017558:	4904      	ldr	r1, [pc, #16]	; (801756c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801755a:	4805      	ldr	r0, [pc, #20]	; (8017570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801755c:	f7f8 fe4b 	bl	80101f6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017560:	4b02      	ldr	r3, [pc, #8]	; (801756c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017562:	4618      	mov	r0, r3
 8017564:	3708      	adds	r7, #8
 8017566:	46bd      	mov	sp, r7
 8017568:	bd80      	pop	{r7, pc}
 801756a:	bf00      	nop
 801756c:	20028994 	.word	0x20028994
 8017570:	0801ac30 	.word	0x0801ac30

08017574 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017574:	b480      	push	{r7}
 8017576:	b083      	sub	sp, #12
 8017578:	af00      	add	r7, sp, #0
 801757a:	4603      	mov	r3, r0
 801757c:	6039      	str	r1, [r7, #0]
 801757e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017580:	683b      	ldr	r3, [r7, #0]
 8017582:	220c      	movs	r2, #12
 8017584:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017586:	4b03      	ldr	r3, [pc, #12]	; (8017594 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017588:	4618      	mov	r0, r3
 801758a:	370c      	adds	r7, #12
 801758c:	46bd      	mov	sp, r7
 801758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017592:	4770      	bx	lr
 8017594:	20000168 	.word	0x20000168

08017598 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801759e:	4b0f      	ldr	r3, [pc, #60]	; (80175dc <Get_SerialNum+0x44>)
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80175a4:	4b0e      	ldr	r3, [pc, #56]	; (80175e0 <Get_SerialNum+0x48>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80175aa:	4b0e      	ldr	r3, [pc, #56]	; (80175e4 <Get_SerialNum+0x4c>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80175b0:	68fa      	ldr	r2, [r7, #12]
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	4413      	add	r3, r2
 80175b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d009      	beq.n	80175d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80175be:	2208      	movs	r2, #8
 80175c0:	4909      	ldr	r1, [pc, #36]	; (80175e8 <Get_SerialNum+0x50>)
 80175c2:	68f8      	ldr	r0, [r7, #12]
 80175c4:	f000 f814 	bl	80175f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80175c8:	2204      	movs	r2, #4
 80175ca:	4908      	ldr	r1, [pc, #32]	; (80175ec <Get_SerialNum+0x54>)
 80175cc:	68b8      	ldr	r0, [r7, #8]
 80175ce:	f000 f80f 	bl	80175f0 <IntToUnicode>
  }
}
 80175d2:	bf00      	nop
 80175d4:	3710      	adds	r7, #16
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	1ff0f420 	.word	0x1ff0f420
 80175e0:	1ff0f424 	.word	0x1ff0f424
 80175e4:	1ff0f428 	.word	0x1ff0f428
 80175e8:	2000017a 	.word	0x2000017a
 80175ec:	2000018a 	.word	0x2000018a

080175f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b087      	sub	sp, #28
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	4613      	mov	r3, r2
 80175fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80175fe:	2300      	movs	r3, #0
 8017600:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017602:	2300      	movs	r3, #0
 8017604:	75fb      	strb	r3, [r7, #23]
 8017606:	e027      	b.n	8017658 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	0f1b      	lsrs	r3, r3, #28
 801760c:	2b09      	cmp	r3, #9
 801760e:	d80b      	bhi.n	8017628 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	0f1b      	lsrs	r3, r3, #28
 8017614:	b2da      	uxtb	r2, r3
 8017616:	7dfb      	ldrb	r3, [r7, #23]
 8017618:	005b      	lsls	r3, r3, #1
 801761a:	4619      	mov	r1, r3
 801761c:	68bb      	ldr	r3, [r7, #8]
 801761e:	440b      	add	r3, r1
 8017620:	3230      	adds	r2, #48	; 0x30
 8017622:	b2d2      	uxtb	r2, r2
 8017624:	701a      	strb	r2, [r3, #0]
 8017626:	e00a      	b.n	801763e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	0f1b      	lsrs	r3, r3, #28
 801762c:	b2da      	uxtb	r2, r3
 801762e:	7dfb      	ldrb	r3, [r7, #23]
 8017630:	005b      	lsls	r3, r3, #1
 8017632:	4619      	mov	r1, r3
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	440b      	add	r3, r1
 8017638:	3237      	adds	r2, #55	; 0x37
 801763a:	b2d2      	uxtb	r2, r2
 801763c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	011b      	lsls	r3, r3, #4
 8017642:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017644:	7dfb      	ldrb	r3, [r7, #23]
 8017646:	005b      	lsls	r3, r3, #1
 8017648:	3301      	adds	r3, #1
 801764a:	68ba      	ldr	r2, [r7, #8]
 801764c:	4413      	add	r3, r2
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017652:	7dfb      	ldrb	r3, [r7, #23]
 8017654:	3301      	adds	r3, #1
 8017656:	75fb      	strb	r3, [r7, #23]
 8017658:	7dfa      	ldrb	r2, [r7, #23]
 801765a:	79fb      	ldrb	r3, [r7, #7]
 801765c:	429a      	cmp	r2, r3
 801765e:	d3d3      	bcc.n	8017608 <IntToUnicode+0x18>
  }
}
 8017660:	bf00      	nop
 8017662:	371c      	adds	r7, #28
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801766c:	b580      	push	{r7, lr}
 801766e:	b08a      	sub	sp, #40	; 0x28
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017674:	f107 0314 	add.w	r3, r7, #20
 8017678:	2200      	movs	r2, #0
 801767a:	601a      	str	r2, [r3, #0]
 801767c:	605a      	str	r2, [r3, #4]
 801767e:	609a      	str	r2, [r3, #8]
 8017680:	60da      	str	r2, [r3, #12]
 8017682:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801768c:	d13c      	bne.n	8017708 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801768e:	4b20      	ldr	r3, [pc, #128]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 8017690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017692:	4a1f      	ldr	r2, [pc, #124]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 8017694:	f043 0301 	orr.w	r3, r3, #1
 8017698:	6313      	str	r3, [r2, #48]	; 0x30
 801769a:	4b1d      	ldr	r3, [pc, #116]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 801769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801769e:	f003 0301 	and.w	r3, r3, #1
 80176a2:	613b      	str	r3, [r7, #16]
 80176a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80176a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80176aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176ac:	2302      	movs	r3, #2
 80176ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176b0:	2300      	movs	r3, #0
 80176b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80176b4:	2303      	movs	r3, #3
 80176b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80176b8:	230a      	movs	r3, #10
 80176ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80176bc:	f107 0314 	add.w	r3, r7, #20
 80176c0:	4619      	mov	r1, r3
 80176c2:	4814      	ldr	r0, [pc, #80]	; (8017714 <HAL_PCD_MspInit+0xa8>)
 80176c4:	f7ee feae 	bl	8006424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80176c8:	4b11      	ldr	r3, [pc, #68]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176cc:	4a10      	ldr	r2, [pc, #64]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176d2:	6353      	str	r3, [r2, #52]	; 0x34
 80176d4:	4b0e      	ldr	r3, [pc, #56]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80176d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80176dc:	60fb      	str	r3, [r7, #12]
 80176de:	68fb      	ldr	r3, [r7, #12]
 80176e0:	4b0b      	ldr	r3, [pc, #44]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176e4:	4a0a      	ldr	r2, [pc, #40]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176ea:	6453      	str	r3, [r2, #68]	; 0x44
 80176ec:	4b08      	ldr	r3, [pc, #32]	; (8017710 <HAL_PCD_MspInit+0xa4>)
 80176ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80176f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176f4:	60bb      	str	r3, [r7, #8]
 80176f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80176f8:	2200      	movs	r2, #0
 80176fa:	2105      	movs	r1, #5
 80176fc:	2043      	movs	r0, #67	; 0x43
 80176fe:	f7ee fac3 	bl	8005c88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017702:	2043      	movs	r0, #67	; 0x43
 8017704:	f7ee fadc 	bl	8005cc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017708:	bf00      	nop
 801770a:	3728      	adds	r7, #40	; 0x28
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}
 8017710:	40023800 	.word	0x40023800
 8017714:	40020000 	.word	0x40020000

08017718 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b082      	sub	sp, #8
 801771c:	af00      	add	r7, sp, #0
 801771e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801772c:	4619      	mov	r1, r3
 801772e:	4610      	mov	r0, r2
 8017730:	f7f7 fdb4 	bl	800f29c <USBD_LL_SetupStage>
}
 8017734:	bf00      	nop
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	460b      	mov	r3, r1
 8017746:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801774e:	78fa      	ldrb	r2, [r7, #3]
 8017750:	6879      	ldr	r1, [r7, #4]
 8017752:	4613      	mov	r3, r2
 8017754:	00db      	lsls	r3, r3, #3
 8017756:	1a9b      	subs	r3, r3, r2
 8017758:	009b      	lsls	r3, r3, #2
 801775a:	440b      	add	r3, r1
 801775c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	78fb      	ldrb	r3, [r7, #3]
 8017764:	4619      	mov	r1, r3
 8017766:	f7f7 fdec 	bl	800f342 <USBD_LL_DataOutStage>
}
 801776a:	bf00      	nop
 801776c:	3708      	adds	r7, #8
 801776e:	46bd      	mov	sp, r7
 8017770:	bd80      	pop	{r7, pc}

08017772 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017772:	b580      	push	{r7, lr}
 8017774:	b082      	sub	sp, #8
 8017776:	af00      	add	r7, sp, #0
 8017778:	6078      	str	r0, [r7, #4]
 801777a:	460b      	mov	r3, r1
 801777c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8017784:	78fa      	ldrb	r2, [r7, #3]
 8017786:	6879      	ldr	r1, [r7, #4]
 8017788:	4613      	mov	r3, r2
 801778a:	00db      	lsls	r3, r3, #3
 801778c:	1a9b      	subs	r3, r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	440b      	add	r3, r1
 8017792:	3348      	adds	r3, #72	; 0x48
 8017794:	681a      	ldr	r2, [r3, #0]
 8017796:	78fb      	ldrb	r3, [r7, #3]
 8017798:	4619      	mov	r1, r3
 801779a:	f7f7 fe35 	bl	800f408 <USBD_LL_DataInStage>
}
 801779e:	bf00      	nop
 80177a0:	3708      	adds	r7, #8
 80177a2:	46bd      	mov	sp, r7
 80177a4:	bd80      	pop	{r7, pc}

080177a6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177a6:	b580      	push	{r7, lr}
 80177a8:	b082      	sub	sp, #8
 80177aa:	af00      	add	r7, sp, #0
 80177ac:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f7 ff39 	bl	800f62c <USBD_LL_SOF>
}
 80177ba:	bf00      	nop
 80177bc:	3708      	adds	r7, #8
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80177c2:	b580      	push	{r7, lr}
 80177c4:	b084      	sub	sp, #16
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80177ca:	2301      	movs	r3, #1
 80177cc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	68db      	ldr	r3, [r3, #12]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d102      	bne.n	80177dc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80177d6:	2300      	movs	r3, #0
 80177d8:	73fb      	strb	r3, [r7, #15]
 80177da:	e008      	b.n	80177ee <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d102      	bne.n	80177ea <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80177e4:	2301      	movs	r3, #1
 80177e6:	73fb      	strb	r3, [r7, #15]
 80177e8:	e001      	b.n	80177ee <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80177ea:	f7ec fdf7 	bl	80043dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80177f4:	7bfa      	ldrb	r2, [r7, #15]
 80177f6:	4611      	mov	r1, r2
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7f7 fedc 	bl	800f5b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017804:	4618      	mov	r0, r3
 8017806:	f7f7 fe95 	bl	800f534 <USBD_LL_Reset>
}
 801780a:	bf00      	nop
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}
	...

08017814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b082      	sub	sp, #8
 8017818:	af00      	add	r7, sp, #0
 801781a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017822:	4618      	mov	r0, r3
 8017824:	f7f7 fed7 	bl	800f5d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	687a      	ldr	r2, [r7, #4]
 8017834:	6812      	ldr	r2, [r2, #0]
 8017836:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801783a:	f043 0301 	orr.w	r3, r3, #1
 801783e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	6a1b      	ldr	r3, [r3, #32]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d005      	beq.n	8017854 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017848:	4b04      	ldr	r3, [pc, #16]	; (801785c <HAL_PCD_SuspendCallback+0x48>)
 801784a:	691b      	ldr	r3, [r3, #16]
 801784c:	4a03      	ldr	r2, [pc, #12]	; (801785c <HAL_PCD_SuspendCallback+0x48>)
 801784e:	f043 0306 	orr.w	r3, r3, #6
 8017852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017854:	bf00      	nop
 8017856:	3708      	adds	r7, #8
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}
 801785c:	e000ed00 	.word	0xe000ed00

08017860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801786e:	4618      	mov	r0, r3
 8017870:	f7f7 fec6 	bl	800f600 <USBD_LL_Resume>
}
 8017874:	bf00      	nop
 8017876:	3708      	adds	r7, #8
 8017878:	46bd      	mov	sp, r7
 801787a:	bd80      	pop	{r7, pc}

0801787c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801787c:	b580      	push	{r7, lr}
 801787e:	b082      	sub	sp, #8
 8017880:	af00      	add	r7, sp, #0
 8017882:	6078      	str	r0, [r7, #4]
 8017884:	460b      	mov	r3, r1
 8017886:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801788e:	78fa      	ldrb	r2, [r7, #3]
 8017890:	4611      	mov	r1, r2
 8017892:	4618      	mov	r0, r3
 8017894:	f7f7 fef1 	bl	800f67a <USBD_LL_IsoOUTIncomplete>
}
 8017898:	bf00      	nop
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	460b      	mov	r3, r1
 80178aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80178b2:	78fa      	ldrb	r2, [r7, #3]
 80178b4:	4611      	mov	r1, r2
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7f7 fed2 	bl	800f660 <USBD_LL_IsoINIncomplete>
}
 80178bc:	bf00      	nop
 80178be:	3708      	adds	r7, #8
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b082      	sub	sp, #8
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80178d2:	4618      	mov	r0, r3
 80178d4:	f7f7 fede 	bl	800f694 <USBD_LL_DevConnected>
}
 80178d8:	bf00      	nop
 80178da:	3708      	adds	r7, #8
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}

080178e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b082      	sub	sp, #8
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80178ee:	4618      	mov	r0, r3
 80178f0:	f7f7 fedb 	bl	800f6aa <USBD_LL_DevDisconnected>
}
 80178f4:	bf00      	nop
 80178f6:	3708      	adds	r7, #8
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b082      	sub	sp, #8
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	781b      	ldrb	r3, [r3, #0]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d13c      	bne.n	8017986 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801790c:	4a20      	ldr	r2, [pc, #128]	; (8017990 <USBD_LL_Init+0x94>)
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	4a1e      	ldr	r2, [pc, #120]	; (8017990 <USBD_LL_Init+0x94>)
 8017918:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801791c:	4b1c      	ldr	r3, [pc, #112]	; (8017990 <USBD_LL_Init+0x94>)
 801791e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017922:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017924:	4b1a      	ldr	r3, [pc, #104]	; (8017990 <USBD_LL_Init+0x94>)
 8017926:	2206      	movs	r2, #6
 8017928:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801792a:	4b19      	ldr	r3, [pc, #100]	; (8017990 <USBD_LL_Init+0x94>)
 801792c:	2202      	movs	r2, #2
 801792e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017930:	4b17      	ldr	r3, [pc, #92]	; (8017990 <USBD_LL_Init+0x94>)
 8017932:	2200      	movs	r2, #0
 8017934:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017936:	4b16      	ldr	r3, [pc, #88]	; (8017990 <USBD_LL_Init+0x94>)
 8017938:	2202      	movs	r2, #2
 801793a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801793c:	4b14      	ldr	r3, [pc, #80]	; (8017990 <USBD_LL_Init+0x94>)
 801793e:	2200      	movs	r2, #0
 8017940:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017942:	4b13      	ldr	r3, [pc, #76]	; (8017990 <USBD_LL_Init+0x94>)
 8017944:	2200      	movs	r2, #0
 8017946:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017948:	4b11      	ldr	r3, [pc, #68]	; (8017990 <USBD_LL_Init+0x94>)
 801794a:	2200      	movs	r2, #0
 801794c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801794e:	4b10      	ldr	r3, [pc, #64]	; (8017990 <USBD_LL_Init+0x94>)
 8017950:	2200      	movs	r2, #0
 8017952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017954:	4b0e      	ldr	r3, [pc, #56]	; (8017990 <USBD_LL_Init+0x94>)
 8017956:	2200      	movs	r2, #0
 8017958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801795a:	480d      	ldr	r0, [pc, #52]	; (8017990 <USBD_LL_Init+0x94>)
 801795c:	f7ee ff3f 	bl	80067de <HAL_PCD_Init>
 8017960:	4603      	mov	r3, r0
 8017962:	2b00      	cmp	r3, #0
 8017964:	d001      	beq.n	801796a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017966:	f7ec fd39 	bl	80043dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801796a:	2180      	movs	r1, #128	; 0x80
 801796c:	4808      	ldr	r0, [pc, #32]	; (8017990 <USBD_LL_Init+0x94>)
 801796e:	f7f0 f8c0 	bl	8007af2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017972:	2240      	movs	r2, #64	; 0x40
 8017974:	2100      	movs	r1, #0
 8017976:	4806      	ldr	r0, [pc, #24]	; (8017990 <USBD_LL_Init+0x94>)
 8017978:	f7f0 f874 	bl	8007a64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801797c:	2280      	movs	r2, #128	; 0x80
 801797e:	2101      	movs	r1, #1
 8017980:	4803      	ldr	r0, [pc, #12]	; (8017990 <USBD_LL_Init+0x94>)
 8017982:	f7f0 f86f 	bl	8007a64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017986:	2300      	movs	r3, #0
}
 8017988:	4618      	mov	r0, r3
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	20028b94 	.word	0x20028b94

08017994 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b084      	sub	sp, #16
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801799c:	2300      	movs	r3, #0
 801799e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179a0:	2300      	movs	r3, #0
 80179a2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80179aa:	4618      	mov	r0, r3
 80179ac:	f7ef f83b 	bl	8006a26 <HAL_PCD_Start>
 80179b0:	4603      	mov	r3, r0
 80179b2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80179b4:	7bfb      	ldrb	r3, [r7, #15]
 80179b6:	4618      	mov	r0, r3
 80179b8:	f000 f97e 	bl	8017cb8 <USBD_Get_USB_Status>
 80179bc:	4603      	mov	r3, r0
 80179be:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80179c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3710      	adds	r7, #16
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}

080179ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80179ca:	b580      	push	{r7, lr}
 80179cc:	b084      	sub	sp, #16
 80179ce:	af00      	add	r7, sp, #0
 80179d0:	6078      	str	r0, [r7, #4]
 80179d2:	4608      	mov	r0, r1
 80179d4:	4611      	mov	r1, r2
 80179d6:	461a      	mov	r2, r3
 80179d8:	4603      	mov	r3, r0
 80179da:	70fb      	strb	r3, [r7, #3]
 80179dc:	460b      	mov	r3, r1
 80179de:	70bb      	strb	r3, [r7, #2]
 80179e0:	4613      	mov	r3, r2
 80179e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179e4:	2300      	movs	r3, #0
 80179e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179e8:	2300      	movs	r3, #0
 80179ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179f2:	78bb      	ldrb	r3, [r7, #2]
 80179f4:	883a      	ldrh	r2, [r7, #0]
 80179f6:	78f9      	ldrb	r1, [r7, #3]
 80179f8:	f7ef fc3b 	bl	8007272 <HAL_PCD_EP_Open>
 80179fc:	4603      	mov	r3, r0
 80179fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a00:	7bfb      	ldrb	r3, [r7, #15]
 8017a02:	4618      	mov	r0, r3
 8017a04:	f000 f958 	bl	8017cb8 <USBD_Get_USB_Status>
 8017a08:	4603      	mov	r3, r0
 8017a0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017a0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	3710      	adds	r7, #16
 8017a12:	46bd      	mov	sp, r7
 8017a14:	bd80      	pop	{r7, pc}

08017a16 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a16:	b580      	push	{r7, lr}
 8017a18:	b084      	sub	sp, #16
 8017a1a:	af00      	add	r7, sp, #0
 8017a1c:	6078      	str	r0, [r7, #4]
 8017a1e:	460b      	mov	r3, r1
 8017a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a22:	2300      	movs	r3, #0
 8017a24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a26:	2300      	movs	r3, #0
 8017a28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a30:	78fa      	ldrb	r2, [r7, #3]
 8017a32:	4611      	mov	r1, r2
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7ef fc84 	bl	8007342 <HAL_PCD_EP_Close>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8017a3e:	7bfb      	ldrb	r3, [r7, #15]
 8017a40:	4618      	mov	r0, r3
 8017a42:	f000 f939 	bl	8017cb8 <USBD_Get_USB_Status>
 8017a46:	4603      	mov	r3, r0
 8017a48:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8017a4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}

08017a54 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]
 8017a5c:	460b      	mov	r3, r1
 8017a5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a60:	2300      	movs	r3, #0
 8017a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a64:	2300      	movs	r3, #0
 8017a66:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a6e:	78fa      	ldrb	r2, [r7, #3]
 8017a70:	4611      	mov	r1, r2
 8017a72:	4618      	mov	r0, r3
 8017a74:	f7ef fd5c 	bl	8007530 <HAL_PCD_EP_SetStall>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a7c:	7bfb      	ldrb	r3, [r7, #15]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f000 f91a 	bl	8017cb8 <USBD_Get_USB_Status>
 8017a84:	4603      	mov	r3, r0
 8017a86:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017a88:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	3710      	adds	r7, #16
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}

08017a92 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a92:	b580      	push	{r7, lr}
 8017a94:	b084      	sub	sp, #16
 8017a96:	af00      	add	r7, sp, #0
 8017a98:	6078      	str	r0, [r7, #4]
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017aac:	78fa      	ldrb	r2, [r7, #3]
 8017aae:	4611      	mov	r1, r2
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	f7ef fda1 	bl	80075f8 <HAL_PCD_EP_ClrStall>
 8017ab6:	4603      	mov	r3, r0
 8017ab8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8017aba:	7bfb      	ldrb	r3, [r7, #15]
 8017abc:	4618      	mov	r0, r3
 8017abe:	f000 f8fb 	bl	8017cb8 <USBD_Get_USB_Status>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8017ac6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3710      	adds	r7, #16
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ad0:	b480      	push	{r7}
 8017ad2:	b085      	sub	sp, #20
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	460b      	mov	r3, r1
 8017ada:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017ae2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	da0b      	bge.n	8017b04 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8017aec:	78fb      	ldrb	r3, [r7, #3]
 8017aee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017af2:	68f9      	ldr	r1, [r7, #12]
 8017af4:	4613      	mov	r3, r2
 8017af6:	00db      	lsls	r3, r3, #3
 8017af8:	1a9b      	subs	r3, r3, r2
 8017afa:	009b      	lsls	r3, r3, #2
 8017afc:	440b      	add	r3, r1
 8017afe:	333e      	adds	r3, #62	; 0x3e
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	e00b      	b.n	8017b1c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8017b04:	78fb      	ldrb	r3, [r7, #3]
 8017b06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017b0a:	68f9      	ldr	r1, [r7, #12]
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	00db      	lsls	r3, r3, #3
 8017b10:	1a9b      	subs	r3, r3, r2
 8017b12:	009b      	lsls	r3, r3, #2
 8017b14:	440b      	add	r3, r1
 8017b16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017b1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017b1c:	4618      	mov	r0, r3
 8017b1e:	3714      	adds	r7, #20
 8017b20:	46bd      	mov	sp, r7
 8017b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b26:	4770      	bx	lr

08017b28 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	460b      	mov	r3, r1
 8017b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b34:	2300      	movs	r3, #0
 8017b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b38:	2300      	movs	r3, #0
 8017b3a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b42:	78fa      	ldrb	r2, [r7, #3]
 8017b44:	4611      	mov	r1, r2
 8017b46:	4618      	mov	r0, r3
 8017b48:	f7ef fb6e 	bl	8007228 <HAL_PCD_SetAddress>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b50:	7bfb      	ldrb	r3, [r7, #15]
 8017b52:	4618      	mov	r0, r3
 8017b54:	f000 f8b0 	bl	8017cb8 <USBD_Get_USB_Status>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3710      	adds	r7, #16
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}

08017b66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b086      	sub	sp, #24
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	60f8      	str	r0, [r7, #12]
 8017b6e:	607a      	str	r2, [r7, #4]
 8017b70:	603b      	str	r3, [r7, #0]
 8017b72:	460b      	mov	r3, r1
 8017b74:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b76:	2300      	movs	r3, #0
 8017b78:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017b84:	7af9      	ldrb	r1, [r7, #11]
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	687a      	ldr	r2, [r7, #4]
 8017b8a:	f7ef fc87 	bl	800749c <HAL_PCD_EP_Transmit>
 8017b8e:	4603      	mov	r3, r0
 8017b90:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017b92:	7dfb      	ldrb	r3, [r7, #23]
 8017b94:	4618      	mov	r0, r3
 8017b96:	f000 f88f 	bl	8017cb8 <USBD_Get_USB_Status>
 8017b9a:	4603      	mov	r3, r0
 8017b9c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8017b9e:	7dbb      	ldrb	r3, [r7, #22]
}
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	3718      	adds	r7, #24
 8017ba4:	46bd      	mov	sp, r7
 8017ba6:	bd80      	pop	{r7, pc}

08017ba8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b086      	sub	sp, #24
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	607a      	str	r2, [r7, #4]
 8017bb2:	603b      	str	r3, [r7, #0]
 8017bb4:	460b      	mov	r3, r1
 8017bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017bb8:	2300      	movs	r3, #0
 8017bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017bc6:	7af9      	ldrb	r1, [r7, #11]
 8017bc8:	683b      	ldr	r3, [r7, #0]
 8017bca:	687a      	ldr	r2, [r7, #4]
 8017bcc:	f7ef fc03 	bl	80073d6 <HAL_PCD_EP_Receive>
 8017bd0:	4603      	mov	r3, r0
 8017bd2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017bd4:	7dfb      	ldrb	r3, [r7, #23]
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f000 f86e 	bl	8017cb8 <USBD_Get_USB_Status>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8017be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	3718      	adds	r7, #24
 8017be6:	46bd      	mov	sp, r7
 8017be8:	bd80      	pop	{r7, pc}

08017bea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bea:	b580      	push	{r7, lr}
 8017bec:	b082      	sub	sp, #8
 8017bee:	af00      	add	r7, sp, #0
 8017bf0:	6078      	str	r0, [r7, #4]
 8017bf2:	460b      	mov	r3, r1
 8017bf4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017bfc:	78fa      	ldrb	r2, [r7, #3]
 8017bfe:	4611      	mov	r1, r2
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7ef fc33 	bl	800746c <HAL_PCD_EP_GetRxCount>
 8017c06:	4603      	mov	r3, r0
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3708      	adds	r7, #8
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}

08017c10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
 8017c18:	460b      	mov	r3, r1
 8017c1a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017c1c:	78fb      	ldrb	r3, [r7, #3]
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d002      	beq.n	8017c28 <HAL_PCDEx_LPM_Callback+0x18>
 8017c22:	2b01      	cmp	r3, #1
 8017c24:	d01f      	beq.n	8017c66 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8017c26:	e03b      	b.n	8017ca0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	6a1b      	ldr	r3, [r3, #32]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d007      	beq.n	8017c40 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017c30:	f000 f83c 	bl	8017cac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c34:	4b1c      	ldr	r3, [pc, #112]	; (8017ca8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c36:	691b      	ldr	r3, [r3, #16]
 8017c38:	4a1b      	ldr	r2, [pc, #108]	; (8017ca8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c3a:	f023 0306 	bic.w	r3, r3, #6
 8017c3e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	6812      	ldr	r2, [r2, #0]
 8017c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c52:	f023 0301 	bic.w	r3, r3, #1
 8017c56:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017c5e:	4618      	mov	r0, r3
 8017c60:	f7f7 fcce 	bl	800f600 <USBD_LL_Resume>
    break;
 8017c64:	e01c      	b.n	8017ca0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	687a      	ldr	r2, [r7, #4]
 8017c72:	6812      	ldr	r2, [r2, #0]
 8017c74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c78:	f043 0301 	orr.w	r3, r3, #1
 8017c7c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7f7 fca6 	bl	800f5d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6a1b      	ldr	r3, [r3, #32]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d005      	beq.n	8017c9e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c92:	4b05      	ldr	r3, [pc, #20]	; (8017ca8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c94:	691b      	ldr	r3, [r3, #16]
 8017c96:	4a04      	ldr	r2, [pc, #16]	; (8017ca8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017c98:	f043 0306 	orr.w	r3, r3, #6
 8017c9c:	6113      	str	r3, [r2, #16]
    break;   
 8017c9e:	bf00      	nop
}
 8017ca0:	bf00      	nop
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	e000ed00 	.word	0xe000ed00

08017cac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017cb0:	f7ec f90a 	bl	8003ec8 <SystemClock_Config>
}
 8017cb4:	bf00      	nop
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b085      	sub	sp, #20
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017cc6:	79fb      	ldrb	r3, [r7, #7]
 8017cc8:	2b03      	cmp	r3, #3
 8017cca:	d817      	bhi.n	8017cfc <USBD_Get_USB_Status+0x44>
 8017ccc:	a201      	add	r2, pc, #4	; (adr r2, 8017cd4 <USBD_Get_USB_Status+0x1c>)
 8017cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cd2:	bf00      	nop
 8017cd4:	08017ce5 	.word	0x08017ce5
 8017cd8:	08017ceb 	.word	0x08017ceb
 8017cdc:	08017cf1 	.word	0x08017cf1
 8017ce0:	08017cf7 	.word	0x08017cf7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	73fb      	strb	r3, [r7, #15]
    break;
 8017ce8:	e00b      	b.n	8017d02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017cea:	2303      	movs	r3, #3
 8017cec:	73fb      	strb	r3, [r7, #15]
    break;
 8017cee:	e008      	b.n	8017d02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017cf0:	2301      	movs	r3, #1
 8017cf2:	73fb      	strb	r3, [r7, #15]
    break;
 8017cf4:	e005      	b.n	8017d02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017cf6:	2303      	movs	r3, #3
 8017cf8:	73fb      	strb	r3, [r7, #15]
    break;
 8017cfa:	e002      	b.n	8017d02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017cfc:	2303      	movs	r3, #3
 8017cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8017d00:	bf00      	nop
  }
  return usb_status;
 8017d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3714      	adds	r7, #20
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d0e:	4770      	bx	lr

08017d10 <__errno>:
 8017d10:	4b01      	ldr	r3, [pc, #4]	; (8017d18 <__errno+0x8>)
 8017d12:	6818      	ldr	r0, [r3, #0]
 8017d14:	4770      	bx	lr
 8017d16:	bf00      	nop
 8017d18:	20000194 	.word	0x20000194

08017d1c <__libc_init_array>:
 8017d1c:	b570      	push	{r4, r5, r6, lr}
 8017d1e:	4e0d      	ldr	r6, [pc, #52]	; (8017d54 <__libc_init_array+0x38>)
 8017d20:	4c0d      	ldr	r4, [pc, #52]	; (8017d58 <__libc_init_array+0x3c>)
 8017d22:	1ba4      	subs	r4, r4, r6
 8017d24:	10a4      	asrs	r4, r4, #2
 8017d26:	2500      	movs	r5, #0
 8017d28:	42a5      	cmp	r5, r4
 8017d2a:	d109      	bne.n	8017d40 <__libc_init_array+0x24>
 8017d2c:	4e0b      	ldr	r6, [pc, #44]	; (8017d5c <__libc_init_array+0x40>)
 8017d2e:	4c0c      	ldr	r4, [pc, #48]	; (8017d60 <__libc_init_array+0x44>)
 8017d30:	f002 faa2 	bl	801a278 <_init>
 8017d34:	1ba4      	subs	r4, r4, r6
 8017d36:	10a4      	asrs	r4, r4, #2
 8017d38:	2500      	movs	r5, #0
 8017d3a:	42a5      	cmp	r5, r4
 8017d3c:	d105      	bne.n	8017d4a <__libc_init_array+0x2e>
 8017d3e:	bd70      	pop	{r4, r5, r6, pc}
 8017d40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d44:	4798      	blx	r3
 8017d46:	3501      	adds	r5, #1
 8017d48:	e7ee      	b.n	8017d28 <__libc_init_array+0xc>
 8017d4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017d4e:	4798      	blx	r3
 8017d50:	3501      	adds	r5, #1
 8017d52:	e7f2      	b.n	8017d3a <__libc_init_array+0x1e>
 8017d54:	0801af28 	.word	0x0801af28
 8017d58:	0801af28 	.word	0x0801af28
 8017d5c:	0801af28 	.word	0x0801af28
 8017d60:	0801af2c 	.word	0x0801af2c

08017d64 <malloc>:
 8017d64:	4b02      	ldr	r3, [pc, #8]	; (8017d70 <malloc+0xc>)
 8017d66:	4601      	mov	r1, r0
 8017d68:	6818      	ldr	r0, [r3, #0]
 8017d6a:	f000 b86d 	b.w	8017e48 <_malloc_r>
 8017d6e:	bf00      	nop
 8017d70:	20000194 	.word	0x20000194

08017d74 <free>:
 8017d74:	4b02      	ldr	r3, [pc, #8]	; (8017d80 <free+0xc>)
 8017d76:	4601      	mov	r1, r0
 8017d78:	6818      	ldr	r0, [r3, #0]
 8017d7a:	f000 b817 	b.w	8017dac <_free_r>
 8017d7e:	bf00      	nop
 8017d80:	20000194 	.word	0x20000194

08017d84 <memcpy>:
 8017d84:	b510      	push	{r4, lr}
 8017d86:	1e43      	subs	r3, r0, #1
 8017d88:	440a      	add	r2, r1
 8017d8a:	4291      	cmp	r1, r2
 8017d8c:	d100      	bne.n	8017d90 <memcpy+0xc>
 8017d8e:	bd10      	pop	{r4, pc}
 8017d90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d98:	e7f7      	b.n	8017d8a <memcpy+0x6>

08017d9a <memset>:
 8017d9a:	4402      	add	r2, r0
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	4293      	cmp	r3, r2
 8017da0:	d100      	bne.n	8017da4 <memset+0xa>
 8017da2:	4770      	bx	lr
 8017da4:	f803 1b01 	strb.w	r1, [r3], #1
 8017da8:	e7f9      	b.n	8017d9e <memset+0x4>
	...

08017dac <_free_r>:
 8017dac:	b538      	push	{r3, r4, r5, lr}
 8017dae:	4605      	mov	r5, r0
 8017db0:	2900      	cmp	r1, #0
 8017db2:	d045      	beq.n	8017e40 <_free_r+0x94>
 8017db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017db8:	1f0c      	subs	r4, r1, #4
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	bfb8      	it	lt
 8017dbe:	18e4      	addlt	r4, r4, r3
 8017dc0:	f000 f8e0 	bl	8017f84 <__malloc_lock>
 8017dc4:	4a1f      	ldr	r2, [pc, #124]	; (8017e44 <_free_r+0x98>)
 8017dc6:	6813      	ldr	r3, [r2, #0]
 8017dc8:	4610      	mov	r0, r2
 8017dca:	b933      	cbnz	r3, 8017dda <_free_r+0x2e>
 8017dcc:	6063      	str	r3, [r4, #4]
 8017dce:	6014      	str	r4, [r2, #0]
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dd6:	f000 b8d6 	b.w	8017f86 <__malloc_unlock>
 8017dda:	42a3      	cmp	r3, r4
 8017ddc:	d90c      	bls.n	8017df8 <_free_r+0x4c>
 8017dde:	6821      	ldr	r1, [r4, #0]
 8017de0:	1862      	adds	r2, r4, r1
 8017de2:	4293      	cmp	r3, r2
 8017de4:	bf04      	itt	eq
 8017de6:	681a      	ldreq	r2, [r3, #0]
 8017de8:	685b      	ldreq	r3, [r3, #4]
 8017dea:	6063      	str	r3, [r4, #4]
 8017dec:	bf04      	itt	eq
 8017dee:	1852      	addeq	r2, r2, r1
 8017df0:	6022      	streq	r2, [r4, #0]
 8017df2:	6004      	str	r4, [r0, #0]
 8017df4:	e7ec      	b.n	8017dd0 <_free_r+0x24>
 8017df6:	4613      	mov	r3, r2
 8017df8:	685a      	ldr	r2, [r3, #4]
 8017dfa:	b10a      	cbz	r2, 8017e00 <_free_r+0x54>
 8017dfc:	42a2      	cmp	r2, r4
 8017dfe:	d9fa      	bls.n	8017df6 <_free_r+0x4a>
 8017e00:	6819      	ldr	r1, [r3, #0]
 8017e02:	1858      	adds	r0, r3, r1
 8017e04:	42a0      	cmp	r0, r4
 8017e06:	d10b      	bne.n	8017e20 <_free_r+0x74>
 8017e08:	6820      	ldr	r0, [r4, #0]
 8017e0a:	4401      	add	r1, r0
 8017e0c:	1858      	adds	r0, r3, r1
 8017e0e:	4282      	cmp	r2, r0
 8017e10:	6019      	str	r1, [r3, #0]
 8017e12:	d1dd      	bne.n	8017dd0 <_free_r+0x24>
 8017e14:	6810      	ldr	r0, [r2, #0]
 8017e16:	6852      	ldr	r2, [r2, #4]
 8017e18:	605a      	str	r2, [r3, #4]
 8017e1a:	4401      	add	r1, r0
 8017e1c:	6019      	str	r1, [r3, #0]
 8017e1e:	e7d7      	b.n	8017dd0 <_free_r+0x24>
 8017e20:	d902      	bls.n	8017e28 <_free_r+0x7c>
 8017e22:	230c      	movs	r3, #12
 8017e24:	602b      	str	r3, [r5, #0]
 8017e26:	e7d3      	b.n	8017dd0 <_free_r+0x24>
 8017e28:	6820      	ldr	r0, [r4, #0]
 8017e2a:	1821      	adds	r1, r4, r0
 8017e2c:	428a      	cmp	r2, r1
 8017e2e:	bf04      	itt	eq
 8017e30:	6811      	ldreq	r1, [r2, #0]
 8017e32:	6852      	ldreq	r2, [r2, #4]
 8017e34:	6062      	str	r2, [r4, #4]
 8017e36:	bf04      	itt	eq
 8017e38:	1809      	addeq	r1, r1, r0
 8017e3a:	6021      	streq	r1, [r4, #0]
 8017e3c:	605c      	str	r4, [r3, #4]
 8017e3e:	e7c7      	b.n	8017dd0 <_free_r+0x24>
 8017e40:	bd38      	pop	{r3, r4, r5, pc}
 8017e42:	bf00      	nop
 8017e44:	20008974 	.word	0x20008974

08017e48 <_malloc_r>:
 8017e48:	b570      	push	{r4, r5, r6, lr}
 8017e4a:	1ccd      	adds	r5, r1, #3
 8017e4c:	f025 0503 	bic.w	r5, r5, #3
 8017e50:	3508      	adds	r5, #8
 8017e52:	2d0c      	cmp	r5, #12
 8017e54:	bf38      	it	cc
 8017e56:	250c      	movcc	r5, #12
 8017e58:	2d00      	cmp	r5, #0
 8017e5a:	4606      	mov	r6, r0
 8017e5c:	db01      	blt.n	8017e62 <_malloc_r+0x1a>
 8017e5e:	42a9      	cmp	r1, r5
 8017e60:	d903      	bls.n	8017e6a <_malloc_r+0x22>
 8017e62:	230c      	movs	r3, #12
 8017e64:	6033      	str	r3, [r6, #0]
 8017e66:	2000      	movs	r0, #0
 8017e68:	bd70      	pop	{r4, r5, r6, pc}
 8017e6a:	f000 f88b 	bl	8017f84 <__malloc_lock>
 8017e6e:	4a21      	ldr	r2, [pc, #132]	; (8017ef4 <_malloc_r+0xac>)
 8017e70:	6814      	ldr	r4, [r2, #0]
 8017e72:	4621      	mov	r1, r4
 8017e74:	b991      	cbnz	r1, 8017e9c <_malloc_r+0x54>
 8017e76:	4c20      	ldr	r4, [pc, #128]	; (8017ef8 <_malloc_r+0xb0>)
 8017e78:	6823      	ldr	r3, [r4, #0]
 8017e7a:	b91b      	cbnz	r3, 8017e84 <_malloc_r+0x3c>
 8017e7c:	4630      	mov	r0, r6
 8017e7e:	f000 f83d 	bl	8017efc <_sbrk_r>
 8017e82:	6020      	str	r0, [r4, #0]
 8017e84:	4629      	mov	r1, r5
 8017e86:	4630      	mov	r0, r6
 8017e88:	f000 f838 	bl	8017efc <_sbrk_r>
 8017e8c:	1c43      	adds	r3, r0, #1
 8017e8e:	d124      	bne.n	8017eda <_malloc_r+0x92>
 8017e90:	230c      	movs	r3, #12
 8017e92:	6033      	str	r3, [r6, #0]
 8017e94:	4630      	mov	r0, r6
 8017e96:	f000 f876 	bl	8017f86 <__malloc_unlock>
 8017e9a:	e7e4      	b.n	8017e66 <_malloc_r+0x1e>
 8017e9c:	680b      	ldr	r3, [r1, #0]
 8017e9e:	1b5b      	subs	r3, r3, r5
 8017ea0:	d418      	bmi.n	8017ed4 <_malloc_r+0x8c>
 8017ea2:	2b0b      	cmp	r3, #11
 8017ea4:	d90f      	bls.n	8017ec6 <_malloc_r+0x7e>
 8017ea6:	600b      	str	r3, [r1, #0]
 8017ea8:	50cd      	str	r5, [r1, r3]
 8017eaa:	18cc      	adds	r4, r1, r3
 8017eac:	4630      	mov	r0, r6
 8017eae:	f000 f86a 	bl	8017f86 <__malloc_unlock>
 8017eb2:	f104 000b 	add.w	r0, r4, #11
 8017eb6:	1d23      	adds	r3, r4, #4
 8017eb8:	f020 0007 	bic.w	r0, r0, #7
 8017ebc:	1ac3      	subs	r3, r0, r3
 8017ebe:	d0d3      	beq.n	8017e68 <_malloc_r+0x20>
 8017ec0:	425a      	negs	r2, r3
 8017ec2:	50e2      	str	r2, [r4, r3]
 8017ec4:	e7d0      	b.n	8017e68 <_malloc_r+0x20>
 8017ec6:	428c      	cmp	r4, r1
 8017ec8:	684b      	ldr	r3, [r1, #4]
 8017eca:	bf16      	itet	ne
 8017ecc:	6063      	strne	r3, [r4, #4]
 8017ece:	6013      	streq	r3, [r2, #0]
 8017ed0:	460c      	movne	r4, r1
 8017ed2:	e7eb      	b.n	8017eac <_malloc_r+0x64>
 8017ed4:	460c      	mov	r4, r1
 8017ed6:	6849      	ldr	r1, [r1, #4]
 8017ed8:	e7cc      	b.n	8017e74 <_malloc_r+0x2c>
 8017eda:	1cc4      	adds	r4, r0, #3
 8017edc:	f024 0403 	bic.w	r4, r4, #3
 8017ee0:	42a0      	cmp	r0, r4
 8017ee2:	d005      	beq.n	8017ef0 <_malloc_r+0xa8>
 8017ee4:	1a21      	subs	r1, r4, r0
 8017ee6:	4630      	mov	r0, r6
 8017ee8:	f000 f808 	bl	8017efc <_sbrk_r>
 8017eec:	3001      	adds	r0, #1
 8017eee:	d0cf      	beq.n	8017e90 <_malloc_r+0x48>
 8017ef0:	6025      	str	r5, [r4, #0]
 8017ef2:	e7db      	b.n	8017eac <_malloc_r+0x64>
 8017ef4:	20008974 	.word	0x20008974
 8017ef8:	20008978 	.word	0x20008978

08017efc <_sbrk_r>:
 8017efc:	b538      	push	{r3, r4, r5, lr}
 8017efe:	4c06      	ldr	r4, [pc, #24]	; (8017f18 <_sbrk_r+0x1c>)
 8017f00:	2300      	movs	r3, #0
 8017f02:	4605      	mov	r5, r0
 8017f04:	4608      	mov	r0, r1
 8017f06:	6023      	str	r3, [r4, #0]
 8017f08:	f7ec fe08 	bl	8004b1c <_sbrk>
 8017f0c:	1c43      	adds	r3, r0, #1
 8017f0e:	d102      	bne.n	8017f16 <_sbrk_r+0x1a>
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	b103      	cbz	r3, 8017f16 <_sbrk_r+0x1a>
 8017f14:	602b      	str	r3, [r5, #0]
 8017f16:	bd38      	pop	{r3, r4, r5, pc}
 8017f18:	20028f98 	.word	0x20028f98

08017f1c <sniprintf>:
 8017f1c:	b40c      	push	{r2, r3}
 8017f1e:	b530      	push	{r4, r5, lr}
 8017f20:	4b17      	ldr	r3, [pc, #92]	; (8017f80 <sniprintf+0x64>)
 8017f22:	1e0c      	subs	r4, r1, #0
 8017f24:	b09d      	sub	sp, #116	; 0x74
 8017f26:	681d      	ldr	r5, [r3, #0]
 8017f28:	da08      	bge.n	8017f3c <sniprintf+0x20>
 8017f2a:	238b      	movs	r3, #139	; 0x8b
 8017f2c:	602b      	str	r3, [r5, #0]
 8017f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8017f32:	b01d      	add	sp, #116	; 0x74
 8017f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f38:	b002      	add	sp, #8
 8017f3a:	4770      	bx	lr
 8017f3c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017f40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f44:	bf14      	ite	ne
 8017f46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017f4a:	4623      	moveq	r3, r4
 8017f4c:	9304      	str	r3, [sp, #16]
 8017f4e:	9307      	str	r3, [sp, #28]
 8017f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017f54:	9002      	str	r0, [sp, #8]
 8017f56:	9006      	str	r0, [sp, #24]
 8017f58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017f5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017f5e:	ab21      	add	r3, sp, #132	; 0x84
 8017f60:	a902      	add	r1, sp, #8
 8017f62:	4628      	mov	r0, r5
 8017f64:	9301      	str	r3, [sp, #4]
 8017f66:	f000 f869 	bl	801803c <_svfiprintf_r>
 8017f6a:	1c43      	adds	r3, r0, #1
 8017f6c:	bfbc      	itt	lt
 8017f6e:	238b      	movlt	r3, #139	; 0x8b
 8017f70:	602b      	strlt	r3, [r5, #0]
 8017f72:	2c00      	cmp	r4, #0
 8017f74:	d0dd      	beq.n	8017f32 <sniprintf+0x16>
 8017f76:	9b02      	ldr	r3, [sp, #8]
 8017f78:	2200      	movs	r2, #0
 8017f7a:	701a      	strb	r2, [r3, #0]
 8017f7c:	e7d9      	b.n	8017f32 <sniprintf+0x16>
 8017f7e:	bf00      	nop
 8017f80:	20000194 	.word	0x20000194

08017f84 <__malloc_lock>:
 8017f84:	4770      	bx	lr

08017f86 <__malloc_unlock>:
 8017f86:	4770      	bx	lr

08017f88 <__ssputs_r>:
 8017f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f8c:	688e      	ldr	r6, [r1, #8]
 8017f8e:	429e      	cmp	r6, r3
 8017f90:	4682      	mov	sl, r0
 8017f92:	460c      	mov	r4, r1
 8017f94:	4690      	mov	r8, r2
 8017f96:	4699      	mov	r9, r3
 8017f98:	d837      	bhi.n	801800a <__ssputs_r+0x82>
 8017f9a:	898a      	ldrh	r2, [r1, #12]
 8017f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fa0:	d031      	beq.n	8018006 <__ssputs_r+0x7e>
 8017fa2:	6825      	ldr	r5, [r4, #0]
 8017fa4:	6909      	ldr	r1, [r1, #16]
 8017fa6:	1a6f      	subs	r7, r5, r1
 8017fa8:	6965      	ldr	r5, [r4, #20]
 8017faa:	2302      	movs	r3, #2
 8017fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017fb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8017fb4:	f109 0301 	add.w	r3, r9, #1
 8017fb8:	443b      	add	r3, r7
 8017fba:	429d      	cmp	r5, r3
 8017fbc:	bf38      	it	cc
 8017fbe:	461d      	movcc	r5, r3
 8017fc0:	0553      	lsls	r3, r2, #21
 8017fc2:	d530      	bpl.n	8018026 <__ssputs_r+0x9e>
 8017fc4:	4629      	mov	r1, r5
 8017fc6:	f7ff ff3f 	bl	8017e48 <_malloc_r>
 8017fca:	4606      	mov	r6, r0
 8017fcc:	b950      	cbnz	r0, 8017fe4 <__ssputs_r+0x5c>
 8017fce:	230c      	movs	r3, #12
 8017fd0:	f8ca 3000 	str.w	r3, [sl]
 8017fd4:	89a3      	ldrh	r3, [r4, #12]
 8017fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fda:	81a3      	strh	r3, [r4, #12]
 8017fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fe4:	463a      	mov	r2, r7
 8017fe6:	6921      	ldr	r1, [r4, #16]
 8017fe8:	f7ff fecc 	bl	8017d84 <memcpy>
 8017fec:	89a3      	ldrh	r3, [r4, #12]
 8017fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ff6:	81a3      	strh	r3, [r4, #12]
 8017ff8:	6126      	str	r6, [r4, #16]
 8017ffa:	6165      	str	r5, [r4, #20]
 8017ffc:	443e      	add	r6, r7
 8017ffe:	1bed      	subs	r5, r5, r7
 8018000:	6026      	str	r6, [r4, #0]
 8018002:	60a5      	str	r5, [r4, #8]
 8018004:	464e      	mov	r6, r9
 8018006:	454e      	cmp	r6, r9
 8018008:	d900      	bls.n	801800c <__ssputs_r+0x84>
 801800a:	464e      	mov	r6, r9
 801800c:	4632      	mov	r2, r6
 801800e:	4641      	mov	r1, r8
 8018010:	6820      	ldr	r0, [r4, #0]
 8018012:	f000 fa93 	bl	801853c <memmove>
 8018016:	68a3      	ldr	r3, [r4, #8]
 8018018:	1b9b      	subs	r3, r3, r6
 801801a:	60a3      	str	r3, [r4, #8]
 801801c:	6823      	ldr	r3, [r4, #0]
 801801e:	441e      	add	r6, r3
 8018020:	6026      	str	r6, [r4, #0]
 8018022:	2000      	movs	r0, #0
 8018024:	e7dc      	b.n	8017fe0 <__ssputs_r+0x58>
 8018026:	462a      	mov	r2, r5
 8018028:	f000 faa1 	bl	801856e <_realloc_r>
 801802c:	4606      	mov	r6, r0
 801802e:	2800      	cmp	r0, #0
 8018030:	d1e2      	bne.n	8017ff8 <__ssputs_r+0x70>
 8018032:	6921      	ldr	r1, [r4, #16]
 8018034:	4650      	mov	r0, sl
 8018036:	f7ff feb9 	bl	8017dac <_free_r>
 801803a:	e7c8      	b.n	8017fce <__ssputs_r+0x46>

0801803c <_svfiprintf_r>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	461d      	mov	r5, r3
 8018042:	898b      	ldrh	r3, [r1, #12]
 8018044:	061f      	lsls	r7, r3, #24
 8018046:	b09d      	sub	sp, #116	; 0x74
 8018048:	4680      	mov	r8, r0
 801804a:	460c      	mov	r4, r1
 801804c:	4616      	mov	r6, r2
 801804e:	d50f      	bpl.n	8018070 <_svfiprintf_r+0x34>
 8018050:	690b      	ldr	r3, [r1, #16]
 8018052:	b96b      	cbnz	r3, 8018070 <_svfiprintf_r+0x34>
 8018054:	2140      	movs	r1, #64	; 0x40
 8018056:	f7ff fef7 	bl	8017e48 <_malloc_r>
 801805a:	6020      	str	r0, [r4, #0]
 801805c:	6120      	str	r0, [r4, #16]
 801805e:	b928      	cbnz	r0, 801806c <_svfiprintf_r+0x30>
 8018060:	230c      	movs	r3, #12
 8018062:	f8c8 3000 	str.w	r3, [r8]
 8018066:	f04f 30ff 	mov.w	r0, #4294967295
 801806a:	e0c8      	b.n	80181fe <_svfiprintf_r+0x1c2>
 801806c:	2340      	movs	r3, #64	; 0x40
 801806e:	6163      	str	r3, [r4, #20]
 8018070:	2300      	movs	r3, #0
 8018072:	9309      	str	r3, [sp, #36]	; 0x24
 8018074:	2320      	movs	r3, #32
 8018076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801807a:	2330      	movs	r3, #48	; 0x30
 801807c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018080:	9503      	str	r5, [sp, #12]
 8018082:	f04f 0b01 	mov.w	fp, #1
 8018086:	4637      	mov	r7, r6
 8018088:	463d      	mov	r5, r7
 801808a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801808e:	b10b      	cbz	r3, 8018094 <_svfiprintf_r+0x58>
 8018090:	2b25      	cmp	r3, #37	; 0x25
 8018092:	d13e      	bne.n	8018112 <_svfiprintf_r+0xd6>
 8018094:	ebb7 0a06 	subs.w	sl, r7, r6
 8018098:	d00b      	beq.n	80180b2 <_svfiprintf_r+0x76>
 801809a:	4653      	mov	r3, sl
 801809c:	4632      	mov	r2, r6
 801809e:	4621      	mov	r1, r4
 80180a0:	4640      	mov	r0, r8
 80180a2:	f7ff ff71 	bl	8017f88 <__ssputs_r>
 80180a6:	3001      	adds	r0, #1
 80180a8:	f000 80a4 	beq.w	80181f4 <_svfiprintf_r+0x1b8>
 80180ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ae:	4453      	add	r3, sl
 80180b0:	9309      	str	r3, [sp, #36]	; 0x24
 80180b2:	783b      	ldrb	r3, [r7, #0]
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	f000 809d 	beq.w	80181f4 <_svfiprintf_r+0x1b8>
 80180ba:	2300      	movs	r3, #0
 80180bc:	f04f 32ff 	mov.w	r2, #4294967295
 80180c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80180c4:	9304      	str	r3, [sp, #16]
 80180c6:	9307      	str	r3, [sp, #28]
 80180c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80180cc:	931a      	str	r3, [sp, #104]	; 0x68
 80180ce:	462f      	mov	r7, r5
 80180d0:	2205      	movs	r2, #5
 80180d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80180d6:	4850      	ldr	r0, [pc, #320]	; (8018218 <_svfiprintf_r+0x1dc>)
 80180d8:	f7e8 f8a2 	bl	8000220 <memchr>
 80180dc:	9b04      	ldr	r3, [sp, #16]
 80180de:	b9d0      	cbnz	r0, 8018116 <_svfiprintf_r+0xda>
 80180e0:	06d9      	lsls	r1, r3, #27
 80180e2:	bf44      	itt	mi
 80180e4:	2220      	movmi	r2, #32
 80180e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180ea:	071a      	lsls	r2, r3, #28
 80180ec:	bf44      	itt	mi
 80180ee:	222b      	movmi	r2, #43	; 0x2b
 80180f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80180f4:	782a      	ldrb	r2, [r5, #0]
 80180f6:	2a2a      	cmp	r2, #42	; 0x2a
 80180f8:	d015      	beq.n	8018126 <_svfiprintf_r+0xea>
 80180fa:	9a07      	ldr	r2, [sp, #28]
 80180fc:	462f      	mov	r7, r5
 80180fe:	2000      	movs	r0, #0
 8018100:	250a      	movs	r5, #10
 8018102:	4639      	mov	r1, r7
 8018104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018108:	3b30      	subs	r3, #48	; 0x30
 801810a:	2b09      	cmp	r3, #9
 801810c:	d94d      	bls.n	80181aa <_svfiprintf_r+0x16e>
 801810e:	b1b8      	cbz	r0, 8018140 <_svfiprintf_r+0x104>
 8018110:	e00f      	b.n	8018132 <_svfiprintf_r+0xf6>
 8018112:	462f      	mov	r7, r5
 8018114:	e7b8      	b.n	8018088 <_svfiprintf_r+0x4c>
 8018116:	4a40      	ldr	r2, [pc, #256]	; (8018218 <_svfiprintf_r+0x1dc>)
 8018118:	1a80      	subs	r0, r0, r2
 801811a:	fa0b f000 	lsl.w	r0, fp, r0
 801811e:	4318      	orrs	r0, r3
 8018120:	9004      	str	r0, [sp, #16]
 8018122:	463d      	mov	r5, r7
 8018124:	e7d3      	b.n	80180ce <_svfiprintf_r+0x92>
 8018126:	9a03      	ldr	r2, [sp, #12]
 8018128:	1d11      	adds	r1, r2, #4
 801812a:	6812      	ldr	r2, [r2, #0]
 801812c:	9103      	str	r1, [sp, #12]
 801812e:	2a00      	cmp	r2, #0
 8018130:	db01      	blt.n	8018136 <_svfiprintf_r+0xfa>
 8018132:	9207      	str	r2, [sp, #28]
 8018134:	e004      	b.n	8018140 <_svfiprintf_r+0x104>
 8018136:	4252      	negs	r2, r2
 8018138:	f043 0302 	orr.w	r3, r3, #2
 801813c:	9207      	str	r2, [sp, #28]
 801813e:	9304      	str	r3, [sp, #16]
 8018140:	783b      	ldrb	r3, [r7, #0]
 8018142:	2b2e      	cmp	r3, #46	; 0x2e
 8018144:	d10c      	bne.n	8018160 <_svfiprintf_r+0x124>
 8018146:	787b      	ldrb	r3, [r7, #1]
 8018148:	2b2a      	cmp	r3, #42	; 0x2a
 801814a:	d133      	bne.n	80181b4 <_svfiprintf_r+0x178>
 801814c:	9b03      	ldr	r3, [sp, #12]
 801814e:	1d1a      	adds	r2, r3, #4
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	9203      	str	r2, [sp, #12]
 8018154:	2b00      	cmp	r3, #0
 8018156:	bfb8      	it	lt
 8018158:	f04f 33ff 	movlt.w	r3, #4294967295
 801815c:	3702      	adds	r7, #2
 801815e:	9305      	str	r3, [sp, #20]
 8018160:	4d2e      	ldr	r5, [pc, #184]	; (801821c <_svfiprintf_r+0x1e0>)
 8018162:	7839      	ldrb	r1, [r7, #0]
 8018164:	2203      	movs	r2, #3
 8018166:	4628      	mov	r0, r5
 8018168:	f7e8 f85a 	bl	8000220 <memchr>
 801816c:	b138      	cbz	r0, 801817e <_svfiprintf_r+0x142>
 801816e:	2340      	movs	r3, #64	; 0x40
 8018170:	1b40      	subs	r0, r0, r5
 8018172:	fa03 f000 	lsl.w	r0, r3, r0
 8018176:	9b04      	ldr	r3, [sp, #16]
 8018178:	4303      	orrs	r3, r0
 801817a:	3701      	adds	r7, #1
 801817c:	9304      	str	r3, [sp, #16]
 801817e:	7839      	ldrb	r1, [r7, #0]
 8018180:	4827      	ldr	r0, [pc, #156]	; (8018220 <_svfiprintf_r+0x1e4>)
 8018182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018186:	2206      	movs	r2, #6
 8018188:	1c7e      	adds	r6, r7, #1
 801818a:	f7e8 f849 	bl	8000220 <memchr>
 801818e:	2800      	cmp	r0, #0
 8018190:	d038      	beq.n	8018204 <_svfiprintf_r+0x1c8>
 8018192:	4b24      	ldr	r3, [pc, #144]	; (8018224 <_svfiprintf_r+0x1e8>)
 8018194:	bb13      	cbnz	r3, 80181dc <_svfiprintf_r+0x1a0>
 8018196:	9b03      	ldr	r3, [sp, #12]
 8018198:	3307      	adds	r3, #7
 801819a:	f023 0307 	bic.w	r3, r3, #7
 801819e:	3308      	adds	r3, #8
 80181a0:	9303      	str	r3, [sp, #12]
 80181a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181a4:	444b      	add	r3, r9
 80181a6:	9309      	str	r3, [sp, #36]	; 0x24
 80181a8:	e76d      	b.n	8018086 <_svfiprintf_r+0x4a>
 80181aa:	fb05 3202 	mla	r2, r5, r2, r3
 80181ae:	2001      	movs	r0, #1
 80181b0:	460f      	mov	r7, r1
 80181b2:	e7a6      	b.n	8018102 <_svfiprintf_r+0xc6>
 80181b4:	2300      	movs	r3, #0
 80181b6:	3701      	adds	r7, #1
 80181b8:	9305      	str	r3, [sp, #20]
 80181ba:	4619      	mov	r1, r3
 80181bc:	250a      	movs	r5, #10
 80181be:	4638      	mov	r0, r7
 80181c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80181c4:	3a30      	subs	r2, #48	; 0x30
 80181c6:	2a09      	cmp	r2, #9
 80181c8:	d903      	bls.n	80181d2 <_svfiprintf_r+0x196>
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d0c8      	beq.n	8018160 <_svfiprintf_r+0x124>
 80181ce:	9105      	str	r1, [sp, #20]
 80181d0:	e7c6      	b.n	8018160 <_svfiprintf_r+0x124>
 80181d2:	fb05 2101 	mla	r1, r5, r1, r2
 80181d6:	2301      	movs	r3, #1
 80181d8:	4607      	mov	r7, r0
 80181da:	e7f0      	b.n	80181be <_svfiprintf_r+0x182>
 80181dc:	ab03      	add	r3, sp, #12
 80181de:	9300      	str	r3, [sp, #0]
 80181e0:	4622      	mov	r2, r4
 80181e2:	4b11      	ldr	r3, [pc, #68]	; (8018228 <_svfiprintf_r+0x1ec>)
 80181e4:	a904      	add	r1, sp, #16
 80181e6:	4640      	mov	r0, r8
 80181e8:	f3af 8000 	nop.w
 80181ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80181f0:	4681      	mov	r9, r0
 80181f2:	d1d6      	bne.n	80181a2 <_svfiprintf_r+0x166>
 80181f4:	89a3      	ldrh	r3, [r4, #12]
 80181f6:	065b      	lsls	r3, r3, #25
 80181f8:	f53f af35 	bmi.w	8018066 <_svfiprintf_r+0x2a>
 80181fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181fe:	b01d      	add	sp, #116	; 0x74
 8018200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018204:	ab03      	add	r3, sp, #12
 8018206:	9300      	str	r3, [sp, #0]
 8018208:	4622      	mov	r2, r4
 801820a:	4b07      	ldr	r3, [pc, #28]	; (8018228 <_svfiprintf_r+0x1ec>)
 801820c:	a904      	add	r1, sp, #16
 801820e:	4640      	mov	r0, r8
 8018210:	f000 f882 	bl	8018318 <_printf_i>
 8018214:	e7ea      	b.n	80181ec <_svfiprintf_r+0x1b0>
 8018216:	bf00      	nop
 8018218:	0801ae18 	.word	0x0801ae18
 801821c:	0801ae1e 	.word	0x0801ae1e
 8018220:	0801ae22 	.word	0x0801ae22
 8018224:	00000000 	.word	0x00000000
 8018228:	08017f89 	.word	0x08017f89

0801822c <_printf_common>:
 801822c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018230:	4691      	mov	r9, r2
 8018232:	461f      	mov	r7, r3
 8018234:	688a      	ldr	r2, [r1, #8]
 8018236:	690b      	ldr	r3, [r1, #16]
 8018238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801823c:	4293      	cmp	r3, r2
 801823e:	bfb8      	it	lt
 8018240:	4613      	movlt	r3, r2
 8018242:	f8c9 3000 	str.w	r3, [r9]
 8018246:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801824a:	4606      	mov	r6, r0
 801824c:	460c      	mov	r4, r1
 801824e:	b112      	cbz	r2, 8018256 <_printf_common+0x2a>
 8018250:	3301      	adds	r3, #1
 8018252:	f8c9 3000 	str.w	r3, [r9]
 8018256:	6823      	ldr	r3, [r4, #0]
 8018258:	0699      	lsls	r1, r3, #26
 801825a:	bf42      	ittt	mi
 801825c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018260:	3302      	addmi	r3, #2
 8018262:	f8c9 3000 	strmi.w	r3, [r9]
 8018266:	6825      	ldr	r5, [r4, #0]
 8018268:	f015 0506 	ands.w	r5, r5, #6
 801826c:	d107      	bne.n	801827e <_printf_common+0x52>
 801826e:	f104 0a19 	add.w	sl, r4, #25
 8018272:	68e3      	ldr	r3, [r4, #12]
 8018274:	f8d9 2000 	ldr.w	r2, [r9]
 8018278:	1a9b      	subs	r3, r3, r2
 801827a:	42ab      	cmp	r3, r5
 801827c:	dc28      	bgt.n	80182d0 <_printf_common+0xa4>
 801827e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018282:	6822      	ldr	r2, [r4, #0]
 8018284:	3300      	adds	r3, #0
 8018286:	bf18      	it	ne
 8018288:	2301      	movne	r3, #1
 801828a:	0692      	lsls	r2, r2, #26
 801828c:	d42d      	bmi.n	80182ea <_printf_common+0xbe>
 801828e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018292:	4639      	mov	r1, r7
 8018294:	4630      	mov	r0, r6
 8018296:	47c0      	blx	r8
 8018298:	3001      	adds	r0, #1
 801829a:	d020      	beq.n	80182de <_printf_common+0xb2>
 801829c:	6823      	ldr	r3, [r4, #0]
 801829e:	68e5      	ldr	r5, [r4, #12]
 80182a0:	f8d9 2000 	ldr.w	r2, [r9]
 80182a4:	f003 0306 	and.w	r3, r3, #6
 80182a8:	2b04      	cmp	r3, #4
 80182aa:	bf08      	it	eq
 80182ac:	1aad      	subeq	r5, r5, r2
 80182ae:	68a3      	ldr	r3, [r4, #8]
 80182b0:	6922      	ldr	r2, [r4, #16]
 80182b2:	bf0c      	ite	eq
 80182b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80182b8:	2500      	movne	r5, #0
 80182ba:	4293      	cmp	r3, r2
 80182bc:	bfc4      	itt	gt
 80182be:	1a9b      	subgt	r3, r3, r2
 80182c0:	18ed      	addgt	r5, r5, r3
 80182c2:	f04f 0900 	mov.w	r9, #0
 80182c6:	341a      	adds	r4, #26
 80182c8:	454d      	cmp	r5, r9
 80182ca:	d11a      	bne.n	8018302 <_printf_common+0xd6>
 80182cc:	2000      	movs	r0, #0
 80182ce:	e008      	b.n	80182e2 <_printf_common+0xb6>
 80182d0:	2301      	movs	r3, #1
 80182d2:	4652      	mov	r2, sl
 80182d4:	4639      	mov	r1, r7
 80182d6:	4630      	mov	r0, r6
 80182d8:	47c0      	blx	r8
 80182da:	3001      	adds	r0, #1
 80182dc:	d103      	bne.n	80182e6 <_printf_common+0xba>
 80182de:	f04f 30ff 	mov.w	r0, #4294967295
 80182e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182e6:	3501      	adds	r5, #1
 80182e8:	e7c3      	b.n	8018272 <_printf_common+0x46>
 80182ea:	18e1      	adds	r1, r4, r3
 80182ec:	1c5a      	adds	r2, r3, #1
 80182ee:	2030      	movs	r0, #48	; 0x30
 80182f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80182f4:	4422      	add	r2, r4
 80182f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80182fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80182fe:	3302      	adds	r3, #2
 8018300:	e7c5      	b.n	801828e <_printf_common+0x62>
 8018302:	2301      	movs	r3, #1
 8018304:	4622      	mov	r2, r4
 8018306:	4639      	mov	r1, r7
 8018308:	4630      	mov	r0, r6
 801830a:	47c0      	blx	r8
 801830c:	3001      	adds	r0, #1
 801830e:	d0e6      	beq.n	80182de <_printf_common+0xb2>
 8018310:	f109 0901 	add.w	r9, r9, #1
 8018314:	e7d8      	b.n	80182c8 <_printf_common+0x9c>
	...

08018318 <_printf_i>:
 8018318:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801831c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018320:	460c      	mov	r4, r1
 8018322:	7e09      	ldrb	r1, [r1, #24]
 8018324:	b085      	sub	sp, #20
 8018326:	296e      	cmp	r1, #110	; 0x6e
 8018328:	4617      	mov	r7, r2
 801832a:	4606      	mov	r6, r0
 801832c:	4698      	mov	r8, r3
 801832e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018330:	f000 80b3 	beq.w	801849a <_printf_i+0x182>
 8018334:	d822      	bhi.n	801837c <_printf_i+0x64>
 8018336:	2963      	cmp	r1, #99	; 0x63
 8018338:	d036      	beq.n	80183a8 <_printf_i+0x90>
 801833a:	d80a      	bhi.n	8018352 <_printf_i+0x3a>
 801833c:	2900      	cmp	r1, #0
 801833e:	f000 80b9 	beq.w	80184b4 <_printf_i+0x19c>
 8018342:	2958      	cmp	r1, #88	; 0x58
 8018344:	f000 8083 	beq.w	801844e <_printf_i+0x136>
 8018348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801834c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018350:	e032      	b.n	80183b8 <_printf_i+0xa0>
 8018352:	2964      	cmp	r1, #100	; 0x64
 8018354:	d001      	beq.n	801835a <_printf_i+0x42>
 8018356:	2969      	cmp	r1, #105	; 0x69
 8018358:	d1f6      	bne.n	8018348 <_printf_i+0x30>
 801835a:	6820      	ldr	r0, [r4, #0]
 801835c:	6813      	ldr	r3, [r2, #0]
 801835e:	0605      	lsls	r5, r0, #24
 8018360:	f103 0104 	add.w	r1, r3, #4
 8018364:	d52a      	bpl.n	80183bc <_printf_i+0xa4>
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	6011      	str	r1, [r2, #0]
 801836a:	2b00      	cmp	r3, #0
 801836c:	da03      	bge.n	8018376 <_printf_i+0x5e>
 801836e:	222d      	movs	r2, #45	; 0x2d
 8018370:	425b      	negs	r3, r3
 8018372:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018376:	486f      	ldr	r0, [pc, #444]	; (8018534 <_printf_i+0x21c>)
 8018378:	220a      	movs	r2, #10
 801837a:	e039      	b.n	80183f0 <_printf_i+0xd8>
 801837c:	2973      	cmp	r1, #115	; 0x73
 801837e:	f000 809d 	beq.w	80184bc <_printf_i+0x1a4>
 8018382:	d808      	bhi.n	8018396 <_printf_i+0x7e>
 8018384:	296f      	cmp	r1, #111	; 0x6f
 8018386:	d020      	beq.n	80183ca <_printf_i+0xb2>
 8018388:	2970      	cmp	r1, #112	; 0x70
 801838a:	d1dd      	bne.n	8018348 <_printf_i+0x30>
 801838c:	6823      	ldr	r3, [r4, #0]
 801838e:	f043 0320 	orr.w	r3, r3, #32
 8018392:	6023      	str	r3, [r4, #0]
 8018394:	e003      	b.n	801839e <_printf_i+0x86>
 8018396:	2975      	cmp	r1, #117	; 0x75
 8018398:	d017      	beq.n	80183ca <_printf_i+0xb2>
 801839a:	2978      	cmp	r1, #120	; 0x78
 801839c:	d1d4      	bne.n	8018348 <_printf_i+0x30>
 801839e:	2378      	movs	r3, #120	; 0x78
 80183a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80183a4:	4864      	ldr	r0, [pc, #400]	; (8018538 <_printf_i+0x220>)
 80183a6:	e055      	b.n	8018454 <_printf_i+0x13c>
 80183a8:	6813      	ldr	r3, [r2, #0]
 80183aa:	1d19      	adds	r1, r3, #4
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	6011      	str	r1, [r2, #0]
 80183b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80183b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80183b8:	2301      	movs	r3, #1
 80183ba:	e08c      	b.n	80184d6 <_printf_i+0x1be>
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	6011      	str	r1, [r2, #0]
 80183c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80183c4:	bf18      	it	ne
 80183c6:	b21b      	sxthne	r3, r3
 80183c8:	e7cf      	b.n	801836a <_printf_i+0x52>
 80183ca:	6813      	ldr	r3, [r2, #0]
 80183cc:	6825      	ldr	r5, [r4, #0]
 80183ce:	1d18      	adds	r0, r3, #4
 80183d0:	6010      	str	r0, [r2, #0]
 80183d2:	0628      	lsls	r0, r5, #24
 80183d4:	d501      	bpl.n	80183da <_printf_i+0xc2>
 80183d6:	681b      	ldr	r3, [r3, #0]
 80183d8:	e002      	b.n	80183e0 <_printf_i+0xc8>
 80183da:	0668      	lsls	r0, r5, #25
 80183dc:	d5fb      	bpl.n	80183d6 <_printf_i+0xbe>
 80183de:	881b      	ldrh	r3, [r3, #0]
 80183e0:	4854      	ldr	r0, [pc, #336]	; (8018534 <_printf_i+0x21c>)
 80183e2:	296f      	cmp	r1, #111	; 0x6f
 80183e4:	bf14      	ite	ne
 80183e6:	220a      	movne	r2, #10
 80183e8:	2208      	moveq	r2, #8
 80183ea:	2100      	movs	r1, #0
 80183ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80183f0:	6865      	ldr	r5, [r4, #4]
 80183f2:	60a5      	str	r5, [r4, #8]
 80183f4:	2d00      	cmp	r5, #0
 80183f6:	f2c0 8095 	blt.w	8018524 <_printf_i+0x20c>
 80183fa:	6821      	ldr	r1, [r4, #0]
 80183fc:	f021 0104 	bic.w	r1, r1, #4
 8018400:	6021      	str	r1, [r4, #0]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d13d      	bne.n	8018482 <_printf_i+0x16a>
 8018406:	2d00      	cmp	r5, #0
 8018408:	f040 808e 	bne.w	8018528 <_printf_i+0x210>
 801840c:	4665      	mov	r5, ip
 801840e:	2a08      	cmp	r2, #8
 8018410:	d10b      	bne.n	801842a <_printf_i+0x112>
 8018412:	6823      	ldr	r3, [r4, #0]
 8018414:	07db      	lsls	r3, r3, #31
 8018416:	d508      	bpl.n	801842a <_printf_i+0x112>
 8018418:	6923      	ldr	r3, [r4, #16]
 801841a:	6862      	ldr	r2, [r4, #4]
 801841c:	429a      	cmp	r2, r3
 801841e:	bfde      	ittt	le
 8018420:	2330      	movle	r3, #48	; 0x30
 8018422:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018426:	f105 35ff 	addle.w	r5, r5, #4294967295
 801842a:	ebac 0305 	sub.w	r3, ip, r5
 801842e:	6123      	str	r3, [r4, #16]
 8018430:	f8cd 8000 	str.w	r8, [sp]
 8018434:	463b      	mov	r3, r7
 8018436:	aa03      	add	r2, sp, #12
 8018438:	4621      	mov	r1, r4
 801843a:	4630      	mov	r0, r6
 801843c:	f7ff fef6 	bl	801822c <_printf_common>
 8018440:	3001      	adds	r0, #1
 8018442:	d14d      	bne.n	80184e0 <_printf_i+0x1c8>
 8018444:	f04f 30ff 	mov.w	r0, #4294967295
 8018448:	b005      	add	sp, #20
 801844a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801844e:	4839      	ldr	r0, [pc, #228]	; (8018534 <_printf_i+0x21c>)
 8018450:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018454:	6813      	ldr	r3, [r2, #0]
 8018456:	6821      	ldr	r1, [r4, #0]
 8018458:	1d1d      	adds	r5, r3, #4
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	6015      	str	r5, [r2, #0]
 801845e:	060a      	lsls	r2, r1, #24
 8018460:	d50b      	bpl.n	801847a <_printf_i+0x162>
 8018462:	07ca      	lsls	r2, r1, #31
 8018464:	bf44      	itt	mi
 8018466:	f041 0120 	orrmi.w	r1, r1, #32
 801846a:	6021      	strmi	r1, [r4, #0]
 801846c:	b91b      	cbnz	r3, 8018476 <_printf_i+0x15e>
 801846e:	6822      	ldr	r2, [r4, #0]
 8018470:	f022 0220 	bic.w	r2, r2, #32
 8018474:	6022      	str	r2, [r4, #0]
 8018476:	2210      	movs	r2, #16
 8018478:	e7b7      	b.n	80183ea <_printf_i+0xd2>
 801847a:	064d      	lsls	r5, r1, #25
 801847c:	bf48      	it	mi
 801847e:	b29b      	uxthmi	r3, r3
 8018480:	e7ef      	b.n	8018462 <_printf_i+0x14a>
 8018482:	4665      	mov	r5, ip
 8018484:	fbb3 f1f2 	udiv	r1, r3, r2
 8018488:	fb02 3311 	mls	r3, r2, r1, r3
 801848c:	5cc3      	ldrb	r3, [r0, r3]
 801848e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018492:	460b      	mov	r3, r1
 8018494:	2900      	cmp	r1, #0
 8018496:	d1f5      	bne.n	8018484 <_printf_i+0x16c>
 8018498:	e7b9      	b.n	801840e <_printf_i+0xf6>
 801849a:	6813      	ldr	r3, [r2, #0]
 801849c:	6825      	ldr	r5, [r4, #0]
 801849e:	6961      	ldr	r1, [r4, #20]
 80184a0:	1d18      	adds	r0, r3, #4
 80184a2:	6010      	str	r0, [r2, #0]
 80184a4:	0628      	lsls	r0, r5, #24
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	d501      	bpl.n	80184ae <_printf_i+0x196>
 80184aa:	6019      	str	r1, [r3, #0]
 80184ac:	e002      	b.n	80184b4 <_printf_i+0x19c>
 80184ae:	066a      	lsls	r2, r5, #25
 80184b0:	d5fb      	bpl.n	80184aa <_printf_i+0x192>
 80184b2:	8019      	strh	r1, [r3, #0]
 80184b4:	2300      	movs	r3, #0
 80184b6:	6123      	str	r3, [r4, #16]
 80184b8:	4665      	mov	r5, ip
 80184ba:	e7b9      	b.n	8018430 <_printf_i+0x118>
 80184bc:	6813      	ldr	r3, [r2, #0]
 80184be:	1d19      	adds	r1, r3, #4
 80184c0:	6011      	str	r1, [r2, #0]
 80184c2:	681d      	ldr	r5, [r3, #0]
 80184c4:	6862      	ldr	r2, [r4, #4]
 80184c6:	2100      	movs	r1, #0
 80184c8:	4628      	mov	r0, r5
 80184ca:	f7e7 fea9 	bl	8000220 <memchr>
 80184ce:	b108      	cbz	r0, 80184d4 <_printf_i+0x1bc>
 80184d0:	1b40      	subs	r0, r0, r5
 80184d2:	6060      	str	r0, [r4, #4]
 80184d4:	6863      	ldr	r3, [r4, #4]
 80184d6:	6123      	str	r3, [r4, #16]
 80184d8:	2300      	movs	r3, #0
 80184da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80184de:	e7a7      	b.n	8018430 <_printf_i+0x118>
 80184e0:	6923      	ldr	r3, [r4, #16]
 80184e2:	462a      	mov	r2, r5
 80184e4:	4639      	mov	r1, r7
 80184e6:	4630      	mov	r0, r6
 80184e8:	47c0      	blx	r8
 80184ea:	3001      	adds	r0, #1
 80184ec:	d0aa      	beq.n	8018444 <_printf_i+0x12c>
 80184ee:	6823      	ldr	r3, [r4, #0]
 80184f0:	079b      	lsls	r3, r3, #30
 80184f2:	d413      	bmi.n	801851c <_printf_i+0x204>
 80184f4:	68e0      	ldr	r0, [r4, #12]
 80184f6:	9b03      	ldr	r3, [sp, #12]
 80184f8:	4298      	cmp	r0, r3
 80184fa:	bfb8      	it	lt
 80184fc:	4618      	movlt	r0, r3
 80184fe:	e7a3      	b.n	8018448 <_printf_i+0x130>
 8018500:	2301      	movs	r3, #1
 8018502:	464a      	mov	r2, r9
 8018504:	4639      	mov	r1, r7
 8018506:	4630      	mov	r0, r6
 8018508:	47c0      	blx	r8
 801850a:	3001      	adds	r0, #1
 801850c:	d09a      	beq.n	8018444 <_printf_i+0x12c>
 801850e:	3501      	adds	r5, #1
 8018510:	68e3      	ldr	r3, [r4, #12]
 8018512:	9a03      	ldr	r2, [sp, #12]
 8018514:	1a9b      	subs	r3, r3, r2
 8018516:	42ab      	cmp	r3, r5
 8018518:	dcf2      	bgt.n	8018500 <_printf_i+0x1e8>
 801851a:	e7eb      	b.n	80184f4 <_printf_i+0x1dc>
 801851c:	2500      	movs	r5, #0
 801851e:	f104 0919 	add.w	r9, r4, #25
 8018522:	e7f5      	b.n	8018510 <_printf_i+0x1f8>
 8018524:	2b00      	cmp	r3, #0
 8018526:	d1ac      	bne.n	8018482 <_printf_i+0x16a>
 8018528:	7803      	ldrb	r3, [r0, #0]
 801852a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801852e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018532:	e76c      	b.n	801840e <_printf_i+0xf6>
 8018534:	0801ae29 	.word	0x0801ae29
 8018538:	0801ae3a 	.word	0x0801ae3a

0801853c <memmove>:
 801853c:	4288      	cmp	r0, r1
 801853e:	b510      	push	{r4, lr}
 8018540:	eb01 0302 	add.w	r3, r1, r2
 8018544:	d807      	bhi.n	8018556 <memmove+0x1a>
 8018546:	1e42      	subs	r2, r0, #1
 8018548:	4299      	cmp	r1, r3
 801854a:	d00a      	beq.n	8018562 <memmove+0x26>
 801854c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018550:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018554:	e7f8      	b.n	8018548 <memmove+0xc>
 8018556:	4283      	cmp	r3, r0
 8018558:	d9f5      	bls.n	8018546 <memmove+0xa>
 801855a:	1881      	adds	r1, r0, r2
 801855c:	1ad2      	subs	r2, r2, r3
 801855e:	42d3      	cmn	r3, r2
 8018560:	d100      	bne.n	8018564 <memmove+0x28>
 8018562:	bd10      	pop	{r4, pc}
 8018564:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018568:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801856c:	e7f7      	b.n	801855e <memmove+0x22>

0801856e <_realloc_r>:
 801856e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018570:	4607      	mov	r7, r0
 8018572:	4614      	mov	r4, r2
 8018574:	460e      	mov	r6, r1
 8018576:	b921      	cbnz	r1, 8018582 <_realloc_r+0x14>
 8018578:	4611      	mov	r1, r2
 801857a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801857e:	f7ff bc63 	b.w	8017e48 <_malloc_r>
 8018582:	b922      	cbnz	r2, 801858e <_realloc_r+0x20>
 8018584:	f7ff fc12 	bl	8017dac <_free_r>
 8018588:	4625      	mov	r5, r4
 801858a:	4628      	mov	r0, r5
 801858c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801858e:	f000 f814 	bl	80185ba <_malloc_usable_size_r>
 8018592:	42a0      	cmp	r0, r4
 8018594:	d20f      	bcs.n	80185b6 <_realloc_r+0x48>
 8018596:	4621      	mov	r1, r4
 8018598:	4638      	mov	r0, r7
 801859a:	f7ff fc55 	bl	8017e48 <_malloc_r>
 801859e:	4605      	mov	r5, r0
 80185a0:	2800      	cmp	r0, #0
 80185a2:	d0f2      	beq.n	801858a <_realloc_r+0x1c>
 80185a4:	4631      	mov	r1, r6
 80185a6:	4622      	mov	r2, r4
 80185a8:	f7ff fbec 	bl	8017d84 <memcpy>
 80185ac:	4631      	mov	r1, r6
 80185ae:	4638      	mov	r0, r7
 80185b0:	f7ff fbfc 	bl	8017dac <_free_r>
 80185b4:	e7e9      	b.n	801858a <_realloc_r+0x1c>
 80185b6:	4635      	mov	r5, r6
 80185b8:	e7e7      	b.n	801858a <_realloc_r+0x1c>

080185ba <_malloc_usable_size_r>:
 80185ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80185be:	1f18      	subs	r0, r3, #4
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	bfbc      	itt	lt
 80185c4:	580b      	ldrlt	r3, [r1, r0]
 80185c6:	18c0      	addlt	r0, r0, r3
 80185c8:	4770      	bx	lr

080185ca <fmaxf>:
 80185ca:	b508      	push	{r3, lr}
 80185cc:	ed2d 8b02 	vpush	{d8}
 80185d0:	eeb0 8a40 	vmov.f32	s16, s0
 80185d4:	eef0 8a60 	vmov.f32	s17, s1
 80185d8:	f000 f82e 	bl	8018638 <__fpclassifyf>
 80185dc:	b148      	cbz	r0, 80185f2 <fmaxf+0x28>
 80185de:	eeb0 0a68 	vmov.f32	s0, s17
 80185e2:	f000 f829 	bl	8018638 <__fpclassifyf>
 80185e6:	b130      	cbz	r0, 80185f6 <fmaxf+0x2c>
 80185e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80185ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f0:	dc01      	bgt.n	80185f6 <fmaxf+0x2c>
 80185f2:	eeb0 8a68 	vmov.f32	s16, s17
 80185f6:	eeb0 0a48 	vmov.f32	s0, s16
 80185fa:	ecbd 8b02 	vpop	{d8}
 80185fe:	bd08      	pop	{r3, pc}

08018600 <fminf>:
 8018600:	b508      	push	{r3, lr}
 8018602:	ed2d 8b02 	vpush	{d8}
 8018606:	eeb0 8a40 	vmov.f32	s16, s0
 801860a:	eef0 8a60 	vmov.f32	s17, s1
 801860e:	f000 f813 	bl	8018638 <__fpclassifyf>
 8018612:	b148      	cbz	r0, 8018628 <fminf+0x28>
 8018614:	eeb0 0a68 	vmov.f32	s0, s17
 8018618:	f000 f80e 	bl	8018638 <__fpclassifyf>
 801861c:	b130      	cbz	r0, 801862c <fminf+0x2c>
 801861e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018626:	d401      	bmi.n	801862c <fminf+0x2c>
 8018628:	eeb0 8a68 	vmov.f32	s16, s17
 801862c:	eeb0 0a48 	vmov.f32	s0, s16
 8018630:	ecbd 8b02 	vpop	{d8}
 8018634:	bd08      	pop	{r3, pc}
	...

08018638 <__fpclassifyf>:
 8018638:	ee10 3a10 	vmov	r3, s0
 801863c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8018640:	d00d      	beq.n	801865e <__fpclassifyf+0x26>
 8018642:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8018646:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801864a:	d30a      	bcc.n	8018662 <__fpclassifyf+0x2a>
 801864c:	4b07      	ldr	r3, [pc, #28]	; (801866c <__fpclassifyf+0x34>)
 801864e:	1e42      	subs	r2, r0, #1
 8018650:	429a      	cmp	r2, r3
 8018652:	d908      	bls.n	8018666 <__fpclassifyf+0x2e>
 8018654:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8018658:	4258      	negs	r0, r3
 801865a:	4158      	adcs	r0, r3
 801865c:	4770      	bx	lr
 801865e:	2002      	movs	r0, #2
 8018660:	4770      	bx	lr
 8018662:	2004      	movs	r0, #4
 8018664:	4770      	bx	lr
 8018666:	2003      	movs	r0, #3
 8018668:	4770      	bx	lr
 801866a:	bf00      	nop
 801866c:	007ffffe 	.word	0x007ffffe

08018670 <pow>:
 8018670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018674:	ed2d 8b04 	vpush	{d8-d9}
 8018678:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801894c <pow+0x2dc>
 801867c:	b08d      	sub	sp, #52	; 0x34
 801867e:	ec57 6b10 	vmov	r6, r7, d0
 8018682:	ec55 4b11 	vmov	r4, r5, d1
 8018686:	f000 fb73 	bl	8018d70 <__ieee754_pow>
 801868a:	f999 3000 	ldrsb.w	r3, [r9]
 801868e:	9300      	str	r3, [sp, #0]
 8018690:	3301      	adds	r3, #1
 8018692:	eeb0 8a40 	vmov.f32	s16, s0
 8018696:	eef0 8a60 	vmov.f32	s17, s1
 801869a:	46c8      	mov	r8, r9
 801869c:	d05f      	beq.n	801875e <pow+0xee>
 801869e:	4622      	mov	r2, r4
 80186a0:	462b      	mov	r3, r5
 80186a2:	4620      	mov	r0, r4
 80186a4:	4629      	mov	r1, r5
 80186a6:	f7e8 fa61 	bl	8000b6c <__aeabi_dcmpun>
 80186aa:	4683      	mov	fp, r0
 80186ac:	2800      	cmp	r0, #0
 80186ae:	d156      	bne.n	801875e <pow+0xee>
 80186b0:	4632      	mov	r2, r6
 80186b2:	463b      	mov	r3, r7
 80186b4:	4630      	mov	r0, r6
 80186b6:	4639      	mov	r1, r7
 80186b8:	f7e8 fa58 	bl	8000b6c <__aeabi_dcmpun>
 80186bc:	9001      	str	r0, [sp, #4]
 80186be:	b1e8      	cbz	r0, 80186fc <pow+0x8c>
 80186c0:	2200      	movs	r2, #0
 80186c2:	2300      	movs	r3, #0
 80186c4:	4620      	mov	r0, r4
 80186c6:	4629      	mov	r1, r5
 80186c8:	f7e8 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 80186cc:	2800      	cmp	r0, #0
 80186ce:	d046      	beq.n	801875e <pow+0xee>
 80186d0:	2301      	movs	r3, #1
 80186d2:	9302      	str	r3, [sp, #8]
 80186d4:	4b96      	ldr	r3, [pc, #600]	; (8018930 <pow+0x2c0>)
 80186d6:	9303      	str	r3, [sp, #12]
 80186d8:	4b96      	ldr	r3, [pc, #600]	; (8018934 <pow+0x2c4>)
 80186da:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80186de:	2200      	movs	r2, #0
 80186e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186e4:	9b00      	ldr	r3, [sp, #0]
 80186e6:	2b02      	cmp	r3, #2
 80186e8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80186ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80186f0:	d033      	beq.n	801875a <pow+0xea>
 80186f2:	a802      	add	r0, sp, #8
 80186f4:	f001 fbce 	bl	8019e94 <matherr>
 80186f8:	bb48      	cbnz	r0, 801874e <pow+0xde>
 80186fa:	e05d      	b.n	80187b8 <pow+0x148>
 80186fc:	f04f 0a00 	mov.w	sl, #0
 8018700:	f04f 0b00 	mov.w	fp, #0
 8018704:	4652      	mov	r2, sl
 8018706:	465b      	mov	r3, fp
 8018708:	4630      	mov	r0, r6
 801870a:	4639      	mov	r1, r7
 801870c:	f7e8 f9fc 	bl	8000b08 <__aeabi_dcmpeq>
 8018710:	ec4b ab19 	vmov	d9, sl, fp
 8018714:	2800      	cmp	r0, #0
 8018716:	d054      	beq.n	80187c2 <pow+0x152>
 8018718:	4652      	mov	r2, sl
 801871a:	465b      	mov	r3, fp
 801871c:	4620      	mov	r0, r4
 801871e:	4629      	mov	r1, r5
 8018720:	f7e8 f9f2 	bl	8000b08 <__aeabi_dcmpeq>
 8018724:	4680      	mov	r8, r0
 8018726:	b318      	cbz	r0, 8018770 <pow+0x100>
 8018728:	2301      	movs	r3, #1
 801872a:	9302      	str	r3, [sp, #8]
 801872c:	4b80      	ldr	r3, [pc, #512]	; (8018930 <pow+0x2c0>)
 801872e:	9303      	str	r3, [sp, #12]
 8018730:	9b01      	ldr	r3, [sp, #4]
 8018732:	930a      	str	r3, [sp, #40]	; 0x28
 8018734:	9b00      	ldr	r3, [sp, #0]
 8018736:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801873a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801873e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d0d5      	beq.n	80186f2 <pow+0x82>
 8018746:	4b7b      	ldr	r3, [pc, #492]	; (8018934 <pow+0x2c4>)
 8018748:	2200      	movs	r2, #0
 801874a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801874e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018750:	b11b      	cbz	r3, 801875a <pow+0xea>
 8018752:	f7ff fadd 	bl	8017d10 <__errno>
 8018756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018758:	6003      	str	r3, [r0, #0]
 801875a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801875e:	eeb0 0a48 	vmov.f32	s0, s16
 8018762:	eef0 0a68 	vmov.f32	s1, s17
 8018766:	b00d      	add	sp, #52	; 0x34
 8018768:	ecbd 8b04 	vpop	{d8-d9}
 801876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018770:	ec45 4b10 	vmov	d0, r4, r5
 8018774:	f001 fb86 	bl	8019e84 <finite>
 8018778:	2800      	cmp	r0, #0
 801877a:	d0f0      	beq.n	801875e <pow+0xee>
 801877c:	4652      	mov	r2, sl
 801877e:	465b      	mov	r3, fp
 8018780:	4620      	mov	r0, r4
 8018782:	4629      	mov	r1, r5
 8018784:	f7e8 f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8018788:	2800      	cmp	r0, #0
 801878a:	d0e8      	beq.n	801875e <pow+0xee>
 801878c:	2301      	movs	r3, #1
 801878e:	9302      	str	r3, [sp, #8]
 8018790:	4b67      	ldr	r3, [pc, #412]	; (8018930 <pow+0x2c0>)
 8018792:	9303      	str	r3, [sp, #12]
 8018794:	f999 3000 	ldrsb.w	r3, [r9]
 8018798:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801879c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80187a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80187a4:	b913      	cbnz	r3, 80187ac <pow+0x13c>
 80187a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80187aa:	e7a2      	b.n	80186f2 <pow+0x82>
 80187ac:	4962      	ldr	r1, [pc, #392]	; (8018938 <pow+0x2c8>)
 80187ae:	2000      	movs	r0, #0
 80187b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80187b4:	2b02      	cmp	r3, #2
 80187b6:	d19c      	bne.n	80186f2 <pow+0x82>
 80187b8:	f7ff faaa 	bl	8017d10 <__errno>
 80187bc:	2321      	movs	r3, #33	; 0x21
 80187be:	6003      	str	r3, [r0, #0]
 80187c0:	e7c5      	b.n	801874e <pow+0xde>
 80187c2:	eeb0 0a48 	vmov.f32	s0, s16
 80187c6:	eef0 0a68 	vmov.f32	s1, s17
 80187ca:	f001 fb5b 	bl	8019e84 <finite>
 80187ce:	9000      	str	r0, [sp, #0]
 80187d0:	2800      	cmp	r0, #0
 80187d2:	f040 8081 	bne.w	80188d8 <pow+0x268>
 80187d6:	ec47 6b10 	vmov	d0, r6, r7
 80187da:	f001 fb53 	bl	8019e84 <finite>
 80187de:	2800      	cmp	r0, #0
 80187e0:	d07a      	beq.n	80188d8 <pow+0x268>
 80187e2:	ec45 4b10 	vmov	d0, r4, r5
 80187e6:	f001 fb4d 	bl	8019e84 <finite>
 80187ea:	2800      	cmp	r0, #0
 80187ec:	d074      	beq.n	80188d8 <pow+0x268>
 80187ee:	ec53 2b18 	vmov	r2, r3, d8
 80187f2:	ee18 0a10 	vmov	r0, s16
 80187f6:	4619      	mov	r1, r3
 80187f8:	f7e8 f9b8 	bl	8000b6c <__aeabi_dcmpun>
 80187fc:	f999 9000 	ldrsb.w	r9, [r9]
 8018800:	4b4b      	ldr	r3, [pc, #300]	; (8018930 <pow+0x2c0>)
 8018802:	b1b0      	cbz	r0, 8018832 <pow+0x1c2>
 8018804:	2201      	movs	r2, #1
 8018806:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801880a:	9b00      	ldr	r3, [sp, #0]
 801880c:	930a      	str	r3, [sp, #40]	; 0x28
 801880e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018812:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018816:	f1b9 0f00 	cmp.w	r9, #0
 801881a:	d0c4      	beq.n	80187a6 <pow+0x136>
 801881c:	4652      	mov	r2, sl
 801881e:	465b      	mov	r3, fp
 8018820:	4650      	mov	r0, sl
 8018822:	4659      	mov	r1, fp
 8018824:	f7e8 f832 	bl	800088c <__aeabi_ddiv>
 8018828:	f1b9 0f02 	cmp.w	r9, #2
 801882c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018830:	e7c1      	b.n	80187b6 <pow+0x146>
 8018832:	2203      	movs	r2, #3
 8018834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018838:	900a      	str	r0, [sp, #40]	; 0x28
 801883a:	4629      	mov	r1, r5
 801883c:	4620      	mov	r0, r4
 801883e:	2200      	movs	r2, #0
 8018840:	4b3e      	ldr	r3, [pc, #248]	; (801893c <pow+0x2cc>)
 8018842:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018846:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801884a:	f7e7 fef5 	bl	8000638 <__aeabi_dmul>
 801884e:	4604      	mov	r4, r0
 8018850:	460d      	mov	r5, r1
 8018852:	f1b9 0f00 	cmp.w	r9, #0
 8018856:	d124      	bne.n	80188a2 <pow+0x232>
 8018858:	4b39      	ldr	r3, [pc, #228]	; (8018940 <pow+0x2d0>)
 801885a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801885e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018862:	4630      	mov	r0, r6
 8018864:	4652      	mov	r2, sl
 8018866:	465b      	mov	r3, fp
 8018868:	4639      	mov	r1, r7
 801886a:	f7e8 f957 	bl	8000b1c <__aeabi_dcmplt>
 801886e:	2800      	cmp	r0, #0
 8018870:	d056      	beq.n	8018920 <pow+0x2b0>
 8018872:	ec45 4b10 	vmov	d0, r4, r5
 8018876:	f001 fb17 	bl	8019ea8 <rint>
 801887a:	4622      	mov	r2, r4
 801887c:	462b      	mov	r3, r5
 801887e:	ec51 0b10 	vmov	r0, r1, d0
 8018882:	f7e8 f941 	bl	8000b08 <__aeabi_dcmpeq>
 8018886:	b920      	cbnz	r0, 8018892 <pow+0x222>
 8018888:	4b2e      	ldr	r3, [pc, #184]	; (8018944 <pow+0x2d4>)
 801888a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801888e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018892:	f998 3000 	ldrsb.w	r3, [r8]
 8018896:	2b02      	cmp	r3, #2
 8018898:	d142      	bne.n	8018920 <pow+0x2b0>
 801889a:	f7ff fa39 	bl	8017d10 <__errno>
 801889e:	2322      	movs	r3, #34	; 0x22
 80188a0:	e78d      	b.n	80187be <pow+0x14e>
 80188a2:	4b29      	ldr	r3, [pc, #164]	; (8018948 <pow+0x2d8>)
 80188a4:	2200      	movs	r2, #0
 80188a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80188aa:	4630      	mov	r0, r6
 80188ac:	4652      	mov	r2, sl
 80188ae:	465b      	mov	r3, fp
 80188b0:	4639      	mov	r1, r7
 80188b2:	f7e8 f933 	bl	8000b1c <__aeabi_dcmplt>
 80188b6:	2800      	cmp	r0, #0
 80188b8:	d0eb      	beq.n	8018892 <pow+0x222>
 80188ba:	ec45 4b10 	vmov	d0, r4, r5
 80188be:	f001 faf3 	bl	8019ea8 <rint>
 80188c2:	4622      	mov	r2, r4
 80188c4:	462b      	mov	r3, r5
 80188c6:	ec51 0b10 	vmov	r0, r1, d0
 80188ca:	f7e8 f91d 	bl	8000b08 <__aeabi_dcmpeq>
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d1df      	bne.n	8018892 <pow+0x222>
 80188d2:	2200      	movs	r2, #0
 80188d4:	4b18      	ldr	r3, [pc, #96]	; (8018938 <pow+0x2c8>)
 80188d6:	e7da      	b.n	801888e <pow+0x21e>
 80188d8:	2200      	movs	r2, #0
 80188da:	2300      	movs	r3, #0
 80188dc:	ec51 0b18 	vmov	r0, r1, d8
 80188e0:	f7e8 f912 	bl	8000b08 <__aeabi_dcmpeq>
 80188e4:	2800      	cmp	r0, #0
 80188e6:	f43f af3a 	beq.w	801875e <pow+0xee>
 80188ea:	ec47 6b10 	vmov	d0, r6, r7
 80188ee:	f001 fac9 	bl	8019e84 <finite>
 80188f2:	2800      	cmp	r0, #0
 80188f4:	f43f af33 	beq.w	801875e <pow+0xee>
 80188f8:	ec45 4b10 	vmov	d0, r4, r5
 80188fc:	f001 fac2 	bl	8019e84 <finite>
 8018900:	2800      	cmp	r0, #0
 8018902:	f43f af2c 	beq.w	801875e <pow+0xee>
 8018906:	2304      	movs	r3, #4
 8018908:	9302      	str	r3, [sp, #8]
 801890a:	4b09      	ldr	r3, [pc, #36]	; (8018930 <pow+0x2c0>)
 801890c:	9303      	str	r3, [sp, #12]
 801890e:	2300      	movs	r3, #0
 8018910:	930a      	str	r3, [sp, #40]	; 0x28
 8018912:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018916:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801891a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801891e:	e7b8      	b.n	8018892 <pow+0x222>
 8018920:	a802      	add	r0, sp, #8
 8018922:	f001 fab7 	bl	8019e94 <matherr>
 8018926:	2800      	cmp	r0, #0
 8018928:	f47f af11 	bne.w	801874e <pow+0xde>
 801892c:	e7b5      	b.n	801889a <pow+0x22a>
 801892e:	bf00      	nop
 8018930:	0801aeac 	.word	0x0801aeac
 8018934:	3ff00000 	.word	0x3ff00000
 8018938:	fff00000 	.word	0xfff00000
 801893c:	3fe00000 	.word	0x3fe00000
 8018940:	47efffff 	.word	0x47efffff
 8018944:	c7efffff 	.word	0xc7efffff
 8018948:	7ff00000 	.word	0x7ff00000
 801894c:	200001f8 	.word	0x200001f8

08018950 <sqrt>:
 8018950:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018954:	ed2d 8b02 	vpush	{d8}
 8018958:	b08b      	sub	sp, #44	; 0x2c
 801895a:	ec55 4b10 	vmov	r4, r5, d0
 801895e:	f000 ff15 	bl	801978c <__ieee754_sqrt>
 8018962:	4b26      	ldr	r3, [pc, #152]	; (80189fc <sqrt+0xac>)
 8018964:	eeb0 8a40 	vmov.f32	s16, s0
 8018968:	eef0 8a60 	vmov.f32	s17, s1
 801896c:	f993 6000 	ldrsb.w	r6, [r3]
 8018970:	1c73      	adds	r3, r6, #1
 8018972:	d02a      	beq.n	80189ca <sqrt+0x7a>
 8018974:	4622      	mov	r2, r4
 8018976:	462b      	mov	r3, r5
 8018978:	4620      	mov	r0, r4
 801897a:	4629      	mov	r1, r5
 801897c:	f7e8 f8f6 	bl	8000b6c <__aeabi_dcmpun>
 8018980:	4607      	mov	r7, r0
 8018982:	bb10      	cbnz	r0, 80189ca <sqrt+0x7a>
 8018984:	f04f 0800 	mov.w	r8, #0
 8018988:	f04f 0900 	mov.w	r9, #0
 801898c:	4642      	mov	r2, r8
 801898e:	464b      	mov	r3, r9
 8018990:	4620      	mov	r0, r4
 8018992:	4629      	mov	r1, r5
 8018994:	f7e8 f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8018998:	b1b8      	cbz	r0, 80189ca <sqrt+0x7a>
 801899a:	2301      	movs	r3, #1
 801899c:	9300      	str	r3, [sp, #0]
 801899e:	4b18      	ldr	r3, [pc, #96]	; (8018a00 <sqrt+0xb0>)
 80189a0:	9301      	str	r3, [sp, #4]
 80189a2:	9708      	str	r7, [sp, #32]
 80189a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80189a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80189ac:	b9b6      	cbnz	r6, 80189dc <sqrt+0x8c>
 80189ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80189b2:	4668      	mov	r0, sp
 80189b4:	f001 fa6e 	bl	8019e94 <matherr>
 80189b8:	b1d0      	cbz	r0, 80189f0 <sqrt+0xa0>
 80189ba:	9b08      	ldr	r3, [sp, #32]
 80189bc:	b11b      	cbz	r3, 80189c6 <sqrt+0x76>
 80189be:	f7ff f9a7 	bl	8017d10 <__errno>
 80189c2:	9b08      	ldr	r3, [sp, #32]
 80189c4:	6003      	str	r3, [r0, #0]
 80189c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80189ca:	eeb0 0a48 	vmov.f32	s0, s16
 80189ce:	eef0 0a68 	vmov.f32	s1, s17
 80189d2:	b00b      	add	sp, #44	; 0x2c
 80189d4:	ecbd 8b02 	vpop	{d8}
 80189d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189dc:	4642      	mov	r2, r8
 80189de:	464b      	mov	r3, r9
 80189e0:	4640      	mov	r0, r8
 80189e2:	4649      	mov	r1, r9
 80189e4:	f7e7 ff52 	bl	800088c <__aeabi_ddiv>
 80189e8:	2e02      	cmp	r6, #2
 80189ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80189ee:	d1e0      	bne.n	80189b2 <sqrt+0x62>
 80189f0:	f7ff f98e 	bl	8017d10 <__errno>
 80189f4:	2321      	movs	r3, #33	; 0x21
 80189f6:	6003      	str	r3, [r0, #0]
 80189f8:	e7df      	b.n	80189ba <sqrt+0x6a>
 80189fa:	bf00      	nop
 80189fc:	200001f8 	.word	0x200001f8
 8018a00:	0801aeb0 	.word	0x0801aeb0

08018a04 <powf>:
 8018a04:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8018a08:	ed2d 8b04 	vpush	{d8-d9}
 8018a0c:	4ca7      	ldr	r4, [pc, #668]	; (8018cac <powf+0x2a8>)
 8018a0e:	b08a      	sub	sp, #40	; 0x28
 8018a10:	eef0 8a40 	vmov.f32	s17, s0
 8018a14:	eeb0 8a60 	vmov.f32	s16, s1
 8018a18:	f000 ff68 	bl	80198ec <__ieee754_powf>
 8018a1c:	f994 5000 	ldrsb.w	r5, [r4]
 8018a20:	1c6b      	adds	r3, r5, #1
 8018a22:	eeb0 9a40 	vmov.f32	s18, s0
 8018a26:	4626      	mov	r6, r4
 8018a28:	d05f      	beq.n	8018aea <powf+0xe6>
 8018a2a:	eeb4 8a48 	vcmp.f32	s16, s16
 8018a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a32:	d65a      	bvs.n	8018aea <powf+0xe6>
 8018a34:	eef4 8a68 	vcmp.f32	s17, s17
 8018a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a3c:	d721      	bvc.n	8018a82 <powf+0x7e>
 8018a3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a46:	d150      	bne.n	8018aea <powf+0xe6>
 8018a48:	2301      	movs	r3, #1
 8018a4a:	9300      	str	r3, [sp, #0]
 8018a4c:	4b98      	ldr	r3, [pc, #608]	; (8018cb0 <powf+0x2ac>)
 8018a4e:	9301      	str	r3, [sp, #4]
 8018a50:	ee18 0a90 	vmov	r0, s17
 8018a54:	2300      	movs	r3, #0
 8018a56:	9308      	str	r3, [sp, #32]
 8018a58:	f7e7 fd96 	bl	8000588 <__aeabi_f2d>
 8018a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a60:	ee18 0a10 	vmov	r0, s16
 8018a64:	f7e7 fd90 	bl	8000588 <__aeabi_f2d>
 8018a68:	4b92      	ldr	r3, [pc, #584]	; (8018cb4 <powf+0x2b0>)
 8018a6a:	2200      	movs	r2, #0
 8018a6c:	2d02      	cmp	r5, #2
 8018a6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a72:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a76:	d032      	beq.n	8018ade <powf+0xda>
 8018a78:	4668      	mov	r0, sp
 8018a7a:	f001 fa0b 	bl	8019e94 <matherr>
 8018a7e:	bb40      	cbnz	r0, 8018ad2 <powf+0xce>
 8018a80:	e065      	b.n	8018b4e <powf+0x14a>
 8018a82:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018cb8 <powf+0x2b4>
 8018a86:	eef4 8a69 	vcmp.f32	s17, s19
 8018a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8e:	d163      	bne.n	8018b58 <powf+0x154>
 8018a90:	eeb4 8a69 	vcmp.f32	s16, s19
 8018a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a98:	d12e      	bne.n	8018af8 <powf+0xf4>
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	9300      	str	r3, [sp, #0]
 8018a9e:	4b84      	ldr	r3, [pc, #528]	; (8018cb0 <powf+0x2ac>)
 8018aa0:	9301      	str	r3, [sp, #4]
 8018aa2:	ee18 0a90 	vmov	r0, s17
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	9308      	str	r3, [sp, #32]
 8018aaa:	f7e7 fd6d 	bl	8000588 <__aeabi_f2d>
 8018aae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ab2:	ee18 0a10 	vmov	r0, s16
 8018ab6:	f7e7 fd67 	bl	8000588 <__aeabi_f2d>
 8018aba:	2200      	movs	r2, #0
 8018abc:	2300      	movs	r3, #0
 8018abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018ac6:	2d00      	cmp	r5, #0
 8018ac8:	d0d6      	beq.n	8018a78 <powf+0x74>
 8018aca:	4b7a      	ldr	r3, [pc, #488]	; (8018cb4 <powf+0x2b0>)
 8018acc:	2200      	movs	r2, #0
 8018ace:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018ad2:	9b08      	ldr	r3, [sp, #32]
 8018ad4:	b11b      	cbz	r3, 8018ade <powf+0xda>
 8018ad6:	f7ff f91b 	bl	8017d10 <__errno>
 8018ada:	9b08      	ldr	r3, [sp, #32]
 8018adc:	6003      	str	r3, [r0, #0]
 8018ade:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ae2:	f7e8 f859 	bl	8000b98 <__aeabi_d2f>
 8018ae6:	ee09 0a10 	vmov	s18, r0
 8018aea:	eeb0 0a49 	vmov.f32	s0, s18
 8018aee:	b00a      	add	sp, #40	; 0x28
 8018af0:	ecbd 8b04 	vpop	{d8-d9}
 8018af4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018af8:	eeb0 0a48 	vmov.f32	s0, s16
 8018afc:	f001 fad5 	bl	801a0aa <finitef>
 8018b00:	2800      	cmp	r0, #0
 8018b02:	d0f2      	beq.n	8018aea <powf+0xe6>
 8018b04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b0c:	d5ed      	bpl.n	8018aea <powf+0xe6>
 8018b0e:	2301      	movs	r3, #1
 8018b10:	9300      	str	r3, [sp, #0]
 8018b12:	4b67      	ldr	r3, [pc, #412]	; (8018cb0 <powf+0x2ac>)
 8018b14:	9301      	str	r3, [sp, #4]
 8018b16:	ee18 0a90 	vmov	r0, s17
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	9308      	str	r3, [sp, #32]
 8018b1e:	f7e7 fd33 	bl	8000588 <__aeabi_f2d>
 8018b22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b26:	ee18 0a10 	vmov	r0, s16
 8018b2a:	f7e7 fd2d 	bl	8000588 <__aeabi_f2d>
 8018b2e:	f994 3000 	ldrsb.w	r3, [r4]
 8018b32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b36:	b923      	cbnz	r3, 8018b42 <powf+0x13e>
 8018b38:	2200      	movs	r2, #0
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018b40:	e79a      	b.n	8018a78 <powf+0x74>
 8018b42:	495e      	ldr	r1, [pc, #376]	; (8018cbc <powf+0x2b8>)
 8018b44:	2000      	movs	r0, #0
 8018b46:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b4a:	2b02      	cmp	r3, #2
 8018b4c:	d194      	bne.n	8018a78 <powf+0x74>
 8018b4e:	f7ff f8df 	bl	8017d10 <__errno>
 8018b52:	2321      	movs	r3, #33	; 0x21
 8018b54:	6003      	str	r3, [r0, #0]
 8018b56:	e7bc      	b.n	8018ad2 <powf+0xce>
 8018b58:	f001 faa7 	bl	801a0aa <finitef>
 8018b5c:	4605      	mov	r5, r0
 8018b5e:	2800      	cmp	r0, #0
 8018b60:	d173      	bne.n	8018c4a <powf+0x246>
 8018b62:	eeb0 0a68 	vmov.f32	s0, s17
 8018b66:	f001 faa0 	bl	801a0aa <finitef>
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d06d      	beq.n	8018c4a <powf+0x246>
 8018b6e:	eeb0 0a48 	vmov.f32	s0, s16
 8018b72:	f001 fa9a 	bl	801a0aa <finitef>
 8018b76:	2800      	cmp	r0, #0
 8018b78:	d067      	beq.n	8018c4a <powf+0x246>
 8018b7a:	ee18 0a90 	vmov	r0, s17
 8018b7e:	f7e7 fd03 	bl	8000588 <__aeabi_f2d>
 8018b82:	4680      	mov	r8, r0
 8018b84:	ee18 0a10 	vmov	r0, s16
 8018b88:	4689      	mov	r9, r1
 8018b8a:	f7e7 fcfd 	bl	8000588 <__aeabi_f2d>
 8018b8e:	eeb4 9a49 	vcmp.f32	s18, s18
 8018b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b96:	f994 4000 	ldrsb.w	r4, [r4]
 8018b9a:	4b45      	ldr	r3, [pc, #276]	; (8018cb0 <powf+0x2ac>)
 8018b9c:	d713      	bvc.n	8018bc6 <powf+0x1c2>
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	e9cd 2300 	strd	r2, r3, [sp]
 8018ba4:	9508      	str	r5, [sp, #32]
 8018ba6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bae:	2c00      	cmp	r4, #0
 8018bb0:	d0c2      	beq.n	8018b38 <powf+0x134>
 8018bb2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8018bb6:	ee17 0a90 	vmov	r0, s15
 8018bba:	f7e7 fce5 	bl	8000588 <__aeabi_f2d>
 8018bbe:	2c02      	cmp	r4, #2
 8018bc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018bc4:	e7c2      	b.n	8018b4c <powf+0x148>
 8018bc6:	2203      	movs	r2, #3
 8018bc8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8018bd0:	9508      	str	r5, [sp, #32]
 8018bd2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018bd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bda:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018bde:	b9fc      	cbnz	r4, 8018c20 <powf+0x21c>
 8018be0:	4b37      	ldr	r3, [pc, #220]	; (8018cc0 <powf+0x2bc>)
 8018be2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018be6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018bf2:	d553      	bpl.n	8018c9c <powf+0x298>
 8018bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8018bf8:	f001 fa68 	bl	801a0cc <rintf>
 8018bfc:	eeb4 0a48 	vcmp.f32	s0, s16
 8018c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c04:	d004      	beq.n	8018c10 <powf+0x20c>
 8018c06:	4b2f      	ldr	r3, [pc, #188]	; (8018cc4 <powf+0x2c0>)
 8018c08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018c0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c10:	f996 3000 	ldrsb.w	r3, [r6]
 8018c14:	2b02      	cmp	r3, #2
 8018c16:	d141      	bne.n	8018c9c <powf+0x298>
 8018c18:	f7ff f87a 	bl	8017d10 <__errno>
 8018c1c:	2322      	movs	r3, #34	; 0x22
 8018c1e:	e799      	b.n	8018b54 <powf+0x150>
 8018c20:	4b29      	ldr	r3, [pc, #164]	; (8018cc8 <powf+0x2c4>)
 8018c22:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018c26:	2200      	movs	r2, #0
 8018c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c30:	d5ee      	bpl.n	8018c10 <powf+0x20c>
 8018c32:	eeb0 0a48 	vmov.f32	s0, s16
 8018c36:	f001 fa49 	bl	801a0cc <rintf>
 8018c3a:	eeb4 0a48 	vcmp.f32	s0, s16
 8018c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c42:	d0e5      	beq.n	8018c10 <powf+0x20c>
 8018c44:	2200      	movs	r2, #0
 8018c46:	4b1d      	ldr	r3, [pc, #116]	; (8018cbc <powf+0x2b8>)
 8018c48:	e7e0      	b.n	8018c0c <powf+0x208>
 8018c4a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c52:	f47f af4a 	bne.w	8018aea <powf+0xe6>
 8018c56:	eeb0 0a68 	vmov.f32	s0, s17
 8018c5a:	f001 fa26 	bl	801a0aa <finitef>
 8018c5e:	2800      	cmp	r0, #0
 8018c60:	f43f af43 	beq.w	8018aea <powf+0xe6>
 8018c64:	eeb0 0a48 	vmov.f32	s0, s16
 8018c68:	f001 fa1f 	bl	801a0aa <finitef>
 8018c6c:	2800      	cmp	r0, #0
 8018c6e:	f43f af3c 	beq.w	8018aea <powf+0xe6>
 8018c72:	2304      	movs	r3, #4
 8018c74:	9300      	str	r3, [sp, #0]
 8018c76:	4b0e      	ldr	r3, [pc, #56]	; (8018cb0 <powf+0x2ac>)
 8018c78:	9301      	str	r3, [sp, #4]
 8018c7a:	ee18 0a90 	vmov	r0, s17
 8018c7e:	2300      	movs	r3, #0
 8018c80:	9308      	str	r3, [sp, #32]
 8018c82:	f7e7 fc81 	bl	8000588 <__aeabi_f2d>
 8018c86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018c8a:	ee18 0a10 	vmov	r0, s16
 8018c8e:	f7e7 fc7b 	bl	8000588 <__aeabi_f2d>
 8018c92:	2200      	movs	r2, #0
 8018c94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018c98:	2300      	movs	r3, #0
 8018c9a:	e7b7      	b.n	8018c0c <powf+0x208>
 8018c9c:	4668      	mov	r0, sp
 8018c9e:	f001 f8f9 	bl	8019e94 <matherr>
 8018ca2:	2800      	cmp	r0, #0
 8018ca4:	f47f af15 	bne.w	8018ad2 <powf+0xce>
 8018ca8:	e7b6      	b.n	8018c18 <powf+0x214>
 8018caa:	bf00      	nop
 8018cac:	200001f8 	.word	0x200001f8
 8018cb0:	0801aeb5 	.word	0x0801aeb5
 8018cb4:	3ff00000 	.word	0x3ff00000
 8018cb8:	00000000 	.word	0x00000000
 8018cbc:	fff00000 	.word	0xfff00000
 8018cc0:	47efffff 	.word	0x47efffff
 8018cc4:	c7efffff 	.word	0xc7efffff
 8018cc8:	7ff00000 	.word	0x7ff00000

08018ccc <sqrtf>:
 8018ccc:	b510      	push	{r4, lr}
 8018cce:	ed2d 8b02 	vpush	{d8}
 8018cd2:	b08a      	sub	sp, #40	; 0x28
 8018cd4:	eeb0 8a40 	vmov.f32	s16, s0
 8018cd8:	f001 f8c8 	bl	8019e6c <__ieee754_sqrtf>
 8018cdc:	4b21      	ldr	r3, [pc, #132]	; (8018d64 <sqrtf+0x98>)
 8018cde:	f993 4000 	ldrsb.w	r4, [r3]
 8018ce2:	1c63      	adds	r3, r4, #1
 8018ce4:	d02c      	beq.n	8018d40 <sqrtf+0x74>
 8018ce6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cee:	d627      	bvs.n	8018d40 <sqrtf+0x74>
 8018cf0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cf8:	d522      	bpl.n	8018d40 <sqrtf+0x74>
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	9300      	str	r3, [sp, #0]
 8018cfe:	4b1a      	ldr	r3, [pc, #104]	; (8018d68 <sqrtf+0x9c>)
 8018d00:	9301      	str	r3, [sp, #4]
 8018d02:	ee18 0a10 	vmov	r0, s16
 8018d06:	2300      	movs	r3, #0
 8018d08:	9308      	str	r3, [sp, #32]
 8018d0a:	f7e7 fc3d 	bl	8000588 <__aeabi_f2d>
 8018d0e:	2200      	movs	r2, #0
 8018d10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018d18:	2300      	movs	r3, #0
 8018d1a:	b9ac      	cbnz	r4, 8018d48 <sqrtf+0x7c>
 8018d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018d20:	4668      	mov	r0, sp
 8018d22:	f001 f8b7 	bl	8019e94 <matherr>
 8018d26:	b1b8      	cbz	r0, 8018d58 <sqrtf+0x8c>
 8018d28:	9b08      	ldr	r3, [sp, #32]
 8018d2a:	b11b      	cbz	r3, 8018d34 <sqrtf+0x68>
 8018d2c:	f7fe fff0 	bl	8017d10 <__errno>
 8018d30:	9b08      	ldr	r3, [sp, #32]
 8018d32:	6003      	str	r3, [r0, #0]
 8018d34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018d38:	f7e7 ff2e 	bl	8000b98 <__aeabi_d2f>
 8018d3c:	ee00 0a10 	vmov	s0, r0
 8018d40:	b00a      	add	sp, #40	; 0x28
 8018d42:	ecbd 8b02 	vpop	{d8}
 8018d46:	bd10      	pop	{r4, pc}
 8018d48:	4610      	mov	r0, r2
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	f7e7 fd9e 	bl	800088c <__aeabi_ddiv>
 8018d50:	2c02      	cmp	r4, #2
 8018d52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018d56:	d1e3      	bne.n	8018d20 <sqrtf+0x54>
 8018d58:	f7fe ffda 	bl	8017d10 <__errno>
 8018d5c:	2321      	movs	r3, #33	; 0x21
 8018d5e:	6003      	str	r3, [r0, #0]
 8018d60:	e7e2      	b.n	8018d28 <sqrtf+0x5c>
 8018d62:	bf00      	nop
 8018d64:	200001f8 	.word	0x200001f8
 8018d68:	0801aeba 	.word	0x0801aeba
 8018d6c:	00000000 	.word	0x00000000

08018d70 <__ieee754_pow>:
 8018d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d74:	b091      	sub	sp, #68	; 0x44
 8018d76:	ed8d 1b00 	vstr	d1, [sp]
 8018d7a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018d7e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018d82:	ea58 0302 	orrs.w	r3, r8, r2
 8018d86:	ec57 6b10 	vmov	r6, r7, d0
 8018d8a:	f000 84be 	beq.w	801970a <__ieee754_pow+0x99a>
 8018d8e:	4b7a      	ldr	r3, [pc, #488]	; (8018f78 <__ieee754_pow+0x208>)
 8018d90:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018d94:	429c      	cmp	r4, r3
 8018d96:	463d      	mov	r5, r7
 8018d98:	ee10 aa10 	vmov	sl, s0
 8018d9c:	dc09      	bgt.n	8018db2 <__ieee754_pow+0x42>
 8018d9e:	d103      	bne.n	8018da8 <__ieee754_pow+0x38>
 8018da0:	b93e      	cbnz	r6, 8018db2 <__ieee754_pow+0x42>
 8018da2:	45a0      	cmp	r8, r4
 8018da4:	dc0d      	bgt.n	8018dc2 <__ieee754_pow+0x52>
 8018da6:	e001      	b.n	8018dac <__ieee754_pow+0x3c>
 8018da8:	4598      	cmp	r8, r3
 8018daa:	dc02      	bgt.n	8018db2 <__ieee754_pow+0x42>
 8018dac:	4598      	cmp	r8, r3
 8018dae:	d10e      	bne.n	8018dce <__ieee754_pow+0x5e>
 8018db0:	b16a      	cbz	r2, 8018dce <__ieee754_pow+0x5e>
 8018db2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018db6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018dba:	ea54 030a 	orrs.w	r3, r4, sl
 8018dbe:	f000 84a4 	beq.w	801970a <__ieee754_pow+0x99a>
 8018dc2:	486e      	ldr	r0, [pc, #440]	; (8018f7c <__ieee754_pow+0x20c>)
 8018dc4:	b011      	add	sp, #68	; 0x44
 8018dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dca:	f001 b865 	b.w	8019e98 <nan>
 8018dce:	2d00      	cmp	r5, #0
 8018dd0:	da53      	bge.n	8018e7a <__ieee754_pow+0x10a>
 8018dd2:	4b6b      	ldr	r3, [pc, #428]	; (8018f80 <__ieee754_pow+0x210>)
 8018dd4:	4598      	cmp	r8, r3
 8018dd6:	dc4d      	bgt.n	8018e74 <__ieee754_pow+0x104>
 8018dd8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018ddc:	4598      	cmp	r8, r3
 8018dde:	dd4c      	ble.n	8018e7a <__ieee754_pow+0x10a>
 8018de0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018de4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018de8:	2b14      	cmp	r3, #20
 8018dea:	dd26      	ble.n	8018e3a <__ieee754_pow+0xca>
 8018dec:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018df0:	fa22 f103 	lsr.w	r1, r2, r3
 8018df4:	fa01 f303 	lsl.w	r3, r1, r3
 8018df8:	4293      	cmp	r3, r2
 8018dfa:	d13e      	bne.n	8018e7a <__ieee754_pow+0x10a>
 8018dfc:	f001 0101 	and.w	r1, r1, #1
 8018e00:	f1c1 0b02 	rsb	fp, r1, #2
 8018e04:	2a00      	cmp	r2, #0
 8018e06:	d15b      	bne.n	8018ec0 <__ieee754_pow+0x150>
 8018e08:	4b5b      	ldr	r3, [pc, #364]	; (8018f78 <__ieee754_pow+0x208>)
 8018e0a:	4598      	cmp	r8, r3
 8018e0c:	d124      	bne.n	8018e58 <__ieee754_pow+0xe8>
 8018e0e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018e12:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018e16:	ea53 030a 	orrs.w	r3, r3, sl
 8018e1a:	f000 8476 	beq.w	801970a <__ieee754_pow+0x99a>
 8018e1e:	4b59      	ldr	r3, [pc, #356]	; (8018f84 <__ieee754_pow+0x214>)
 8018e20:	429c      	cmp	r4, r3
 8018e22:	dd2d      	ble.n	8018e80 <__ieee754_pow+0x110>
 8018e24:	f1b9 0f00 	cmp.w	r9, #0
 8018e28:	f280 8473 	bge.w	8019712 <__ieee754_pow+0x9a2>
 8018e2c:	2000      	movs	r0, #0
 8018e2e:	2100      	movs	r1, #0
 8018e30:	ec41 0b10 	vmov	d0, r0, r1
 8018e34:	b011      	add	sp, #68	; 0x44
 8018e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e3a:	2a00      	cmp	r2, #0
 8018e3c:	d13e      	bne.n	8018ebc <__ieee754_pow+0x14c>
 8018e3e:	f1c3 0314 	rsb	r3, r3, #20
 8018e42:	fa48 f103 	asr.w	r1, r8, r3
 8018e46:	fa01 f303 	lsl.w	r3, r1, r3
 8018e4a:	4543      	cmp	r3, r8
 8018e4c:	f040 8469 	bne.w	8019722 <__ieee754_pow+0x9b2>
 8018e50:	f001 0101 	and.w	r1, r1, #1
 8018e54:	f1c1 0b02 	rsb	fp, r1, #2
 8018e58:	4b4b      	ldr	r3, [pc, #300]	; (8018f88 <__ieee754_pow+0x218>)
 8018e5a:	4598      	cmp	r8, r3
 8018e5c:	d118      	bne.n	8018e90 <__ieee754_pow+0x120>
 8018e5e:	f1b9 0f00 	cmp.w	r9, #0
 8018e62:	f280 845a 	bge.w	801971a <__ieee754_pow+0x9aa>
 8018e66:	4948      	ldr	r1, [pc, #288]	; (8018f88 <__ieee754_pow+0x218>)
 8018e68:	4632      	mov	r2, r6
 8018e6a:	463b      	mov	r3, r7
 8018e6c:	2000      	movs	r0, #0
 8018e6e:	f7e7 fd0d 	bl	800088c <__aeabi_ddiv>
 8018e72:	e7dd      	b.n	8018e30 <__ieee754_pow+0xc0>
 8018e74:	f04f 0b02 	mov.w	fp, #2
 8018e78:	e7c4      	b.n	8018e04 <__ieee754_pow+0x94>
 8018e7a:	f04f 0b00 	mov.w	fp, #0
 8018e7e:	e7c1      	b.n	8018e04 <__ieee754_pow+0x94>
 8018e80:	f1b9 0f00 	cmp.w	r9, #0
 8018e84:	dad2      	bge.n	8018e2c <__ieee754_pow+0xbc>
 8018e86:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018e8a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018e8e:	e7cf      	b.n	8018e30 <__ieee754_pow+0xc0>
 8018e90:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018e94:	d106      	bne.n	8018ea4 <__ieee754_pow+0x134>
 8018e96:	4632      	mov	r2, r6
 8018e98:	463b      	mov	r3, r7
 8018e9a:	4610      	mov	r0, r2
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	f7e7 fbcb 	bl	8000638 <__aeabi_dmul>
 8018ea2:	e7c5      	b.n	8018e30 <__ieee754_pow+0xc0>
 8018ea4:	4b39      	ldr	r3, [pc, #228]	; (8018f8c <__ieee754_pow+0x21c>)
 8018ea6:	4599      	cmp	r9, r3
 8018ea8:	d10a      	bne.n	8018ec0 <__ieee754_pow+0x150>
 8018eaa:	2d00      	cmp	r5, #0
 8018eac:	db08      	blt.n	8018ec0 <__ieee754_pow+0x150>
 8018eae:	ec47 6b10 	vmov	d0, r6, r7
 8018eb2:	b011      	add	sp, #68	; 0x44
 8018eb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eb8:	f000 bc68 	b.w	801978c <__ieee754_sqrt>
 8018ebc:	f04f 0b00 	mov.w	fp, #0
 8018ec0:	ec47 6b10 	vmov	d0, r6, r7
 8018ec4:	f000 ffd5 	bl	8019e72 <fabs>
 8018ec8:	ec51 0b10 	vmov	r0, r1, d0
 8018ecc:	f1ba 0f00 	cmp.w	sl, #0
 8018ed0:	d127      	bne.n	8018f22 <__ieee754_pow+0x1b2>
 8018ed2:	b124      	cbz	r4, 8018ede <__ieee754_pow+0x16e>
 8018ed4:	4b2c      	ldr	r3, [pc, #176]	; (8018f88 <__ieee754_pow+0x218>)
 8018ed6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018eda:	429a      	cmp	r2, r3
 8018edc:	d121      	bne.n	8018f22 <__ieee754_pow+0x1b2>
 8018ede:	f1b9 0f00 	cmp.w	r9, #0
 8018ee2:	da05      	bge.n	8018ef0 <__ieee754_pow+0x180>
 8018ee4:	4602      	mov	r2, r0
 8018ee6:	460b      	mov	r3, r1
 8018ee8:	2000      	movs	r0, #0
 8018eea:	4927      	ldr	r1, [pc, #156]	; (8018f88 <__ieee754_pow+0x218>)
 8018eec:	f7e7 fcce 	bl	800088c <__aeabi_ddiv>
 8018ef0:	2d00      	cmp	r5, #0
 8018ef2:	da9d      	bge.n	8018e30 <__ieee754_pow+0xc0>
 8018ef4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018ef8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018efc:	ea54 030b 	orrs.w	r3, r4, fp
 8018f00:	d108      	bne.n	8018f14 <__ieee754_pow+0x1a4>
 8018f02:	4602      	mov	r2, r0
 8018f04:	460b      	mov	r3, r1
 8018f06:	4610      	mov	r0, r2
 8018f08:	4619      	mov	r1, r3
 8018f0a:	f7e7 f9dd 	bl	80002c8 <__aeabi_dsub>
 8018f0e:	4602      	mov	r2, r0
 8018f10:	460b      	mov	r3, r1
 8018f12:	e7ac      	b.n	8018e6e <__ieee754_pow+0xfe>
 8018f14:	f1bb 0f01 	cmp.w	fp, #1
 8018f18:	d18a      	bne.n	8018e30 <__ieee754_pow+0xc0>
 8018f1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f1e:	4619      	mov	r1, r3
 8018f20:	e786      	b.n	8018e30 <__ieee754_pow+0xc0>
 8018f22:	0fed      	lsrs	r5, r5, #31
 8018f24:	1e6b      	subs	r3, r5, #1
 8018f26:	930d      	str	r3, [sp, #52]	; 0x34
 8018f28:	ea5b 0303 	orrs.w	r3, fp, r3
 8018f2c:	d102      	bne.n	8018f34 <__ieee754_pow+0x1c4>
 8018f2e:	4632      	mov	r2, r6
 8018f30:	463b      	mov	r3, r7
 8018f32:	e7e8      	b.n	8018f06 <__ieee754_pow+0x196>
 8018f34:	4b16      	ldr	r3, [pc, #88]	; (8018f90 <__ieee754_pow+0x220>)
 8018f36:	4598      	cmp	r8, r3
 8018f38:	f340 80fe 	ble.w	8019138 <__ieee754_pow+0x3c8>
 8018f3c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018f40:	4598      	cmp	r8, r3
 8018f42:	dd0a      	ble.n	8018f5a <__ieee754_pow+0x1ea>
 8018f44:	4b0f      	ldr	r3, [pc, #60]	; (8018f84 <__ieee754_pow+0x214>)
 8018f46:	429c      	cmp	r4, r3
 8018f48:	dc0d      	bgt.n	8018f66 <__ieee754_pow+0x1f6>
 8018f4a:	f1b9 0f00 	cmp.w	r9, #0
 8018f4e:	f6bf af6d 	bge.w	8018e2c <__ieee754_pow+0xbc>
 8018f52:	a307      	add	r3, pc, #28	; (adr r3, 8018f70 <__ieee754_pow+0x200>)
 8018f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f58:	e79f      	b.n	8018e9a <__ieee754_pow+0x12a>
 8018f5a:	4b0e      	ldr	r3, [pc, #56]	; (8018f94 <__ieee754_pow+0x224>)
 8018f5c:	429c      	cmp	r4, r3
 8018f5e:	ddf4      	ble.n	8018f4a <__ieee754_pow+0x1da>
 8018f60:	4b09      	ldr	r3, [pc, #36]	; (8018f88 <__ieee754_pow+0x218>)
 8018f62:	429c      	cmp	r4, r3
 8018f64:	dd18      	ble.n	8018f98 <__ieee754_pow+0x228>
 8018f66:	f1b9 0f00 	cmp.w	r9, #0
 8018f6a:	dcf2      	bgt.n	8018f52 <__ieee754_pow+0x1e2>
 8018f6c:	e75e      	b.n	8018e2c <__ieee754_pow+0xbc>
 8018f6e:	bf00      	nop
 8018f70:	8800759c 	.word	0x8800759c
 8018f74:	7e37e43c 	.word	0x7e37e43c
 8018f78:	7ff00000 	.word	0x7ff00000
 8018f7c:	0801ae1d 	.word	0x0801ae1d
 8018f80:	433fffff 	.word	0x433fffff
 8018f84:	3fefffff 	.word	0x3fefffff
 8018f88:	3ff00000 	.word	0x3ff00000
 8018f8c:	3fe00000 	.word	0x3fe00000
 8018f90:	41e00000 	.word	0x41e00000
 8018f94:	3feffffe 	.word	0x3feffffe
 8018f98:	2200      	movs	r2, #0
 8018f9a:	4b63      	ldr	r3, [pc, #396]	; (8019128 <__ieee754_pow+0x3b8>)
 8018f9c:	f7e7 f994 	bl	80002c8 <__aeabi_dsub>
 8018fa0:	a355      	add	r3, pc, #340	; (adr r3, 80190f8 <__ieee754_pow+0x388>)
 8018fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	460d      	mov	r5, r1
 8018faa:	f7e7 fb45 	bl	8000638 <__aeabi_dmul>
 8018fae:	a354      	add	r3, pc, #336	; (adr r3, 8019100 <__ieee754_pow+0x390>)
 8018fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fb4:	4606      	mov	r6, r0
 8018fb6:	460f      	mov	r7, r1
 8018fb8:	4620      	mov	r0, r4
 8018fba:	4629      	mov	r1, r5
 8018fbc:	f7e7 fb3c 	bl	8000638 <__aeabi_dmul>
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018fc6:	4b59      	ldr	r3, [pc, #356]	; (801912c <__ieee754_pow+0x3bc>)
 8018fc8:	4620      	mov	r0, r4
 8018fca:	4629      	mov	r1, r5
 8018fcc:	f7e7 fb34 	bl	8000638 <__aeabi_dmul>
 8018fd0:	4602      	mov	r2, r0
 8018fd2:	460b      	mov	r3, r1
 8018fd4:	a14c      	add	r1, pc, #304	; (adr r1, 8019108 <__ieee754_pow+0x398>)
 8018fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018fda:	f7e7 f975 	bl	80002c8 <__aeabi_dsub>
 8018fde:	4622      	mov	r2, r4
 8018fe0:	462b      	mov	r3, r5
 8018fe2:	f7e7 fb29 	bl	8000638 <__aeabi_dmul>
 8018fe6:	4602      	mov	r2, r0
 8018fe8:	460b      	mov	r3, r1
 8018fea:	2000      	movs	r0, #0
 8018fec:	4950      	ldr	r1, [pc, #320]	; (8019130 <__ieee754_pow+0x3c0>)
 8018fee:	f7e7 f96b 	bl	80002c8 <__aeabi_dsub>
 8018ff2:	4622      	mov	r2, r4
 8018ff4:	462b      	mov	r3, r5
 8018ff6:	4680      	mov	r8, r0
 8018ff8:	4689      	mov	r9, r1
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	4629      	mov	r1, r5
 8018ffe:	f7e7 fb1b 	bl	8000638 <__aeabi_dmul>
 8019002:	4602      	mov	r2, r0
 8019004:	460b      	mov	r3, r1
 8019006:	4640      	mov	r0, r8
 8019008:	4649      	mov	r1, r9
 801900a:	f7e7 fb15 	bl	8000638 <__aeabi_dmul>
 801900e:	a340      	add	r3, pc, #256	; (adr r3, 8019110 <__ieee754_pow+0x3a0>)
 8019010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019014:	f7e7 fb10 	bl	8000638 <__aeabi_dmul>
 8019018:	4602      	mov	r2, r0
 801901a:	460b      	mov	r3, r1
 801901c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019020:	f7e7 f952 	bl	80002c8 <__aeabi_dsub>
 8019024:	4602      	mov	r2, r0
 8019026:	460b      	mov	r3, r1
 8019028:	4604      	mov	r4, r0
 801902a:	460d      	mov	r5, r1
 801902c:	4630      	mov	r0, r6
 801902e:	4639      	mov	r1, r7
 8019030:	f7e7 f94c 	bl	80002cc <__adddf3>
 8019034:	2000      	movs	r0, #0
 8019036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801903a:	4632      	mov	r2, r6
 801903c:	463b      	mov	r3, r7
 801903e:	f7e7 f943 	bl	80002c8 <__aeabi_dsub>
 8019042:	4602      	mov	r2, r0
 8019044:	460b      	mov	r3, r1
 8019046:	4620      	mov	r0, r4
 8019048:	4629      	mov	r1, r5
 801904a:	f7e7 f93d 	bl	80002c8 <__aeabi_dsub>
 801904e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019050:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019054:	4313      	orrs	r3, r2
 8019056:	4606      	mov	r6, r0
 8019058:	460f      	mov	r7, r1
 801905a:	f040 81eb 	bne.w	8019434 <__ieee754_pow+0x6c4>
 801905e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8019118 <__ieee754_pow+0x3a8>
 8019062:	e9dd 4500 	ldrd	r4, r5, [sp]
 8019066:	2400      	movs	r4, #0
 8019068:	4622      	mov	r2, r4
 801906a:	462b      	mov	r3, r5
 801906c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019070:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019074:	f7e7 f928 	bl	80002c8 <__aeabi_dsub>
 8019078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801907c:	f7e7 fadc 	bl	8000638 <__aeabi_dmul>
 8019080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019084:	4680      	mov	r8, r0
 8019086:	4689      	mov	r9, r1
 8019088:	4630      	mov	r0, r6
 801908a:	4639      	mov	r1, r7
 801908c:	f7e7 fad4 	bl	8000638 <__aeabi_dmul>
 8019090:	4602      	mov	r2, r0
 8019092:	460b      	mov	r3, r1
 8019094:	4640      	mov	r0, r8
 8019096:	4649      	mov	r1, r9
 8019098:	f7e7 f918 	bl	80002cc <__adddf3>
 801909c:	4622      	mov	r2, r4
 801909e:	462b      	mov	r3, r5
 80190a0:	4680      	mov	r8, r0
 80190a2:	4689      	mov	r9, r1
 80190a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80190a8:	f7e7 fac6 	bl	8000638 <__aeabi_dmul>
 80190ac:	460b      	mov	r3, r1
 80190ae:	4604      	mov	r4, r0
 80190b0:	460d      	mov	r5, r1
 80190b2:	4602      	mov	r2, r0
 80190b4:	4649      	mov	r1, r9
 80190b6:	4640      	mov	r0, r8
 80190b8:	e9cd 4500 	strd	r4, r5, [sp]
 80190bc:	f7e7 f906 	bl	80002cc <__adddf3>
 80190c0:	4b1c      	ldr	r3, [pc, #112]	; (8019134 <__ieee754_pow+0x3c4>)
 80190c2:	4299      	cmp	r1, r3
 80190c4:	4606      	mov	r6, r0
 80190c6:	460f      	mov	r7, r1
 80190c8:	468b      	mov	fp, r1
 80190ca:	f340 82f7 	ble.w	80196bc <__ieee754_pow+0x94c>
 80190ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80190d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80190d6:	4303      	orrs	r3, r0
 80190d8:	f000 81ea 	beq.w	80194b0 <__ieee754_pow+0x740>
 80190dc:	a310      	add	r3, pc, #64	; (adr r3, 8019120 <__ieee754_pow+0x3b0>)
 80190de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80190e6:	f7e7 faa7 	bl	8000638 <__aeabi_dmul>
 80190ea:	a30d      	add	r3, pc, #52	; (adr r3, 8019120 <__ieee754_pow+0x3b0>)
 80190ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f0:	e6d5      	b.n	8018e9e <__ieee754_pow+0x12e>
 80190f2:	bf00      	nop
 80190f4:	f3af 8000 	nop.w
 80190f8:	60000000 	.word	0x60000000
 80190fc:	3ff71547 	.word	0x3ff71547
 8019100:	f85ddf44 	.word	0xf85ddf44
 8019104:	3e54ae0b 	.word	0x3e54ae0b
 8019108:	55555555 	.word	0x55555555
 801910c:	3fd55555 	.word	0x3fd55555
 8019110:	652b82fe 	.word	0x652b82fe
 8019114:	3ff71547 	.word	0x3ff71547
 8019118:	00000000 	.word	0x00000000
 801911c:	bff00000 	.word	0xbff00000
 8019120:	8800759c 	.word	0x8800759c
 8019124:	7e37e43c 	.word	0x7e37e43c
 8019128:	3ff00000 	.word	0x3ff00000
 801912c:	3fd00000 	.word	0x3fd00000
 8019130:	3fe00000 	.word	0x3fe00000
 8019134:	408fffff 	.word	0x408fffff
 8019138:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801913c:	f04f 0200 	mov.w	r2, #0
 8019140:	da05      	bge.n	801914e <__ieee754_pow+0x3de>
 8019142:	4bd3      	ldr	r3, [pc, #844]	; (8019490 <__ieee754_pow+0x720>)
 8019144:	f7e7 fa78 	bl	8000638 <__aeabi_dmul>
 8019148:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801914c:	460c      	mov	r4, r1
 801914e:	1523      	asrs	r3, r4, #20
 8019150:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019154:	4413      	add	r3, r2
 8019156:	9309      	str	r3, [sp, #36]	; 0x24
 8019158:	4bce      	ldr	r3, [pc, #824]	; (8019494 <__ieee754_pow+0x724>)
 801915a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801915e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8019162:	429c      	cmp	r4, r3
 8019164:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019168:	dd08      	ble.n	801917c <__ieee754_pow+0x40c>
 801916a:	4bcb      	ldr	r3, [pc, #812]	; (8019498 <__ieee754_pow+0x728>)
 801916c:	429c      	cmp	r4, r3
 801916e:	f340 815e 	ble.w	801942e <__ieee754_pow+0x6be>
 8019172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019174:	3301      	adds	r3, #1
 8019176:	9309      	str	r3, [sp, #36]	; 0x24
 8019178:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801917c:	f04f 0a00 	mov.w	sl, #0
 8019180:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8019184:	930c      	str	r3, [sp, #48]	; 0x30
 8019186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019188:	4bc4      	ldr	r3, [pc, #784]	; (801949c <__ieee754_pow+0x72c>)
 801918a:	4413      	add	r3, r2
 801918c:	ed93 7b00 	vldr	d7, [r3]
 8019190:	4629      	mov	r1, r5
 8019192:	ec53 2b17 	vmov	r2, r3, d7
 8019196:	ed8d 7b06 	vstr	d7, [sp, #24]
 801919a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801919e:	f7e7 f893 	bl	80002c8 <__aeabi_dsub>
 80191a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80191a6:	4606      	mov	r6, r0
 80191a8:	460f      	mov	r7, r1
 80191aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80191ae:	f7e7 f88d 	bl	80002cc <__adddf3>
 80191b2:	4602      	mov	r2, r0
 80191b4:	460b      	mov	r3, r1
 80191b6:	2000      	movs	r0, #0
 80191b8:	49b9      	ldr	r1, [pc, #740]	; (80194a0 <__ieee754_pow+0x730>)
 80191ba:	f7e7 fb67 	bl	800088c <__aeabi_ddiv>
 80191be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80191c2:	4602      	mov	r2, r0
 80191c4:	460b      	mov	r3, r1
 80191c6:	4630      	mov	r0, r6
 80191c8:	4639      	mov	r1, r7
 80191ca:	f7e7 fa35 	bl	8000638 <__aeabi_dmul>
 80191ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80191d2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80191d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80191da:	2300      	movs	r3, #0
 80191dc:	9302      	str	r3, [sp, #8]
 80191de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80191e2:	106d      	asrs	r5, r5, #1
 80191e4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80191e8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80191ec:	2200      	movs	r2, #0
 80191ee:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80191f2:	4640      	mov	r0, r8
 80191f4:	4649      	mov	r1, r9
 80191f6:	4614      	mov	r4, r2
 80191f8:	461d      	mov	r5, r3
 80191fa:	f7e7 fa1d 	bl	8000638 <__aeabi_dmul>
 80191fe:	4602      	mov	r2, r0
 8019200:	460b      	mov	r3, r1
 8019202:	4630      	mov	r0, r6
 8019204:	4639      	mov	r1, r7
 8019206:	f7e7 f85f 	bl	80002c8 <__aeabi_dsub>
 801920a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801920e:	4606      	mov	r6, r0
 8019210:	460f      	mov	r7, r1
 8019212:	4620      	mov	r0, r4
 8019214:	4629      	mov	r1, r5
 8019216:	f7e7 f857 	bl	80002c8 <__aeabi_dsub>
 801921a:	4602      	mov	r2, r0
 801921c:	460b      	mov	r3, r1
 801921e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019222:	f7e7 f851 	bl	80002c8 <__aeabi_dsub>
 8019226:	4642      	mov	r2, r8
 8019228:	464b      	mov	r3, r9
 801922a:	f7e7 fa05 	bl	8000638 <__aeabi_dmul>
 801922e:	4602      	mov	r2, r0
 8019230:	460b      	mov	r3, r1
 8019232:	4630      	mov	r0, r6
 8019234:	4639      	mov	r1, r7
 8019236:	f7e7 f847 	bl	80002c8 <__aeabi_dsub>
 801923a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801923e:	f7e7 f9fb 	bl	8000638 <__aeabi_dmul>
 8019242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019246:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801924a:	4610      	mov	r0, r2
 801924c:	4619      	mov	r1, r3
 801924e:	f7e7 f9f3 	bl	8000638 <__aeabi_dmul>
 8019252:	a37b      	add	r3, pc, #492	; (adr r3, 8019440 <__ieee754_pow+0x6d0>)
 8019254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019258:	4604      	mov	r4, r0
 801925a:	460d      	mov	r5, r1
 801925c:	f7e7 f9ec 	bl	8000638 <__aeabi_dmul>
 8019260:	a379      	add	r3, pc, #484	; (adr r3, 8019448 <__ieee754_pow+0x6d8>)
 8019262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019266:	f7e7 f831 	bl	80002cc <__adddf3>
 801926a:	4622      	mov	r2, r4
 801926c:	462b      	mov	r3, r5
 801926e:	f7e7 f9e3 	bl	8000638 <__aeabi_dmul>
 8019272:	a377      	add	r3, pc, #476	; (adr r3, 8019450 <__ieee754_pow+0x6e0>)
 8019274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019278:	f7e7 f828 	bl	80002cc <__adddf3>
 801927c:	4622      	mov	r2, r4
 801927e:	462b      	mov	r3, r5
 8019280:	f7e7 f9da 	bl	8000638 <__aeabi_dmul>
 8019284:	a374      	add	r3, pc, #464	; (adr r3, 8019458 <__ieee754_pow+0x6e8>)
 8019286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801928a:	f7e7 f81f 	bl	80002cc <__adddf3>
 801928e:	4622      	mov	r2, r4
 8019290:	462b      	mov	r3, r5
 8019292:	f7e7 f9d1 	bl	8000638 <__aeabi_dmul>
 8019296:	a372      	add	r3, pc, #456	; (adr r3, 8019460 <__ieee754_pow+0x6f0>)
 8019298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801929c:	f7e7 f816 	bl	80002cc <__adddf3>
 80192a0:	4622      	mov	r2, r4
 80192a2:	462b      	mov	r3, r5
 80192a4:	f7e7 f9c8 	bl	8000638 <__aeabi_dmul>
 80192a8:	a36f      	add	r3, pc, #444	; (adr r3, 8019468 <__ieee754_pow+0x6f8>)
 80192aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192ae:	f7e7 f80d 	bl	80002cc <__adddf3>
 80192b2:	4622      	mov	r2, r4
 80192b4:	4606      	mov	r6, r0
 80192b6:	460f      	mov	r7, r1
 80192b8:	462b      	mov	r3, r5
 80192ba:	4620      	mov	r0, r4
 80192bc:	4629      	mov	r1, r5
 80192be:	f7e7 f9bb 	bl	8000638 <__aeabi_dmul>
 80192c2:	4602      	mov	r2, r0
 80192c4:	460b      	mov	r3, r1
 80192c6:	4630      	mov	r0, r6
 80192c8:	4639      	mov	r1, r7
 80192ca:	f7e7 f9b5 	bl	8000638 <__aeabi_dmul>
 80192ce:	4642      	mov	r2, r8
 80192d0:	4604      	mov	r4, r0
 80192d2:	460d      	mov	r5, r1
 80192d4:	464b      	mov	r3, r9
 80192d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80192da:	f7e6 fff7 	bl	80002cc <__adddf3>
 80192de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80192e2:	f7e7 f9a9 	bl	8000638 <__aeabi_dmul>
 80192e6:	4622      	mov	r2, r4
 80192e8:	462b      	mov	r3, r5
 80192ea:	f7e6 ffef 	bl	80002cc <__adddf3>
 80192ee:	4642      	mov	r2, r8
 80192f0:	4606      	mov	r6, r0
 80192f2:	460f      	mov	r7, r1
 80192f4:	464b      	mov	r3, r9
 80192f6:	4640      	mov	r0, r8
 80192f8:	4649      	mov	r1, r9
 80192fa:	f7e7 f99d 	bl	8000638 <__aeabi_dmul>
 80192fe:	2200      	movs	r2, #0
 8019300:	4b68      	ldr	r3, [pc, #416]	; (80194a4 <__ieee754_pow+0x734>)
 8019302:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019306:	f7e6 ffe1 	bl	80002cc <__adddf3>
 801930a:	4632      	mov	r2, r6
 801930c:	463b      	mov	r3, r7
 801930e:	f7e6 ffdd 	bl	80002cc <__adddf3>
 8019312:	9802      	ldr	r0, [sp, #8]
 8019314:	460d      	mov	r5, r1
 8019316:	4604      	mov	r4, r0
 8019318:	4602      	mov	r2, r0
 801931a:	460b      	mov	r3, r1
 801931c:	4640      	mov	r0, r8
 801931e:	4649      	mov	r1, r9
 8019320:	f7e7 f98a 	bl	8000638 <__aeabi_dmul>
 8019324:	2200      	movs	r2, #0
 8019326:	4680      	mov	r8, r0
 8019328:	4689      	mov	r9, r1
 801932a:	4b5e      	ldr	r3, [pc, #376]	; (80194a4 <__ieee754_pow+0x734>)
 801932c:	4620      	mov	r0, r4
 801932e:	4629      	mov	r1, r5
 8019330:	f7e6 ffca 	bl	80002c8 <__aeabi_dsub>
 8019334:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019338:	f7e6 ffc6 	bl	80002c8 <__aeabi_dsub>
 801933c:	4602      	mov	r2, r0
 801933e:	460b      	mov	r3, r1
 8019340:	4630      	mov	r0, r6
 8019342:	4639      	mov	r1, r7
 8019344:	f7e6 ffc0 	bl	80002c8 <__aeabi_dsub>
 8019348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801934c:	f7e7 f974 	bl	8000638 <__aeabi_dmul>
 8019350:	4622      	mov	r2, r4
 8019352:	4606      	mov	r6, r0
 8019354:	460f      	mov	r7, r1
 8019356:	462b      	mov	r3, r5
 8019358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801935c:	f7e7 f96c 	bl	8000638 <__aeabi_dmul>
 8019360:	4602      	mov	r2, r0
 8019362:	460b      	mov	r3, r1
 8019364:	4630      	mov	r0, r6
 8019366:	4639      	mov	r1, r7
 8019368:	f7e6 ffb0 	bl	80002cc <__adddf3>
 801936c:	4606      	mov	r6, r0
 801936e:	460f      	mov	r7, r1
 8019370:	4602      	mov	r2, r0
 8019372:	460b      	mov	r3, r1
 8019374:	4640      	mov	r0, r8
 8019376:	4649      	mov	r1, r9
 8019378:	f7e6 ffa8 	bl	80002cc <__adddf3>
 801937c:	9802      	ldr	r0, [sp, #8]
 801937e:	a33c      	add	r3, pc, #240	; (adr r3, 8019470 <__ieee754_pow+0x700>)
 8019380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019384:	4604      	mov	r4, r0
 8019386:	460d      	mov	r5, r1
 8019388:	f7e7 f956 	bl	8000638 <__aeabi_dmul>
 801938c:	4642      	mov	r2, r8
 801938e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019392:	464b      	mov	r3, r9
 8019394:	4620      	mov	r0, r4
 8019396:	4629      	mov	r1, r5
 8019398:	f7e6 ff96 	bl	80002c8 <__aeabi_dsub>
 801939c:	4602      	mov	r2, r0
 801939e:	460b      	mov	r3, r1
 80193a0:	4630      	mov	r0, r6
 80193a2:	4639      	mov	r1, r7
 80193a4:	f7e6 ff90 	bl	80002c8 <__aeabi_dsub>
 80193a8:	a333      	add	r3, pc, #204	; (adr r3, 8019478 <__ieee754_pow+0x708>)
 80193aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ae:	f7e7 f943 	bl	8000638 <__aeabi_dmul>
 80193b2:	a333      	add	r3, pc, #204	; (adr r3, 8019480 <__ieee754_pow+0x710>)
 80193b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b8:	4606      	mov	r6, r0
 80193ba:	460f      	mov	r7, r1
 80193bc:	4620      	mov	r0, r4
 80193be:	4629      	mov	r1, r5
 80193c0:	f7e7 f93a 	bl	8000638 <__aeabi_dmul>
 80193c4:	4602      	mov	r2, r0
 80193c6:	460b      	mov	r3, r1
 80193c8:	4630      	mov	r0, r6
 80193ca:	4639      	mov	r1, r7
 80193cc:	f7e6 ff7e 	bl	80002cc <__adddf3>
 80193d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193d2:	4b35      	ldr	r3, [pc, #212]	; (80194a8 <__ieee754_pow+0x738>)
 80193d4:	4413      	add	r3, r2
 80193d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193da:	f7e6 ff77 	bl	80002cc <__adddf3>
 80193de:	4604      	mov	r4, r0
 80193e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193e2:	460d      	mov	r5, r1
 80193e4:	f7e7 f8be 	bl	8000564 <__aeabi_i2d>
 80193e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80193ea:	4b30      	ldr	r3, [pc, #192]	; (80194ac <__ieee754_pow+0x73c>)
 80193ec:	4413      	add	r3, r2
 80193ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80193f2:	4606      	mov	r6, r0
 80193f4:	460f      	mov	r7, r1
 80193f6:	4622      	mov	r2, r4
 80193f8:	462b      	mov	r3, r5
 80193fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80193fe:	f7e6 ff65 	bl	80002cc <__adddf3>
 8019402:	4642      	mov	r2, r8
 8019404:	464b      	mov	r3, r9
 8019406:	f7e6 ff61 	bl	80002cc <__adddf3>
 801940a:	4632      	mov	r2, r6
 801940c:	463b      	mov	r3, r7
 801940e:	f7e6 ff5d 	bl	80002cc <__adddf3>
 8019412:	9802      	ldr	r0, [sp, #8]
 8019414:	4632      	mov	r2, r6
 8019416:	463b      	mov	r3, r7
 8019418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801941c:	f7e6 ff54 	bl	80002c8 <__aeabi_dsub>
 8019420:	4642      	mov	r2, r8
 8019422:	464b      	mov	r3, r9
 8019424:	f7e6 ff50 	bl	80002c8 <__aeabi_dsub>
 8019428:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801942c:	e607      	b.n	801903e <__ieee754_pow+0x2ce>
 801942e:	f04f 0a01 	mov.w	sl, #1
 8019432:	e6a5      	b.n	8019180 <__ieee754_pow+0x410>
 8019434:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8019488 <__ieee754_pow+0x718>
 8019438:	e613      	b.n	8019062 <__ieee754_pow+0x2f2>
 801943a:	bf00      	nop
 801943c:	f3af 8000 	nop.w
 8019440:	4a454eef 	.word	0x4a454eef
 8019444:	3fca7e28 	.word	0x3fca7e28
 8019448:	93c9db65 	.word	0x93c9db65
 801944c:	3fcd864a 	.word	0x3fcd864a
 8019450:	a91d4101 	.word	0xa91d4101
 8019454:	3fd17460 	.word	0x3fd17460
 8019458:	518f264d 	.word	0x518f264d
 801945c:	3fd55555 	.word	0x3fd55555
 8019460:	db6fabff 	.word	0xdb6fabff
 8019464:	3fdb6db6 	.word	0x3fdb6db6
 8019468:	33333303 	.word	0x33333303
 801946c:	3fe33333 	.word	0x3fe33333
 8019470:	e0000000 	.word	0xe0000000
 8019474:	3feec709 	.word	0x3feec709
 8019478:	dc3a03fd 	.word	0xdc3a03fd
 801947c:	3feec709 	.word	0x3feec709
 8019480:	145b01f5 	.word	0x145b01f5
 8019484:	be3e2fe0 	.word	0xbe3e2fe0
 8019488:	00000000 	.word	0x00000000
 801948c:	3ff00000 	.word	0x3ff00000
 8019490:	43400000 	.word	0x43400000
 8019494:	0003988e 	.word	0x0003988e
 8019498:	000bb679 	.word	0x000bb679
 801949c:	0801aec0 	.word	0x0801aec0
 80194a0:	3ff00000 	.word	0x3ff00000
 80194a4:	40080000 	.word	0x40080000
 80194a8:	0801aee0 	.word	0x0801aee0
 80194ac:	0801aed0 	.word	0x0801aed0
 80194b0:	a3b4      	add	r3, pc, #720	; (adr r3, 8019784 <__ieee754_pow+0xa14>)
 80194b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194b6:	4640      	mov	r0, r8
 80194b8:	4649      	mov	r1, r9
 80194ba:	f7e6 ff07 	bl	80002cc <__adddf3>
 80194be:	4622      	mov	r2, r4
 80194c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80194c4:	462b      	mov	r3, r5
 80194c6:	4630      	mov	r0, r6
 80194c8:	4639      	mov	r1, r7
 80194ca:	f7e6 fefd 	bl	80002c8 <__aeabi_dsub>
 80194ce:	4602      	mov	r2, r0
 80194d0:	460b      	mov	r3, r1
 80194d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80194d6:	f7e7 fb3f 	bl	8000b58 <__aeabi_dcmpgt>
 80194da:	2800      	cmp	r0, #0
 80194dc:	f47f adfe 	bne.w	80190dc <__ieee754_pow+0x36c>
 80194e0:	4aa3      	ldr	r2, [pc, #652]	; (8019770 <__ieee754_pow+0xa00>)
 80194e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80194e6:	4293      	cmp	r3, r2
 80194e8:	f340 810a 	ble.w	8019700 <__ieee754_pow+0x990>
 80194ec:	151b      	asrs	r3, r3, #20
 80194ee:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80194f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80194f6:	fa4a f303 	asr.w	r3, sl, r3
 80194fa:	445b      	add	r3, fp
 80194fc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019500:	4e9c      	ldr	r6, [pc, #624]	; (8019774 <__ieee754_pow+0xa04>)
 8019502:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019506:	4116      	asrs	r6, r2
 8019508:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801950c:	2000      	movs	r0, #0
 801950e:	ea23 0106 	bic.w	r1, r3, r6
 8019512:	f1c2 0214 	rsb	r2, r2, #20
 8019516:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801951a:	fa4a fa02 	asr.w	sl, sl, r2
 801951e:	f1bb 0f00 	cmp.w	fp, #0
 8019522:	4602      	mov	r2, r0
 8019524:	460b      	mov	r3, r1
 8019526:	4620      	mov	r0, r4
 8019528:	4629      	mov	r1, r5
 801952a:	bfb8      	it	lt
 801952c:	f1ca 0a00 	rsblt	sl, sl, #0
 8019530:	f7e6 feca 	bl	80002c8 <__aeabi_dsub>
 8019534:	e9cd 0100 	strd	r0, r1, [sp]
 8019538:	4642      	mov	r2, r8
 801953a:	464b      	mov	r3, r9
 801953c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019540:	f7e6 fec4 	bl	80002cc <__adddf3>
 8019544:	2000      	movs	r0, #0
 8019546:	a378      	add	r3, pc, #480	; (adr r3, 8019728 <__ieee754_pow+0x9b8>)
 8019548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801954c:	4604      	mov	r4, r0
 801954e:	460d      	mov	r5, r1
 8019550:	f7e7 f872 	bl	8000638 <__aeabi_dmul>
 8019554:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019558:	4606      	mov	r6, r0
 801955a:	460f      	mov	r7, r1
 801955c:	4620      	mov	r0, r4
 801955e:	4629      	mov	r1, r5
 8019560:	f7e6 feb2 	bl	80002c8 <__aeabi_dsub>
 8019564:	4602      	mov	r2, r0
 8019566:	460b      	mov	r3, r1
 8019568:	4640      	mov	r0, r8
 801956a:	4649      	mov	r1, r9
 801956c:	f7e6 feac 	bl	80002c8 <__aeabi_dsub>
 8019570:	a36f      	add	r3, pc, #444	; (adr r3, 8019730 <__ieee754_pow+0x9c0>)
 8019572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019576:	f7e7 f85f 	bl	8000638 <__aeabi_dmul>
 801957a:	a36f      	add	r3, pc, #444	; (adr r3, 8019738 <__ieee754_pow+0x9c8>)
 801957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019580:	4680      	mov	r8, r0
 8019582:	4689      	mov	r9, r1
 8019584:	4620      	mov	r0, r4
 8019586:	4629      	mov	r1, r5
 8019588:	f7e7 f856 	bl	8000638 <__aeabi_dmul>
 801958c:	4602      	mov	r2, r0
 801958e:	460b      	mov	r3, r1
 8019590:	4640      	mov	r0, r8
 8019592:	4649      	mov	r1, r9
 8019594:	f7e6 fe9a 	bl	80002cc <__adddf3>
 8019598:	4604      	mov	r4, r0
 801959a:	460d      	mov	r5, r1
 801959c:	4602      	mov	r2, r0
 801959e:	460b      	mov	r3, r1
 80195a0:	4630      	mov	r0, r6
 80195a2:	4639      	mov	r1, r7
 80195a4:	f7e6 fe92 	bl	80002cc <__adddf3>
 80195a8:	4632      	mov	r2, r6
 80195aa:	463b      	mov	r3, r7
 80195ac:	4680      	mov	r8, r0
 80195ae:	4689      	mov	r9, r1
 80195b0:	f7e6 fe8a 	bl	80002c8 <__aeabi_dsub>
 80195b4:	4602      	mov	r2, r0
 80195b6:	460b      	mov	r3, r1
 80195b8:	4620      	mov	r0, r4
 80195ba:	4629      	mov	r1, r5
 80195bc:	f7e6 fe84 	bl	80002c8 <__aeabi_dsub>
 80195c0:	4642      	mov	r2, r8
 80195c2:	4606      	mov	r6, r0
 80195c4:	460f      	mov	r7, r1
 80195c6:	464b      	mov	r3, r9
 80195c8:	4640      	mov	r0, r8
 80195ca:	4649      	mov	r1, r9
 80195cc:	f7e7 f834 	bl	8000638 <__aeabi_dmul>
 80195d0:	a35b      	add	r3, pc, #364	; (adr r3, 8019740 <__ieee754_pow+0x9d0>)
 80195d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195d6:	4604      	mov	r4, r0
 80195d8:	460d      	mov	r5, r1
 80195da:	f7e7 f82d 	bl	8000638 <__aeabi_dmul>
 80195de:	a35a      	add	r3, pc, #360	; (adr r3, 8019748 <__ieee754_pow+0x9d8>)
 80195e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e4:	f7e6 fe70 	bl	80002c8 <__aeabi_dsub>
 80195e8:	4622      	mov	r2, r4
 80195ea:	462b      	mov	r3, r5
 80195ec:	f7e7 f824 	bl	8000638 <__aeabi_dmul>
 80195f0:	a357      	add	r3, pc, #348	; (adr r3, 8019750 <__ieee754_pow+0x9e0>)
 80195f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195f6:	f7e6 fe69 	bl	80002cc <__adddf3>
 80195fa:	4622      	mov	r2, r4
 80195fc:	462b      	mov	r3, r5
 80195fe:	f7e7 f81b 	bl	8000638 <__aeabi_dmul>
 8019602:	a355      	add	r3, pc, #340	; (adr r3, 8019758 <__ieee754_pow+0x9e8>)
 8019604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019608:	f7e6 fe5e 	bl	80002c8 <__aeabi_dsub>
 801960c:	4622      	mov	r2, r4
 801960e:	462b      	mov	r3, r5
 8019610:	f7e7 f812 	bl	8000638 <__aeabi_dmul>
 8019614:	a352      	add	r3, pc, #328	; (adr r3, 8019760 <__ieee754_pow+0x9f0>)
 8019616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801961a:	f7e6 fe57 	bl	80002cc <__adddf3>
 801961e:	4622      	mov	r2, r4
 8019620:	462b      	mov	r3, r5
 8019622:	f7e7 f809 	bl	8000638 <__aeabi_dmul>
 8019626:	4602      	mov	r2, r0
 8019628:	460b      	mov	r3, r1
 801962a:	4640      	mov	r0, r8
 801962c:	4649      	mov	r1, r9
 801962e:	f7e6 fe4b 	bl	80002c8 <__aeabi_dsub>
 8019632:	4604      	mov	r4, r0
 8019634:	460d      	mov	r5, r1
 8019636:	4602      	mov	r2, r0
 8019638:	460b      	mov	r3, r1
 801963a:	4640      	mov	r0, r8
 801963c:	4649      	mov	r1, r9
 801963e:	f7e6 fffb 	bl	8000638 <__aeabi_dmul>
 8019642:	2200      	movs	r2, #0
 8019644:	e9cd 0100 	strd	r0, r1, [sp]
 8019648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801964c:	4620      	mov	r0, r4
 801964e:	4629      	mov	r1, r5
 8019650:	f7e6 fe3a 	bl	80002c8 <__aeabi_dsub>
 8019654:	4602      	mov	r2, r0
 8019656:	460b      	mov	r3, r1
 8019658:	e9dd 0100 	ldrd	r0, r1, [sp]
 801965c:	f7e7 f916 	bl	800088c <__aeabi_ddiv>
 8019660:	4632      	mov	r2, r6
 8019662:	4604      	mov	r4, r0
 8019664:	460d      	mov	r5, r1
 8019666:	463b      	mov	r3, r7
 8019668:	4640      	mov	r0, r8
 801966a:	4649      	mov	r1, r9
 801966c:	f7e6 ffe4 	bl	8000638 <__aeabi_dmul>
 8019670:	4632      	mov	r2, r6
 8019672:	463b      	mov	r3, r7
 8019674:	f7e6 fe2a 	bl	80002cc <__adddf3>
 8019678:	4602      	mov	r2, r0
 801967a:	460b      	mov	r3, r1
 801967c:	4620      	mov	r0, r4
 801967e:	4629      	mov	r1, r5
 8019680:	f7e6 fe22 	bl	80002c8 <__aeabi_dsub>
 8019684:	4642      	mov	r2, r8
 8019686:	464b      	mov	r3, r9
 8019688:	f7e6 fe1e 	bl	80002c8 <__aeabi_dsub>
 801968c:	4602      	mov	r2, r0
 801968e:	460b      	mov	r3, r1
 8019690:	2000      	movs	r0, #0
 8019692:	4939      	ldr	r1, [pc, #228]	; (8019778 <__ieee754_pow+0xa08>)
 8019694:	f7e6 fe18 	bl	80002c8 <__aeabi_dsub>
 8019698:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801969c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80196a0:	4602      	mov	r2, r0
 80196a2:	460b      	mov	r3, r1
 80196a4:	da2f      	bge.n	8019706 <__ieee754_pow+0x996>
 80196a6:	4650      	mov	r0, sl
 80196a8:	ec43 2b10 	vmov	d0, r2, r3
 80196ac:	f000 fc80 	bl	8019fb0 <scalbn>
 80196b0:	ec51 0b10 	vmov	r0, r1, d0
 80196b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80196b8:	f7ff bbf1 	b.w	8018e9e <__ieee754_pow+0x12e>
 80196bc:	4b2f      	ldr	r3, [pc, #188]	; (801977c <__ieee754_pow+0xa0c>)
 80196be:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80196c2:	429e      	cmp	r6, r3
 80196c4:	f77f af0c 	ble.w	80194e0 <__ieee754_pow+0x770>
 80196c8:	4b2d      	ldr	r3, [pc, #180]	; (8019780 <__ieee754_pow+0xa10>)
 80196ca:	440b      	add	r3, r1
 80196cc:	4303      	orrs	r3, r0
 80196ce:	d00b      	beq.n	80196e8 <__ieee754_pow+0x978>
 80196d0:	a325      	add	r3, pc, #148	; (adr r3, 8019768 <__ieee754_pow+0x9f8>)
 80196d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80196da:	f7e6 ffad 	bl	8000638 <__aeabi_dmul>
 80196de:	a322      	add	r3, pc, #136	; (adr r3, 8019768 <__ieee754_pow+0x9f8>)
 80196e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196e4:	f7ff bbdb 	b.w	8018e9e <__ieee754_pow+0x12e>
 80196e8:	4622      	mov	r2, r4
 80196ea:	462b      	mov	r3, r5
 80196ec:	f7e6 fdec 	bl	80002c8 <__aeabi_dsub>
 80196f0:	4642      	mov	r2, r8
 80196f2:	464b      	mov	r3, r9
 80196f4:	f7e7 fa26 	bl	8000b44 <__aeabi_dcmpge>
 80196f8:	2800      	cmp	r0, #0
 80196fa:	f43f aef1 	beq.w	80194e0 <__ieee754_pow+0x770>
 80196fe:	e7e7      	b.n	80196d0 <__ieee754_pow+0x960>
 8019700:	f04f 0a00 	mov.w	sl, #0
 8019704:	e718      	b.n	8019538 <__ieee754_pow+0x7c8>
 8019706:	4621      	mov	r1, r4
 8019708:	e7d4      	b.n	80196b4 <__ieee754_pow+0x944>
 801970a:	2000      	movs	r0, #0
 801970c:	491a      	ldr	r1, [pc, #104]	; (8019778 <__ieee754_pow+0xa08>)
 801970e:	f7ff bb8f 	b.w	8018e30 <__ieee754_pow+0xc0>
 8019712:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019716:	f7ff bb8b 	b.w	8018e30 <__ieee754_pow+0xc0>
 801971a:	4630      	mov	r0, r6
 801971c:	4639      	mov	r1, r7
 801971e:	f7ff bb87 	b.w	8018e30 <__ieee754_pow+0xc0>
 8019722:	4693      	mov	fp, r2
 8019724:	f7ff bb98 	b.w	8018e58 <__ieee754_pow+0xe8>
 8019728:	00000000 	.word	0x00000000
 801972c:	3fe62e43 	.word	0x3fe62e43
 8019730:	fefa39ef 	.word	0xfefa39ef
 8019734:	3fe62e42 	.word	0x3fe62e42
 8019738:	0ca86c39 	.word	0x0ca86c39
 801973c:	be205c61 	.word	0xbe205c61
 8019740:	72bea4d0 	.word	0x72bea4d0
 8019744:	3e663769 	.word	0x3e663769
 8019748:	c5d26bf1 	.word	0xc5d26bf1
 801974c:	3ebbbd41 	.word	0x3ebbbd41
 8019750:	af25de2c 	.word	0xaf25de2c
 8019754:	3f11566a 	.word	0x3f11566a
 8019758:	16bebd93 	.word	0x16bebd93
 801975c:	3f66c16c 	.word	0x3f66c16c
 8019760:	5555553e 	.word	0x5555553e
 8019764:	3fc55555 	.word	0x3fc55555
 8019768:	c2f8f359 	.word	0xc2f8f359
 801976c:	01a56e1f 	.word	0x01a56e1f
 8019770:	3fe00000 	.word	0x3fe00000
 8019774:	000fffff 	.word	0x000fffff
 8019778:	3ff00000 	.word	0x3ff00000
 801977c:	4090cbff 	.word	0x4090cbff
 8019780:	3f6f3400 	.word	0x3f6f3400
 8019784:	652b82fe 	.word	0x652b82fe
 8019788:	3c971547 	.word	0x3c971547

0801978c <__ieee754_sqrt>:
 801978c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019790:	4955      	ldr	r1, [pc, #340]	; (80198e8 <__ieee754_sqrt+0x15c>)
 8019792:	ec55 4b10 	vmov	r4, r5, d0
 8019796:	43a9      	bics	r1, r5
 8019798:	462b      	mov	r3, r5
 801979a:	462a      	mov	r2, r5
 801979c:	d112      	bne.n	80197c4 <__ieee754_sqrt+0x38>
 801979e:	ee10 2a10 	vmov	r2, s0
 80197a2:	ee10 0a10 	vmov	r0, s0
 80197a6:	4629      	mov	r1, r5
 80197a8:	f7e6 ff46 	bl	8000638 <__aeabi_dmul>
 80197ac:	4602      	mov	r2, r0
 80197ae:	460b      	mov	r3, r1
 80197b0:	4620      	mov	r0, r4
 80197b2:	4629      	mov	r1, r5
 80197b4:	f7e6 fd8a 	bl	80002cc <__adddf3>
 80197b8:	4604      	mov	r4, r0
 80197ba:	460d      	mov	r5, r1
 80197bc:	ec45 4b10 	vmov	d0, r4, r5
 80197c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197c4:	2d00      	cmp	r5, #0
 80197c6:	ee10 0a10 	vmov	r0, s0
 80197ca:	4621      	mov	r1, r4
 80197cc:	dc0f      	bgt.n	80197ee <__ieee754_sqrt+0x62>
 80197ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80197d2:	4330      	orrs	r0, r6
 80197d4:	d0f2      	beq.n	80197bc <__ieee754_sqrt+0x30>
 80197d6:	b155      	cbz	r5, 80197ee <__ieee754_sqrt+0x62>
 80197d8:	ee10 2a10 	vmov	r2, s0
 80197dc:	4620      	mov	r0, r4
 80197de:	4629      	mov	r1, r5
 80197e0:	f7e6 fd72 	bl	80002c8 <__aeabi_dsub>
 80197e4:	4602      	mov	r2, r0
 80197e6:	460b      	mov	r3, r1
 80197e8:	f7e7 f850 	bl	800088c <__aeabi_ddiv>
 80197ec:	e7e4      	b.n	80197b8 <__ieee754_sqrt+0x2c>
 80197ee:	151b      	asrs	r3, r3, #20
 80197f0:	d073      	beq.n	80198da <__ieee754_sqrt+0x14e>
 80197f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80197f6:	07dd      	lsls	r5, r3, #31
 80197f8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80197fc:	bf48      	it	mi
 80197fe:	0fc8      	lsrmi	r0, r1, #31
 8019800:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019804:	bf44      	itt	mi
 8019806:	0049      	lslmi	r1, r1, #1
 8019808:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801980c:	2500      	movs	r5, #0
 801980e:	1058      	asrs	r0, r3, #1
 8019810:	0fcb      	lsrs	r3, r1, #31
 8019812:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019816:	0049      	lsls	r1, r1, #1
 8019818:	2316      	movs	r3, #22
 801981a:	462c      	mov	r4, r5
 801981c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019820:	19a7      	adds	r7, r4, r6
 8019822:	4297      	cmp	r7, r2
 8019824:	bfde      	ittt	le
 8019826:	19bc      	addle	r4, r7, r6
 8019828:	1bd2      	suble	r2, r2, r7
 801982a:	19ad      	addle	r5, r5, r6
 801982c:	0fcf      	lsrs	r7, r1, #31
 801982e:	3b01      	subs	r3, #1
 8019830:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019834:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019838:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801983c:	d1f0      	bne.n	8019820 <__ieee754_sqrt+0x94>
 801983e:	f04f 0c20 	mov.w	ip, #32
 8019842:	469e      	mov	lr, r3
 8019844:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019848:	42a2      	cmp	r2, r4
 801984a:	eb06 070e 	add.w	r7, r6, lr
 801984e:	dc02      	bgt.n	8019856 <__ieee754_sqrt+0xca>
 8019850:	d112      	bne.n	8019878 <__ieee754_sqrt+0xec>
 8019852:	428f      	cmp	r7, r1
 8019854:	d810      	bhi.n	8019878 <__ieee754_sqrt+0xec>
 8019856:	2f00      	cmp	r7, #0
 8019858:	eb07 0e06 	add.w	lr, r7, r6
 801985c:	da42      	bge.n	80198e4 <__ieee754_sqrt+0x158>
 801985e:	f1be 0f00 	cmp.w	lr, #0
 8019862:	db3f      	blt.n	80198e4 <__ieee754_sqrt+0x158>
 8019864:	f104 0801 	add.w	r8, r4, #1
 8019868:	1b12      	subs	r2, r2, r4
 801986a:	428f      	cmp	r7, r1
 801986c:	bf88      	it	hi
 801986e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019872:	1bc9      	subs	r1, r1, r7
 8019874:	4433      	add	r3, r6
 8019876:	4644      	mov	r4, r8
 8019878:	0052      	lsls	r2, r2, #1
 801987a:	f1bc 0c01 	subs.w	ip, ip, #1
 801987e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8019882:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8019886:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801988a:	d1dd      	bne.n	8019848 <__ieee754_sqrt+0xbc>
 801988c:	430a      	orrs	r2, r1
 801988e:	d006      	beq.n	801989e <__ieee754_sqrt+0x112>
 8019890:	1c5c      	adds	r4, r3, #1
 8019892:	bf13      	iteet	ne
 8019894:	3301      	addne	r3, #1
 8019896:	3501      	addeq	r5, #1
 8019898:	4663      	moveq	r3, ip
 801989a:	f023 0301 	bicne.w	r3, r3, #1
 801989e:	106a      	asrs	r2, r5, #1
 80198a0:	085b      	lsrs	r3, r3, #1
 80198a2:	07e9      	lsls	r1, r5, #31
 80198a4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80198a8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80198ac:	bf48      	it	mi
 80198ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80198b2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80198b6:	461c      	mov	r4, r3
 80198b8:	e780      	b.n	80197bc <__ieee754_sqrt+0x30>
 80198ba:	0aca      	lsrs	r2, r1, #11
 80198bc:	3815      	subs	r0, #21
 80198be:	0549      	lsls	r1, r1, #21
 80198c0:	2a00      	cmp	r2, #0
 80198c2:	d0fa      	beq.n	80198ba <__ieee754_sqrt+0x12e>
 80198c4:	02d6      	lsls	r6, r2, #11
 80198c6:	d50a      	bpl.n	80198de <__ieee754_sqrt+0x152>
 80198c8:	f1c3 0420 	rsb	r4, r3, #32
 80198cc:	fa21 f404 	lsr.w	r4, r1, r4
 80198d0:	1e5d      	subs	r5, r3, #1
 80198d2:	4099      	lsls	r1, r3
 80198d4:	4322      	orrs	r2, r4
 80198d6:	1b43      	subs	r3, r0, r5
 80198d8:	e78b      	b.n	80197f2 <__ieee754_sqrt+0x66>
 80198da:	4618      	mov	r0, r3
 80198dc:	e7f0      	b.n	80198c0 <__ieee754_sqrt+0x134>
 80198de:	0052      	lsls	r2, r2, #1
 80198e0:	3301      	adds	r3, #1
 80198e2:	e7ef      	b.n	80198c4 <__ieee754_sqrt+0x138>
 80198e4:	46a0      	mov	r8, r4
 80198e6:	e7bf      	b.n	8019868 <__ieee754_sqrt+0xdc>
 80198e8:	7ff00000 	.word	0x7ff00000

080198ec <__ieee754_powf>:
 80198ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198f0:	ee10 5a90 	vmov	r5, s1
 80198f4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80198f8:	ed2d 8b02 	vpush	{d8}
 80198fc:	eeb0 8a40 	vmov.f32	s16, s0
 8019900:	eef0 8a60 	vmov.f32	s17, s1
 8019904:	f000 8293 	beq.w	8019e2e <__ieee754_powf+0x542>
 8019908:	ee10 8a10 	vmov	r8, s0
 801990c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8019910:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019914:	dc06      	bgt.n	8019924 <__ieee754_powf+0x38>
 8019916:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801991a:	dd0a      	ble.n	8019932 <__ieee754_powf+0x46>
 801991c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019920:	f000 8285 	beq.w	8019e2e <__ieee754_powf+0x542>
 8019924:	ecbd 8b02 	vpop	{d8}
 8019928:	48d9      	ldr	r0, [pc, #868]	; (8019c90 <__ieee754_powf+0x3a4>)
 801992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801992e:	f000 bbc7 	b.w	801a0c0 <nanf>
 8019932:	f1b8 0f00 	cmp.w	r8, #0
 8019936:	da1d      	bge.n	8019974 <__ieee754_powf+0x88>
 8019938:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801993c:	da2c      	bge.n	8019998 <__ieee754_powf+0xac>
 801993e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019942:	db30      	blt.n	80199a6 <__ieee754_powf+0xba>
 8019944:	15fb      	asrs	r3, r7, #23
 8019946:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801994a:	fa47 f603 	asr.w	r6, r7, r3
 801994e:	fa06 f303 	lsl.w	r3, r6, r3
 8019952:	42bb      	cmp	r3, r7
 8019954:	d127      	bne.n	80199a6 <__ieee754_powf+0xba>
 8019956:	f006 0601 	and.w	r6, r6, #1
 801995a:	f1c6 0602 	rsb	r6, r6, #2
 801995e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019962:	d122      	bne.n	80199aa <__ieee754_powf+0xbe>
 8019964:	2d00      	cmp	r5, #0
 8019966:	f280 8268 	bge.w	8019e3a <__ieee754_powf+0x54e>
 801996a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801996e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019972:	e00d      	b.n	8019990 <__ieee754_powf+0xa4>
 8019974:	2600      	movs	r6, #0
 8019976:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801997a:	d1f0      	bne.n	801995e <__ieee754_powf+0x72>
 801997c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019980:	f000 8255 	beq.w	8019e2e <__ieee754_powf+0x542>
 8019984:	dd0a      	ble.n	801999c <__ieee754_powf+0xb0>
 8019986:	2d00      	cmp	r5, #0
 8019988:	f280 8254 	bge.w	8019e34 <__ieee754_powf+0x548>
 801998c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019c94 <__ieee754_powf+0x3a8>
 8019990:	ecbd 8b02 	vpop	{d8}
 8019994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019998:	2602      	movs	r6, #2
 801999a:	e7ec      	b.n	8019976 <__ieee754_powf+0x8a>
 801999c:	2d00      	cmp	r5, #0
 801999e:	daf5      	bge.n	801998c <__ieee754_powf+0xa0>
 80199a0:	eeb1 0a68 	vneg.f32	s0, s17
 80199a4:	e7f4      	b.n	8019990 <__ieee754_powf+0xa4>
 80199a6:	2600      	movs	r6, #0
 80199a8:	e7d9      	b.n	801995e <__ieee754_powf+0x72>
 80199aa:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80199ae:	d102      	bne.n	80199b6 <__ieee754_powf+0xca>
 80199b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80199b4:	e7ec      	b.n	8019990 <__ieee754_powf+0xa4>
 80199b6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80199ba:	eeb0 0a48 	vmov.f32	s0, s16
 80199be:	d108      	bne.n	80199d2 <__ieee754_powf+0xe6>
 80199c0:	f1b8 0f00 	cmp.w	r8, #0
 80199c4:	db05      	blt.n	80199d2 <__ieee754_powf+0xe6>
 80199c6:	ecbd 8b02 	vpop	{d8}
 80199ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80199ce:	f000 ba4d 	b.w	8019e6c <__ieee754_sqrtf>
 80199d2:	f000 fb63 	bl	801a09c <fabsf>
 80199d6:	b124      	cbz	r4, 80199e2 <__ieee754_powf+0xf6>
 80199d8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80199dc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80199e0:	d117      	bne.n	8019a12 <__ieee754_powf+0x126>
 80199e2:	2d00      	cmp	r5, #0
 80199e4:	bfbc      	itt	lt
 80199e6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80199ea:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80199ee:	f1b8 0f00 	cmp.w	r8, #0
 80199f2:	dacd      	bge.n	8019990 <__ieee754_powf+0xa4>
 80199f4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80199f8:	ea54 0306 	orrs.w	r3, r4, r6
 80199fc:	d104      	bne.n	8019a08 <__ieee754_powf+0x11c>
 80199fe:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019a02:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019a06:	e7c3      	b.n	8019990 <__ieee754_powf+0xa4>
 8019a08:	2e01      	cmp	r6, #1
 8019a0a:	d1c1      	bne.n	8019990 <__ieee754_powf+0xa4>
 8019a0c:	eeb1 0a40 	vneg.f32	s0, s0
 8019a10:	e7be      	b.n	8019990 <__ieee754_powf+0xa4>
 8019a12:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8019a16:	3801      	subs	r0, #1
 8019a18:	ea56 0300 	orrs.w	r3, r6, r0
 8019a1c:	d104      	bne.n	8019a28 <__ieee754_powf+0x13c>
 8019a1e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019a22:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019a26:	e7b3      	b.n	8019990 <__ieee754_powf+0xa4>
 8019a28:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8019a2c:	dd6d      	ble.n	8019b0a <__ieee754_powf+0x21e>
 8019a2e:	4b9a      	ldr	r3, [pc, #616]	; (8019c98 <__ieee754_powf+0x3ac>)
 8019a30:	429c      	cmp	r4, r3
 8019a32:	dc06      	bgt.n	8019a42 <__ieee754_powf+0x156>
 8019a34:	2d00      	cmp	r5, #0
 8019a36:	daa9      	bge.n	801998c <__ieee754_powf+0xa0>
 8019a38:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019c9c <__ieee754_powf+0x3b0>
 8019a3c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019a40:	e7a6      	b.n	8019990 <__ieee754_powf+0xa4>
 8019a42:	4b97      	ldr	r3, [pc, #604]	; (8019ca0 <__ieee754_powf+0x3b4>)
 8019a44:	429c      	cmp	r4, r3
 8019a46:	dd02      	ble.n	8019a4e <__ieee754_powf+0x162>
 8019a48:	2d00      	cmp	r5, #0
 8019a4a:	dcf5      	bgt.n	8019a38 <__ieee754_powf+0x14c>
 8019a4c:	e79e      	b.n	801998c <__ieee754_powf+0xa0>
 8019a4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019a52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019a56:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8019ca4 <__ieee754_powf+0x3b8>
 8019a5a:	eef1 6a40 	vneg.f32	s13, s0
 8019a5e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8019a62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019a66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a6a:	eee7 7a40 	vfms.f32	s15, s14, s0
 8019a6e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8019a72:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019ca8 <__ieee754_powf+0x3bc>
 8019a76:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8019a7a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019cac <__ieee754_powf+0x3c0>
 8019a7e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8019a82:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019a86:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019cb0 <__ieee754_powf+0x3c4>
 8019a8a:	eeb0 6a67 	vmov.f32	s12, s15
 8019a8e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8019a92:	ee16 3a10 	vmov	r3, s12
 8019a96:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019a9a:	f023 030f 	bic.w	r3, r3, #15
 8019a9e:	ee00 3a90 	vmov	s1, r3
 8019aa2:	eee6 0a87 	vfma.f32	s1, s13, s14
 8019aa6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019aaa:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8019aae:	f025 050f 	bic.w	r5, r5, #15
 8019ab2:	ee07 5a10 	vmov	s14, r5
 8019ab6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019aba:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019abe:	ee07 3a90 	vmov	s15, r3
 8019ac2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019ac6:	3e01      	subs	r6, #1
 8019ac8:	ea56 0200 	orrs.w	r2, r6, r0
 8019acc:	ee07 5a10 	vmov	s14, r5
 8019ad0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019ad4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019ad8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019adc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019ae0:	ee17 4a10 	vmov	r4, s14
 8019ae4:	bf08      	it	eq
 8019ae6:	eeb0 8a40 	vmoveq.f32	s16, s0
 8019aea:	2c00      	cmp	r4, #0
 8019aec:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019af0:	f340 8184 	ble.w	8019dfc <__ieee754_powf+0x510>
 8019af4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8019af8:	f340 80fc 	ble.w	8019cf4 <__ieee754_powf+0x408>
 8019afc:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019c9c <__ieee754_powf+0x3b0>
 8019b00:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019b04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019b08:	e742      	b.n	8019990 <__ieee754_powf+0xa4>
 8019b0a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8019b0e:	bfbf      	itttt	lt
 8019b10:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8019cb4 <__ieee754_powf+0x3c8>
 8019b14:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019b18:	f06f 0217 	mvnlt.w	r2, #23
 8019b1c:	ee17 4a90 	vmovlt	r4, s15
 8019b20:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8019b24:	bfa8      	it	ge
 8019b26:	2200      	movge	r2, #0
 8019b28:	3b7f      	subs	r3, #127	; 0x7f
 8019b2a:	4413      	add	r3, r2
 8019b2c:	4a62      	ldr	r2, [pc, #392]	; (8019cb8 <__ieee754_powf+0x3cc>)
 8019b2e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8019b32:	4294      	cmp	r4, r2
 8019b34:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019b38:	dd06      	ble.n	8019b48 <__ieee754_powf+0x25c>
 8019b3a:	4a60      	ldr	r2, [pc, #384]	; (8019cbc <__ieee754_powf+0x3d0>)
 8019b3c:	4294      	cmp	r4, r2
 8019b3e:	f340 80a5 	ble.w	8019c8c <__ieee754_powf+0x3a0>
 8019b42:	3301      	adds	r3, #1
 8019b44:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019b48:	2400      	movs	r4, #0
 8019b4a:	4a5d      	ldr	r2, [pc, #372]	; (8019cc0 <__ieee754_powf+0x3d4>)
 8019b4c:	00a7      	lsls	r7, r4, #2
 8019b4e:	443a      	add	r2, r7
 8019b50:	ee07 1a90 	vmov	s15, r1
 8019b54:	ed92 7a00 	vldr	s14, [r2]
 8019b58:	4a5a      	ldr	r2, [pc, #360]	; (8019cc4 <__ieee754_powf+0x3d8>)
 8019b5a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8019b5e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8019b62:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019b66:	1049      	asrs	r1, r1, #1
 8019b68:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8019b6c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8019b70:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8019b74:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8019b78:	ee06 1a10 	vmov	s12, r1
 8019b7c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8019b80:	ee14 ca90 	vmov	ip, s9
 8019b84:	ea02 0c0c 	and.w	ip, r2, ip
 8019b88:	ee05 ca10 	vmov	s10, ip
 8019b8c:	eeb1 4a45 	vneg.f32	s8, s10
 8019b90:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019b94:	ee36 6a47 	vsub.f32	s12, s12, s14
 8019b98:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019cc8 <__ieee754_powf+0x3dc>
 8019b9c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8019ba0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8019ba4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8019ba8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8019bac:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8019bb0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019ccc <__ieee754_powf+0x3e0>
 8019bb4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019bb8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019cd0 <__ieee754_powf+0x3e4>
 8019bbc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019bc0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019ca4 <__ieee754_powf+0x3b8>
 8019bc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019bc8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019cd4 <__ieee754_powf+0x3e8>
 8019bcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019bd0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019cd8 <__ieee754_powf+0x3ec>
 8019bd4:	ee75 6a24 	vadd.f32	s13, s10, s9
 8019bd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019bdc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019be0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8019be4:	eef0 7a65 	vmov.f32	s15, s11
 8019be8:	eee3 6a87 	vfma.f32	s13, s7, s14
 8019bec:	eee5 7a05 	vfma.f32	s15, s10, s10
 8019bf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019bf4:	ee17 1a90 	vmov	r1, s15
 8019bf8:	4011      	ands	r1, r2
 8019bfa:	ee07 1a90 	vmov	s15, r1
 8019bfe:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8019c02:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019cdc <__ieee754_powf+0x3f0>
 8019c06:	eea4 7a05 	vfma.f32	s14, s8, s10
 8019c0a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019c0e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019c12:	eea7 7a86 	vfma.f32	s14, s15, s12
 8019c16:	eeb0 6a47 	vmov.f32	s12, s14
 8019c1a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8019c1e:	ee16 1a10 	vmov	r1, s12
 8019c22:	4011      	ands	r1, r2
 8019c24:	ee06 1a90 	vmov	s13, r1
 8019c28:	eee4 6a27 	vfma.f32	s13, s8, s15
 8019c2c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019ce0 <__ieee754_powf+0x3f4>
 8019c30:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019c34:	ee06 1a10 	vmov	s12, r1
 8019c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c3c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019ce4 <__ieee754_powf+0x3f8>
 8019c40:	4929      	ldr	r1, [pc, #164]	; (8019ce8 <__ieee754_powf+0x3fc>)
 8019c42:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019c46:	4439      	add	r1, r7
 8019c48:	edd1 7a00 	vldr	s15, [r1]
 8019c4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019c50:	ee07 3a90 	vmov	s15, r3
 8019c54:	eef0 0a47 	vmov.f32	s1, s14
 8019c58:	4b24      	ldr	r3, [pc, #144]	; (8019cec <__ieee754_powf+0x400>)
 8019c5a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019c5e:	443b      	add	r3, r7
 8019c60:	ed93 5a00 	vldr	s10, [r3]
 8019c64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019c68:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019c6c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019c70:	ee17 3a90 	vmov	r3, s15
 8019c74:	4013      	ands	r3, r2
 8019c76:	ee07 3a90 	vmov	s15, r3
 8019c7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019c7e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019c82:	eee6 7a65 	vfms.f32	s15, s12, s11
 8019c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c8a:	e70e      	b.n	8019aaa <__ieee754_powf+0x1be>
 8019c8c:	2401      	movs	r4, #1
 8019c8e:	e75c      	b.n	8019b4a <__ieee754_powf+0x25e>
 8019c90:	0801ae1d 	.word	0x0801ae1d
 8019c94:	00000000 	.word	0x00000000
 8019c98:	3f7ffff7 	.word	0x3f7ffff7
 8019c9c:	7149f2ca 	.word	0x7149f2ca
 8019ca0:	3f800007 	.word	0x3f800007
 8019ca4:	3eaaaaab 	.word	0x3eaaaaab
 8019ca8:	36eca570 	.word	0x36eca570
 8019cac:	3fb8aa3b 	.word	0x3fb8aa3b
 8019cb0:	3fb8aa00 	.word	0x3fb8aa00
 8019cb4:	4b800000 	.word	0x4b800000
 8019cb8:	001cc471 	.word	0x001cc471
 8019cbc:	005db3d6 	.word	0x005db3d6
 8019cc0:	0801aef0 	.word	0x0801aef0
 8019cc4:	fffff000 	.word	0xfffff000
 8019cc8:	3e6c3255 	.word	0x3e6c3255
 8019ccc:	3e53f142 	.word	0x3e53f142
 8019cd0:	3e8ba305 	.word	0x3e8ba305
 8019cd4:	3edb6db7 	.word	0x3edb6db7
 8019cd8:	3f19999a 	.word	0x3f19999a
 8019cdc:	3f763800 	.word	0x3f763800
 8019ce0:	3f76384f 	.word	0x3f76384f
 8019ce4:	369dc3a0 	.word	0x369dc3a0
 8019ce8:	0801af00 	.word	0x0801af00
 8019cec:	0801aef8 	.word	0x0801aef8
 8019cf0:	3338aa3c 	.word	0x3338aa3c
 8019cf4:	f040 8092 	bne.w	8019e1c <__ieee754_powf+0x530>
 8019cf8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019cf0 <__ieee754_powf+0x404>
 8019cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019d00:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019d04:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d0c:	f73f aef6 	bgt.w	8019afc <__ieee754_powf+0x210>
 8019d10:	15db      	asrs	r3, r3, #23
 8019d12:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019d16:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019d1a:	4103      	asrs	r3, r0
 8019d1c:	4423      	add	r3, r4
 8019d1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019d22:	4947      	ldr	r1, [pc, #284]	; (8019e40 <__ieee754_powf+0x554>)
 8019d24:	3a7f      	subs	r2, #127	; 0x7f
 8019d26:	4111      	asrs	r1, r2
 8019d28:	ea23 0101 	bic.w	r1, r3, r1
 8019d2c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019d30:	ee07 1a10 	vmov	s14, r1
 8019d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019d38:	f1c2 0217 	rsb	r2, r2, #23
 8019d3c:	4110      	asrs	r0, r2
 8019d3e:	2c00      	cmp	r4, #0
 8019d40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d44:	bfb8      	it	lt
 8019d46:	4240      	neglt	r0, r0
 8019d48:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019d4c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019e44 <__ieee754_powf+0x558>
 8019d50:	ee17 3a10 	vmov	r3, s14
 8019d54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019d58:	f023 030f 	bic.w	r3, r3, #15
 8019d5c:	ee07 3a10 	vmov	s14, r3
 8019d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019d64:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019d68:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019e48 <__ieee754_powf+0x55c>
 8019d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d70:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019d74:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019e4c <__ieee754_powf+0x560>
 8019d78:	eeb0 0a67 	vmov.f32	s0, s15
 8019d7c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019d80:	eeb0 6a40 	vmov.f32	s12, s0
 8019d84:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019d88:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019d8c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019d90:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019e50 <__ieee754_powf+0x564>
 8019d94:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019e54 <__ieee754_powf+0x568>
 8019d98:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019d9c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019e58 <__ieee754_powf+0x56c>
 8019da0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019da4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019e5c <__ieee754_powf+0x570>
 8019da8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019dac:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019e60 <__ieee754_powf+0x574>
 8019db0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019db4:	eeb0 6a40 	vmov.f32	s12, s0
 8019db8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019dbc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019dc0:	eeb0 7a46 	vmov.f32	s14, s12
 8019dc4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019dc8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019dcc:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019dd0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019dd8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019ddc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019de0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019de4:	ee10 3a10 	vmov	r3, s0
 8019de8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019df0:	da1a      	bge.n	8019e28 <__ieee754_powf+0x53c>
 8019df2:	f000 f9c5 	bl	801a180 <scalbnf>
 8019df6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019dfa:	e5c9      	b.n	8019990 <__ieee754_powf+0xa4>
 8019dfc:	4a19      	ldr	r2, [pc, #100]	; (8019e64 <__ieee754_powf+0x578>)
 8019dfe:	4293      	cmp	r3, r2
 8019e00:	dd02      	ble.n	8019e08 <__ieee754_powf+0x51c>
 8019e02:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019e68 <__ieee754_powf+0x57c>
 8019e06:	e67b      	b.n	8019b00 <__ieee754_powf+0x214>
 8019e08:	d108      	bne.n	8019e1c <__ieee754_powf+0x530>
 8019e0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019e0e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e16:	f6ff af7b 	blt.w	8019d10 <__ieee754_powf+0x424>
 8019e1a:	e7f2      	b.n	8019e02 <__ieee754_powf+0x516>
 8019e1c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019e20:	f73f af76 	bgt.w	8019d10 <__ieee754_powf+0x424>
 8019e24:	2000      	movs	r0, #0
 8019e26:	e78f      	b.n	8019d48 <__ieee754_powf+0x45c>
 8019e28:	ee00 3a10 	vmov	s0, r3
 8019e2c:	e7e3      	b.n	8019df6 <__ieee754_powf+0x50a>
 8019e2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019e32:	e5ad      	b.n	8019990 <__ieee754_powf+0xa4>
 8019e34:	eeb0 0a68 	vmov.f32	s0, s17
 8019e38:	e5aa      	b.n	8019990 <__ieee754_powf+0xa4>
 8019e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8019e3e:	e5a7      	b.n	8019990 <__ieee754_powf+0xa4>
 8019e40:	007fffff 	.word	0x007fffff
 8019e44:	3f317218 	.word	0x3f317218
 8019e48:	35bfbe8c 	.word	0x35bfbe8c
 8019e4c:	3f317200 	.word	0x3f317200
 8019e50:	3331bb4c 	.word	0x3331bb4c
 8019e54:	b5ddea0e 	.word	0xb5ddea0e
 8019e58:	388ab355 	.word	0x388ab355
 8019e5c:	bb360b61 	.word	0xbb360b61
 8019e60:	3e2aaaab 	.word	0x3e2aaaab
 8019e64:	43160000 	.word	0x43160000
 8019e68:	0da24260 	.word	0x0da24260

08019e6c <__ieee754_sqrtf>:
 8019e6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019e70:	4770      	bx	lr

08019e72 <fabs>:
 8019e72:	ec51 0b10 	vmov	r0, r1, d0
 8019e76:	ee10 2a10 	vmov	r2, s0
 8019e7a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019e7e:	ec43 2b10 	vmov	d0, r2, r3
 8019e82:	4770      	bx	lr

08019e84 <finite>:
 8019e84:	ee10 3a90 	vmov	r3, s1
 8019e88:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019e8c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019e90:	0fc0      	lsrs	r0, r0, #31
 8019e92:	4770      	bx	lr

08019e94 <matherr>:
 8019e94:	2000      	movs	r0, #0
 8019e96:	4770      	bx	lr

08019e98 <nan>:
 8019e98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019ea0 <nan+0x8>
 8019e9c:	4770      	bx	lr
 8019e9e:	bf00      	nop
 8019ea0:	00000000 	.word	0x00000000
 8019ea4:	7ff80000 	.word	0x7ff80000

08019ea8 <rint>:
 8019ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019eaa:	ec51 0b10 	vmov	r0, r1, d0
 8019eae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019eb2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019eb6:	2e13      	cmp	r6, #19
 8019eb8:	460b      	mov	r3, r1
 8019eba:	ee10 4a10 	vmov	r4, s0
 8019ebe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019ec2:	dc56      	bgt.n	8019f72 <rint+0xca>
 8019ec4:	2e00      	cmp	r6, #0
 8019ec6:	da2b      	bge.n	8019f20 <rint+0x78>
 8019ec8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019ecc:	4302      	orrs	r2, r0
 8019ece:	d023      	beq.n	8019f18 <rint+0x70>
 8019ed0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019ed4:	4302      	orrs	r2, r0
 8019ed6:	4254      	negs	r4, r2
 8019ed8:	4314      	orrs	r4, r2
 8019eda:	0c4b      	lsrs	r3, r1, #17
 8019edc:	0b24      	lsrs	r4, r4, #12
 8019ede:	045b      	lsls	r3, r3, #17
 8019ee0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019ee4:	ea44 0103 	orr.w	r1, r4, r3
 8019ee8:	460b      	mov	r3, r1
 8019eea:	492f      	ldr	r1, [pc, #188]	; (8019fa8 <rint+0x100>)
 8019eec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019ef0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	4639      	mov	r1, r7
 8019ef8:	4630      	mov	r0, r6
 8019efa:	f7e6 f9e7 	bl	80002cc <__adddf3>
 8019efe:	e9cd 0100 	strd	r0, r1, [sp]
 8019f02:	463b      	mov	r3, r7
 8019f04:	4632      	mov	r2, r6
 8019f06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f0a:	f7e6 f9dd 	bl	80002c8 <__aeabi_dsub>
 8019f0e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019f12:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019f16:	4639      	mov	r1, r7
 8019f18:	ec41 0b10 	vmov	d0, r0, r1
 8019f1c:	b003      	add	sp, #12
 8019f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f20:	4a22      	ldr	r2, [pc, #136]	; (8019fac <rint+0x104>)
 8019f22:	4132      	asrs	r2, r6
 8019f24:	ea01 0702 	and.w	r7, r1, r2
 8019f28:	4307      	orrs	r7, r0
 8019f2a:	d0f5      	beq.n	8019f18 <rint+0x70>
 8019f2c:	0852      	lsrs	r2, r2, #1
 8019f2e:	4011      	ands	r1, r2
 8019f30:	430c      	orrs	r4, r1
 8019f32:	d00b      	beq.n	8019f4c <rint+0xa4>
 8019f34:	ea23 0202 	bic.w	r2, r3, r2
 8019f38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019f3c:	2e13      	cmp	r6, #19
 8019f3e:	fa43 f306 	asr.w	r3, r3, r6
 8019f42:	bf0c      	ite	eq
 8019f44:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019f48:	2400      	movne	r4, #0
 8019f4a:	4313      	orrs	r3, r2
 8019f4c:	4916      	ldr	r1, [pc, #88]	; (8019fa8 <rint+0x100>)
 8019f4e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019f52:	4622      	mov	r2, r4
 8019f54:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019f58:	4620      	mov	r0, r4
 8019f5a:	4629      	mov	r1, r5
 8019f5c:	f7e6 f9b6 	bl	80002cc <__adddf3>
 8019f60:	e9cd 0100 	strd	r0, r1, [sp]
 8019f64:	4622      	mov	r2, r4
 8019f66:	462b      	mov	r3, r5
 8019f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f6c:	f7e6 f9ac 	bl	80002c8 <__aeabi_dsub>
 8019f70:	e7d2      	b.n	8019f18 <rint+0x70>
 8019f72:	2e33      	cmp	r6, #51	; 0x33
 8019f74:	dd07      	ble.n	8019f86 <rint+0xde>
 8019f76:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019f7a:	d1cd      	bne.n	8019f18 <rint+0x70>
 8019f7c:	ee10 2a10 	vmov	r2, s0
 8019f80:	f7e6 f9a4 	bl	80002cc <__adddf3>
 8019f84:	e7c8      	b.n	8019f18 <rint+0x70>
 8019f86:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8019f8e:	40f2      	lsrs	r2, r6
 8019f90:	4210      	tst	r0, r2
 8019f92:	d0c1      	beq.n	8019f18 <rint+0x70>
 8019f94:	0852      	lsrs	r2, r2, #1
 8019f96:	4210      	tst	r0, r2
 8019f98:	bf1f      	itttt	ne
 8019f9a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019f9e:	ea20 0202 	bicne.w	r2, r0, r2
 8019fa2:	4134      	asrne	r4, r6
 8019fa4:	4314      	orrne	r4, r2
 8019fa6:	e7d1      	b.n	8019f4c <rint+0xa4>
 8019fa8:	0801af08 	.word	0x0801af08
 8019fac:	000fffff 	.word	0x000fffff

08019fb0 <scalbn>:
 8019fb0:	b570      	push	{r4, r5, r6, lr}
 8019fb2:	ec55 4b10 	vmov	r4, r5, d0
 8019fb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019fba:	4606      	mov	r6, r0
 8019fbc:	462b      	mov	r3, r5
 8019fbe:	b9aa      	cbnz	r2, 8019fec <scalbn+0x3c>
 8019fc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019fc4:	4323      	orrs	r3, r4
 8019fc6:	d03b      	beq.n	801a040 <scalbn+0x90>
 8019fc8:	4b31      	ldr	r3, [pc, #196]	; (801a090 <scalbn+0xe0>)
 8019fca:	4629      	mov	r1, r5
 8019fcc:	2200      	movs	r2, #0
 8019fce:	ee10 0a10 	vmov	r0, s0
 8019fd2:	f7e6 fb31 	bl	8000638 <__aeabi_dmul>
 8019fd6:	4b2f      	ldr	r3, [pc, #188]	; (801a094 <scalbn+0xe4>)
 8019fd8:	429e      	cmp	r6, r3
 8019fda:	4604      	mov	r4, r0
 8019fdc:	460d      	mov	r5, r1
 8019fde:	da12      	bge.n	801a006 <scalbn+0x56>
 8019fe0:	a327      	add	r3, pc, #156	; (adr r3, 801a080 <scalbn+0xd0>)
 8019fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe6:	f7e6 fb27 	bl	8000638 <__aeabi_dmul>
 8019fea:	e009      	b.n	801a000 <scalbn+0x50>
 8019fec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019ff0:	428a      	cmp	r2, r1
 8019ff2:	d10c      	bne.n	801a00e <scalbn+0x5e>
 8019ff4:	ee10 2a10 	vmov	r2, s0
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	4629      	mov	r1, r5
 8019ffc:	f7e6 f966 	bl	80002cc <__adddf3>
 801a000:	4604      	mov	r4, r0
 801a002:	460d      	mov	r5, r1
 801a004:	e01c      	b.n	801a040 <scalbn+0x90>
 801a006:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801a00a:	460b      	mov	r3, r1
 801a00c:	3a36      	subs	r2, #54	; 0x36
 801a00e:	4432      	add	r2, r6
 801a010:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a014:	428a      	cmp	r2, r1
 801a016:	dd0b      	ble.n	801a030 <scalbn+0x80>
 801a018:	ec45 4b11 	vmov	d1, r4, r5
 801a01c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801a088 <scalbn+0xd8>
 801a020:	f000 f90e 	bl	801a240 <copysign>
 801a024:	a318      	add	r3, pc, #96	; (adr r3, 801a088 <scalbn+0xd8>)
 801a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02a:	ec51 0b10 	vmov	r0, r1, d0
 801a02e:	e7da      	b.n	8019fe6 <scalbn+0x36>
 801a030:	2a00      	cmp	r2, #0
 801a032:	dd08      	ble.n	801a046 <scalbn+0x96>
 801a034:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a038:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a03c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a040:	ec45 4b10 	vmov	d0, r4, r5
 801a044:	bd70      	pop	{r4, r5, r6, pc}
 801a046:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a04a:	da0d      	bge.n	801a068 <scalbn+0xb8>
 801a04c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a050:	429e      	cmp	r6, r3
 801a052:	ec45 4b11 	vmov	d1, r4, r5
 801a056:	dce1      	bgt.n	801a01c <scalbn+0x6c>
 801a058:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801a080 <scalbn+0xd0>
 801a05c:	f000 f8f0 	bl	801a240 <copysign>
 801a060:	a307      	add	r3, pc, #28	; (adr r3, 801a080 <scalbn+0xd0>)
 801a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a066:	e7e0      	b.n	801a02a <scalbn+0x7a>
 801a068:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a06c:	3236      	adds	r2, #54	; 0x36
 801a06e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a072:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801a076:	4620      	mov	r0, r4
 801a078:	4629      	mov	r1, r5
 801a07a:	2200      	movs	r2, #0
 801a07c:	4b06      	ldr	r3, [pc, #24]	; (801a098 <scalbn+0xe8>)
 801a07e:	e7b2      	b.n	8019fe6 <scalbn+0x36>
 801a080:	c2f8f359 	.word	0xc2f8f359
 801a084:	01a56e1f 	.word	0x01a56e1f
 801a088:	8800759c 	.word	0x8800759c
 801a08c:	7e37e43c 	.word	0x7e37e43c
 801a090:	43500000 	.word	0x43500000
 801a094:	ffff3cb0 	.word	0xffff3cb0
 801a098:	3c900000 	.word	0x3c900000

0801a09c <fabsf>:
 801a09c:	ee10 3a10 	vmov	r3, s0
 801a0a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a0a4:	ee00 3a10 	vmov	s0, r3
 801a0a8:	4770      	bx	lr

0801a0aa <finitef>:
 801a0aa:	ee10 3a10 	vmov	r3, s0
 801a0ae:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801a0b2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801a0b6:	bfac      	ite	ge
 801a0b8:	2000      	movge	r0, #0
 801a0ba:	2001      	movlt	r0, #1
 801a0bc:	4770      	bx	lr
	...

0801a0c0 <nanf>:
 801a0c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a0c8 <nanf+0x8>
 801a0c4:	4770      	bx	lr
 801a0c6:	bf00      	nop
 801a0c8:	7fc00000 	.word	0x7fc00000

0801a0cc <rintf>:
 801a0cc:	b513      	push	{r0, r1, r4, lr}
 801a0ce:	ee10 1a10 	vmov	r1, s0
 801a0d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a0d6:	0ddc      	lsrs	r4, r3, #23
 801a0d8:	3c7f      	subs	r4, #127	; 0x7f
 801a0da:	2c16      	cmp	r4, #22
 801a0dc:	dc46      	bgt.n	801a16c <rintf+0xa0>
 801a0de:	b32b      	cbz	r3, 801a12c <rintf+0x60>
 801a0e0:	2c00      	cmp	r4, #0
 801a0e2:	ee10 2a10 	vmov	r2, s0
 801a0e6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801a0ea:	da21      	bge.n	801a130 <rintf+0x64>
 801a0ec:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801a0f0:	425b      	negs	r3, r3
 801a0f2:	4a21      	ldr	r2, [pc, #132]	; (801a178 <rintf+0xac>)
 801a0f4:	0a5b      	lsrs	r3, r3, #9
 801a0f6:	0d09      	lsrs	r1, r1, #20
 801a0f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a0fc:	0509      	lsls	r1, r1, #20
 801a0fe:	430b      	orrs	r3, r1
 801a100:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801a104:	ee07 3a90 	vmov	s15, r3
 801a108:	edd2 6a00 	vldr	s13, [r2]
 801a10c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801a110:	ed8d 7a01 	vstr	s14, [sp, #4]
 801a114:	eddd 7a01 	vldr	s15, [sp, #4]
 801a118:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a11c:	ee17 3a90 	vmov	r3, s15
 801a120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a124:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801a128:	ee00 3a10 	vmov	s0, r3
 801a12c:	b002      	add	sp, #8
 801a12e:	bd10      	pop	{r4, pc}
 801a130:	4b12      	ldr	r3, [pc, #72]	; (801a17c <rintf+0xb0>)
 801a132:	4123      	asrs	r3, r4
 801a134:	4219      	tst	r1, r3
 801a136:	d0f9      	beq.n	801a12c <rintf+0x60>
 801a138:	085b      	lsrs	r3, r3, #1
 801a13a:	4219      	tst	r1, r3
 801a13c:	d006      	beq.n	801a14c <rintf+0x80>
 801a13e:	ea21 0203 	bic.w	r2, r1, r3
 801a142:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801a146:	fa43 f404 	asr.w	r4, r3, r4
 801a14a:	4322      	orrs	r2, r4
 801a14c:	4b0a      	ldr	r3, [pc, #40]	; (801a178 <rintf+0xac>)
 801a14e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a152:	ed90 7a00 	vldr	s14, [r0]
 801a156:	ee07 2a90 	vmov	s15, r2
 801a15a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a15e:	edcd 7a01 	vstr	s15, [sp, #4]
 801a162:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a166:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a16a:	e7df      	b.n	801a12c <rintf+0x60>
 801a16c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a170:	d3dc      	bcc.n	801a12c <rintf+0x60>
 801a172:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a176:	e7d9      	b.n	801a12c <rintf+0x60>
 801a178:	0801af18 	.word	0x0801af18
 801a17c:	007fffff 	.word	0x007fffff

0801a180 <scalbnf>:
 801a180:	b508      	push	{r3, lr}
 801a182:	ee10 2a10 	vmov	r2, s0
 801a186:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801a18a:	ed2d 8b02 	vpush	{d8}
 801a18e:	eef0 0a40 	vmov.f32	s1, s0
 801a192:	d004      	beq.n	801a19e <scalbnf+0x1e>
 801a194:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a198:	d306      	bcc.n	801a1a8 <scalbnf+0x28>
 801a19a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801a19e:	ecbd 8b02 	vpop	{d8}
 801a1a2:	eeb0 0a60 	vmov.f32	s0, s1
 801a1a6:	bd08      	pop	{r3, pc}
 801a1a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801a1ac:	d21c      	bcs.n	801a1e8 <scalbnf+0x68>
 801a1ae:	4b1f      	ldr	r3, [pc, #124]	; (801a22c <scalbnf+0xac>)
 801a1b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a230 <scalbnf+0xb0>
 801a1b4:	4298      	cmp	r0, r3
 801a1b6:	ee60 0a27 	vmul.f32	s1, s0, s15
 801a1ba:	db10      	blt.n	801a1de <scalbnf+0x5e>
 801a1bc:	ee10 2a90 	vmov	r2, s1
 801a1c0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801a1c4:	3b19      	subs	r3, #25
 801a1c6:	4403      	add	r3, r0
 801a1c8:	2bfe      	cmp	r3, #254	; 0xfe
 801a1ca:	dd0f      	ble.n	801a1ec <scalbnf+0x6c>
 801a1cc:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801a234 <scalbnf+0xb4>
 801a1d0:	eeb0 0a48 	vmov.f32	s0, s16
 801a1d4:	f000 f843 	bl	801a25e <copysignf>
 801a1d8:	ee60 0a08 	vmul.f32	s1, s0, s16
 801a1dc:	e7df      	b.n	801a19e <scalbnf+0x1e>
 801a1de:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a238 <scalbnf+0xb8>
 801a1e2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a1e6:	e7da      	b.n	801a19e <scalbnf+0x1e>
 801a1e8:	0ddb      	lsrs	r3, r3, #23
 801a1ea:	e7ec      	b.n	801a1c6 <scalbnf+0x46>
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	dd06      	ble.n	801a1fe <scalbnf+0x7e>
 801a1f0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a1f4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a1f8:	ee00 3a90 	vmov	s1, r3
 801a1fc:	e7cf      	b.n	801a19e <scalbnf+0x1e>
 801a1fe:	f113 0f16 	cmn.w	r3, #22
 801a202:	da06      	bge.n	801a212 <scalbnf+0x92>
 801a204:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a208:	4298      	cmp	r0, r3
 801a20a:	dcdf      	bgt.n	801a1cc <scalbnf+0x4c>
 801a20c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801a238 <scalbnf+0xb8>
 801a210:	e7de      	b.n	801a1d0 <scalbnf+0x50>
 801a212:	3319      	adds	r3, #25
 801a214:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a218:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a21c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a23c <scalbnf+0xbc>
 801a220:	ee07 3a10 	vmov	s14, r3
 801a224:	ee67 0a27 	vmul.f32	s1, s14, s15
 801a228:	e7b9      	b.n	801a19e <scalbnf+0x1e>
 801a22a:	bf00      	nop
 801a22c:	ffff3cb0 	.word	0xffff3cb0
 801a230:	4c000000 	.word	0x4c000000
 801a234:	7149f2ca 	.word	0x7149f2ca
 801a238:	0da24260 	.word	0x0da24260
 801a23c:	33000000 	.word	0x33000000

0801a240 <copysign>:
 801a240:	ec51 0b10 	vmov	r0, r1, d0
 801a244:	ee11 0a90 	vmov	r0, s3
 801a248:	ee10 2a10 	vmov	r2, s0
 801a24c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a254:	ea41 0300 	orr.w	r3, r1, r0
 801a258:	ec43 2b10 	vmov	d0, r2, r3
 801a25c:	4770      	bx	lr

0801a25e <copysignf>:
 801a25e:	ee10 3a10 	vmov	r3, s0
 801a262:	ee10 2a90 	vmov	r2, s1
 801a266:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a26a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a26e:	4313      	orrs	r3, r2
 801a270:	ee00 3a10 	vmov	s0, r3
 801a274:	4770      	bx	lr
	...

0801a278 <_init>:
 801a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a27a:	bf00      	nop
 801a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a27e:	bc08      	pop	{r3}
 801a280:	469e      	mov	lr, r3
 801a282:	4770      	bx	lr

0801a284 <_fini>:
 801a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a286:	bf00      	nop
 801a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a28a:	bc08      	pop	{r3}
 801a28c:	469e      	mov	lr, r3
 801a28e:	4770      	bx	lr
