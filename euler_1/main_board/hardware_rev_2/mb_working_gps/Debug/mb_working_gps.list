
mb_working_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cc20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  0801cdf0  0801cdf0  0002cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc20  0801dc20  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc20  0801dc20  0002dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc28  0801dc28  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dc28  0801dc28  0002dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc2c  0801dc2c  0002dc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801dc30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e1b4  200001fc  0801de2c  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001e3b0  0801de2c  0003e3b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000498c0  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008cd1  00000000  00000000  00079aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002aa0  00000000  00000000  000827c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002688  00000000  00000000  00085260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034aad  00000000  00000000  000878e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030c57  00000000  00000000  000bc395  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b1ba  00000000  00000000  000ecfec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f81a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9f4  00000000  00000000  001f8224  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cdd8 	.word	0x0801cdd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801cdd8 	.word	0x0801cdd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *  Created on: Jun 12, 2020
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"

uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

	for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
		shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
		if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
			c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
		} else {
			c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
		}
		do {
			carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
			crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
			if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
			if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
			shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
		} while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
	for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
	}
	return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f977 	bl	8001350 <WriteCommand>
 8001062:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001082:	230f      	movs	r3, #15
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f95b 	bl	8001350 <WriteCommand>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9f5 	bl	80014a0 <ReadCommand>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b37      	cmp	r3, #55	; 0x37
 80010bc:	d104      	bne.n	80010c8 <EnableMotor+0xa8>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <EnableMotor+0xa8>
		status = osOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <DisableMotor>:

osStatus_t DisableMotor(){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b088      	sub	sp, #32
 80010d6:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	61fb      	str	r3, [r7, #28]
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	763b      	strb	r3, [r7, #24]
	command[1] = 0x41;
 80010e2:	2341      	movs	r3, #65	; 0x41
 80010e4:	767b      	strb	r3, [r7, #25]

	data[0] = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	753b      	strb	r3, [r7, #20]
	data[1] = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	757b      	strb	r3, [r7, #21]
	data[2] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75bb      	strb	r3, [r7, #22]
	data[3] = 0x40;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	75fb      	strb	r3, [r7, #23]

	status = WriteCommand(command, data, rx_buffer_write);
 80010f6:	463a      	mov	r2, r7
 80010f8:	f107 0114 	add.w	r1, r7, #20
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f925 	bl	8001350 <WriteCommand>
 8001106:	61f8      	str	r0, [r7, #28]

	return status;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <SetPositionMode>:

osStatus_t SetPositionMode(int8_t position_mode){
 8001112:	b580      	push	{r7, lr}
 8001114:	b08a      	sub	sp, #40	; 0x28
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 800113e:	f107 0208 	add.w	r2, r7, #8
 8001142:	f107 011c 	add.w	r1, r7, #28
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <WriteCommand>
 8001150:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001154:	4618      	mov	r0, r3
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 8001170:	237a      	movs	r3, #122	; 0x7a
 8001172:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0e1b      	lsrs	r3, r3, #24
 800117a:	b2db      	uxtb	r3, r3
 800117c:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	141b      	asrs	r3, r3, #16
 8001182:	b2db      	uxtb	r3, r3
 8001184:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	121b      	asrs	r3, r3, #8
 800118a:	b2db      	uxtb	r3, r3
 800118c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	f107 011c 	add.w	r1, r7, #28
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f8d5 	bl	8001350 <WriteCommand>
 80011a6:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 80011c0:	233f      	movs	r3, #63	; 0x3f
 80011c2:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	f107 011c 	add.w	r1, r7, #28
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8bd 	bl	8001350 <WriteCommand>
 80011d6:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011e8:	2300      	movs	r3, #0
 80011ea:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 80011f0:	230f      	movs	r3, #15
 80011f2:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f107 011c 	add.w	r1, r7, #28
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f8a5 	bl	8001350 <WriteCommand>
 8001206:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001212:	b580      	push	{r7, lr}
 8001214:	b08c      	sub	sp, #48	; 0x30
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 800122a:	2381      	movs	r3, #129	; 0x81
 800122c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0e1b      	lsrs	r3, r3, #24
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	141b      	asrs	r3, r3, #16
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f874 	bl	8001350 <WriteCommand>
 8001268:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 8001270:	2383      	movs	r3, #131	; 0x83
 8001272:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	0e1b      	lsrs	r3, r3, #24
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	141b      	asrs	r3, r3, #16
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	121b      	asrs	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800129c:	f107 0210 	add.w	r2, r7, #16
 80012a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f851 	bl	8001350 <WriteCommand>
 80012ae:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 80012b6:	2384      	movs	r3, #132	; 0x84
 80012b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0e1b      	lsrs	r3, r3, #24
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	141b      	asrs	r3, r3, #16
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	121b      	asrs	r3, r3, #8
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f82e 	bl	8001350 <WriteCommand>
 80012f4:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800130e:	2360      	movs	r3, #96	; 0x60
 8001310:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8bb 	bl	80014a0 <ReadCommand>
 800132a:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[8] +
 800132c:	7d3b      	ldrb	r3, [r7, #20]
 800132e:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 8001330:	7d7b      	ldrb	r3, [r7, #21]
 8001332:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 8001334:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 8001336:	7dbb      	ldrb	r3, [r7, #22]
 8001338:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 800133a:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8001340:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]

	return status;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8001348:	4618      	mov	r0, r3
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b092      	sub	sp, #72	; 0x48
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t byte_stream_write[14] = { 0 };
 8001362:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	819a      	strh	r2, [r3, #12]

	uint8_t dma_buffer[20] = { 0 };
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

	byte_stream_write[0] = 0x90;			// DLE
 8001380:	2390      	movs	r3, #144	; 0x90
 8001382:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_write[1] = 0x02;			// STX
 8001386:	2302      	movs	r3, #2
 8001388:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_write[2] = 0x68;			// Write Object
 800138c:	2368      	movs	r3, #104	; 0x68
 800138e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8001392:	2304      	movs	r3, #4
 8001394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	byte_stream_write[4] = 0x01;			// Node ID
 8001398:	2301      	movs	r3, #1
 800139a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_write[5] = command[1];		// Index Low Byte
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	byte_stream_write[6] = command[0];		// Index High byte
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	byte_stream_write[7] = 0x00;			// Subindex of object
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	byte_stream_write[8] = data[3];			// Data - low byte
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	byte_stream_write[9] = data[2];			// Data
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	byte_stream_write[10] = data[1];		// Data
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	785b      	ldrb	r3, [r3, #1]
 80013c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	byte_stream_write[11] = data[0];		// Data - high byte
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	6851      	ldr	r1, [r2, #4]
 80013ec:	c303      	stmia	r3!, {r0, r1}
 80013ee:	8912      	ldrh	r2, [r2, #8]
 80013f0:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	crc_calc = calculateCRC(crc_data_array, 10);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	210a      	movs	r1, #10
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fdba 	bl	8000f78 <calculateCRC>
 8001404:	4603      	mov	r3, r0
 8001406:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800140a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41


	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 8001422:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001426:	2314      	movs	r3, #20
 8001428:	220e      	movs	r2, #14
 800142a:	481c      	ldr	r0, [pc, #112]	; (800149c <WriteCommand+0x14c>)
 800142c:	f00c fcc6 	bl	800ddbc <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <WriteCommand+0x14c>)
 8001432:	f00c fecf 	bl	800e1d4 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2214      	movs	r2, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <WriteCommand+0x14c>)
 8001440:	f00c fdf0 	bl	800e024 <HAL_UART_Receive_DMA>
	osDelay(5);
 8001444:	2005      	movs	r0, #5
 8001446:	f014 fe3f 	bl	80160c8 <osDelay>
	HAL_UART_DMAStop(&huart4);
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <WriteCommand+0x14c>)
 800144c:	f00c ff08 	bl	800e260 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	461d      	mov	r5, r3
 8001454:	f107 0420 	add.w	r4, r7, #32
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	6028      	str	r0, [r5, #0]
 800145c:	6069      	str	r1, [r5, #4]
 800145e:	60aa      	str	r2, [r5, #8]
 8001460:	60eb      	str	r3, [r5, #12]
 8001462:	6820      	ldr	r0, [r4, #0]
 8001464:	6128      	str	r0, [r5, #16]

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3307      	adds	r3, #7
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3306      	adds	r3, #6
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2da      	uxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3305      	adds	r3, #5
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <WriteCommand+0x142>
		status = osOK;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return status;
 8001492:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001494:	4618      	mov	r0, r3
 8001496:	3748      	adds	r7, #72	; 0x48
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	20017db8 	.word	0x20017db8

080014a0 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	221e      	movs	r2, #30
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f019 fa1e 	bl	801a8fa <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80014be:	2390      	movs	r3, #144	; 0x90
 80014c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	byte_stream_read[1] = 0x02;				// STX
 80014c4:	2302      	movs	r3, #2
 80014c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	byte_stream_read[2] = 0x60;				// Read Object
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80014d0:	2302      	movs	r3, #2
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	byte_stream_read[4] = 0x01;				// Node ID
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_read[5] = command[1];		// Index Low Byte
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_read[6] = command[0];		// Index High byte
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_read[7] = 0x00;				// Subindex of object
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8001504:	6810      	ldr	r0, [r2, #0]
 8001506:	6018      	str	r0, [r3, #0]
 8001508:	8892      	ldrh	r2, [r2, #4]
 800150a:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	877b      	strh	r3, [r7, #58]	; 0x3a
	crc_calc = calculateCRC(crc_data_array, 6);
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2106      	movs	r1, #6
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd2e 	bl	8000f78 <calculateCRC>
 800151c:	4603      	mov	r3, r0
 800151e:	877b      	strh	r3, [r7, #58]	; 0x3a

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 8001520:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39


	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 8001534:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001538:	230a      	movs	r3, #10
 800153a:	220a      	movs	r2, #10
 800153c:	481a      	ldr	r0, [pc, #104]	; (80015a8 <ReadCommand+0x108>)
 800153e:	f00c fc3d 	bl	800ddbc <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 8001542:	4819      	ldr	r0, [pc, #100]	; (80015a8 <ReadCommand+0x108>)
 8001544:	f00c fe46 	bl	800e1d4 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2214      	movs	r2, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	; (80015a8 <ReadCommand+0x108>)
 8001552:	f00c fd67 	bl	800e024 <HAL_UART_Receive_DMA>
	osDelay(5);
 8001556:	2005      	movs	r0, #5
 8001558:	f014 fdb6 	bl	80160c8 <osDelay>
	HAL_UART_DMAStop(&huart4);
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <ReadCommand+0x108>)
 800155e:	f00c fe7f 	bl	800e260 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2214      	movs	r2, #20
 8001568:	4619      	mov	r1, r3
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f019 f9ba 	bl	801a8e4 <memcpy>


	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3307      	adds	r3, #7
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3306      	adds	r3, #6
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3305      	adds	r3, #5
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	b2da      	uxtb	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3304      	adds	r3, #4
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4313      	orrs	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <ReadCommand+0xfc>
		status = osOK;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return status;
 800159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 800159e:	4618      	mov	r0, r3
 80015a0:	3740      	adds	r7, #64	; 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20017db8 	.word	0x20017db8

080015ac <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015b4:	2303      	movs	r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e01c      	b.n	80015f4 <_gps_search_start+0x48>
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b02      	subs	r3, #2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2247      	movs	r2, #71	; 0x47
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d111      	bne.n	80015ee <_gps_search_start+0x42>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2247      	movs	r2, #71	; 0x47
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d109      	bne.n	80015ee <_gps_search_start+0x42>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2241      	movs	r2, #65	; 0x41
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <_gps_search_start+0x42>
			    return i+1;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	e008      	b.n	8001600 <_gps_search_start+0x54>
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f240 32a1 	movw	r2, #929	; 0x3a1
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dddd      	ble.n	80015ba <_gps_search_start+0xe>
			}
	return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	0000      	movs	r0, r0
	...

08001610 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]


	if (data[22] == 'N' || data[22] == 'S'){
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3316      	adds	r3, #22
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b4e      	cmp	r3, #78	; 0x4e
 8001622:	d005      	beq.n	8001630 <_parse_data+0x20>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3316      	adds	r3, #22
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b53      	cmp	r3, #83	; 0x53
 800162c:	f040 81e6 	bne.w	80019fc <_parse_data+0x3ec>

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e00c      	b.n	8001650 <_parse_data+0x40>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	440b      	add	r3, r1
 8001644:	3a30      	subs	r2, #48	; 0x30
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b45      	cmp	r3, #69	; 0x45
 8001654:	ddef      	ble.n	8001636 <_parse_data+0x26>


		dev->data.hour = data[1]*10 + data[2];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3302      	adds	r3, #2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
		dev->data.minute = data[3]*10 + data[4];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
		dev->data.second = data[5]*10 + data[6];
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3305      	adds	r3, #5
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3306      	adds	r3, #6
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	330b      	adds	r3, #11
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	330c      	adds	r3, #12
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	755a      	strb	r2, [r3, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	330d      	adds	r3, #13
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff42 	bl	8000564 <__aeabi_i2d>
 80016e0:	a3cb      	add	r3, pc, #812	; (adr r3, 8001a10 <_parse_data+0x400>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ffa7 	bl	8000638 <__aeabi_dmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	460c      	mov	r4, r1
 80016ee:	4625      	mov	r5, r4
 80016f0:	461c      	mov	r4, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	330e      	adds	r3, #14
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff33 	bl	8000564 <__aeabi_i2d>
 80016fe:	a3c6      	add	r3, pc, #792	; (adr r3, 8001a18 <_parse_data+0x408>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fddc 	bl	80002cc <__adddf3>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4625      	mov	r5, r4
 800171a:	461c      	mov	r4, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3310      	adds	r3, #16
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff1e 	bl	8000564 <__aeabi_i2d>
 8001728:	a3bd      	add	r3, pc, #756	; (adr r3, 8001a20 <_parse_data+0x410>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff83 	bl	8000638 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fdc7 	bl	80002cc <__adddf3>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4625      	mov	r5, r4
 8001744:	461c      	mov	r4, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3311      	adds	r3, #17
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff09 	bl	8000564 <__aeabi_i2d>
 8001752:	a3b5      	add	r3, pc, #724	; (adr r3, 8001a28 <_parse_data+0x418>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff6e 	bl	8000638 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fdb2 	bl	80002cc <__adddf3>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	4625      	mov	r5, r4
 800176e:	461c      	mov	r4, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3312      	adds	r3, #18
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fef4 	bl	8000564 <__aeabi_i2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4bab      	ldr	r3, [pc, #684]	; (8001a30 <_parse_data+0x420>)
 8001782:	f7fe ff59 	bl	8000638 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fd9d 	bl	80002cc <__adddf3>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4625      	mov	r5, r4
 8001798:	461c      	mov	r4, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3313      	adds	r3, #19
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fedf 	bl	8000564 <__aeabi_i2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4ba2      	ldr	r3, [pc, #648]	; (8001a34 <_parse_data+0x424>)
 80017ac:	f7fe ff44 	bl	8000638 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd88 	bl	80002cc <__adddf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	4625      	mov	r5, r4
 80017c2:	461c      	mov	r4, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3314      	adds	r3, #20
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feca 	bl	8000564 <__aeabi_i2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fd78 	bl	80002cc <__adddf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	4618      	mov	r0, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <_parse_data+0x428>)
 80017ea:	f7ff f84f 	bl	800088c <__aeabi_ddiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f7ff f9cf 	bl	8000b98 <__aeabi_d2uiz>
 80017fa:	4602      	mov	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3319      	adds	r3, #25
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	331a      	adds	r3, #26
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	771a      	strb	r2, [r3, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	331b      	adds	r3, #27
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe9d 	bl	8000564 <__aeabi_i2d>
 800182a:	a379      	add	r3, pc, #484	; (adr r3, 8001a10 <_parse_data+0x400>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff02 	bl	8000638 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	4625      	mov	r5, r4
 800183a:	461c      	mov	r4, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	331c      	adds	r3, #28
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe8e 	bl	8000564 <__aeabi_i2d>
 8001848:	a373      	add	r3, pc, #460	; (adr r3, 8001a18 <_parse_data+0x408>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fef3 	bl	8000638 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd37 	bl	80002cc <__adddf3>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	4625      	mov	r5, r4
 8001864:	461c      	mov	r4, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	331e      	adds	r3, #30
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe79 	bl	8000564 <__aeabi_i2d>
 8001872:	a36b      	add	r3, pc, #428	; (adr r3, 8001a20 <_parse_data+0x410>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fede 	bl	8000638 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd22 	bl	80002cc <__adddf3>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	4625      	mov	r5, r4
 800188e:	461c      	mov	r4, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	331f      	adds	r3, #31
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe64 	bl	8000564 <__aeabi_i2d>
 800189c:	a362      	add	r3, pc, #392	; (adr r3, 8001a28 <_parse_data+0x418>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fd0d 	bl	80002cc <__adddf3>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	4625      	mov	r5, r4
 80018b8:	461c      	mov	r4, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3320      	adds	r3, #32
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe4f 	bl	8000564 <__aeabi_i2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <_parse_data+0x420>)
 80018cc:	f7fe feb4 	bl	8000638 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcf8 	bl	80002cc <__adddf3>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	4625      	mov	r5, r4
 80018e2:	461c      	mov	r4, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	3321      	adds	r3, #33	; 0x21
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe3a 	bl	8000564 <__aeabi_i2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <_parse_data+0x424>)
 80018f6:	f7fe fe9f 	bl	8000638 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fce3 	bl	80002cc <__adddf3>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4625      	mov	r5, r4
 800190c:	461c      	mov	r4, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3322      	adds	r3, #34	; 0x22
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe25 	bl	8000564 <__aeabi_i2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcd3 	bl	80002cc <__adddf3>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <_parse_data+0x428>)
 8001934:	f7fe ffaa 	bl	800088c <__aeabi_ddiv>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f7ff f92a 	bl	8000b98 <__aeabi_d2uiz>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	621a      	str	r2, [r3, #32]

		dev->data.fix = data[38];
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3329      	adds	r3, #41	; 0x29
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4413      	add	r3, r2
 800196e:	b2da      	uxtb	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	751a      	strb	r2, [r3, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	332b      	adds	r3, #43	; 0x2b
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4413      	add	r3, r2
 8001982:	461a      	mov	r2, r3
 8001984:	0091      	lsls	r1, r2, #2
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b29a      	uxth	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	332d      	adds	r3, #45	; 0x2d
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	0089      	lsls	r1, r1, #2
 800199c:	440b      	add	r3, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	332e      	adds	r3, #46	; 0x2e
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	84da      	strh	r2, [r3, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3330      	adds	r3, #48	; 0x30
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	0091      	lsls	r1, r2, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	460b      	mov	r3, r1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3331      	adds	r3, #49	; 0x31
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	0089      	lsls	r1, r1, #2
 80019de:	440b      	add	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3332      	adds	r3, #50	; 0x32
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e004      	b.n	8001a06 <_parse_data+0x3f6>
		dev->data.fix = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00000000 	.word	0x00000000
 8001a14:	416312d0 	.word	0x416312d0
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	412e8480 	.word	0x412e8480
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40f86a00 	.word	0x40f86a00
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40c38800 	.word	0x40c38800
 8001a30:	408f4000 	.word	0x408f4000
 8001a34:	40590000 	.word	0x40590000
 8001a38:	40180000 	.word	0x40180000

08001a3c <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(dev->uart_bus);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f00c fc09 	bl	800e260 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6858      	ldr	r0, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5c:	fb03 f302 	mul.w	r3, r3, r2
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <gps_dma_init+0x44>)
 8001a62:	4413      	add	r3, r2
 8001a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f00c fadb 	bl	800e024 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00c fbae 	bl	800e1d4 <HAL_UART_DMAResume>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20008958 	.word	0x20008958

08001a84 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(dev->uart_bus);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00c fb4b 	bl	800e12c <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa0:	fb03 f302 	mul.w	r3, r3, r2
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <gps_read_sensor+0x8c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fd7f 	bl	80015ac <_gps_search_start>
 8001aae:	60f8      	str	r0, [r7, #12]
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <gps_read_sensor+0x60>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2346      	movs	r3, #70	; 0x46
 8001abe:	fb03 f302 	mul.w	r3, r3, r2
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <gps_read_sensor+0x90>)
 8001ac4:	1898      	adds	r0, r3, r2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad0:	fb03 f302 	mul.w	r3, r3, r2
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <gps_read_sensor+0x8c>)
 8001ad6:	441a      	add	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2246      	movs	r2, #70	; 0x46
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f018 ff00 	bl	801a8e4 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00c fb73 	bl	800e1d4 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2346      	movs	r3, #70	; 0x46
 8001af6:	fb03 f302 	mul.w	r3, r3, r2
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <gps_read_sensor+0x90>)
 8001afc:	4413      	add	r3, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fd85 	bl	8001610 <_parse_data>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20008958 	.word	0x20008958
 8001b14:	20008884 	.word	0x20008884

08001b18 <gps_reset>:


void gps_reset(struct gps_device *dev){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	dev->data.hour = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
	dev->data.minute = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
	dev->data.second = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]

	dev->data.lat_deg = 0;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	755a      	strb	r2, [r3, #21]
	dev->data.lat_decimal = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]

	dev->data.lon_deg = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
	dev->data.lon_decimal = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]

	dev->data.fix = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	dev->data.satellite = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	751a      	strb	r2, [r3, #20]

	dev->data.HDOP = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	84da      	strh	r2, [r3, #38]	; 0x26

	dev->data.altitude= 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	6018      	str	r0, [r3, #0]
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const long double coeff0[POLY_DEG+1] = {};
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <init_coeff+0xac>)
 8001b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001b82:	4611      	mov	r1, r2
 8001b84:	22f8      	movs	r2, #248	; 0xf8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f018 feac 	bl	801a8e4 <memcpy>
    const long double coeff1[POLY_DEG+1] = {};
 8001b8c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <init_coeff+0xb0>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	4611      	mov	r1, r2
 8001b96:	23f8      	movs	r3, #248	; 0xf8
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f018 fea3 	bl	801a8e4 <memcpy>
    const long double coeff2[POLY_DEG+1] = {};
 8001b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <init_coeff+0xb4>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	23f8      	movs	r3, #248	; 0xf8
 8001baa:	461a      	mov	r2, r3
 8001bac:	f018 fe9a 	bl	801a8e4 <memcpy>
    const long double coeff3[POLY_DEG+1] = {0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000028201512266827400983745999323449956, -0.000000000000000000000000000000000000000000000000000000000000000000000000000000000169169587081394999722992574816736963843, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000267806258884121013433549049474308717778795, 0.000000000000000000000000000000000000000000000000000000000000000000000000000156310056569105985899288991995874860995901209, -0.000000000000000000000000000000000000000000000000000000000000000000000000420781989593098999410481924748335586374112864584, -0.000000000000000000000000000000000000000000000000000000000000000000000572860174513895973807675225467011036256248527396007, 0.000000000000000000000000000000000000000000000000000000000000000000294721591265893008917159606265125757550845617787456478, 0.000000000000000000000000000000000000000000000000000000000000001462131385430680025992070570814816730592596720193171790698, 0.000000000000000000000000000000000000000000000000000000000001096110591600740018066629549842693785052522113398095235399306, -0.000000000000000000000000000000000000000000000000000000001725731829585179867490660389918973663538734923170165853320743282, -0.000000000000000000000000000000000000000000000000000004483521573247719904542525964273480990676345706714048874017774224721, -0.000000000000000000000000000000000000000000000000001828511307393350097984003197933791219521865641239921753135337682081073, 0.000000000000000000000000000000000000000000000007626773483327769523161411281655730244127601002639531677722015892685518214, 0.000000000000000000000000000000000000000000012890752715884498906150595465213574025309580078273577359118702478738492991177, -0.000000000000000000000000000000000000000003351196781005100066130584894030817234483816568341917229611562328192132993040491, -0.000000000000000000000000000000000000032688157782857599948097673837154255674109177866476450201429364646062551473687276756, -0.000000000000000000000000000000000018742040213220800120872136755681874910336266097597550445659810603981725103805983628575, 0.000000000000000000000000000000065362741029228002330069734823877649438166628309112796605973076331327593535511650537847550, 0.000000000000000000000000000068525746928614100606193437410123075133805238652851087043996671738078293740614038709324518095, -0.000000000000000000000000156682364783303998331950173525814289779487137972400167048695103917373486202002652589726494625211, -0.000000000000000000000107527358253817007694879944590430329595727063973756351966681605453191039600824296940118074417114258, 0.000000000000000000502656163258752008789341001009140755113277120360979919808097626798826240701600909233093261718750000000, -0.000000000000000610156719570548005951499611144859998469357957682351889516780829580966383218765258789062500000000000000000, 0.000000000000414126427426334024000398761411778465681317318303200636364636011421680450439453125000000000000000000000000000, -0.000000000177828483957205990623426351975619290335384192758283461444079875946044921875000000000000000000000000000000000000, 0.000000049665184343479100379224630513672056331131443585036322474479675292968750000000000000000000000000000000000000000000, -0.000008905405334945729625912083649019734821195015683770179748535156250000000000000000000000000000000000000000000000000000, 0.000985068911605107991671936851219015807146206498146057128906250000000000000000000000000000000000000000000000000000000000, -0.064843381998808694022251586375205079093575477600097656250000000000000000000000000000000000000000000000000000000000000000, 3.103069038794299849826074932934716343879699707031250000000000000000000000000000000000000000000000000000000000000000000000, 6.697333443398809649238501151558011770248413085937500000000000000000000000000000000000000000000000000000000000000000000000};
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <init_coeff+0xb8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4611      	mov	r1, r2
 8001bba:	23f8      	movs	r3, #248	; 0xf8
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f018 fe91 	bl	801a8e4 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8001bcc:	22f8      	movs	r2, #248	; 0xf8
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f018 fe88 	bl	801a8e4 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001bdc:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001be0:	22f8      	movs	r2, #248	; 0xf8
 8001be2:	4618      	mov	r0, r3
 8001be4:	f018 fe7e 	bl	801a8e4 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001bf0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001bf4:	22f8      	movs	r2, #248	; 0xf8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f018 fe74 	bl	801a8e4 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	22f8      	movs	r2, #248	; 0xf8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f018 fe6a 	bl	801a8e4 <memcpy>
}
 8001c10:	bf00      	nop
 8001c12:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0801cdf0 	.word	0x0801cdf0
 8001c20:	0801cee8 	.word	0x0801cee8
 8001c24:	0801cfe0 	.word	0x0801cfe0
 8001c28:	0801d0d8 	.word	0x0801d0d8
 8001c2c:	00000000 	.word	0x00000000

08001c30 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c34:	ed2d 8b02 	vpush	{d8}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	f040 80cd 	bne.w	8001de4 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d004      	beq.n	8001c5c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80c4 	bne.w	8001de4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc91 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c66:	a36c      	add	r3, pc, #432	; (adr r3, 8001e18 <compute_control_input+0x1e8>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe ff56 	bl	8000b1c <__aeabi_dcmplt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80b6 	beq.w	8001de4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ad 	beq.w	8001de4 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f913 	bl	8001eb6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa15 	bl	80020c0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc6e 	bl	8000588 <__aeabi_f2d>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc5a 	bl	8000588 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe fcac 	bl	8000638 <__aeabi_dmul>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe faec 	bl	80002c8 <__aeabi_dsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4698      	mov	r8, r3
 8001cf6:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc40 	bl	8000588 <__aeabi_f2d>
 8001d08:	a345      	add	r3, pc, #276	; (adr r3, 8001e20 <compute_control_input+0x1f0>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fadb 	bl	80002c8 <__aeabi_dsub>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fc8d 	bl	8000638 <__aeabi_dmul>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460c      	mov	r4, r1
 8001d22:	461a      	mov	r2, r3
 8001d24:	4623      	mov	r3, r4
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe facd 	bl	80002c8 <__aeabi_dsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460c      	mov	r4, r1
 8001d32:	4625      	mov	r5, r4
 8001d34:	461c      	mov	r4, r3
                + control_data->control_input);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc24 	bl	8000588 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fac0 	bl	80002cc <__adddf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	f7fe ff40 	bl	8000bd8 <__aeabi_d2f>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d68:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6c:	f019 f9f8 	bl	801b160 <fminf>
 8001d70:	eef0 7a40 	vmov.f32	s15, s0
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001e10 <compute_control_input+0x1e0>
 8001d7c:	f019 f9d5 	bl	801b12a <fmaxf>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f944 	bl	8002018 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	ed93 8a06 	vldr	s16, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e14 <compute_control_input+0x1e4>
 8001da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 7a07 	vldr	s14, [r3, #28]
 8001db4:	eef0 0a47 	vmov.f32	s1, s14
 8001db8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbc:	f019 f9d0 	bl	801b160 <fminf>
 8001dc0:	eef0 7a40 	vmov.f32	s15, s0
 8001dc4:	eef0 0a67 	vmov.f32	s1, s15
 8001dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dcc:	f019 f9ad 	bl	801b12a <fmaxf>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f993 	bl	8002108 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001de2:	e00d      	b.n	8001e00 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f81f 	bl	8001e28 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f85e 	bl	8001eb6 <evaluate_polyfit>
            compute_reference_error(control_data);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f960 	bl	80020c0 <compute_reference_error>
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	ecbd 8b02 	vpop	{d8}
 8001e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e0e:	bf00      	nop
 8001e10:	00000000 	.word	0x00000000
 8001e14:	3c23d70a 	.word	0x3c23d70a
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fe19999 	.word	0x3fe19999
 8001e20:	5fbf87db 	.word	0x5fbf87db
 8001e24:	3fdfb4e1 	.word	0x3fdfb4e1

08001e28 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffe3 	bl	8001e28 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fe75 	bl	8001b70 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e00d      	b.n	8001ea8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3305      	adds	r3, #5
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	441a      	add	r2, r3
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	ddee      	ble.n	8001e8c <control_data_init+0x38>
    }
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}

08001eb6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8001eb6:	b5b0      	push	{r4, r5, r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f04f 0400 	mov.w	r4, #0
 8001ec6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	e00d      	b.n	8001eec <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3305      	adds	r3, #5
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	441a      	add	r2, r3
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	f04f 0400 	mov.w	r4, #0
 8001ee2:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	ddee      	ble.n	8001ed0 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	f04f 0400 	mov.w	r4, #0
 8001efa:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e07b      	b.n	8001ffc <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb3d 	bl	8000588 <__aeabi_f2d>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f1c3 031e 	rsb	r3, r3, #30
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb23 	bl	8000564 <__aeabi_i2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ec43 2b11 	vmov	d1, r2, r3
 8001f26:	ec45 4b10 	vmov	d0, r4, r5
 8001f2a:	f019 f951 	bl	801b1d0 <pow>
 8001f2e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f4a:	f7fe fb75 	bl	8000638 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe f9b9 	bl	80002cc <__adddf3>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3327      	adds	r3, #39	; 0x27
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb5c 	bl	8000638 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe f9a0 	bl	80002cc <__adddf3>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3346      	adds	r3, #70	; 0x46
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fae:	f7fe fb43 	bl	8000638 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe f987 	bl	80002cc <__adddf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3365      	adds	r3, #101	; 0x65
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fda:	f7fe fb2d 	bl	8000638 <__aeabi_dmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fea:	f7fe f96f 	bl	80002cc <__adddf3>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b1e      	cmp	r3, #30
 8002000:	dd80      	ble.n	8001f04 <evaluate_polyfit+0x4e>
    }

    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8002002:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002006:	f7fe fde7 	bl	8000bd8 <__aeabi_d2f>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	615a      	str	r2, [r3, #20]
}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}

08002018 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe faaf 	bl	8000588 <__aeabi_f2d>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	461a      	mov	r2, r3
 8002030:	4623      	mov	r3, r4
 8002032:	a11f      	add	r1, pc, #124	; (adr r1, 80020b0 <compute_antiwindup_boundaries+0x98>)
 8002034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002038:	f7fe f946 	bl	80002c8 <__aeabi_dsub>
 800203c:	4603      	mov	r3, r0
 800203e:	460c      	mov	r4, r1
 8002040:	4618      	mov	r0, r3
 8002042:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8002044:	a31c      	add	r3, pc, #112	; (adr r3, 80020b8 <compute_antiwindup_boundaries+0xa0>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe faf5 	bl	8000638 <__aeabi_dmul>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	4618      	mov	r0, r3
 8002054:	4621      	mov	r1, r4
 8002056:	f7fe fdbf 	bl	8000bd8 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002060:	ee00 3a10 	vmov	s0, r3
 8002064:	f019 f861 	bl	801b12a <fmaxf>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa86 	bl	8000588 <__aeabi_f2d>
 800207c:	a30c      	add	r3, pc, #48	; (adr r3, 80020b0 <compute_antiwindup_boundaries+0x98>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fd69 	bl	8000b58 <__aeabi_dcmpgt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	edd3 7a07 	vldr	s15, [r3, #28]
 800209a:	eef1 7a67 	vneg.f32	s15, s15
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	f3af 8000 	nop.w
 80020b0:	e7f5e611 	.word	0xe7f5e611
 80020b4:	409598a1 	.word	0x409598a1
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3f747ae1 	.word	0x3f747ae1

080020c0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d504      	bpl.n	80020e2 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 80020e0:	e00a      	b.n	80020f8 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	0000      	movs	r0, r0
	...

08002108 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa36 	bl	8000588 <__aeabi_f2d>
 800211c:	a30c      	add	r3, pc, #48	; (adr r3, 8002150 <check_apogee_approach_phase+0x48>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fcfb 	bl	8000b1c <__aeabi_dcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8c1b      	ldrh	r3, [r3, #32]
 8002130:	3301      	adds	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8c1b      	ldrh	r3, [r3, #32]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d903      	bls.n	8002148 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fb99999 	.word	0x3fb99999

08002158 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8002160:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8002164:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002180 <init_env+0x28>
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f80d 	bl	8002188 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800216e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f82c 	bl	80021d0 <update_env>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	47c5e680 	.word	0x47c5e680
 8002184:	00000000 	.word	0x00000000

08002188 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	ed87 0a02 	vstr	s0, [r7, #8]
 8002194:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe f9f5 	bl	8000588 <__aeabi_f2d>
 800219e:	a30a      	add	r3, pc, #40	; (adr r3, 80021c8 <calibrate_env+0x40>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f892 	bl	80002cc <__adddf3>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	4618      	mov	r0, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	f7fe fd12 	bl	8000bd8 <__aeabi_d2f>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	66666666 	.word	0x66666666
 80021cc:	40711266 	.word	0x40711266

080021d0 <update_env>:

void update_env(env_t *env, float T) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f7fe f9d3 	bl	8000588 <__aeabi_f2d>
 80021e2:	a317      	add	r3, pc, #92	; (adr r3, 8002240 <update_env+0x70>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f870 	bl	80002cc <__adddf3>
 80021ec:	4603      	mov	r3, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4618      	mov	r0, r3
 80021f2:	4621      	mov	r1, r4
 80021f4:	f7fe fcf0 	bl	8000bd8 <__aeabi_d2f>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9c0 	bl	8000588 <__aeabi_f2d>
 8002208:	a30f      	add	r3, pc, #60	; (adr r3, 8002248 <update_env+0x78>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fa13 	bl	8000638 <__aeabi_dmul>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fcdd 	bl	8000bd8 <__aeabi_d2f>
 800221e:	4603      	mov	r3, r0
 8002220:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002224:	ee00 3a10 	vmov	s0, r3
 8002228:	f019 f99c 	bl	801b564 <powf>
 800222c:	eef0 7a40 	vmov.f32	s15, s0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	66666666 	.word	0x66666666
 8002244:	40711266 	.word	0x40711266
 8002248:	8c1557b7 	.word	0x8c1557b7
 800224c:	40791e2f 	.word	0x40791e2f

08002250 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800225c:	edd7 7a00 	vldr	s15, [r7]
 8002260:	eef0 6ae7 	vabs.f32	s13, s15
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	ed93 7a03 	vldr	s14, [r3, #12]
 800226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	ee07 3a90 	vmov	s15, r3
}
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e043      	b.n	8002324 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d03a      	beq.n	800231e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f96b 	bl	8000588 <__aeabi_f2d>
 80022b2:	a322      	add	r3, pc, #136	; (adr r3, 800233c <pressure2altitudeAGL+0xb4>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe fae8 	bl	800088c <__aeabi_ddiv>
 80022bc:	4603      	mov	r3, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	4625      	mov	r5, r4
 80022c2:	461c      	mov	r4, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	ed93 7a00 	vldr	s14, [r3]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022da:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002338 <pressure2altitudeAGL+0xb0>
 80022de:	eeb0 0a66 	vmov.f32	s0, s13
 80022e2:	f019 f93f 	bl	801b564 <powf>
 80022e6:	eeb0 7a40 	vmov.f32	s14, s0
 80022ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022f2:	ee17 0a90 	vmov	r0, s15
 80022f6:	f7fe f947 	bl	8000588 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fe f999 	bl	8000638 <__aeabi_dmul>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	4618      	mov	r0, r3
 800230c:	4621      	mov	r1, r4
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002314:	18d4      	adds	r4, r2, r3
 8002316:	f7fe fc5f 	bl	8000bd8 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbb7      	blt.n	800229c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bdb0      	pop	{r4, r5, r7, pc}
 8002334:	f3af 8000 	nop.w
 8002338:	3e42c4dc 	.word	0x3e42c4dc
 800233c:	76c8b439 	.word	0x76c8b439
 8002340:	3f7a9fbe 	.word	0x3f7a9fbe
 8002344:	00000000 	.word	0x00000000

08002348 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	ed2d 8b02 	vpush	{d8}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e047      	b.n	80023f0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03e      	beq.n	80023ea <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	ed93 8a00 	vldr	s16, [r3]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f903 	bl	8000588 <__aeabi_f2d>
 8002382:	a323      	add	r3, pc, #140	; (adr r3, 8002410 <altitudeAGL2pressure+0xc8>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f956 	bl	8000638 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe fa71 	bl	800088c <__aeabi_ddiv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <altitudeAGL2pressure+0xc0>)
 80023b8:	f7fd ff86 	bl	80002c8 <__aeabi_dsub>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	4618      	mov	r0, r3
 80023c2:	4621      	mov	r1, r4
 80023c4:	f7fe fc08 	bl	8000bd8 <__aeabi_d2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	eddf 0a10 	vldr	s1, [pc, #64]	; 800240c <altitudeAGL2pressure+0xc4>
 80023ce:	ee00 3a10 	vmov	s0, r3
 80023d2:	f019 f8c7 	bl	801b564 <powf>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e0:	4413      	add	r3, r2
 80023e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023e6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbb3      	blt.n	8002360 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	ecbd 8b02 	vpop	{d8}
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	3ff00000 	.word	0x3ff00000
 800240c:	40a83d87 	.word	0x40a83d87
 8002410:	76c8b439 	.word	0x76c8b439
 8002414:	3f7a9fbe 	.word	0x3f7a9fbe

08002418 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	a323      	add	r3, pc, #140	; (adr r3, 80024bc <altitude_gradient+0xa4>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f900 	bl	8000638 <__aeabi_dmul>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4625      	mov	r5, r4
 800243e:	461c      	mov	r4, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f89f 	bl	8000588 <__aeabi_f2d>
 800244a:	a31e      	add	r3, pc, #120	; (adr r3, 80024c4 <altitude_gradient+0xac>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fe f8f2 	bl	8000638 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fe fa16 	bl	800088c <__aeabi_ddiv>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4625      	mov	r5, r4
 8002466:	461c      	mov	r4, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ed97 7a00 	vldr	s14, [r7]
 8002472:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002476:	eddf 0a10 	vldr	s1, [pc, #64]	; 80024b8 <altitude_gradient+0xa0>
 800247a:	eeb0 0a66 	vmov.f32	s0, s13
 800247e:	f019 f871 	bl	801b564 <powf>
 8002482:	ee10 3a10 	vmov	r3, s0
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f8d0 	bl	8000638 <__aeabi_dmul>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	4618      	mov	r0, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	f7fe fb9a 	bl	8000bd8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	ee07 3a90 	vmov	s15, r3
}
 80024ae:	eeb0 0a67 	vmov.f32	s0, s15
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	bf4f4ec9 	.word	0xbf4f4ec9
 80024bc:	640f3ea7 	.word	0x640f3ea7
 80024c0:	c071f0fd 	.word	0xc071f0fd
 80024c4:	51eb851f 	.word	0x51eb851f
 80024c8:	40239eb8 	.word	0x40239eb8
 80024cc:	00000000 	.word	0x00000000

080024d0 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	f200 80a6 	bhi.w	8002634 <detect_flight_phase+0x164>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <detect_flight_phase+0x20>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002505 	.word	0x08002505
 80024f4:	08002635 	.word	0x08002635
 80024f8:	08002553 	.word	0x08002553
 80024fc:	0800259d 	.word	0x0800259d
 8002500:	080025e7 	.word	0x080025e7
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80026d0 <detect_flight_phase+0x200>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800251c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	dc00      	bgt.n	8002528 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002526:	e087      	b.n	8002638 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	b25a      	sxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	dd79      	ble.n	8002638 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2203      	movs	r2, #3
 8002548:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	721a      	strb	r2, [r3, #8]
        break;
 8002550:	e072      	b.n	8002638 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80026d0 <detect_flight_phase+0x200>
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d400      	bmi.n	8002572 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002570:	e064      	b.n	800263c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	dd56      	ble.n	800263c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2204      	movs	r2, #4
 8002592:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	721a      	strb	r2, [r3, #8]
        break;
 800259a:	e04f      	b.n	800263c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a8:	eddf 6a49 	vldr	s13, [pc, #292]	; 80026d0 <detect_flight_phase+0x200>
 80025ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d400      	bmi.n	80025bc <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80025ba:	e041      	b.n	8002640 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b25a      	sxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	dd33      	ble.n	8002640 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	721a      	strb	r2, [r3, #8]
        break;
 80025e4:	e02c      	b.n	8002640 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80026d0 <detect_flight_phase+0x200>
 80025f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d400      	bmi.n	800260a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002608:	e01c      	b.n	8002644 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002622:	2b03      	cmp	r3, #3
 8002624:	dd0e      	ble.n	8002644 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2206      	movs	r2, #6
 800262a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	721a      	strb	r2, [r3, #8]
        break;
 8002632:	e007      	b.n	8002644 <detect_flight_phase+0x174>

        default:
        break;
 8002634:	bf00      	nop
 8002636:	e006      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002638:	bf00      	nop
 800263a:	e004      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 800263c:	bf00      	nop
 800263e:	e002      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002644:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002652:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026d0 <detect_flight_phase+0x200>
 8002656:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800265a:	eeb0 0a66 	vmov.f32	s0, s13
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fdf6 	bl	8002250 <mach_number>
 8002664:	eef0 7a40 	vmov.f32	s15, s0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff88 	bl	8000588 <__aeabi_f2d>
 8002678:	a311      	add	r3, pc, #68	; (adr r3, 80026c0 <detect_flight_phase+0x1f0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe fa61 	bl	8000b44 <__aeabi_dcmpge>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2203      	movs	r2, #3
 800268c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 800268e:	e013      	b.n	80026b8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff77 	bl	8000588 <__aeabi_f2d>
 800269a:	a30b      	add	r3, pc, #44	; (adr r3, 80026c8 <detect_flight_phase+0x1f8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fe fa50 	bl	8000b44 <__aeabi_dcmpge>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2202      	movs	r2, #2
 80026ae:	705a      	strb	r2, [r3, #1]
}
 80026b0:	e002      	b.n	80026b8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	705a      	strb	r2, [r3, #1]
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	cccccccd 	.word	0xcccccccd
 80026c4:	3ff4cccc 	.word	0x3ff4cccc
 80026c8:	9999999a 	.word	0x9999999a
 80026cc:	3fe99999 	.word	0x3fe99999
 80026d0:	447a0000 	.word	0x447a0000

080026d4 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	721a      	strb	r2, [r3, #8]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b0b0      	sub	sp, #192	; 0xc0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800270c:	4b45      	ldr	r3, [pc, #276]	; (8002824 <reset_kf_state+0x120>)
 800270e:	f107 040c 	add.w	r4, r7, #12
 8002712:	461d      	mov	r5, r3
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <reset_kf_state+0x124>)
 8002722:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002726:	ca07      	ldmia	r2, {r0, r1, r2}
 8002728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800272c:	4a3e      	ldr	r2, [pc, #248]	; (8002828 <reset_kf_state+0x124>)
 800272e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002732:	ca07      	ldmia	r2, {r0, r1, r2}
 8002734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f107 010c 	add.w	r1, r7, #12
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	4618      	mov	r0, r3
 8002742:	f018 f8cf 	bl	801a8e4 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3348      	adds	r3, #72	; 0x48
 800274a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800274e:	220c      	movs	r2, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f018 f8c7 	bl	801a8e4 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3354      	adds	r3, #84	; 0x54
 800275a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800275e:	220c      	movs	r2, #12
 8002760:	4618      	mov	r0, r3
 8002762:	f018 f8bf 	bl	801a8e4 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <reset_kf_state+0x128>)
 8002780:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002784:	461d      	mov	r5, r3
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002798:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800279c:	220c      	movs	r2, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f018 f8a0 	bl	801a8e4 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f018 f897 	bl	801a8e4 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	33b4      	adds	r3, #180	; 0xb4
 80027ba:	2204      	movs	r2, #4
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f018 f89b 	bl	801a8fa <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	33b8      	adds	r3, #184	; 0xb8
 80027c8:	2224      	movs	r2, #36	; 0x24
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f018 f894 	bl	801a8fa <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027d8:	220c      	movs	r2, #12
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f018 f88c 	bl	801a8fa <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80027e8:	2203      	movs	r2, #3
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f018 f884 	bl	801a8fa <memset>
    kf_state->num_z_active = 0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	2103      	movs	r1, #3
 8002802:	2003      	movs	r0, #3
 8002804:	f000 fd40 	bl	8003288 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3360      	adds	r3, #96	; 0x60
 8002812:	2101      	movs	r1, #1
 8002814:	2003      	movs	r0, #3
 8002816:	f000 fd37 	bl	8003288 <transpose>
}
 800281a:	bf00      	nop
 800281c:	37c0      	adds	r7, #192	; 0xc0
 800281e:	46bd      	mov	sp, r7
 8002820:	bdb0      	pop	{r4, r5, r7, pc}
 8002822:	bf00      	nop
 8002824:	0801d1d0 	.word	0x0801d1d0
 8002828:	0801d1f4 	.word	0x0801d1f4
 800282c:	0801d200 	.word	0x0801d200

08002830 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af04      	add	r7, sp, #16
 8002836:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002846:	2201      	movs	r2, #1
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	460a      	mov	r2, r1
 8002850:	2103      	movs	r1, #3
 8002852:	2003      	movs	r0, #3
 8002854:	f000 ff42 	bl	80036dc <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800286a:	2200      	movs	r2, #0
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	460a      	mov	r2, r1
 8002874:	2101      	movs	r1, #1
 8002876:	2003      	movs	r0, #3
 8002878:	f000 ff30 	bl	80036dc <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800288a:	2101      	movs	r1, #1
 800288c:	9102      	str	r1, [sp, #8]
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	2203      	movs	r2, #3
 8002896:	2103      	movs	r1, #3
 8002898:	2003      	movs	r0, #3
 800289a:	f000 fe85 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	33b4      	adds	r3, #180	; 0xb4
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80028ae:	2101      	movs	r1, #1
 80028b0:	9102      	str	r1, [sp, #8]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	2201      	movs	r2, #1
 80028ba:	2101      	movs	r1, #1
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 fe73 	bl	80035a8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3324      	adds	r3, #36	; 0x24
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80028d2:	2101      	movs	r1, #1
 80028d4:	9102      	str	r1, [sp, #8]
 80028d6:	9201      	str	r2, [sp, #4]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4603      	mov	r3, r0
 80028dc:	2203      	movs	r2, #3
 80028de:	2103      	movs	r1, #3
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 fe61 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 700e 	add.w	r0, r3, #568	; 0x238
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3360      	adds	r3, #96	; 0x60
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80028f6:	2100      	movs	r1, #0
 80028f8:	9102      	str	r1, [sp, #8]
 80028fa:	9201      	str	r2, [sp, #4]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	2203      	movs	r2, #3
 8002902:	2101      	movs	r1, #1
 8002904:	2003      	movs	r0, #3
 8002906:	f000 fe4f 	bl	80035a8 <matmul>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	336c      	adds	r3, #108	; 0x6c
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f017 ffe9 	bl	801a8fa <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e01e      	b.n	800296c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	336c      	adds	r3, #108	; 0x6c
 800294e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e007      	b.n	8002966 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	33b8      	adds	r3, #184	; 0xb8
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b02      	cmp	r3, #2
 8002970:	dddd      	ble.n	800292e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3390      	adds	r3, #144	; 0x90
 800297c:	2103      	movs	r1, #3
 800297e:	2003      	movs	r0, #3
 8002980:	f000 fc82 	bl	8003288 <transpose>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af04      	add	r7, sp, #16
 8002992:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80029a6:	2201      	movs	r2, #1
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4603      	mov	r3, r0
 80029ae:	460a      	mov	r2, r1
 80029b0:	2103      	movs	r1, #3
 80029b2:	2003      	movs	r0, #3
 80029b4:	f000 fe92 	bl	80036dc <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80029ca:	2003      	movs	r0, #3
 80029cc:	f000 fcdb 	bl	8003386 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	f502 7211 	add.w	r2, r2, #580	; 0x244
 80029e2:	2101      	movs	r1, #1
 80029e4:	9102      	str	r1, [sp, #8]
 80029e6:	9201      	str	r2, [sp, #4]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4603      	mov	r3, r0
 80029ec:	2203      	movs	r2, #3
 80029ee:	2103      	movs	r1, #3
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 fdd9 	bl	80035a8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3390      	adds	r3, #144	; 0x90
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002a06:	2101      	movs	r1, #1
 8002a08:	9102      	str	r1, [sp, #8]
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2203      	movs	r2, #3
 8002a12:	2103      	movs	r1, #3
 8002a14:	2003      	movs	r0, #3
 8002a16:	f000 fdc7 	bl	80035a8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	2103      	movs	r1, #3
 8002a32:	2003      	movs	r0, #3
 8002a34:	f000 fcd2 	bl	80033dc <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f017 ff59 	bl	801a8fa <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a54:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002b64 <kf_update+0x1d8>
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	f001 f80a 	bl	8003a74 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3390      	adds	r3, #144	; 0x90
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002a70:	2101      	movs	r1, #1
 8002a72:	9102      	str	r1, [sp, #8]
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f000 fd92 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8002a96:	2101      	movs	r1, #1
 8002a98:	9102      	str	r1, [sp, #8]
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	2103      	movs	r1, #3
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f000 fd7f 	bl	80035a8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002abc:	2201      	movs	r2, #1
 8002abe:	9201      	str	r2, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 fe07 	bl	80036dc <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 fc25 	bl	8003330 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002aec:	4619      	mov	r1, r3
 8002aee:	2003      	movs	r0, #3
 8002af0:	f000 fb7e 	bl	80031f0 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	336c      	adds	r3, #108	; 0x6c
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002b04:	2101      	movs	r1, #1
 8002b06:	9102      	str	r1, [sp, #8]
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2203      	movs	r2, #3
 8002b10:	2103      	movs	r1, #3
 8002b12:	2003      	movs	r0, #3
 8002b14:	f000 fd48 	bl	80035a8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	2103      	movs	r1, #3
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 fcc6 	bl	80034c2 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002b48:	2101      	movs	r1, #1
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4603      	mov	r3, r0
 8002b52:	2203      	movs	r2, #3
 8002b54:	2103      	movs	r1, #3
 8002b56:	2003      	movs	r0, #3
 8002b58:	f000 fd26 	bl	80035a8 <matmul>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	38d1b717 	.word	0x38d1b717

08002b68 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002b78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c00 <update_state_est_data+0x98>
 8002b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 2a90 	vmov	r2, s15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002b92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002c00 <update_state_est_data+0x98>
 8002b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9e:	ee17 2a90 	vmov	r2, s15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002bac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c00 <update_state_est_data+0x98>
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb8:	ee17 2a90 	vmov	r2, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002bc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c00 <update_state_est_data+0x98>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd2:	ee17 2a90 	vmov	r2, s15
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002be0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c00 <update_state_est_data+0x98>
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bec:	ee17 2a90 	vmov	r2, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	447a0000 	.word	0x447a0000
 8002c04:	00000000 	.word	0x00000000

08002c08 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b095      	sub	sp, #84	; 0x54
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1a:	e09a      	b.n	8002d52 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d92b      	bls.n	8002c9c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	3362      	adds	r3, #98	; 0x62
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c88:	440b      	add	r3, r1
 8002c8a:	3b24      	subs	r3, #36	; 0x24
 8002c8c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8002c8e:	f107 0220 	add.w	r2, r7, #32
 8002c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c94:	4413      	add	r3, r2
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e01d      	b.n	8002cd8 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	3362      	adds	r3, #98	; 0x62
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b24      	subs	r3, #36	; 0x24
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8002ccc:	f107 0220 	add.w	r2, r7, #32
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4403      	add	r3, r0
 8002cf8:	333c      	adds	r3, #60	; 0x3c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	d916      	bls.n	8002d2e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3330      	adds	r3, #48	; 0x30
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3b34      	subs	r3, #52	; 0x34
 8002d1e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	4413      	add	r3, r2
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e00e      	b.n	8002d4c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d36:	4413      	add	r3, r2
 8002d38:	3b34      	subs	r3, #52	; 0x34
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002d40:	f107 0210 	add.w	r2, r7, #16
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d46:	4413      	add	r3, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	3301      	adds	r3, #1
 8002d50:	647b      	str	r3, [r7, #68]	; 0x44
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f77f af61 	ble.w	8002c1c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002d66:	461a      	mov	r2, r3
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 f96d 	bl	8003048 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8002d6e:	f107 0220 	add.w	r2, r7, #32
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 f965 	bl	8003048 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8002d7e:	f107 0210 	add.w	r2, r7, #16
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 f95d 	bl	8003048 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int num_acc_x_meas_active = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	643b      	str	r3, [r7, #64]	; 0x40

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
    int num_temp_meas_active = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002daa:	2300      	movs	r3, #0
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
 8002dae:	e047      	b.n	8002e40 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <process_measurements+0x1f6>
            u += acc_x_meas[i];
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002de4:	4413      	add	r3, r2
 8002de6:	3b34      	subs	r3, #52	; 0x34
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_acc_x_meas_active += 1;
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e06:	4413      	add	r3, r2
 8002e08:	3b24      	subs	r3, #36	; 0x24
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d010      	beq.n	8002e3a <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e20:	4413      	add	r3, r2
 8002e22:	3b24      	subs	r3, #36	; 0x24
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            num_temp_meas_active += 1;
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	3301      	adds	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	ddb4      	ble.n	8002db0 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e60:	f7ff fa12 	bl	8002288 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8002e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dd1c      	ble.n	8002ea4 <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e74:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8002e80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e82:	f7fd fb81 	bl	8000588 <__aeabi_f2d>
 8002e86:	a314      	add	r3, pc, #80	; (adr r3, 8002ed8 <process_measurements+0x2d0>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fa1c 	bl	80002c8 <__aeabi_dsub>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4618      	mov	r0, r3
 8002e96:	4621      	mov	r1, r4
 8002e98:	f7fd fe9e 	bl	8000bd8 <__aeabi_d2f>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }

    if (num_temp_meas_active > 0){
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dd0f      	ble.n	8002eca <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ebc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        update_env(env, temp_meas_mean);
 8002ec0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002ec4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ec6:	f7ff f983 	bl	80021d0 <update_env>
    }
} 
 8002eca:	bf00      	nop
 8002ecc:	374c      	adds	r7, #76	; 0x4c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	51eb851f 	.word	0x51eb851f
 8002edc:	40239eb8 	.word	0x40239eb8

08002ee0 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b091      	sub	sp, #68	; 0x44
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d823      	bhi.n	8002f40 <select_noise_models+0x60>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <select_noise_models+0x20>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f19 	.word	0x08002f19
 8002f08:	08002f23 	.word	0x08002f23
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f37 	.word	0x08002f37
 8002f14:	08002f19 	.word	0x08002f19
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <select_noise_models+0x148>)
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <select_noise_models+0x14c>)
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f20:	e00e      	b.n	8002f40 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <select_noise_models+0x150>)
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <select_noise_models+0x154>)
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f2a:	e009      	b.n	8002f40 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <select_noise_models+0x158>)
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <select_noise_models+0x15c>)
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f34:	e004      	b.n	8002f40 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <select_noise_models+0x160>)
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8002f3a:	4b42      	ldr	r3, [pc, #264]	; (8003044 <select_noise_models+0x164>)
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f3e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f44:	e01b      	b.n	8002f7e <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002f46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f48:	f7fd fb1e 	bl	8000588 <__aeabi_f2d>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8003020 <select_noise_models+0x140>
 8002f54:	ec44 3b10 	vmov	d0, r3, r4
 8002f58:	f018 f93a 	bl	801b1d0 <pow>
 8002f5c:	ec54 3b10 	vmov	r3, r4, d0
 8002f60:	4618      	mov	r0, r3
 8002f62:	4621      	mov	r1, r4
 8002f64:	f7fd fe38 	bl	8000bd8 <__aeabi_d2f>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	3316      	adds	r3, #22
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dde0      	ble.n	8002f46 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002f8a:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002f90:	f107 0114 	add.w	r1, r7, #20
 8002f94:	f107 0218 	add.w	r2, r7, #24
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff f9d0 	bl	8002348 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8002fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fa31 	bl	8002418 <altitude_gradient>
 8002fb6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8002fba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	eef0 7ae7 	vabs.f32	s15, s15
 8002fca:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	e01a      	b.n	800300a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002fd4:	6a38      	ldr	r0, [r7, #32]
 8002fd6:	f7fd fad7 	bl	8000588 <__aeabi_f2d>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8003020 <select_noise_models+0x140>
 8002fe2:	ec44 3b10 	vmov	d0, r3, r4
 8002fe6:	f018 f8f3 	bl	801b1d0 <pow>
 8002fea:	ec54 3b10 	vmov	r3, r4, d0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f7fd fdf1 	bl	8000bd8 <__aeabi_d2f>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	33b8      	adds	r3, #184	; 0xb8
 8003002:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	3301      	adds	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	dde1      	ble.n	8002fd4 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003018:	bf00      	nop
 800301a:	373c      	adds	r7, #60	; 0x3c
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	00000000 	.word	0x00000000
 8003024:	40000000 	.word	0x40000000
 8003028:	3c97e316 	.word	0x3c97e316
 800302c:	3fef3b64 	.word	0x3fef3b64
 8003030:	3fa01965 	.word	0x3fa01965
 8003034:	41500000 	.word	0x41500000
 8003038:	3f1e3737 	.word	0x3f1e3737
 800303c:	40ec28f6 	.word	0x40ec28f6
 8003040:	3ffa41cc 	.word	0x3ffa41cc
 8003044:	40795810 	.word	0x40795810

08003048 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e017      	b.n	8003094 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ed97 7a08 	vldr	s14, [r7, #32]
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbe3      	blt.n	8003064 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dd0a      	ble.n	80030b8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80030b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	e033      	b.n	800312c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02a      	beq.n	8003126 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80030e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e4:	ee17 0a90 	vmov	r0, s15
 80030e8:	f7fd fa4e 	bl	8000588 <__aeabi_f2d>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80031e8 <sensor_elimination_by_stdev+0x1a0>
 80030f4:	ec44 3b10 	vmov	d0, r3, r4
 80030f8:	f018 f86a 	bl	801b1d0 <pow>
 80030fc:	ec56 5b10 	vmov	r5, r6, d0
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	f7fd fa41 	bl	8000588 <__aeabi_f2d>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	4628      	mov	r0, r5
 8003110:	4631      	mov	r1, r6
 8003112:	f7fd f8db 	bl	80002cc <__adddf3>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	4618      	mov	r0, r3
 800311c:	4621      	mov	r1, r4
 800311e:	f7fd fd5b 	bl	8000bd8 <__aeabi_d2f>
 8003122:	4603      	mov	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	dbc7      	blt.n	80030c4 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	dd1a      	ble.n	8003170 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	ed97 7a06 	vldr	s14, [r7, #24]
 8003148:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800314c:	ee16 0a90 	vmov	r0, s13
 8003150:	f7fd fa1a 	bl	8000588 <__aeabi_f2d>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	ec44 3b10 	vmov	d0, r3, r4
 800315c:	f018 f9a8 	bl	801b4b0 <sqrt>
 8003160:	ec54 3b10 	vmov	r3, r4, d0
 8003164:	4618      	mov	r0, r3
 8003166:	4621      	mov	r1, r4
 8003168:	f7fd fd36 	bl	8000bd8 <__aeabi_d2f>
 800316c:	4603      	mov	r3, r0
 800316e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e02f      	b.n	80031d6 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d026      	beq.n	80031d0 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	eef0 7ae7 	vabs.f32	s15, s15
 800319a:	ee17 0a90 	vmov	r0, s15
 800319e:	f7fd f9f3 	bl	8000588 <__aeabi_f2d>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	69b8      	ldr	r0, [r7, #24]
 80031a8:	f7fd f9ee 	bl	8000588 <__aeabi_f2d>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	f7fd f88c 	bl	80002cc <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd fccc 	bl	8000b58 <__aeabi_dcmpgt>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	dbcb      	blt.n	8003176 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80031de:	bf00      	nop
 80031e0:	372c      	adds	r7, #44	; 0x2c
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40000000 	.word	0x40000000

080031f0 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80031f0:	b490      	push	{r4, r7}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	1e43      	subs	r3, r0, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	4603      	mov	r3, r0
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	0154      	lsls	r4, r2, #5
 8003212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003216:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e02b      	b.n	8003276 <eye+0x86>
        for(int j = 0; j < dim; j++){
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e021      	b.n	8003268 <eye+0x78>
            if (i == j){
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d10d      	bne.n	8003248 <eye+0x58>
				A[i][j] = 1;
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fb03 f302 	mul.w	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	441a      	add	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00c      	b.n	8003262 <eye+0x72>
			} else {
				A[i][j] = 0;
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	fb03 f302 	mul.w	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	441a      	add	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbd9      	blt.n	8003224 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3301      	adds	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	dbcf      	blt.n	800321e <eye+0x2e>
			}
        }
    }
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bc90      	pop	{r4, r7}
 8003286:	4770      	bx	lr

08003288 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8003288:	b4b0      	push	{r4, r5, r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	1e43      	subs	r3, r0, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	4603      	mov	r3, r0
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	68fd      	ldr	r5, [r7, #12]
 80032b6:	1e6b      	subs	r3, r5, #1
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	462b      	mov	r3, r5
 80032bc:	4619      	mov	r1, r3
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	0154      	lsls	r4, r2, #5
 80032cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d0:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e022      	b.n	800331e <transpose+0x96>
		for(int j = 0; j < n; j++){
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e018      	b.n	8003310 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fb03 f302 	mul.w	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	441a      	add	r2, r3
 80032ec:	4629      	mov	r1, r5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fb03 f301 	mul.w	r3, r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	4419      	add	r1, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	dbe2      	blt.n	80032de <transpose+0x56>
	for(int i = 0; i < m; i++){
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	3301      	adds	r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	dbd8      	blt.n	80032d8 <transpose+0x50>
		}
	}
}
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	bcb0      	pop	{r4, r5, r7}
 800332e:	4770      	bx	lr

08003330 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e016      	b.n	8003372 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4413      	add	r3, r2
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	4413      	add	r3, r2
 8003364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003368:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	dbe4      	blt.n	8003344 <vecadd+0x14>
	}
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e016      	b.n	80033c8 <vecsub+0x42>
		c[i] = a[i] - b[i];
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	ed93 7a00 	vldr	s14, [r3]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033be:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dbe4      	blt.n	800339a <vecsub+0x14>
	}
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80033dc:	b4f0      	push	{r4, r5, r6, r7}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	1e43      	subs	r3, r0, #1
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
 80033f0:	4603      	mov	r3, r0
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f04f 0400 	mov.w	r4, #0
 8003400:	0154      	lsls	r4, r2, #5
 8003402:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003406:	014b      	lsls	r3, r1, #5
 8003408:	68bd      	ldr	r5, [r7, #8]
 800340a:	1e6b      	subs	r3, r5, #1
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	462b      	mov	r3, r5
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f04f 0400 	mov.w	r4, #0
 800341e:	0154      	lsls	r4, r2, #5
 8003420:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003424:	014b      	lsls	r3, r1, #5
 8003426:	68be      	ldr	r6, [r7, #8]
 8003428:	1e73      	subs	r3, r6, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	4633      	mov	r3, r6
 800342e:	4619      	mov	r1, r3
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	0154      	lsls	r4, r2, #5
 800343e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003442:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e032      	b.n	80034b0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
 800344e:	e028      	b.n	80034a2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fb03 f302 	mul.w	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	462a      	mov	r2, r5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fb03 f302 	mul.w	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	441a      	add	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	4632      	mov	r2, r6
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fb03 f302 	mul.w	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348c:	441a      	add	r2, r3
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	3301      	adds	r3, #1
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbd2      	blt.n	8003450 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dbc8      	blt.n	800344a <matadd+0x6e>
        }
    }
}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bcf0      	pop	{r4, r5, r6, r7}
 80034c0:	4770      	bx	lr

080034c2 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80034c2:	b4f0      	push	{r4, r5, r6, r7}
 80034c4:	b08a      	sub	sp, #40	; 0x28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	68b8      	ldr	r0, [r7, #8]
 80034d2:	1e43      	subs	r3, r0, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	4603      	mov	r3, r0
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f04f 0400 	mov.w	r4, #0
 80034e6:	0154      	lsls	r4, r2, #5
 80034e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034ec:	014b      	lsls	r3, r1, #5
 80034ee:	68bd      	ldr	r5, [r7, #8]
 80034f0:	1e6b      	subs	r3, r5, #1
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	462b      	mov	r3, r5
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0154      	lsls	r4, r2, #5
 8003506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800350a:	014b      	lsls	r3, r1, #5
 800350c:	68be      	ldr	r6, [r7, #8]
 800350e:	1e73      	subs	r3, r6, #1
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	4633      	mov	r3, r6
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	0154      	lsls	r4, r2, #5
 8003524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003528:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e032      	b.n	8003596 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	e028      	b.n	8003588 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	fb03 f302 	mul.w	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	441a      	add	r2, r3
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	462a      	mov	r2, r5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	fb03 f302 	mul.w	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	441a      	add	r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	4632      	mov	r2, r6
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	fb03 f302 	mul.w	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003572:	441a      	add	r2, r3
 8003574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	3301      	adds	r3, #1
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	dbd2      	blt.n	8003536 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	429a      	cmp	r2, r3
 800359c:	dbc8      	blt.n	8003530 <matsub+0x6e>
        }
    }
}
 800359e:	bf00      	nop
 80035a0:	3728      	adds	r7, #40	; 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bcf0      	pop	{r4, r5, r6, r7}
 80035a6:	4770      	bx	lr

080035a8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b08d      	sub	sp, #52	; 0x34
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6178      	str	r0, [r7, #20]
 80035b0:	6139      	str	r1, [r7, #16]
 80035b2:	60fa      	str	r2, [r7, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	693e      	ldr	r6, [r7, #16]
 80035b8:	1e73      	subs	r3, r6, #1
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	4633      	mov	r3, r6
 80035be:	4619      	mov	r1, r3
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	f04f 0400 	mov.w	r4, #0
 80035cc:	0154      	lsls	r4, r2, #5
 80035ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d2:	014b      	lsls	r3, r1, #5
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	3b01      	subs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	4613      	mov	r3, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0154      	lsls	r4, r2, #5
 80035f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f4:	014b      	lsls	r3, r1, #5
 80035f6:	68fd      	ldr	r5, [r7, #12]
 80035f8:	1e6b      	subs	r3, r5, #1
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	462b      	mov	r3, r5
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	0154      	lsls	r4, r2, #5
 800360e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003612:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003614:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	2100      	movs	r1, #0
 800362a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800362c:	f017 f965 	bl	801a8fa <memset>
	}
	for(int i = 0; i < m; i++){
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e04a      	b.n	80036cc <matmul+0x124>
        for(int j = 0; j < o; j++){
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	e040      	b.n	80036be <matmul+0x116>
            for(int k = 0; k < n; k++){
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003640:	e036      	b.n	80036b0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8003642:	4632      	mov	r2, r6
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	fb03 f302 	mul.w	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	441a      	add	r2, r3
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	ed93 7a00 	vldr	s14, [r3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	fb03 f302 	mul.w	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	441a      	add	r2, r3
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003676:	462a      	mov	r2, r5
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	fb03 f302 	mul.w	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003682:	441a      	add	r2, r3
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	462a      	mov	r2, r5
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	fb03 f302 	mul.w	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800369a:	441a      	add	r2, r3
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	3301      	adds	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dbc4      	blt.n	8003642 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	3301      	adds	r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	dbba      	blt.n	800363c <matmul+0x94>
	for(int i = 0; i < m; i++){
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	3301      	adds	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dbb0      	blt.n	8003636 <matmul+0x8e>
            }
        }
    }
}
 80036d4:	bf00      	nop
 80036d6:	3734      	adds	r7, #52	; 0x34
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 80036dc:	b5b0      	push	{r4, r5, r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	68bd      	ldr	r5, [r7, #8]
 80036ec:	1e6b      	subs	r3, r5, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	462b      	mov	r3, r5
 80036f2:	4619      	mov	r1, r3
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	f04f 0400 	mov.w	r4, #0
 8003700:	0154      	lsls	r4, r2, #5
 8003702:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003706:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003708:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371a:	f017 f8ee 	bl	801a8fa <memset>
	}
	for(int i = 0; i < m; i++){
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e02e      	b.n	8003782 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e024      	b.n	8003774 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800372a:	462a      	mov	r2, r5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fb03 f302 	mul.w	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	441a      	add	r2, r3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	ed93 7a00 	vldr	s14, [r3]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003758:	4413      	add	r3, r2
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003764:	4413      	add	r3, r2
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	dbd6      	blt.n	800372a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	3301      	adds	r3, #1
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	429a      	cmp	r2, r3
 8003788:	dbcc      	blt.n	8003724 <matvecprod+0x48>
        }
    }
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bdb0      	pop	{r4, r5, r7, pc}

08003792 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8003792:	b480      	push	{r7}
 8003794:	b08b      	sub	sp, #44	; 0x2c
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e01d      	b.n	80037e2 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	d102      	bne.n	80037bc <lower_triangular_inverse+0x2a>
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e076      	b.n	80038aa <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbdd      	blt.n	80037a6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e052      	b.n	80038a0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e041      	b.n	8003888 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e01b      	b.n	800384c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	ed93 7a00 	vldr	s14, [r3]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	ed97 7a03 	vldr	s14, [r7, #12]
 8003834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003838:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	429a      	cmp	r2, r3
 8003852:	dbdf      	blt.n	8003814 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb1 7a67 	vneg.f32	s14, s15
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4413      	add	r3, r2
 800386c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003874:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	3301      	adds	r3, #1
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	429a      	cmp	r2, r3
 800388e:	dbb9      	blt.n	8003804 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dba8      	blt.n	80037fa <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	372c      	adds	r7, #44	; 0x2c
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80038b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038bc:	b08b      	sub	sp, #44	; 0x2c
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	68fe      	ldr	r6, [r7, #12]
 80038c8:	1e73      	subs	r3, r6, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	4633      	mov	r3, r6
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	0154      	lsls	r4, r2, #5
 80038de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e2:	014b      	lsls	r3, r1, #5
 80038e4:	68fd      	ldr	r5, [r7, #12]
 80038e6:	1e6b      	subs	r3, r5, #1
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	462b      	mov	r3, r5
 80038ec:	4619      	mov	r1, r3
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	0154      	lsls	r4, r2, #5
 80038fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003900:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2100      	movs	r1, #0
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f016 fff2 	bl	801a8fa <memset>
    for (int i = 0; i < n; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e09f      	b.n	8003a5c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e093      	b.n	8003a4a <cholesky+0x192>
            float s = 0;
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	e022      	b.n	8003974 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800392e:	462a      	mov	r2, r5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fb03 f302 	mul.w	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	441a      	add	r2, r3
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	462a      	mov	r2, r5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	fb03 f302 	mul.w	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	441a      	add	r2, r3
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	ed97 7a08 	vldr	s14, [r7, #32]
 8003966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	3301      	adds	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbd8      	blt.n	800392e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	d116      	bne.n	80039b2 <cholesky+0xfa>
 8003984:	4632      	mov	r2, r6
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	fb03 f302 	mul.w	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	441a      	add	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	ed93 7a00 	vldr	s14, [r3]
 800399c:	edd7 7a08 	vldr	s15, [r7, #32]
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	f017 ff40 	bl	801b82c <sqrtf>
 80039ac:	ee10 1a10 	vmov	r1, s0
 80039b0:	e03d      	b.n	8003a2e <cholesky+0x176>
 80039b2:	462a      	mov	r2, r5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	fb03 f302 	mul.w	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	441a      	add	r2, r3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fddd 	bl	8000588 <__aeabi_f2d>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	461a      	mov	r2, r3
 80039d4:	4623      	mov	r3, r4
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	4925      	ldr	r1, [pc, #148]	; (8003a70 <cholesky+0x1b8>)
 80039dc:	f7fc ff56 	bl	800088c <__aeabi_ddiv>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4698      	mov	r8, r3
 80039e6:	46a1      	mov	r9, r4
 80039e8:	4632      	mov	r2, r6
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	fb03 f302 	mul.w	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	441a      	add	r2, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	ed93 7a00 	vldr	s14, [r3]
 8003a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a08:	ee17 0a90 	vmov	r0, s15
 8003a0c:	f7fc fdbc 	bl	8000588 <__aeabi_f2d>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	f7fc fe0c 	bl	8000638 <__aeabi_dmul>
 8003a20:	4603      	mov	r3, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4618      	mov	r0, r3
 8003a26:	4621      	mov	r1, r4
 8003a28:	f7fd f8d6 	bl	8000bd8 <__aeabi_d2f>
 8003a2c:	4601      	mov	r1, r0
 8003a2e:	462a      	mov	r2, r5
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fb03 f302 	mul.w	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	f6ff af66 	blt.w	8003922 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f6ff af5b 	blt.w	800391c <cholesky+0x64>
        }
}
 8003a66:	bf00      	nop
 8003a68:	372c      	adds	r7, #44	; 0x2c
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a70:	3ff00000 	.word	0x3ff00000

08003a74 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8003a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	b090      	sub	sp, #64	; 0x40
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	ed87 0a00 	vstr	s0, [r7]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0154      	lsls	r4, r2, #5
 8003a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa0:	014b      	lsls	r3, r1, #5
 8003aa2:	68fd      	ldr	r5, [r7, #12]
 8003aa4:	1e6b      	subs	r3, r5, #1
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	0154      	lsls	r4, r2, #5
 8003aba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003abe:	014b      	lsls	r3, r1, #5
 8003ac0:	466b      	mov	r3, sp
 8003ac2:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	68fe      	ldr	r6, [r7, #12]
 8003ac8:	1e43      	subs	r3, r0, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	4603      	mov	r3, r0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	0154      	lsls	r4, r2, #5
 8003ade:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ae2:	014b      	lsls	r3, r1, #5
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003aea:	1e73      	subs	r3, r6, #1
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	4603      	mov	r3, r0
 8003af0:	4619      	mov	r1, r3
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	4633      	mov	r3, r6
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	fb03 fe02 	mul.w	lr, r3, r2
 8003b00:	fb01 fc04 	mul.w	ip, r1, r4
 8003b04:	44f4      	add	ip, lr
 8003b06:	fba1 3403 	umull	r3, r4, r1, r3
 8003b0a:	eb0c 0204 	add.w	r2, ip, r4
 8003b0e:	4614      	mov	r4, r2
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	0162      	lsls	r2, r4, #5
 8003b1a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4633      	mov	r3, r6
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	fb03 fe02 	mul.w	lr, r3, r2
 8003b32:	fb01 fc04 	mul.w	ip, r1, r4
 8003b36:	44f4      	add	ip, lr
 8003b38:	fba1 3403 	umull	r3, r4, r1, r3
 8003b3c:	eb0c 0204 	add.w	r2, ip, r4
 8003b40:	4614      	mov	r4, r2
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	0162      	lsls	r2, r4, #5
 8003b4c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	4603      	mov	r3, r0
 8003b54:	4632      	mov	r2, r6
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3303      	adds	r3, #3
 8003b5e:	3307      	adds	r3, #7
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	ebad 0d03 	sub.w	sp, sp, r3
 8003b68:	466b      	mov	r3, sp
 8003b6a:	3303      	adds	r3, #3
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003b72:	69f8      	ldr	r0, [r7, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	f016 feaf 	bl	801a8e4 <memcpy>
    for (int i = 0; i < n; i++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8a:	e022      	b.n	8003bd2 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8003b8c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b94:	fb01 f103 	mul.w	r1, r1, r3
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	440b      	add	r3, r1
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	ed93 7a00 	vldr	s14, [r3]
 8003ba4:	edd7 6a00 	vldr	s13, [r7]
 8003ba8:	edd7 7a00 	vldr	s15, [r7]
 8003bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbc:	fb01 f103 	mul.w	r1, r1, r3
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	440b      	add	r3, r1
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	3301      	adds	r3, #1
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dbd8      	blt.n	8003b8c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	68fe      	ldr	r6, [r7, #12]
 8003bde:	466b      	mov	r3, sp
 8003be0:	469a      	mov	sl, r3
 8003be2:	1e43      	subs	r3, r0, #1
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	4603      	mov	r3, r0
 8003be8:	4619      	mov	r1, r3
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	0154      	lsls	r4, r2, #5
 8003bf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bfc:	014b      	lsls	r3, r1, #5
 8003bfe:	4603      	mov	r3, r0
 8003c00:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003c04:	1e73      	subs	r3, r6, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	4633      	mov	r3, r6
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	fb03 fe02 	mul.w	lr, r3, r2
 8003c1a:	fb01 fc04 	mul.w	ip, r1, r4
 8003c1e:	44f4      	add	ip, lr
 8003c20:	fba1 3403 	umull	r3, r4, r1, r3
 8003c24:	eb0c 0204 	add.w	r2, ip, r4
 8003c28:	4614      	mov	r4, r2
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	0162      	lsls	r2, r4, #5
 8003c34:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	4633      	mov	r3, r6
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	fb03 fe02 	mul.w	lr, r3, r2
 8003c4c:	fb01 fc04 	mul.w	ip, r1, r4
 8003c50:	44f4      	add	ip, lr
 8003c52:	fba1 3403 	umull	r3, r4, r1, r3
 8003c56:	eb0c 0204 	add.w	r2, ip, r4
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	0162      	lsls	r2, r4, #5
 8003c66:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c6a:	0159      	lsls	r1, r3, #5
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4632      	mov	r2, r6
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3303      	adds	r3, #3
 8003c78:	3307      	adds	r3, #7
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c82:	466b      	mov	r3, sp
 8003c84:	3303      	adds	r3, #3
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4619      	mov	r1, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fe10 	bl	80038b8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fd78 	bl	8003792 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	2100      	movs	r1, #0
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f016 fe22 	bl	801a8fa <memset>
    for(int i = 0; i < n; i++){
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	e04e      	b.n	8003d5a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc0:	e044      	b.n	8003d4c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	bfb8      	it	lt
 8003cca:	4613      	movlt	r3, r2
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cce:	e036      	b.n	8003d3e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	fb03 f302 	mul.w	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	441a      	add	r2, r3
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	ed93 7a00 	vldr	s14, [r3]
 8003ce8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cf0:	fb01 f103 	mul.w	r1, r1, r3
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	440b      	add	r3, r1
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	edd3 6a00 	vldr	s13, [r3]
 8003d00:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d08:	fb01 f103 	mul.w	r1, r1, r3
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	440b      	add	r3, r1
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d1c:	462a      	mov	r2, r5
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	fb03 f302 	mul.w	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	441a      	add	r2, r3
 8003d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dbc4      	blt.n	8003cd0 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3301      	adds	r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbb6      	blt.n	8003cc2 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	3301      	adds	r3, #1
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	dbac      	blt.n	8003cbc <cholesky_inverse+0x248>
 8003d62:	46d5      	mov	sp, sl
 8003d64:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003d66:	bf00      	nop
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d70 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	210a      	movs	r1, #10
 8003d82:	4618      	mov	r0, r3
 8003d84:	f012 faa8 	bl	80162d8 <osMutexAcquire>
 8003d88:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <AcquireMutex+0x2a>
		custom_mutex->counter++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]
	}

	return status;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f012 faef 	bl	8016394 <osMutexRelease>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0a0      	sub	sp, #128	; 0x80
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 8003dce:	f107 0310 	add.w	r3, r7, #16
 8003dd2:	2264      	movs	r2, #100	; 0x64
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f016 fd8f 	bl	801a8fa <memset>
	uint32_t counter = custom_mutex->counter;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003de8:	2300      	movs	r3, #0
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
 8003dec:	e01b      	b.n	8003e26 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f016 fd74 	bl	801a8e4 <memcpy>
		if(custom_mutex->counter == counter){
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d109      	bne.n	8003e1a <ReadMutex+0x5a>
			memcpy(local_data, buffer, size);
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	f107 0310 	add.w	r3, r7, #16
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f016 fd68 	bl	801a8e4 <memcpy>
			status = osOK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003e18:	e008      	b.n	8003e2c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	3301      	adds	r3, #1
 8003e24:	677b      	str	r3, [r7, #116]	; 0x74
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	dde0      	ble.n	8003dee <ReadMutex+0x2e>
	}
	return status;
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3780      	adds	r7, #128	; 0x80
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b08d      	sub	sp, #52	; 0x34
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e07b      	b.n	8003f66 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7a:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e92:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003f80 <ReadMutexStateEst+0x148>
 8003e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9a:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003f84 <ReadMutexStateEst+0x14c>
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d149      	bne.n	8003f5a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	6939      	ldr	r1, [r7, #16]
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8003eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	6838      	ldr	r0, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	3304      	adds	r3, #4
 8003eee:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4403      	add	r3, r0
 8003f02:	3308      	adds	r3, #8
 8003f04:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc fb3d 	bl	8000588 <__aeabi_f2d>
 8003f0e:	a31a      	add	r3, pc, #104	; (adr r3, 8003f78 <ReadMutexStateEst+0x140>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb90 	bl	8000638 <__aeabi_dmul>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4622      	mov	r2, r4
 8003f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f22:	1e5c      	subs	r4, r3, #1
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	f7fc fe56 	bl	8000bd8 <__aeabi_d2f>
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4623      	mov	r3, r4
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1b1b      	subs	r3, r3, r4
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	3330      	adds	r3, #48	; 0x30
 8003f3c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	6a39      	ldr	r1, [r7, #32]
 8003f44:	6838      	ldr	r0, [r7, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4403      	add	r3, r0
 8003f50:	333c      	adds	r3, #60	; 0x3c
 8003f52:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003f58:	e008      	b.n	8003f6c <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	3301      	adds	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	dd80      	ble.n	8003e6e <ReadMutexStateEst+0x36>
	}


	return status;
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3734      	adds	r7, #52	; 0x34
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	51eb851f 	.word	0x51eb851f
 8003f7c:	40239eb8 	.word	0x40239eb8
 8003f80:	44800000 	.word	0x44800000
 8003f84:	42c80000 	.word	0x42c80000

08003f88 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8a:	b0bd      	sub	sp, #244	; 0xf4
 8003f8c:	af0a      	add	r7, sp, #40	; 0x28
 8003f8e:	61f8      	str	r0, [r7, #28]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	460b      	mov	r3, r1
 8003f94:	76fb      	strb	r3, [r7, #27]
 8003f96:	4613      	mov	r3, r2
 8003f98:	76bb      	strb	r3, [r7, #26]
	log_entry_t log_entry = { 0 };
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	2296      	movs	r2, #150	; 0x96
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f016 fca9 	bl	801a8fa <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003fa8:	7efb      	ldrb	r3, [r7, #27]
 8003faa:	7eba      	ldrb	r2, [r7, #26]
 8003fac:	f107 0020 	add.w	r0, r7, #32
 8003fb0:	9202      	str	r2, [sp, #8]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <logSensor+0x21c>)
 8003fbc:	2196      	movs	r1, #150	; 0x96
 8003fbe:	f016 fd5d 	bl	801aa7c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003fc2:	7ebb      	ldrb	r3, [r7, #26]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	f200 80c8 	bhi.w	800415c <logSensor+0x1d4>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <logSensor+0x4c>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	0800401f 	.word	0x0800401f
 8003fdc:	08004091 	.word	0x08004091
 8003fe0:	08004115 	.word	0x08004115
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fea:	f107 0320 	add.w	r3, r7, #32
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f90e 	bl	8000210 <strlen>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	1898      	adds	r0, r3, r2
 8003ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	460b      	mov	r3, r1
 8004014:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <logSensor+0x220>)
 8004016:	2196      	movs	r1, #150	; 0x96
 8004018:	f016 fd30 	bl	801aa7c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 800401c:	e0b4      	b.n	8004188 <logSensor+0x200>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		snprintf(log_entry.str + strlen(log_entry.str),
 8004024:	f107 0320 	add.w	r3, r7, #32
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc f8f1 	bl	8000210 <strlen>
 800402e:	4602      	mov	r2, r0
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd,%hd,%hd,%lu\n", imu_data_ptr->acc_x,
 8004036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800403a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 800403e:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004040:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004048:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800404a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800404e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004052:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004054:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004058:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 800405c:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 800405e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004066:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8004068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800406c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004070:	461e      	mov	r6, r3
 8004072:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	9604      	str	r6, [sp, #16]
 800407c:	9503      	str	r5, [sp, #12]
 800407e:	9402      	str	r4, [sp, #8]
 8004080:	9101      	str	r1, [sp, #4]
 8004082:	9200      	str	r2, [sp, #0]
 8004084:	4663      	mov	r3, ip
 8004086:	4a49      	ldr	r2, [pc, #292]	; (80041ac <logSensor+0x224>)
 8004088:	2196      	movs	r1, #150	; 0x96
 800408a:	f016 fcf7 	bl	801aa7c <sniprintf>
	}
		break;
 800408e:	e07b      	b.n	8004188 <logSensor+0x200>
	case GPS: {
		gps_data_t *gps_data = (gps_data_t*) sensor_data;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		snprintf(log_entry.str + strlen(log_entry.str),
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f8b8 	bl	8000210 <strlen>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f107 0320 	add.w	r3, r7, #32
 80040a6:	189d      	adds	r5, r3, r2
 80040a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040b8:	6892      	ldr	r2, [r2, #8]
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%d,%ld,%d,%ld,%d,%hd,%hd\n",
			gps_data->hour, gps_data->minute, gps_data->second, gps_data->lat_deg,
 80040ba:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80040be:	7b49      	ldrb	r1, [r1, #13]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80040c6:	6909      	ldr	r1, [r1, #16]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 80040c8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80040cc:	7d00      	ldrb	r0, [r0, #20]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80040d4:	6980      	ldr	r0, [r0, #24]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 80040d6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040da:	7b24      	ldrb	r4, [r4, #12]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040dc:	60bc      	str	r4, [r7, #8]
			gps_data->altitude, gps_data->HDOP);
 80040de:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040e2:	8c24      	ldrh	r4, [r4, #32]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040e4:	607c      	str	r4, [r7, #4]
			gps_data->altitude, gps_data->HDOP);
 80040e6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040ea:	8be4      	ldrh	r4, [r4, #30]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040ec:	9408      	str	r4, [sp, #32]
 80040ee:	687c      	ldr	r4, [r7, #4]
 80040f0:	9407      	str	r4, [sp, #28]
 80040f2:	68bc      	ldr	r4, [r7, #8]
 80040f4:	9406      	str	r4, [sp, #24]
 80040f6:	9005      	str	r0, [sp, #20]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	9004      	str	r0, [sp, #16]
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	6939      	ldr	r1, [r7, #16]
 8004100:	9102      	str	r1, [sp, #8]
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4633      	mov	r3, r6
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <logSensor+0x228>)
 800410a:	2196      	movs	r1, #150	; 0x96
 800410c:	4628      	mov	r0, r5
 800410e:	f016 fcb5 	bl	801aa7c <sniprintf>
	}
		break;
 8004112:	e039      	b.n	8004188 <logSensor+0x200>
	case BATTERY: {
		battery_data_t *battery_data = (battery_data_t*) sensor_data;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		snprintf(log_entry.str + strlen(log_entry.str),
 800411a:	f107 0320 	add.w	r3, r7, #32
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc f876 	bl	8000210 <strlen>
 8004124:	4602      	mov	r2, r0
 8004126:	f107 0320 	add.w	r3, r7, #32
 800412a:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd\n",
			battery_data->battery, battery_data->consumption,
 800412c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004130:	885b      	ldrh	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004132:	461c      	mov	r4, r3
			battery_data->battery, battery_data->consumption,
 8004134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004138:	88db      	ldrh	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 800413a:	461a      	mov	r2, r3
			battery_data->current, battery_data->supply);
 800413c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004140:	889b      	ldrh	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004142:	4619      	mov	r1, r3
			battery_data->current, battery_data->supply);
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004148:	881b      	ldrh	r3, [r3, #0]
		snprintf(log_entry.str + strlen(log_entry.str),
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	9101      	str	r1, [sp, #4]
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	4623      	mov	r3, r4
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <logSensor+0x22c>)
 8004154:	2196      	movs	r1, #150	; 0x96
 8004156:	f016 fc91 	bl	801aa7c <sniprintf>
	}
		break;
 800415a:	e015      	b.n	8004188 <logSensor+0x200>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 800415c:	f107 0320 	add.w	r3, r7, #32
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f855 	bl	8000210 <strlen>
 8004166:	4602      	mov	r2, r0
 8004168:	f107 0320 	add.w	r3, r7, #32
 800416c:	4413      	add	r3, r2
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <logSensor+0x230>)
 8004170:	461d      	mov	r5, r3
 8004172:	4614      	mov	r4, r2
 8004174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004176:	6028      	str	r0, [r5, #0]
 8004178:	6069      	str	r1, [r5, #4]
 800417a:	60aa      	str	r2, [r5, #8]
 800417c:	60eb      	str	r3, [r5, #12]
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	7923      	ldrb	r3, [r4, #4]
 8004184:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8004186:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <logSensor+0x234>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	f107 0120 	add.w	r1, r7, #32
 8004190:	2300      	movs	r3, #0
 8004192:	2200      	movs	r2, #0
 8004194:	f012 fb66 	bl	8016864 <osMessageQueuePut>
 8004198:	4603      	mov	r3, r0
}
 800419a:	4618      	mov	r0, r3
 800419c:	37cc      	adds	r7, #204	; 0xcc
 800419e:	46bd      	mov	sp, r7
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	0801d224 	.word	0x0801d224
 80041a8:	0801d234 	.word	0x0801d234
 80041ac:	0801d244 	.word	0x0801d244
 80041b0:	0801d264 	.word	0x0801d264
 80041b4:	0801d28c 	.word	0x0801d28c
 80041b8:	0801d2a0 	.word	0x0801d2a0
 80041bc:	20017ea0 	.word	0x20017ea0

080041c0 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0ac      	sub	sp, #176	; 0xb0
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4638      	mov	r0, r7
 80041ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80041ce:	f107 0310 	add.w	r3, r7, #16
 80041d2:	2296      	movs	r2, #150	; 0x96
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f016 fb8f 	bl	801a8fa <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 80041dc:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 80041de:	f107 0010 	add.w	r0, r7, #16
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	2302      	movs	r3, #2
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a08      	ldr	r2, [pc, #32]	; (800420c <logRocketState+0x4c>)
 80041ec:	2196      	movs	r1, #150	; 0x96
 80041ee:	f016 fc45 	bl	801aa7c <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <logRocketState+0x50>)
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	f107 0110 	add.w	r1, r7, #16
 80041fa:	2300      	movs	r3, #0
 80041fc:	2200      	movs	r2, #0
 80041fe:	f012 fb31 	bl	8016864 <osMessageQueuePut>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	37a8      	adds	r7, #168	; 0xa8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	0801d2b8 	.word	0x0801d2b8
 8004210:	20017ea0 	.word	0x20017ea0

08004214 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8004214:	b084      	sub	sp, #16
 8004216:	b580      	push	{r7, lr}
 8004218:	b0ac      	sub	sp, #176	; 0xb0
 800421a:	af04      	add	r7, sp, #16
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8004222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	2296      	movs	r2, #150	; 0x96
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f016 fb63 	bl	801a8fa <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 8004234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800423c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004240:	f107 0008 	add.w	r0, r7, #8
 8004244:	9103      	str	r1, [sp, #12]
 8004246:	9202      	str	r2, [sp, #8]
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	2303      	movs	r3, #3
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <logEstimatorVar+0x64>)
 8004252:	2196      	movs	r1, #150	; 0x96
 8004254:	f016 fc12 	bl	801aa7c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <logEstimatorVar+0x68>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f107 0108 	add.w	r1, r7, #8
 8004260:	2300      	movs	r3, #0
 8004262:	2200      	movs	r2, #0
 8004264:	f012 fafe 	bl	8016864 <osMessageQueuePut>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	37a0      	adds	r7, #160	; 0xa0
 800426e:	46bd      	mov	sp, r7
 8004270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr
 8004278:	0801d2c4 	.word	0x0801d2c4
 800427c:	20017ea0 	.word	0x20017ea0

08004280 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b0ae      	sub	sp, #184	; 0xb8
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 800428e:	f107 0310 	add.w	r3, r7, #16
 8004292:	2296      	movs	r2, #150	; 0x96
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f016 fb2f 	bl	801a8fa <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 800429c:	f107 0010 	add.w	r0, r7, #16
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2304      	movs	r3, #4
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <logControllerOutput+0x54>)
 80042b4:	2196      	movs	r1, #150	; 0x96
 80042b6:	f016 fbe1 	bl	801aa7c <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <logControllerOutput+0x58>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f107 0110 	add.w	r1, r7, #16
 80042c2:	2300      	movs	r3, #0
 80042c4:	2200      	movs	r2, #0
 80042c6:	f012 facd 	bl	8016864 <osMessageQueuePut>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	37a8      	adds	r7, #168	; 0xa8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	0801d2c4 	.word	0x0801d2c4
 80042d8:	20017ea0 	.word	0x20017ea0

080042dc <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0ae      	sub	sp, #184	; 0xb8
 80042e0:	af04      	add	r7, sp, #16
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	2296      	movs	r2, #150	; 0x96
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f016 fb02 	bl	801a8fa <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80042f6:	f107 0010 	add.w	r0, r7, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9302      	str	r3, [sp, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	2305      	movs	r3, #5
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a08      	ldr	r2, [pc, #32]	; (800432c <logMotor+0x50>)
 800430a:	2196      	movs	r1, #150	; 0x96
 800430c:	f016 fbb6 	bl	801aa7c <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <logMotor+0x54>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	f107 0110 	add.w	r1, r7, #16
 8004318:	2300      	movs	r3, #0
 800431a:	2200      	movs	r2, #0
 800431c:	f012 faa2 	bl	8016864 <osMessageQueuePut>
 8004320:	4603      	mov	r3, r0
}
 8004322:	4618      	mov	r0, r3
 8004324:	37a8      	adds	r7, #168	; 0xa8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	0801d2d8 	.word	0x0801d2d8
 8004330:	20017ea0 	.word	0x20017ea0

08004334 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8004334:	b40f      	push	{r0, r1, r2, r3}
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800433c:	2301      	movs	r3, #1
 800433e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8004340:	79fb      	ldrb	r3, [r7, #7]
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	b004      	add	sp, #16
 800434e:	4770      	bx	lr

08004350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b0b1      	sub	sp, #196	; 0xc4
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004356:	f003 fad4 	bl	8007902 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800435a:	f000 f9f7 	bl	800474c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 800435e:	4bb2      	ldr	r3, [pc, #712]	; (8004628 <main+0x2d8>)
 8004360:	4ab2      	ldr	r2, [pc, #712]	; (800462c <main+0x2dc>)
 8004362:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8004364:	4bb0      	ldr	r3, [pc, #704]	; (8004628 <main+0x2d8>)
 8004366:	4ab2      	ldr	r2, [pc, #712]	; (8004630 <main+0x2e0>)
 8004368:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 800436a:	48b2      	ldr	r0, [pc, #712]	; (8004634 <main+0x2e4>)
 800436c:	f7fd fef4 	bl	8002158 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8004370:	48b1      	ldr	r0, [pc, #708]	; (8004638 <main+0x2e8>)
 8004372:	f7fe f9af 	bl	80026d4 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004376:	f000 fd45 	bl	8004e04 <MX_GPIO_Init>
  MX_DMA_Init();
 800437a:	f000 fcd1 	bl	8004d20 <MX_DMA_Init>
  MX_SPI3_Init();
 800437e:	f000 fba5 	bl	8004acc <MX_SPI3_Init>
  MX_SPI1_Init();
 8004382:	f000 fb2f 	bl	80049e4 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8004386:	f000 fb0d 	bl	80049a4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 800438a:	f000 fb65 	bl	8004a58 <MX_SPI2_Init>
  MX_FATFS_Init();
 800438e:	f00c ff29 	bl	80111e4 <MX_FATFS_Init>
  MX_UART7_Init();
 8004392:	f000 fc05 	bl	8004ba0 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8004396:	f000 fc33 	bl	8004c00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800439a:	f000 fc61 	bl	8004c60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800439e:	f000 fc8f 	bl	8004cc0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80043a2:	f000 fa6d 	bl	8004880 <MX_ADC1_Init>
  MX_UART4_Init();
 80043a6:	f000 fbcb 	bl	8004b40 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80043aa:	f015 fd1f 	bl	8019dec <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80043ae:	f011 fd27 	bl	8015e00 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 80043b2:	4ba2      	ldr	r3, [pc, #648]	; (800463c <main+0x2ec>)
 80043b4:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 80043b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80043be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f011 feee 	bl	80161a4 <osMutexNew>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b9d      	ldr	r3, [pc, #628]	; (8004640 <main+0x2f0>)
 80043cc:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 80043ce:	4b9d      	ldr	r3, [pc, #628]	; (8004644 <main+0x2f4>)
 80043d0:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80043d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80043da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043de:	4618      	mov	r0, r3
 80043e0:	f011 fee0 	bl	80161a4 <osMutexNew>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b98      	ldr	r3, [pc, #608]	; (8004648 <main+0x2f8>)
 80043e8:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 80043ea:	4b98      	ldr	r3, [pc, #608]	; (800464c <main+0x2fc>)
 80043ec:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80043f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80043f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043fa:	4618      	mov	r0, r3
 80043fc:	f011 fed2 	bl	80161a4 <osMutexNew>
 8004400:	4602      	mov	r2, r0
 8004402:	4b93      	ldr	r3, [pc, #588]	; (8004650 <main+0x300>)
 8004404:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8004406:	4b93      	ldr	r3, [pc, #588]	; (8004654 <main+0x304>)
 8004408:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800440c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800440e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8004412:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004416:	4618      	mov	r0, r3
 8004418:	f011 fec4 	bl	80161a4 <osMutexNew>
 800441c:	4602      	mov	r2, r0
 800441e:	4b8e      	ldr	r3, [pc, #568]	; (8004658 <main+0x308>)
 8004420:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8004422:	4b8e      	ldr	r3, [pc, #568]	; (800465c <main+0x30c>)
 8004424:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800442a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 800442e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004432:	4618      	mov	r0, r3
 8004434:	f011 feb6 	bl	80161a4 <osMutexNew>
 8004438:	4602      	mov	r2, r0
 800443a:	4b89      	ldr	r3, [pc, #548]	; (8004660 <main+0x310>)
 800443c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 800443e:	4b89      	ldr	r3, [pc, #548]	; (8004664 <main+0x314>)
 8004440:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004446:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 800444a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800444e:	4618      	mov	r0, r3
 8004450:	f011 fea8 	bl	80161a4 <osMutexNew>
 8004454:	4602      	mov	r2, r0
 8004456:	4b84      	ldr	r3, [pc, #528]	; (8004668 <main+0x318>)
 8004458:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 800445a:	4b84      	ldr	r3, [pc, #528]	; (800466c <main+0x31c>)
 800445c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8004466:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800446a:	4618      	mov	r0, r3
 800446c:	f011 fe9a 	bl	80161a4 <osMutexNew>
 8004470:	4602      	mov	r2, r0
 8004472:	4b7f      	ldr	r3, [pc, #508]	; (8004670 <main+0x320>)
 8004474:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8004476:	4b7f      	ldr	r3, [pc, #508]	; (8004674 <main+0x324>)
 8004478:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800447c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800447e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8004482:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004486:	4618      	mov	r0, r3
 8004488:	f011 fe8c 	bl	80161a4 <osMutexNew>
 800448c:	4602      	mov	r2, r0
 800448e:	4b7a      	ldr	r3, [pc, #488]	; (8004678 <main+0x328>)
 8004490:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8004492:	4b7a      	ldr	r3, [pc, #488]	; (800467c <main+0x32c>)
 8004494:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800449a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 800449e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044a2:	4618      	mov	r0, r3
 80044a4:	f011 fe7e 	bl	80161a4 <osMutexNew>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b75      	ldr	r3, [pc, #468]	; (8004680 <main+0x330>)
 80044ac:	601a      	str	r2, [r3, #0]

	/* GPS Mutex */
	const osMutexAttr_t gps_mutex_attr = {
 80044ae:	4b75      	ldr	r3, [pc, #468]	; (8004684 <main+0x334>)
 80044b0:	f107 0420 	add.w	r4, r7, #32
 80044b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80044ba:	f107 0320 	add.w	r3, r7, #32
 80044be:	4618      	mov	r0, r3
 80044c0:	f011 fe70 	bl	80161a4 <osMutexNew>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b70      	ldr	r3, [pc, #448]	; (8004688 <main+0x338>)
 80044c8:	601a      	str	r2, [r3, #0]

	/* Battery Mutex */
	const osMutexAttr_t battery_mutex_attr = {
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <main+0x33c>)
 80044cc:	f107 0410 	add.w	r4, r7, #16
 80044d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80044d6:	f107 0310 	add.w	r3, r7, #16
 80044da:	4618      	mov	r0, r3
 80044dc:	f011 fe62 	bl	80161a4 <osMutexNew>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b6b      	ldr	r3, [pc, #428]	; (8004690 <main+0x340>)
 80044e4:	601a      	str	r2, [r3, #0]

	/* Motor Mutex */
	const osMutexAttr_t motor_mutex_attr = {
 80044e6:	4b6b      	ldr	r3, [pc, #428]	; (8004694 <main+0x344>)
 80044e8:	463c      	mov	r4, r7
 80044ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	motor_mutex_only = osMutexNew(&motor_mutex_attr);
 80044f0:	463b      	mov	r3, r7
 80044f2:	4618      	mov	r0, r3
 80044f4:	f011 fe56 	bl	80161a4 <osMutexNew>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b67      	ldr	r3, [pc, #412]	; (8004698 <main+0x348>)
 80044fc:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 80044fe:	4b50      	ldr	r3, [pc, #320]	; (8004640 <main+0x2f0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a66      	ldr	r2, [pc, #408]	; (800469c <main+0x34c>)
 8004504:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8004506:	4b50      	ldr	r3, [pc, #320]	; (8004648 <main+0x2f8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a65      	ldr	r2, [pc, #404]	; (80046a0 <main+0x350>)
 800450c:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 800450e:	4b50      	ldr	r3, [pc, #320]	; (8004650 <main+0x300>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a64      	ldr	r2, [pc, #400]	; (80046a4 <main+0x354>)
 8004514:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8004516:	4b56      	ldr	r3, [pc, #344]	; (8004670 <main+0x320>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a63      	ldr	r2, [pc, #396]	; (80046a8 <main+0x358>)
 800451c:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 800451e:	4b52      	ldr	r3, [pc, #328]	; (8004668 <main+0x318>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a62      	ldr	r2, [pc, #392]	; (80046ac <main+0x35c>)
 8004524:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8004526:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <main+0x310>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a61      	ldr	r2, [pc, #388]	; (80046b0 <main+0x360>)
 800452c:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 800452e:	4b4a      	ldr	r3, [pc, #296]	; (8004658 <main+0x308>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a60      	ldr	r2, [pc, #384]	; (80046b4 <main+0x364>)
 8004534:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8004536:	4b50      	ldr	r3, [pc, #320]	; (8004678 <main+0x328>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5f      	ldr	r2, [pc, #380]	; (80046b8 <main+0x368>)
 800453c:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 800453e:	4b50      	ldr	r3, [pc, #320]	; (8004680 <main+0x330>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a5e      	ldr	r2, [pc, #376]	; (80046bc <main+0x36c>)
 8004544:	6013      	str	r3, [r2, #0]
	gps_mutex.mutex = gps_mutex_only;
 8004546:	4b50      	ldr	r3, [pc, #320]	; (8004688 <main+0x338>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a5d      	ldr	r2, [pc, #372]	; (80046c0 <main+0x370>)
 800454c:	6013      	str	r3, [r2, #0]
	battery_mutex.mutex = battery_mutex_only;
 800454e:	4b50      	ldr	r3, [pc, #320]	; (8004690 <main+0x340>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a5c      	ldr	r2, [pc, #368]	; (80046c4 <main+0x374>)
 8004554:	6013      	str	r3, [r2, #0]
	motor_mutex.mutex = motor_mutex_only;
 8004556:	4b50      	ldr	r3, [pc, #320]	; (8004698 <main+0x348>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a5b      	ldr	r2, [pc, #364]	; (80046c8 <main+0x378>)
 800455c:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 800455e:	4b36      	ldr	r3, [pc, #216]	; (8004638 <main+0x2e8>)
 8004560:	2201      	movs	r2, #1
 8004562:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <main+0x2e8>)
 8004566:	2201      	movs	r2, #1
 8004568:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 800456a:	4b58      	ldr	r3, [pc, #352]	; (80046cc <main+0x37c>)
 800456c:	229b      	movs	r2, #155	; 0x9b
 800456e:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8004570:	2200      	movs	r2, #0
 8004572:	2196      	movs	r1, #150	; 0x96
 8004574:	2080      	movs	r0, #128	; 0x80
 8004576:	f012 f8ef 	bl	8016758 <osMessageQueueNew>
 800457a:	4602      	mov	r2, r0
 800457c:	4b54      	ldr	r3, [pc, #336]	; (80046d0 <main+0x380>)
 800457e:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004580:	4a54      	ldr	r2, [pc, #336]	; (80046d4 <main+0x384>)
 8004582:	2100      	movs	r1, #0
 8004584:	4854      	ldr	r0, [pc, #336]	; (80046d8 <main+0x388>)
 8004586:	f011 fcf9 	bl	8015f7c <osThreadNew>
 800458a:	4602      	mov	r2, r0
 800458c:	4b53      	ldr	r3, [pc, #332]	; (80046dc <main+0x38c>)
 800458e:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8004590:	4a53      	ldr	r2, [pc, #332]	; (80046e0 <main+0x390>)
 8004592:	2100      	movs	r1, #0
 8004594:	4853      	ldr	r0, [pc, #332]	; (80046e4 <main+0x394>)
 8004596:	f011 fcf1 	bl	8015f7c <osThreadNew>
 800459a:	4602      	mov	r2, r0
 800459c:	4b52      	ldr	r3, [pc, #328]	; (80046e8 <main+0x398>)
 800459e:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80045a0:	4a52      	ldr	r2, [pc, #328]	; (80046ec <main+0x39c>)
 80045a2:	2100      	movs	r1, #0
 80045a4:	4852      	ldr	r0, [pc, #328]	; (80046f0 <main+0x3a0>)
 80045a6:	f011 fce9 	bl	8015f7c <osThreadNew>
 80045aa:	4602      	mov	r2, r0
 80045ac:	4b51      	ldr	r3, [pc, #324]	; (80046f4 <main+0x3a4>)
 80045ae:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80045b0:	4a51      	ldr	r2, [pc, #324]	; (80046f8 <main+0x3a8>)
 80045b2:	2100      	movs	r1, #0
 80045b4:	4851      	ldr	r0, [pc, #324]	; (80046fc <main+0x3ac>)
 80045b6:	f011 fce1 	bl	8015f7c <osThreadNew>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b50      	ldr	r3, [pc, #320]	; (8004700 <main+0x3b0>)
 80045be:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80045c0:	4a50      	ldr	r2, [pc, #320]	; (8004704 <main+0x3b4>)
 80045c2:	2100      	movs	r1, #0
 80045c4:	4850      	ldr	r0, [pc, #320]	; (8004708 <main+0x3b8>)
 80045c6:	f011 fcd9 	bl	8015f7c <osThreadNew>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b4f      	ldr	r3, [pc, #316]	; (800470c <main+0x3bc>)
 80045ce:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80045d0:	4a4f      	ldr	r2, [pc, #316]	; (8004710 <main+0x3c0>)
 80045d2:	2100      	movs	r1, #0
 80045d4:	484f      	ldr	r0, [pc, #316]	; (8004714 <main+0x3c4>)
 80045d6:	f011 fcd1 	bl	8015f7c <osThreadNew>
 80045da:	4602      	mov	r2, r0
 80045dc:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <main+0x3c8>)
 80045de:	601a      	str	r2, [r3, #0]

  /* creation of task_fsm */
  task_fsmHandle = osThreadNew(vTaskFSM, NULL, &task_fsm_attributes);
 80045e0:	4a4e      	ldr	r2, [pc, #312]	; (800471c <main+0x3cc>)
 80045e2:	2100      	movs	r1, #0
 80045e4:	484e      	ldr	r0, [pc, #312]	; (8004720 <main+0x3d0>)
 80045e6:	f011 fcc9 	bl	8015f7c <osThreadNew>
 80045ea:	4602      	mov	r2, r0
 80045ec:	4b4d      	ldr	r3, [pc, #308]	; (8004724 <main+0x3d4>)
 80045ee:	601a      	str	r2, [r3, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80045f0:	4a4d      	ldr	r2, [pc, #308]	; (8004728 <main+0x3d8>)
 80045f2:	2100      	movs	r1, #0
 80045f4:	484d      	ldr	r0, [pc, #308]	; (800472c <main+0x3dc>)
 80045f6:	f011 fcc1 	bl	8015f7c <osThreadNew>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b4c      	ldr	r3, [pc, #304]	; (8004730 <main+0x3e0>)
 80045fe:	601a      	str	r2, [r3, #0]

  /* creation of task_battery */
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 8004600:	4a4c      	ldr	r2, [pc, #304]	; (8004734 <main+0x3e4>)
 8004602:	2100      	movs	r1, #0
 8004604:	484c      	ldr	r0, [pc, #304]	; (8004738 <main+0x3e8>)
 8004606:	f011 fcb9 	bl	8015f7c <osThreadNew>
 800460a:	4602      	mov	r2, r0
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <main+0x3ec>)
 800460e:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8004610:	4a4b      	ldr	r2, [pc, #300]	; (8004740 <main+0x3f0>)
 8004612:	2100      	movs	r1, #0
 8004614:	484b      	ldr	r0, [pc, #300]	; (8004744 <main+0x3f4>)
 8004616:	f011 fcb1 	bl	8015f7c <osThreadNew>
 800461a:	4602      	mov	r2, r0
 800461c:	4b4a      	ldr	r3, [pc, #296]	; (8004748 <main+0x3f8>)
 800461e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004620:	f011 fc44 	bl	8015eac <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004624:	e7fe      	b.n	8004624 <main+0x2d4>
 8004626:	bf00      	nop
 8004628:	e0042000 	.word	0xe0042000
 800462c:	07e01bff 	.word	0x07e01bff
 8004630:	00070003 	.word	0x00070003
 8004634:	200002ac 	.word	0x200002ac
 8004638:	200002bc 	.word	0x200002bc
 800463c:	0801d394 	.word	0x0801d394
 8004640:	2000fc58 	.word	0x2000fc58
 8004644:	0801d3b4 	.word	0x0801d3b4
 8004648:	20019ea4 	.word	0x20019ea4
 800464c:	0801d3d4 	.word	0x0801d3d4
 8004650:	2000b9bc 	.word	0x2000b9bc
 8004654:	0801d3fc 	.word	0x0801d3fc
 8004658:	2000fbe0 	.word	0x2000fbe0
 800465c:	0801d424 	.word	0x0801d424
 8004660:	2001c100 	.word	0x2001c100
 8004664:	0801d444 	.word	0x0801d444
 8004668:	2000fc54 	.word	0x2000fc54
 800466c:	0801d46c 	.word	0x0801d46c
 8004670:	2000fbe8 	.word	0x2000fbe8
 8004674:	0801d490 	.word	0x0801d490
 8004678:	2000b9b8 	.word	0x2000b9b8
 800467c:	0801d4b4 	.word	0x0801d4b4
 8004680:	2000b9c0 	.word	0x2000b9c0
 8004684:	0801d4d4 	.word	0x0801d4d4
 8004688:	20011c60 	.word	0x20011c60
 800468c:	0801d4f8 	.word	0x0801d4f8
 8004690:	2000fbe4 	.word	0x2000fbe4
 8004694:	0801d51c 	.word	0x0801d51c
 8004698:	20011c5c 	.word	0x20011c5c
 800469c:	2000fafc 	.word	0x2000fafc
 80046a0:	2001c16c 	.word	0x2001c16c
 80046a4:	2000fbec 	.word	0x2000fbec
 80046a8:	2000b9cc 	.word	0x2000b9cc
 80046ac:	200095d8 	.word	0x200095d8
 80046b0:	2000fa3c 	.word	0x2000fa3c
 80046b4:	20011c64 	.word	0x20011c64
 80046b8:	2000b870 	.word	0x2000b870
 80046bc:	2000b9c4 	.word	0x2000b9c4
 80046c0:	20017db0 	.word	0x20017db0
 80046c4:	20009644 	.word	0x20009644
 80046c8:	2000972c 	.word	0x2000972c
 80046cc:	20013cec 	.word	0x20013cec
 80046d0:	20017ea0 	.word	0x20017ea0
 80046d4:	0801d8fc 	.word	0x0801d8fc
 80046d8:	08004f5d 	.word	0x08004f5d
 80046dc:	20009574 	.word	0x20009574
 80046e0:	0801d920 	.word	0x0801d920
 80046e4:	08006ed9 	.word	0x08006ed9
 80046e8:	2000fa98 	.word	0x2000fa98
 80046ec:	0801d944 	.word	0x0801d944
 80046f0:	08006119 	.word	0x08006119
 80046f4:	2001c168 	.word	0x2001c168
 80046f8:	0801d968 	.word	0x0801d968
 80046fc:	08006c5d 	.word	0x08006c5d
 8004700:	2000b9d4 	.word	0x2000b9d4
 8004704:	0801d98c 	.word	0x0801d98c
 8004708:	08006865 	.word	0x08006865
 800470c:	20009810 	.word	0x20009810
 8004710:	0801d9b0 	.word	0x0801d9b0
 8004714:	08006651 	.word	0x08006651
 8004718:	2000fa94 	.word	0x2000fa94
 800471c:	0801d9d4 	.word	0x0801d9d4
 8004720:	08006289 	.word	0x08006289
 8004724:	2001c164 	.word	0x2001c164
 8004728:	0801d9f8 	.word	0x0801d9f8
 800472c:	080063a9 	.word	0x080063a9
 8004730:	20009510 	.word	0x20009510
 8004734:	0801da1c 	.word	0x0801da1c
 8004738:	08005cc1 	.word	0x08005cc1
 800473c:	2001c040 	.word	0x2001c040
 8004740:	0801da40 	.word	0x0801da40
 8004744:	08007335 	.word	0x08007335
 8004748:	20017dac 	.word	0x20017dac

0800474c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b0b4      	sub	sp, #208	; 0xd0
 8004750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004752:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004756:	2230      	movs	r2, #48	; 0x30
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f016 f8cd 	bl	801a8fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004760:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	2284      	movs	r2, #132	; 0x84
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f016 f8be 	bl	801a8fa <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <SystemClock_Config+0x128>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <SystemClock_Config+0x128>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <SystemClock_Config+0x128>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <SystemClock_Config+0x12c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <SystemClock_Config+0x12c>)
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <SystemClock_Config+0x12c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047c0:	2302      	movs	r3, #2
 80047c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80047ce:	2304      	movs	r3, #4
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047d4:	23a8      	movs	r3, #168	; 0xa8
 80047d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047da:	2302      	movs	r3, #2
 80047dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047e0:	2307      	movs	r3, #7
 80047e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f005 fde2 	bl	800a3b4 <HAL_RCC_OscConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80047f6:	f000 fbcd 	bl	8004f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047fa:	230f      	movs	r3, #15
 80047fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004800:	2302      	movs	r3, #2
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800480c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800481c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004820:	2105      	movs	r1, #5
 8004822:	4618      	mov	r0, r3
 8004824:	f006 f86a 	bl	800a8fc <HAL_RCC_ClockConfig>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800482e:	f000 fbb1 	bl	8004f94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <SystemClock_Config+0x130>)
 8004834:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004836:	2300      	movs	r3, #0
 8004838:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800483a:	2300      	movs	r3, #0
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800483e:	2300      	movs	r3, #0
 8004840:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004842:	2300      	movs	r3, #0
 8004844:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004846:	2300      	movs	r3, #0
 8004848:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f006 fa78 	bl	800ad50 <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8004866:	f000 fb95 	bl	8004f94 <Error_Handler>
  }
}
 800486a:	bf00      	nop
 800486c:	37d0      	adds	r7, #208	; 0xd0
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000
 800487c:	00a013c0 	.word	0x00a013c0

08004880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004886:	463b      	mov	r3, r7
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004892:	4b40      	ldr	r3, [pc, #256]	; (8004994 <MX_ADC1_Init+0x114>)
 8004894:	4a40      	ldr	r2, [pc, #256]	; (8004998 <MX_ADC1_Init+0x118>)
 8004896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004898:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <MX_ADC1_Init+0x114>)
 800489a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800489e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <MX_ADC1_Init+0x114>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <MX_ADC1_Init+0x114>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80048ac:	4b39      	ldr	r3, [pc, #228]	; (8004994 <MX_ADC1_Init+0x114>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048b2:	4b38      	ldr	r3, [pc, #224]	; (8004994 <MX_ADC1_Init+0x114>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <MX_ADC1_Init+0x114>)
 80048bc:	2200      	movs	r2, #0
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <MX_ADC1_Init+0x114>)
 80048c2:	4a36      	ldr	r2, [pc, #216]	; (800499c <MX_ADC1_Init+0x11c>)
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <MX_ADC1_Init+0x114>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <MX_ADC1_Init+0x114>)
 80048ce:	2205      	movs	r2, #5
 80048d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <MX_ADC1_Init+0x114>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <MX_ADC1_Init+0x114>)
 80048dc:	2201      	movs	r2, #1
 80048de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048e0:	482c      	ldr	r0, [pc, #176]	; (8004994 <MX_ADC1_Init+0x114>)
 80048e2:	f003 f85d 	bl	80079a0 <HAL_ADC_Init>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80048ec:	f000 fb52 	bl	8004f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80048f0:	2308      	movs	r3, #8
 80048f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048f8:	2307      	movs	r3, #7
 80048fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048fc:	463b      	mov	r3, r7
 80048fe:	4619      	mov	r1, r3
 8004900:	4824      	ldr	r0, [pc, #144]	; (8004994 <MX_ADC1_Init+0x114>)
 8004902:	f003 f9e7 	bl	8007cd4 <HAL_ADC_ConfigChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800490c:	f000 fb42 	bl	8004f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004910:	230a      	movs	r3, #10
 8004912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004914:	2302      	movs	r3, #2
 8004916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8004918:	2305      	movs	r3, #5
 800491a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800491c:	463b      	mov	r3, r7
 800491e:	4619      	mov	r1, r3
 8004920:	481c      	ldr	r0, [pc, #112]	; (8004994 <MX_ADC1_Init+0x114>)
 8004922:	f003 f9d7 	bl	8007cd4 <HAL_ADC_ConfigChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800492c:	f000 fb32 	bl	8004f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004930:	230b      	movs	r3, #11
 8004932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004934:	2303      	movs	r3, #3
 8004936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004938:	463b      	mov	r3, r7
 800493a:	4619      	mov	r1, r3
 800493c:	4815      	ldr	r0, [pc, #84]	; (8004994 <MX_ADC1_Init+0x114>)
 800493e:	f003 f9c9 	bl	8007cd4 <HAL_ADC_ConfigChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004948:	f000 fb24 	bl	8004f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800494c:	230f      	movs	r3, #15
 800494e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004950:	2304      	movs	r3, #4
 8004952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004954:	2307      	movs	r3, #7
 8004956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004958:	463b      	mov	r3, r7
 800495a:	4619      	mov	r1, r3
 800495c:	480d      	ldr	r0, [pc, #52]	; (8004994 <MX_ADC1_Init+0x114>)
 800495e:	f003 f9b9 	bl	8007cd4 <HAL_ADC_ConfigChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8004968:	f000 fb14 	bl	8004f94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_ADC1_Init+0x120>)
 800496e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004970:	2305      	movs	r3, #5
 8004972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004974:	2301      	movs	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004978:	463b      	mov	r3, r7
 800497a:	4619      	mov	r1, r3
 800497c:	4805      	ldr	r0, [pc, #20]	; (8004994 <MX_ADC1_Init+0x114>)
 800497e:	f003 f9a9 	bl	8007cd4 <HAL_ADC_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004988:	f000 fb04 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000fa4c 	.word	0x2000fa4c
 8004998:	40012000 	.word	0x40012000
 800499c:	0f000001 	.word	0x0f000001
 80049a0:	10000012 	.word	0x10000012

080049a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049aa:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <MX_SDMMC1_SD_Init+0x3c>)
 80049ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049bc:	2200      	movs	r2, #0
 80049be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	2000b934 	.word	0x2000b934
 80049e0:	40012c00 	.word	0x40012c00

080049e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <MX_SPI1_Init+0x70>)
 80049ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80049ee:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a3a:	4805      	ldr	r0, [pc, #20]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a3c:	f008 f834 	bl	800caa8 <HAL_SPI_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8004a46:	f000 faa5 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20017e3c 	.word	0x20017e3c
 8004a54:	40013000 	.word	0x40013000

08004a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <MX_SPI2_Init+0x70>)
 8004a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a9e:	2207      	movs	r2, #7
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004ab0:	f007 fffa 	bl	800caa8 <HAL_SPI_Init>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004aba:	f000 fa6b 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200095e0 	.word	0x200095e0
 8004ac8:	40003800 	.word	0x40003800

08004acc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <MX_SPI3_Init+0x70>)
 8004ad4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004aea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b12:	2207      	movs	r2, #7
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b24:	f007 ffc0 	bl	800caa8 <HAL_SPI_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004b2e:	f000 fa31 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	2000f9d8 	.word	0x2000f9d8
 8004b3c:	40003c00 	.word	0x40003c00

08004b40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <MX_UART4_Init+0x5c>)
 8004b48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b66:	220c      	movs	r2, #12
 8004b68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b82:	4805      	ldr	r0, [pc, #20]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b84:	f009 f8cc 	bl	800dd20 <HAL_UART_Init>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004b8e:	f000 fa01 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20017db8 	.word	0x20017db8
 8004b9c:	40004c00 	.word	0x40004c00

08004ba0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <MX_UART7_Init+0x5c>)
 8004ba8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004be2:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004be4:	f009 f89c 	bl	800dd20 <HAL_UART_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004bee:	f000 f9d1 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	2000964c 	.word	0x2000964c
 8004bfc:	40007800 	.word	0x40007800

08004c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <MX_USART1_UART_Init+0x5c>)
 8004c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c26:	2204      	movs	r2, #4
 8004c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c44:	f009 f86c 	bl	800dd20 <HAL_UART_Init>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004c4e:	f000 f9a1 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2000fb60 	.word	0x2000fb60
 8004c5c:	40011000 	.word	0x40011000

08004c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c66:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <MX_USART2_UART_Init+0x5c>)
 8004c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c86:	2204      	movs	r2, #4
 8004c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ca2:	4805      	ldr	r0, [pc, #20]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004ca4:	f009 f83c 	bl	800dd20 <HAL_UART_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004cae:	f000 f971 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20019f04 	.word	0x20019f04
 8004cbc:	40004400 	.word	0x40004400

08004cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <MX_USART3_UART_Init+0x5c>)
 8004cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d02:	4805      	ldr	r0, [pc, #20]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004d04:	f009 f80c 	bl	800dd20 <HAL_UART_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004d0e:	f000 f941 	bl	8004f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20009734 	.word	0x20009734
 8004d1c:	40004800 	.word	0x40004800

08004d20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d3e:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d48:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	2105      	movs	r1, #5
 8004d5a:	200b      	movs	r0, #11
 8004d5c:	f003 fb38 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004d60:	200b      	movs	r0, #11
 8004d62:	f003 fb51 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2105      	movs	r1, #5
 8004d6a:	200c      	movs	r0, #12
 8004d6c:	f003 fb30 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004d70:	200c      	movs	r0, #12
 8004d72:	f003 fb49 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2105      	movs	r1, #5
 8004d7a:	200d      	movs	r0, #13
 8004d7c:	f003 fb28 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004d80:	200d      	movs	r0, #13
 8004d82:	f003 fb41 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2105      	movs	r1, #5
 8004d8a:	200e      	movs	r0, #14
 8004d8c:	f003 fb20 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004d90:	200e      	movs	r0, #14
 8004d92:	f003 fb39 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2105      	movs	r1, #5
 8004d9a:	2010      	movs	r0, #16
 8004d9c:	f003 fb18 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004da0:	2010      	movs	r0, #16
 8004da2:	f003 fb31 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	2038      	movs	r0, #56	; 0x38
 8004dac:	f003 fb10 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004db0:	2038      	movs	r0, #56	; 0x38
 8004db2:	f003 fb29 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2105      	movs	r1, #5
 8004dba:	203a      	movs	r0, #58	; 0x3a
 8004dbc:	f003 fb08 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004dc0:	203a      	movs	r0, #58	; 0x3a
 8004dc2:	f003 fb21 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2105      	movs	r1, #5
 8004dca:	203b      	movs	r0, #59	; 0x3b
 8004dcc:	f003 fb00 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004dd0:	203b      	movs	r0, #59	; 0x3b
 8004dd2:	f003 fb19 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2105      	movs	r1, #5
 8004dda:	203c      	movs	r0, #60	; 0x3c
 8004ddc:	f003 faf8 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004de0:	203c      	movs	r0, #60	; 0x3c
 8004de2:	f003 fb11 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2105      	movs	r1, #5
 8004dea:	2045      	movs	r0, #69	; 0x45
 8004dec:	f003 faf0 	bl	80083d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004df0:	2045      	movs	r0, #69	; 0x45
 8004df2:	f003 fb09 	bl	8008408 <HAL_NVIC_EnableIRQ>

}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0a:	f107 031c 	add.w	r3, r7, #28
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	4b4b      	ldr	r3, [pc, #300]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a4a      	ldr	r2, [pc, #296]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	6313      	str	r3, [r2, #48]	; 0x30
 8004e26:	4b48      	ldr	r3, [pc, #288]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e32:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4a44      	ldr	r2, [pc, #272]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3e:	4b42      	ldr	r3, [pc, #264]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a3e      	ldr	r2, [pc, #248]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e62:	4b39      	ldr	r3, [pc, #228]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b36      	ldr	r3, [pc, #216]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e7a:	4b33      	ldr	r3, [pc, #204]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4a32      	ldr	r2, [pc, #200]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e92:	4b2d      	ldr	r3, [pc, #180]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b2a      	ldr	r3, [pc, #168]	; (8004f48 <MX_GPIO_Init+0x144>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2102      	movs	r1, #2
 8004eae:	4827      	ldr	r0, [pc, #156]	; (8004f4c <MX_GPIO_Init+0x148>)
 8004eb0:	f004 f88e 	bl	8008fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CAMERA1_Pin|CAMERA2_Pin, GPIO_PIN_RESET);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004eba:	4825      	ldr	r0, [pc, #148]	; (8004f50 <MX_GPIO_Init+0x14c>)
 8004ebc:	f004 f888 	bl	8008fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f643 0103 	movw	r1, #14339	; 0x3803
 8004ec6:	4823      	ldr	r0, [pc, #140]	; (8004f54 <MX_GPIO_Init+0x150>)
 8004ec8:	f004 f882 	bl	8008fd0 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eda:	f107 031c 	add.w	r3, r7, #28
 8004ede:	4619      	mov	r1, r3
 8004ee0:	481d      	ldr	r0, [pc, #116]	; (8004f58 <MX_GPIO_Init+0x154>)
 8004ee2:	f003 feb3 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_HOLD_Pin */
  GPIO_InitStruct.Pin = PW_HOLD_Pin;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eea:	2301      	movs	r3, #1
 8004eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8004ef6:	f107 031c 	add.w	r3, r7, #28
 8004efa:	4619      	mov	r1, r3
 8004efc:	4813      	ldr	r0, [pc, #76]	; (8004f4c <MX_GPIO_Init+0x148>)
 8004efe:	f003 fea5 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CAMERA1_Pin CAMERA2_Pin */
  GPIO_InitStruct.Pin = CAMERA1_Pin|CAMERA2_Pin;
 8004f02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004f06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f14:	f107 031c 	add.w	r3, r7, #28
 8004f18:	4619      	mov	r1, r3
 8004f1a:	480d      	ldr	r0, [pc, #52]	; (8004f50 <MX_GPIO_Init+0x14c>)
 8004f1c:	f003 fe96 	bl	8008c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin BUZZER_Pin LED1_Pin 
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004f20:	f643 0303 	movw	r3, #14339	; 0x3803
 8004f24:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f26:	2301      	movs	r3, #1
 8004f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f32:	f107 031c 	add.w	r3, r7, #28
 8004f36:	4619      	mov	r1, r3
 8004f38:	4806      	ldr	r0, [pc, #24]	; (8004f54 <MX_GPIO_Init+0x150>)
 8004f3a:	f003 fe87 	bl	8008c4c <HAL_GPIO_Init>

}
 8004f3e:	bf00      	nop
 8004f40:	3730      	adds	r7, #48	; 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40020400 	.word	0x40020400
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40020c00 	.word	0x40020c00
 8004f58:	40020800 	.word	0x40020800

08004f5c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004f64:	f014 ff42 	bl	8019dec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f011 f8ad 	bl	80160c8 <osDelay>
 8004f6e:	e7fb      	b.n	8004f68 <StartDefaultTask+0xc>

08004f70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a04      	ldr	r2, [pc, #16]	; (8004f90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d101      	bne.n	8004f86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f82:	f002 fccb 	bl	800791c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000

08004f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f98:	bf00      	nop
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	607b      	str	r3, [r7, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_MspInit+0x4c>)
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fda:	2200      	movs	r2, #0
 8004fdc:	210f      	movs	r1, #15
 8004fde:	f06f 0001 	mvn.w	r0, #1
 8004fe2:	f003 f9f5 	bl	80083d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b08a      	sub	sp, #40	; 0x28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	609a      	str	r2, [r3, #8]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a39      	ldr	r2, [pc, #228]	; (80050f8 <HAL_ADC_MspInit+0x104>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d16b      	bne.n	80050ee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501a:	4a38      	ldr	r2, [pc, #224]	; (80050fc <HAL_ADC_MspInit+0x108>)
 800501c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005020:	6453      	str	r3, [r2, #68]	; 0x44
 8005022:	4b36      	ldr	r3, [pc, #216]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800502e:	4b33      	ldr	r3, [pc, #204]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	4a32      	ldr	r2, [pc, #200]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005034:	f043 0304 	orr.w	r3, r3, #4
 8005038:	6313      	str	r3, [r2, #48]	; 0x30
 800503a:	4b30      	ldr	r3, [pc, #192]	; (80050fc <HAL_ADC_MspInit+0x108>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005046:	4b2d      	ldr	r3, [pc, #180]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	4a2c      	ldr	r2, [pc, #176]	; (80050fc <HAL_ADC_MspInit+0x108>)
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	6313      	str	r3, [r2, #48]	; 0x30
 8005052:	4b2a      	ldr	r3, [pc, #168]	; (80050fc <HAL_ADC_MspInit+0x108>)
 8005054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 800505e:	2323      	movs	r3, #35	; 0x23
 8005060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005062:	2303      	movs	r3, #3
 8005064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506a:	f107 0314 	add.w	r3, r7, #20
 800506e:	4619      	mov	r1, r3
 8005070:	4823      	ldr	r0, [pc, #140]	; (8005100 <HAL_ADC_MspInit+0x10c>)
 8005072:	f003 fdeb 	bl	8008c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8005076:	2301      	movs	r3, #1
 8005078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800507a:	2303      	movs	r3, #3
 800507c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4619      	mov	r1, r3
 8005088:	481e      	ldr	r0, [pc, #120]	; (8005104 <HAL_ADC_MspInit+0x110>)
 800508a:	f003 fddf 	bl	8008c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800508e:	4b1e      	ldr	r3, [pc, #120]	; (8005108 <HAL_ADC_MspInit+0x114>)
 8005090:	4a1e      	ldr	r2, [pc, #120]	; (800510c <HAL_ADC_MspInit+0x118>)
 8005092:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005094:	4b1c      	ldr	r3, [pc, #112]	; (8005108 <HAL_ADC_MspInit+0x114>)
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800509a:	4b1b      	ldr	r3, [pc, #108]	; (8005108 <HAL_ADC_MspInit+0x114>)
 800509c:	2200      	movs	r2, #0
 800509e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a0:	4b19      	ldr	r3, [pc, #100]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050ae:	4b16      	ldr	r3, [pc, #88]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80050be:	4b12      	ldr	r3, [pc, #72]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050cc:	4b0e      	ldr	r3, [pc, #56]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050d2:	480d      	ldr	r0, [pc, #52]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050d4:	f003 f9a6 	bl	8008424 <HAL_DMA_Init>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80050de:	f7ff ff59 	bl	8004f94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a08      	ldr	r2, [pc, #32]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050e6:	639a      	str	r2, [r3, #56]	; 0x38
 80050e8:	4a07      	ldr	r2, [pc, #28]	; (8005108 <HAL_ADC_MspInit+0x114>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80050ee:	bf00      	nop
 80050f0:	3728      	adds	r7, #40	; 0x28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40012000 	.word	0x40012000
 80050fc:	40023800 	.word	0x40023800
 8005100:	40020800 	.word	0x40020800
 8005104:	40020400 	.word	0x40020400
 8005108:	2000fbf4 	.word	0x2000fbf4
 800510c:	40026470 	.word	0x40026470

08005110 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005118:	f107 0314 	add.w	r3, r7, #20
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a65      	ldr	r2, [pc, #404]	; (80052c4 <HAL_SD_MspInit+0x1b4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f040 80c3 	bne.w	80052ba <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005134:	4b64      	ldr	r3, [pc, #400]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	4a63      	ldr	r2, [pc, #396]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 800513a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800513e:	6453      	str	r3, [r2, #68]	; 0x44
 8005140:	4b61      	ldr	r3, [pc, #388]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800514c:	4b5e      	ldr	r3, [pc, #376]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	6313      	str	r3, [r2, #48]	; 0x30
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005164:	4b58      	ldr	r3, [pc, #352]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 8005166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005168:	4a57      	ldr	r2, [pc, #348]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 800516a:	f043 0308 	orr.w	r3, r3, #8
 800516e:	6313      	str	r3, [r2, #48]	; 0x30
 8005170:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <HAL_SD_MspInit+0x1b8>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	f003 0308 	and.w	r3, r3, #8
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800517c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005180:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005182:	2302      	movs	r3, #2
 8005184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800518a:	2303      	movs	r3, #3
 800518c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800518e:	230c      	movs	r3, #12
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005192:	f107 0314 	add.w	r3, r7, #20
 8005196:	4619      	mov	r1, r3
 8005198:	484c      	ldr	r0, [pc, #304]	; (80052cc <HAL_SD_MspInit+0x1bc>)
 800519a:	f003 fd57 	bl	8008c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800519e:	2304      	movs	r3, #4
 80051a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a2:	2302      	movs	r3, #2
 80051a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051aa:	2303      	movs	r3, #3
 80051ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80051ae:	230c      	movs	r3, #12
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	4619      	mov	r1, r3
 80051b8:	4845      	ldr	r0, [pc, #276]	; (80052d0 <HAL_SD_MspInit+0x1c0>)
 80051ba:	f003 fd47 	bl	8008c4c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80051be:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051c0:	4a45      	ldr	r2, [pc, #276]	; (80052d8 <HAL_SD_MspInit+0x1c8>)
 80051c2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ca:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051cc:	4b41      	ldr	r3, [pc, #260]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051d2:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051de:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051e0:	4b3c      	ldr	r3, [pc, #240]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051e6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051e8:	4b3a      	ldr	r3, [pc, #232]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ee:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80051f0:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051f2:	2220      	movs	r2, #32
 80051f4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051f6:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051fc:	4b35      	ldr	r3, [pc, #212]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 80051fe:	2204      	movs	r2, #4
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005202:	4b34      	ldr	r3, [pc, #208]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 8005204:	2203      	movs	r2, #3
 8005206:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005208:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 800520a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800520e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005210:	4b30      	ldr	r3, [pc, #192]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 8005212:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8005218:	482e      	ldr	r0, [pc, #184]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 800521a:	f003 f903 	bl	8008424 <HAL_DMA_Init>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8005224:	f7ff feb6 	bl	8004f94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
 800522e:	4a29      	ldr	r2, [pc, #164]	; (80052d4 <HAL_SD_MspInit+0x1c4>)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8005234:	4b29      	ldr	r3, [pc, #164]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005236:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <HAL_SD_MspInit+0x1d0>)
 8005238:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800523a:	4b28      	ldr	r3, [pc, #160]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 800523c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005240:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005242:	4b26      	ldr	r3, [pc, #152]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005248:	4b24      	ldr	r3, [pc, #144]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 800524a:	2200      	movs	r2, #0
 800524c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005254:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005256:	4b21      	ldr	r3, [pc, #132]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005258:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800525c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800525e:	4b1f      	ldr	r3, [pc, #124]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005260:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005264:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005268:	2220      	movs	r2, #32
 800526a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 800526e:	2200      	movs	r2, #0
 8005270:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005274:	2204      	movs	r2, #4
 8005276:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005278:	4b18      	ldr	r3, [pc, #96]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 800527a:	2203      	movs	r2, #3
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800527e:	4b17      	ldr	r3, [pc, #92]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005280:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005284:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005286:	4b15      	ldr	r3, [pc, #84]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005288:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800528c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800528e:	4813      	ldr	r0, [pc, #76]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 8005290:	f003 f8c8 	bl	8008424 <HAL_DMA_Init>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800529a:	f7ff fe7b 	bl	8004f94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a0e      	ldr	r2, [pc, #56]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80052a4:	4a0d      	ldr	r2, [pc, #52]	; (80052dc <HAL_SD_MspInit+0x1cc>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2105      	movs	r1, #5
 80052ae:	2031      	movs	r0, #49	; 0x31
 80052b0:	f003 f88e 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80052b4:	2031      	movs	r0, #49	; 0x31
 80052b6:	f003 f8a7 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80052ba:	bf00      	nop
 80052bc:	3728      	adds	r7, #40	; 0x28
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40020800 	.word	0x40020800
 80052d0:	40020c00 	.word	0x40020c00
 80052d4:	20013d4c 	.word	0x20013d4c
 80052d8:	400264a0 	.word	0x400264a0
 80052dc:	2001c044 	.word	0x2001c044
 80052e0:	40026458 	.word	0x40026458

080052e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a64      	ldr	r2, [pc, #400]	; (8005494 <HAL_SPI_MspInit+0x1b0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d160      	bne.n	80053c8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005306:	4b64      	ldr	r3, [pc, #400]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	4a63      	ldr	r2, [pc, #396]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 800530c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005310:	6453      	str	r3, [r2, #68]	; 0x44
 8005312:	4b61      	ldr	r3, [pc, #388]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 8005314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800531e:	4b5e      	ldr	r3, [pc, #376]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	4a5d      	ldr	r2, [pc, #372]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6313      	str	r3, [r2, #48]	; 0x30
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8005336:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800533a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800533c:	2302      	movs	r3, #2
 800533e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005340:	2300      	movs	r3, #0
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005344:	2303      	movs	r3, #3
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005348:	2305      	movs	r3, #5
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800534c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005350:	4619      	mov	r1, r3
 8005352:	4852      	ldr	r0, [pc, #328]	; (800549c <HAL_SPI_MspInit+0x1b8>)
 8005354:	f003 fc7a 	bl	8008c4c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005358:	4b51      	ldr	r3, [pc, #324]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 800535a:	4a52      	ldr	r2, [pc, #328]	; (80054a4 <HAL_SPI_MspInit+0x1c0>)
 800535c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800535e:	4b50      	ldr	r3, [pc, #320]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005360:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005364:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005366:	4b4e      	ldr	r3, [pc, #312]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800536c:	4b4c      	ldr	r3, [pc, #304]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 800536e:	2200      	movs	r2, #0
 8005370:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005372:	4b4b      	ldr	r3, [pc, #300]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005378:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800537a:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 800537c:	2200      	movs	r2, #0
 800537e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005382:	2200      	movs	r2, #0
 8005384:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8005386:	4b46      	ldr	r3, [pc, #280]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005388:	f44f 7280 	mov.w	r2, #256	; 0x100
 800538c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800538e:	4b44      	ldr	r3, [pc, #272]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005390:	2200      	movs	r2, #0
 8005392:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005394:	4b42      	ldr	r3, [pc, #264]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 8005396:	2200      	movs	r2, #0
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800539a:	4841      	ldr	r0, [pc, #260]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 800539c:	f003 f842 	bl	8008424 <HAL_DMA_Init>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80053a6:	f7ff fdf5 	bl	8004f94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a3c      	ldr	r2, [pc, #240]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 80053ae:	659a      	str	r2, [r3, #88]	; 0x58
 80053b0:	4a3b      	ldr	r2, [pc, #236]	; (80054a0 <HAL_SPI_MspInit+0x1bc>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 80053b6:	2200      	movs	r2, #0
 80053b8:	2105      	movs	r1, #5
 80053ba:	2023      	movs	r0, #35	; 0x23
 80053bc:	f003 f808 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80053c0:	2023      	movs	r0, #35	; 0x23
 80053c2:	f003 f821 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80053c6:	e107      	b.n	80055d8 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a36      	ldr	r2, [pc, #216]	; (80054a8 <HAL_SPI_MspInit+0x1c4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d172      	bne.n	80054b8 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053d2:	4b31      	ldr	r3, [pc, #196]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	4a30      	ldr	r2, [pc, #192]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053dc:	6413      	str	r3, [r2, #64]	; 0x40
 80053de:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053ea:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053f0:	f043 0302 	orr.w	r3, r3, #2
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b28      	ldr	r3, [pc, #160]	; (8005498 <HAL_SPI_MspInit+0x1b4>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005402:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005410:	2303      	movs	r3, #3
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005414:	2305      	movs	r3, #5
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800541c:	4619      	mov	r1, r3
 800541e:	4823      	ldr	r0, [pc, #140]	; (80054ac <HAL_SPI_MspInit+0x1c8>)
 8005420:	f003 fc14 	bl	8008c4c <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005424:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005426:	4a23      	ldr	r2, [pc, #140]	; (80054b4 <HAL_SPI_MspInit+0x1d0>)
 8005428:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800542a:	4b21      	ldr	r3, [pc, #132]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 800542c:	2200      	movs	r2, #0
 800542e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005430:	4b1f      	ldr	r3, [pc, #124]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005432:	2200      	movs	r2, #0
 8005434:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005436:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005438:	2200      	movs	r2, #0
 800543a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 800543e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005442:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005444:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800544a:	4b19      	ldr	r3, [pc, #100]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005450:	4b17      	ldr	r3, [pc, #92]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005456:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 800545a:	2200      	movs	r2, #0
 800545c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005460:	2200      	movs	r2, #0
 8005462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005464:	4812      	ldr	r0, [pc, #72]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005466:	f002 ffdd 	bl	8008424 <HAL_DMA_Init>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_SPI_MspInit+0x190>
      Error_Handler();
 8005470:	f7ff fd90 	bl	8004f94 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a0e      	ldr	r2, [pc, #56]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 8005478:	659a      	str	r2, [r3, #88]	; 0x58
 800547a:	4a0d      	ldr	r2, [pc, #52]	; (80054b0 <HAL_SPI_MspInit+0x1cc>)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005480:	2200      	movs	r2, #0
 8005482:	2105      	movs	r1, #5
 8005484:	2024      	movs	r0, #36	; 0x24
 8005486:	f002 ffa3 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800548a:	2024      	movs	r0, #36	; 0x24
 800548c:	f002 ffbc 	bl	8008408 <HAL_NVIC_EnableIRQ>
}
 8005490:	e0a2      	b.n	80055d8 <HAL_SPI_MspInit+0x2f4>
 8005492:	bf00      	nop
 8005494:	40013000 	.word	0x40013000
 8005498:	40023800 	.word	0x40023800
 800549c:	40020000 	.word	0x40020000
 80054a0:	20019fe0 	.word	0x20019fe0
 80054a4:	40026410 	.word	0x40026410
 80054a8:	40003800 	.word	0x40003800
 80054ac:	40020400 	.word	0x40020400
 80054b0:	2000b8d4 	.word	0x2000b8d4
 80054b4:	40026058 	.word	0x40026058
  else if(hspi->Instance==SPI3)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a48      	ldr	r2, [pc, #288]	; (80055e0 <HAL_SPI_MspInit+0x2fc>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	f040 808a 	bne.w	80055d8 <HAL_SPI_MspInit+0x2f4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80054c4:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	4a46      	ldr	r2, [pc, #280]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	6413      	str	r3, [r2, #64]	; 0x40
 80054d0:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054dc:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e0:	4a40      	ldr	r2, [pc, #256]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6313      	str	r3, [r2, #48]	; 0x30
 80054e8:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f4:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	4a3a      	ldr	r2, [pc, #232]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 80054fa:	f043 0302 	orr.w	r3, r3, #2
 80054fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005500:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <HAL_SPI_MspInit+0x300>)
 8005502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	60bb      	str	r3, [r7, #8]
 800550a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800550c:	2310      	movs	r3, #16
 800550e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005510:	2302      	movs	r3, #2
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005514:	2300      	movs	r3, #0
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005518:	2303      	movs	r3, #3
 800551a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800551c:	2306      	movs	r3, #6
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005524:	4619      	mov	r1, r3
 8005526:	4830      	ldr	r0, [pc, #192]	; (80055e8 <HAL_SPI_MspInit+0x304>)
 8005528:	f003 fb90 	bl	8008c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800552c:	2304      	movs	r3, #4
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005530:	2302      	movs	r3, #2
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005534:	2300      	movs	r3, #0
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005538:	2303      	movs	r3, #3
 800553a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800553c:	2307      	movs	r3, #7
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005544:	4619      	mov	r1, r3
 8005546:	4829      	ldr	r0, [pc, #164]	; (80055ec <HAL_SPI_MspInit+0x308>)
 8005548:	f003 fb80 	bl	8008c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800554c:	2318      	movs	r3, #24
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005550:	2302      	movs	r3, #2
 8005552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005558:	2303      	movs	r3, #3
 800555a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800555c:	2306      	movs	r3, #6
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005564:	4619      	mov	r1, r3
 8005566:	4821      	ldr	r0, [pc, #132]	; (80055ec <HAL_SPI_MspInit+0x308>)
 8005568:	f003 fb70 	bl	8008c4c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800556c:	4b20      	ldr	r3, [pc, #128]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <HAL_SPI_MspInit+0x310>)
 8005570:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8005572:	4b1f      	ldr	r3, [pc, #124]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 8005574:	2200      	movs	r2, #0
 8005576:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005578:	4b1d      	ldr	r3, [pc, #116]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800557e:	4b1c      	ldr	r3, [pc, #112]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 8005580:	2200      	movs	r2, #0
 8005582:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005584:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 8005586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800558c:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005592:	4b17      	ldr	r3, [pc, #92]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8005598:	4b15      	ldr	r3, [pc, #84]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 800559a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800559e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055a0:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055a6:	4b12      	ldr	r3, [pc, #72]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80055ac:	4810      	ldr	r0, [pc, #64]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 80055ae:	f002 ff39 	bl	8008424 <HAL_DMA_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 80055b8:	f7ff fcec 	bl	8004f94 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a0c      	ldr	r2, [pc, #48]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 80055c0:	659a      	str	r2, [r3, #88]	; 0x58
 80055c2:	4a0b      	ldr	r2, [pc, #44]	; (80055f0 <HAL_SPI_MspInit+0x30c>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80055c8:	2200      	movs	r2, #0
 80055ca:	2105      	movs	r1, #5
 80055cc:	2033      	movs	r0, #51	; 0x33
 80055ce:	f002 feff 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80055d2:	2033      	movs	r0, #51	; 0x33
 80055d4:	f002 ff18 	bl	8008408 <HAL_NVIC_EnableIRQ>
}
 80055d8:	bf00      	nop
 80055da:	3738      	adds	r7, #56	; 0x38
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40003c00 	.word	0x40003c00
 80055e4:	40023800 	.word	0x40023800
 80055e8:	40020000 	.word	0x40020000
 80055ec:	40020400 	.word	0x40020400
 80055f0:	2001c104 	.word	0x2001c104
 80055f4:	40026010 	.word	0x40026010

080055f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b092      	sub	sp, #72	; 0x48
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005600:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
 8005608:	605a      	str	r2, [r3, #4]
 800560a:	609a      	str	r2, [r3, #8]
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a77      	ldr	r2, [pc, #476]	; (80057f4 <HAL_UART_MspInit+0x1fc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d156      	bne.n	80056c8 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800561a:	4b77      	ldr	r3, [pc, #476]	; (80057f8 <HAL_UART_MspInit+0x200>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	4a76      	ldr	r2, [pc, #472]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005624:	6413      	str	r3, [r2, #64]	; 0x40
 8005626:	4b74      	ldr	r3, [pc, #464]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005632:	4b71      	ldr	r3, [pc, #452]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a70      	ldr	r2, [pc, #448]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b6e      	ldr	r3, [pc, #440]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800564a:	2303      	movs	r3, #3
 800564c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005656:	2303      	movs	r3, #3
 8005658:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800565a:	2308      	movs	r3, #8
 800565c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005662:	4619      	mov	r1, r3
 8005664:	4865      	ldr	r0, [pc, #404]	; (80057fc <HAL_UART_MspInit+0x204>)
 8005666:	f003 faf1 	bl	8008c4c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800566a:	4b65      	ldr	r3, [pc, #404]	; (8005800 <HAL_UART_MspInit+0x208>)
 800566c:	4a65      	ldr	r2, [pc, #404]	; (8005804 <HAL_UART_MspInit+0x20c>)
 800566e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005670:	4b63      	ldr	r3, [pc, #396]	; (8005800 <HAL_UART_MspInit+0x208>)
 8005672:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005676:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005678:	4b61      	ldr	r3, [pc, #388]	; (8005800 <HAL_UART_MspInit+0x208>)
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800567e:	4b60      	ldr	r3, [pc, #384]	; (8005800 <HAL_UART_MspInit+0x208>)
 8005680:	2200      	movs	r2, #0
 8005682:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005684:	4b5e      	ldr	r3, [pc, #376]	; (8005800 <HAL_UART_MspInit+0x208>)
 8005686:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800568a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800568c:	4b5c      	ldr	r3, [pc, #368]	; (8005800 <HAL_UART_MspInit+0x208>)
 800568e:	2200      	movs	r2, #0
 8005690:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005692:	4b5b      	ldr	r3, [pc, #364]	; (8005800 <HAL_UART_MspInit+0x208>)
 8005694:	2200      	movs	r2, #0
 8005696:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005698:	4b59      	ldr	r3, [pc, #356]	; (8005800 <HAL_UART_MspInit+0x208>)
 800569a:	2200      	movs	r2, #0
 800569c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800569e:	4b58      	ldr	r3, [pc, #352]	; (8005800 <HAL_UART_MspInit+0x208>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056a4:	4b56      	ldr	r3, [pc, #344]	; (8005800 <HAL_UART_MspInit+0x208>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80056aa:	4855      	ldr	r0, [pc, #340]	; (8005800 <HAL_UART_MspInit+0x208>)
 80056ac:	f002 feba 	bl	8008424 <HAL_DMA_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80056b6:	f7ff fc6d 	bl	8004f94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a50      	ldr	r2, [pc, #320]	; (8005800 <HAL_UART_MspInit+0x208>)
 80056be:	66da      	str	r2, [r3, #108]	; 0x6c
 80056c0:	4a4f      	ldr	r2, [pc, #316]	; (8005800 <HAL_UART_MspInit+0x208>)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80056c6:	e165      	b.n	8005994 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART7)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a4e      	ldr	r2, [pc, #312]	; (8005808 <HAL_UART_MspInit+0x210>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d131      	bne.n	8005736 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 80056d2:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a48      	ldr	r2, [pc, #288]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
 80056de:	4b46      	ldr	r3, [pc, #280]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80056ea:	4b43      	ldr	r3, [pc, #268]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ee:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056f0:	f043 0310 	orr.w	r3, r3, #16
 80056f4:	6313      	str	r3, [r2, #48]	; 0x30
 80056f6:	4b40      	ldr	r3, [pc, #256]	; (80057f8 <HAL_UART_MspInit+0x200>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005702:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005706:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005708:	2302      	movs	r3, #2
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800570c:	2300      	movs	r3, #0
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005710:	2303      	movs	r3, #3
 8005712:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005714:	2308      	movs	r3, #8
 8005716:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005718:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800571c:	4619      	mov	r1, r3
 800571e:	483b      	ldr	r0, [pc, #236]	; (800580c <HAL_UART_MspInit+0x214>)
 8005720:	f003 fa94 	bl	8008c4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8005724:	2200      	movs	r2, #0
 8005726:	2105      	movs	r1, #5
 8005728:	2052      	movs	r0, #82	; 0x52
 800572a:	f002 fe51 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800572e:	2052      	movs	r0, #82	; 0x52
 8005730:	f002 fe6a 	bl	8008408 <HAL_NVIC_EnableIRQ>
}
 8005734:	e12e      	b.n	8005994 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a35      	ldr	r2, [pc, #212]	; (8005810 <HAL_UART_MspInit+0x218>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d16d      	bne.n	800581c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005740:	4b2d      	ldr	r3, [pc, #180]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005744:	4a2c      	ldr	r2, [pc, #176]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005746:	f043 0310 	orr.w	r3, r3, #16
 800574a:	6453      	str	r3, [r2, #68]	; 0x44
 800574c:	4b2a      	ldr	r3, [pc, #168]	; (80057f8 <HAL_UART_MspInit+0x200>)
 800574e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005750:	f003 0310 	and.w	r3, r3, #16
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005758:	4b27      	ldr	r3, [pc, #156]	; (80057f8 <HAL_UART_MspInit+0x200>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	4a26      	ldr	r2, [pc, #152]	; (80057f8 <HAL_UART_MspInit+0x200>)
 800575e:	f043 0301 	orr.w	r3, r3, #1
 8005762:	6313      	str	r3, [r2, #48]	; 0x30
 8005764:	4b24      	ldr	r3, [pc, #144]	; (80057f8 <HAL_UART_MspInit+0x200>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005770:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005774:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005776:	2302      	movs	r3, #2
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577a:	2300      	movs	r3, #0
 800577c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2303      	movs	r3, #3
 8005780:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005782:	2307      	movs	r3, #7
 8005784:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005786:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800578a:	4619      	mov	r1, r3
 800578c:	481b      	ldr	r0, [pc, #108]	; (80057fc <HAL_UART_MspInit+0x204>)
 800578e:	f003 fa5d 	bl	8008c4c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005792:	4b20      	ldr	r3, [pc, #128]	; (8005814 <HAL_UART_MspInit+0x21c>)
 8005794:	4a20      	ldr	r2, [pc, #128]	; (8005818 <HAL_UART_MspInit+0x220>)
 8005796:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <HAL_UART_MspInit+0x21c>)
 800579a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800579e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057a0:	4b1c      	ldr	r3, [pc, #112]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057ba:	4b16      	ldr	r3, [pc, #88]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057bc:	2200      	movs	r2, #0
 80057be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80057c0:	4b14      	ldr	r3, [pc, #80]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057c6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80057d6:	480f      	ldr	r0, [pc, #60]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057d8:	f002 fe24 	bl	8008424 <HAL_DMA_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 80057e2:	f7ff fbd7 	bl	8004f94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a0a      	ldr	r2, [pc, #40]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057ea:	66da      	str	r2, [r3, #108]	; 0x6c
 80057ec:	4a09      	ldr	r2, [pc, #36]	; (8005814 <HAL_UART_MspInit+0x21c>)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80057f2:	e0cf      	b.n	8005994 <HAL_UART_MspInit+0x39c>
 80057f4:	40004c00 	.word	0x40004c00
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40020000 	.word	0x40020000
 8005800:	20009514 	.word	0x20009514
 8005804:	40026040 	.word	0x40026040
 8005808:	40007800 	.word	0x40007800
 800580c:	40021000 	.word	0x40021000
 8005810:	40011000 	.word	0x40011000
 8005814:	2000fa9c 	.word	0x2000fa9c
 8005818:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a5e      	ldr	r2, [pc, #376]	; (800599c <HAL_UART_MspInit+0x3a4>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d158      	bne.n	80058d8 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005826:	4b5e      	ldr	r3, [pc, #376]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	4a5d      	ldr	r2, [pc, #372]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 800582c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005830:	6413      	str	r3, [r2, #64]	; 0x40
 8005832:	4b5b      	ldr	r3, [pc, #364]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583e:	4b58      	ldr	r3, [pc, #352]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a57      	ldr	r2, [pc, #348]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b55      	ldr	r3, [pc, #340]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005856:	230c      	movs	r3, #12
 8005858:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005862:	2303      	movs	r3, #3
 8005864:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005866:	2307      	movs	r3, #7
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800586e:	4619      	mov	r1, r3
 8005870:	484c      	ldr	r0, [pc, #304]	; (80059a4 <HAL_UART_MspInit+0x3ac>)
 8005872:	f003 f9eb 	bl	8008c4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005876:	4b4c      	ldr	r3, [pc, #304]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 8005878:	4a4c      	ldr	r2, [pc, #304]	; (80059ac <HAL_UART_MspInit+0x3b4>)
 800587a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800587c:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 800587e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005882:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005884:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 8005886:	2200      	movs	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 800588c:	2200      	movs	r2, #0
 800588e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005890:	4b45      	ldr	r3, [pc, #276]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 8005892:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005896:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005898:	4b43      	ldr	r3, [pc, #268]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 800589a:	2200      	movs	r2, #0
 800589c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800589e:	4b42      	ldr	r3, [pc, #264]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80058a4:	4b40      	ldr	r3, [pc, #256]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058b2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058b4:	4b3c      	ldr	r3, [pc, #240]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80058ba:	483b      	ldr	r0, [pc, #236]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058bc:	f002 fdb2 	bl	8008424 <HAL_DMA_Init>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 80058c6:	f7ff fb65 	bl	8004f94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a36      	ldr	r2, [pc, #216]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80058d0:	4a35      	ldr	r2, [pc, #212]	; (80059a8 <HAL_UART_MspInit+0x3b0>)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80058d6:	e05d      	b.n	8005994 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART3)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <HAL_UART_MspInit+0x3b8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d158      	bne.n	8005994 <HAL_UART_MspInit+0x39c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80058e2:	4b2f      	ldr	r3, [pc, #188]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	4a2e      	ldr	r2, [pc, #184]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 80058e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058ec:	6413      	str	r3, [r2, #64]	; 0x40
 80058ee:	4b2c      	ldr	r3, [pc, #176]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058fa:	4b29      	ldr	r3, [pc, #164]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fe:	4a28      	ldr	r2, [pc, #160]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005900:	f043 0308 	orr.w	r3, r3, #8
 8005904:	6313      	str	r3, [r2, #48]	; 0x30
 8005906:	4b26      	ldr	r3, [pc, #152]	; (80059a0 <HAL_UART_MspInit+0x3a8>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005916:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005918:	2302      	movs	r3, #2
 800591a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591c:	2300      	movs	r3, #0
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005920:	2303      	movs	r3, #3
 8005922:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005924:	2307      	movs	r3, #7
 8005926:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005928:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800592c:	4619      	mov	r1, r3
 800592e:	4821      	ldr	r0, [pc, #132]	; (80059b4 <HAL_UART_MspInit+0x3bc>)
 8005930:	f003 f98c 	bl	8008c4c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005934:	4b20      	ldr	r3, [pc, #128]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005936:	4a21      	ldr	r2, [pc, #132]	; (80059bc <HAL_UART_MspInit+0x3c4>)
 8005938:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800593a:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800593c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005940:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005944:	2200      	movs	r2, #0
 8005946:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005948:	4b1b      	ldr	r3, [pc, #108]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800594a:	2200      	movs	r2, #0
 800594c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800594e:	4b1a      	ldr	r3, [pc, #104]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005954:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005958:	2200      	movs	r2, #0
 800595a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800595e:	2200      	movs	r2, #0
 8005960:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005962:	4b15      	ldr	r3, [pc, #84]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005968:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800596c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005970:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005972:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005974:	2200      	movs	r2, #0
 8005976:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005978:	480f      	ldr	r0, [pc, #60]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800597a:	f002 fd53 	bl	8008424 <HAL_DMA_Init>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_UART_MspInit+0x390>
      Error_Handler();
 8005984:	f7ff fb06 	bl	8004f94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 800598c:	66da      	str	r2, [r3, #108]	; 0x6c
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <HAL_UART_MspInit+0x3c0>)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005994:	bf00      	nop
 8005996:	3748      	adds	r7, #72	; 0x48
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40004400 	.word	0x40004400
 80059a0:	40023800 	.word	0x40023800
 80059a4:	40020000 	.word	0x40020000
 80059a8:	20009578 	.word	0x20009578
 80059ac:	40026088 	.word	0x40026088
 80059b0:	40004800 	.word	0x40004800
 80059b4:	40020c00 	.word	0x40020c00
 80059b8:	200096cc 	.word	0x200096cc
 80059bc:	40026028 	.word	0x40026028

080059c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08c      	sub	sp, #48	; 0x30
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80059d0:	2200      	movs	r2, #0
 80059d2:	6879      	ldr	r1, [r7, #4]
 80059d4:	2019      	movs	r0, #25
 80059d6:	f002 fcfb 	bl	80083d0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80059da:	2019      	movs	r0, #25
 80059dc:	f002 fd14 	bl	8008408 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80059e0:	4b1f      	ldr	r3, [pc, #124]	; (8005a60 <HAL_InitTick+0xa0>)
 80059e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e4:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_InitTick+0xa0>)
 80059e6:	f043 0301 	orr.w	r3, r3, #1
 80059ea:	6453      	str	r3, [r2, #68]	; 0x44
 80059ec:	4b1c      	ldr	r3, [pc, #112]	; (8005a60 <HAL_InitTick+0xa0>)
 80059ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059f8:	f107 0210 	add.w	r2, r7, #16
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f005 f972 	bl	800acec <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005a08:	f005 f95c 	bl	800acc4 <HAL_RCC_GetPCLK2Freq>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_InitTick+0xa4>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0c9b      	lsrs	r3, r3, #18
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005a20:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a22:	4a12      	ldr	r2, [pc, #72]	; (8005a6c <HAL_InitTick+0xac>)
 8005a24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005a26:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005a34:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005a40:	4809      	ldr	r0, [pc, #36]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a42:	f007 ff07 	bl	800d854 <HAL_TIM_Base_Init>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005a4c:	4806      	ldr	r0, [pc, #24]	; (8005a68 <HAL_InitTick+0xa8>)
 8005a4e:	f007 ff37 	bl	800d8c0 <HAL_TIM_Base_Start_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	e000      	b.n	8005a58 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3730      	adds	r7, #48	; 0x30
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40023800 	.word	0x40023800
 8005a64:	431bde83 	.word	0x431bde83
 8005a68:	2001c174 	.word	0x2001c174
 8005a6c:	40010000 	.word	0x40010000

08005a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a82:	e7fe      	b.n	8005a82 <HardFault_Handler+0x4>

08005a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a84:	b480      	push	{r7}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a88:	e7fe      	b.n	8005a88 <MemManage_Handler+0x4>

08005a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a8e:	e7fe      	b.n	8005a8e <BusFault_Handler+0x4>

08005a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a94:	e7fe      	b.n	8005a94 <UsageFault_Handler+0x4>

08005a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005aa8:	4802      	ldr	r0, [pc, #8]	; (8005ab4 <DMA1_Stream0_IRQHandler+0x10>)
 8005aaa:	f002 fe5b 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005aae:	bf00      	nop
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2001c104 	.word	0x2001c104

08005ab8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005abc:	4802      	ldr	r0, [pc, #8]	; (8005ac8 <DMA1_Stream1_IRQHandler+0x10>)
 8005abe:	f002 fe51 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005ac2:	bf00      	nop
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200096cc 	.word	0x200096cc

08005acc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005ad0:	4802      	ldr	r0, [pc, #8]	; (8005adc <DMA1_Stream2_IRQHandler+0x10>)
 8005ad2:	f002 fe47 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20009514 	.word	0x20009514

08005ae0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005ae4:	4802      	ldr	r0, [pc, #8]	; (8005af0 <DMA1_Stream3_IRQHandler+0x10>)
 8005ae6:	f002 fe3d 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	2000b8d4 	.word	0x2000b8d4

08005af4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005af8:	4802      	ldr	r0, [pc, #8]	; (8005b04 <DMA1_Stream5_IRQHandler+0x10>)
 8005afa:	f002 fe33 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005afe:	bf00      	nop
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20009578 	.word	0x20009578

08005b08 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b0c:	4802      	ldr	r0, [pc, #8]	; (8005b18 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005b0e:	f007 ff01 	bl	800d914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2001c174 	.word	0x2001c174

08005b1c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005b20:	4802      	ldr	r0, [pc, #8]	; (8005b2c <SPI1_IRQHandler+0x10>)
 8005b22:	f007 fafb 	bl	800d11c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005b26:	bf00      	nop
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20017e3c 	.word	0x20017e3c

08005b30 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005b34:	4802      	ldr	r0, [pc, #8]	; (8005b40 <SPI2_IRQHandler+0x10>)
 8005b36:	f007 faf1 	bl	800d11c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005b3a:	bf00      	nop
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	200095e0 	.word	0x200095e0

08005b44 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005b48:	4802      	ldr	r0, [pc, #8]	; (8005b54 <SDMMC1_IRQHandler+0x10>)
 8005b4a:	f005 ff29 	bl	800b9a0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005b4e:	bf00      	nop
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	2000b934 	.word	0x2000b934

08005b58 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005b5c:	4802      	ldr	r0, [pc, #8]	; (8005b68 <SPI3_IRQHandler+0x10>)
 8005b5e:	f007 fadd 	bl	800d11c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	2000f9d8 	.word	0x2000f9d8

08005b6c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005b70:	4802      	ldr	r0, [pc, #8]	; (8005b7c <DMA2_Stream0_IRQHandler+0x10>)
 8005b72:	f002 fdf7 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b76:	bf00      	nop
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20019fe0 	.word	0x20019fe0

08005b80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005b84:	4802      	ldr	r0, [pc, #8]	; (8005b90 <DMA2_Stream2_IRQHandler+0x10>)
 8005b86:	f002 fded 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000fa9c 	.word	0x2000fa9c

08005b94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <DMA2_Stream3_IRQHandler+0x10>)
 8005b9a:	f002 fde3 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2001c044 	.word	0x2001c044

08005ba8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <DMA2_Stream4_IRQHandler+0x10>)
 8005bae:	f002 fdd9 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	2000fbf4 	.word	0x2000fbf4

08005bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <OTG_FS_IRQHandler+0x10>)
 8005bc2:	f003 fb7e 	bl	80092c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2001dfa8 	.word	0x2001dfa8

08005bd0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005bd4:	4802      	ldr	r0, [pc, #8]	; (8005be0 <DMA2_Stream6_IRQHandler+0x10>)
 8005bd6:	f002 fdc5 	bl	8008764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	20013d4c 	.word	0x20013d4c

08005be4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <UART7_IRQHandler+0x10>)
 8005bea:	f008 fba5 	bl	800e338 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2000964c 	.word	0x2000964c

08005bf8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <_sbrk+0x50>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d102      	bne.n	8005c0e <_sbrk+0x16>
		heap_end = &end;
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <_sbrk+0x50>)
 8005c0a:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <_sbrk+0x54>)
 8005c0c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <_sbrk+0x50>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005c14:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <_sbrk+0x50>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	466a      	mov	r2, sp
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d907      	bls.n	8005c32 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005c22:	f014 fe25 	bl	801a870 <__errno>
 8005c26:	4602      	mov	r2, r0
 8005c28:	230c      	movs	r3, #12
 8005c2a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	e006      	b.n	8005c40 <_sbrk+0x48>
	}

	heap_end += incr;
 8005c32:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <_sbrk+0x50>)
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4413      	add	r3, r2
 8005c3a:	4a03      	ldr	r2, [pc, #12]	; (8005c48 <_sbrk+0x50>)
 8005c3c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	200002c8 	.word	0x200002c8
 8005c4c:	2001e3b0 	.word	0x2001e3b0

08005c50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c54:	4b15      	ldr	r3, [pc, #84]	; (8005cac <SystemInit+0x5c>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	4a14      	ldr	r2, [pc, #80]	; (8005cac <SystemInit+0x5c>)
 8005c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c64:	4b12      	ldr	r3, [pc, #72]	; (8005cb0 <SystemInit+0x60>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a11      	ldr	r2, [pc, #68]	; (8005cb0 <SystemInit+0x60>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <SystemInit+0x60>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <SystemInit+0x60>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	490d      	ldr	r1, [pc, #52]	; (8005cb0 <SystemInit+0x60>)
 8005c7c:	4b0d      	ldr	r3, [pc, #52]	; (8005cb4 <SystemInit+0x64>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c82:	4b0b      	ldr	r3, [pc, #44]	; (8005cb0 <SystemInit+0x60>)
 8005c84:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <SystemInit+0x68>)
 8005c86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c88:	4b09      	ldr	r3, [pc, #36]	; (8005cb0 <SystemInit+0x60>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <SystemInit+0x60>)
 8005c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <SystemInit+0x60>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c9a:	4b04      	ldr	r3, [pc, #16]	; (8005cac <SystemInit+0x5c>)
 8005c9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005ca0:	609a      	str	r2, [r3, #8]
#endif
}
 8005ca2:	bf00      	nop
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	e000ed00 	.word	0xe000ed00
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	fef6ffff 	.word	0xfef6ffff
 8005cb8:	24003010 	.word	0x24003010
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 8005cc0:	b5b0      	push	{r4, r5, r7, lr}
 8005cc2:	b09e      	sub	sp, #120	; 0x78
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	double mah;
	double curr = 0;
 8005cc8:	f04f 0300 	mov.w	r3, #0
 8005ccc:	f04f 0400 	mov.w	r4, #0
 8005cd0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double supp = 0;
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	f04f 0400 	mov.w	r4, #0
 8005cdc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double bat = 0;
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	f04f 0400 	mov.w	r4, #0
 8005ce8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48


	battery_data_t battery_data = { 0 };
 8005cec:	f107 031c 	add.w	r3, r7, #28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	811a      	strh	r2, [r3, #8]

	int counter = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	647b      	str	r3, [r7, #68]	; 0x44

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005cfc:	f010 f90c 	bl	8015f18 <osKernelGetTickCount>
 8005d00:	66f8      	str	r0, [r7, #108]	; 0x6c
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8005d02:	f010 f931 	bl	8015f68 <osKernelGetTickFreq>
 8005d06:	4602      	mov	r2, r0
 8005d08:	4b6f      	ldr	r3, [pc, #444]	; (8005ec8 <vTaskBattery+0x208>)
 8005d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0e:	091b      	lsrs	r3, r3, #4
 8005d10:	643b      	str	r3, [r7, #64]	; 0x40

	//ADC init
	uint32_t adc_value[5];

	HAL_ADC_Stop_DMA(&hadc1);
 8005d12:	486e      	ldr	r0, [pc, #440]	; (8005ecc <vTaskBattery+0x20c>)
 8005d14:	f001 ff76 	bl	8007c04 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005d18:	f107 0308 	add.w	r3, r7, #8
 8005d1c:	2205      	movs	r2, #5
 8005d1e:	4619      	mov	r1, r3
 8005d20:	486a      	ldr	r0, [pc, #424]	; (8005ecc <vTaskBattery+0x20c>)
 8005d22:	f001 fe81 	bl	8007a28 <HAL_ADC_Start_DMA>

	osDelay(500);
 8005d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d2a:	f010 f9cd 	bl	80160c8 <osDelay>



	for (;;) {
		tick_count += tick_update;
 8005d2e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d32:	4413      	add	r3, r2
 8005d34:	66fb      	str	r3, [r7, #108]	; 0x6c

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fa fc03 	bl	8000544 <__aeabi_ui2d>
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	4b63      	ldr	r3, [pc, #396]	; (8005ed0 <vTaskBattery+0x210>)
 8005d44:	f7fa fc78 	bl	8000638 <__aeabi_dmul>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	4621      	mov	r1, r4
 8005d50:	a357      	add	r3, pc, #348	; (adr r3, 8005eb0 <vTaskBattery+0x1f0>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa fab7 	bl	80002c8 <__aeabi_dsub>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	4621      	mov	r1, r4
 8005d62:	a355      	add	r3, pc, #340	; (adr r3, 8005eb8 <vTaskBattery+0x1f8>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fd90 	bl	800088c <__aeabi_ddiv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fa fbe4 	bl	8000544 <__aeabi_ui2d>
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	4b53      	ldr	r3, [pc, #332]	; (8005ed0 <vTaskBattery+0x210>)
 8005d82:	f7fa fc59 	bl	8000638 <__aeabi_dmul>
 8005d86:	4603      	mov	r3, r0
 8005d88:	460c      	mov	r4, r1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	f7fa fa9b 	bl	80002cc <__adddf3>
 8005d96:	4603      	mov	r3, r0
 8005d98:	460c      	mov	r4, r1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f7fa ff1b 	bl	8000bd8 <__aeabi_d2f>
 8005da2:	4603      	mov	r3, r0
 8005da4:	637b      	str	r3, [r7, #52]	; 0x34
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fa fbcb 	bl	8000544 <__aeabi_ui2d>
 8005dae:	f04f 0200 	mov.w	r2, #0
 8005db2:	4b47      	ldr	r3, [pc, #284]	; (8005ed0 <vTaskBattery+0x210>)
 8005db4:	f7fa fc40 	bl	8000638 <__aeabi_dmul>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ec0 <vTaskBattery+0x200>)
 8005dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc6:	f7fa fc37 	bl	8000638 <__aeabi_dmul>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	4618      	mov	r0, r3
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	f7fa ff01 	bl	8000bd8 <__aeabi_d2f>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fa fbb1 	bl	8000544 <__aeabi_ui2d>
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <vTaskBattery+0x210>)
 8005de8:	f7fa fc26 	bl	8000638 <__aeabi_dmul>
 8005dec:	4603      	mov	r3, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	4618      	mov	r0, r3
 8005df2:	4621      	mov	r1, r4
 8005df4:	a32e      	add	r3, pc, #184	; (adr r3, 8005eb0 <vTaskBattery+0x1f0>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	f7fa fa65 	bl	80002c8 <__aeabi_dsub>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	4618      	mov	r0, r3
 8005e04:	4621      	mov	r1, r4
 8005e06:	a32c      	add	r3, pc, #176	; (adr r3, 8005eb8 <vTaskBattery+0x1f8>)
 8005e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0c:	f7fa fd3e 	bl	800088c <__aeabi_ddiv>
 8005e10:	4603      	mov	r3, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		get_temp(adc_value[4]); // temp
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 f92b 	bl	8006078 <get_temp>

		if ((adc_value[0] | adc_value[1]) == 0){
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d109      	bne.n	8005e40 <vTaskBattery+0x180>
			HAL_ADC_Stop_DMA(&hadc1);
 8005e2c:	4827      	ldr	r0, [pc, #156]	; (8005ecc <vTaskBattery+0x20c>)
 8005e2e:	f001 fee9 	bl	8007c04 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	2205      	movs	r2, #5
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4824      	ldr	r0, [pc, #144]	; (8005ecc <vTaskBattery+0x20c>)
 8005e3c:	f001 fdf4 	bl	8007a28 <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8005e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e42:	2b31      	cmp	r3, #49	; 0x31
 8005e44:	dc46      	bgt.n	8005ed4 <vTaskBattery+0x214>
			counter++;
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e48:	3301      	adds	r3, #1
 8005e4a:	647b      	str	r3, [r7, #68]	; 0x44
			curr += current1 + current2;
 8005e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e54:	f7fa fa3a 	bl	80002cc <__adddf3>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4623      	mov	r3, r4
 8005e60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e64:	f7fa fa32 	bl	80002cc <__adddf3>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			supp += supply_voltage;
 8005e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e72:	f7fa fb89 	bl	8000588 <__aeabi_f2d>
 8005e76:	4603      	mov	r3, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4623      	mov	r3, r4
 8005e7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e82:	f7fa fa23 	bl	80002cc <__adddf3>
 8005e86:	4603      	mov	r3, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			bat += battery_voltage;
 8005e8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e90:	f7fa fb7a 	bl	8000588 <__aeabi_f2d>
 8005e94:	4603      	mov	r3, r0
 8005e96:	460c      	mov	r4, r1
 8005e98:	461a      	mov	r2, r3
 8005e9a:	4623      	mov	r3, r4
 8005e9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ea0:	f7fa fa14 	bl	80002cc <__adddf3>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8005eac:	e0cb      	b.n	8006046 <vTaskBattery+0x386>
 8005eae:	bf00      	nop
 8005eb0:	be0ded28 	.word	0xbe0ded28
 8005eb4:	3fd69930 	.word	0x3fd69930
 8005eb8:	4189374c 	.word	0x4189374c
 8005ebc:	3fd0e560 	.word	0x3fd0e560
 8005ec0:	cccccccd 	.word	0xcccccccd
 8005ec4:	4014cccc 	.word	0x4014cccc
 8005ec8:	51eb851f 	.word	0x51eb851f
 8005ecc:	2000fa4c 	.word	0x2000fa4c
 8005ed0:	3f440000 	.word	0x3f440000
		} else {
			counter = 0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	647b      	str	r3, [r7, #68]	; 0x44
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	4b5c      	ldr	r3, [pc, #368]	; (8006050 <vTaskBattery+0x390>)
 8005ede:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ee2:	f7fa fcd3 	bl	800088c <__aeabi_ddiv>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	460c      	mov	r4, r1
 8005eea:	461a      	mov	r2, r3
 8005eec:	4623      	mov	r3, r4
 8005eee:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ef2:	f7fa f9eb 	bl	80002cc <__adddf3>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			battery_data.consumption = (uint16_t)mah;
 8005efe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005f02:	f7fa fe49 	bl	8000b98 <__aeabi_d2uiz>
 8005f06:	4603      	mov	r3, r0
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	847b      	strh	r3, [r7, #34]	; 0x22
			battery_data.current = (uint16_t)(curr*1000)/50;
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	4b50      	ldr	r3, [pc, #320]	; (8006054 <vTaskBattery+0x394>)
 8005f12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f16:	f7fa fb8f 	bl	8000638 <__aeabi_dmul>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	4618      	mov	r0, r3
 8005f20:	4621      	mov	r1, r4
 8005f22:	f7fa fe39 	bl	8000b98 <__aeabi_d2uiz>
 8005f26:	4603      	mov	r3, r0
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	4a4b      	ldr	r2, [pc, #300]	; (8006058 <vTaskBattery+0x398>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	843b      	strh	r3, [r7, #32]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	4b46      	ldr	r3, [pc, #280]	; (8006054 <vTaskBattery+0x394>)
 8005f3c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f40:	f7fa fb7a 	bl	8000638 <__aeabi_dmul>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	4618      	mov	r0, r3
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <vTaskBattery+0x39c>)
 8005f52:	f7fa fc9b 	bl	800088c <__aeabi_ddiv>
 8005f56:	4603      	mov	r3, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	4625      	mov	r5, r4
 8005f5c:	461c      	mov	r4, r3
 8005f5e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f62:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006060 <vTaskBattery+0x3a0>
 8005f66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f6a:	ee16 0a90 	vmov	r0, s13
 8005f6e:	f7fa fb0b 	bl	8000588 <__aeabi_f2d>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4620      	mov	r0, r4
 8005f78:	4629      	mov	r1, r5
 8005f7a:	f7fa fb5d 	bl	8000638 <__aeabi_dmul>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	460c      	mov	r4, r1
 8005f82:	4618      	mov	r0, r3
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7fa fe07 	bl	8000b98 <__aeabi_d2uiz>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	84bb      	strh	r3, [r7, #36]	; 0x24
			battery_data.supply = (uint16_t)(supp * 20);
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	4b33      	ldr	r3, [pc, #204]	; (8006064 <vTaskBattery+0x3a4>)
 8005f96:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f9a:	f7fa fb4d 	bl	8000638 <__aeabi_dmul>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	f7fa fdf7 	bl	8000b98 <__aeabi_d2uiz>
 8005faa:	4603      	mov	r3, r0
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	83bb      	strh	r3, [r7, #28]
			battery_data.battery = (uint16_t)(bat * 20);
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	4b2b      	ldr	r3, [pc, #172]	; (8006064 <vTaskBattery+0x3a4>)
 8005fb6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fba:	f7fa fb3d 	bl	8000638 <__aeabi_dmul>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	f7fa fde7 	bl	8000b98 <__aeabi_d2uiz>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	83fb      	strh	r3, [r7, #30]
			curr = 0;
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	f04f 0400 	mov.w	r4, #0
 8005fd8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			bat = 0;
 8005fdc:	f04f 0300 	mov.w	r3, #0
 8005fe0:	f04f 0400 	mov.w	r4, #0
 8005fe4:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			supp = 0;
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	f04f 0400 	mov.w	r4, #0
 8005ff0:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
					battery_data.supply, battery_data.battery, battery_data.current,
 8005ff4:	8bbb      	ldrh	r3, [r7, #28]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005ff6:	4619      	mov	r1, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005ff8:	8bfb      	ldrh	r3, [r7, #30]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005ffa:	4618      	mov	r0, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005ffc:	8c3b      	ldrh	r3, [r7, #32]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005ffe:	461c      	mov	r4, r3
					battery_data.consumption, battery_data.power);
 8006000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8006004:	9201      	str	r2, [sp, #4]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4623      	mov	r3, r4
 800600a:	4602      	mov	r2, r0
 800600c:	4816      	ldr	r0, [pc, #88]	; (8006068 <vTaskBattery+0x3a8>)
 800600e:	f7fe f991 	bl	8004334 <UsbPrint>

			/* Log Battery Power */
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8006012:	f00f ff81 	bl	8015f18 <osKernelGetTickCount>
 8006016:	f107 031c 	add.w	r3, r7, #28
 800601a:	2204      	movs	r2, #4
 800601c:	2101      	movs	r1, #1
 800601e:	f7fd ffb3 	bl	8003f88 <logSensor>

			/* Write Data into global Variable */
			if(AcquireMutex(&battery_mutex) == osOK ){
 8006022:	4812      	ldr	r0, [pc, #72]	; (800606c <vTaskBattery+0x3ac>)
 8006024:	f7fd fea4 	bl	8003d70 <AcquireMutex>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <vTaskBattery+0x386>
				global_battery_data.battery = battery_data.battery;
 800602e:	8bfa      	ldrh	r2, [r7, #30]
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <vTaskBattery+0x3b0>)
 8006032:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8006034:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006036:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <vTaskBattery+0x3b0>)
 8006038:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 800603a:	8c3a      	ldrh	r2, [r7, #32]
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <vTaskBattery+0x3b0>)
 800603e:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8006040:	480a      	ldr	r0, [pc, #40]	; (800606c <vTaskBattery+0x3ac>)
 8006042:	f7fd feaf 	bl	8003da4 <ReleaseMutex>
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8006046:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006048:	f010 f86c 	bl	8016124 <osDelayUntil>
	for (;;) {
 800604c:	e66f      	b.n	8005d2e <vTaskBattery+0x6e>
 800604e:	bf00      	nop
 8006050:	40668000 	.word	0x40668000
 8006054:	408f4000 	.word	0x408f4000
 8006058:	51eb851f 	.word	0x51eb851f
 800605c:	40490000 	.word	0x40490000
 8006060:	42480000 	.word	0x42480000
 8006064:	40340000 	.word	0x40340000
 8006068:	0801d52c 	.word	0x0801d52c
 800606c:	20009644 	.word	0x20009644
 8006070:	2000fa44 	.word	0x2000fa44
 8006074:	00000000 	.word	0x00000000

08006078 <get_temp>:
	}
}


float get_temp (uint16_t adc_value){
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	80fb      	strh	r3, [r7, #6]
	float VSENSE;
	VSENSE = 2.5/4096 * adc_value;
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	4618      	mov	r0, r3
 8006086:	f7fa fa6d 	bl	8000564 <__aeabi_i2d>
 800608a:	f04f 0200 	mov.w	r2, #0
 800608e:	4b20      	ldr	r3, [pc, #128]	; (8006110 <get_temp+0x98>)
 8006090:	f7fa fad2 	bl	8000638 <__aeabi_dmul>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	4618      	mov	r0, r3
 800609a:	4621      	mov	r1, r4
 800609c:	f7fa fd9c 	bl	8000bd8 <__aeabi_d2f>
 80060a0:	4603      	mov	r3, r0
 80060a2:	60fb      	str	r3, [r7, #12]
	return ((V25 - VSENSE) / AVG_SLOPE + 25);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7fa fa6f 	bl	8000588 <__aeabi_f2d>
 80060aa:	4603      	mov	r3, r0
 80060ac:	460c      	mov	r4, r1
 80060ae:	461a      	mov	r2, r3
 80060b0:	4623      	mov	r3, r4
 80060b2:	a113      	add	r1, pc, #76	; (adr r1, 8006100 <get_temp+0x88>)
 80060b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b8:	f7fa f906 	bl	80002c8 <__aeabi_dsub>
 80060bc:	4603      	mov	r3, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	4618      	mov	r0, r3
 80060c2:	4621      	mov	r1, r4
 80060c4:	a310      	add	r3, pc, #64	; (adr r3, 8006108 <get_temp+0x90>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	f7fa fbdf 	bl	800088c <__aeabi_ddiv>
 80060ce:	4603      	mov	r3, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	4618      	mov	r0, r3
 80060d4:	4621      	mov	r1, r4
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	4b0e      	ldr	r3, [pc, #56]	; (8006114 <get_temp+0x9c>)
 80060dc:	f7fa f8f6 	bl	80002cc <__adddf3>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4618      	mov	r0, r3
 80060e6:	4621      	mov	r1, r4
 80060e8:	f7fa fd76 	bl	8000bd8 <__aeabi_d2f>
 80060ec:	4603      	mov	r3, r0
 80060ee:	ee07 3a90 	vmov	s15, r3
}
 80060f2:	eeb0 0a67 	vmov.f32	s0, s15
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd90      	pop	{r4, r7, pc}
 80060fc:	f3af 8000 	nop.w
 8006100:	ae147ae1 	.word	0xae147ae1
 8006104:	3ff6e147 	.word	0x3ff6e147
 8006108:	75f6fd22 	.word	0x75f6fd22
 800610c:	3f719ce0 	.word	0x3f719ce0
 8006110:	3f440000 	.word	0x3f440000
 8006114:	40390000 	.word	0x40390000

08006118 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8006118:	b580      	push	{r7, lr}
 800611a:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 800611e:	af00      	add	r7, sp, #0
 8006120:	1d3b      	adds	r3, r7, #4
 8006122:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8006124:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	4618      	mov	r0, r3
 8006136:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800613a:	461a      	mov	r2, r3
 800613c:	2100      	movs	r1, #0
 800613e:	f014 fbdc 	bl	801a8fa <memset>
    control_data_init(&control_data);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4618      	mov	r0, r3
 8006148:	f7fb fe84 	bl	8001e54 <control_data_init>

	osDelay(1100);
 800614c:	f240 404c 	movw	r0, #1100	; 0x44c
 8006150:	f00f ffba 	bl	80160c8 <osDelay>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006154:	f00f fee0 	bl	8015f18 <osKernelGetTickCount>
 8006158:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 800615c:	f00f ff04 	bl	8015f68 <osKernelGetTickFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b41      	ldr	r3, [pc, #260]	; (8006268 <vTaskController+0x150>)
 8006164:	fba3 2302 	umull	r2, r3, r3, r2
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 800616e:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8006172:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8006176:	4413      	add	r3, r2
 8006178:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 800617c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8006180:	233c      	movs	r3, #60	; 0x3c
 8006182:	493a      	ldr	r1, [pc, #232]	; (800626c <vTaskController+0x154>)
 8006184:	483a      	ldr	r0, [pc, #232]	; (8006270 <vTaskController+0x158>)
 8006186:	f7fd fe1b 	bl	8003dc0 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 800618a:	4b38      	ldr	r3, [pc, #224]	; (800626c <vTaskController+0x154>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006196:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006274 <vTaskController+0x15c>
 800619a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800619e:	f107 0308 	add.w	r3, r7, #8
 80061a2:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 80061a6:	4b31      	ldr	r3, [pc, #196]	; (800626c <vTaskController+0x154>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	ee07 3a90 	vmov	s15, r3
 80061ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061b2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006274 <vTaskController+0x15c>
 80061b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 80061c2:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80061c6:	233c      	movs	r3, #60	; 0x3c
 80061c8:	492b      	ldr	r1, [pc, #172]	; (8006278 <vTaskController+0x160>)
 80061ca:	482c      	ldr	r0, [pc, #176]	; (800627c <vTaskController+0x164>)
 80061cc:	f7fd fdf8 	bl	8003dc0 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 80061d0:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4611      	mov	r1, r2
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fd28 	bl	8001c30 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 80061e0:	4827      	ldr	r0, [pc, #156]	; (8006280 <vTaskController+0x168>)
 80061e2:	f7fd fdc5 	bl	8003d70 <AcquireMutex>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d110      	bne.n	800620e <vTaskController+0xf6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 80061ec:	f107 0308 	add.w	r3, r7, #8
 80061f0:	edd3 7a00 	vldr	s15, [r3]
 80061f4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006274 <vTaskController+0x15c>
 80061f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006200:	ee17 2a90 	vmov	r2, s15
 8006204:	4b1f      	ldr	r3, [pc, #124]	; (8006284 <vTaskController+0x16c>)
 8006206:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8006208:	481d      	ldr	r0, [pc, #116]	; (8006280 <vTaskController+0x168>)
 800620a:	f7fd fdcb 	bl	8003da4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 800620e:	f00f fe83 	bl	8015f18 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8006212:	f107 0308 	add.w	r3, r7, #8
 8006216:	edd3 7a00 	vldr	s15, [r3]
 800621a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006274 <vTaskController+0x15c>
 800621e:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8006222:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	edd3 7a01 	vldr	s15, [r3, #4]
 800622e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006274 <vTaskController+0x15c>
 8006232:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8006236:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 800623a:	f107 0308 	add.w	r3, r7, #8
 800623e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006242:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006274 <vTaskController+0x15c>
 8006246:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 800624a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800624e:	ee17 3a90 	vmov	r3, s15
 8006252:	ee16 2a10 	vmov	r2, s12
 8006256:	ee16 1a90 	vmov	r1, s13
 800625a:	f7fe f811 	bl	8004280 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 800625e:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8006262:	f00f ff5f 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 8006266:	e782      	b.n	800616e <vTaskController+0x56>
 8006268:	51eb851f 	.word	0x51eb851f
 800626c:	2000026c 	.word	0x2000026c
 8006270:	20011c64 	.word	0x20011c64
 8006274:	447a0000 	.word	0x447a0000
 8006278:	200002bc 	.word	0x200002bc
 800627c:	200095d8 	.word	0x200095d8
 8006280:	2000fa3c 	.word	0x2000fa3c
 8006284:	200002a8 	.word	0x200002a8

08006288 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8006288:	b590      	push	{r4, r7, lr}
 800628a:	b0a1      	sub	sp, #132	; 0x84
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8006290:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006294:	2200      	movs	r2, #0
 8006296:	601a      	str	r2, [r3, #0]
 8006298:	605a      	str	r2, [r3, #4]
 800629a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 800629c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7fc fa17 	bl	80026d4 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 80062a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062aa:	223c      	movs	r2, #60	; 0x3c
 80062ac:	2100      	movs	r1, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f014 fb23 	bl	801a8fa <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 80062b4:	f107 0310 	add.w	r3, r7, #16
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fb ff4d 	bl	8002158 <init_env>
	init_env(&environment);
 80062be:	f107 0320 	add.w	r3, r7, #32
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fb ff48 	bl	8002158 <init_env>

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;
 80062c8:	239b      	movs	r3, #155	; 0x9b
 80062ca:	73fb      	strb	r3, [r7, #15]

	osDelay(1000);
 80062cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062d0:	f00f fefa 	bl	80160c8 <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80062d4:	f00f fe20 	bl	8015f18 <osKernelGetTickCount>
 80062d8:	67f8      	str	r0, [r7, #124]	; 0x7c
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80062da:	f00f fe45 	bl	8015f68 <osKernelGetTickFreq>
 80062de:	4602      	mov	r2, r0
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <vTaskFSM+0xfc>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	67bb      	str	r3, [r7, #120]	; 0x78

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80062ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80062ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ee:	4413      	add	r3, r2
 80062f0:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80062f2:	f107 020f 	add.w	r2, r7, #15
 80062f6:	2301      	movs	r3, #1
 80062f8:	4923      	ldr	r1, [pc, #140]	; (8006388 <vTaskFSM+0x100>)
 80062fa:	4824      	ldr	r0, [pc, #144]	; (800638c <vTaskFSM+0x104>)
 80062fc:	f7fd fd60 	bl	8003dc0 <ReadMutex>

		/* Reset Flight Phase if Telemetry asks to */
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b49      	cmp	r3, #73	; 0x49
 8006304:	d10a      	bne.n	800631c <vTaskFSM+0x94>
 8006306:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800630a:	2b01      	cmp	r3, #1
 800630c:	d106      	bne.n	800631c <vTaskFSM+0x94>
			reset_flight_phase_detection(&flight_phase_detection);
 800630e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006312:	4618      	mov	r0, r3
 8006314:	f7fc f9de 	bl	80026d4 <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 8006318:	239b      	movs	r3, #155	; 0x9b
 800631a:	73fb      	strb	r3, [r7, #15]
		}


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 800631c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006320:	233c      	movs	r3, #60	; 0x3c
 8006322:	491b      	ldr	r1, [pc, #108]	; (8006390 <vTaskFSM+0x108>)
 8006324:	481b      	ldr	r0, [pc, #108]	; (8006394 <vTaskFSM+0x10c>)
 8006326:	f7fd fd4b 	bl	8003dc0 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 800632a:	f107 0220 	add.w	r2, r7, #32
 800632e:	2310      	movs	r3, #16
 8006330:	4919      	ldr	r1, [pc, #100]	; (8006398 <vTaskFSM+0x110>)
 8006332:	481a      	ldr	r0, [pc, #104]	; (800639c <vTaskFSM+0x114>)
 8006334:	f7fd fd44 	bl	8003dc0 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8006338:	f107 0220 	add.w	r2, r7, #32
 800633c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006340:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006344:	4618      	mov	r0, r3
 8006346:	f7fc f8c3 	bl	80024d0 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 800634a:	4815      	ldr	r0, [pc, #84]	; (80063a0 <vTaskFSM+0x118>)
 800634c:	f7fd fd10 	bl	8003d70 <AcquireMutex>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <vTaskFSM+0xe4>
			global_flight_phase_detection = flight_phase_detection;
 8006356:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <vTaskFSM+0x11c>)
 8006358:	461c      	mov	r4, r3
 800635a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800635e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006362:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8006366:	480e      	ldr	r0, [pc, #56]	; (80063a0 <vTaskFSM+0x118>)
 8006368:	f7fd fd1c 	bl	8003da4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 800636c:	f00f fdd4 	bl	8015f18 <osKernelGetTickCount>
 8006370:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006376:	f7fd ff23 	bl	80041c0 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 800637a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800637c:	f00f fed2 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 8006380:	e7b3      	b.n	80062ea <vTaskFSM+0x62>
 8006382:	bf00      	nop
 8006384:	51eb851f 	.word	0x51eb851f
 8006388:	20013cec 	.word	0x20013cec
 800638c:	2000b9c4 	.word	0x2000b9c4
 8006390:	2000026c 	.word	0x2000026c
 8006394:	20011c64 	.word	0x20011c64
 8006398:	200002ac 	.word	0x200002ac
 800639c:	2000b9cc 	.word	0x2000b9cc
 80063a0:	200095d8 	.word	0x200095d8
 80063a4:	200002bc 	.word	0x200002bc

080063a8 <vTaskGps>:





void vTaskGps(void *argument) {
 80063a8:	b5b0      	push	{r4, r5, r7, lr}
 80063aa:	b0b2      	sub	sp, #200	; 0xc8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]

	UBLOX GPS1 = {0,&huart1};
 80063b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063b4:	222c      	movs	r2, #44	; 0x2c
 80063b6:	2100      	movs	r1, #0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f014 fa9e 	bl	801a8fa <memset>
 80063be:	4b9f      	ldr	r3, [pc, #636]	; (800663c <vTaskGps+0x294>)
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	UBLOX GPS2 = {1,&huart2};
 80063c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063c8:	222c      	movs	r2, #44	; 0x2c
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f014 fa94 	bl	801a8fa <memset>
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 80063d8:	4b99      	ldr	r3, [pc, #612]	; (8006640 <vTaskGps+0x298>)
 80063da:	65fb      	str	r3, [r7, #92]	; 0x5c
	UBLOX GPS3 = {2,&huart3};
 80063dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063e0:	222c      	movs	r2, #44	; 0x2c
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f014 fa88 	bl	801a8fa <memset>
 80063ea:	2302      	movs	r3, #2
 80063ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80063f0:	4b94      	ldr	r3, [pc, #592]	; (8006644 <vTaskGps+0x29c>)
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30

	int timeout_counter1 = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int timeout_counter2 = 0;
 80063fa:	2300      	movs	r3, #0
 80063fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int timeout_counter3 = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	/* For periodic update */
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	gps_data_t gps_telemetry = { 0 };
 8006406:	f107 0308 	add.w	r3, r7, #8
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f014 fa73 	bl	801a8fa <memset>
	uint8_t choose_GPS = 1;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800641a:	f00f fd7d 	bl	8015f18 <osKernelGetTickCount>
 800641e:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 8006422:	f00f fda1 	bl	8015f68 <osKernelGetTickFreq>
 8006426:	4603      	mov	r3, r0
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	osDelay(600);
 800642e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006432:	f00f fe49 	bl	80160c8 <osDelay>

	gps_dma_init(&GPS1);
 8006436:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800643a:	4618      	mov	r0, r3
 800643c:	f7fb fafe 	bl	8001a3c <gps_dma_init>
	gps_dma_init(&GPS2);
 8006440:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006444:	4618      	mov	r0, r3
 8006446:	f7fb faf9 	bl	8001a3c <gps_dma_init>
	gps_dma_init(&GPS3);
 800644a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800644e:	4618      	mov	r0, r3
 8006450:	f7fb faf4 	bl	8001a3c <gps_dma_init>

	for (;;) {
		tick_count += tick_update;
 8006454:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006458:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800645c:	4413      	add	r3, r2
 800645e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

		/* Read GPS */
		if (gps_read_sensor(&GPS1)){
 8006462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006466:	4618      	mov	r0, r3
 8006468:	f7fb fb0c 	bl	8001a84 <gps_read_sensor>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <vTaskGps+0xd2>
			timeout_counter1 = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006478:	e010      	b.n	800649c <vTaskGps+0xf4>
		} else {
			timeout_counter1++;
 800647a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800647e:	3301      	adds	r3, #1
 8006480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			if (timeout_counter1 == 10){
 8006484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006488:	2b0a      	cmp	r3, #10
 800648a:	d107      	bne.n	800649c <vTaskGps+0xf4>
				gps_reset(&GPS1);
 800648c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006490:	4618      	mov	r0, r3
 8006492:	f7fb fb41 	bl	8001b18 <gps_reset>
				timeout_counter1 = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			}
		}
		if (gps_read_sensor(&GPS2)){
 800649c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fb faef 	bl	8001a84 <gps_read_sensor>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <vTaskGps+0x10c>
			timeout_counter2 = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064b2:	e010      	b.n	80064d6 <vTaskGps+0x12e>
		} else {
			timeout_counter2++;
 80064b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064b8:	3301      	adds	r3, #1
 80064ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if (timeout_counter2 == 10){
 80064be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064c2:	2b0a      	cmp	r3, #10
 80064c4:	d107      	bne.n	80064d6 <vTaskGps+0x12e>
				gps_reset(&GPS2);
 80064c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fb fb24 	bl	8001b18 <gps_reset>
				timeout_counter2 = 0;
 80064d0:	2300      	movs	r3, #0
 80064d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			}
		}
		if (gps_read_sensor(&GPS3)){
 80064d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fb fad2 	bl	8001a84 <gps_read_sensor>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <vTaskGps+0x146>
			timeout_counter3 = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80064ec:	e010      	b.n	8006510 <vTaskGps+0x168>
		} else {
			timeout_counter3++;
 80064ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064f2:	3301      	adds	r3, #1
 80064f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if (timeout_counter3 == 10){
 80064f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80064fc:	2b0a      	cmp	r3, #10
 80064fe:	d107      	bne.n	8006510 <vTaskGps+0x168>
				gps_reset(&GPS3);
 8006500:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006504:	4618      	mov	r0, r3
 8006506:	f7fb fb07 	bl	8001b18 <gps_reset>
				timeout_counter3 = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		//		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
		//								GPS3.data.hour, GPS3.data.minute, GPS3.data.second, GPS3.data.lat_deg,
		//								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 8006510:	f00f fd02 	bl	8015f18 <osKernelGetTickCount>
 8006514:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006518:	3308      	adds	r3, #8
 800651a:	2203      	movs	r2, #3
 800651c:	2101      	movs	r1, #1
 800651e:	f7fd fd33 	bl	8003f88 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 8006522:	f00f fcf9 	bl	8015f18 <osKernelGetTickCount>
 8006526:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800652a:	3308      	adds	r3, #8
 800652c:	2203      	movs	r2, #3
 800652e:	2102      	movs	r1, #2
 8006530:	f7fd fd2a 	bl	8003f88 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 8006534:	f00f fcf0 	bl	8015f18 <osKernelGetTickCount>
 8006538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800653c:	3308      	adds	r3, #8
 800653e:	2203      	movs	r2, #3
 8006540:	2103      	movs	r1, #3
 8006542:	f7fd fd21 	bl	8003f88 <logSensor>

		/* get best possible GPS for Telemetry */

		if(GPS1.data.satellite >= GPS2.data.satellite){
 8006546:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 800654a:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800654e:	429a      	cmp	r2, r3
 8006550:	d30d      	bcc.n	800656e <vTaskGps+0x1c6>
			if(GPS1.data.satellite >= GPS3.data.satellite){
 8006552:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 8006556:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800655a:	429a      	cmp	r2, r3
 800655c:	d303      	bcc.n	8006566 <vTaskGps+0x1be>
				choose_GPS = 1;
 800655e:	2301      	movs	r3, #1
 8006560:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006564:	e02a      	b.n	80065bc <vTaskGps+0x214>
			}
			else{
				choose_GPS = 3;
 8006566:	2303      	movs	r3, #3
 8006568:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800656c:	e026      	b.n	80065bc <vTaskGps+0x214>
			}
		}
		else if(GPS2.data.satellite >= GPS3.data.satellite){
 800656e:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8006572:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006576:	429a      	cmp	r2, r3
 8006578:	d30d      	bcc.n	8006596 <vTaskGps+0x1ee>
			if(GPS2.data.satellite >= GPS1.data.satellite){
 800657a:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800657e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8006582:	429a      	cmp	r2, r3
 8006584:	d303      	bcc.n	800658e <vTaskGps+0x1e6>
				choose_GPS = 2;
 8006586:	2302      	movs	r3, #2
 8006588:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800658c:	e016      	b.n	80065bc <vTaskGps+0x214>
			}
			else{
				choose_GPS = 1;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006594:	e012      	b.n	80065bc <vTaskGps+0x214>
			}
		}
		else if(GPS3.data.satellite >= GPS1.data.satellite){
 8006596:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800659a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800659e:	429a      	cmp	r2, r3
 80065a0:	d30c      	bcc.n	80065bc <vTaskGps+0x214>
			if(GPS3.data.satellite >= GPS2.data.satellite){
 80065a2:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 80065a6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d303      	bcc.n	80065b6 <vTaskGps+0x20e>
				choose_GPS = 3;
 80065ae:	2303      	movs	r3, #3
 80065b0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80065b4:	e002      	b.n	80065bc <vTaskGps+0x214>
			}
			else{
				choose_GPS = 2;
 80065b6:	2302      	movs	r3, #2
 80065b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			}
		}

		if(choose_GPS == 1){
 80065bc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10a      	bne.n	80065da <vTaskGps+0x232>
			gps_telemetry = GPS1.data;
 80065c4:	f107 0408 	add.w	r4, r7, #8
 80065c8:	f107 058c 	add.w	r5, r7, #140	; 0x8c
 80065cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	e018      	b.n	800660c <vTaskGps+0x264>
//			gps_telemetry.lat_decimal = GPS1.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS1.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS1.data.lon_decimal;
//			gps_telemetry.satellite = GPS1.data.satellite;
		}
		else if(choose_GPS == 2){
 80065da:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d10a      	bne.n	80065f8 <vTaskGps+0x250>
			gps_telemetry = GPS2.data;
 80065e2:	f107 0408 	add.w	r4, r7, #8
 80065e6:	f107 0560 	add.w	r5, r7, #96	; 0x60
 80065ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f2:	682b      	ldr	r3, [r5, #0]
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	e009      	b.n	800660c <vTaskGps+0x264>
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		}
		else{
			gps_telemetry = GPS3.data;
 80065f8:	f107 0408 	add.w	r4, r7, #8
 80065fc:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8006600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	6023      	str	r3, [r4, #0]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if(AcquireMutex(&gps_mutex) == osOK){
 800660c:	480e      	ldr	r0, [pc, #56]	; (8006648 <vTaskGps+0x2a0>)
 800660e:	f7fd fbaf 	bl	8003d70 <AcquireMutex>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10c      	bne.n	8006632 <vTaskGps+0x28a>
			globalGPS = gps_telemetry;
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vTaskGps+0x2a4>)
 800661a:	461d      	mov	r5, r3
 800661c:	f107 0408 	add.w	r4, r7, #8
 8006620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	602b      	str	r3, [r5, #0]
			ReleaseMutex(&gps_mutex);
 800662c:	4806      	ldr	r0, [pc, #24]	; (8006648 <vTaskGps+0x2a0>)
 800662e:	f7fd fbb9 	bl	8003da4 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8006632:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006636:	f00f fd75 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 800663a:	e70b      	b.n	8006454 <vTaskGps+0xac>
 800663c:	2000fb60 	.word	0x2000fb60
 8006640:	20019f04 	.word	0x20019f04
 8006644:	20009734 	.word	0x20009734
 8006648:	20017db0 	.word	0x20017db0
 800664c:	20013cc8 	.word	0x20013cc8

08006650 <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes(int32_t position);


void vTaskMotorCont(void *argument) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b090      	sub	sp, #64	; 0x40
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8006658:	2300      	movs	r3, #0
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 800665c:	239b      	movs	r3, #155	; 0x9b
 800665e:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8006660:	f107 0310 	add.w	r3, r7, #16
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	605a      	str	r2, [r3, #4]
 800666a:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 800666c:	2301      	movs	r3, #1
 800666e:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8006670:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006674:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 10000;
 800667c:	f242 7310 	movw	r3, #10000	; 0x2710
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <vTaskMotorCont+0x1bc>)
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8006686:	4b61      	ldr	r3, [pc, #388]	; (800680c <vTaskMotorCont+0x1bc>)
 8006688:	627b      	str	r3, [r7, #36]	; 0x24

	osDelay(3000);
 800668a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800668e:	f00f fd1b 	bl	80160c8 <osDelay>


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t measured_motor_position = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 800669e:	e003      	b.n	80066a8 <vTaskMotorCont+0x58>
		osDelay(1000);
 80066a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066a4:	f00f fd10 	bl	80160c8 <osDelay>
	while(EnableMotor() != osOK){
 80066a8:	f7fa fcba 	bl	8001020 <EnableMotor>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1f6      	bne.n	80066a0 <vTaskMotorCont+0x50>
	};

	SetPositionMode(position_mode);
 80066b2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fa fd2b 	bl	8001112 <SetPositionMode>
	while(SetPositionMode(position_mode) != osOK){
 80066bc:	e003      	b.n	80066c6 <vTaskMotorCont+0x76>
		osDelay(1000);
 80066be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066c2:	f00f fd01 	bl	80160c8 <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 80066c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fa fd21 	bl	8001112 <SetPositionMode>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1f3      	bne.n	80066be <vTaskMotorCont+0x6e>
	};

	if (position_mode == 0x01) {
 80066d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d105      	bne.n	80066ea <vTaskMotorCont+0x9a>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80066de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066e4:	f7fa fd95 	bl	8001212 <ConfigurePPM>
 80066e8:	63b8      	str	r0, [r7, #56]	; 0x38




	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80066ea:	f00f fc15 	bl	8015f18 <osKernelGetTickCount>
 80066ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 80066f0:	f00f fc3a 	bl	8015f68 <osKernelGetTickFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b46      	ldr	r3, [pc, #280]	; (8006810 <vTaskMotorCont+0x1c0>)
 80066f8:	fba3 2302 	umull	r2, r3, r3, r2
 80066fc:	08db      	lsrs	r3, r3, #3
 80066fe:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 8006700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	4413      	add	r3, r2
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8006708:	f107 0308 	add.w	r3, r7, #8
 800670c:	4618      	mov	r0, r3
 800670e:	f7fa fdf7 	bl	8001300 <GetPosition>
 8006712:	63b8      	str	r0, [r7, #56]	; 0x38

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006714:	f107 021f 	add.w	r2, r7, #31
 8006718:	2301      	movs	r3, #1
 800671a:	493e      	ldr	r1, [pc, #248]	; (8006814 <vTaskMotorCont+0x1c4>)
 800671c:	483e      	ldr	r0, [pc, #248]	; (8006818 <vTaskMotorCont+0x1c8>)
 800671e:	f7fd fb4f 	bl	8003dc0 <ReadMutex>

		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4619      	mov	r1, r3
 8006726:	483d      	ldr	r0, [pc, #244]	; (800681c <vTaskMotorCont+0x1cc>)
 8006728:	f7fd fe04 	bl	8004334 <UsbPrint>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 800672c:	f107 0210 	add.w	r2, r7, #16
 8006730:	230c      	movs	r3, #12
 8006732:	493b      	ldr	r1, [pc, #236]	; (8006820 <vTaskMotorCont+0x1d0>)
 8006734:	483b      	ldr	r0, [pc, #236]	; (8006824 <vTaskMotorCont+0x1d4>)
 8006736:	f7fd fb43 	bl	8003dc0 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 800673a:	f107 020c 	add.w	r2, r7, #12
 800673e:	2304      	movs	r3, #4
 8006740:	4939      	ldr	r1, [pc, #228]	; (8006828 <vTaskMotorCont+0x1d8>)
 8006742:	483a      	ldr	r0, [pc, #232]	; (800682c <vTaskMotorCont+0x1dc>)
 8006744:	f7fd fb3c 	bl	8003dc0 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-150));
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	ee07 3a90 	vmov	s15, r3
 800674e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006752:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006830 <vTaskMotorCont+0x1e0>
 8006756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800675a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006834 <vTaskMotorCont+0x1e4>
 800675e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006762:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006766:	ee17 3a90 	vmov	r3, s15
 800676a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Check Bounds */
		if(desired_motor_position > 2){
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	2b02      	cmp	r3, #2
 8006770:	dd01      	ble.n	8006776 <vTaskMotorCont+0x126>
			desired_motor_position = 2;
 8006772:	2302      	movs	r3, #2
 8006774:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if(desired_motor_position < -150){
 8006776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006778:	f113 0f96 	cmn.w	r3, #150	; 0x96
 800677c:	da02      	bge.n	8006784 <vTaskMotorCont+0x134>
			desired_motor_position = -150;
 800677e:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8006784:	7c3b      	ldrb	r3, [r7, #16]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d104      	bne.n	8006794 <vTaskMotorCont+0x144>
			/* Move the Motor */
			motor_status = MoveToPositionPPM(desired_motor_position);
 800678a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800678c:	f7fa fce6 	bl	800115c <MoveToPositionPPM>
 8006790:	63b8      	str	r0, [r7, #56]	; 0x38
 8006792:	e003      	b.n	800679c <vTaskMotorCont+0x14c>
		}
		else{
			motor_status = MoveToPositionPPM(2);
 8006794:	2002      	movs	r0, #2
 8006796:	f7fa fce1 	bl	800115c <MoveToPositionPPM>
 800679a:	63b8      	str	r0, [r7, #56]	; 0x38
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 800679c:	7c3b      	ldrb	r3, [r7, #16]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d10f      	bne.n	80067c2 <vTaskMotorCont+0x172>
 80067a2:	7ffb      	ldrb	r3, [r7, #31]
 80067a4:	2bd9      	cmp	r3, #217	; 0xd9
 80067a6:	d10c      	bne.n	80067c2 <vTaskMotorCont+0x172>
				&& osKernelGetTickCount() < 60000){
 80067a8:	f00f fbb6 	bl	8015f18 <osKernelGetTickCount>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f64e 235f 	movw	r3, #59999	; 0xea5f
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d805      	bhi.n	80067c2 <vTaskMotorCont+0x172>
			testairbrakes(-140);
 80067b6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 80067ba:	f000 f841 	bl	8006840 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 80067be:	239b      	movs	r3, #155	; 0x9b
 80067c0:	77fb      	strb	r3, [r7, #31]
		}


		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 80067c2:	f00f fba9 	bl	8015f18 <osKernelGetTickCount>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067cc:	f7fd fd86 	bl	80042dc <logMotor>

		if(motor_status != osOK && flight_phase_detection.flight_phase == IDLE){
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <vTaskMotorCont+0x19c>
 80067d6:	7c3b      	ldrb	r3, [r7, #16]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d107      	bne.n	80067ec <vTaskMotorCont+0x19c>
			DisableMotor();
 80067dc:	f7fa fc79 	bl	80010d2 <DisableMotor>
			osDelay(1000);
 80067e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067e4:	f00f fc70 	bl	80160c8 <osDelay>
			EnableMotor();
 80067e8:	f7fa fc1a 	bl	8001020 <EnableMotor>
		}

		/* Write To global airbrake extension */
		if(AcquireMutex(&motor_mutex) == osOK){
 80067ec:	4812      	ldr	r0, [pc, #72]	; (8006838 <vTaskMotorCont+0x1e8>)
 80067ee:	f7fd fabf 	bl	8003d70 <AcquireMutex>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d105      	bne.n	8006804 <vTaskMotorCont+0x1b4>
			global_airbrake_extension = measured_motor_position;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <vTaskMotorCont+0x1ec>)
 80067fc:	6013      	str	r3, [r2, #0]
			ReleaseMutex(&motor_mutex);
 80067fe:	480e      	ldr	r0, [pc, #56]	; (8006838 <vTaskMotorCont+0x1e8>)
 8006800:	f7fd fad0 	bl	8003da4 <ReleaseMutex>
		}


		osDelayUntil(tick_count);
 8006804:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006806:	f00f fc8d 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 800680a:	e779      	b.n	8006700 <vTaskMotorCont+0xb0>
 800680c:	000186a0 	.word	0x000186a0
 8006810:	51eb851f 	.word	0x51eb851f
 8006814:	20013cec 	.word	0x20013cec
 8006818:	2000b9c4 	.word	0x2000b9c4
 800681c:	0801d57c 	.word	0x0801d57c
 8006820:	200002bc 	.word	0x200002bc
 8006824:	200095d8 	.word	0x200095d8
 8006828:	200002a8 	.word	0x200002a8
 800682c:	2000fa3c 	.word	0x2000fa3c
 8006830:	447a0000 	.word	0x447a0000
 8006834:	c3160000 	.word	0xc3160000
 8006838:	2000972c 	.word	0x2000972c
 800683c:	20017e38 	.word	0x20017e38

08006840 <testairbrakes>:
	}
}

void testairbrakes(int32_t position){
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	MoveToPositionPPM(position);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7fa fc87 	bl	800115c <MoveToPositionPPM>
	osDelay(100);
 800684e:	2064      	movs	r0, #100	; 0x64
 8006850:	f00f fc3a 	bl	80160c8 <osDelay>
	MoveToPositionPPM(2);
 8006854:	2002      	movs	r0, #2
 8006856:	f7fa fc81 	bl	800115c <MoveToPositionPPM>
}
 800685a:	bf00      	nop
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8006864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006866:	b0d1      	sub	sp, #324	; 0x144
 8006868:	af00      	add	r7, sp, #0
 800686a:	1d3b      	adds	r3, r7, #4
 800686c:	6018      	str	r0, [r3, #0]
	// Try everything forever;
	for (;;) {
		osDelay(100);
 800686e:	2064      	movs	r0, #100	; 0x64
 8006870:	f00f fc2a 	bl	80160c8 <osDelay>
		flight_phase_detection_t local_flight_phase;
		FRESULT res;
		char EULER_LOG_FILE_NAME[13] = "";
 8006874:	2300      	movs	r3, #0
 8006876:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800687a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	605a      	str	r2, [r3, #4]
 8006884:	721a      	strb	r2, [r3, #8]
		UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8006886:	48cd      	ldr	r0, [pc, #820]	; (8006bbc <vTaskSdCard+0x358>)
 8006888:	f7fd fd54 	bl	8004334 <UsbPrint>
		local_flight_phase.flight_phase = IDLE;
 800688c:	2301      	movs	r3, #1
 800688e:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
 8006892:	e000      	b.n	8006896 <vTaskSdCard+0x32>
		resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8006894:	bf00      	nop
		do {
			EULER_LOG_FILE_NAME[0] = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
			res = f_mount(&EULER_FatFS, "", 1);
 800689c:	2201      	movs	r2, #1
 800689e:	49c8      	ldr	r1, [pc, #800]	; (8006bc0 <vTaskSdCard+0x35c>)
 80068a0:	48c8      	ldr	r0, [pc, #800]	; (8006bc4 <vTaskSdCard+0x360>)
 80068a2:	f00e f9fd 	bl	8014ca0 <f_mount>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if (res != FR_OK) {
 80068ac:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d011      	beq.n	80068d8 <vTaskSdCard+0x74>
				UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 80068b4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80068b8:	4619      	mov	r1, r3
 80068ba:	48c3      	ldr	r0, [pc, #780]	; (8006bc8 <vTaskSdCard+0x364>)
 80068bc:	f7fd fd3a 	bl	8004334 <UsbPrint>
				// force sd card to be reinitialized
				disk.is_initialized[0] = 0;
 80068c0:	4bc2      	ldr	r3, [pc, #776]	; (8006bcc <vTaskSdCard+0x368>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 80068c6:	2201      	movs	r2, #1
 80068c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80068cc:	48c0      	ldr	r0, [pc, #768]	; (8006bd0 <vTaskSdCard+0x36c>)
 80068ce:	f002 fb7f 	bl	8008fd0 <HAL_GPIO_WritePin>
				osDelay(10);
 80068d2:	200a      	movs	r0, #10
 80068d4:	f00f fbf8 	bl	80160c8 <osDelay>
			}
		} while (res != FR_OK);
 80068d8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1d9      	bne.n	8006894 <vTaskSdCard+0x30>

		logToNewFile: if (!EULER_LOG_FILE_NAME[0]) {
 80068e0:	bf00      	nop
 80068e2:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 80a9 	bne.w	8006a3e <vTaskSdCard+0x1da>
			UsbPrint("[STORAGE TASK] Creating file name\n");
 80068ec:	48b9      	ldr	r0, [pc, #740]	; (8006bd4 <vTaskSdCard+0x370>)
 80068ee:	f7fd fd21 	bl	8004334 <UsbPrint>

			unsigned int file_number = 1;
 80068f2:	2301      	movs	r3, #1
 80068f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

			DIR dj;
			FILINFO fno;
			res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80068f8:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80068fc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8006900:	4bb5      	ldr	r3, [pc, #724]	; (8006bd8 <vTaskSdCard+0x374>)
 8006902:	4aaf      	ldr	r2, [pc, #700]	; (8006bc0 <vTaskSdCard+0x35c>)
 8006904:	f00f f9b3 	bl	8015c6e <f_findfirst>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			while (res == FR_OK && fno.fname[0]) {
 800690e:	e02b      	b.n	8006968 <vTaskSdCard+0x104>
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8006910:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006914:	3b30      	subs	r3, #48	; 0x30
 8006916:	2264      	movs	r2, #100	; 0x64
 8006918:	fb02 f103 	mul.w	r1, r2, r3
						+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 800691c:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8006920:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006924:	4613      	mov	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	18ca      	adds	r2, r1, r3
 800692e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8006932:	3b30      	subs	r3, #48	; 0x30
 8006934:	4413      	add	r3, r2
				unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8006936:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				if (current_file_number + 1 > file_number) {
 800693a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800693e:	3301      	adds	r3, #1
 8006940:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006944:	429a      	cmp	r2, r3
 8006946:	d204      	bcs.n	8006952 <vTaskSdCard+0xee>
					file_number = current_file_number + 1;
 8006948:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800694c:	3301      	adds	r3, #1
 800694e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
				}
				res = f_findnext(&dj, &fno);
 8006952:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8006956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f00f f95e 	bl	8015c1e <f_findnext>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			while (res == FR_OK && fno.fname[0]) {
 8006968:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <vTaskSdCard+0x114>
 8006970:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1cb      	bne.n	8006910 <vTaskSdCard+0xac>
			}
			if (res != FR_OK) {
 8006978:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <vTaskSdCard+0x12a>
				UsbPrint(
 8006980:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006984:	4619      	mov	r1, r3
 8006986:	4895      	ldr	r0, [pc, #596]	; (8006bdc <vTaskSdCard+0x378>)
 8006988:	f7fd fcd4 	bl	8004334 <UsbPrint>
						"[STORAGE TASK] Failed finding first or next file: %d\n",
						res);
				goto resetSDCard;
 800698c:	e783      	b.n	8006896 <vTaskSdCard+0x32>
			}

			strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 800698e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006992:	4a93      	ldr	r2, [pc, #588]	; (8006be0 <vTaskSdCard+0x37c>)
 8006994:	ca07      	ldmia	r2, {r0, r1, r2}
 8006996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 800699a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <vTaskSdCard+0x380>)
 80069a0:	fba3 2301 	umull	r2, r3, r3, r1
 80069a4:	08da      	lsrs	r2, r3, #3
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	1aca      	subs	r2, r1, r3
 80069b0:	b2d3      	uxtb	r3, r2
 80069b2:	3330      	adds	r3, #48	; 0x30
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
			EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 80069ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069be:	4a89      	ldr	r2, [pc, #548]	; (8006be4 <vTaskSdCard+0x380>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	08d9      	lsrs	r1, r3, #3
 80069c6:	4b87      	ldr	r3, [pc, #540]	; (8006be4 <vTaskSdCard+0x380>)
 80069c8:	fba3 2301 	umull	r2, r3, r3, r1
 80069cc:	08da      	lsrs	r2, r3, #3
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	005b      	lsls	r3, r3, #1
 80069d6:	1aca      	subs	r2, r1, r3
 80069d8:	b2d3      	uxtb	r3, r2
 80069da:	3330      	adds	r3, #48	; 0x30
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
			EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 80069e2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80069e6:	4a80      	ldr	r2, [pc, #512]	; (8006be8 <vTaskSdCard+0x384>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	0959      	lsrs	r1, r3, #5
 80069ee:	4b7d      	ldr	r3, [pc, #500]	; (8006be4 <vTaskSdCard+0x380>)
 80069f0:	fba3 2301 	umull	r2, r3, r3, r1
 80069f4:	08da      	lsrs	r2, r3, #3
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	1aca      	subs	r2, r1, r3
 8006a00:	b2d3      	uxtb	r3, r2
 8006a02:	3330      	adds	r3, #48	; 0x30
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118

			UsbPrint("[STORAGE TASK] Using file name: %s\n",
 8006a0a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006a0e:	4619      	mov	r1, r3
 8006a10:	4876      	ldr	r0, [pc, #472]	; (8006bec <vTaskSdCard+0x388>)
 8006a12:	f7fd fc8f 	bl	8004334 <UsbPrint>
					EULER_LOG_FILE_NAME);

			res = f_closedir(&dj);
 8006a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f00f f891 	bl	8015b42 <f_closedir>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			if (res != FR_OK) {
 8006a26:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <vTaskSdCard+0x1da>
				UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8006a2e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a32:	4619      	mov	r1, r3
 8006a34:	486e      	ldr	r0, [pc, #440]	; (8006bf0 <vTaskSdCard+0x38c>)
 8006a36:	f7fd fc7d 	bl	8004334 <UsbPrint>
				goto resetSDCard;
 8006a3a:	bf00      	nop
 8006a3c:	e72b      	b.n	8006896 <vTaskSdCard+0x32>
			}
		}

		UsbPrint("[STORAGE TASK] Opening log file\n");
 8006a3e:	486d      	ldr	r0, [pc, #436]	; (8006bf4 <vTaskSdCard+0x390>)
 8006a40:	f7fd fc78 	bl	8004334 <UsbPrint>
		res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8006a44:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006a48:	2212      	movs	r2, #18
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	486a      	ldr	r0, [pc, #424]	; (8006bf8 <vTaskSdCard+0x394>)
 8006a4e:	f00e f98b 	bl	8014d68 <f_open>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		FA_OPEN_ALWAYS | FA_WRITE);
		if (res != FR_OK) {
 8006a58:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d006      	beq.n	8006a6e <vTaskSdCard+0x20a>
			UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8006a60:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a64:	4619      	mov	r1, r3
 8006a66:	4865      	ldr	r0, [pc, #404]	; (8006bfc <vTaskSdCard+0x398>)
 8006a68:	f7fd fc64 	bl	8004334 <UsbPrint>
			goto resetSDCard;
 8006a6c:	e713      	b.n	8006896 <vTaskSdCard+0x32>
		}

		UsbPrint("[STORAGE TASK] Going to end of file\n");
 8006a6e:	4864      	ldr	r0, [pc, #400]	; (8006c00 <vTaskSdCard+0x39c>)
 8006a70:	f7fd fc60 	bl	8004334 <UsbPrint>
		res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8006a74:	4b60      	ldr	r3, [pc, #384]	; (8006bf8 <vTaskSdCard+0x394>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	485f      	ldr	r0, [pc, #380]	; (8006bf8 <vTaskSdCard+0x394>)
 8006a7c:	f00e fd95 	bl	80155aa <f_lseek>
 8006a80:	4603      	mov	r3, r0
 8006a82:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
		if (res != FR_OK) {
 8006a86:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d006      	beq.n	8006a9c <vTaskSdCard+0x238>
			UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8006a8e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006a92:	4619      	mov	r1, r3
 8006a94:	485b      	ldr	r0, [pc, #364]	; (8006c04 <vTaskSdCard+0x3a0>)
 8006a96:	f7fd fc4d 	bl	8004334 <UsbPrint>
			goto resetSDCard;
 8006a9a:	e6fc      	b.n	8006896 <vTaskSdCard+0x32>
		}

		volatile int32_t msgCounter = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8006aa2:	f107 060c 	add.w	r6, r7, #12
 8006aa6:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <vTaskSdCard+0x3a4>)
 8006aa8:	4634      	mov	r4, r6
 8006aaa:	461d      	mov	r5, r3
 8006aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006ab4:	c407      	stmia	r4!, {r0, r1, r2}
 8006ab6:	8023      	strh	r3, [r4, #0]
 8006ab8:	3402      	adds	r4, #2
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	7023      	strb	r3, [r4, #0]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	77f3      	strb	r3, [r6, #31]
		uint32_t num_bytes = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8006ac8:	f107 030c 	add.w	r3, r7, #12
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7f9 fb9f 	bl	8000210 <strlen>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	f107 010c 	add.w	r1, r7, #12
 8006ad8:	4b4c      	ldr	r3, [pc, #304]	; (8006c0c <vTaskSdCard+0x3a8>)
 8006ada:	4847      	ldr	r0, [pc, #284]	; (8006bf8 <vTaskSdCard+0x394>)
 8006adc:	f00e fb09 	bl	80150f2 <f_write>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
				&EULER_bytesSD);
		if (res != FR_OK) {
 8006ae6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <vTaskSdCard+0x298>
			UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8006aee:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006af2:	4619      	mov	r1, r3
 8006af4:	4846      	ldr	r0, [pc, #280]	; (8006c10 <vTaskSdCard+0x3ac>)
 8006af6:	f7fd fc1d 	bl	8004334 <UsbPrint>
			goto resetSDCard;
 8006afa:	e6cc      	b.n	8006896 <vTaskSdCard+0x32>
		}
		log_entry_t log_entry = { 0 };
 8006afc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b00:	2296      	movs	r2, #150	; 0x96
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f013 fef8 	bl	801a8fa <memset>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b10:	482f      	ldr	r0, [pc, #188]	; (8006bd0 <vTaskSdCard+0x36c>)
 8006b12:	f002 fa5d 	bl	8008fd0 <HAL_GPIO_WritePin>
		for (;;) {
			if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8006b16:	4b3f      	ldr	r3, [pc, #252]	; (8006c14 <vTaskSdCard+0x3b0>)
 8006b18:	6818      	ldr	r0, [r3, #0]
 8006b1a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	2200      	movs	r2, #0
 8006b24:	f00f ff12 	bl	801694c <osMessageQueueGet>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1f3      	bne.n	8006b16 <vTaskSdCard+0x2b2>
			osWaitForever) == osOK) {
				num_bytes = strlen(log_entry.str);
 8006b2e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fb6c 	bl	8000210 <strlen>
 8006b38:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
				if (num_bytes > 0) {
 8006b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d015      	beq.n	8006b70 <vTaskSdCard+0x30c>
					res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8006b44:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8006b48:	4b30      	ldr	r3, [pc, #192]	; (8006c0c <vTaskSdCard+0x3a8>)
 8006b4a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006b4e:	482a      	ldr	r0, [pc, #168]	; (8006bf8 <vTaskSdCard+0x394>)
 8006b50:	f00e facf 	bl	80150f2 <f_write>
 8006b54:	4603      	mov	r3, r0
 8006b56:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
							&EULER_bytesSD);
					if (res != FR_OK) {
 8006b5a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <vTaskSdCard+0x30c>
						UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8006b62:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006b66:	4619      	mov	r1, r3
 8006b68:	4829      	ldr	r0, [pc, #164]	; (8006c10 <vTaskSdCard+0x3ac>)
 8006b6a:	f7fd fbe3 	bl	8004334 <UsbPrint>
								res);
						goto resetSDCard;
 8006b6e:	e692      	b.n	8006896 <vTaskSdCard+0x32>
					}
				}

				msgCounter++;
 8006b70:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

				if (msgCounter >= SYNC_AFTER_COUNT) {
 8006b7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b80:	ddc9      	ble.n	8006b16 <vTaskSdCard+0x2b2>
					msgCounter = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

					UsbPrint("[STORAGE TASK] Syncing file..\n");
 8006b88:	4823      	ldr	r0, [pc, #140]	; (8006c18 <vTaskSdCard+0x3b4>)
 8006b8a:	f7fd fbd3 	bl	8004334 <UsbPrint>
					HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8006b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b92:	480f      	ldr	r0, [pc, #60]	; (8006bd0 <vTaskSdCard+0x36c>)
 8006b94:	f002 fa35 	bl	8009002 <HAL_GPIO_TogglePin>
					res = f_sync(&EULER_LOG_FILE);
 8006b98:	4817      	ldr	r0, [pc, #92]	; (8006bf8 <vTaskSdCard+0x394>)
 8006b9a:	f00e fc4e 	bl	801543a <f_sync>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					if (res != FR_OK) {
 8006ba4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d039      	beq.n	8006c20 <vTaskSdCard+0x3bc>
						UsbPrint("[STORAGE TASK] Failed syncing file: %d\n",
 8006bac:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	481a      	ldr	r0, [pc, #104]	; (8006c1c <vTaskSdCard+0x3b8>)
 8006bb4:	f7fd fbbe 	bl	8004334 <UsbPrint>
								res);
						goto resetSDCard;
 8006bb8:	e66d      	b.n	8006896 <vTaskSdCard+0x32>
 8006bba:	bf00      	nop
 8006bbc:	0801d598 	.word	0x0801d598
 8006bc0:	0801d5c0 	.word	0x0801d5c0
 8006bc4:	2001c3e4 	.word	0x2001c3e4
 8006bc8:	0801d5c4 	.word	0x0801d5c4
 8006bcc:	20000368 	.word	0x20000368
 8006bd0:	40020c00 	.word	0x40020c00
 8006bd4:	0801d5f0 	.word	0x0801d5f0
 8006bd8:	0801d614 	.word	0x0801d614
 8006bdc:	0801d620 	.word	0x0801d620
 8006be0:	0801d658 	.word	0x0801d658
 8006be4:	cccccccd 	.word	0xcccccccd
 8006be8:	51eb851f 	.word	0x51eb851f
 8006bec:	0801d664 	.word	0x0801d664
 8006bf0:	0801d688 	.word	0x0801d688
 8006bf4:	0801d6b8 	.word	0x0801d6b8
 8006bf8:	2001c1b4 	.word	0x2001c1b4
 8006bfc:	0801d6dc 	.word	0x0801d6dc
 8006c00:	0801d708 	.word	0x0801d708
 8006c04:	0801d730 	.word	0x0801d730
 8006c08:	0801d7d4 	.word	0x0801d7d4
 8006c0c:	2001c618 	.word	0x2001c618
 8006c10:	0801d760 	.word	0x0801d760
 8006c14:	20017ea0 	.word	0x20017ea0
 8006c18:	0801d78c 	.word	0x0801d78c
 8006c1c:	0801d7ac 	.word	0x0801d7ac
					}

					;

					// if the rocket landed, create a new file and write to that one
					if (ReadMutex(&fsm_mutex, &global_flight_phase_detection,
 8006c20:	f507 7292 	add.w	r2, r7, #292	; 0x124
 8006c24:	230c      	movs	r3, #12
 8006c26:	490a      	ldr	r1, [pc, #40]	; (8006c50 <vTaskSdCard+0x3ec>)
 8006c28:	480a      	ldr	r0, [pc, #40]	; (8006c54 <vTaskSdCard+0x3f0>)
 8006c2a:	f7fd f8c9 	bl	8003dc0 <ReadMutex>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f47f af70 	bne.w	8006b16 <vTaskSdCard+0x2b2>
							&local_flight_phase,
							sizeof(global_flight_phase_detection)) == osOK
							&& local_flight_phase.flight_phase == RECOVERY) {
 8006c36:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8006c3a:	2b06      	cmp	r3, #6
 8006c3c:	f47f af6b 	bne.w	8006b16 <vTaskSdCard+0x2b2>
						f_close(&EULER_LOG_FILE);
 8006c40:	4805      	ldr	r0, [pc, #20]	; (8006c58 <vTaskSdCard+0x3f4>)
 8006c42:	f00e fc83 	bl	801554c <f_close>
						// "clean" current file name
						EULER_LOG_FILE_NAME[0] = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
						goto logToNewFile;
 8006c4c:	e649      	b.n	80068e2 <vTaskSdCard+0x7e>
 8006c4e:	bf00      	nop
 8006c50:	200002bc 	.word	0x200002bc
 8006c54:	200095d8 	.word	0x200095d8
 8006c58:	2001c1b4 	.word	0x2001c1b4

08006c5c <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(800);
 8006c64:	f44f 7048 	mov.w	r0, #800	; 0x320
 8006c68:	f00f fa2e 	bl	80160c8 <osDelay>
	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006c6c:	f00f f954 	bl	8015f18 <osKernelGetTickCount>
 8006c70:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8006c72:	f00f f979 	bl	8015f68 <osKernelGetTickFreq>
 8006c76:	4602      	mov	r2, r0
 8006c78:	4b22      	ldr	r3, [pc, #136]	; (8006d04 <vTaskSensRead+0xa8>)
 8006c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c7e:	095b      	lsrs	r3, r3, #5
 8006c80:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	4413      	add	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8006c8a:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <vTaskSensRead+0xac>)
 8006c8c:	491f      	ldr	r1, [pc, #124]	; (8006d0c <vTaskSensRead+0xb0>)
 8006c8e:	4820      	ldr	r0, [pc, #128]	; (8006d10 <vTaskSensRead+0xb4>)
 8006c90:	f000 f858 	bl	8006d44 <ReadDataSB>
		}
		/* Log Data */
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <vTaskSensRead+0xb4>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	2101      	movs	r1, #1
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7fd f974 	bl	8003f88 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8006ca0:	4b1c      	ldr	r3, [pc, #112]	; (8006d14 <vTaskSensRead+0xb8>)
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7fd f96e 	bl	8003f88 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8006cac:	4b17      	ldr	r3, [pc, #92]	; (8006d0c <vTaskSensRead+0xb0>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f7fd f968 	bl	8003f88 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8006cb8:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <vTaskSensRead+0xbc>)
 8006cba:	2202      	movs	r2, #2
 8006cbc:	2102      	movs	r1, #2
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f7fd f962 	bl	8003f88 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <vTaskSensRead+0xac>)
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	2103      	movs	r1, #3
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7fd f95c 	bl	8003f88 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <vTaskSensRead+0xc0>)
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	2103      	movs	r1, #3
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7fd f956 	bl	8003f88 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8006cdc:	2220      	movs	r2, #32
 8006cde:	490c      	ldr	r1, [pc, #48]	; (8006d10 <vTaskSensRead+0xb4>)
 8006ce0:	480f      	ldr	r0, [pc, #60]	; (8006d20 <vTaskSensRead+0xc4>)
 8006ce2:	f005 ff73 	bl	800cbcc <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	4908      	ldr	r1, [pc, #32]	; (8006d0c <vTaskSensRead+0xb0>)
 8006cea:	480e      	ldr	r0, [pc, #56]	; (8006d24 <vTaskSensRead+0xc8>)
 8006cec:	f005 ff6e 	bl	800cbcc <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	4905      	ldr	r1, [pc, #20]	; (8006d08 <vTaskSensRead+0xac>)
 8006cf4:	480c      	ldr	r0, [pc, #48]	; (8006d28 <vTaskSensRead+0xcc>)
 8006cf6:	f005 ff69 	bl	800cbcc <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f00f fa12 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 8006d00:	e7bf      	b.n	8006c82 <vTaskSensRead+0x26>
 8006d02:	bf00      	nop
 8006d04:	51eb851f 	.word	0x51eb851f
 8006d08:	2000030c 	.word	0x2000030c
 8006d0c:	200002ec 	.word	0x200002ec
 8006d10:	200002cc 	.word	0x200002cc
 8006d14:	200002d8 	.word	0x200002d8
 8006d18:	200002f8 	.word	0x200002f8
 8006d1c:	20000318 	.word	0x20000318
 8006d20:	20017e3c 	.word	0x20017e3c
 8006d24:	200095e0 	.word	0x200095e0
 8006d28:	2000f9d8 	.word	0x2000f9d8

08006d2c <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f006 fd6b 	bl	800d810 <HAL_SPIEx_FlushRxFifo>
}
 8006d3a:	bf00      	nop
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum_sb(sb1);
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f000 f88b 	bl	8006e6c <calculate_checksum_sb>
 8006d56:	4603      	mov	r3, r0
 8006d58:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb1->checksum){
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	7f1b      	ldrb	r3, [r3, #28]
 8006d5e:	7dfa      	ldrb	r2, [r7, #23]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d11d      	bne.n	8006da0 <ReadDataSB+0x5c>
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8006d64:	4838      	ldr	r0, [pc, #224]	; (8006e48 <ReadDataSB+0x104>)
 8006d66:	f7fd f803 	bl	8003d70 <AcquireMutex>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d117      	bne.n	8006da0 <ReadDataSB+0x5c>
			sb1_baro = sb1->baro;
 8006d70:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <ReadDataSB+0x108>)
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8006d7a:	4a35      	ldr	r2, [pc, #212]	; (8006e50 <ReadDataSB+0x10c>)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4614      	mov	r4, r2
 8006d80:	330c      	adds	r3, #12
 8006d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8006d88:	482f      	ldr	r0, [pc, #188]	; (8006e48 <ReadDataSB+0x104>)
 8006d8a:	f7fd f80b 	bl	8003da4 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8006d8e:	4b30      	ldr	r3, [pc, #192]	; (8006e50 <ReadDataSB+0x10c>)
 8006d90:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	425b      	negs	r3, r3
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	b21a      	sxth	r2, r3
 8006d9c:	4b2c      	ldr	r3, [pc, #176]	; (8006e50 <ReadDataSB+0x10c>)
 8006d9e:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum_sb(sb2);
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f000 f863 	bl	8006e6c <calculate_checksum_sb>
 8006da6:	4603      	mov	r3, r0
 8006da8:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb2->checksum){
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	7f1b      	ldrb	r3, [r3, #28]
 8006dae:	7dfa      	ldrb	r2, [r7, #23]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d11d      	bne.n	8006df0 <ReadDataSB+0xac>
		if(AcquireMutex(&sb2_mutex) == osOK){
 8006db4:	4827      	ldr	r0, [pc, #156]	; (8006e54 <ReadDataSB+0x110>)
 8006db6:	f7fc ffdb 	bl	8003d70 <AcquireMutex>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d117      	bne.n	8006df0 <ReadDataSB+0xac>
			sb2_baro = sb2->baro;
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <ReadDataSB+0x114>)
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8006dca:	4a24      	ldr	r2, [pc, #144]	; (8006e5c <ReadDataSB+0x118>)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	4614      	mov	r4, r2
 8006dd0:	330c      	adds	r3, #12
 8006dd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8006dd8:	481e      	ldr	r0, [pc, #120]	; (8006e54 <ReadDataSB+0x110>)
 8006dda:	f7fc ffe3 	bl	8003da4 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8006dde:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <ReadDataSB+0x118>)
 8006de0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	425b      	negs	r3, r3
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	b21a      	sxth	r2, r3
 8006dec:	4b1b      	ldr	r3, [pc, #108]	; (8006e5c <ReadDataSB+0x118>)
 8006dee:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum_sb(sb3);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f83b 	bl	8006e6c <calculate_checksum_sb>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb3->checksum){
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	7f1b      	ldrb	r3, [r3, #28]
 8006dfe:	7dfa      	ldrb	r2, [r7, #23]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d11d      	bne.n	8006e40 <ReadDataSB+0xfc>
		if(AcquireMutex(&sb3_mutex) == osOK){
 8006e04:	4816      	ldr	r0, [pc, #88]	; (8006e60 <ReadDataSB+0x11c>)
 8006e06:	f7fc ffb3 	bl	8003d70 <AcquireMutex>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d117      	bne.n	8006e40 <ReadDataSB+0xfc>
			sb3_baro = sb3->baro;
 8006e10:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <ReadDataSB+0x120>)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8006e1a:	4a13      	ldr	r2, [pc, #76]	; (8006e68 <ReadDataSB+0x124>)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4614      	mov	r4, r2
 8006e20:	330c      	adds	r3, #12
 8006e22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8006e28:	480d      	ldr	r0, [pc, #52]	; (8006e60 <ReadDataSB+0x11c>)
 8006e2a:	f7fc ffbb 	bl	8003da4 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <ReadDataSB+0x124>)
 8006e30:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	425b      	negs	r3, r3
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b21a      	sxth	r2, r3
 8006e3c:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <ReadDataSB+0x124>)
 8006e3e:	815a      	strh	r2, [r3, #10]
		}
	}
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd90      	pop	{r4, r7, pc}
 8006e48:	2000fafc 	.word	0x2000fafc
 8006e4c:	20000218 	.word	0x20000218
 8006e50:	20000224 	.word	0x20000224
 8006e54:	2001c16c 	.word	0x2001c16c
 8006e58:	20000234 	.word	0x20000234
 8006e5c:	20000240 	.word	0x20000240
 8006e60:	2000fbec 	.word	0x2000fbec
 8006e64:	20000250 	.word	0x20000250
 8006e68:	2000025c 	.word	0x2000025c

08006e6c <calculate_checksum_sb>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum_sb(sb_data_t *sb_data){
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	4413      	add	r3, r2
 8006e82:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	4413      	add	r3, r2
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4413      	add	r3, r2
 8006ea6:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	4413      	add	r3, r2
 8006eca:	b2db      	uxtb	r3, r3
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <vTaskStateEst>:
void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature);


void vTaskStateEst(void *argument) {
 8006ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eda:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8006ede:	af0c      	add	r7, sp, #48	; 0x30
 8006ee0:	1d3b      	adds	r3, r7, #4
 8006ee2:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8006ee4:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fb f935 	bl	8002158 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8006eee:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006ef2:	2278      	movs	r2, #120	; 0x78
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f013 fcff 	bl	801a8fa <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8006efc:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006f00:	4618      	mov	r0, r3
 8006f02:	2378      	movs	r3, #120	; 0x78
 8006f04:	461a      	mov	r2, r3
 8006f06:	2100      	movs	r1, #0
 8006f08:	f013 fcf7 	bl	801a8fa <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8006f0c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fb fbf7 	bl	8002704 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8006f16:	f107 0318 	add.w	r3, r7, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	23b0      	movs	r3, #176	; 0xb0
 8006f1e:	461a      	mov	r2, r3
 8006f20:	2100      	movs	r1, #0
 8006f22:	f013 fcea 	bl	801a8fa <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8006f26:	f107 0318 	add.w	r3, r7, #24
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8006f2e:	f107 030c 	add.w	r3, r7, #12
 8006f32:	461a      	mov	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	6053      	str	r3, [r2, #4]
 8006f3a:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8006f3c:	f107 030c 	add.w	r3, r7, #12
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fb fbc7 	bl	80026d4 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 8006f46:	f107 030b 	add.w	r3, r7, #11
 8006f4a:	229b      	movs	r2, #155	; 0x9b
 8006f4c:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006f4e:	f107 0318 	add.w	r3, r7, #24
 8006f52:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006f56:	f107 010c 	add.w	r1, r7, #12
 8006f5a:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006f5e:	f7fb ffbf 	bl	8002ee0 <select_noise_models>

	/* average Temperature */
	float average_temp = 0;
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8006f6a:	6013      	str	r3, [r2, #0]
	float sum_temp = 0;
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8006f74:	6013      	str	r3, [r2, #0]
	/* average Pressure */
	float average_press = 0;
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006f7e:	6013      	str	r3, [r2, #0]
	float sum_press = 0;
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006f88:	6013      	str	r3, [r2, #0]
	uint16_t calibrate_count = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582

	/* reset counter */
	uint32_t reset_counter = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	bool was_reset = false;
 8006f96:	2300      	movs	r3, #0
 8006f98:	f887 357b 	strb.w	r3, [r7, #1403]	; 0x57b

	osDelay(900);
 8006f9c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8006fa0:	f00f f892 	bl	80160c8 <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006fa4:	f00e ffb8 	bl	8015f18 <osKernelGetTickCount>
 8006fa8:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8006fac:	f00e ffdc 	bl	8015f68 <osKernelGetTickFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4bb6      	ldr	r3, [pc, #728]	; (800728c <vTaskStateEst+0x3b4>)
 8006fb4:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb8:	095b      	lsrs	r3, r3, #5
 8006fba:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 8006fbe:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8006fc2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006fcc:	f107 020b 	add.w	r2, r7, #11
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	49af      	ldr	r1, [pc, #700]	; (8007290 <vTaskStateEst+0x3b8>)
 8006fd4:	48af      	ldr	r0, [pc, #700]	; (8007294 <vTaskStateEst+0x3bc>)
 8006fd6:	f7fc fef3 	bl	8003dc0 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8006fda:	f107 030c 	add.w	r3, r7, #12
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d115      	bne.n	8007010 <vTaskStateEst+0x138>
 8006fe4:	4baa      	ldr	r3, [pc, #680]	; (8007290 <vTaskStateEst+0x3b8>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b49      	cmp	r3, #73	; 0x49
 8006fea:	d111      	bne.n	8007010 <vTaskStateEst+0x138>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8006fec:	f107 0318 	add.w	r3, r7, #24
 8006ff0:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006ff4:	f107 010c 	add.w	r1, r7, #12
 8006ff8:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006ffc:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 8007000:	edd4 0a00 	vldr	s1, [r4]
 8007004:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8007008:	ed94 0a00 	vldr	s0, [r4]
 800700c:	f000 f964 	bl	80072d8 <resetStateEstimation>
		}

		/* Reset the whole thing automatically after 30 Seconds of running */
		if(reset_counter > 30*STATE_ESTIMATION_FREQUENCY && !was_reset){
 8007010:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007014:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007018:	4293      	cmp	r3, r2
 800701a:	d91b      	bls.n	8007054 <vTaskStateEst+0x17c>
 800701c:	f897 357b 	ldrb.w	r3, [r7, #1403]	; 0x57b
 8007020:	f083 0301 	eor.w	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d014      	beq.n	8007054 <vTaskStateEst+0x17c>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 800702a:	f107 0318 	add.w	r3, r7, #24
 800702e:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8007032:	f107 010c 	add.w	r1, r7, #12
 8007036:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800703a:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 800703e:	edd4 0a00 	vldr	s1, [r4]
 8007042:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8007046:	ed94 0a00 	vldr	s0, [r4]
 800704a:	f000 f945 	bl	80072d8 <resetStateEstimation>
			was_reset = true;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 357b 	strb.w	r3, [r7, #1403]	; 0x57b
		}
		reset_counter++;
 8007054:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8007058:	3301      	adds	r3, #1
 800705a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c


		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 800705e:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8007062:	2301      	movs	r3, #1
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	4613      	mov	r3, r2
 8007068:	4a8b      	ldr	r2, [pc, #556]	; (8007298 <vTaskStateEst+0x3c0>)
 800706a:	498c      	ldr	r1, [pc, #560]	; (800729c <vTaskStateEst+0x3c4>)
 800706c:	488c      	ldr	r0, [pc, #560]	; (80072a0 <vTaskStateEst+0x3c8>)
 800706e:	f7fc fee3 	bl	8003e38 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8007072:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8007076:	2302      	movs	r3, #2
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4613      	mov	r3, r2
 800707c:	4a89      	ldr	r2, [pc, #548]	; (80072a4 <vTaskStateEst+0x3cc>)
 800707e:	498a      	ldr	r1, [pc, #552]	; (80072a8 <vTaskStateEst+0x3d0>)
 8007080:	488a      	ldr	r0, [pc, #552]	; (80072ac <vTaskStateEst+0x3d4>)
 8007082:	f7fc fed9 	bl	8003e38 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8007086:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 800708a:	2303      	movs	r3, #3
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	4a87      	ldr	r2, [pc, #540]	; (80072b0 <vTaskStateEst+0x3d8>)
 8007092:	4988      	ldr	r1, [pc, #544]	; (80072b4 <vTaskStateEst+0x3dc>)
 8007094:	4888      	ldr	r0, [pc, #544]	; (80072b8 <vTaskStateEst+0x3e0>)
 8007096:	f7fc fecf 	bl	8003e38 <ReadMutexStateEst>

		/* calculate averaging */
		if(flight_phase_detection.flight_phase == IDLE){
 800709a:	f107 030c 	add.w	r3, r7, #12
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d165      	bne.n	8007170 <vTaskStateEst+0x298>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 80070a4:	4b7d      	ldr	r3, [pc, #500]	; (800729c <vTaskStateEst+0x3c4>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4b7f      	ldr	r3, [pc, #508]	; (80072a8 <vTaskStateEst+0x3d0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	441a      	add	r2, r3
 80070ae:	4b81      	ldr	r3, [pc, #516]	; (80072b4 <vTaskStateEst+0x3dc>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4413      	add	r3, r2
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070bc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80070c0:	ed93 7a00 	vldr	s14, [r3]
 80070c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80070cc:	edc3 7a00 	vstr	s15, [r3]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 80070d0:	4b72      	ldr	r3, [pc, #456]	; (800729c <vTaskStateEst+0x3c4>)
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	4b74      	ldr	r3, [pc, #464]	; (80072a8 <vTaskStateEst+0x3d0>)
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	441a      	add	r2, r3
 80070da:	4b76      	ldr	r3, [pc, #472]	; (80072b4 <vTaskStateEst+0x3dc>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070e8:	eddf 6a74 	vldr	s13, [pc, #464]	; 80072bc <vTaskStateEst+0x3e4>
 80070ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f0:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80070f4:	ed93 7a00 	vldr	s14, [r3]
 80070f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070fc:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8007100:	edc3 7a00 	vstr	s15, [r3]
			calibrate_count += 3;
 8007104:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 8007108:	3303      	adds	r3, #3
 800710a:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582
			if(calibrate_count > 150){
 800710e:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 8007112:	2b96      	cmp	r3, #150	; 0x96
 8007114:	d92c      	bls.n	8007170 <vTaskStateEst+0x298>
				average_press = sum_press / (float)calibrate_count;
 8007116:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007122:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8007126:	edd3 6a00 	vldr	s13, [r3]
 800712a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800712e:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8007132:	edc3 7a00 	vstr	s15, [r3]
				average_temp = sum_temp / (float)calibrate_count;
 8007136:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007142:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8007146:	edd3 6a00 	vldr	s13, [r3]
 800714a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800714e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8007152:	edc3 7a00 	vstr	s15, [r3]
				sum_press = 0;
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	f207 5284 	addw	r2, r7, #1412	; 0x584
 800715e:	6013      	str	r3, [r2, #0]
				sum_temp = 0;
 8007160:	f04f 0300 	mov.w	r3, #0
 8007164:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8007168:	6013      	str	r3, [r2, #0]
				calibrate_count = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582
			}
		}

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8007170:	f107 020c 	add.w	r2, r7, #12
 8007174:	230c      	movs	r3, #12
 8007176:	4952      	ldr	r1, [pc, #328]	; (80072c0 <vTaskStateEst+0x3e8>)
 8007178:	4852      	ldr	r0, [pc, #328]	; (80072c4 <vTaskStateEst+0x3ec>)
 800717a:	f7fc fe21 	bl	8003dc0 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 800717e:	f207 4074 	addw	r0, r7, #1140	; 0x474
 8007182:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8007186:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 800718a:	f107 0318 	add.w	r3, r7, #24
 800718e:	9301      	str	r3, [sp, #4]
 8007190:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4603      	mov	r3, r0
 8007198:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 800719c:	f7fb fd34 	bl	8002c08 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80071a0:	f107 0318 	add.w	r3, r7, #24
 80071a4:	f207 5264 	addw	r2, r7, #1380	; 0x564
 80071a8:	f107 010c 	add.w	r1, r7, #12
 80071ac:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80071b0:	f7fb fe96 	bl	8002ee0 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 80071b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7fb fb39 	bl	8002830 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 80071be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd0a      	ble.n	80071e0 <vTaskStateEst+0x308>
			select_kf_observation_matrices(&kf_state);
 80071ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb fb9f 	bl	8002912 <select_kf_observation_matrices>
			kf_update(&kf_state);
 80071d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fb fbd7 	bl	800298c <kf_update>
 80071de:	e00a      	b.n	80071f6 <vTaskStateEst+0x31e>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 80071e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80071e4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80071e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80071ec:	f502 729a 	add.w	r2, r2, #308	; 0x134
 80071f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80071f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 80071f6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 80071fa:	4618      	mov	r0, r3
 80071fc:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8007200:	2278      	movs	r2, #120	; 0x78
 8007202:	4619      	mov	r1, r3
 8007204:	f013 fb6e 	bl	801a8e4 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8007208:	482f      	ldr	r0, [pc, #188]	; (80072c8 <vTaskStateEst+0x3f0>)
 800720a:	f7fc fdb1 	bl	8003d70 <AcquireMutex>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <vTaskStateEst+0x34e>
			update_state_est_data(&state_est_data_global, &kf_state);
 8007214:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007218:	4619      	mov	r1, r3
 800721a:	482c      	ldr	r0, [pc, #176]	; (80072cc <vTaskStateEst+0x3f4>)
 800721c:	f7fb fca4 	bl	8002b68 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8007220:	4829      	ldr	r0, [pc, #164]	; (80072c8 <vTaskStateEst+0x3f0>)
 8007222:	f7fc fdbf 	bl	8003da4 <ReleaseMutex>
		}

		UsbPrint("[DBG] Height: %d; Velocity: %d; t: %lu\n", state_est_data_global.position_world[2],
 8007226:	4b29      	ldr	r3, [pc, #164]	; (80072cc <vTaskStateEst+0x3f4>)
 8007228:	6899      	ldr	r1, [r3, #8]
 800722a:	4b28      	ldr	r3, [pc, #160]	; (80072cc <vTaskStateEst+0x3f4>)
 800722c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800722e:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
 8007232:	4827      	ldr	r0, [pc, #156]	; (80072d0 <vTaskStateEst+0x3f8>)
 8007234:	f7fd f87e 	bl	8004334 <UsbPrint>
				state_est_data_global.velocity_world[2], tick_count);

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8007238:	4822      	ldr	r0, [pc, #136]	; (80072c4 <vTaskStateEst+0x3ec>)
 800723a:	f7fc fd99 	bl	8003d70 <AcquireMutex>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d109      	bne.n	8007258 <vTaskStateEst+0x380>
			global_env = env;
 8007244:	4b23      	ldr	r3, [pc, #140]	; (80072d4 <vTaskStateEst+0x3fc>)
 8007246:	461c      	mov	r4, r3
 8007248:	f207 5364 	addw	r3, r7, #1380	; 0x564
 800724c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800724e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8007252:	481c      	ldr	r0, [pc, #112]	; (80072c4 <vTaskStateEst+0x3ec>)
 8007254:	f7fc fda6 	bl	8003da4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8007258:	f00e fe5e 	bl	8015f18 <osKernelGetTickCount>
 800725c:	4684      	mov	ip, r0
 800725e:	4e1b      	ldr	r6, [pc, #108]	; (80072cc <vTaskStateEst+0x3f4>)
 8007260:	466d      	mov	r5, sp
 8007262:	f106 040c 	add.w	r4, r6, #12
 8007266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800726a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800726c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800726e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007272:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007276:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800727a:	4660      	mov	r0, ip
 800727c:	f7fc ffca 	bl	8004214 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8007280:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8007284:	f00e ff4e 	bl	8016124 <osDelayUntil>
		tick_count += tick_update;
 8007288:	e699      	b.n	8006fbe <vTaskStateEst+0xe6>
 800728a:	bf00      	nop
 800728c:	51eb851f 	.word	0x51eb851f
 8007290:	20013cec 	.word	0x20013cec
 8007294:	2000b9c4 	.word	0x2000b9c4
 8007298:	20000224 	.word	0x20000224
 800729c:	20000218 	.word	0x20000218
 80072a0:	2000fafc 	.word	0x2000fafc
 80072a4:	20000240 	.word	0x20000240
 80072a8:	20000234 	.word	0x20000234
 80072ac:	2001c16c 	.word	0x2001c16c
 80072b0:	2000025c 	.word	0x2000025c
 80072b4:	20000250 	.word	0x20000250
 80072b8:	2000fbec 	.word	0x2000fbec
 80072bc:	42c80000 	.word	0x42c80000
 80072c0:	200002bc 	.word	0x200002bc
 80072c4:	200095d8 	.word	0x200095d8
 80072c8:	20011c64 	.word	0x20011c64
 80072cc:	2000026c 	.word	0x2000026c
 80072d0:	0801d7f4 	.word	0x0801d7f4
 80072d4:	200002ac 	.word	0x200002ac

080072d8 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6178      	str	r0, [r7, #20]
 80072e0:	6139      	str	r1, [r7, #16]
 80072e2:	60fa      	str	r2, [r7, #12]
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80072ea:	edc7 0a00 	vstr	s1, [r7]
	reset_flight_phase_detection(flight_phase_detection);
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f7fb f9f0 	bl	80026d4 <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 80072f4:	edd7 0a00 	vldr	s1, [r7]
 80072f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7fa ff43 	bl	8002188 <calibrate_env>
	update_env(environment, temperature);
 8007302:	ed97 0a00 	vldr	s0, [r7]
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7fa ff62 	bl	80021d0 <update_env>
	reset_kf_state(kf_state);
 800730c:	6978      	ldr	r0, [r7, #20]
 800730e:	f7fb f9f9 	bl	8002704 <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	4618      	mov	r0, r3
 8007316:	23b0      	movs	r3, #176	; 0xb0
 8007318:	461a      	mov	r2, r3
 800731a:	2100      	movs	r1, #0
 800731c:	f013 faed 	bl	801a8fa <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	6939      	ldr	r1, [r7, #16]
 8007326:	6978      	ldr	r0, [r7, #20]
 8007328:	f7fb fdda 	bl	8002ee0 <select_noise_models>
}
 800732c:	bf00      	nop
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <vTaskXbee>:
int uart_counter = 0;


uint8_t calculate_checksum(telemetry_t *cnf);

void vTaskXbee(void *argument) {
 8007334:	b580      	push	{r7, lr}
 8007336:	b0b8      	sub	sp, #224	; 0xe0
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	sb_data_t local_sb_data;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 800733c:	f107 030c 	add.w	r3, r7, #12
 8007340:	225c      	movs	r2, #92	; 0x5c
 8007342:	2100      	movs	r1, #0
 8007344:	4618      	mov	r0, r3
 8007346:	f013 fad8 	bl	801a8fa <memset>
	telemetry_send.flight_phase = IDLE;
 800734a:	2301      	movs	r3, #1
 800734c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	telemetry_send.startbyte = 0x17;
 8007350:	2317      	movs	r3, #23
 8007352:	733b      	strb	r3, [r7, #12]


	/* Command struct */
	local_command_rx = IDLE_COMMAND;
 8007354:	4bb3      	ldr	r3, [pc, #716]	; (8007624 <vTaskXbee+0x2f0>)
 8007356:	229b      	movs	r2, #155	; 0x9b
 8007358:	701a      	strb	r2, [r3, #0]
	local_command = IDLE_COMMAND;
 800735a:	4bb3      	ldr	r3, [pc, #716]	; (8007628 <vTaskXbee+0x2f4>)
 800735c:	229b      	movs	r2, #155	; 0x9b
 800735e:	701a      	strb	r2, [r3, #0]

	uint8_t buzzercounter = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

	osDelay(700);
 8007366:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800736a:	f00e fead 	bl	80160c8 <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800736e:	2201      	movs	r2, #1
 8007370:	2102      	movs	r1, #2
 8007372:	48ae      	ldr	r0, [pc, #696]	; (800762c <vTaskXbee+0x2f8>)
 8007374:	f001 fe2c 	bl	8008fd0 <HAL_GPIO_WritePin>

	/* Camera Variables */
	uint32_t camera_counter = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	bool camera_enabled = false;
 800737e:	2300      	movs	r3, #0
 8007380:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	bool camera_wait = false;
 8007384:	2300      	movs	r3, #0
 8007386:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
	bool camera_trigger = false;
 800738a:	2300      	movs	r3, #0
 800738c:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
	bool camera_ready = false;
 8007390:	2300      	movs	r3, #0
 8007392:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0


	/* Infinite loop */

	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8007396:	f00e fde7 	bl	8015f68 <osKernelGetTickFreq>
 800739a:	4602      	mov	r2, r0
 800739c:	4ba4      	ldr	r3, [pc, #656]	; (8007630 <vTaskXbee+0x2fc>)
 800739e:	fba3 2302 	umull	r2, r3, r3, r2
 80073a2:	08db      	lsrs	r3, r3, #3
 80073a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 80073a8:	f00e fdde 	bl	8015f68 <osKernelGetTickFreq>
 80073ac:	4602      	mov	r2, r0
 80073ae:	4ba1      	ldr	r3, [pc, #644]	; (8007634 <vTaskXbee+0x300>)
 80073b0:	fba3 2302 	umull	r2, r3, r3, r2
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	bool fast_sampling = false;
 80073ba:	2300      	movs	r3, #0
 80073bc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
	tick_count = osKernelGetTickCount();
 80073c0:	f00e fdaa 	bl	8015f18 <osKernelGetTickCount>
 80073c4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc


	while (1) {
		/* Tick Update */
		if(fast_sampling){
 80073c8:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <vTaskXbee+0xac>
			tick_count += tick_update_fast;
 80073d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073d8:	4413      	add	r3, r2
 80073da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80073de:	e006      	b.n	80073ee <vTaskXbee+0xba>
		}
		else{
			tick_count += tick_update_slow;
 80073e0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80073e8:	4413      	add	r3, r2
 80073ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		}
		/* Read Command */
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 80073ee:	2201      	movs	r2, #1
 80073f0:	498c      	ldr	r1, [pc, #560]	; (8007624 <vTaskXbee+0x2f0>)
 80073f2:	4891      	ldr	r0, [pc, #580]	; (8007638 <vTaskXbee+0x304>)
 80073f4:	f006 fd74 	bl	800dee0 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80073f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80073fa:	4b8b      	ldr	r3, [pc, #556]	; (8007628 <vTaskXbee+0x2f4>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	4b88      	ldr	r3, [pc, #544]	; (8007624 <vTaskXbee+0x2f0>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	488d      	ldr	r0, [pc, #564]	; (800763c <vTaskXbee+0x308>)
 8007406:	f7fc ff95 	bl	8004334 <UsbPrint>
				telemetry_send.ts, local_command, local_command_rx);

		if(AcquireMutex(&command_mutex) == osOK){
 800740a:	488d      	ldr	r0, [pc, #564]	; (8007640 <vTaskXbee+0x30c>)
 800740c:	f7fc fcb0 	bl	8003d70 <AcquireMutex>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <vTaskXbee+0xf0>
			global_telemetry_command = local_command;
 8007416:	4b84      	ldr	r3, [pc, #528]	; (8007628 <vTaskXbee+0x2f4>)
 8007418:	781a      	ldrb	r2, [r3, #0]
 800741a:	4b8a      	ldr	r3, [pc, #552]	; (8007644 <vTaskXbee+0x310>)
 800741c:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 800741e:	4888      	ldr	r0, [pc, #544]	; (8007640 <vTaskXbee+0x30c>)
 8007420:	f7fc fcc0 	bl	8003da4 <ReleaseMutex>
		}

		/* Check if we need to go to fast sampling */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8007424:	4b80      	ldr	r3, [pc, #512]	; (8007628 <vTaskXbee+0x2f4>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b0d      	cmp	r3, #13
 800742a:	d102      	bne.n	8007432 <vTaskXbee+0xfe>
			fast_sampling = true;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}

		/* Check if we need to go to low sampling */
		if(local_command == TELEMETRY_LOW_SAMPLING){
 8007432:	4b7d      	ldr	r3, [pc, #500]	; (8007628 <vTaskXbee+0x2f4>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2bc5      	cmp	r3, #197	; 0xc5
 8007438:	d102      	bne.n	8007440 <vTaskXbee+0x10c>
			fast_sampling = false;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}

		/* Enable Buzzer trough Telemetry */
		if(local_command == ENABLE_BUZZER){
 8007440:	4b79      	ldr	r3, [pc, #484]	; (8007628 <vTaskXbee+0x2f4>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b71      	cmp	r3, #113	; 0x71
 8007446:	d10e      	bne.n	8007466 <vTaskXbee+0x132>
			buzzer_on_telemetry = !buzzer_on_telemetry;
 8007448:	4b7f      	ldr	r3, [pc, #508]	; (8007648 <vTaskXbee+0x314>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	bf14      	ite	ne
 8007450:	2301      	movne	r3, #1
 8007452:	2300      	moveq	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f083 0301 	eor.w	r3, r3, #1
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	b2da      	uxtb	r2, r3
 8007462:	4b79      	ldr	r3, [pc, #484]	; (8007648 <vTaskXbee+0x314>)
 8007464:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer Trough FSM */
		if(telemetry_send.flight_phase == RECOVERY){
 8007466:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800746a:	2b06      	cmp	r3, #6
 800746c:	d102      	bne.n	8007474 <vTaskXbee+0x140>
			buzzer_on_fsm = true;
 800746e:	4b77      	ldr	r3, [pc, #476]	; (800764c <vTaskXbee+0x318>)
 8007470:	2201      	movs	r2, #1
 8007472:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Self Power Hold */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 8007474:	4b6c      	ldr	r3, [pc, #432]	; (8007628 <vTaskXbee+0x2f4>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	2b0d      	cmp	r3, #13
 800747a:	d104      	bne.n	8007486 <vTaskXbee+0x152>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 800747c:	2200      	movs	r2, #0
 800747e:	2102      	movs	r1, #2
 8007480:	486a      	ldr	r0, [pc, #424]	; (800762c <vTaskXbee+0x2f8>)
 8007482:	f001 fda5 	bl	8008fd0 <HAL_GPIO_WritePin>
		}

		/* Go Back to Low Sampling if we are in Recovery */
		if(telemetry_send.flight_phase == RECOVERY){
 8007486:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800748a:	2b06      	cmp	r3, #6
 800748c:	d102      	bne.n	8007494 <vTaskXbee+0x160>
			fast_sampling = false;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
		}

		/* Disable Self Power Hold */
		if(local_command == DISABLE_SELF_HOLD){
 8007494:	4b64      	ldr	r3, [pc, #400]	; (8007628 <vTaskXbee+0x2f4>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	2bfb      	cmp	r3, #251	; 0xfb
 800749a:	d104      	bne.n	80074a6 <vTaskXbee+0x172>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 800749c:	2201      	movs	r2, #1
 800749e:	2102      	movs	r1, #2
 80074a0:	4862      	ldr	r0, [pc, #392]	; (800762c <vTaskXbee+0x2f8>)
 80074a2:	f001 fd95 	bl	8008fd0 <HAL_GPIO_WritePin>
		}

		/* reset command */
		if(new_command){
 80074a6:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <vTaskXbee+0x31c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d005      	beq.n	80074ba <vTaskXbee+0x186>
			local_command = IDLE_COMMAND;
 80074ae:	4b5e      	ldr	r3, [pc, #376]	; (8007628 <vTaskXbee+0x2f4>)
 80074b0:	229b      	movs	r2, #155	; 0x9b
 80074b2:	701a      	strb	r2, [r3, #0]
			new_command = false;
 80074b4:	4b66      	ldr	r3, [pc, #408]	; (8007650 <vTaskXbee+0x31c>)
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
		}

		/* Start Enable Camera Sequence */
		if((local_command == ENABLE_CAMERA) && !camera_enabled){
 80074ba:	4b5b      	ldr	r3, [pc, #364]	; (8007628 <vTaskXbee+0x2f4>)
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d11c      	bne.n	80074fc <vTaskXbee+0x1c8>
 80074c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80074c6:	f083 0301 	eor.w	r3, r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d015      	beq.n	80074fc <vTaskXbee+0x1c8>
			camera_enabled = true;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 80074d6:	2201      	movs	r2, #1
 80074d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074dc:	485d      	ldr	r0, [pc, #372]	; (8007654 <vTaskXbee+0x320>)
 80074de:	f001 fd77 	bl	8008fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 80074e2:	2201      	movs	r2, #1
 80074e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80074e8:	485a      	ldr	r0, [pc, #360]	; (8007654 <vTaskXbee+0x320>)
 80074ea:	f001 fd71 	bl	8008fd0 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_ON;
 80074ee:	f00e fd13 	bl	8015f18 <osKernelGetTickCount>
 80074f2:	4603      	mov	r3, r0
 80074f4:	f603 53ac 	addw	r3, r3, #3500	; 0xdac
 80074f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_wait){
 80074fc:	f00e fd0c 	bl	8015f18 <osKernelGetTickCount>
 8007500:	4602      	mov	r2, r0
 8007502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007506:	4293      	cmp	r3, r2
 8007508:	d91c      	bls.n	8007544 <vTaskXbee+0x210>
 800750a:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800750e:	f083 0301 	eor.w	r3, r3, #1
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <vTaskXbee+0x210>
			camera_wait = true;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 800751e:	2200      	movs	r2, #0
 8007520:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007524:	484b      	ldr	r0, [pc, #300]	; (8007654 <vTaskXbee+0x320>)
 8007526:	f001 fd53 	bl	8008fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 800752a:	2200      	movs	r2, #0
 800752c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007530:	4848      	ldr	r0, [pc, #288]	; (8007654 <vTaskXbee+0x320>)
 8007532:	f001 fd4d 	bl	8008fd0 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_WAIT;
 8007536:	f00e fcef 	bl	8015f18 <osKernelGetTickCount>
 800753a:	4603      	mov	r3, r0
 800753c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8007540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_trigger){
 8007544:	f00e fce8 	bl	8015f18 <osKernelGetTickCount>
 8007548:	4602      	mov	r2, r0
 800754a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800754e:	4293      	cmp	r3, r2
 8007550:	d91b      	bls.n	800758a <vTaskXbee+0x256>
 8007552:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 8007556:	f083 0301 	eor.w	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d014      	beq.n	800758a <vTaskXbee+0x256>
			camera_trigger = true;
 8007560:	2301      	movs	r3, #1
 8007562:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_SET);
 8007566:	2201      	movs	r2, #1
 8007568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800756c:	4839      	ldr	r0, [pc, #228]	; (8007654 <vTaskXbee+0x320>)
 800756e:	f001 fd2f 	bl	8008fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_SET);
 8007572:	2201      	movs	r2, #1
 8007574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007578:	4836      	ldr	r0, [pc, #216]	; (8007654 <vTaskXbee+0x320>)
 800757a:	f001 fd29 	bl	8008fd0 <HAL_GPIO_WritePin>
			camera_counter = osKernelGetTickCount() + CAMERA_TRIGGER;
 800757e:	f00e fccb 	bl	8015f18 <osKernelGetTickCount>
 8007582:	4603      	mov	r3, r0
 8007584:	33c8      	adds	r3, #200	; 0xc8
 8007586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		}

		if((camera_counter > osKernelGetTickCount()) && !camera_ready){
 800758a:	f00e fcc5 	bl	8015f18 <osKernelGetTickCount>
 800758e:	4602      	mov	r2, r0
 8007590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007594:	4293      	cmp	r3, r2
 8007596:	d915      	bls.n	80075c4 <vTaskXbee+0x290>
 8007598:	f897 30d0 	ldrb.w	r3, [r7, #208]	; 0xd0
 800759c:	f083 0301 	eor.w	r3, r3, #1
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00e      	beq.n	80075c4 <vTaskXbee+0x290>
			camera_ready = true;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
			HAL_GPIO_WritePin(CAMERA1_GPIO_Port, CAMERA1_Pin, GPIO_PIN_RESET);
 80075ac:	2200      	movs	r2, #0
 80075ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075b2:	4828      	ldr	r0, [pc, #160]	; (8007654 <vTaskXbee+0x320>)
 80075b4:	f001 fd0c 	bl	8008fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CAMERA2_GPIO_Port, CAMERA2_Pin, GPIO_PIN_RESET);
 80075b8:	2200      	movs	r2, #0
 80075ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80075be:	4825      	ldr	r0, [pc, #148]	; (8007654 <vTaskXbee+0x320>)
 80075c0:	f001 fd06 	bl	8008fd0 <HAL_GPIO_WritePin>

		/* Camera first enable for some time, then turn off and finally turn on again */


		/* Enable Buzzer */
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 80075c4:	4b21      	ldr	r3, [pc, #132]	; (800764c <vTaskXbee+0x318>)
 80075c6:	781a      	ldrb	r2, [r3, #0]
 80075c8:	4b1f      	ldr	r3, [pc, #124]	; (8007648 <vTaskXbee+0x314>)
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d045      	beq.n	800765c <vTaskXbee+0x328>
			if(fast_sampling){
 80075d0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d012      	beq.n	80075fe <vTaskXbee+0x2ca>
				if(buzzercounter > (400/tick_update_fast)){
 80075d8:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 80075dc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80075e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80075e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d944      	bls.n	8007676 <vTaskXbee+0x342>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80075ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075f0:	4819      	ldr	r0, [pc, #100]	; (8007658 <vTaskXbee+0x324>)
 80075f2:	f001 fd06 	bl	8009002 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80075fc:	e03b      	b.n	8007676 <vTaskXbee+0x342>
				}
			}
			else{
				if(buzzercounter > (400/tick_update_slow)){
 80075fe:	f897 20db 	ldrb.w	r2, [r7, #219]	; 0xdb
 8007602:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800760a:	fbb1 f3f3 	udiv	r3, r1, r3
 800760e:	429a      	cmp	r2, r3
 8007610:	d931      	bls.n	8007676 <vTaskXbee+0x342>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8007612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007616:	4810      	ldr	r0, [pc, #64]	; (8007658 <vTaskXbee+0x324>)
 8007618:	f001 fcf3 	bl	8009002 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 8007622:	e028      	b.n	8007676 <vTaskXbee+0x342>
 8007624:	2001c61d 	.word	0x2001c61d
 8007628:	2001c61c 	.word	0x2001c61c
 800762c:	40020400 	.word	0x40020400
 8007630:	cccccccd 	.word	0xcccccccd
 8007634:	51eb851f 	.word	0x51eb851f
 8007638:	2000964c 	.word	0x2000964c
 800763c:	0801d81c 	.word	0x0801d81c
 8007640:	2000b9c4 	.word	0x2000b9c4
 8007644:	20013cec 	.word	0x20013cec
 8007648:	2000032e 	.word	0x2000032e
 800764c:	2000032d 	.word	0x2000032d
 8007650:	2000032c 	.word	0x2000032c
 8007654:	40021000 	.word	0x40021000
 8007658:	40020c00 	.word	0x40020c00
				}
			}
		}
		else if(osKernelGetTickCount() > 5000){
 800765c:	f00e fc5c 	bl	8015f18 <osKernelGetTickCount>
 8007660:	4602      	mov	r2, r0
 8007662:	f241 3388 	movw	r3, #5000	; 0x1388
 8007666:	429a      	cmp	r2, r3
 8007668:	d905      	bls.n	8007676 <vTaskXbee+0x342>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007670:	4845      	ldr	r0, [pc, #276]	; (8007788 <vTaskXbee+0x454>)
 8007672:	f001 fcad 	bl	8008fd0 <HAL_GPIO_WritePin>
		}
		buzzercounter++;
 8007676:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800767a:	3301      	adds	r3, #1
 800767c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 8007680:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007684:	230c      	movs	r3, #12
 8007686:	4941      	ldr	r1, [pc, #260]	; (800778c <vTaskXbee+0x458>)
 8007688:	4841      	ldr	r0, [pc, #260]	; (8007790 <vTaskXbee+0x45c>)
 800768a:	f7fc fb99 	bl	8003dc0 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 800768e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007692:	f103 020c 	add.w	r2, r3, #12
 8007696:	2310      	movs	r3, #16
 8007698:	493e      	ldr	r1, [pc, #248]	; (8007794 <vTaskXbee+0x460>)
 800769a:	483d      	ldr	r0, [pc, #244]	; (8007790 <vTaskXbee+0x45c>)
 800769c:	f7fc fb90 	bl	8003dc0 <ReadMutex>

		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 80076a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076a2:	613b      	str	r3, [r7, #16]
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 80076a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a6:	617b      	str	r3, [r7, #20]
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 80076a8:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80076ac:	83fb      	strh	r3, [r7, #30]
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 80076ae:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 80076b2:	843b      	strh	r3, [r7, #32]
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 80076b4:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 80076b8:	847b      	strh	r3, [r7, #34]	; 0x22
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 80076ba:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80076be:	833b      	strh	r3, [r7, #24]
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 80076c0:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80076c4:	837b      	strh	r3, [r7, #26]
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 80076c6:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80076ca:	83bb      	strh	r3, [r7, #28]


		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 80076cc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80076d0:	233c      	movs	r3, #60	; 0x3c
 80076d2:	4931      	ldr	r1, [pc, #196]	; (8007798 <vTaskXbee+0x464>)
 80076d4:	4831      	ldr	r0, [pc, #196]	; (800779c <vTaskXbee+0x468>)
 80076d6:	f7fc fb73 	bl	8003dc0 <ReadMutex>

		ReadMutex(&motor_mutex, &global_airbrake_extension, &telemetry_send.airbrake_extension, sizeof(global_airbrake_extension));
 80076da:	f107 030c 	add.w	r3, r7, #12
 80076de:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80076e2:	2304      	movs	r3, #4
 80076e4:	492e      	ldr	r1, [pc, #184]	; (80077a0 <vTaskXbee+0x46c>)
 80076e6:	482f      	ldr	r0, [pc, #188]	; (80077a4 <vTaskXbee+0x470>)
 80076e8:	f7fc fb6a 	bl	8003dc0 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80076f4:	2301      	movs	r3, #1
 80076f6:	492c      	ldr	r1, [pc, #176]	; (80077a8 <vTaskXbee+0x474>)
 80076f8:	482c      	ldr	r0, [pc, #176]	; (80077ac <vTaskXbee+0x478>)
 80076fa:	f7fc fb61 	bl	8003dc0 <ReadMutex>

		/* read GPS */
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	f103 0220 	add.w	r2, r3, #32
 8007706:	2324      	movs	r3, #36	; 0x24
 8007708:	4929      	ldr	r1, [pc, #164]	; (80077b0 <vTaskXbee+0x47c>)
 800770a:	482a      	ldr	r0, [pc, #168]	; (80077b4 <vTaskXbee+0x480>)
 800770c:	f7fc fb58 	bl	8003dc0 <ReadMutex>

		/* read Battery */
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 8007710:	f107 030c 	add.w	r3, r7, #12
 8007714:	f103 0218 	add.w	r2, r3, #24
 8007718:	2306      	movs	r3, #6
 800771a:	4927      	ldr	r1, [pc, #156]	; (80077b8 <vTaskXbee+0x484>)
 800771c:	4827      	ldr	r0, [pc, #156]	; (80077bc <vTaskXbee+0x488>)
 800771e:	f7fc fb4f 	bl	8003dc0 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 8007722:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007726:	653b      	str	r3, [r7, #80]	; 0x50
		telemetry_send.velocity = state_est_data.velocity_world[2];
 8007728:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800772c:	657b      	str	r3, [r7, #84]	; 0x54
		telemetry_send.ts = osKernelGetTickCount();
 800772e:	f00e fbf3 	bl	8015f18 <osKernelGetTickCount>
 8007732:	4603      	mov	r3, r0
 8007734:	663b      	str	r3, [r7, #96]	; 0x60

		/* Write Buzzer State*/
		telemetry_send.flight_phase = telemetry_send.flight_phase + 128*(buzzer_on_fsm ^ buzzer_on_telemetry);
 8007736:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800773a:	4b21      	ldr	r3, [pc, #132]	; (80077c0 <vTaskXbee+0x48c>)
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	4b21      	ldr	r3, [pc, #132]	; (80077c4 <vTaskXbee+0x490>)
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	404b      	eors	r3, r1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	01db      	lsls	r3, r3, #7
 8007748:	b2db      	uxtb	r3, r3
 800774a:	4413      	add	r3, r2
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c

		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 8007752:	f107 030c 	add.w	r3, r7, #12
 8007756:	4618      	mov	r0, r3
 8007758:	f000 f888 	bl	800786c <calculate_checksum>
 800775c:	4603      	mov	r3, r0
 800775e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 8007762:	f107 010c 	add.w	r1, r7, #12
 8007766:	2364      	movs	r3, #100	; 0x64
 8007768:	225c      	movs	r2, #92	; 0x5c
 800776a:	4817      	ldr	r0, [pc, #92]	; (80077c8 <vTaskXbee+0x494>)
 800776c:	f006 fb26 	bl	800ddbc <HAL_UART_Transmit>

		telemetry_send.checksum = 0;
 8007770:	2300      	movs	r3, #0
 8007772:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

		uart_counter = 0;
 8007776:	4b15      	ldr	r3, [pc, #84]	; (80077cc <vTaskXbee+0x498>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]
		/* Sleep */
		osDelayUntil(tick_count);
 800777c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8007780:	f00e fcd0 	bl	8016124 <osDelayUntil>
		if(fast_sampling){
 8007784:	e620      	b.n	80073c8 <vTaskXbee+0x94>
 8007786:	bf00      	nop
 8007788:	40020c00 	.word	0x40020c00
 800778c:	20000218 	.word	0x20000218
 8007790:	2000fafc 	.word	0x2000fafc
 8007794:	20000224 	.word	0x20000224
 8007798:	2000026c 	.word	0x2000026c
 800779c:	20011c64 	.word	0x20011c64
 80077a0:	20017e38 	.word	0x20017e38
 80077a4:	2000972c 	.word	0x2000972c
 80077a8:	200002bc 	.word	0x200002bc
 80077ac:	200095d8 	.word	0x200095d8
 80077b0:	20013cc8 	.word	0x20013cc8
 80077b4:	20017db0 	.word	0x20017db0
 80077b8:	2000fa44 	.word	0x2000fa44
 80077bc:	20009644 	.word	0x20009644
 80077c0:	2000032d 	.word	0x2000032d
 80077c4:	2000032e 	.word	0x2000032e
 80077c8:	2000964c 	.word	0x2000964c
 80077cc:	20000330 	.word	0x20000330

080077d0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	if(huart==&huart7){
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <HAL_UART_RxCpltCallback+0x84>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d135      	bne.n	800784c <HAL_UART_RxCpltCallback+0x7c>

		static uint8_t buffer [4];
		buffer[uart_counter] = local_command_rx;
 80077e0:	4b1d      	ldr	r3, [pc, #116]	; (8007858 <HAL_UART_RxCpltCallback+0x88>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1d      	ldr	r2, [pc, #116]	; (800785c <HAL_UART_RxCpltCallback+0x8c>)
 80077e6:	7811      	ldrb	r1, [r2, #0]
 80077e8:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <HAL_UART_RxCpltCallback+0x90>)
 80077ea:	54d1      	strb	r1, [r2, r3]
		uart_counter++;
 80077ec:	4b1a      	ldr	r3, [pc, #104]	; (8007858 <HAL_UART_RxCpltCallback+0x88>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	4a19      	ldr	r2, [pc, #100]	; (8007858 <HAL_UART_RxCpltCallback+0x88>)
 80077f4:	6013      	str	r3, [r2, #0]
		if(uart_counter == 4){
 80077f6:	4b18      	ldr	r3, [pc, #96]	; (8007858 <HAL_UART_RxCpltCallback+0x88>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d121      	bne.n	8007842 <HAL_UART_RxCpltCallback+0x72>
			uint8_t succesful = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	73fb      	strb	r3, [r7, #15]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 8007802:	2301      	movs	r3, #1
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	e00c      	b.n	8007822 <HAL_UART_RxCpltCallback+0x52>
 8007808:	4b15      	ldr	r3, [pc, #84]	; (8007860 <HAL_UART_RxCpltCallback+0x90>)
 800780a:	781a      	ldrb	r2, [r3, #0]
 800780c:	4914      	ldr	r1, [pc, #80]	; (8007860 <HAL_UART_RxCpltCallback+0x90>)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	440b      	add	r3, r1
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	429a      	cmp	r2, r3
 8007816:	d001      	beq.n	800781c <HAL_UART_RxCpltCallback+0x4c>
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	3301      	adds	r3, #1
 8007820:	60bb      	str	r3, [r7, #8]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b03      	cmp	r3, #3
 8007826:	ddef      	ble.n	8007808 <HAL_UART_RxCpltCallback+0x38>
			uart_counter = 0;
 8007828:	4b0b      	ldr	r3, [pc, #44]	; (8007858 <HAL_UART_RxCpltCallback+0x88>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
			if (succesful) {
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d006      	beq.n	8007842 <HAL_UART_RxCpltCallback+0x72>
				new_command = true;
 8007834:	4b0b      	ldr	r3, [pc, #44]	; (8007864 <HAL_UART_RxCpltCallback+0x94>)
 8007836:	2201      	movs	r2, #1
 8007838:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 800783a:	4b08      	ldr	r3, [pc, #32]	; (800785c <HAL_UART_RxCpltCallback+0x8c>)
 800783c:	781a      	ldrb	r2, [r3, #0]
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <HAL_UART_RxCpltCallback+0x98>)
 8007840:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 8007842:	2201      	movs	r2, #1
 8007844:	4905      	ldr	r1, [pc, #20]	; (800785c <HAL_UART_RxCpltCallback+0x8c>)
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f006 fb4a 	bl	800dee0 <HAL_UART_Receive_IT>
	}
}
 800784c:	bf00      	nop
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	2000964c 	.word	0x2000964c
 8007858:	20000330 	.word	0x20000330
 800785c:	2001c61d 	.word	0x2001c61d
 8007860:	20000334 	.word	0x20000334
 8007864:	2000032c 	.word	0x2000032c
 8007868:	2001c61c 	.word	0x2001c61c

0800786c <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	uint8_t cs=0;
 8007874:	2300      	movs	r3, #0
 8007876:	75fb      	strb	r3, [r7, #23]
	uint8_t *data;
	data = (uint8_t*) cnf;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	613b      	str	r3, [r7, #16]
	for(int i=0; i< sizeof(telemetry_t);i++){
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e009      	b.n	8007896 <calculate_checksum+0x2a>
		cs+=*data++;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	613a      	str	r2, [r7, #16]
 8007888:	781a      	ldrb	r2, [r3, #0]
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	4413      	add	r3, r2
 800788e:	75fb      	strb	r3, [r7, #23]
	for(int i=0; i< sizeof(telemetry_t);i++){
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b5b      	cmp	r3, #91	; 0x5b
 800789a:	d9f2      	bls.n	8007882 <calculate_checksum+0x16>
	}
	return (255 - cs);
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	43db      	mvns	r3, r3
 80078a0:	b2db      	uxtb	r3, r3
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
	...

080078b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80078b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80078b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80078b6:	e003      	b.n	80078c0 <LoopCopyDataInit>

080078b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80078ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80078bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80078be:	3104      	adds	r1, #4

080078c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80078c0:	480b      	ldr	r0, [pc, #44]	; (80078f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80078c2:	4b0c      	ldr	r3, [pc, #48]	; (80078f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80078c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80078c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80078c8:	d3f6      	bcc.n	80078b8 <CopyDataInit>
  ldr  r2, =_sbss
 80078ca:	4a0b      	ldr	r2, [pc, #44]	; (80078f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80078cc:	e002      	b.n	80078d4 <LoopFillZerobss>

080078ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80078ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80078d0:	f842 3b04 	str.w	r3, [r2], #4

080078d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80078d4:	4b09      	ldr	r3, [pc, #36]	; (80078fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80078d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80078d8:	d3f9      	bcc.n	80078ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80078da:	f7fe f9b9 	bl	8005c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078de:	f012 ffcd 	bl	801a87c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078e2:	f7fc fd35 	bl	8004350 <main>
  bx  lr    
 80078e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80078e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80078ec:	0801dc30 	.word	0x0801dc30
  ldr  r0, =_sdata
 80078f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80078f4:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80078f8:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80078fc:	2001e3b0 	.word	0x2001e3b0

08007900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007900:	e7fe      	b.n	8007900 <ADC_IRQHandler>

08007902 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007906:	2003      	movs	r0, #3
 8007908:	f000 fd57 	bl	80083ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800790c:	2000      	movs	r0, #0
 800790e:	f7fe f857 	bl	80059c0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007912:	f7fd fb47 	bl	8004fa4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007920:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_IncTick+0x20>)
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <HAL_IncTick+0x24>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4413      	add	r3, r2
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <HAL_IncTick+0x24>)
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20000008 	.word	0x20000008
 8007940:	2001c628 	.word	0x2001c628

08007944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return uwTick;
 8007948:	4b03      	ldr	r3, [pc, #12]	; (8007958 <HAL_GetTick+0x14>)
 800794a:	681b      	ldr	r3, [r3, #0]
}
 800794c:	4618      	mov	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	2001c628 	.word	0x2001c628

0800795c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007964:	f7ff ffee 	bl	8007944 <HAL_GetTick>
 8007968:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007974:	d005      	beq.n	8007982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <HAL_Delay+0x40>)
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007982:	bf00      	nop
 8007984:	f7ff ffde 	bl	8007944 <HAL_GetTick>
 8007988:	4602      	mov	r2, r0
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	1ad3      	subs	r3, r2, r3
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	429a      	cmp	r2, r3
 8007992:	d8f7      	bhi.n	8007984 <HAL_Delay+0x28>
  {
  }
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000008 	.word	0x20000008

080079a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e031      	b.n	8007a1a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d109      	bne.n	80079d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fd fb18 	bl	8004ff4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d116      	bne.n	8007a0c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e2:	4b10      	ldr	r3, [pc, #64]	; (8007a24 <HAL_ADC_Init+0x84>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	f043 0202 	orr.w	r2, r3, #2
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 faba 	bl	8007f68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fe:	f023 0303 	bic.w	r3, r3, #3
 8007a02:	f043 0201 	orr.w	r2, r3, #1
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	641a      	str	r2, [r3, #64]	; 0x40
 8007a0a:	e001      	b.n	8007a10 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	ffffeefd 	.word	0xffffeefd

08007a28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8007a34:	2300      	movs	r3, #0
 8007a36:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3e:	2b01      	cmp	r3, #1
 8007a40:	d101      	bne.n	8007a46 <HAL_ADC_Start_DMA+0x1e>
 8007a42:	2302      	movs	r3, #2
 8007a44:	e0c7      	b.n	8007bd6 <HAL_ADC_Start_DMA+0x1ae>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d018      	beq.n	8007a8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007a6c:	4b5c      	ldr	r3, [pc, #368]	; (8007be0 <HAL_ADC_Start_DMA+0x1b8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a5c      	ldr	r2, [pc, #368]	; (8007be4 <HAL_ADC_Start_DMA+0x1bc>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	0c9a      	lsrs	r2, r3, #18
 8007a78:	4613      	mov	r3, r2
 8007a7a:	005b      	lsls	r3, r3, #1
 8007a7c:	4413      	add	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007a80:	e002      	b.n	8007a88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f9      	bne.n	8007a82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f040 809b 	bne.w	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007aa2:	4b51      	ldr	r3, [pc, #324]	; (8007be8 <HAL_ADC_Start_DMA+0x1c0>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ac4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad8:	d106      	bne.n	8007ae8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ade:	f023 0206 	bic.w	r2, r3, #6
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	645a      	str	r2, [r3, #68]	; 0x44
 8007ae6:	e002      	b.n	8007aee <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	4a3c      	ldr	r2, [pc, #240]	; (8007bec <HAL_ADC_Start_DMA+0x1c4>)
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b02:	4a3b      	ldr	r2, [pc, #236]	; (8007bf0 <HAL_ADC_Start_DMA+0x1c8>)
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <HAL_ADC_Start_DMA+0x1cc>)
 8007b0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	334c      	adds	r3, #76	; 0x4c
 8007b42:	4619      	mov	r1, r3
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f000 fd1a 	bl	8008580 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007b4c:	4b2a      	ldr	r3, [pc, #168]	; (8007bf8 <HAL_ADC_Start_DMA+0x1d0>)
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f003 031f 	and.w	r3, r3, #31
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10f      	bne.n	8007b78 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d136      	bne.n	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007b74:	609a      	str	r2, [r3, #8]
 8007b76:	e02d      	b.n	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1f      	ldr	r2, [pc, #124]	; (8007bfc <HAL_ADC_Start_DMA+0x1d4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d10e      	bne.n	8007ba0 <HAL_ADC_Start_DMA+0x178>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d107      	bne.n	8007ba0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007b9e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007ba0:	4b15      	ldr	r3, [pc, #84]	; (8007bf8 <HAL_ADC_Start_DMA+0x1d0>)
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	f003 0310 	and.w	r3, r3, #16
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d113      	bne.n	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a13      	ldr	r2, [pc, #76]	; (8007c00 <HAL_ADC_Start_DMA+0x1d8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d107      	bne.n	8007bd4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007bd2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	20000000 	.word	0x20000000
 8007be4:	431bde83 	.word	0x431bde83
 8007be8:	fffff8fe 	.word	0xfffff8fe
 8007bec:	0800815d 	.word	0x0800815d
 8007bf0:	08008217 	.word	0x08008217
 8007bf4:	08008233 	.word	0x08008233
 8007bf8:	40012300 	.word	0x40012300
 8007bfc:	40012000 	.word	0x40012000
 8007c00:	40012200 	.word	0x40012200

08007c04 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d101      	bne.n	8007c1e <HAL_ADC_Stop_DMA+0x1a>
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e036      	b.n	8007c8c <HAL_ADC_Stop_DMA+0x88>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d11e      	bne.n	8007c82 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c52:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fcf1 	bl	8008640 <HAL_DMA_Abort>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007c70:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c76:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <HAL_ADC_Stop_DMA+0x90>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	f043 0201 	orr.w	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	ffffeefe 	.word	0xffffeefe

08007c98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_ADC_ConfigChannel+0x1c>
 8007cec:	2302      	movs	r3, #2
 8007cee:	e12a      	b.n	8007f46 <HAL_ADC_ConfigChannel+0x272>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b09      	cmp	r3, #9
 8007cfe:	d93a      	bls.n	8007d76 <HAL_ADC_ConfigChannel+0xa2>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d08:	d035      	beq.n	8007d76 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68d9      	ldr	r1, [r3, #12]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	461a      	mov	r2, r3
 8007d18:	4613      	mov	r3, r2
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	3b1e      	subs	r3, #30
 8007d20:	2207      	movs	r2, #7
 8007d22:	fa02 f303 	lsl.w	r3, r2, r3
 8007d26:	43da      	mvns	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	400a      	ands	r2, r1
 8007d2e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a87      	ldr	r2, [pc, #540]	; (8007f54 <HAL_ADC_ConfigChannel+0x280>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d10a      	bne.n	8007d50 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68d9      	ldr	r1, [r3, #12]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	061a      	lsls	r2, r3, #24
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d4e:	e035      	b.n	8007dbc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68d9      	ldr	r1, [r3, #12]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4618      	mov	r0, r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	4403      	add	r3, r0
 8007d68:	3b1e      	subs	r3, #30
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d74:	e022      	b.n	8007dbc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6919      	ldr	r1, [r3, #16]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	461a      	mov	r2, r3
 8007d84:	4613      	mov	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	4413      	add	r3, r2
 8007d8a:	2207      	movs	r2, #7
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43da      	mvns	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	400a      	ands	r2, r1
 8007d98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6919      	ldr	r1, [r3, #16]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	4618      	mov	r0, r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4403      	add	r3, r0
 8007db2:	409a      	lsls	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2b06      	cmp	r3, #6
 8007dc2:	d824      	bhi.n	8007e0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3b05      	subs	r3, #5
 8007dd6:	221f      	movs	r2, #31
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	43da      	mvns	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	400a      	ands	r2, r1
 8007de4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	4618      	mov	r0, r3
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	3b05      	subs	r3, #5
 8007e00:	fa00 f203 	lsl.w	r2, r0, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8007e0c:	e04c      	b.n	8007ea8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2b0c      	cmp	r3, #12
 8007e14:	d824      	bhi.n	8007e60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	3b23      	subs	r3, #35	; 0x23
 8007e28:	221f      	movs	r2, #31
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	43da      	mvns	r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	400a      	ands	r2, r1
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	4618      	mov	r0, r3
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4413      	add	r3, r2
 8007e50:	3b23      	subs	r3, #35	; 0x23
 8007e52:	fa00 f203 	lsl.w	r2, r0, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	430a      	orrs	r2, r1
 8007e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007e5e:	e023      	b.n	8007ea8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	3b41      	subs	r3, #65	; 0x41
 8007e72:	221f      	movs	r2, #31
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	43da      	mvns	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	400a      	ands	r2, r1
 8007e80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	3b41      	subs	r3, #65	; 0x41
 8007e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a2a      	ldr	r2, [pc, #168]	; (8007f58 <HAL_ADC_ConfigChannel+0x284>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d10a      	bne.n	8007ec8 <HAL_ADC_ConfigChannel+0x1f4>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007eba:	d105      	bne.n	8007ec8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007ebc:	4b27      	ldr	r3, [pc, #156]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	4a26      	ldr	r2, [pc, #152]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007ec2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007ec6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a22      	ldr	r2, [pc, #136]	; (8007f58 <HAL_ADC_ConfigChannel+0x284>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d109      	bne.n	8007ee6 <HAL_ADC_ConfigChannel+0x212>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b12      	cmp	r3, #18
 8007ed8:	d105      	bne.n	8007ee6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007eda:	4b20      	ldr	r3, [pc, #128]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4a1f      	ldr	r2, [pc, #124]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ee4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <HAL_ADC_ConfigChannel+0x284>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d125      	bne.n	8007f3c <HAL_ADC_ConfigChannel+0x268>
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a17      	ldr	r2, [pc, #92]	; (8007f54 <HAL_ADC_ConfigChannel+0x280>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <HAL_ADC_ConfigChannel+0x22e>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b11      	cmp	r3, #17
 8007f00:	d11c      	bne.n	8007f3c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007f02:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <HAL_ADC_ConfigChannel+0x288>)
 8007f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f0c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a10      	ldr	r2, [pc, #64]	; (8007f54 <HAL_ADC_ConfigChannel+0x280>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d111      	bne.n	8007f3c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007f18:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <HAL_ADC_ConfigChannel+0x28c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a11      	ldr	r2, [pc, #68]	; (8007f64 <HAL_ADC_ConfigChannel+0x290>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	0c9a      	lsrs	r2, r3, #18
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007f2e:	e002      	b.n	8007f36 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1f9      	bne.n	8007f30 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	10000012 	.word	0x10000012
 8007f58:	40012000 	.word	0x40012000
 8007f5c:	40012300 	.word	0x40012300
 8007f60:	20000000 	.word	0x20000000
 8007f64:	431bde83 	.word	0x431bde83

08007f68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007f70:	4b78      	ldr	r3, [pc, #480]	; (8008154 <ADC_Init+0x1ec>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	4a77      	ldr	r2, [pc, #476]	; (8008154 <ADC_Init+0x1ec>)
 8007f76:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007f7a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007f7c:	4b75      	ldr	r3, [pc, #468]	; (8008154 <ADC_Init+0x1ec>)
 8007f7e:	685a      	ldr	r2, [r3, #4]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	4973      	ldr	r1, [pc, #460]	; (8008154 <ADC_Init+0x1ec>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6859      	ldr	r1, [r3, #4]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	691b      	ldr	r3, [r3, #16]
 8007fa4:	021a      	lsls	r2, r3, #8
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6859      	ldr	r1, [r3, #4]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6899      	ldr	r1, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	4a58      	ldr	r2, [pc, #352]	; (8008158 <ADC_Init+0x1f0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800800a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6899      	ldr	r1, [r3, #8]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	689a      	ldr	r2, [r3, #8]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800802c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6899      	ldr	r1, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	609a      	str	r2, [r3, #8]
 8008040:	e00f      	b.n	8008062 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0202 	bic.w	r2, r2, #2
 8008070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6899      	ldr	r1, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699b      	ldr	r3, [r3, #24]
 800807c:	005a      	lsls	r2, r3, #1
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	430a      	orrs	r2, r1
 8008084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d01b      	beq.n	80080c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800809e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80080ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6859      	ldr	r1, [r3, #4]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	3b01      	subs	r3, #1
 80080bc:	035a      	lsls	r2, r3, #13
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	605a      	str	r2, [r3, #4]
 80080c6:	e007      	b.n	80080d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	685a      	ldr	r2, [r3, #4]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80080e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	051a      	lsls	r2, r3, #20
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	430a      	orrs	r2, r1
 80080fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800810c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800811a:	025a      	lsls	r2, r3, #9
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	430a      	orrs	r2, r1
 8008122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6899      	ldr	r1, [r3, #8]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	029a      	lsls	r2, r3, #10
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	430a      	orrs	r2, r1
 8008146:	609a      	str	r2, [r3, #8]
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40012300 	.word	0x40012300
 8008158:	0f000001 	.word	0x0f000001

0800815c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008172:	2b00      	cmp	r3, #0
 8008174:	d13c      	bne.n	80081f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d12b      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008194:	2b00      	cmp	r3, #0
 8008196:	d127      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d006      	beq.n	80081b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d119      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f022 0220 	bic.w	r2, r2, #32
 80081c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	f043 0201 	orr.w	r2, r3, #1
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff fd55 	bl	8007c98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80081ee:	e00e      	b.n	800820e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f003 0310 	and.w	r3, r3, #16
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fd5f 	bl	8007cc0 <HAL_ADC_ErrorCallback>
}
 8008202:	e004      	b.n	800820e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
}
 800820e:	bf00      	nop
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008222:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fd41 	bl	8007cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2240      	movs	r2, #64	; 0x40
 8008244:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800824a:	f043 0204 	orr.w	r2, r3, #4
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff fd34 	bl	8007cc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008258:	bf00      	nop
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <__NVIC_SetPriorityGrouping+0x40>)
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800827c:	4013      	ands	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008288:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <__NVIC_SetPriorityGrouping+0x44>)
 800828a:	4313      	orrs	r3, r2
 800828c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800828e:	4a04      	ldr	r2, [pc, #16]	; (80082a0 <__NVIC_SetPriorityGrouping+0x40>)
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	60d3      	str	r3, [r2, #12]
}
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	e000ed00 	.word	0xe000ed00
 80082a4:	05fa0000 	.word	0x05fa0000

080082a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082ac:	4b04      	ldr	r3, [pc, #16]	; (80082c0 <__NVIC_GetPriorityGrouping+0x18>)
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	0a1b      	lsrs	r3, r3, #8
 80082b2:	f003 0307 	and.w	r3, r3, #7
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr
 80082c0:	e000ed00 	.word	0xe000ed00

080082c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	db0b      	blt.n	80082ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	f003 021f 	and.w	r2, r3, #31
 80082dc:	4907      	ldr	r1, [pc, #28]	; (80082fc <__NVIC_EnableIRQ+0x38>)
 80082de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e2:	095b      	lsrs	r3, r3, #5
 80082e4:	2001      	movs	r0, #1
 80082e6:	fa00 f202 	lsl.w	r2, r0, r2
 80082ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80082ee:	bf00      	nop
 80082f0:	370c      	adds	r7, #12
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	e000e100 	.word	0xe000e100

08008300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800830c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	db0a      	blt.n	800832a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	b2da      	uxtb	r2, r3
 8008318:	490c      	ldr	r1, [pc, #48]	; (800834c <__NVIC_SetPriority+0x4c>)
 800831a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800831e:	0112      	lsls	r2, r2, #4
 8008320:	b2d2      	uxtb	r2, r2
 8008322:	440b      	add	r3, r1
 8008324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008328:	e00a      	b.n	8008340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4908      	ldr	r1, [pc, #32]	; (8008350 <__NVIC_SetPriority+0x50>)
 8008330:	79fb      	ldrb	r3, [r7, #7]
 8008332:	f003 030f 	and.w	r3, r3, #15
 8008336:	3b04      	subs	r3, #4
 8008338:	0112      	lsls	r2, r2, #4
 800833a:	b2d2      	uxtb	r2, r2
 800833c:	440b      	add	r3, r1
 800833e:	761a      	strb	r2, [r3, #24]
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	e000e100 	.word	0xe000e100
 8008350:	e000ed00 	.word	0xe000ed00

08008354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008354:	b480      	push	{r7}
 8008356:	b089      	sub	sp, #36	; 0x24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f003 0307 	and.w	r3, r3, #7
 8008366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	f1c3 0307 	rsb	r3, r3, #7
 800836e:	2b04      	cmp	r3, #4
 8008370:	bf28      	it	cs
 8008372:	2304      	movcs	r3, #4
 8008374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	3304      	adds	r3, #4
 800837a:	2b06      	cmp	r3, #6
 800837c:	d902      	bls.n	8008384 <NVIC_EncodePriority+0x30>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	3b03      	subs	r3, #3
 8008382:	e000      	b.n	8008386 <NVIC_EncodePriority+0x32>
 8008384:	2300      	movs	r3, #0
 8008386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008388:	f04f 32ff 	mov.w	r2, #4294967295
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	fa02 f303 	lsl.w	r3, r2, r3
 8008392:	43da      	mvns	r2, r3
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	401a      	ands	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800839c:	f04f 31ff 	mov.w	r1, #4294967295
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	fa01 f303 	lsl.w	r3, r1, r3
 80083a6:	43d9      	mvns	r1, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083ac:	4313      	orrs	r3, r2
         );
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3724      	adds	r7, #36	; 0x24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b082      	sub	sp, #8
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f7ff ff4c 	bl	8008260 <__NVIC_SetPriorityGrouping>
}
 80083c8:	bf00      	nop
 80083ca:	3708      	adds	r7, #8
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80083de:	2300      	movs	r3, #0
 80083e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083e2:	f7ff ff61 	bl	80082a8 <__NVIC_GetPriorityGrouping>
 80083e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	6978      	ldr	r0, [r7, #20]
 80083ee:	f7ff ffb1 	bl	8008354 <NVIC_EncodePriority>
 80083f2:	4602      	mov	r2, r0
 80083f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083f8:	4611      	mov	r1, r2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff ff80 	bl	8008300 <__NVIC_SetPriority>
}
 8008400:	bf00      	nop
 8008402:	3718      	adds	r7, #24
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008416:	4618      	mov	r0, r3
 8008418:	f7ff ff54 	bl	80082c4 <__NVIC_EnableIRQ>
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008430:	f7ff fa88 	bl	8007944 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e099      	b.n	8008574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0201 	bic.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008460:	e00f      	b.n	8008482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008462:	f7ff fa6f 	bl	8007944 <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b05      	cmp	r3, #5
 800846e:	d908      	bls.n	8008482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e078      	b.n	8008574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e8      	bne.n	8008462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4b38      	ldr	r3, [pc, #224]	; (800857c <HAL_DMA_Init+0x158>)
 800849c:	4013      	ands	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d107      	bne.n	80084ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	4313      	orrs	r3, r2
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b04      	cmp	r3, #4
 8008514:	d117      	bne.n	8008546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00e      	beq.n	8008546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fb15 	bl	8008b58 <DMA_CheckFifoParam>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d008      	beq.n	8008546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008542:	2301      	movs	r3, #1
 8008544:	e016      	b.n	8008574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 facc 	bl	8008aec <DMA_CalcBaseAndBitshift>
 8008554:	4603      	mov	r3, r0
 8008556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855c:	223f      	movs	r2, #63	; 0x3f
 800855e:	409a      	lsls	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	f010803f 	.word	0xf010803f

08008580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_DMA_Start_IT+0x26>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e048      	b.n	8008638 <HAL_DMA_Start_IT+0xb8>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d137      	bne.n	800862a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fa5e 	bl	8008a90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d8:	223f      	movs	r2, #63	; 0x3f
 80085da:	409a      	lsls	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0216 	orr.w	r2, r2, #22
 80085ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085fe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	2b00      	cmp	r3, #0
 8008606:	d007      	beq.n	8008618 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0208 	orr.w	r2, r2, #8
 8008616:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	e005      	b.n	8008636 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008632:	2302      	movs	r3, #2
 8008634:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008636:	7dfb      	ldrb	r3, [r7, #23]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800864e:	f7ff f979 	bl	8007944 <HAL_GetTick>
 8008652:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b02      	cmp	r3, #2
 800865e:	d008      	beq.n	8008672 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2280      	movs	r2, #128	; 0x80
 8008664:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e052      	b.n	8008718 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0216 	bic.w	r2, r2, #22
 8008680:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	695a      	ldr	r2, [r3, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008690:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d103      	bne.n	80086a2 <HAL_DMA_Abort+0x62>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0208 	bic.w	r2, r2, #8
 80086b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086c2:	e013      	b.n	80086ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80086c4:	f7ff f93e 	bl	8007944 <HAL_GetTick>
 80086c8:	4602      	mov	r2, r0
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	1ad3      	subs	r3, r2, r3
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d90c      	bls.n	80086ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2203      	movs	r2, #3
 80086e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e015      	b.n	8008718 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e4      	bne.n	80086c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	223f      	movs	r2, #63	; 0x3f
 8008700:	409a      	lsls	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d004      	beq.n	800873e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2280      	movs	r2, #128	; 0x80
 8008738:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e00c      	b.n	8008758 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2205      	movs	r2, #5
 8008742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008770:	4b92      	ldr	r3, [pc, #584]	; (80089bc <HAL_DMA_IRQHandler+0x258>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a92      	ldr	r2, [pc, #584]	; (80089c0 <HAL_DMA_IRQHandler+0x25c>)
 8008776:	fba2 2303 	umull	r2, r3, r2, r3
 800877a:	0a9b      	lsrs	r3, r3, #10
 800877c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008782:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878e:	2208      	movs	r2, #8
 8008790:	409a      	lsls	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	4013      	ands	r3, r2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d01a      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d013      	beq.n	80087d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0204 	bic.w	r2, r2, #4
 80087b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087bc:	2208      	movs	r2, #8
 80087be:	409a      	lsls	r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	f043 0201 	orr.w	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d4:	2201      	movs	r2, #1
 80087d6:	409a      	lsls	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d012      	beq.n	8008806 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	695b      	ldr	r3, [r3, #20]
 80087e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f2:	2201      	movs	r2, #1
 80087f4:	409a      	lsls	r2, r3
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f043 0202 	orr.w	r2, r3, #2
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880a:	2204      	movs	r2, #4
 800880c:	409a      	lsls	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d012      	beq.n	800883c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0302 	and.w	r3, r3, #2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d00b      	beq.n	800883c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008828:	2204      	movs	r2, #4
 800882a:	409a      	lsls	r2, r3
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	f043 0204 	orr.w	r2, r3, #4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008840:	2210      	movs	r2, #16
 8008842:	409a      	lsls	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4013      	ands	r3, r2
 8008848:	2b00      	cmp	r3, #0
 800884a:	d043      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d03c      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885e:	2210      	movs	r2, #16
 8008860:	409a      	lsls	r2, r3
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d018      	beq.n	80088a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	d024      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	e01f      	b.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01b      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4798      	blx	r3
 80088a4:	e016      	b.n	80088d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d107      	bne.n	80088c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0208 	bic.w	r2, r2, #8
 80088c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d003      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d8:	2220      	movs	r2, #32
 80088da:	409a      	lsls	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 808e 	beq.w	8008a02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8086 	beq.w	8008a02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088fa:	2220      	movs	r2, #32
 80088fc:	409a      	lsls	r2, r3
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b05      	cmp	r3, #5
 800890c:	d136      	bne.n	800897c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f022 0216 	bic.w	r2, r2, #22
 800891c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800892c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <HAL_DMA_IRQHandler+0x1da>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0208 	bic.w	r2, r2, #8
 800894c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008952:	223f      	movs	r2, #63	; 0x3f
 8008954:	409a      	lsls	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2201      	movs	r2, #1
 8008966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800896e:	2b00      	cmp	r3, #0
 8008970:	d07d      	beq.n	8008a6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	4798      	blx	r3
        }
        return;
 800897a:	e078      	b.n	8008a6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01c      	beq.n	80089c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d108      	bne.n	80089aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899c:	2b00      	cmp	r3, #0
 800899e:	d030      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
 80089a8:	e02b      	b.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d027      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	e022      	b.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
 80089bc:	20000000 	.word	0x20000000
 80089c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10f      	bne.n	80089f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f022 0210 	bic.w	r2, r2, #16
 80089e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d032      	beq.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d022      	beq.n	8008a5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2205      	movs	r2, #5
 8008a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0201 	bic.w	r2, r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d307      	bcc.n	8008a4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1f2      	bne.n	8008a2e <HAL_DMA_IRQHandler+0x2ca>
 8008a48:	e000      	b.n	8008a4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008a4a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	4798      	blx	r3
 8008a6c:	e000      	b.n	8008a70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008a6e:	bf00      	nop
    }
  }
}
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop

08008a78 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	370c      	adds	r7, #12
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8e:	4770      	bx	lr

08008a90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	2b40      	cmp	r3, #64	; 0x40
 8008abc:	d108      	bne.n	8008ad0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008ace:	e007      	b.n	8008ae0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	60da      	str	r2, [r3, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	3b10      	subs	r3, #16
 8008afc:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <DMA_CalcBaseAndBitshift+0x60>)
 8008afe:	fba2 2303 	umull	r2, r3, r2, r3
 8008b02:	091b      	lsrs	r3, r3, #4
 8008b04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b06:	4a12      	ldr	r2, [pc, #72]	; (8008b50 <DMA_CalcBaseAndBitshift+0x64>)
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d908      	bls.n	8008b2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <DMA_CalcBaseAndBitshift+0x68>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	1d1a      	adds	r2, r3, #4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	659a      	str	r2, [r3, #88]	; 0x58
 8008b2a:	e006      	b.n	8008b3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b08      	ldr	r3, [pc, #32]	; (8008b54 <DMA_CalcBaseAndBitshift+0x68>)
 8008b34:	4013      	ands	r3, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	aaaaaaab 	.word	0xaaaaaaab
 8008b50:	0801da7c 	.word	0x0801da7c
 8008b54:	fffffc00 	.word	0xfffffc00

08008b58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d11f      	bne.n	8008bb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	2b03      	cmp	r3, #3
 8008b76:	d855      	bhi.n	8008c24 <DMA_CheckFifoParam+0xcc>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <DMA_CheckFifoParam+0x28>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008ba3 	.word	0x08008ba3
 8008b88:	08008b91 	.word	0x08008b91
 8008b8c:	08008c25 	.word	0x08008c25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d045      	beq.n	8008c28 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ba0:	e042      	b.n	8008c28 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008baa:	d13f      	bne.n	8008c2c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bb0:	e03c      	b.n	8008c2c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bba:	d121      	bne.n	8008c00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d836      	bhi.n	8008c30 <DMA_CheckFifoParam+0xd8>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <DMA_CheckFifoParam+0x70>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bdf 	.word	0x08008bdf
 8008bd0:	08008bd9 	.word	0x08008bd9
 8008bd4:	08008bf1 	.word	0x08008bf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	73fb      	strb	r3, [r7, #15]
      break;
 8008bdc:	e02f      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d024      	beq.n	8008c34 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bee:	e021      	b.n	8008c34 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bf8:	d11e      	bne.n	8008c38 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008bfe:	e01b      	b.n	8008c38 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d902      	bls.n	8008c0c <DMA_CheckFifoParam+0xb4>
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d003      	beq.n	8008c12 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c0a:	e018      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c10:	e015      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	73fb      	strb	r3, [r7, #15]
      break;
 8008c22:	e00b      	b.n	8008c3c <DMA_CheckFifoParam+0xe4>
      break;
 8008c24:	bf00      	nop
 8008c26:	e00a      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e008      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e006      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c30:	bf00      	nop
 8008c32:	e004      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c34:	bf00      	nop
 8008c36:	e002      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;   
 8008c38:	bf00      	nop
 8008c3a:	e000      	b.n	8008c3e <DMA_CheckFifoParam+0xe6>
      break;
 8008c3c:	bf00      	nop
    }
  } 
  
  return status; 
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b089      	sub	sp, #36	; 0x24
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008c56:	2300      	movs	r3, #0
 8008c58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e175      	b.n	8008f58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f040 8164 	bne.w	8008f52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d00b      	beq.n	8008caa <HAL_GPIO_Init+0x5e>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d007      	beq.n	8008caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c9e:	2b11      	cmp	r3, #17
 8008ca0:	d003      	beq.n	8008caa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	2b12      	cmp	r3, #18
 8008ca8:	d130      	bne.n	8008d0c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	2203      	movs	r2, #3
 8008cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	69fb      	ldr	r3, [r7, #28]
 8008cc8:	005b      	lsls	r3, r3, #1
 8008cca:	fa02 f303 	lsl.w	r3, r2, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4013      	ands	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	091b      	lsrs	r3, r3, #4
 8008cf6:	f003 0201 	and.w	r2, r3, #1
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	2203      	movs	r2, #3
 8008d18:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1c:	43db      	mvns	r3, r3
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	4013      	ands	r3, r2
 8008d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	005b      	lsls	r3, r3, #1
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d003      	beq.n	8008d4c <HAL_GPIO_Init+0x100>
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	2b12      	cmp	r3, #18
 8008d4a:	d123      	bne.n	8008d94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	08da      	lsrs	r2, r3, #3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3208      	adds	r2, #8
 8008d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	220f      	movs	r2, #15
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	08da      	lsrs	r2, r3, #3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3208      	adds	r2, #8
 8008d8e:	69b9      	ldr	r1, [r7, #24]
 8008d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	2203      	movs	r2, #3
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	43db      	mvns	r3, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4013      	ands	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 0203 	and.w	r2, r3, #3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80be 	beq.w	8008f52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	4b65      	ldr	r3, [pc, #404]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dda:	4a64      	ldr	r2, [pc, #400]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de0:	6453      	str	r3, [r2, #68]	; 0x44
 8008de2:	4b62      	ldr	r3, [pc, #392]	; (8008f6c <HAL_GPIO_Init+0x320>)
 8008de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008dee:	4a60      	ldr	r2, [pc, #384]	; (8008f70 <HAL_GPIO_Init+0x324>)
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	089b      	lsrs	r3, r3, #2
 8008df4:	3302      	adds	r3, #2
 8008df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	220f      	movs	r2, #15
 8008e06:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0a:	43db      	mvns	r3, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a57      	ldr	r2, [pc, #348]	; (8008f74 <HAL_GPIO_Init+0x328>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d037      	beq.n	8008e8a <HAL_GPIO_Init+0x23e>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a56      	ldr	r2, [pc, #344]	; (8008f78 <HAL_GPIO_Init+0x32c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d031      	beq.n	8008e86 <HAL_GPIO_Init+0x23a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a55      	ldr	r2, [pc, #340]	; (8008f7c <HAL_GPIO_Init+0x330>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d02b      	beq.n	8008e82 <HAL_GPIO_Init+0x236>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a54      	ldr	r2, [pc, #336]	; (8008f80 <HAL_GPIO_Init+0x334>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d025      	beq.n	8008e7e <HAL_GPIO_Init+0x232>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a53      	ldr	r2, [pc, #332]	; (8008f84 <HAL_GPIO_Init+0x338>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01f      	beq.n	8008e7a <HAL_GPIO_Init+0x22e>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a52      	ldr	r2, [pc, #328]	; (8008f88 <HAL_GPIO_Init+0x33c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d019      	beq.n	8008e76 <HAL_GPIO_Init+0x22a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a51      	ldr	r2, [pc, #324]	; (8008f8c <HAL_GPIO_Init+0x340>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d013      	beq.n	8008e72 <HAL_GPIO_Init+0x226>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a50      	ldr	r2, [pc, #320]	; (8008f90 <HAL_GPIO_Init+0x344>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d00d      	beq.n	8008e6e <HAL_GPIO_Init+0x222>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a4f      	ldr	r2, [pc, #316]	; (8008f94 <HAL_GPIO_Init+0x348>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d007      	beq.n	8008e6a <HAL_GPIO_Init+0x21e>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a4e      	ldr	r2, [pc, #312]	; (8008f98 <HAL_GPIO_Init+0x34c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d101      	bne.n	8008e66 <HAL_GPIO_Init+0x21a>
 8008e62:	2309      	movs	r3, #9
 8008e64:	e012      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e66:	230a      	movs	r3, #10
 8008e68:	e010      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e6a:	2308      	movs	r3, #8
 8008e6c:	e00e      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e6e:	2307      	movs	r3, #7
 8008e70:	e00c      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e72:	2306      	movs	r3, #6
 8008e74:	e00a      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e76:	2305      	movs	r3, #5
 8008e78:	e008      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e7a:	2304      	movs	r3, #4
 8008e7c:	e006      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e004      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e002      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <HAL_GPIO_Init+0x240>
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	69fa      	ldr	r2, [r7, #28]
 8008e8e:	f002 0203 	and.w	r2, r2, #3
 8008e92:	0092      	lsls	r2, r2, #2
 8008e94:	4093      	lsls	r3, r2
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008e9c:	4934      	ldr	r1, [pc, #208]	; (8008f70 <HAL_GPIO_Init+0x324>)
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	089b      	lsrs	r3, r3, #2
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	69ba      	ldr	r2, [r7, #24]
 8008ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008eaa:	4b3c      	ldr	r3, [pc, #240]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	43db      	mvns	r3, r3
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	4013      	ands	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008ec6:	69ba      	ldr	r2, [r7, #24]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ece:	4a33      	ldr	r2, [pc, #204]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ed4:	4b31      	ldr	r3, [pc, #196]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	43db      	mvns	r3, r3
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d003      	beq.n	8008ef8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ef8:	4a28      	ldr	r2, [pc, #160]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008efe:	4b27      	ldr	r3, [pc, #156]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	43db      	mvns	r3, r3
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	4013      	ands	r3, r2
 8008f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d003      	beq.n	8008f22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f22:	4a1e      	ldr	r2, [pc, #120]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f28:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	43db      	mvns	r3, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4013      	ands	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d003      	beq.n	8008f4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f4c:	4a13      	ldr	r2, [pc, #76]	; (8008f9c <HAL_GPIO_Init+0x350>)
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	3301      	adds	r3, #1
 8008f56:	61fb      	str	r3, [r7, #28]
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	2b0f      	cmp	r3, #15
 8008f5c:	f67f ae86 	bls.w	8008c6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008f60:	bf00      	nop
 8008f62:	3724      	adds	r7, #36	; 0x24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	40023800 	.word	0x40023800
 8008f70:	40013800 	.word	0x40013800
 8008f74:	40020000 	.word	0x40020000
 8008f78:	40020400 	.word	0x40020400
 8008f7c:	40020800 	.word	0x40020800
 8008f80:	40020c00 	.word	0x40020c00
 8008f84:	40021000 	.word	0x40021000
 8008f88:	40021400 	.word	0x40021400
 8008f8c:	40021800 	.word	0x40021800
 8008f90:	40021c00 	.word	0x40021c00
 8008f94:	40022000 	.word	0x40022000
 8008f98:	40022400 	.word	0x40022400
 8008f9c:	40013c00 	.word	0x40013c00

08008fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691a      	ldr	r2, [r3, #16]
 8008fb0:	887b      	ldrh	r3, [r7, #2]
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d002      	beq.n	8008fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	e001      	b.n	8008fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	807b      	strh	r3, [r7, #2]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fe0:	787b      	ldrb	r3, [r7, #1]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fe6:	887a      	ldrh	r2, [r7, #2]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008fec:	e003      	b.n	8008ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	041a      	lsls	r2, r3, #16
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	619a      	str	r2, [r3, #24]
}
 8008ff6:	bf00      	nop
 8008ff8:	370c      	adds	r7, #12
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr

08009002 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009002:	b480      	push	{r7}
 8009004:	b083      	sub	sp, #12
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	887b      	ldrh	r3, [r7, #2]
 8009014:	4013      	ands	r3, r2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d004      	beq.n	8009024 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800901a:	887b      	ldrh	r3, [r7, #2]
 800901c:	041a      	lsls	r2, r3, #16
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009022:	e002      	b.n	800902a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009024:	887a      	ldrh	r2, [r7, #2]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	619a      	str	r2, [r3, #24]
}
 800902a:	bf00      	nop
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009036:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009038:	b08f      	sub	sp, #60	; 0x3c
 800903a:	af0a      	add	r7, sp, #40	; 0x28
 800903c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e116      	b.n	8009276 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009054:	b2db      	uxtb	r3, r3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f011 f8b2 	bl	801a1cc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2203      	movs	r2, #3
 800906c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f006 fe95 	bl	800fdb6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	603b      	str	r3, [r7, #0]
 8009092:	687e      	ldr	r6, [r7, #4]
 8009094:	466d      	mov	r5, sp
 8009096:	f106 0410 	add.w	r4, r6, #16
 800909a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800909c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800909e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80090a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80090a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80090a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80090aa:	1d33      	adds	r3, r6, #4
 80090ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090ae:	6838      	ldr	r0, [r7, #0]
 80090b0:	f006 fd76 	bl	800fba0 <USB_CoreInit>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d005      	beq.n	80090c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e0d7      	b.n	8009276 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2100      	movs	r1, #0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f006 fe83 	bl	800fdd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]
 80090d6:	e04a      	b.n	800916e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80090d8:	7bfa      	ldrb	r2, [r7, #15]
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4613      	mov	r3, r2
 80090de:	00db      	lsls	r3, r3, #3
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	333d      	adds	r3, #61	; 0x3d
 80090e8:	2201      	movs	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80090ec:	7bfa      	ldrb	r2, [r7, #15]
 80090ee:	6879      	ldr	r1, [r7, #4]
 80090f0:	4613      	mov	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	1a9b      	subs	r3, r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	333c      	adds	r3, #60	; 0x3c
 80090fc:	7bfa      	ldrb	r2, [r7, #15]
 80090fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009100:	7bfa      	ldrb	r2, [r7, #15]
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	b298      	uxth	r0, r3
 8009106:	6879      	ldr	r1, [r7, #4]
 8009108:	4613      	mov	r3, r2
 800910a:	00db      	lsls	r3, r3, #3
 800910c:	1a9b      	subs	r3, r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	3342      	adds	r3, #66	; 0x42
 8009114:	4602      	mov	r2, r0
 8009116:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009118:	7bfa      	ldrb	r2, [r7, #15]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	333f      	adds	r3, #63	; 0x3f
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800912c:	7bfa      	ldrb	r2, [r7, #15]
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	3344      	adds	r3, #68	; 0x44
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009140:	7bfa      	ldrb	r2, [r7, #15]
 8009142:	6879      	ldr	r1, [r7, #4]
 8009144:	4613      	mov	r3, r2
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	3348      	adds	r3, #72	; 0x48
 8009150:	2200      	movs	r2, #0
 8009152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009154:	7bfa      	ldrb	r2, [r7, #15]
 8009156:	6879      	ldr	r1, [r7, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	00db      	lsls	r3, r3, #3
 800915c:	1a9b      	subs	r3, r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	3350      	adds	r3, #80	; 0x50
 8009164:	2200      	movs	r2, #0
 8009166:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	3301      	adds	r3, #1
 800916c:	73fb      	strb	r3, [r7, #15]
 800916e:	7bfa      	ldrb	r2, [r7, #15]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d3af      	bcc.n	80090d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e044      	b.n	8009208 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	1a9b      	subs	r3, r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009190:	2200      	movs	r2, #0
 8009192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009194:	7bfa      	ldrb	r2, [r7, #15]
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	4613      	mov	r3, r2
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	1a9b      	subs	r3, r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80091a6:	7bfa      	ldrb	r2, [r7, #15]
 80091a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80091aa:	7bfa      	ldrb	r2, [r7, #15]
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	1a9b      	subs	r3, r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80091c0:	7bfa      	ldrb	r2, [r7, #15]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	1a9b      	subs	r3, r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80091d6:	7bfa      	ldrb	r2, [r7, #15]
 80091d8:	6879      	ldr	r1, [r7, #4]
 80091da:	4613      	mov	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	1a9b      	subs	r3, r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	440b      	add	r3, r1
 80091e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80091ec:	7bfa      	ldrb	r2, [r7, #15]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	3301      	adds	r3, #1
 8009206:	73fb      	strb	r3, [r7, #15]
 8009208:	7bfa      	ldrb	r2, [r7, #15]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d3b5      	bcc.n	800917e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	603b      	str	r3, [r7, #0]
 8009218:	687e      	ldr	r6, [r7, #4]
 800921a:	466d      	mov	r5, sp
 800921c:	f106 0410 	add.w	r4, r6, #16
 8009220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800922c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009230:	1d33      	adds	r3, r6, #4
 8009232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009234:	6838      	ldr	r0, [r7, #0]
 8009236:	f006 fdf9 	bl	800fe2c <USB_DevInit>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2202      	movs	r2, #2
 8009244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e014      	b.n	8009276 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	2b01      	cmp	r3, #1
 8009262:	d102      	bne.n	800926a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f001 f881 	bl	800a36c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f007 fe48 	bl	8010f04 <USB_DevDisconnect>

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800927e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800928c:	2b01      	cmp	r3, #1
 800928e:	d101      	bne.n	8009294 <HAL_PCD_Start+0x16>
 8009290:	2302      	movs	r3, #2
 8009292:	e012      	b.n	80092ba <HAL_PCD_Start+0x3c>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f007 fe17 	bl	8010ed4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f006 fd72 	bl	800fd94 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80092c2:	b590      	push	{r4, r7, lr}
 80092c4:	b08d      	sub	sp, #52	; 0x34
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d0:	6a3b      	ldr	r3, [r7, #32]
 80092d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4618      	mov	r0, r3
 80092da:	f007 febe 	bl	801105a <USB_GetMode>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f040 83ca 	bne.w	8009a7a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f007 fe22 	bl	8010f34 <USB_ReadInterrupts>
 80092f0:	4603      	mov	r3, r0
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 83c0 	beq.w	8009a78 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f007 fe19 	bl	8010f34 <USB_ReadInterrupts>
 8009302:	4603      	mov	r3, r0
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b02      	cmp	r3, #2
 800930a:	d107      	bne.n	800931c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695a      	ldr	r2, [r3, #20]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f002 0202 	and.w	r2, r2, #2
 800931a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4618      	mov	r0, r3
 8009322:	f007 fe07 	bl	8010f34 <USB_ReadInterrupts>
 8009326:	4603      	mov	r3, r0
 8009328:	f003 0310 	and.w	r3, r3, #16
 800932c:	2b10      	cmp	r3, #16
 800932e:	d161      	bne.n	80093f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	699a      	ldr	r2, [r3, #24]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f022 0210 	bic.w	r2, r2, #16
 800933e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009340:	6a3b      	ldr	r3, [r7, #32]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	f003 020f 	and.w	r2, r3, #15
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	3304      	adds	r3, #4
 800935e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	0c5b      	lsrs	r3, r3, #17
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	2b02      	cmp	r3, #2
 800936a:	d124      	bne.n	80093b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800936c:	69ba      	ldr	r2, [r7, #24]
 800936e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d035      	beq.n	80093e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	091b      	lsrs	r3, r3, #4
 8009380:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009386:	b29b      	uxth	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	6a38      	ldr	r0, [r7, #32]
 800938c:	f007 fc7f 	bl	8010c8e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	68da      	ldr	r2, [r3, #12]
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	091b      	lsrs	r3, r3, #4
 8009398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800939c:	441a      	add	r2, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	091b      	lsrs	r3, r3, #4
 80093aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093ae:	441a      	add	r2, r3
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	619a      	str	r2, [r3, #24]
 80093b4:	e016      	b.n	80093e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	0c5b      	lsrs	r3, r3, #17
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	2b06      	cmp	r3, #6
 80093c0:	d110      	bne.n	80093e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093c8:	2208      	movs	r2, #8
 80093ca:	4619      	mov	r1, r3
 80093cc:	6a38      	ldr	r0, [r7, #32]
 80093ce:	f007 fc5e 	bl	8010c8e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	091b      	lsrs	r3, r3, #4
 80093da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80093de:	441a      	add	r2, r3
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	699a      	ldr	r2, [r3, #24]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0210 	orr.w	r2, r2, #16
 80093f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f007 fd9b 	bl	8010f34 <USB_ReadInterrupts>
 80093fe:	4603      	mov	r3, r0
 8009400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009404:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009408:	d16e      	bne.n	80094e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f007 fda1 	bl	8010f5a <USB_ReadDevAllOutEpInterrupt>
 8009418:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800941a:	e062      	b.n	80094e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	d057      	beq.n	80094d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800942c:	b2d2      	uxtb	r2, r2
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f007 fdc6 	bl	8010fc2 <USB_ReadDevOutEPInterrupt>
 8009436:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00c      	beq.n	800945c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	015a      	lsls	r2, r3, #5
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	4413      	add	r3, r2
 800944a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944e:	461a      	mov	r2, r3
 8009450:	2301      	movs	r3, #1
 8009452:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fdde 	bl	800a018 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f003 0308 	and.w	r3, r3, #8
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00c      	beq.n	8009480 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	461a      	mov	r2, r3
 8009474:	2308      	movs	r3, #8
 8009476:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 fed8 	bl	800a230 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f003 0310 	and.w	r3, r3, #16
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009496:	461a      	mov	r2, r3
 8009498:	2310      	movs	r3, #16
 800949a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d008      	beq.n	80094b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	461a      	mov	r2, r3
 80094b4:	2320      	movs	r3, #32
 80094b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d009      	beq.n	80094d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ce:	461a      	mov	r2, r3
 80094d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d8:	3301      	adds	r3, #1
 80094da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d199      	bne.n	800941c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4618      	mov	r0, r3
 80094ee:	f007 fd21 	bl	8010f34 <USB_ReadInterrupts>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80094f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094fc:	f040 80c0 	bne.w	8009680 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f007 fd42 	bl	8010f8e <USB_ReadDevAllInEpInterrupt>
 800950a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009510:	e0b2      	b.n	8009678 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80a7 	beq.w	800966c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009524:	b2d2      	uxtb	r2, r2
 8009526:	4611      	mov	r1, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f007 fd68 	bl	8010ffe <USB_ReadDevInEPInterrupt>
 800952e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d057      	beq.n	80095ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800953a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953c:	f003 030f 	and.w	r3, r3, #15
 8009540:	2201      	movs	r2, #1
 8009542:	fa02 f303 	lsl.w	r3, r2, r3
 8009546:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	43db      	mvns	r3, r3
 8009554:	69f9      	ldr	r1, [r7, #28]
 8009556:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800955a:	4013      	ands	r3, r2
 800955c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956a:	461a      	mov	r2, r3
 800956c:	2301      	movs	r3, #1
 800956e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	2b01      	cmp	r3, #1
 8009576:	d132      	bne.n	80095de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	1a9b      	subs	r3, r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	3348      	adds	r3, #72	; 0x48
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4403      	add	r3, r0
 8009598:	3344      	adds	r3, #68	; 0x44
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4419      	add	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095a2:	4613      	mov	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	1a9b      	subs	r3, r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4403      	add	r3, r0
 80095ac:	3348      	adds	r3, #72	; 0x48
 80095ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80095b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d113      	bne.n	80095de <HAL_PCD_IRQHandler+0x31c>
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095ba:	4613      	mov	r3, r2
 80095bc:	00db      	lsls	r3, r3, #3
 80095be:	1a9b      	subs	r3, r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	440b      	add	r3, r1
 80095c4:	3350      	adds	r3, #80	; 0x50
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6818      	ldr	r0, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095d6:	461a      	mov	r2, r3
 80095d8:	2101      	movs	r1, #1
 80095da:	f007 fd71 	bl	80110c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f010 fe74 	bl	801a2d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d008      	beq.n	8009606 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	015a      	lsls	r2, r3, #5
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	4413      	add	r3, r2
 80095fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009600:	461a      	mov	r2, r3
 8009602:	2308      	movs	r3, #8
 8009604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f003 0310 	and.w	r3, r3, #16
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800961c:	461a      	mov	r2, r3
 800961e:	2310      	movs	r3, #16
 8009620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d008      	beq.n	800963e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	015a      	lsls	r2, r3, #5
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	4413      	add	r3, r2
 8009634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009638:	461a      	mov	r2, r3
 800963a:	2340      	movs	r3, #64	; 0x40
 800963c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d008      	beq.n	800965a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	015a      	lsls	r2, r3, #5
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	4413      	add	r3, r2
 8009650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009654:	461a      	mov	r2, r3
 8009656:	2302      	movs	r3, #2
 8009658:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009660:	2b00      	cmp	r3, #0
 8009662:	d003      	beq.n	800966c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009664:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fc48 	bl	8009efc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	3301      	adds	r3, #1
 8009670:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009674:	085b      	lsrs	r3, r3, #1
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	f47f af49 	bne.w	8009512 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4618      	mov	r0, r3
 8009686:	f007 fc55 	bl	8010f34 <USB_ReadInterrupts>
 800968a:	4603      	mov	r3, r0
 800968c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009694:	d122      	bne.n	80096dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a4:	f023 0301 	bic.w	r3, r3, #1
 80096a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d108      	bne.n	80096c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80096bc:	2100      	movs	r1, #0
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f011 f856 	bl	801a770 <HAL_PCDEx_LPM_Callback>
 80096c4:	e002      	b.n	80096cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f010 fe7a 	bl	801a3c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	695a      	ldr	r2, [r3, #20]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80096da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f007 fc27 	bl	8010f34 <USB_ReadInterrupts>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f0:	d112      	bne.n	8009718 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d102      	bne.n	8009708 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f010 fe36 	bl	801a374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	695a      	ldr	r2, [r3, #20]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009716:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f007 fc09 	bl	8010f34 <USB_ReadInterrupts>
 8009722:	4603      	mov	r3, r0
 8009724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009728:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800972c:	d121      	bne.n	8009772 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695a      	ldr	r2, [r3, #20]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800973c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009744:	2b00      	cmp	r3, #0
 8009746:	d111      	bne.n	800976c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009756:	089b      	lsrs	r3, r3, #2
 8009758:	f003 020f 	and.w	r2, r3, #15
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009762:	2101      	movs	r1, #1
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f011 f803 	bl	801a770 <HAL_PCDEx_LPM_Callback>
 800976a:	e002      	b.n	8009772 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f010 fe01 	bl	801a374 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f007 fbdc 	bl	8010f34 <USB_ReadInterrupts>
 800977c:	4603      	mov	r3, r0
 800977e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009786:	f040 80c7 	bne.w	8009918 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	69fa      	ldr	r2, [r7, #28]
 8009794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009798:	f023 0301 	bic.w	r3, r3, #1
 800979c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	2110      	movs	r1, #16
 80097a4:	4618      	mov	r0, r3
 80097a6:	f006 fcaf 	bl	8010108 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80097aa:	2300      	movs	r3, #0
 80097ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097ae:	e056      	b.n	800985e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80097b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097bc:	461a      	mov	r2, r3
 80097be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80097c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80097c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d4:	0151      	lsls	r1, r2, #5
 80097d6:	69fa      	ldr	r2, [r7, #28]
 80097d8:	440a      	add	r2, r1
 80097da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097e2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	015a      	lsls	r2, r3, #5
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	4413      	add	r3, r2
 80097ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097f4:	0151      	lsls	r1, r2, #5
 80097f6:	69fa      	ldr	r2, [r7, #28]
 80097f8:	440a      	add	r2, r1
 80097fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009802:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009806:	015a      	lsls	r2, r3, #5
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	4413      	add	r3, r2
 800980c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009810:	461a      	mov	r2, r3
 8009812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009816:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009828:	0151      	lsls	r1, r2, #5
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	440a      	add	r2, r1
 800982e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009832:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009836:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009852:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009856:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	3301      	adds	r3, #1
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009864:	429a      	cmp	r2, r3
 8009866:	d3a3      	bcc.n	80097b0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800986e:	69db      	ldr	r3, [r3, #28]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009876:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800987a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009880:	2b00      	cmp	r3, #0
 8009882:	d016      	beq.n	80098b2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800988a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800988e:	69fa      	ldr	r2, [r7, #28]
 8009890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009894:	f043 030b 	orr.w	r3, r3, #11
 8009898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098aa:	f043 030b 	orr.w	r3, r3, #11
 80098ae:	6453      	str	r3, [r2, #68]	; 0x44
 80098b0:	e015      	b.n	80098de <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b8:	695a      	ldr	r2, [r3, #20]
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098c0:	4619      	mov	r1, r3
 80098c2:	f242 032b 	movw	r3, #8235	; 0x202b
 80098c6:	4313      	orrs	r3, r2
 80098c8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098d8:	f043 030b 	orr.w	r3, r3, #11
 80098dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80098f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009902:	461a      	mov	r2, r3
 8009904:	f007 fbdc 	bl	80110c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695a      	ldr	r2, [r3, #20]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f007 fb09 	bl	8010f34 <USB_ReadInterrupts>
 8009922:	4603      	mov	r3, r0
 8009924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800992c:	d124      	bne.n	8009978 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4618      	mov	r0, r3
 8009934:	f007 fba0 	bl	8011078 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4618      	mov	r0, r3
 800993e:	f006 fc44 	bl	80101ca <USB_GetDevSpeed>
 8009942:	4603      	mov	r3, r0
 8009944:	461a      	mov	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681c      	ldr	r4, [r3, #0]
 800994e:	f001 f999 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 8009952:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009958:	b2db      	uxtb	r3, r3
 800995a:	461a      	mov	r2, r3
 800995c:	4620      	mov	r0, r4
 800995e:	f006 f977 	bl	800fc50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f010 fcdd 	bl	801a322 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	695a      	ldr	r2, [r3, #20]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009976:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	f007 fad9 	bl	8010f34 <USB_ReadInterrupts>
 8009982:	4603      	mov	r3, r0
 8009984:	f003 0308 	and.w	r3, r3, #8
 8009988:	2b08      	cmp	r3, #8
 800998a:	d10a      	bne.n	80099a2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f010 fcba 	bl	801a306 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	695a      	ldr	r2, [r3, #20]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f002 0208 	and.w	r2, r2, #8
 80099a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4618      	mov	r0, r3
 80099a8:	f007 fac4 	bl	8010f34 <USB_ReadInterrupts>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099b6:	d10f      	bne.n	80099d8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f010 fd1c 	bl	801a400 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	695a      	ldr	r2, [r3, #20]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80099d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4618      	mov	r0, r3
 80099de:	f007 faa9 	bl	8010f34 <USB_ReadInterrupts>
 80099e2:	4603      	mov	r3, r0
 80099e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099ec:	d10f      	bne.n	8009a0e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	4619      	mov	r1, r3
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f010 fcef 	bl	801a3dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	695a      	ldr	r2, [r3, #20]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f007 fa8e 	bl	8010f34 <USB_ReadInterrupts>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a22:	d10a      	bne.n	8009a3a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f010 fcfd 	bl	801a424 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	695a      	ldr	r2, [r3, #20]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f007 fa78 	bl	8010f34 <USB_ReadInterrupts>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f003 0304 	and.w	r3, r3, #4
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d115      	bne.n	8009a7a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f010 fced 	bl	801a440 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	6859      	ldr	r1, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	69ba      	ldr	r2, [r7, #24]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	605a      	str	r2, [r3, #4]
 8009a76:	e000      	b.n	8009a7a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8009a78:	bf00      	nop
    }
  }
}
 8009a7a:	3734      	adds	r7, #52	; 0x34
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd90      	pop	{r4, r7, pc}

08009a80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d101      	bne.n	8009a9a <HAL_PCD_SetAddress+0x1a>
 8009a96:	2302      	movs	r3, #2
 8009a98:	e013      	b.n	8009ac2 <HAL_PCD_SetAddress+0x42>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	4611      	mov	r1, r2
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f007 f9e8 	bl	8010e88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	4603      	mov	r3, r0
 8009ada:	70fb      	strb	r3, [r7, #3]
 8009adc:	460b      	mov	r3, r1
 8009ade:	803b      	strh	r3, [r7, #0]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	da0f      	bge.n	8009b10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	f003 020f 	and.w	r2, r3, #15
 8009af6:	4613      	mov	r3, r2
 8009af8:	00db      	lsls	r3, r3, #3
 8009afa:	1a9b      	subs	r3, r3, r2
 8009afc:	009b      	lsls	r3, r3, #2
 8009afe:	3338      	adds	r3, #56	; 0x38
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	4413      	add	r3, r2
 8009b04:	3304      	adds	r3, #4
 8009b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	705a      	strb	r2, [r3, #1]
 8009b0e:	e00f      	b.n	8009b30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	f003 020f 	and.w	r2, r3, #15
 8009b16:	4613      	mov	r3, r2
 8009b18:	00db      	lsls	r3, r3, #3
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	3304      	adds	r3, #4
 8009b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	f003 030f 	and.w	r3, r3, #15
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009b3c:	883a      	ldrh	r2, [r7, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	78ba      	ldrb	r2, [r7, #2]
 8009b46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	785b      	ldrb	r3, [r3, #1]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009b5a:	78bb      	ldrb	r3, [r7, #2]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d102      	bne.n	8009b66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2200      	movs	r2, #0
 8009b64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d101      	bne.n	8009b74 <HAL_PCD_EP_Open+0xaa>
 8009b70:	2302      	movs	r3, #2
 8009b72:	e00e      	b.n	8009b92 <HAL_PCD_EP_Open+0xc8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68f9      	ldr	r1, [r7, #12]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f006 fb46 	bl	8010214 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009b90:	7afb      	ldrb	r3, [r7, #11]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b084      	sub	sp, #16
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	da0f      	bge.n	8009bce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	f003 020f 	and.w	r2, r3, #15
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	00db      	lsls	r3, r3, #3
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	3338      	adds	r3, #56	; 0x38
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	3304      	adds	r3, #4
 8009bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	705a      	strb	r2, [r3, #1]
 8009bcc:	e00f      	b.n	8009bee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bce:	78fb      	ldrb	r3, [r7, #3]
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	00db      	lsls	r3, r3, #3
 8009bd8:	1a9b      	subs	r3, r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	4413      	add	r3, r2
 8009be4:	3304      	adds	r3, #4
 8009be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	f003 030f 	and.w	r3, r3, #15
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <HAL_PCD_EP_Close+0x6e>
 8009c04:	2302      	movs	r3, #2
 8009c06:	e00e      	b.n	8009c26 <HAL_PCD_EP_Close+0x8c>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68f9      	ldr	r1, [r7, #12]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f006 fb84 	bl	8010324 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b086      	sub	sp, #24
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	607a      	str	r2, [r7, #4]
 8009c38:	603b      	str	r3, [r7, #0]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c3e:	7afb      	ldrb	r3, [r7, #11]
 8009c40:	f003 020f 	and.w	r2, r3, #15
 8009c44:	4613      	mov	r3, r2
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	1a9b      	subs	r3, r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	3304      	adds	r3, #4
 8009c56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	683a      	ldr	r2, [r7, #0]
 8009c62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2200      	movs	r2, #0
 8009c68:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c70:	7afb      	ldrb	r3, [r7, #11]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d102      	bne.n	8009c8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	f003 030f 	and.w	r3, r3, #15
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d109      	bne.n	8009ca8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6818      	ldr	r0, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	b2db      	uxtb	r3, r3
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6979      	ldr	r1, [r7, #20]
 8009ca2:	f006 fe67 	bl	8010974 <USB_EP0StartXfer>
 8009ca6:	e008      	b.n	8009cba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	6979      	ldr	r1, [r7, #20]
 8009cb6:	f006 fc11 	bl	80104dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009cd0:	78fb      	ldrb	r3, [r7, #3]
 8009cd2:	f003 020f 	and.w	r2, r3, #15
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	1a9b      	subs	r3, r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009ce6:	681b      	ldr	r3, [r3, #0]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	607a      	str	r2, [r7, #4]
 8009cfe:	603b      	str	r3, [r7, #0]
 8009d00:	460b      	mov	r3, r1
 8009d02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	f003 020f 	and.w	r2, r3, #15
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	1a9b      	subs	r3, r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	3338      	adds	r3, #56	; 0x38
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2201      	movs	r2, #1
 8009d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d34:	7afb      	ldrb	r3, [r7, #11]
 8009d36:	f003 030f 	and.w	r3, r3, #15
 8009d3a:	b2da      	uxtb	r2, r3
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d102      	bne.n	8009d4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d109      	bne.n	8009d6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6818      	ldr	r0, [r3, #0]
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	691b      	ldr	r3, [r3, #16]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	6979      	ldr	r1, [r7, #20]
 8009d66:	f006 fe05 	bl	8010974 <USB_EP0StartXfer>
 8009d6a:	e008      	b.n	8009d7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	6979      	ldr	r1, [r7, #20]
 8009d7a:	f006 fbaf 	bl	80104dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	460b      	mov	r3, r1
 8009d92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	f003 020f 	and.w	r2, r3, #15
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d901      	bls.n	8009da6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e050      	b.n	8009e48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da0f      	bge.n	8009dce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	f003 020f 	and.w	r2, r3, #15
 8009db4:	4613      	mov	r3, r2
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	1a9b      	subs	r3, r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	3338      	adds	r3, #56	; 0x38
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	705a      	strb	r2, [r3, #1]
 8009dcc:	e00d      	b.n	8009dea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009dce:	78fa      	ldrb	r2, [r7, #3]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	00db      	lsls	r3, r3, #3
 8009dd4:	1a9b      	subs	r3, r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	4413      	add	r3, r2
 8009de0:	3304      	adds	r3, #4
 8009de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2201      	movs	r2, #1
 8009dee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	f003 030f 	and.w	r3, r3, #15
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d101      	bne.n	8009e0a <HAL_PCD_EP_SetStall+0x82>
 8009e06:	2302      	movs	r3, #2
 8009e08:	e01e      	b.n	8009e48 <HAL_PCD_EP_SetStall+0xc0>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68f9      	ldr	r1, [r7, #12]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f006 ff61 	bl	8010ce0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	f003 030f 	and.w	r3, r3, #15
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10a      	bne.n	8009e3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6818      	ldr	r0, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	b2d9      	uxtb	r1, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e38:	461a      	mov	r2, r3
 8009e3a:	f007 f941 	bl	80110c0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	f003 020f 	and.w	r2, r3, #15
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	429a      	cmp	r2, r3
 8009e68:	d901      	bls.n	8009e6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e042      	b.n	8009ef4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009e6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	da0f      	bge.n	8009e96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e76:	78fb      	ldrb	r3, [r7, #3]
 8009e78:	f003 020f 	and.w	r2, r3, #15
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	3338      	adds	r3, #56	; 0x38
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	4413      	add	r3, r2
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	705a      	strb	r2, [r3, #1]
 8009e94:	e00f      	b.n	8009eb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	f003 020f 	and.w	r2, r3, #15
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	4413      	add	r3, r2
 8009eac:	3304      	adds	r3, #4
 8009eae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_PCD_EP_ClrStall+0x86>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e00e      	b.n	8009ef4 <HAL_PCD_EP_ClrStall+0xa4>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	68f9      	ldr	r1, [r7, #12]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f006 ff69 	bl	8010dbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	; 0x28
 8009f00:	af02      	add	r7, sp, #8
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	4613      	mov	r3, r2
 8009f14:	00db      	lsls	r3, r3, #3
 8009f16:	1a9b      	subs	r3, r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	3338      	adds	r3, #56	; 0x38
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	4413      	add	r3, r2
 8009f20:	3304      	adds	r3, #4
 8009f22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	699a      	ldr	r2, [r3, #24]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d901      	bls.n	8009f34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e06c      	b.n	800a00e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	695a      	ldr	r2, [r3, #20]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d902      	bls.n	8009f50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	3303      	adds	r3, #3
 8009f54:	089b      	lsrs	r3, r3, #2
 8009f56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f58:	e02b      	b.n	8009fb2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	695a      	ldr	r2, [r3, #20]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d902      	bls.n	8009f76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	689b      	ldr	r3, [r3, #8]
 8009f74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	3303      	adds	r3, #3
 8009f7a:	089b      	lsrs	r3, r3, #2
 8009f7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	68d9      	ldr	r1, [r3, #12]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4603      	mov	r3, r0
 8009f94:	6978      	ldr	r0, [r7, #20]
 8009f96:	f006 fe45 	bl	8010c24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	441a      	add	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	699a      	ldr	r2, [r3, #24]
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	441a      	add	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	015a      	lsls	r2, r3, #5
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	69ba      	ldr	r2, [r7, #24]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d809      	bhi.n	8009fdc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	699a      	ldr	r2, [r3, #24]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d203      	bcs.n	8009fdc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	695b      	ldr	r3, [r3, #20]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1be      	bne.n	8009f5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	695a      	ldr	r2, [r3, #20]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	699b      	ldr	r3, [r3, #24]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d811      	bhi.n	800a00c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	f003 030f 	and.w	r3, r3, #15
 8009fee:	2201      	movs	r2, #1
 8009ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	43db      	mvns	r3, r3
 800a002:	6939      	ldr	r1, [r7, #16]
 800a004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a008:	4013      	ands	r3, r2
 800a00a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3720      	adds	r7, #32
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
	...

0800a018 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b086      	sub	sp, #24
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	333c      	adds	r3, #60	; 0x3c
 800a030:	3304      	adds	r3, #4
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	f040 80a0 	bne.w	800a190 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b00      	cmp	r3, #0
 800a058:	d015      	beq.n	800a086 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	4a72      	ldr	r2, [pc, #456]	; (800a228 <PCD_EP_OutXfrComplete_int+0x210>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	f240 80dd 	bls.w	800a21e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 80d7 	beq.w	800a21e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a07c:	461a      	mov	r2, r3
 800a07e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a082:	6093      	str	r3, [r2, #8]
 800a084:	e0cb      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d009      	beq.n	800a0a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09c:	461a      	mov	r2, r3
 800a09e:	2320      	movs	r3, #32
 800a0a0:	6093      	str	r3, [r2, #8]
 800a0a2:	e0bc      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f040 80b7 	bne.w	800a21e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	4a5d      	ldr	r2, [pc, #372]	; (800a228 <PCD_EP_OutXfrComplete_int+0x210>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d90f      	bls.n	800a0d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00a      	beq.n	800a0d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d4:	6093      	str	r3, [r2, #8]
 800a0d6:	e0a2      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a0d8:	6879      	ldr	r1, [r7, #4]
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4613      	mov	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	1a9b      	subs	r3, r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a0ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	0159      	lsls	r1, r3, #5
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	440b      	add	r3, r1
 800a0f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a0fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4613      	mov	r3, r2
 800a106:	00db      	lsls	r3, r3, #3
 800a108:	1a9b      	subs	r3, r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4403      	add	r3, r0
 800a10e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a112:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a114:	6879      	ldr	r1, [r7, #4]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4613      	mov	r3, r2
 800a11a:	00db      	lsls	r3, r3, #3
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	440b      	add	r3, r1
 800a122:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a126:	6819      	ldr	r1, [r3, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	4613      	mov	r3, r2
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	1a9b      	subs	r3, r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4403      	add	r3, r0
 800a136:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4419      	add	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	4613      	mov	r3, r2
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	1a9b      	subs	r3, r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4403      	add	r3, r0
 800a14c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a150:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d114      	bne.n	800a182 <PCD_EP_OutXfrComplete_int+0x16a>
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	683a      	ldr	r2, [r7, #0]
 800a15c:	4613      	mov	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	1a9b      	subs	r3, r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d108      	bne.n	800a182 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6818      	ldr	r0, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a17a:	461a      	mov	r2, r3
 800a17c:	2101      	movs	r1, #1
 800a17e:	f006 ff9f 	bl	80110c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f010 f887 	bl	801a29c <HAL_PCD_DataOutStageCallback>
 800a18e:	e046      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4a26      	ldr	r2, [pc, #152]	; (800a22c <PCD_EP_OutXfrComplete_int+0x214>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d124      	bne.n	800a1e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	015a      	lsls	r2, r3, #5
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b4:	6093      	str	r3, [r2, #8]
 800a1b6:	e032      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f003 0320 	and.w	r3, r3, #32
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	015a      	lsls	r2, r3, #5
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	4413      	add	r3, r2
 800a1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	2320      	movs	r3, #32
 800a1d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f010 f85e 	bl	801a29c <HAL_PCD_DataOutStageCallback>
 800a1e0:	e01d      	b.n	800a21e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d114      	bne.n	800a212 <PCD_EP_OutXfrComplete_int+0x1fa>
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	683a      	ldr	r2, [r7, #0]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d108      	bne.n	800a212 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6818      	ldr	r0, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a20a:	461a      	mov	r2, r3
 800a20c:	2100      	movs	r1, #0
 800a20e:	f006 ff57 	bl	80110c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f010 f83f 	bl	801a29c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	4f54300a 	.word	0x4f54300a
 800a22c:	4f54310a 	.word	0x4f54310a

0800a230 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	333c      	adds	r3, #60	; 0x3c
 800a248:	3304      	adds	r3, #4
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4a15      	ldr	r2, [pc, #84]	; (800a2b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d90e      	bls.n	800a284 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d009      	beq.n	800a284 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27c:	461a      	mov	r2, r3
 800a27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a282:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f00f fff7 	bl	801a278 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d90c      	bls.n	800a2ac <PCD_EP_OutSetupPacket_int+0x7c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d108      	bne.n	800a2ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	f006 ff0a 	bl	80110c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	4f54300a 	.word	0x4f54300a

0800a2bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	70fb      	strb	r3, [r7, #3]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a2da:	883b      	ldrh	r3, [r7, #0]
 800a2dc:	0419      	lsls	r1, r3, #16
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	629a      	str	r2, [r3, #40]	; 0x28
 800a2e8:	e028      	b.n	800a33c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f0:	0c1b      	lsrs	r3, r3, #16
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	73fb      	strb	r3, [r7, #15]
 800a2fc:	e00d      	b.n	800a31a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	7bfb      	ldrb	r3, [r7, #15]
 800a304:	3340      	adds	r3, #64	; 0x40
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	4413      	add	r3, r2
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	0c1b      	lsrs	r3, r3, #16
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	4413      	add	r3, r2
 800a312:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a314:	7bfb      	ldrb	r3, [r7, #15]
 800a316:	3301      	adds	r3, #1
 800a318:	73fb      	strb	r3, [r7, #15]
 800a31a:	7bfa      	ldrb	r2, [r7, #15]
 800a31c:	78fb      	ldrb	r3, [r7, #3]
 800a31e:	3b01      	subs	r3, #1
 800a320:	429a      	cmp	r2, r3
 800a322:	d3ec      	bcc.n	800a2fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a324:	883b      	ldrh	r3, [r7, #0]
 800a326:	0418      	lsls	r0, r3, #16
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6819      	ldr	r1, [r3, #0]
 800a32c:	78fb      	ldrb	r3, [r7, #3]
 800a32e:	3b01      	subs	r3, #1
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	4302      	orrs	r2, r0
 800a334:	3340      	adds	r3, #64	; 0x40
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	440b      	add	r3, r1
 800a33a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3714      	adds	r7, #20
 800a342:	46bd      	mov	sp, r7
 800a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a348:	4770      	bx	lr

0800a34a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	887a      	ldrh	r2, [r7, #2]
 800a35c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b085      	sub	sp, #20
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a39a:	4b05      	ldr	r3, [pc, #20]	; (800a3b0 <HAL_PCDEx_ActivateLPM+0x44>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	10000003 	.word	0x10000003

0800a3b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e291      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f000 8087 	beq.w	800a4e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a3d8:	4b96      	ldr	r3, [pc, #600]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f003 030c 	and.w	r3, r3, #12
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d00c      	beq.n	800a3fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a3e4:	4b93      	ldr	r3, [pc, #588]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3e6:	689b      	ldr	r3, [r3, #8]
 800a3e8:	f003 030c 	and.w	r3, r3, #12
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d112      	bne.n	800a416 <HAL_RCC_OscConfig+0x62>
 800a3f0:	4b90      	ldr	r3, [pc, #576]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a3f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3fc:	d10b      	bne.n	800a416 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3fe:	4b8d      	ldr	r3, [pc, #564]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06c      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x130>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d168      	bne.n	800a4e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e26b      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41e:	d106      	bne.n	800a42e <HAL_RCC_OscConfig+0x7a>
 800a420:	4b84      	ldr	r3, [pc, #528]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a83      	ldr	r2, [pc, #524]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	e02e      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10c      	bne.n	800a450 <HAL_RCC_OscConfig+0x9c>
 800a436:	4b7f      	ldr	r3, [pc, #508]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a7e      	ldr	r2, [pc, #504]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a43c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4b7c      	ldr	r3, [pc, #496]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a7b      	ldr	r2, [pc, #492]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	e01d      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a458:	d10c      	bne.n	800a474 <HAL_RCC_OscConfig+0xc0>
 800a45a:	4b76      	ldr	r3, [pc, #472]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a75      	ldr	r2, [pc, #468]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a464:	6013      	str	r3, [r2, #0]
 800a466:	4b73      	ldr	r3, [pc, #460]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a72      	ldr	r2, [pc, #456]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a46c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a470:	6013      	str	r3, [r2, #0]
 800a472:	e00b      	b.n	800a48c <HAL_RCC_OscConfig+0xd8>
 800a474:	4b6f      	ldr	r3, [pc, #444]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a6e      	ldr	r2, [pc, #440]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a47a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a47e:	6013      	str	r3, [r2, #0]
 800a480:	4b6c      	ldr	r3, [pc, #432]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a6b      	ldr	r2, [pc, #428]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d013      	beq.n	800a4bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a494:	f7fd fa56 	bl	8007944 <HAL_GetTick>
 800a498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a49a:	e008      	b.n	800a4ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a49c:	f7fd fa52 	bl	8007944 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	2b64      	cmp	r3, #100	; 0x64
 800a4a8:	d901      	bls.n	800a4ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	e21f      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ae:	4b61      	ldr	r3, [pc, #388]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d0f0      	beq.n	800a49c <HAL_RCC_OscConfig+0xe8>
 800a4ba:	e014      	b.n	800a4e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4bc:	f7fd fa42 	bl	8007944 <HAL_GetTick>
 800a4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4c2:	e008      	b.n	800a4d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4c4:	f7fd fa3e 	bl	8007944 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	1ad3      	subs	r3, r2, r3
 800a4ce:	2b64      	cmp	r3, #100	; 0x64
 800a4d0:	d901      	bls.n	800a4d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a4d2:	2303      	movs	r3, #3
 800a4d4:	e20b      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4d6:	4b57      	ldr	r3, [pc, #348]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f0      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x110>
 800a4e2:	e000      	b.n	800a4e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d069      	beq.n	800a5c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a4f2:	4b50      	ldr	r3, [pc, #320]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	f003 030c 	and.w	r3, r3, #12
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00b      	beq.n	800a516 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a4fe:	4b4d      	ldr	r3, [pc, #308]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f003 030c 	and.w	r3, r3, #12
 800a506:	2b08      	cmp	r3, #8
 800a508:	d11c      	bne.n	800a544 <HAL_RCC_OscConfig+0x190>
 800a50a:	4b4a      	ldr	r3, [pc, #296]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a512:	2b00      	cmp	r3, #0
 800a514:	d116      	bne.n	800a544 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a516:	4b47      	ldr	r3, [pc, #284]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d005      	beq.n	800a52e <HAL_RCC_OscConfig+0x17a>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d001      	beq.n	800a52e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e1df      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a52e:	4b41      	ldr	r3, [pc, #260]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	691b      	ldr	r3, [r3, #16]
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	493d      	ldr	r1, [pc, #244]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a542:	e040      	b.n	800a5c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d023      	beq.n	800a594 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a54c:	4b39      	ldr	r3, [pc, #228]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a38      	ldr	r2, [pc, #224]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a552:	f043 0301 	orr.w	r3, r3, #1
 800a556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a558:	f7fd f9f4 	bl	8007944 <HAL_GetTick>
 800a55c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a55e:	e008      	b.n	800a572 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a560:	f7fd f9f0 	bl	8007944 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	2b02      	cmp	r3, #2
 800a56c:	d901      	bls.n	800a572 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a56e:	2303      	movs	r3, #3
 800a570:	e1bd      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a572:	4b30      	ldr	r3, [pc, #192]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d0f0      	beq.n	800a560 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57e:	4b2d      	ldr	r3, [pc, #180]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4929      	ldr	r1, [pc, #164]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	600b      	str	r3, [r1, #0]
 800a592:	e018      	b.n	800a5c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a594:	4b27      	ldr	r3, [pc, #156]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a26      	ldr	r2, [pc, #152]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a59a:	f023 0301 	bic.w	r3, r3, #1
 800a59e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a0:	f7fd f9d0 	bl	8007944 <HAL_GetTick>
 800a5a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5a6:	e008      	b.n	800a5ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5a8:	f7fd f9cc 	bl	8007944 <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e199      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5ba:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0302 	and.w	r3, r3, #2
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d1f0      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f003 0308 	and.w	r3, r3, #8
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d038      	beq.n	800a644 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d019      	beq.n	800a60e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5da:	4b16      	ldr	r3, [pc, #88]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5de:	4a15      	ldr	r2, [pc, #84]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a5e0:	f043 0301 	orr.w	r3, r3, #1
 800a5e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e6:	f7fd f9ad 	bl	8007944 <HAL_GetTick>
 800a5ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5ee:	f7fd f9a9 	bl	8007944 <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e176      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a600:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0f0      	beq.n	800a5ee <HAL_RCC_OscConfig+0x23a>
 800a60c:	e01a      	b.n	800a644 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a612:	4a08      	ldr	r2, [pc, #32]	; (800a634 <HAL_RCC_OscConfig+0x280>)
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61a:	f7fd f993 	bl	8007944 <HAL_GetTick>
 800a61e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a620:	e00a      	b.n	800a638 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a622:	f7fd f98f 	bl	8007944 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d903      	bls.n	800a638 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e15c      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
 800a634:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a638:	4b91      	ldr	r3, [pc, #580]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1ee      	bne.n	800a622 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0304 	and.w	r3, r3, #4
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 80a4 	beq.w	800a79a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a652:	4b8b      	ldr	r3, [pc, #556]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d10d      	bne.n	800a67a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a65e:	4b88      	ldr	r3, [pc, #544]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a662:	4a87      	ldr	r2, [pc, #540]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a668:	6413      	str	r3, [r2, #64]	; 0x40
 800a66a:	4b85      	ldr	r3, [pc, #532]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a676:	2301      	movs	r3, #1
 800a678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a67a:	4b82      	ldr	r3, [pc, #520]	; (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a682:	2b00      	cmp	r3, #0
 800a684:	d118      	bne.n	800a6b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a686:	4b7f      	ldr	r3, [pc, #508]	; (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a7e      	ldr	r2, [pc, #504]	; (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a692:	f7fd f957 	bl	8007944 <HAL_GetTick>
 800a696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a698:	e008      	b.n	800a6ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a69a:	f7fd f953 	bl	8007944 <HAL_GetTick>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	2b64      	cmp	r3, #100	; 0x64
 800a6a6:	d901      	bls.n	800a6ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e120      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6ac:	4b75      	ldr	r3, [pc, #468]	; (800a884 <HAL_RCC_OscConfig+0x4d0>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0f0      	beq.n	800a69a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d106      	bne.n	800a6ce <HAL_RCC_OscConfig+0x31a>
 800a6c0:	4b6f      	ldr	r3, [pc, #444]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6c4:	4a6e      	ldr	r2, [pc, #440]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a6cc:	e02d      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10c      	bne.n	800a6f0 <HAL_RCC_OscConfig+0x33c>
 800a6d6:	4b6a      	ldr	r3, [pc, #424]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6da:	4a69      	ldr	r2, [pc, #420]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6dc:	f023 0301 	bic.w	r3, r3, #1
 800a6e0:	6713      	str	r3, [r2, #112]	; 0x70
 800a6e2:	4b67      	ldr	r3, [pc, #412]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e6:	4a66      	ldr	r2, [pc, #408]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6e8:	f023 0304 	bic.w	r3, r3, #4
 800a6ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a6ee:	e01c      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	2b05      	cmp	r3, #5
 800a6f6:	d10c      	bne.n	800a712 <HAL_RCC_OscConfig+0x35e>
 800a6f8:	4b61      	ldr	r3, [pc, #388]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6fc:	4a60      	ldr	r2, [pc, #384]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a6fe:	f043 0304 	orr.w	r3, r3, #4
 800a702:	6713      	str	r3, [r2, #112]	; 0x70
 800a704:	4b5e      	ldr	r3, [pc, #376]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a708:	4a5d      	ldr	r2, [pc, #372]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6713      	str	r3, [r2, #112]	; 0x70
 800a710:	e00b      	b.n	800a72a <HAL_RCC_OscConfig+0x376>
 800a712:	4b5b      	ldr	r3, [pc, #364]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a716:	4a5a      	ldr	r2, [pc, #360]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a718:	f023 0301 	bic.w	r3, r3, #1
 800a71c:	6713      	str	r3, [r2, #112]	; 0x70
 800a71e:	4b58      	ldr	r3, [pc, #352]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a722:	4a57      	ldr	r2, [pc, #348]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a724:	f023 0304 	bic.w	r3, r3, #4
 800a728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d015      	beq.n	800a75e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a732:	f7fd f907 	bl	8007944 <HAL_GetTick>
 800a736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a738:	e00a      	b.n	800a750 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a73a:	f7fd f903 	bl	8007944 <HAL_GetTick>
 800a73e:	4602      	mov	r2, r0
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	1ad3      	subs	r3, r2, r3
 800a744:	f241 3288 	movw	r2, #5000	; 0x1388
 800a748:	4293      	cmp	r3, r2
 800a74a:	d901      	bls.n	800a750 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e0ce      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a750:	4b4b      	ldr	r3, [pc, #300]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a754:	f003 0302 	and.w	r3, r3, #2
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d0ee      	beq.n	800a73a <HAL_RCC_OscConfig+0x386>
 800a75c:	e014      	b.n	800a788 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a75e:	f7fd f8f1 	bl	8007944 <HAL_GetTick>
 800a762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a764:	e00a      	b.n	800a77c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a766:	f7fd f8ed 	bl	8007944 <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	f241 3288 	movw	r2, #5000	; 0x1388
 800a774:	4293      	cmp	r3, r2
 800a776:	d901      	bls.n	800a77c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a778:	2303      	movs	r3, #3
 800a77a:	e0b8      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a77c:	4b40      	ldr	r3, [pc, #256]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a780:	f003 0302 	and.w	r3, r3, #2
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1ee      	bne.n	800a766 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d105      	bne.n	800a79a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a78e:	4b3c      	ldr	r3, [pc, #240]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a792:	4a3b      	ldr	r2, [pc, #236]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a798:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f000 80a4 	beq.w	800a8ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a7a4:	4b36      	ldr	r3, [pc, #216]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f003 030c 	and.w	r3, r3, #12
 800a7ac:	2b08      	cmp	r3, #8
 800a7ae:	d06b      	beq.n	800a888 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	699b      	ldr	r3, [r3, #24]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d149      	bne.n	800a84c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7b8:	4b31      	ldr	r3, [pc, #196]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a30      	ldr	r2, [pc, #192]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c4:	f7fd f8be 	bl	8007944 <HAL_GetTick>
 800a7c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7cc:	f7fd f8ba 	bl	8007944 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e087      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7de:	4b28      	ldr	r3, [pc, #160]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f0      	bne.n	800a7cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	69da      	ldr	r2, [r3, #28]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a1b      	ldr	r3, [r3, #32]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	019b      	lsls	r3, r3, #6
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a800:	085b      	lsrs	r3, r3, #1
 800a802:	3b01      	subs	r3, #1
 800a804:	041b      	lsls	r3, r3, #16
 800a806:	431a      	orrs	r2, r3
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80c:	061b      	lsls	r3, r3, #24
 800a80e:	4313      	orrs	r3, r2
 800a810:	4a1b      	ldr	r2, [pc, #108]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a816:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a818:	4b19      	ldr	r3, [pc, #100]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a18      	ldr	r2, [pc, #96]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a81e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a824:	f7fd f88e 	bl	8007944 <HAL_GetTick>
 800a828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a82a:	e008      	b.n	800a83e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a82c:	f7fd f88a 	bl	8007944 <HAL_GetTick>
 800a830:	4602      	mov	r2, r0
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d901      	bls.n	800a83e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e057      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a83e:	4b10      	ldr	r3, [pc, #64]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f0      	beq.n	800a82c <HAL_RCC_OscConfig+0x478>
 800a84a:	e04f      	b.n	800a8ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a84c:	4b0c      	ldr	r3, [pc, #48]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0b      	ldr	r2, [pc, #44]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a858:	f7fd f874 	bl	8007944 <HAL_GetTick>
 800a85c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a85e:	e008      	b.n	800a872 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a860:	f7fd f870 	bl	8007944 <HAL_GetTick>
 800a864:	4602      	mov	r2, r0
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b02      	cmp	r3, #2
 800a86c:	d901      	bls.n	800a872 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a86e:	2303      	movs	r3, #3
 800a870:	e03d      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a872:	4b03      	ldr	r3, [pc, #12]	; (800a880 <HAL_RCC_OscConfig+0x4cc>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1f0      	bne.n	800a860 <HAL_RCC_OscConfig+0x4ac>
 800a87e:	e035      	b.n	800a8ec <HAL_RCC_OscConfig+0x538>
 800a880:	40023800 	.word	0x40023800
 800a884:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a888:	4b1b      	ldr	r3, [pc, #108]	; (800a8f8 <HAL_RCC_OscConfig+0x544>)
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	699b      	ldr	r3, [r3, #24]
 800a892:	2b01      	cmp	r3, #1
 800a894:	d028      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d121      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d11a      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d111      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	3b01      	subs	r3, #1
 800a8d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d107      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d001      	beq.n	800a8ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40023800 	.word	0x40023800

0800a8fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e0d0      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a914:	4b6a      	ldr	r3, [pc, #424]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 030f 	and.w	r3, r3, #15
 800a91c:	683a      	ldr	r2, [r7, #0]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d910      	bls.n	800a944 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a922:	4b67      	ldr	r3, [pc, #412]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f023 020f 	bic.w	r2, r3, #15
 800a92a:	4965      	ldr	r1, [pc, #404]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	4313      	orrs	r3, r2
 800a930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a932:	4b63      	ldr	r3, [pc, #396]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 030f 	and.w	r3, r3, #15
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d001      	beq.n	800a944 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a940:	2301      	movs	r3, #1
 800a942:	e0b8      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d020      	beq.n	800a992 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a95c:	4b59      	ldr	r3, [pc, #356]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	4a58      	ldr	r2, [pc, #352]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f003 0308 	and.w	r3, r3, #8
 800a970:	2b00      	cmp	r3, #0
 800a972:	d005      	beq.n	800a980 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a974:	4b53      	ldr	r3, [pc, #332]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	4a52      	ldr	r2, [pc, #328]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a97a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a97e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a980:	4b50      	ldr	r3, [pc, #320]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	494d      	ldr	r1, [pc, #308]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a98e:	4313      	orrs	r3, r2
 800a990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f003 0301 	and.w	r3, r3, #1
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d040      	beq.n	800aa20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9a6:	4b47      	ldr	r3, [pc, #284]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d115      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e07f      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d107      	bne.n	800a9ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9be:	4b41      	ldr	r3, [pc, #260]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e073      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9ce:	4b3d      	ldr	r3, [pc, #244]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e06b      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9de:	4b39      	ldr	r3, [pc, #228]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f023 0203 	bic.w	r2, r3, #3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4936      	ldr	r1, [pc, #216]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9f0:	f7fc ffa8 	bl	8007944 <HAL_GetTick>
 800a9f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f6:	e00a      	b.n	800aa0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9f8:	f7fc ffa4 	bl	8007944 <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d901      	bls.n	800aa0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e053      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa0e:	4b2d      	ldr	r3, [pc, #180]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f003 020c 	and.w	r2, r3, #12
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d1eb      	bne.n	800a9f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa20:	4b27      	ldr	r3, [pc, #156]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 030f 	and.w	r3, r3, #15
 800aa28:	683a      	ldr	r2, [r7, #0]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d210      	bcs.n	800aa50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa2e:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f023 020f 	bic.w	r2, r3, #15
 800aa36:	4922      	ldr	r1, [pc, #136]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa3e:	4b20      	ldr	r3, [pc, #128]	; (800aac0 <HAL_RCC_ClockConfig+0x1c4>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	683a      	ldr	r2, [r7, #0]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d001      	beq.n	800aa50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e032      	b.n	800aab6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d008      	beq.n	800aa6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa5c:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	4916      	ldr	r1, [pc, #88]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 0308 	and.w	r3, r3, #8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d009      	beq.n	800aa8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800aa7a:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	691b      	ldr	r3, [r3, #16]
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	490e      	ldr	r1, [pc, #56]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa8e:	f000 f821 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800aa92:	4601      	mov	r1, r0
 800aa94:	4b0b      	ldr	r3, [pc, #44]	; (800aac4 <HAL_RCC_ClockConfig+0x1c8>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	091b      	lsrs	r3, r3, #4
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	4a0a      	ldr	r2, [pc, #40]	; (800aac8 <HAL_RCC_ClockConfig+0x1cc>)
 800aaa0:	5cd3      	ldrb	r3, [r2, r3]
 800aaa2:	fa21 f303 	lsr.w	r3, r1, r3
 800aaa6:	4a09      	ldr	r2, [pc, #36]	; (800aacc <HAL_RCC_ClockConfig+0x1d0>)
 800aaa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aaaa:	4b09      	ldr	r3, [pc, #36]	; (800aad0 <HAL_RCC_ClockConfig+0x1d4>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fa ff86 	bl	80059c0 <HAL_InitTick>

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	40023c00 	.word	0x40023c00
 800aac4:	40023800 	.word	0x40023800
 800aac8:	0801da64 	.word	0x0801da64
 800aacc:	20000000 	.word	0x20000000
 800aad0:	20000004 	.word	0x20000004

0800aad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aad6:	b085      	sub	sp, #20
 800aad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aada:	2300      	movs	r3, #0
 800aadc:	607b      	str	r3, [r7, #4]
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	2300      	movs	r3, #0
 800aae4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aaea:	4b63      	ldr	r3, [pc, #396]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f003 030c 	and.w	r3, r3, #12
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	d007      	beq.n	800ab06 <HAL_RCC_GetSysClockFreq+0x32>
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d008      	beq.n	800ab0c <HAL_RCC_GetSysClockFreq+0x38>
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f040 80b4 	bne.w	800ac68 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab00:	4b5e      	ldr	r3, [pc, #376]	; (800ac7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ab02:	60bb      	str	r3, [r7, #8]
      break;
 800ab04:	e0b3      	b.n	800ac6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab06:	4b5e      	ldr	r3, [pc, #376]	; (800ac80 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ab08:	60bb      	str	r3, [r7, #8]
      break;
 800ab0a:	e0b0      	b.n	800ac6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab0c:	4b5a      	ldr	r3, [pc, #360]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab14:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ab16:	4b58      	ldr	r3, [pc, #352]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d04a      	beq.n	800abb8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab22:	4b55      	ldr	r3, [pc, #340]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	099b      	lsrs	r3, r3, #6
 800ab28:	f04f 0400 	mov.w	r4, #0
 800ab2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	ea03 0501 	and.w	r5, r3, r1
 800ab38:	ea04 0602 	and.w	r6, r4, r2
 800ab3c:	4629      	mov	r1, r5
 800ab3e:	4632      	mov	r2, r6
 800ab40:	f04f 0300 	mov.w	r3, #0
 800ab44:	f04f 0400 	mov.w	r4, #0
 800ab48:	0154      	lsls	r4, r2, #5
 800ab4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ab4e:	014b      	lsls	r3, r1, #5
 800ab50:	4619      	mov	r1, r3
 800ab52:	4622      	mov	r2, r4
 800ab54:	1b49      	subs	r1, r1, r5
 800ab56:	eb62 0206 	sbc.w	r2, r2, r6
 800ab5a:	f04f 0300 	mov.w	r3, #0
 800ab5e:	f04f 0400 	mov.w	r4, #0
 800ab62:	0194      	lsls	r4, r2, #6
 800ab64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ab68:	018b      	lsls	r3, r1, #6
 800ab6a:	1a5b      	subs	r3, r3, r1
 800ab6c:	eb64 0402 	sbc.w	r4, r4, r2
 800ab70:	f04f 0100 	mov.w	r1, #0
 800ab74:	f04f 0200 	mov.w	r2, #0
 800ab78:	00e2      	lsls	r2, r4, #3
 800ab7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ab7e:	00d9      	lsls	r1, r3, #3
 800ab80:	460b      	mov	r3, r1
 800ab82:	4614      	mov	r4, r2
 800ab84:	195b      	adds	r3, r3, r5
 800ab86:	eb44 0406 	adc.w	r4, r4, r6
 800ab8a:	f04f 0100 	mov.w	r1, #0
 800ab8e:	f04f 0200 	mov.w	r2, #0
 800ab92:	0262      	lsls	r2, r4, #9
 800ab94:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800ab98:	0259      	lsls	r1, r3, #9
 800ab9a:	460b      	mov	r3, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	4621      	mov	r1, r4
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f04f 0400 	mov.w	r4, #0
 800aba8:	461a      	mov	r2, r3
 800abaa:	4623      	mov	r3, r4
 800abac:	f7f6 f864 	bl	8000c78 <__aeabi_uldivmod>
 800abb0:	4603      	mov	r3, r0
 800abb2:	460c      	mov	r4, r1
 800abb4:	60fb      	str	r3, [r7, #12]
 800abb6:	e049      	b.n	800ac4c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abb8:	4b2f      	ldr	r3, [pc, #188]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	099b      	lsrs	r3, r3, #6
 800abbe:	f04f 0400 	mov.w	r4, #0
 800abc2:	f240 11ff 	movw	r1, #511	; 0x1ff
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	ea03 0501 	and.w	r5, r3, r1
 800abce:	ea04 0602 	and.w	r6, r4, r2
 800abd2:	4629      	mov	r1, r5
 800abd4:	4632      	mov	r2, r6
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	f04f 0400 	mov.w	r4, #0
 800abde:	0154      	lsls	r4, r2, #5
 800abe0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800abe4:	014b      	lsls	r3, r1, #5
 800abe6:	4619      	mov	r1, r3
 800abe8:	4622      	mov	r2, r4
 800abea:	1b49      	subs	r1, r1, r5
 800abec:	eb62 0206 	sbc.w	r2, r2, r6
 800abf0:	f04f 0300 	mov.w	r3, #0
 800abf4:	f04f 0400 	mov.w	r4, #0
 800abf8:	0194      	lsls	r4, r2, #6
 800abfa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800abfe:	018b      	lsls	r3, r1, #6
 800ac00:	1a5b      	subs	r3, r3, r1
 800ac02:	eb64 0402 	sbc.w	r4, r4, r2
 800ac06:	f04f 0100 	mov.w	r1, #0
 800ac0a:	f04f 0200 	mov.w	r2, #0
 800ac0e:	00e2      	lsls	r2, r4, #3
 800ac10:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ac14:	00d9      	lsls	r1, r3, #3
 800ac16:	460b      	mov	r3, r1
 800ac18:	4614      	mov	r4, r2
 800ac1a:	195b      	adds	r3, r3, r5
 800ac1c:	eb44 0406 	adc.w	r4, r4, r6
 800ac20:	f04f 0100 	mov.w	r1, #0
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	02a2      	lsls	r2, r4, #10
 800ac2a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ac2e:	0299      	lsls	r1, r3, #10
 800ac30:	460b      	mov	r3, r1
 800ac32:	4614      	mov	r4, r2
 800ac34:	4618      	mov	r0, r3
 800ac36:	4621      	mov	r1, r4
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f04f 0400 	mov.w	r4, #0
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4623      	mov	r3, r4
 800ac42:	f7f6 f819 	bl	8000c78 <__aeabi_uldivmod>
 800ac46:	4603      	mov	r3, r0
 800ac48:	460c      	mov	r4, r1
 800ac4a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ac4c:	4b0a      	ldr	r3, [pc, #40]	; (800ac78 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	0c1b      	lsrs	r3, r3, #16
 800ac52:	f003 0303 	and.w	r3, r3, #3
 800ac56:	3301      	adds	r3, #1
 800ac58:	005b      	lsls	r3, r3, #1
 800ac5a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac64:	60bb      	str	r3, [r7, #8]
      break;
 800ac66:	e002      	b.n	800ac6e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac68:	4b04      	ldr	r3, [pc, #16]	; (800ac7c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ac6a:	60bb      	str	r3, [r7, #8]
      break;
 800ac6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac6e:	68bb      	ldr	r3, [r7, #8]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	00f42400 	.word	0x00f42400
 800ac80:	007a1200 	.word	0x007a1200

0800ac84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac84:	b480      	push	{r7}
 800ac86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac88:	4b03      	ldr	r3, [pc, #12]	; (800ac98 <HAL_RCC_GetHCLKFreq+0x14>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	20000000 	.word	0x20000000

0800ac9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aca0:	f7ff fff0 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800aca4:	4601      	mov	r1, r0
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <HAL_RCC_GetPCLK1Freq+0x20>)
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	0a9b      	lsrs	r3, r3, #10
 800acac:	f003 0307 	and.w	r3, r3, #7
 800acb0:	4a03      	ldr	r2, [pc, #12]	; (800acc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acb2:	5cd3      	ldrb	r3, [r2, r3]
 800acb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800acb8:	4618      	mov	r0, r3
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	40023800 	.word	0x40023800
 800acc0:	0801da74 	.word	0x0801da74

0800acc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800acc8:	f7ff ffdc 	bl	800ac84 <HAL_RCC_GetHCLKFreq>
 800accc:	4601      	mov	r1, r0
 800acce:	4b05      	ldr	r3, [pc, #20]	; (800ace4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	0b5b      	lsrs	r3, r3, #13
 800acd4:	f003 0307 	and.w	r3, r3, #7
 800acd8:	4a03      	ldr	r2, [pc, #12]	; (800ace8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acda:	5cd3      	ldrb	r3, [r2, r3]
 800acdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	40023800 	.word	0x40023800
 800ace8:	0801da74 	.word	0x0801da74

0800acec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	220f      	movs	r2, #15
 800acfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800acfc:	4b12      	ldr	r3, [pc, #72]	; (800ad48 <HAL_RCC_GetClockConfig+0x5c>)
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	f003 0203 	and.w	r2, r3, #3
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ad08:	4b0f      	ldr	r3, [pc, #60]	; (800ad48 <HAL_RCC_GetClockConfig+0x5c>)
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ad14:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <HAL_RCC_GetClockConfig+0x5c>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <HAL_RCC_GetClockConfig+0x5c>)
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	08db      	lsrs	r3, r3, #3
 800ad26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ad2e:	4b07      	ldr	r3, [pc, #28]	; (800ad4c <HAL_RCC_GetClockConfig+0x60>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 020f 	and.w	r2, r3, #15
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	601a      	str	r2, [r3, #0]
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40023800 	.word	0x40023800
 800ad4c:	40023c00 	.word	0x40023c00

0800ad50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d012      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ad78:	4b69      	ldr	r3, [pc, #420]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	4a68      	ldr	r2, [pc, #416]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ad82:	6093      	str	r3, [r2, #8]
 800ad84:	4b66      	ldr	r3, [pc, #408]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad86:	689a      	ldr	r2, [r3, #8]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8c:	4964      	ldr	r1, [pc, #400]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d017      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800adaa:	4b5d      	ldr	r3, [pc, #372]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb8:	4959      	ldr	r1, [pc, #356]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adc8:	d101      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800adca:	2301      	movs	r3, #1
 800adcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	2b00      	cmp	r3, #0
 800add4:	d101      	bne.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800add6:	2301      	movs	r3, #1
 800add8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d017      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ade6:	4b4e      	ldr	r3, [pc, #312]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ade8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf4:	494a      	ldr	r1, [pc, #296]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae04:	d101      	bne.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ae06:	2301      	movs	r3, #1
 800ae08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ae12:	2301      	movs	r3, #1
 800ae14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ae22:	2301      	movs	r3, #1
 800ae24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0320 	and.w	r3, r3, #32
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 808b 	beq.w	800af4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ae34:	4b3a      	ldr	r3, [pc, #232]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	4a39      	ldr	r2, [pc, #228]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae3e:	6413      	str	r3, [r2, #64]	; 0x40
 800ae40:	4b37      	ldr	r3, [pc, #220]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae48:	60bb      	str	r3, [r7, #8]
 800ae4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae4c:	4b35      	ldr	r3, [pc, #212]	; (800af24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a34      	ldr	r2, [pc, #208]	; (800af24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae58:	f7fc fd74 	bl	8007944 <HAL_GetTick>
 800ae5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae5e:	e008      	b.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae60:	f7fc fd70 	bl	8007944 <HAL_GetTick>
 800ae64:	4602      	mov	r2, r0
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	2b64      	cmp	r3, #100	; 0x64
 800ae6c:	d901      	bls.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ae6e:	2303      	movs	r3, #3
 800ae70:	e31e      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ae72:	4b2c      	ldr	r3, [pc, #176]	; (800af24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d0f0      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ae7e:	4b28      	ldr	r3, [pc, #160]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d035      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae96:	693a      	ldr	r2, [r7, #16]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d02e      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ae9c:	4b20      	ldr	r3, [pc, #128]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aea4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aea6:	4b1e      	ldr	r3, [pc, #120]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeaa:	4a1d      	ldr	r2, [pc, #116]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aeb0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aeb2:	4b1b      	ldr	r3, [pc, #108]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aeb6:	4a1a      	ldr	r2, [pc, #104]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aeb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aebc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aebe:	4a18      	ldr	r2, [pc, #96]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aec4:	4b16      	ldr	r3, [pc, #88]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d114      	bne.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aed0:	f7fc fd38 	bl	8007944 <HAL_GetTick>
 800aed4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aed6:	e00a      	b.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aed8:	f7fc fd34 	bl	8007944 <HAL_GetTick>
 800aedc:	4602      	mov	r2, r0
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d901      	bls.n	800aeee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e2e0      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aef2:	f003 0302 	and.w	r3, r3, #2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0ee      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af06:	d111      	bne.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800af08:	4b05      	ldr	r3, [pc, #20]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800af14:	4b04      	ldr	r3, [pc, #16]	; (800af28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800af16:	400b      	ands	r3, r1
 800af18:	4901      	ldr	r1, [pc, #4]	; (800af20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	608b      	str	r3, [r1, #8]
 800af1e:	e00b      	b.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800af20:	40023800 	.word	0x40023800
 800af24:	40007000 	.word	0x40007000
 800af28:	0ffffcff 	.word	0x0ffffcff
 800af2c:	4bac      	ldr	r3, [pc, #688]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	4aab      	ldr	r2, [pc, #684]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800af36:	6093      	str	r3, [r2, #8]
 800af38:	4ba9      	ldr	r3, [pc, #676]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af44:	49a6      	ldr	r1, [pc, #664]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af46:	4313      	orrs	r3, r2
 800af48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	2b00      	cmp	r3, #0
 800af54:	d010      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800af56:	4ba2      	ldr	r3, [pc, #648]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af5c:	4aa0      	ldr	r2, [pc, #640]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800af66:	4b9e      	ldr	r3, [pc, #632]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af70:	499b      	ldr	r1, [pc, #620]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af72:	4313      	orrs	r3, r2
 800af74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d00a      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800af84:	4b96      	ldr	r3, [pc, #600]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af92:	4993      	ldr	r1, [pc, #588]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af94:	4313      	orrs	r3, r2
 800af96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d00a      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800afa6:	4b8e      	ldr	r3, [pc, #568]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb4:	498a      	ldr	r1, [pc, #552]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afb6:	4313      	orrs	r3, r2
 800afb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00a      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800afc8:	4b85      	ldr	r3, [pc, #532]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd6:	4982      	ldr	r1, [pc, #520]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00a      	beq.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800afea:	4b7d      	ldr	r3, [pc, #500]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800afec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff8:	4979      	ldr	r1, [pc, #484]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800affa:	4313      	orrs	r3, r2
 800affc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00a      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b00c:	4b74      	ldr	r3, [pc, #464]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b012:	f023 0203 	bic.w	r2, r3, #3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01a:	4971      	ldr	r1, [pc, #452]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b02e:	4b6c      	ldr	r3, [pc, #432]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b034:	f023 020c 	bic.w	r2, r3, #12
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b03c:	4968      	ldr	r1, [pc, #416]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b050:	4b63      	ldr	r3, [pc, #396]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b056:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b05e:	4960      	ldr	r1, [pc, #384]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b060:	4313      	orrs	r3, r2
 800b062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b072:	4b5b      	ldr	r3, [pc, #364]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b078:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b080:	4957      	ldr	r1, [pc, #348]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b082:	4313      	orrs	r3, r2
 800b084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00a      	beq.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b094:	4b52      	ldr	r3, [pc, #328]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b09a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a2:	494f      	ldr	r1, [pc, #316]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b0b6:	4b4a      	ldr	r3, [pc, #296]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0c4:	4946      	ldr	r1, [pc, #280]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00a      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b0d8:	4b41      	ldr	r3, [pc, #260]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e6:	493e      	ldr	r1, [pc, #248]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b0fa:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b100:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b108:	4935      	ldr	r1, [pc, #212]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d00a      	beq.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b11c:	4b30      	ldr	r3, [pc, #192]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b11e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b122:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b12a:	492d      	ldr	r1, [pc, #180]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b12c:	4313      	orrs	r3, r2
 800b12e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d011      	beq.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b13e:	4b28      	ldr	r3, [pc, #160]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b144:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14c:	4924      	ldr	r1, [pc, #144]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b158:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b15c:	d101      	bne.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b15e:	2301      	movs	r3, #1
 800b160:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b16e:	4b1c      	ldr	r3, [pc, #112]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b174:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b17c:	4918      	ldr	r1, [pc, #96]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00b      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b190:	4b13      	ldr	r3, [pc, #76]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b196:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1a0:	490f      	ldr	r1, [pc, #60]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d005      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1b6:	f040 80d8 	bne.w	800b36a <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a08      	ldr	r2, [pc, #32]	; (800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800b1c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1c6:	f7fc fbbd 	bl	8007944 <HAL_GetTick>
 800b1ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b1cc:	e00a      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b1ce:	f7fc fbb9 	bl	8007944 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b64      	cmp	r3, #100	; 0x64
 800b1da:	d903      	bls.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e167      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800b1e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b1e4:	4bad      	ldr	r3, [pc, #692]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1ee      	bne.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f003 0301 	and.w	r3, r3, #1
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d021      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b200:	2b00      	cmp	r3, #0
 800b202:	d11d      	bne.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b204:	4ba5      	ldr	r3, [pc, #660]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b20a:	0c1b      	lsrs	r3, r3, #16
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b212:	4ba2      	ldr	r3, [pc, #648]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b218:	0e1b      	lsrs	r3, r3, #24
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	685b      	ldr	r3, [r3, #4]
 800b224:	019a      	lsls	r2, r3, #6
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	041b      	lsls	r3, r3, #16
 800b22a:	431a      	orrs	r2, r3
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	061b      	lsls	r3, r3, #24
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	071b      	lsls	r3, r3, #28
 800b238:	4998      	ldr	r1, [pc, #608]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b23a:	4313      	orrs	r3, r2
 800b23c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d004      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b254:	d00a      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d02e      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b26a:	d129      	bne.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b26c:	4b8b      	ldr	r3, [pc, #556]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	f003 0303 	and.w	r3, r3, #3
 800b278:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b27a:	4b88      	ldr	r3, [pc, #544]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b280:	0f1b      	lsrs	r3, r3, #28
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	019a      	lsls	r2, r3, #6
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	041b      	lsls	r3, r3, #16
 800b292:	431a      	orrs	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	061b      	lsls	r3, r3, #24
 800b29a:	431a      	orrs	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	071b      	lsls	r3, r3, #28
 800b2a0:	497e      	ldr	r1, [pc, #504]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b2a8:	4b7c      	ldr	r3, [pc, #496]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b2aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b2ae:	f023 021f 	bic.w	r2, r3, #31
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	4978      	ldr	r1, [pc, #480]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01d      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b2cc:	4b73      	ldr	r3, [pc, #460]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d2:	0e1b      	lsrs	r3, r3, #24
 800b2d4:	f003 030f 	and.w	r3, r3, #15
 800b2d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b2da:	4b70      	ldr	r3, [pc, #448]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2e0:	0f1b      	lsrs	r3, r3, #28
 800b2e2:	f003 0307 	and.w	r3, r3, #7
 800b2e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	019a      	lsls	r2, r3, #6
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	041b      	lsls	r3, r3, #16
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	061b      	lsls	r3, r3, #24
 800b2fa:	431a      	orrs	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	071b      	lsls	r3, r3, #28
 800b300:	4966      	ldr	r1, [pc, #408]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b302:	4313      	orrs	r3, r2
 800b304:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d011      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	019a      	lsls	r2, r3, #6
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	431a      	orrs	r2, r3
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	061b      	lsls	r3, r3, #24
 800b328:	431a      	orrs	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	071b      	lsls	r3, r3, #28
 800b330:	495a      	ldr	r1, [pc, #360]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b332:	4313      	orrs	r3, r2
 800b334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b338:	4b58      	ldr	r3, [pc, #352]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a57      	ldr	r2, [pc, #348]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b33e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b342:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b344:	f7fc fafe 	bl	8007944 <HAL_GetTick>
 800b348:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b34a:	e008      	b.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b34c:	f7fc fafa 	bl	8007944 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b64      	cmp	r3, #100	; 0x64
 800b358:	d901      	bls.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e0a8      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b35e:	4b4f      	ldr	r3, [pc, #316]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d0f0      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	f040 809e 	bne.w	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b372:	4b4a      	ldr	r3, [pc, #296]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a49      	ldr	r2, [pc, #292]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b37c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b37e:	f7fc fae1 	bl	8007944 <HAL_GetTick>
 800b382:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b384:	e008      	b.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b386:	f7fc fadd 	bl	8007944 <HAL_GetTick>
 800b38a:	4602      	mov	r2, r0
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	2b64      	cmp	r3, #100	; 0x64
 800b392:	d901      	bls.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b394:	2303      	movs	r3, #3
 800b396:	e08b      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b398:	4b40      	ldr	r3, [pc, #256]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a4:	d0ef      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d009      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d02e      	beq.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d12a      	bne.n	800b424 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3ce:	4b33      	ldr	r3, [pc, #204]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3d4:	0c1b      	lsrs	r3, r3, #16
 800b3d6:	f003 0303 	and.w	r3, r3, #3
 800b3da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b3dc:	4b2f      	ldr	r3, [pc, #188]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b3de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3e2:	0f1b      	lsrs	r3, r3, #28
 800b3e4:	f003 0307 	and.w	r3, r3, #7
 800b3e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	695b      	ldr	r3, [r3, #20]
 800b3ee:	019a      	lsls	r2, r3, #6
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	041b      	lsls	r3, r3, #16
 800b3f4:	431a      	orrs	r2, r3
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	061b      	lsls	r3, r3, #24
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	071b      	lsls	r3, r3, #28
 800b402:	4926      	ldr	r1, [pc, #152]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b404:	4313      	orrs	r3, r2
 800b406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b40c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b410:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b418:	3b01      	subs	r3, #1
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	491f      	ldr	r1, [pc, #124]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d022      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x726>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b438:	d11d      	bne.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b43a:	4b18      	ldr	r3, [pc, #96]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b43c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b440:	0e1b      	lsrs	r3, r3, #24
 800b442:	f003 030f 	and.w	r3, r3, #15
 800b446:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b448:	4b14      	ldr	r3, [pc, #80]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b44a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b44e:	0f1b      	lsrs	r3, r3, #28
 800b450:	f003 0307 	and.w	r3, r3, #7
 800b454:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	019a      	lsls	r2, r3, #6
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	041b      	lsls	r3, r3, #16
 800b462:	431a      	orrs	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	061b      	lsls	r3, r3, #24
 800b468:	431a      	orrs	r2, r3
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	071b      	lsls	r3, r3, #28
 800b46e:	490b      	ldr	r1, [pc, #44]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b470:	4313      	orrs	r3, r2
 800b472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b476:	4b09      	ldr	r3, [pc, #36]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a08      	ldr	r2, [pc, #32]	; (800b49c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7fc fa5f 	bl	8007944 <HAL_GetTick>
 800b486:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b488:	e00a      	b.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b48a:	f7fc fa5b 	bl	8007944 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b64      	cmp	r3, #100	; 0x64
 800b496:	d903      	bls.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e009      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800b49c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b4a0:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ac:	d1ed      	bne.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	40023800 	.word	0x40023800

0800b4bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e022      	b.n	800b514 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7f9 fe15 	bl	8005110 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2203      	movs	r2, #3
 800b4ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f814 	bl	800b51c <HAL_SD_InitCard>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e00a      	b.n	800b514 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b512:	2300      	movs	r3, #0
}
 800b514:	4618      	mov	r0, r3
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b51c:	b5b0      	push	{r4, r5, r7, lr}
 800b51e:	b08e      	sub	sp, #56	; 0x38
 800b520:	af04      	add	r7, sp, #16
 800b522:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b524:	2300      	movs	r3, #0
 800b526:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b52c:	2300      	movs	r3, #0
 800b52e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b530:	2300      	movs	r3, #0
 800b532:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b534:	2300      	movs	r3, #0
 800b536:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b538:	2376      	movs	r3, #118	; 0x76
 800b53a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681d      	ldr	r5, [r3, #0]
 800b540:	466c      	mov	r4, sp
 800b542:	f107 0314 	add.w	r3, r7, #20
 800b546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b54a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b54e:	f107 0308 	add.w	r3, r7, #8
 800b552:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b554:	4628      	mov	r0, r5
 800b556:	f003 fdbb 	bl	800f0d0 <SDMMC_Init>
 800b55a:	4603      	mov	r3, r0
 800b55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e03b      	b.n	800b5e4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b57a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4618      	mov	r0, r3
 800b582:	f003 fdef 	bl	800f164 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b594:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 ffca 	bl	800c530 <SD_PowerON>
 800b59c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5b0:	6a3b      	ldr	r3, [r7, #32]
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e013      	b.n	800b5e4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fee9 	bl	800c394 <SD_InitCard>
 800b5c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800b5e2:	2300      	movs	r3, #0
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3728      	adds	r7, #40	; 0x28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bdb0      	pop	{r4, r5, r7, pc}

0800b5ec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b08c      	sub	sp, #48	; 0x30
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d107      	bne.n	800b614 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b610:	2301      	movs	r3, #1
 800b612:	e0cc      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	f040 80c5 	bne.w	800b7ac <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	441a      	add	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b632:	429a      	cmp	r2, r3
 800b634:	d907      	bls.n	800b646 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e0b3      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2203      	movs	r2, #3
 800b64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2200      	movs	r2, #0
 800b654:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	4a53      	ldr	r2, [pc, #332]	; (800b7b8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b66c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b672:	4a52      	ldr	r2, [pc, #328]	; (800b7bc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800b674:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b67a:	2200      	movs	r2, #0
 800b67c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	3380      	adds	r3, #128	; 0x80
 800b688:	4619      	mov	r1, r3
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	025b      	lsls	r3, r3, #9
 800b690:	089b      	lsrs	r3, r3, #2
 800b692:	f7fc ff75 	bl	8008580 <HAL_DMA_Start_IT>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d017      	beq.n	800b6cc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b6aa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a43      	ldr	r2, [pc, #268]	; (800b7c0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b6b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e070      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0208 	orr.w	r2, r2, #8
 800b6da:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d002      	beq.n	800b6ea <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800b6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e6:	025b      	lsls	r3, r3, #9
 800b6e8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f003 fdca 	bl	800f28c <SDMMC_CmdBlockLength>
 800b6f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00f      	beq.n	800b720 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a2e      	ldr	r2, [pc, #184]	; (800b7c0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b706:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70e:	431a      	orrs	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e046      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b720:	f04f 33ff 	mov.w	r3, #4294967295
 800b724:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	025b      	lsls	r3, r3, #9
 800b72a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b72c:	2390      	movs	r3, #144	; 0x90
 800b72e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b730:	2302      	movs	r3, #2
 800b732:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b734:	2300      	movs	r3, #0
 800b736:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b738:	2301      	movs	r3, #1
 800b73a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f107 0210 	add.w	r2, r7, #16
 800b744:	4611      	mov	r1, r2
 800b746:	4618      	mov	r0, r3
 800b748:	f003 fd74 	bl	800f234 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d90a      	bls.n	800b768 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2282      	movs	r2, #130	; 0x82
 800b756:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b75e:	4618      	mov	r0, r3
 800b760:	f003 fdd8 	bl	800f314 <SDMMC_CmdReadMultiBlock>
 800b764:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b766:	e009      	b.n	800b77c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2281      	movs	r2, #129	; 0x81
 800b76c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b774:	4618      	mov	r0, r3
 800b776:	f003 fdab 	bl	800f2d0 <SDMMC_CmdReadSingleBlock>
 800b77a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d012      	beq.n	800b7a8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a0e      	ldr	r2, [pc, #56]	; (800b7c0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b788:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	431a      	orrs	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e002      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e000      	b.n	800b7ae <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800b7ac:	2302      	movs	r3, #2
  }
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3730      	adds	r7, #48	; 0x30
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	0800c1a3 	.word	0x0800c1a3
 800b7bc:	0800c215 	.word	0x0800c215
 800b7c0:	004005ff 	.word	0x004005ff

0800b7c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08c      	sub	sp, #48	; 0x30
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d107      	bne.n	800b7ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e0cf      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b7f2:	b2db      	uxtb	r3, r3
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	f040 80c8 	bne.w	800b98a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	441a      	add	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d907      	bls.n	800b81e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b812:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e0b6      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2203      	movs	r2, #3
 800b822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f042 021a 	orr.w	r2, r2, #26
 800b83c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b842:	4a54      	ldr	r2, [pc, #336]	; (800b994 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b844:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b84a:	4a53      	ldr	r2, [pc, #332]	; (800b998 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b84c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b852:	2200      	movs	r2, #0
 800b854:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85a:	2b01      	cmp	r3, #1
 800b85c:	d002      	beq.n	800b864 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	025b      	lsls	r3, r3, #9
 800b862:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b86c:	4618      	mov	r0, r3
 800b86e:	f003 fd0d 	bl	800f28c <SDMMC_CmdBlockLength>
 800b872:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a47      	ldr	r2, [pc, #284]	; (800b99c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b880:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b888:	431a      	orrs	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e078      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d90a      	bls.n	800b8b6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	22a0      	movs	r2, #160	; 0xa0
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f003 fd75 	bl	800f39c <SDMMC_CmdWriteMultiBlock>
 800b8b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b8b4:	e009      	b.n	800b8ca <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2290      	movs	r2, #144	; 0x90
 800b8ba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f003 fd48 	bl	800f358 <SDMMC_CmdWriteSingleBlock>
 800b8c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d012      	beq.n	800b8f6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a31      	ldr	r2, [pc, #196]	; (800b99c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b8d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8de:	431a      	orrs	r2, r3
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e04a      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f042 0208 	orr.w	r2, r2, #8
 800b904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3380      	adds	r3, #128	; 0x80
 800b912:	461a      	mov	r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	025b      	lsls	r3, r3, #9
 800b918:	089b      	lsrs	r3, r3, #2
 800b91a:	f7fc fe31 	bl	8008580 <HAL_DMA_Start_IT>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d01a      	beq.n	800b95a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f022 021a 	bic.w	r2, r2, #26
 800b932:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	4a18      	ldr	r2, [pc, #96]	; (800b99c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b93a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b940:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e018      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b95a:	f04f 33ff 	mov.w	r3, #4294967295
 800b95e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	025b      	lsls	r3, r3, #9
 800b964:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b966:	2390      	movs	r3, #144	; 0x90
 800b968:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b96a:	2300      	movs	r3, #0
 800b96c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b96e:	2300      	movs	r3, #0
 800b970:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b972:	2301      	movs	r3, #1
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f107 0210 	add.w	r2, r7, #16
 800b97e:	4611      	mov	r1, r2
 800b980:	4618      	mov	r0, r3
 800b982:	f003 fc57 	bl	800f234 <SDMMC_ConfigData>

      return HAL_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	e000      	b.n	800b98c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b98a:	2302      	movs	r3, #2
  }
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3730      	adds	r7, #48	; 0x30
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}
 800b994:	0800c179 	.word	0x0800c179
 800b998:	0800c215 	.word	0x0800c215
 800b99c:	004005ff 	.word	0x004005ff

0800b9a0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ac:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d008      	beq.n	800b9ce <HAL_SD_IRQHandler+0x2e>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f003 0308 	and.w	r3, r3, #8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 ffc8 	bl	800c95c <SD_Read_IT>
 800b9cc:	e153      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f000 808d 	beq.w	800baf8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9e6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4ba3      	ldr	r3, [pc, #652]	; (800bc80 <HAL_SD_IRQHandler+0x2e0>)
 800b9f4:	400b      	ands	r3, r1
 800b9f6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f022 0201 	bic.w	r2, r2, #1
 800ba06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f003 0308 	and.w	r3, r3, #8
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d039      	beq.n	800ba86 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_SD_IRQHandler+0x86>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f003 0320 	and.w	r3, r3, #32
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d011      	beq.n	800ba4a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f003 fcd8 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800ba30:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d008      	beq.n	800ba4a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	431a      	orrs	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 f921 	bl	800bc8c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d104      	bne.n	800ba76 <HAL_SD_IRQHandler+0xd6>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f005 fc5a 	bl	8011330 <HAL_SD_RxCpltCallback>
 800ba7c:	e0fb      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f005 fc4c 	bl	801131c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba84:	e0f7      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f000 80f2 	beq.w	800bc76 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f003 0320 	and.w	r3, r3, #32
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d011      	beq.n	800bac0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4618      	mov	r0, r3
 800baa2:	f003 fc9d 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800baa6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d008      	beq.n	800bac0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	431a      	orrs	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f8e6 	bl	800bc8c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f040 80d5 	bne.w	800bc76 <HAL_SD_IRQHandler+0x2d6>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	f040 80cf 	bne.w	800bc76 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f022 0208 	bic.w	r2, r2, #8
 800bae6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2201      	movs	r2, #1
 800baec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f005 fc13 	bl	801131c <HAL_SD_TxCpltCallback>
}
 800baf6:	e0be      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bafe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d008      	beq.n	800bb18 <HAL_SD_IRQHandler+0x178>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f003 0308 	and.w	r3, r3, #8
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 ff74 	bl	800c9fe <SD_Write_IT>
 800bb16:	e0ae      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb1e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 80a7 	beq.w	800bc76 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2e:	f003 0302 	and.w	r3, r3, #2
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d005      	beq.n	800bb42 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3a:	f043 0202 	orr.w	r2, r3, #2
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb48:	f003 0308 	and.w	r3, r3, #8
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb54:	f043 0208 	orr.w	r2, r3, #8
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb62:	f003 0320 	and.w	r3, r3, #32
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb6e:	f043 0220 	orr.w	r2, r3, #32
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d005      	beq.n	800bb90 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb88:	f043 0210 	orr.w	r2, r3, #16
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f240 523a 	movw	r2, #1338	; 0x53a
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bba8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f003 fc16 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f003 0308 	and.w	r3, r3, #8
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00a      	beq.n	800bbe0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 f857 	bl	800bc8c <HAL_SD_ErrorCallback>
}
 800bbde:	e04a      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d045      	beq.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f003 0310 	and.w	r3, r3, #16
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d104      	bne.n	800bbfe <HAL_SD_IRQHandler+0x25e>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d011      	beq.n	800bc22 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc02:	4a20      	ldr	r2, [pc, #128]	; (800bc84 <HAL_SD_IRQHandler+0x2e4>)
 800bc04:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fc fd88 	bl	8008720 <HAL_DMA_Abort_IT>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d02f      	beq.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fb4c 	bl	800c2b8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bc20:	e029      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d104      	bne.n	800bc36 <HAL_SD_IRQHandler+0x296>
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f003 0302 	and.w	r3, r3, #2
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d011      	beq.n	800bc5a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3a:	4a13      	ldr	r2, [pc, #76]	; (800bc88 <HAL_SD_IRQHandler+0x2e8>)
 800bc3c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7fc fd6c 	bl	8008720 <HAL_DMA_Abort_IT>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d013      	beq.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fb67 	bl	800c326 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bc58:	e00d      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f005 fb4a 	bl	8011308 <HAL_SD_AbortCallback>
}
 800bc74:	e7ff      	b.n	800bc76 <HAL_SD_IRQHandler+0x2d6>
 800bc76:	bf00      	nop
 800bc78:	3710      	adds	r7, #16
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	ffff3ec5 	.word	0xffff3ec5
 800bc84:	0800c2b9 	.word	0x0800c2b9
 800bc88:	0800c327 	.word	0x0800c327

0800bc8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcae:	0f9b      	lsrs	r3, r3, #30
 800bcb0:	b2da      	uxtb	r2, r3
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcba:	0e9b      	lsrs	r3, r3, #26
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 030f 	and.w	r3, r3, #15
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bccc:	0e1b      	lsrs	r3, r3, #24
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcde:	0c1b      	lsrs	r3, r3, #16
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcea:	0a1b      	lsrs	r3, r3, #8
 800bcec:	b2da      	uxtb	r2, r3
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd00:	0d1b      	lsrs	r3, r3, #20
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd0c:	0c1b      	lsrs	r3, r3, #16
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	b2da      	uxtb	r2, r3
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd1e:	0bdb      	lsrs	r3, r3, #15
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	f003 0301 	and.w	r3, r3, #1
 800bd26:	b2da      	uxtb	r2, r3
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd30:	0b9b      	lsrs	r3, r3, #14
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd42:	0b5b      	lsrs	r3, r3, #13
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	f003 0301 	and.w	r3, r3, #1
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd54:	0b1b      	lsrs	r3, r3, #12
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	2200      	movs	r2, #0
 800bd66:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d163      	bne.n	800be38 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd74:	009a      	lsls	r2, r3, #2
 800bd76:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bd80:	0f92      	lsrs	r2, r2, #30
 800bd82:	431a      	orrs	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd8c:	0edb      	lsrs	r3, r3, #27
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	f003 0307 	and.w	r3, r3, #7
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd9e:	0e1b      	lsrs	r3, r3, #24
 800bda0:	b2db      	uxtb	r3, r3
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb0:	0d5b      	lsrs	r3, r3, #21
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f003 0307 	and.w	r3, r3, #7
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc2:	0c9b      	lsrs	r3, r3, #18
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	b2da      	uxtb	r2, r3
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdd4:	0bdb      	lsrs	r3, r3, #15
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	f003 0307 	and.w	r3, r3, #7
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	1c5a      	adds	r2, r3, #1
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	7e1b      	ldrb	r3, [r3, #24]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	f003 0307 	and.w	r3, r3, #7
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800be02:	fb02 f203 	mul.w	r2, r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	7a1b      	ldrb	r3, [r3, #8]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	f003 030f 	and.w	r3, r3, #15
 800be14:	2201      	movs	r2, #1
 800be16:	409a      	lsls	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800be24:	0a52      	lsrs	r2, r2, #9
 800be26:	fb02 f203 	mul.w	r2, r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be34:	661a      	str	r2, [r3, #96]	; 0x60
 800be36:	e031      	b.n	800be9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d11d      	bne.n	800be7c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be44:	041b      	lsls	r3, r3, #16
 800be46:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be4e:	0c1b      	lsrs	r3, r3, #16
 800be50:	431a      	orrs	r2, r3
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	3301      	adds	r3, #1
 800be5c:	029a      	lsls	r2, r3, #10
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be70:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	661a      	str	r2, [r3, #96]	; 0x60
 800be7a:	e00f      	b.n	800be9c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	4a58      	ldr	r2, [pc, #352]	; (800bfe4 <HAL_SD_GetCardCSD+0x344>)
 800be82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be98:	2301      	movs	r3, #1
 800be9a:	e09d      	b.n	800bfd8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bea0:	0b9b      	lsrs	r3, r3, #14
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	f003 0301 	and.w	r3, r3, #1
 800bea8:	b2da      	uxtb	r2, r3
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800beb2:	09db      	lsrs	r3, r3, #7
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beba:	b2da      	uxtb	r2, r3
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beca:	b2da      	uxtb	r2, r3
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bed4:	0fdb      	lsrs	r3, r3, #31
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bee0:	0f5b      	lsrs	r3, r3, #29
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	b2da      	uxtb	r2, r3
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bef2:	0e9b      	lsrs	r3, r3, #26
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	f003 0307 	and.w	r3, r3, #7
 800befa:	b2da      	uxtb	r2, r3
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf04:	0d9b      	lsrs	r3, r3, #22
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf16:	0d5b      	lsrs	r3, r3, #21
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf32:	0c1b      	lsrs	r3, r3, #16
 800bf34:	b2db      	uxtb	r3, r3
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	b2da      	uxtb	r2, r3
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf46:	0bdb      	lsrs	r3, r3, #15
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf5a:	0b9b      	lsrs	r3, r3, #14
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf6e:	0b5b      	lsrs	r3, r3, #13
 800bf70:	b2db      	uxtb	r3, r3
 800bf72:	f003 0301 	and.w	r3, r3, #1
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf82:	0b1b      	lsrs	r3, r3, #12
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf96:	0a9b      	lsrs	r3, r3, #10
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	b2da      	uxtb	r2, r3
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f003 0303 	and.w	r3, r3, #3
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	085b      	lsrs	r3, r3, #1
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	004005ff 	.word	0x004005ff

0800bfe8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c032:	2300      	movs	r3, #0
}
 800c034:	4618      	mov	r0, r3
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c040:	b5b0      	push	{r4, r5, r7, lr}
 800c042:	b08e      	sub	sp, #56	; 0x38
 800c044:	af04      	add	r7, sp, #16
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2203      	movs	r2, #3
 800c04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c056:	2b03      	cmp	r3, #3
 800c058:	d02e      	beq.n	800c0b8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c060:	d106      	bne.n	800c070 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	639a      	str	r2, [r3, #56]	; 0x38
 800c06e:	e029      	b.n	800c0c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c076:	d10a      	bne.n	800c08e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fb0f 	bl	800c69c <SD_WideBus_Enable>
 800c07e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38
 800c08c:	e01a      	b.n	800c0c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fb4c 	bl	800c732 <SD_WideBus_Disable>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	639a      	str	r2, [r3, #56]	; 0x38
 800c0a8:	e00c      	b.n	800c0c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	639a      	str	r2, [r3, #56]	; 0x38
 800c0b6:	e005      	b.n	800c0c4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d009      	beq.n	800c0e0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a18      	ldr	r2, [pc, #96]	; (800c134 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c0d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e024      	b.n	800c12a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	685b      	ldr	r3, [r3, #4]
 800c0e4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	695b      	ldr	r3, [r3, #20]
 800c0fa:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	699b      	ldr	r3, [r3, #24]
 800c100:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681d      	ldr	r5, [r3, #0]
 800c106:	466c      	mov	r4, sp
 800c108:	f107 0318 	add.w	r3, r7, #24
 800c10c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c114:	f107 030c 	add.w	r3, r7, #12
 800c118:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c11a:	4628      	mov	r0, r5
 800c11c:	f002 ffd8 	bl	800f0d0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2201      	movs	r2, #1
 800c124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3728      	adds	r7, #40	; 0x28
 800c12e:	46bd      	mov	sp, r7
 800c130:	bdb0      	pop	{r4, r5, r7, pc}
 800c132:	bf00      	nop
 800c134:	004005ff 	.word	0x004005ff

0800c138 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b086      	sub	sp, #24
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c144:	f107 030c 	add.w	r3, r7, #12
 800c148:	4619      	mov	r1, r3
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa7e 	bl	800c64c <SD_SendStatus>
 800c150:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d005      	beq.n	800c164 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	0a5b      	lsrs	r3, r3, #9
 800c168:	f003 030f 	and.w	r3, r3, #15
 800c16c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c16e:	693b      	ldr	r3, [r7, #16]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3718      	adds	r7, #24
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c178:	b480      	push	{r7}
 800c17a:	b085      	sub	sp, #20
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c184:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c194:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c196:	bf00      	nop
 800c198:	3714      	adds	r7, #20
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr

0800c1a2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c1a2:	b580      	push	{r7, lr}
 800c1a4:	b084      	sub	sp, #16
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ae:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1b4:	2b82      	cmp	r3, #130	; 0x82
 800c1b6:	d111      	bne.n	800c1dc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f003 f90f 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800c1c2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d008      	beq.n	800c1dc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f7ff fd58 	bl	800bc8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0208 	bic.w	r2, r2, #8
 800c1ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f240 523a 	movw	r2, #1338	; 0x53a
 800c1f4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2200      	movs	r2, #0
 800c202:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c204:	68f8      	ldr	r0, [r7, #12]
 800c206:	f005 f893 	bl	8011330 <HAL_SD_RxCpltCallback>
#endif
}
 800c20a:	bf00      	nop
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
	...

0800c214 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c220:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f7fc fc28 	bl	8008a78 <HAL_DMA_GetError>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b02      	cmp	r3, #2
 800c22c:	d03e      	beq.n	800c2ac <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c234:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c23a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	2b01      	cmp	r3, #1
 800c242:	d002      	beq.n	800c24a <SD_DMAError+0x36>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b01      	cmp	r3, #1
 800c248:	d12d      	bne.n	800c2a6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a19      	ldr	r2, [pc, #100]	; (800c2b4 <SD_DMAError+0xa0>)
 800c250:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c260:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c266:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c26e:	6978      	ldr	r0, [r7, #20]
 800c270:	f7ff ff62 	bl	800c138 <HAL_SD_GetCardState>
 800c274:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2b06      	cmp	r3, #6
 800c27a:	d002      	beq.n	800c282 <SD_DMAError+0x6e>
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	2b05      	cmp	r3, #5
 800c280:	d10a      	bne.n	800c298 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4618      	mov	r0, r3
 800c288:	f003 f8aa 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800c28c:	4602      	mov	r2, r0
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c292:	431a      	orrs	r2, r3
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c2a6:	6978      	ldr	r0, [r7, #20]
 800c2a8:	f7ff fcf0 	bl	800bc8c <HAL_SD_ErrorCallback>
#endif
  }
}
 800c2ac:	bf00      	nop
 800c2ae:	3718      	adds	r7, #24
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	004005ff 	.word	0x004005ff

0800c2b8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	f7ff ff31 	bl	800c138 <HAL_SD_GetCardState>
 800c2d6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	2b06      	cmp	r3, #6
 800c2ea:	d002      	beq.n	800c2f2 <SD_DMATxAbort+0x3a>
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	2b05      	cmp	r3, #5
 800c2f0:	d10a      	bne.n	800c308 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f003 f872 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c302:	431a      	orrs	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d103      	bne.n	800c318 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f004 fff9 	bl	8011308 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c316:	e002      	b.n	800c31e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f7ff fcb7 	bl	800bc8c <HAL_SD_ErrorCallback>
}
 800c31e:	bf00      	nop
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b084      	sub	sp, #16
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f240 523a 	movw	r2, #1338	; 0x53a
 800c33c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f7ff fefa 	bl	800c138 <HAL_SD_GetCardState>
 800c344:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	2b06      	cmp	r3, #6
 800c358:	d002      	beq.n	800c360 <SD_DMARxAbort+0x3a>
 800c35a:	68bb      	ldr	r3, [r7, #8]
 800c35c:	2b05      	cmp	r3, #5
 800c35e:	d10a      	bne.n	800c376 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4618      	mov	r0, r3
 800c366:	f003 f83b 	bl	800f3e0 <SDMMC_CmdStopTransfer>
 800c36a:	4602      	mov	r2, r0
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c370:	431a      	orrs	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d103      	bne.n	800c386 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f004 ffc2 	bl	8011308 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c384:	e002      	b.n	800c38c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff fc80 	bl	800bc8c <HAL_SD_ErrorCallback>
}
 800c38c:	bf00      	nop
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c394:	b5b0      	push	{r4, r5, r7, lr}
 800c396:	b094      	sub	sp, #80	; 0x50
 800c398:	af04      	add	r7, sp, #16
 800c39a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c39c:	2301      	movs	r3, #1
 800c39e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f002 feec 	bl	800f182 <SDMMC_GetPowerState>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d102      	bne.n	800c3b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c3b4:	e0b7      	b.n	800c526 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ba:	2b03      	cmp	r3, #3
 800c3bc:	d02f      	beq.n	800c41e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f003 f917 	bl	800f5f6 <SDMMC_CmdSendCID>
 800c3c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <SD_InitCard+0x40>
    {
      return errorstate;
 800c3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d2:	e0a8      	b.n	800c526 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f002 ff17 	bl	800f20e <SDMMC_GetResponse>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2104      	movs	r1, #4
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f002 ff0e 	bl	800f20e <SDMMC_GetResponse>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	2108      	movs	r1, #8
 800c3fe:	4618      	mov	r0, r3
 800c400:	f002 ff05 	bl	800f20e <SDMMC_GetResponse>
 800c404:	4602      	mov	r2, r0
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	210c      	movs	r1, #12
 800c410:	4618      	mov	r0, r3
 800c412:	f002 fefc 	bl	800f20e <SDMMC_GetResponse>
 800c416:	4602      	mov	r2, r0
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	2b03      	cmp	r3, #3
 800c424:	d00d      	beq.n	800c442 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f107 020e 	add.w	r2, r7, #14
 800c42e:	4611      	mov	r1, r2
 800c430:	4618      	mov	r0, r3
 800c432:	f003 f91d 	bl	800f670 <SDMMC_CmdSetRelAdd>
 800c436:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <SD_InitCard+0xae>
    {
      return errorstate;
 800c43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c440:	e071      	b.n	800c526 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c446:	2b03      	cmp	r3, #3
 800c448:	d036      	beq.n	800c4b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c44a:	89fb      	ldrh	r3, [r7, #14]
 800c44c:	461a      	mov	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c45a:	041b      	lsls	r3, r3, #16
 800c45c:	4619      	mov	r1, r3
 800c45e:	4610      	mov	r0, r2
 800c460:	f003 f8e7 	bl	800f632 <SDMMC_CmdSendCSD>
 800c464:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d001      	beq.n	800c470 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c46e:	e05a      	b.n	800c526 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2100      	movs	r1, #0
 800c476:	4618      	mov	r0, r3
 800c478:	f002 fec9 	bl	800f20e <SDMMC_GetResponse>
 800c47c:	4602      	mov	r2, r0
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2104      	movs	r1, #4
 800c488:	4618      	mov	r0, r3
 800c48a:	f002 fec0 	bl	800f20e <SDMMC_GetResponse>
 800c48e:	4602      	mov	r2, r0
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2108      	movs	r1, #8
 800c49a:	4618      	mov	r0, r3
 800c49c:	f002 feb7 	bl	800f20e <SDMMC_GetResponse>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	210c      	movs	r1, #12
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f002 feae 	bl	800f20e <SDMMC_GetResponse>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2104      	movs	r1, #4
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f002 fea5 	bl	800f20e <SDMMC_GetResponse>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	0d1a      	lsrs	r2, r3, #20
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c4cc:	f107 0310 	add.w	r3, r7, #16
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff fbe4 	bl	800bca0 <HAL_SD_GetCardCSD>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d002      	beq.n	800c4e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c4de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c4e2:	e020      	b.n	800c526 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6819      	ldr	r1, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	f04f 0400 	mov.w	r4, #0
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	f002 ff94 	bl	800f424 <SDMMC_CmdSelDesel>
 800c4fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <SD_InitCard+0x174>
  {
    return errorstate;
 800c504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c506:	e00e      	b.n	800c526 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681d      	ldr	r5, [r3, #0]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	466c      	mov	r4, sp
 800c510:	f103 0210 	add.w	r2, r3, #16
 800c514:	ca07      	ldmia	r2, {r0, r1, r2}
 800c516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c51a:	3304      	adds	r3, #4
 800c51c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c51e:	4628      	mov	r0, r5
 800c520:	f002 fdd6 	bl	800f0d0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3740      	adds	r7, #64	; 0x40
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c530 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f002 ff8e 	bl	800f46a <SDMMC_CmdGoIdleState>
 800c54e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d001      	beq.n	800c55a <SD_PowerON+0x2a>
  {
    return errorstate;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	e072      	b.n	800c640 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4618      	mov	r0, r3
 800c560:	f002 ffa1 	bl	800f4a6 <SDMMC_CmdOperCond>
 800c564:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00d      	beq.n	800c588 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4618      	mov	r0, r3
 800c578:	f002 ff77 	bl	800f46a <SDMMC_CmdGoIdleState>
 800c57c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <SD_PowerON+0x5e>
    {
      return errorstate;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	e05b      	b.n	800c640 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2201      	movs	r2, #1
 800c58c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c592:	2b01      	cmp	r3, #1
 800c594:	d137      	bne.n	800c606 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2100      	movs	r1, #0
 800c59c:	4618      	mov	r0, r3
 800c59e:	f002 ffa1 	bl	800f4e4 <SDMMC_CmdAppCommand>
 800c5a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d02d      	beq.n	800c606 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5ae:	e047      	b.n	800c640 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f002 ff94 	bl	800f4e4 <SDMMC_CmdAppCommand>
 800c5bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <SD_PowerON+0x98>
    {
      return errorstate;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	e03b      	b.n	800c640 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	491e      	ldr	r1, [pc, #120]	; (800c648 <SD_PowerON+0x118>)
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f002 ffaa 	bl	800f528 <SDMMC_CmdAppOperCommand>
 800c5d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c5dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c5e0:	e02e      	b.n	800c640 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f002 fe10 	bl	800f20e <SDMMC_GetResponse>
 800c5ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	0fdb      	lsrs	r3, r3, #31
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d101      	bne.n	800c5fc <SD_PowerON+0xcc>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	e000      	b.n	800c5fe <SD_PowerON+0xce>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	613b      	str	r3, [r7, #16]

    count++;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	3301      	adds	r3, #1
 800c604:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d802      	bhi.n	800c616 <SD_PowerON+0xe6>
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0cc      	beq.n	800c5b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c61c:	4293      	cmp	r3, r2
 800c61e:	d902      	bls.n	800c626 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c624:	e00c      	b.n	800c640 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	645a      	str	r2, [r3, #68]	; 0x44
 800c636:	e002      	b.n	800c63e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c63e:	2300      	movs	r3, #0
}
 800c640:	4618      	mov	r0, r3
 800c642:	3718      	adds	r7, #24
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}
 800c648:	c1100000 	.word	0xc1100000

0800c64c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
 800c654:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c65c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c660:	e018      	b.n	800c694 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c66a:	041b      	lsls	r3, r3, #16
 800c66c:	4619      	mov	r1, r3
 800c66e:	4610      	mov	r0, r2
 800c670:	f003 f81f 	bl	800f6b2 <SDMMC_CmdSendStatus>
 800c674:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	e009      	b.n	800c694 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2100      	movs	r1, #0
 800c686:	4618      	mov	r0, r3
 800c688:	f002 fdc1 	bl	800f20e <SDMMC_GetResponse>
 800c68c:	4602      	mov	r2, r0
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c692:	2300      	movs	r3, #0
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f002 fdab 	bl	800f20e <SDMMC_GetResponse>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6c2:	d102      	bne.n	800c6ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c6c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c6c8:	e02f      	b.n	800c72a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c6ca:	f107 030c 	add.w	r3, r7, #12
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f879 	bl	800c7c8 <SD_FindSCR>
 800c6d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d001      	beq.n	800c6e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	e023      	b.n	800c72a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01c      	beq.n	800c726 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6f4:	041b      	lsls	r3, r3, #16
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f002 fef3 	bl	800f4e4 <SDMMC_CmdAppCommand>
 800c6fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d001      	beq.n	800c70a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	e00f      	b.n	800c72a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	2102      	movs	r1, #2
 800c710:	4618      	mov	r0, r3
 800c712:	f002 ff2d 	bl	800f570 <SDMMC_CmdBusWidth>
 800c716:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	e003      	b.n	800c72a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c722:	2300      	movs	r3, #0
 800c724:	e001      	b.n	800c72a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c726:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3718      	adds	r7, #24
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}

0800c732 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c732:	b580      	push	{r7, lr}
 800c734:	b086      	sub	sp, #24
 800c736:	af00      	add	r7, sp, #0
 800c738:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c73a:	2300      	movs	r3, #0
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	2300      	movs	r3, #0
 800c740:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2100      	movs	r1, #0
 800c748:	4618      	mov	r0, r3
 800c74a:	f002 fd60 	bl	800f20e <SDMMC_GetResponse>
 800c74e:	4603      	mov	r3, r0
 800c750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c758:	d102      	bne.n	800c760 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c75a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c75e:	e02f      	b.n	800c7c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c760:	f107 030c 	add.w	r3, r7, #12
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f82e 	bl	800c7c8 <SD_FindSCR>
 800c76c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d001      	beq.n	800c778 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	e023      	b.n	800c7c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d01c      	beq.n	800c7bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681a      	ldr	r2, [r3, #0]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c78a:	041b      	lsls	r3, r3, #16
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f002 fea8 	bl	800f4e4 <SDMMC_CmdAppCommand>
 800c794:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d001      	beq.n	800c7a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	e00f      	b.n	800c7c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f002 fee2 	bl	800f570 <SDMMC_CmdBusWidth>
 800c7ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	e003      	b.n	800c7c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	e001      	b.n	800c7c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3718      	adds	r7, #24
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c7c8:	b590      	push	{r4, r7, lr}
 800c7ca:	b08f      	sub	sp, #60	; 0x3c
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c7d2:	f7fb f8b7 	bl	8007944 <HAL_GetTick>
 800c7d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60bb      	str	r3, [r7, #8]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2108      	movs	r1, #8
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f002 fd4c 	bl	800f28c <SDMMC_CmdBlockLength>
 800c7f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	e0a9      	b.n	800c954 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c808:	041b      	lsls	r3, r3, #16
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f002 fe69 	bl	800f4e4 <SDMMC_CmdAppCommand>
 800c812:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <SD_FindSCR+0x56>
  {
    return errorstate;
 800c81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81c:	e09a      	b.n	800c954 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c81e:	f04f 33ff 	mov.w	r3, #4294967295
 800c822:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c824:	2308      	movs	r3, #8
 800c826:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c828:	2330      	movs	r3, #48	; 0x30
 800c82a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c82c:	2302      	movs	r3, #2
 800c82e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c830:	2300      	movs	r3, #0
 800c832:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c834:	2301      	movs	r3, #1
 800c836:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f107 0210 	add.w	r2, r7, #16
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f002 fcf6 	bl	800f234 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f002 feb1 	bl	800f5b4 <SDMMC_CmdSendSCR>
 800c852:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	2b00      	cmp	r3, #0
 800c858:	d022      	beq.n	800c8a0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85c:	e07a      	b.n	800c954 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d00e      	beq.n	800c88a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6819      	ldr	r1, [r3, #0]
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	f107 0208 	add.w	r2, r7, #8
 800c878:	18d4      	adds	r4, r2, r3
 800c87a:	4608      	mov	r0, r1
 800c87c:	f002 fc54 	bl	800f128 <SDMMC_ReadFIFO>
 800c880:	4603      	mov	r3, r0
 800c882:	6023      	str	r3, [r4, #0]
      index++;
 800c884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c886:	3301      	adds	r3, #1
 800c888:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c88a:	f7fb f85b 	bl	8007944 <HAL_GetTick>
 800c88e:	4602      	mov	r2, r0
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	1ad3      	subs	r3, r2, r3
 800c894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c898:	d102      	bne.n	800c8a0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c89a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c89e:	e059      	b.n	800c954 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8a6:	f240 432a 	movw	r3, #1066	; 0x42a
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0d6      	beq.n	800c85e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b6:	f003 0308 	and.w	r3, r3, #8
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d005      	beq.n	800c8ca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2208      	movs	r2, #8
 800c8c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	e044      	b.n	800c954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d005      	beq.n	800c8e4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e037      	b.n	800c954 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8ea:	f003 0320 	and.w	r3, r3, #32
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d005      	beq.n	800c8fe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c8fa:	2320      	movs	r3, #32
 800c8fc:	e02a      	b.n	800c954 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f240 523a 	movw	r2, #1338	; 0x53a
 800c906:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	061a      	lsls	r2, r3, #24
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	021b      	lsls	r3, r3, #8
 800c910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c914:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	0a1b      	lsrs	r3, r3, #8
 800c91a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c91e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	0e1b      	lsrs	r3, r3, #24
 800c924:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	601a      	str	r2, [r3, #0]
    scr++;
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	3304      	adds	r3, #4
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	061a      	lsls	r2, r3, #24
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	021b      	lsls	r3, r3, #8
 800c938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c93c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	0a1b      	lsrs	r3, r3, #8
 800c942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c946:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	0e1b      	lsrs	r3, r3, #24
 800c94c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c950:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	373c      	adds	r7, #60	; 0x3c
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd90      	pop	{r4, r7, pc}

0800c95c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c968:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d03f      	beq.n	800c9f6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c976:	2300      	movs	r3, #0
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	e033      	b.n	800c9e4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4618      	mov	r0, r3
 800c982:	f002 fbd1 	bl	800f128 <SDMMC_ReadFIFO>
 800c986:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	3301      	adds	r3, #1
 800c994:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3b01      	subs	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	0a1b      	lsrs	r3, r3, #8
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	3b01      	subs	r3, #1
 800c9b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	0c1b      	lsrs	r3, r3, #16
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	0e1b      	lsrs	r3, r3, #24
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	617b      	str	r3, [r7, #20]
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b07      	cmp	r3, #7
 800c9e8:	d9c8      	bls.n	800c97c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c9f6:	bf00      	nop
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b086      	sub	sp, #24
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6a1b      	ldr	r3, [r3, #32]
 800ca0a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d043      	beq.n	800caa0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ca18:	2300      	movs	r3, #0
 800ca1a:	617b      	str	r3, [r7, #20]
 800ca1c:	e037      	b.n	800ca8e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	3301      	adds	r3, #1
 800ca28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	021a      	lsls	r2, r3, #8
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	3b01      	subs	r3, #1
 800ca46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	041a      	lsls	r2, r3, #16
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3301      	adds	r3, #1
 800ca58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	061a      	lsls	r2, r3, #24
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	3b01      	subs	r3, #1
 800ca76:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f107 0208 	add.w	r2, r7, #8
 800ca80:	4611      	mov	r1, r2
 800ca82:	4618      	mov	r0, r3
 800ca84:	f002 fb5d 	bl	800f142 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	617b      	str	r3, [r7, #20]
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	2b07      	cmp	r3, #7
 800ca92:	d9c4      	bls.n	800ca1e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	68fa      	ldr	r2, [r7, #12]
 800ca98:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800caa0:	bf00      	nop
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}

0800caa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e084      	b.n	800cbc4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2200      	movs	r2, #0
 800cabe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d106      	bne.n	800cada <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7f8 fc05 	bl	80052e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2202      	movs	r2, #2
 800cade:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caf0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cafa:	d902      	bls.n	800cb02 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	e002      	b.n	800cb08 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cb02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	68db      	ldr	r3, [r3, #12]
 800cb0c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800cb10:	d007      	beq.n	800cb22 <HAL_SPI_Init+0x7a>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cb1a:	d002      	beq.n	800cb22 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10b      	bne.n	800cb42 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cb32:	d903      	bls.n	800cb3c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2202      	movs	r2, #2
 800cb38:	631a      	str	r2, [r3, #48]	; 0x30
 800cb3a:	e002      	b.n	800cb42 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2201      	movs	r2, #1
 800cb40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	685a      	ldr	r2, [r3, #4]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	431a      	orrs	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	691b      	ldr	r3, [r3, #16]
 800cb50:	431a      	orrs	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	431a      	orrs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	699b      	ldr	r3, [r3, #24]
 800cb5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb60:	431a      	orrs	r2, r3
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	69db      	ldr	r3, [r3, #28]
 800cb66:	431a      	orrs	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6a1b      	ldr	r3, [r3, #32]
 800cb6c:	ea42 0103 	orr.w	r1, r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	0c1b      	lsrs	r3, r3, #16
 800cb82:	f003 0204 	and.w	r2, r3, #4
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8a:	431a      	orrs	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb90:	431a      	orrs	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	ea42 0103 	orr.w	r1, r2, r3
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	430a      	orrs	r2, r1
 800cba2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	69da      	ldr	r2, [r3, #28]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3710      	adds	r7, #16
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d110      	bne.n	800cc08 <HAL_SPI_Receive_DMA+0x3c>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbee:	d10b      	bne.n	800cc08 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2204      	movs	r2, #4
 800cbf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800cbf8:	88fb      	ldrh	r3, [r7, #6]
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	68b9      	ldr	r1, [r7, #8]
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	f000 f900 	bl	800ce04 <HAL_SPI_TransmitReceive_DMA>
 800cc04:	4603      	mov	r3, r0
 800cc06:	e0f3      	b.n	800cdf0 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d101      	bne.n	800cc16 <HAL_SPI_Receive_DMA+0x4a>
 800cc12:	2302      	movs	r3, #2
 800cc14:	e0ec      	b.n	800cdf0 <HAL_SPI_Receive_DMA+0x224>
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d002      	beq.n	800cc30 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800cc2a:	2302      	movs	r3, #2
 800cc2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc2e:	e0da      	b.n	800cde6 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <HAL_SPI_Receive_DMA+0x70>
 800cc36:	88fb      	ldrh	r3, [r7, #6]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d102      	bne.n	800cc42 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc40:	e0d1      	b.n	800cde6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2204      	movs	r2, #4
 800cc46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	68ba      	ldr	r2, [r7, #8]
 800cc54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	88fa      	ldrh	r2, [r7, #6]
 800cc5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	88fa      	ldrh	r2, [r7, #6]
 800cc62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc86:	d107      	bne.n	800cc98 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cc96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	685a      	ldr	r2, [r3, #4]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cca6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68db      	ldr	r3, [r3, #12]
 800ccac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ccb0:	d908      	bls.n	800ccc4 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	685a      	ldr	r2, [r3, #4]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ccc0:	605a      	str	r2, [r3, #4]
 800ccc2:	e042      	b.n	800cd4a <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	685a      	ldr	r2, [r3, #4]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ccd2:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccd8:	699b      	ldr	r3, [r3, #24]
 800ccda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccde:	d134      	bne.n	800cd4a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ccee:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d111      	bne.n	800cd24 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd0e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	085b      	lsrs	r3, r3, #1
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cd22:	e012      	b.n	800cd4a <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd32:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	085b      	lsrs	r3, r3, #1
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	3301      	adds	r3, #1
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4e:	4a2a      	ldr	r2, [pc, #168]	; (800cdf8 <HAL_SPI_Receive_DMA+0x22c>)
 800cd50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd56:	4a29      	ldr	r2, [pc, #164]	; (800cdfc <HAL_SPI_Receive_DMA+0x230>)
 800cd58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd5e:	4a28      	ldr	r2, [pc, #160]	; (800ce00 <HAL_SPI_Receive_DMA+0x234>)
 800cd60:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd66:	2200      	movs	r2, #0
 800cd68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	330c      	adds	r3, #12
 800cd74:	4619      	mov	r1, r3
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	f7fb fbfc 	bl	8008580 <HAL_DMA_Start_IT>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00c      	beq.n	800cda8 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd92:	f043 0210 	orr.w	r2, r3, #16
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2201      	movs	r2, #1
 800cda2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cda6:	e01e      	b.n	800cde6 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb2:	2b40      	cmp	r3, #64	; 0x40
 800cdb4:	d007      	beq.n	800cdc6 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdc4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685a      	ldr	r2, [r3, #4]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f042 0220 	orr.w	r2, r2, #32
 800cdd4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	685a      	ldr	r2, [r3, #4]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f042 0201 	orr.w	r2, r2, #1
 800cde4:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	3718      	adds	r7, #24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	0800d485 	.word	0x0800d485
 800cdfc:	0800d36d 	.word	0x0800d36d
 800ce00:	0800d4bd 	.word	0x0800d4bd

0800ce04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce12:	2300      	movs	r3, #0
 800ce14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d101      	bne.n	800ce24 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ce20:	2302      	movs	r3, #2
 800ce22:	e16c      	b.n	800d0fe <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2201      	movs	r2, #1
 800ce28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ce3a:	7dbb      	ldrb	r3, [r7, #22]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d00d      	beq.n	800ce5c <HAL_SPI_TransmitReceive_DMA+0x58>
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce46:	d106      	bne.n	800ce56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d102      	bne.n	800ce56 <HAL_SPI_TransmitReceive_DMA+0x52>
 800ce50:	7dbb      	ldrb	r3, [r7, #22]
 800ce52:	2b04      	cmp	r3, #4
 800ce54:	d002      	beq.n	800ce5c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ce56:	2302      	movs	r3, #2
 800ce58:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce5a:	e14b      	b.n	800d0f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d005      	beq.n	800ce6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ce68:	887b      	ldrh	r3, [r7, #2]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d102      	bne.n	800ce74 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ce72:	e13f      	b.n	800d0f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ce7a:	b2db      	uxtb	r3, r3
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	d003      	beq.n	800ce88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2205      	movs	r2, #5
 800ce84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	887a      	ldrh	r2, [r7, #2]
 800ce98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	887a      	ldrh	r2, [r7, #2]
 800ce9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	887a      	ldrh	r2, [r7, #2]
 800ceaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	887a      	ldrh	r2, [r7, #2]
 800ceb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	2200      	movs	r2, #0
 800cec0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685a      	ldr	r2, [r3, #4]
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ced0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ceda:	d908      	bls.n	800ceee <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	685a      	ldr	r2, [r3, #4]
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ceea:	605a      	str	r2, [r3, #4]
 800ceec:	e06f      	b.n	800cfce <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	685a      	ldr	r2, [r3, #4]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cefc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf08:	d126      	bne.n	800cf58 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10f      	bne.n	800cf36 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf24:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	085b      	lsrs	r3, r3, #1
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cf34:	e010      	b.n	800cf58 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cf44:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	085b      	lsrs	r3, r3, #1
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	3301      	adds	r3, #1
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf5c:	699b      	ldr	r3, [r3, #24]
 800cf5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf62:	d134      	bne.n	800cfce <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	685a      	ldr	r2, [r3, #4]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cf72:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	f003 0301 	and.w	r3, r3, #1
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d111      	bne.n	800cfa8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685a      	ldr	r2, [r3, #4]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf92:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	085b      	lsrs	r3, r3, #1
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cfa6:	e012      	b.n	800cfce <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	685a      	ldr	r2, [r3, #4]
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cfb6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	085b      	lsrs	r3, r3, #1
 800cfc2:	b29b      	uxth	r3, r3
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	2b04      	cmp	r3, #4
 800cfd8:	d108      	bne.n	800cfec <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfde:	4a4a      	ldr	r2, [pc, #296]	; (800d108 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cfe0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfe6:	4a49      	ldr	r2, [pc, #292]	; (800d10c <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cfe8:	63da      	str	r2, [r3, #60]	; 0x3c
 800cfea:	e007      	b.n	800cffc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff0:	4a47      	ldr	r2, [pc, #284]	; (800d110 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cff2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff8:	4a46      	ldr	r2, [pc, #280]	; (800d114 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cffa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d000:	4a45      	ldr	r2, [pc, #276]	; (800d118 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800d002:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d008:	2200      	movs	r2, #0
 800d00a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	330c      	adds	r3, #12
 800d016:	4619      	mov	r1, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01c:	461a      	mov	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800d024:	b29b      	uxth	r3, r3
 800d026:	f7fb faab 	bl	8008580 <HAL_DMA_Start_IT>
 800d02a:	4603      	mov	r3, r0
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00c      	beq.n	800d04a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d034:	f043 0210 	orr.w	r2, r3, #16
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d03c:	2301      	movs	r3, #1
 800d03e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d048:	e054      	b.n	800d0f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f042 0201 	orr.w	r2, r2, #1
 800d058:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d05e:	2200      	movs	r2, #0
 800d060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d066:	2200      	movs	r2, #0
 800d068:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d06e:	2200      	movs	r2, #0
 800d070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d076:	2200      	movs	r2, #0
 800d078:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d082:	4619      	mov	r1, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	330c      	adds	r3, #12
 800d08a:	461a      	mov	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d090:	b29b      	uxth	r3, r3
 800d092:	f7fb fa75 	bl	8008580 <HAL_DMA_Start_IT>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00c      	beq.n	800d0b6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0a0:	f043 0210 	orr.w	r2, r3, #16
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800d0b4:	e01e      	b.n	800d0f4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0c0:	2b40      	cmp	r3, #64	; 0x40
 800d0c2:	d007      	beq.n	800d0d4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	681a      	ldr	r2, [r3, #0]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0d2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f042 0220 	orr.w	r2, r2, #32
 800d0e2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f042 0202 	orr.w	r2, r2, #2
 800d0f2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800d0fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3718      	adds	r7, #24
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	0800d485 	.word	0x0800d485
 800d10c:	0800d36d 	.word	0x0800d36d
 800d110:	0800d4a1 	.word	0x0800d4a1
 800d114:	0800d3f3 	.word	0x0800d3f3
 800d118:	0800d4bd 	.word	0x0800d4bd

0800d11c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b088      	sub	sp, #32
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d134:	69bb      	ldr	r3, [r7, #24]
 800d136:	099b      	lsrs	r3, r3, #6
 800d138:	f003 0301 	and.w	r3, r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d10f      	bne.n	800d160 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	099b      	lsrs	r3, r3, #6
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	2b00      	cmp	r3, #0
 800d154:	d004      	beq.n	800d160 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	4798      	blx	r3
    return;
 800d15e:	e0d8      	b.n	800d312 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800d160:	69bb      	ldr	r3, [r7, #24]
 800d162:	085b      	lsrs	r3, r3, #1
 800d164:	f003 0301 	and.w	r3, r3, #1
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00a      	beq.n	800d182 <HAL_SPI_IRQHandler+0x66>
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	09db      	lsrs	r3, r3, #7
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	4798      	blx	r3
    return;
 800d180:	e0c7      	b.n	800d312 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	095b      	lsrs	r3, r3, #5
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d10c      	bne.n	800d1a8 <HAL_SPI_IRQHandler+0x8c>
 800d18e:	69bb      	ldr	r3, [r7, #24]
 800d190:	099b      	lsrs	r3, r3, #6
 800d192:	f003 0301 	and.w	r3, r3, #1
 800d196:	2b00      	cmp	r3, #0
 800d198:	d106      	bne.n	800d1a8 <HAL_SPI_IRQHandler+0x8c>
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	0a1b      	lsrs	r3, r3, #8
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 80b5 	beq.w	800d312 <HAL_SPI_IRQHandler+0x1f6>
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	095b      	lsrs	r3, r3, #5
 800d1ac:	f003 0301 	and.w	r3, r3, #1
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 80ae 	beq.w	800d312 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	099b      	lsrs	r3, r3, #6
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d023      	beq.n	800d20a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b03      	cmp	r3, #3
 800d1cc:	d011      	beq.n	800d1f2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1d2:	f043 0204 	orr.w	r2, r3, #4
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	617b      	str	r3, [r7, #20]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	617b      	str	r3, [r7, #20]
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	e00b      	b.n	800d20a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	613b      	str	r3, [r7, #16]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	68db      	ldr	r3, [r3, #12]
 800d1fc:	613b      	str	r3, [r7, #16]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	613b      	str	r3, [r7, #16]
 800d206:	693b      	ldr	r3, [r7, #16]
        return;
 800d208:	e083      	b.n	800d312 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	095b      	lsrs	r3, r3, #5
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d014      	beq.n	800d240 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d21a:	f043 0201 	orr.w	r2, r3, #1
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d222:	2300      	movs	r3, #0
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	60fb      	str	r3, [r7, #12]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00c      	beq.n	800d266 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d250:	f043 0208 	orr.w	r2, r3, #8
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d258:	2300      	movs	r3, #0
 800d25a:	60bb      	str	r3, [r7, #8]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	60bb      	str	r3, [r7, #8]
 800d264:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d050      	beq.n	800d310 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d27c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2201      	movs	r2, #1
 800d282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	f003 0302 	and.w	r3, r3, #2
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d104      	bne.n	800d29a <HAL_SPI_IRQHandler+0x17e>
 800d290:	69fb      	ldr	r3, [r7, #28]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d034      	beq.n	800d304 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f022 0203 	bic.w	r2, r2, #3
 800d2a8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d011      	beq.n	800d2d6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2b6:	4a18      	ldr	r2, [pc, #96]	; (800d318 <HAL_SPI_IRQHandler+0x1fc>)
 800d2b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fb fa2e 	bl	8008720 <HAL_DMA_Abort_IT>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d005      	beq.n	800d2d6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d016      	beq.n	800d30c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e2:	4a0d      	ldr	r2, [pc, #52]	; (800d318 <HAL_SPI_IRQHandler+0x1fc>)
 800d2e4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f7fb fa18 	bl	8008720 <HAL_DMA_Abort_IT>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d00a      	beq.n	800d30c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d302:	e003      	b.n	800d30c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f827 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d30a:	e000      	b.n	800d30e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d30c:	bf00      	nop
    return;
 800d30e:	bf00      	nop
 800d310:	bf00      	nop
  }
}
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0800d4fd 	.word	0x0800d4fd

0800d31c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b083      	sub	sp, #12
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d324:	bf00      	nop
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d330:	b480      	push	{r7}
 800d332:	b083      	sub	sp, #12
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d360:	bf00      	nop
 800d362:	370c      	adds	r7, #12
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d378:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d37a:	f7fa fae3 	bl	8007944 <HAL_GetTick>
 800d37e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d38a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d38e:	d02a      	beq.n	800d3e6 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f022 0220 	bic.w	r2, r2, #32
 800d39e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f022 0203 	bic.w	r2, r2, #3
 800d3ae:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	2164      	movs	r1, #100	; 0x64
 800d3b4:	68f8      	ldr	r0, [r7, #12]
 800d3b6:	f000 f98d 	bl	800d6d4 <SPI_EndRxTransaction>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2220      	movs	r2, #32
 800d3c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	f7ff ffba 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d3e4:	e002      	b.n	800d3ec <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7f9 fca0 	bl	8006d2c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3fe:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d400:	f7fa faa0 	bl	8007944 <HAL_GetTick>
 800d404:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d414:	d030      	beq.n	800d478 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f022 0220 	bic.w	r2, r2, #32
 800d424:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d426:	68ba      	ldr	r2, [r7, #8]
 800d428:	2164      	movs	r1, #100	; 0x64
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 f9aa 	bl	800d784 <SPI_EndRxTxTransaction>
 800d430:	4603      	mov	r3, r0
 800d432:	2b00      	cmp	r3, #0
 800d434:	d005      	beq.n	800d442 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d43a:	f043 0220 	orr.w	r2, r3, #32
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685a      	ldr	r2, [r3, #4]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0203 	bic.w	r2, r2, #3
 800d450:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2200      	movs	r2, #0
 800d456:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d003      	beq.n	800d478 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff ff71 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d476:	e002      	b.n	800d47e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff ff4f 	bl	800d31c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d490:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	f7ff ff4c 	bl	800d330 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d498:	bf00      	nop
 800d49a:	3710      	adds	r7, #16
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff ff48 	bl	800d344 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4b4:	bf00      	nop
 800d4b6:	3710      	adds	r7, #16
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	685a      	ldr	r2, [r3, #4]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f022 0203 	bic.w	r2, r2, #3
 800d4d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4de:	f043 0210 	orr.w	r2, r3, #16
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7ff ff32 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d4f4:	bf00      	nop
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d508:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f7ff ff1d 	bl	800d358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d51e:	bf00      	nop
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	60f8      	str	r0, [r7, #12]
 800d52e:	60b9      	str	r1, [r7, #8]
 800d530:	603b      	str	r3, [r7, #0]
 800d532:	4613      	mov	r3, r2
 800d534:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d536:	e04c      	b.n	800d5d2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d53e:	d048      	beq.n	800d5d2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d540:	f7fa fa00 	bl	8007944 <HAL_GetTick>
 800d544:	4602      	mov	r2, r0
 800d546:	69bb      	ldr	r3, [r7, #24]
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d902      	bls.n	800d556 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d13d      	bne.n	800d5d2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	685b      	ldr	r3, [r3, #4]
 800d56a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d56e:	d111      	bne.n	800d594 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d578:	d004      	beq.n	800d584 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d582:	d107      	bne.n	800d594 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d59c:	d10f      	bne.n	800d5be <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d5ac:	601a      	str	r2, [r3, #0]
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d5bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	e00f      	b.n	800d5f2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	68ba      	ldr	r2, [r7, #8]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	bf0c      	ite	eq
 800d5e2:	2301      	moveq	r3, #1
 800d5e4:	2300      	movne	r3, #0
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d1a3      	bne.n	800d538 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	607a      	str	r2, [r7, #4]
 800d606:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d608:	e057      	b.n	800d6ba <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d610:	d106      	bne.n	800d620 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d103      	bne.n	800d620 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	330c      	adds	r3, #12
 800d61e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d626:	d048      	beq.n	800d6ba <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d628:	f7fa f98c 	bl	8007944 <HAL_GetTick>
 800d62c:	4602      	mov	r2, r0
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d902      	bls.n	800d63e <SPI_WaitFifoStateUntilTimeout+0x44>
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d13d      	bne.n	800d6ba <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	685a      	ldr	r2, [r3, #4]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d64c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d656:	d111      	bne.n	800d67c <SPI_WaitFifoStateUntilTimeout+0x82>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d660:	d004      	beq.n	800d66c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d66a:	d107      	bne.n	800d67c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d67a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d684:	d10f      	bne.n	800d6a6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	681a      	ldr	r2, [r3, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d694:	601a      	str	r2, [r3, #0]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d6a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d6b6:	2303      	movs	r3, #3
 800d6b8:	e008      	b.n	800d6cc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689a      	ldr	r2, [r3, #8]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	4013      	ands	r3, r2
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d19f      	bne.n	800d60a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d6ca:	2300      	movs	r3, #0
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3710      	adds	r7, #16
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}

0800d6d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af02      	add	r7, sp, #8
 800d6da:	60f8      	str	r0, [r7, #12]
 800d6dc:	60b9      	str	r1, [r7, #8]
 800d6de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d6e8:	d111      	bne.n	800d70e <SPI_EndRxTransaction+0x3a>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	689b      	ldr	r3, [r3, #8]
 800d6ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d6f2:	d004      	beq.n	800d6fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	689b      	ldr	r3, [r3, #8]
 800d6f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6fc:	d107      	bne.n	800d70e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	681a      	ldr	r2, [r3, #0]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d70c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2200      	movs	r2, #0
 800d716:	2180      	movs	r1, #128	; 0x80
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7ff ff04 	bl	800d526 <SPI_WaitFlagStateUntilTimeout>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d007      	beq.n	800d734 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d728:	f043 0220 	orr.w	r2, r3, #32
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e023      	b.n	800d77c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d73c:	d11d      	bne.n	800d77a <SPI_EndRxTransaction+0xa6>
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	689b      	ldr	r3, [r3, #8]
 800d742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d746:	d004      	beq.n	800d752 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d750:	d113      	bne.n	800d77a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	2200      	movs	r2, #0
 800d75a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f7ff ff4b 	bl	800d5fa <SPI_WaitFifoStateUntilTimeout>
 800d764:	4603      	mov	r3, r0
 800d766:	2b00      	cmp	r3, #0
 800d768:	d007      	beq.n	800d77a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d76e:	f043 0220 	orr.w	r2, r3, #32
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d776:	2303      	movs	r3, #3
 800d778:	e000      	b.n	800d77c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af02      	add	r7, sp, #8
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	9300      	str	r3, [sp, #0]
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	2200      	movs	r2, #0
 800d798:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f7ff ff2c 	bl	800d5fa <SPI_WaitFifoStateUntilTimeout>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d007      	beq.n	800d7b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7ac:	f043 0220 	orr.w	r2, r3, #32
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	e027      	b.n	800d808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	9300      	str	r3, [sp, #0]
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	2180      	movs	r1, #128	; 0x80
 800d7c2:	68f8      	ldr	r0, [r7, #12]
 800d7c4:	f7ff feaf 	bl	800d526 <SPI_WaitFlagStateUntilTimeout>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d007      	beq.n	800d7de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7d2:	f043 0220 	orr.w	r2, r3, #32
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d7da:	2303      	movs	r3, #3
 800d7dc:	e014      	b.n	800d808 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f7ff ff05 	bl	800d5fa <SPI_WaitFifoStateUntilTimeout>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d007      	beq.n	800d806 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7fa:	f043 0220 	orr.w	r2, r3, #32
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d802:	2303      	movs	r3, #3
 800d804:	e000      	b.n	800d808 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3710      	adds	r7, #16
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800d810:	b480      	push	{r7}
 800d812:	b085      	sub	sp, #20
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800d818:	2300      	movs	r3, #0
 800d81a:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d81c:	e00c      	b.n	800d838 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	3301      	adds	r3, #1
 800d822:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800d82c:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b04      	cmp	r3, #4
 800d832:	d101      	bne.n	800d838 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e007      	b.n	800d848 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1eb      	bne.n	800d81e <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e01d      	b.n	800d8a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d86c:	b2db      	uxtb	r3, r3
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 f815 	bl	800d8aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2202      	movs	r2, #2
 800d884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	3304      	adds	r3, #4
 800d890:	4619      	mov	r1, r3
 800d892:	4610      	mov	r0, r2
 800d894:	f000 f986 	bl	800dba4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b083      	sub	sp, #12
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d8b2:	bf00      	nop
 800d8b4:	370c      	adds	r7, #12
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
	...

0800d8c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68da      	ldr	r2, [r3, #12]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f042 0201 	orr.w	r2, r2, #1
 800d8d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	689a      	ldr	r2, [r3, #8]
 800d8de:	4b0c      	ldr	r3, [pc, #48]	; (800d910 <HAL_TIM_Base_Start_IT+0x50>)
 800d8e0:	4013      	ands	r3, r2
 800d8e2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b06      	cmp	r3, #6
 800d8e8:	d00b      	beq.n	800d902 <HAL_TIM_Base_Start_IT+0x42>
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8f0:	d007      	beq.n	800d902 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f042 0201 	orr.w	r2, r2, #1
 800d900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr
 800d910:	00010007 	.word	0x00010007

0800d914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b082      	sub	sp, #8
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	f003 0302 	and.w	r3, r3, #2
 800d926:	2b02      	cmp	r3, #2
 800d928:	d122      	bne.n	800d970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	f003 0302 	and.w	r3, r3, #2
 800d934:	2b02      	cmp	r3, #2
 800d936:	d11b      	bne.n	800d970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f06f 0202 	mvn.w	r2, #2
 800d940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2201      	movs	r2, #1
 800d946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	f003 0303 	and.w	r3, r3, #3
 800d952:	2b00      	cmp	r3, #0
 800d954:	d003      	beq.n	800d95e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f905 	bl	800db66 <HAL_TIM_IC_CaptureCallback>
 800d95c:	e005      	b.n	800d96a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f8f7 	bl	800db52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f000 f908 	bl	800db7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2200      	movs	r2, #0
 800d96e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	691b      	ldr	r3, [r3, #16]
 800d976:	f003 0304 	and.w	r3, r3, #4
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d122      	bne.n	800d9c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	f003 0304 	and.w	r3, r3, #4
 800d988:	2b04      	cmp	r3, #4
 800d98a:	d11b      	bne.n	800d9c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f06f 0204 	mvn.w	r2, #4
 800d994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2202      	movs	r2, #2
 800d99a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	699b      	ldr	r3, [r3, #24]
 800d9a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d003      	beq.n	800d9b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f8db 	bl	800db66 <HAL_TIM_IC_CaptureCallback>
 800d9b0:	e005      	b.n	800d9be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f8cd 	bl	800db52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 f8de 	bl	800db7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	691b      	ldr	r3, [r3, #16]
 800d9ca:	f003 0308 	and.w	r3, r3, #8
 800d9ce:	2b08      	cmp	r3, #8
 800d9d0:	d122      	bne.n	800da18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	f003 0308 	and.w	r3, r3, #8
 800d9dc:	2b08      	cmp	r3, #8
 800d9de:	d11b      	bne.n	800da18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f06f 0208 	mvn.w	r2, #8
 800d9e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2204      	movs	r2, #4
 800d9ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	f003 0303 	and.w	r3, r3, #3
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d003      	beq.n	800da06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f8b1 	bl	800db66 <HAL_TIM_IC_CaptureCallback>
 800da04:	e005      	b.n	800da12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f000 f8a3 	bl	800db52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 f8b4 	bl	800db7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f003 0310 	and.w	r3, r3, #16
 800da22:	2b10      	cmp	r3, #16
 800da24:	d122      	bne.n	800da6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	f003 0310 	and.w	r3, r3, #16
 800da30:	2b10      	cmp	r3, #16
 800da32:	d11b      	bne.n	800da6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f06f 0210 	mvn.w	r2, #16
 800da3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2208      	movs	r2, #8
 800da42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	69db      	ldr	r3, [r3, #28]
 800da4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d003      	beq.n	800da5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f887 	bl	800db66 <HAL_TIM_IC_CaptureCallback>
 800da58:	e005      	b.n	800da66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f879 	bl	800db52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 f88a 	bl	800db7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b01      	cmp	r3, #1
 800da78:	d10e      	bne.n	800da98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f003 0301 	and.w	r3, r3, #1
 800da84:	2b01      	cmp	r3, #1
 800da86:	d107      	bne.n	800da98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f06f 0201 	mvn.w	r2, #1
 800da90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7f7 fa6c 	bl	8004f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daa2:	2b80      	cmp	r3, #128	; 0x80
 800daa4:	d10e      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dab0:	2b80      	cmp	r3, #128	; 0x80
 800dab2:	d107      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f91a 	bl	800dcf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dad2:	d10e      	bne.n	800daf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dade:	2b80      	cmp	r3, #128	; 0x80
 800dae0:	d107      	bne.n	800daf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800daea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f000 f90d 	bl	800dd0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	691b      	ldr	r3, [r3, #16]
 800daf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafc:	2b40      	cmp	r3, #64	; 0x40
 800dafe:	d10e      	bne.n	800db1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db0a:	2b40      	cmp	r3, #64	; 0x40
 800db0c:	d107      	bne.n	800db1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 f838 	bl	800db8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	f003 0320 	and.w	r3, r3, #32
 800db28:	2b20      	cmp	r3, #32
 800db2a:	d10e      	bne.n	800db4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	f003 0320 	and.w	r3, r3, #32
 800db36:	2b20      	cmp	r3, #32
 800db38:	d107      	bne.n	800db4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f06f 0220 	mvn.w	r2, #32
 800db42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f8cd 	bl	800dce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db4a:	bf00      	nop
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}

0800db52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db52:	b480      	push	{r7}
 800db54:	b083      	sub	sp, #12
 800db56:	af00      	add	r7, sp, #0
 800db58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db5a:	bf00      	nop
 800db5c:	370c      	adds	r7, #12
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db66:	b480      	push	{r7}
 800db68:	b083      	sub	sp, #12
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db6e:	bf00      	nop
 800db70:	370c      	adds	r7, #12
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db7a:	b480      	push	{r7}
 800db7c:	b083      	sub	sp, #12
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db82:	bf00      	nop
 800db84:	370c      	adds	r7, #12
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr

0800db8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db8e:	b480      	push	{r7}
 800db90:	b083      	sub	sp, #12
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db96:	bf00      	nop
 800db98:	370c      	adds	r7, #12
 800db9a:	46bd      	mov	sp, r7
 800db9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba0:	4770      	bx	lr
	...

0800dba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	4a40      	ldr	r2, [pc, #256]	; (800dcb8 <TIM_Base_SetConfig+0x114>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d013      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbc2:	d00f      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	4a3d      	ldr	r2, [pc, #244]	; (800dcbc <TIM_Base_SetConfig+0x118>)
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d00b      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	4a3c      	ldr	r2, [pc, #240]	; (800dcc0 <TIM_Base_SetConfig+0x11c>)
 800dbd0:	4293      	cmp	r3, r2
 800dbd2:	d007      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	4a3b      	ldr	r2, [pc, #236]	; (800dcc4 <TIM_Base_SetConfig+0x120>)
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	d003      	beq.n	800dbe4 <TIM_Base_SetConfig+0x40>
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	4a3a      	ldr	r2, [pc, #232]	; (800dcc8 <TIM_Base_SetConfig+0x124>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d108      	bne.n	800dbf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	4a2f      	ldr	r2, [pc, #188]	; (800dcb8 <TIM_Base_SetConfig+0x114>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d02b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc04:	d027      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4a2c      	ldr	r2, [pc, #176]	; (800dcbc <TIM_Base_SetConfig+0x118>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d023      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	4a2b      	ldr	r2, [pc, #172]	; (800dcc0 <TIM_Base_SetConfig+0x11c>)
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d01f      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	4a2a      	ldr	r2, [pc, #168]	; (800dcc4 <TIM_Base_SetConfig+0x120>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d01b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a29      	ldr	r2, [pc, #164]	; (800dcc8 <TIM_Base_SetConfig+0x124>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d017      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a28      	ldr	r2, [pc, #160]	; (800dccc <TIM_Base_SetConfig+0x128>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d013      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	4a27      	ldr	r2, [pc, #156]	; (800dcd0 <TIM_Base_SetConfig+0x12c>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d00f      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4a26      	ldr	r2, [pc, #152]	; (800dcd4 <TIM_Base_SetConfig+0x130>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d00b      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	4a25      	ldr	r2, [pc, #148]	; (800dcd8 <TIM_Base_SetConfig+0x134>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d007      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4a24      	ldr	r2, [pc, #144]	; (800dcdc <TIM_Base_SetConfig+0x138>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d003      	beq.n	800dc56 <TIM_Base_SetConfig+0xb2>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	4a23      	ldr	r2, [pc, #140]	; (800dce0 <TIM_Base_SetConfig+0x13c>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d108      	bne.n	800dc68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	689a      	ldr	r2, [r3, #8]
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a0a      	ldr	r2, [pc, #40]	; (800dcb8 <TIM_Base_SetConfig+0x114>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d003      	beq.n	800dc9c <TIM_Base_SetConfig+0xf8>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a0c      	ldr	r2, [pc, #48]	; (800dcc8 <TIM_Base_SetConfig+0x124>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d103      	bne.n	800dca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	691a      	ldr	r2, [r3, #16]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	615a      	str	r2, [r3, #20]
}
 800dcaa:	bf00      	nop
 800dcac:	3714      	adds	r7, #20
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop
 800dcb8:	40010000 	.word	0x40010000
 800dcbc:	40000400 	.word	0x40000400
 800dcc0:	40000800 	.word	0x40000800
 800dcc4:	40000c00 	.word	0x40000c00
 800dcc8:	40010400 	.word	0x40010400
 800dccc:	40014000 	.word	0x40014000
 800dcd0:	40014400 	.word	0x40014400
 800dcd4:	40014800 	.word	0x40014800
 800dcd8:	40001800 	.word	0x40001800
 800dcdc:	40001c00 	.word	0x40001c00
 800dce0:	40002000 	.word	0x40002000

0800dce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b083      	sub	sp, #12
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcec:	bf00      	nop
 800dcee:	370c      	adds	r7, #12
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd00:	bf00      	nop
 800dd02:	370c      	adds	r7, #12
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd14:	bf00      	nop
 800dd16:	370c      	adds	r7, #12
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr

0800dd20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	e040      	b.n	800ddb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f7f7 fc58 	bl	80055f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2224      	movs	r2, #36	; 0x24
 800dd4c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f022 0201 	bic.w	r2, r2, #1
 800dd5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fc3a 	bl	800e5d8 <UART_SetConfig>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d101      	bne.n	800dd6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e022      	b.n	800ddb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d002      	beq.n	800dd7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fed8 	bl	800eb2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	685a      	ldr	r2, [r3, #4]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dd8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689a      	ldr	r2, [r3, #8]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dd9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f042 0201 	orr.w	r2, r2, #1
 800ddaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 ff5f 	bl	800ec70 <UART_CheckIdleState>
 800ddb2:	4603      	mov	r3, r0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3708      	adds	r7, #8
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b08a      	sub	sp, #40	; 0x28
 800ddc0:	af02      	add	r7, sp, #8
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	603b      	str	r3, [r7, #0]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddd0:	2b20      	cmp	r3, #32
 800ddd2:	d17f      	bne.n	800ded4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <HAL_UART_Transmit+0x24>
 800ddda:	88fb      	ldrh	r3, [r7, #6]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dde0:	2301      	movs	r3, #1
 800dde2:	e078      	b.n	800ded6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d101      	bne.n	800ddf2 <HAL_UART_Transmit+0x36>
 800ddee:	2302      	movs	r3, #2
 800ddf0:	e071      	b.n	800ded6 <HAL_UART_Transmit+0x11a>
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2221      	movs	r2, #33	; 0x21
 800de04:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800de06:	f7f9 fd9d 	bl	8007944 <HAL_GetTick>
 800de0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	88fa      	ldrh	r2, [r7, #6]
 800de10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	88fa      	ldrh	r2, [r7, #6]
 800de18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de24:	d108      	bne.n	800de38 <HAL_UART_Transmit+0x7c>
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800de2e:	2300      	movs	r3, #0
 800de30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	61bb      	str	r3, [r7, #24]
 800de36:	e003      	b.n	800de40 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de3c:	2300      	movs	r3, #0
 800de3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800de48:	e02c      	b.n	800dea4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2200      	movs	r2, #0
 800de52:	2180      	movs	r1, #128	; 0x80
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 ff3a 	bl	800ecce <UART_WaitOnFlagUntilTimeout>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d001      	beq.n	800de64 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e038      	b.n	800ded6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d10b      	bne.n	800de82 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de6a:	69bb      	ldr	r3, [r7, #24]
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	461a      	mov	r2, r3
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	3302      	adds	r3, #2
 800de7e:	61bb      	str	r3, [r7, #24]
 800de80:	e007      	b.n	800de92 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	3301      	adds	r3, #1
 800de90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800de98:	b29b      	uxth	r3, r3
 800de9a:	3b01      	subs	r3, #1
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800deaa:	b29b      	uxth	r3, r3
 800deac:	2b00      	cmp	r3, #0
 800deae:	d1cc      	bne.n	800de4a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2200      	movs	r2, #0
 800deb8:	2140      	movs	r1, #64	; 0x40
 800deba:	68f8      	ldr	r0, [r7, #12]
 800debc:	f000 ff07 	bl	800ecce <UART_WaitOnFlagUntilTimeout>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e005      	b.n	800ded6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2220      	movs	r2, #32
 800dece:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e000      	b.n	800ded6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800ded4:	2302      	movs	r3, #2
  }
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3720      	adds	r7, #32
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	4613      	mov	r3, r2
 800deec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800def2:	2b20      	cmp	r3, #32
 800def4:	f040 808a 	bne.w	800e00c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d002      	beq.n	800df04 <HAL_UART_Receive_IT+0x24>
 800defe:	88fb      	ldrh	r3, [r7, #6]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d101      	bne.n	800df08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800df04:	2301      	movs	r3, #1
 800df06:	e082      	b.n	800e00e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800df0e:	2b01      	cmp	r3, #1
 800df10:	d101      	bne.n	800df16 <HAL_UART_Receive_IT+0x36>
 800df12:	2302      	movs	r3, #2
 800df14:	e07b      	b.n	800e00e <HAL_UART_Receive_IT+0x12e>
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2201      	movs	r2, #1
 800df1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	68ba      	ldr	r2, [r7, #8]
 800df22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	88fa      	ldrh	r2, [r7, #6]
 800df28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	88fa      	ldrh	r2, [r7, #6]
 800df30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df42:	d10e      	bne.n	800df62 <HAL_UART_Receive_IT+0x82>
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	691b      	ldr	r3, [r3, #16]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d105      	bne.n	800df58 <HAL_UART_Receive_IT+0x78>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800df52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800df56:	e02d      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	22ff      	movs	r2, #255	; 0xff
 800df5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800df60:	e028      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	689b      	ldr	r3, [r3, #8]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d10d      	bne.n	800df86 <HAL_UART_Receive_IT+0xa6>
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	691b      	ldr	r3, [r3, #16]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d104      	bne.n	800df7c <HAL_UART_Receive_IT+0x9c>
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	22ff      	movs	r2, #255	; 0xff
 800df76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800df7a:	e01b      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	227f      	movs	r2, #127	; 0x7f
 800df80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800df84:	e016      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df8e:	d10d      	bne.n	800dfac <HAL_UART_Receive_IT+0xcc>
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	691b      	ldr	r3, [r3, #16]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d104      	bne.n	800dfa2 <HAL_UART_Receive_IT+0xc2>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	227f      	movs	r2, #127	; 0x7f
 800df9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dfa0:	e008      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	223f      	movs	r2, #63	; 0x3f
 800dfa6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dfaa:	e003      	b.n	800dfb4 <HAL_UART_Receive_IT+0xd4>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2222      	movs	r2, #34	; 0x22
 800dfbe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	689a      	ldr	r2, [r3, #8]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f042 0201 	orr.w	r2, r2, #1
 800dfce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	689b      	ldr	r3, [r3, #8]
 800dfd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfd8:	d107      	bne.n	800dfea <HAL_UART_Receive_IT+0x10a>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	691b      	ldr	r3, [r3, #16]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d103      	bne.n	800dfea <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	4a0d      	ldr	r2, [pc, #52]	; (800e01c <HAL_UART_Receive_IT+0x13c>)
 800dfe6:	661a      	str	r2, [r3, #96]	; 0x60
 800dfe8:	e002      	b.n	800dff0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	4a0c      	ldr	r2, [pc, #48]	; (800e020 <HAL_UART_Receive_IT+0x140>)
 800dfee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800e006:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	e000      	b.n	800e00e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800e00c:	2302      	movs	r3, #2
  }
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3714      	adds	r7, #20
 800e012:	46bd      	mov	sp, r7
 800e014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e018:	4770      	bx	lr
 800e01a:	bf00      	nop
 800e01c:	0800f02b 	.word	0x0800f02b
 800e020:	0800ef85 	.word	0x0800ef85

0800e024 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b084      	sub	sp, #16
 800e028:	af00      	add	r7, sp, #0
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	4613      	mov	r3, r2
 800e030:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e036:	2b20      	cmp	r3, #32
 800e038:	d16c      	bne.n	800e114 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <HAL_UART_Receive_DMA+0x22>
 800e040:	88fb      	ldrh	r3, [r7, #6]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d101      	bne.n	800e04a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e065      	b.n	800e116 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e050:	2b01      	cmp	r3, #1
 800e052:	d101      	bne.n	800e058 <HAL_UART_Receive_DMA+0x34>
 800e054:	2302      	movs	r3, #2
 800e056:	e05e      	b.n	800e116 <HAL_UART_Receive_DMA+0xf2>
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	68ba      	ldr	r2, [r7, #8]
 800e064:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	88fa      	ldrh	r2, [r7, #6]
 800e06a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2200      	movs	r2, #0
 800e072:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2222      	movs	r2, #34	; 0x22
 800e078:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d02a      	beq.n	800e0d8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e086:	4a26      	ldr	r2, [pc, #152]	; (800e120 <HAL_UART_Receive_DMA+0xfc>)
 800e088:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e08e:	4a25      	ldr	r2, [pc, #148]	; (800e124 <HAL_UART_Receive_DMA+0x100>)
 800e090:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e096:	4a24      	ldr	r2, [pc, #144]	; (800e128 <HAL_UART_Receive_DMA+0x104>)
 800e098:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e09e:	2200      	movs	r2, #0
 800e0a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	3324      	adds	r3, #36	; 0x24
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	88fb      	ldrh	r3, [r7, #6]
 800e0b6:	f7fa fa63 	bl	8008580 <HAL_DMA_Start_IT>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00b      	beq.n	800e0d8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2210      	movs	r2, #16
 800e0c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2220      	movs	r2, #32
 800e0d2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e01e      	b.n	800e116 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0ee:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	689a      	ldr	r2, [r3, #8]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f042 0201 	orr.w	r2, r2, #1
 800e0fe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	689a      	ldr	r2, [r3, #8]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e10e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	e000      	b.n	800e116 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800e114:	2302      	movs	r3, #2
  }
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0800ee2f 	.word	0x0800ee2f
 800e124:	0800ee93 	.word	0x0800ee93
 800e128:	0800eeaf 	.word	0x0800eeaf

0800e12c <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b085      	sub	sp, #20
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e138:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e13e:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e146:	2b01      	cmp	r3, #1
 800e148:	d101      	bne.n	800e14e <HAL_UART_DMAPause+0x22>
 800e14a:	2302      	movs	r3, #2
 800e14c:	e03c      	b.n	800e1c8 <HAL_UART_DMAPause+0x9c>
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2201      	movs	r2, #1
 800e152:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e160:	2b80      	cmp	r3, #128	; 0x80
 800e162:	d10a      	bne.n	800e17a <HAL_UART_DMAPause+0x4e>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b21      	cmp	r3, #33	; 0x21
 800e168:	d107      	bne.n	800e17a <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	689a      	ldr	r2, [r3, #8]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e178:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e184:	2b40      	cmp	r3, #64	; 0x40
 800e186:	d11a      	bne.n	800e1be <HAL_UART_DMAPause+0x92>
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	2b22      	cmp	r3, #34	; 0x22
 800e18c:	d117      	bne.n	800e1be <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e19c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	689a      	ldr	r2, [r3, #8]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f022 0201 	bic.w	r2, r2, #1
 800e1ac:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	689a      	ldr	r2, [r3, #8]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e1bc:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d101      	bne.n	800e1ea <HAL_UART_DMAResume+0x16>
 800e1e6:	2302      	movs	r3, #2
 800e1e8:	e034      	b.n	800e254 <HAL_UART_DMAResume+0x80>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f6:	2b21      	cmp	r3, #33	; 0x21
 800e1f8:	d107      	bne.n	800e20a <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e208:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e20e:	2b22      	cmp	r3, #34	; 0x22
 800e210:	d11b      	bne.n	800e24a <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	2208      	movs	r2, #8
 800e218:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e228:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	689a      	ldr	r2, [r3, #8]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f042 0201 	orr.w	r2, r2, #1
 800e238:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	689a      	ldr	r2, [r3, #8]
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e248:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2200      	movs	r2, #0
 800e24e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e26c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e272:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	689b      	ldr	r3, [r3, #8]
 800e27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27e:	2b80      	cmp	r3, #128	; 0x80
 800e280:	d126      	bne.n	800e2d0 <HAL_UART_DMAStop+0x70>
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b21      	cmp	r3, #33	; 0x21
 800e286:	d123      	bne.n	800e2d0 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689a      	ldr	r2, [r3, #8]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e296:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d014      	beq.n	800e2ca <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fa f9cb 	bl	8008640 <HAL_DMA_Abort>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00c      	beq.n	800e2ca <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fa fbdf 	bl	8008a78 <HAL_DMA_GetError>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	2b20      	cmp	r3, #32
 800e2be:	d104      	bne.n	800e2ca <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	e031      	b.n	800e32e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 fd7a 	bl	800edc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	689b      	ldr	r3, [r3, #8]
 800e2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2da:	2b40      	cmp	r3, #64	; 0x40
 800e2dc:	d126      	bne.n	800e32c <HAL_UART_DMAStop+0xcc>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2b22      	cmp	r3, #34	; 0x22
 800e2e2:	d123      	bne.n	800e32c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	689a      	ldr	r2, [r3, #8]
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2f2:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d014      	beq.n	800e326 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e300:	4618      	mov	r0, r3
 800e302:	f7fa f99d 	bl	8008640 <HAL_DMA_Abort>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00c      	beq.n	800e326 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e310:	4618      	mov	r0, r3
 800e312:	f7fa fbb1 	bl	8008a78 <HAL_DMA_GetError>
 800e316:	4603      	mov	r3, r0
 800e318:	2b20      	cmp	r3, #32
 800e31a:	d104      	bne.n	800e326 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2210      	movs	r2, #16
 800e320:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e322:	2303      	movs	r3, #3
 800e324:	e003      	b.n	800e32e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 fd61 	bl	800edee <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
	...

0800e338 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b088      	sub	sp, #32
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	69db      	ldr	r3, [r3, #28]
 800e346:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e358:	69fa      	ldr	r2, [r7, #28]
 800e35a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e35e:	4013      	ands	r3, r2
 800e360:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e362:	693b      	ldr	r3, [r7, #16]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d113      	bne.n	800e390 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	f003 0320 	and.w	r3, r3, #32
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00e      	beq.n	800e390 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e372:	69bb      	ldr	r3, [r7, #24]
 800e374:	f003 0320 	and.w	r3, r3, #32
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d009      	beq.n	800e390 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e380:	2b00      	cmp	r3, #0
 800e382:	f000 8100 	beq.w	800e586 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	4798      	blx	r3
      }
      return;
 800e38e:	e0fa      	b.n	800e586 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 80d5 	beq.w	800e542 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d105      	bne.n	800e3ae <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	f000 80ca 	beq.w	800e542 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d00e      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x9e>
 800e3b8:	69bb      	ldr	r3, [r7, #24]
 800e3ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d009      	beq.n	800e3d6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ce:	f043 0201 	orr.w	r2, r3, #1
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	f003 0302 	and.w	r3, r3, #2
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d00e      	beq.n	800e3fe <HAL_UART_IRQHandler+0xc6>
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	f003 0301 	and.w	r3, r3, #1
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d009      	beq.n	800e3fe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2202      	movs	r2, #2
 800e3f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3f6:	f043 0204 	orr.w	r2, r3, #4
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00e      	beq.n	800e426 <HAL_UART_IRQHandler+0xee>
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d009      	beq.n	800e426 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2204      	movs	r2, #4
 800e418:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e41e:	f043 0202 	orr.w	r2, r3, #2
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e426:	69fb      	ldr	r3, [r7, #28]
 800e428:	f003 0308 	and.w	r3, r3, #8
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d013      	beq.n	800e458 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b00      	cmp	r3, #0
 800e438:	d104      	bne.n	800e444 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e440:	2b00      	cmp	r3, #0
 800e442:	d009      	beq.n	800e458 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2208      	movs	r2, #8
 800e44a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e450:	f043 0208 	orr.w	r2, r3, #8
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00f      	beq.n	800e482 <HAL_UART_IRQHandler+0x14a>
 800e462:	69bb      	ldr	r3, [r7, #24]
 800e464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00a      	beq.n	800e482 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e474:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e47a:	f043 0220 	orr.w	r2, r3, #32
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e486:	2b00      	cmp	r3, #0
 800e488:	d07f      	beq.n	800e58a <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	f003 0320 	and.w	r3, r3, #32
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00c      	beq.n	800e4ae <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	f003 0320 	and.w	r3, r3, #32
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d007      	beq.n	800e4ae <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d003      	beq.n	800e4ae <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4b2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4be:	2b40      	cmp	r3, #64	; 0x40
 800e4c0:	d004      	beq.n	800e4cc <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d031      	beq.n	800e530 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fc8e 	bl	800edee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	689b      	ldr	r3, [r3, #8]
 800e4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4dc:	2b40      	cmp	r3, #64	; 0x40
 800e4de:	d123      	bne.n	800e528 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	689a      	ldr	r2, [r3, #8]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4ee:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d013      	beq.n	800e520 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fc:	4a26      	ldr	r2, [pc, #152]	; (800e598 <HAL_UART_IRQHandler+0x260>)
 800e4fe:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e504:	4618      	mov	r0, r3
 800e506:	f7fa f90b 	bl	8008720 <HAL_DMA_Abort_IT>
 800e50a:	4603      	mov	r3, r0
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d016      	beq.n	800e53e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e516:	687a      	ldr	r2, [r7, #4]
 800e518:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e51a:	4610      	mov	r0, r2
 800e51c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e51e:	e00e      	b.n	800e53e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f84f 	bl	800e5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e526:	e00a      	b.n	800e53e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f84b 	bl	800e5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e52e:	e006      	b.n	800e53e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f847 	bl	800e5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800e53c:	e025      	b.n	800e58a <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e53e:	bf00      	nop
    return;
 800e540:	e023      	b.n	800e58a <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e542:	69fb      	ldr	r3, [r7, #28]
 800e544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d00d      	beq.n	800e568 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e552:	2b00      	cmp	r3, #0
 800e554:	d008      	beq.n	800e568 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d017      	beq.n	800e58e <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	4798      	blx	r3
    }
    return;
 800e566:	e012      	b.n	800e58e <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e568:	69fb      	ldr	r3, [r7, #28]
 800e56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d00e      	beq.n	800e590 <HAL_UART_IRQHandler+0x258>
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d009      	beq.n	800e590 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fce8 	bl	800ef52 <UART_EndTransmit_IT>
    return;
 800e582:	bf00      	nop
 800e584:	e004      	b.n	800e590 <HAL_UART_IRQHandler+0x258>
      return;
 800e586:	bf00      	nop
 800e588:	e002      	b.n	800e590 <HAL_UART_IRQHandler+0x258>
    return;
 800e58a:	bf00      	nop
 800e58c:	e000      	b.n	800e590 <HAL_UART_IRQHandler+0x258>
    return;
 800e58e:	bf00      	nop
  }

}
 800e590:	3720      	adds	r7, #32
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	0800ef27 	.word	0x0800ef27

0800e59c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e59c:	b480      	push	{r7}
 800e59e:	b083      	sub	sp, #12
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e5a4:	bf00      	nop
 800e5a6:	370c      	adds	r7, #12
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b083      	sub	sp, #12
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e5cc:	bf00      	nop
 800e5ce:	370c      	adds	r7, #12
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr

0800e5d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	689a      	ldr	r2, [r3, #8]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	431a      	orrs	r2, r3
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	695b      	ldr	r3, [r3, #20]
 800e5f6:	431a      	orrs	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	69db      	ldr	r3, [r3, #28]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	4bb1      	ldr	r3, [pc, #708]	; (800e8cc <UART_SetConfig+0x2f4>)
 800e608:	4013      	ands	r3, r2
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	6812      	ldr	r2, [r2, #0]
 800e60e:	6939      	ldr	r1, [r7, #16]
 800e610:	430b      	orrs	r3, r1
 800e612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	68da      	ldr	r2, [r3, #12]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	430a      	orrs	r2, r1
 800e628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6a1b      	ldr	r3, [r3, #32]
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	4313      	orrs	r3, r2
 800e638:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	693a      	ldr	r2, [r7, #16]
 800e64a:	430a      	orrs	r2, r1
 800e64c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	4a9f      	ldr	r2, [pc, #636]	; (800e8d0 <UART_SetConfig+0x2f8>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d121      	bne.n	800e69c <UART_SetConfig+0xc4>
 800e658:	4b9e      	ldr	r3, [pc, #632]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e65e:	f003 0303 	and.w	r3, r3, #3
 800e662:	2b03      	cmp	r3, #3
 800e664:	d816      	bhi.n	800e694 <UART_SetConfig+0xbc>
 800e666:	a201      	add	r2, pc, #4	; (adr r2, 800e66c <UART_SetConfig+0x94>)
 800e668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e66c:	0800e67d 	.word	0x0800e67d
 800e670:	0800e689 	.word	0x0800e689
 800e674:	0800e683 	.word	0x0800e683
 800e678:	0800e68f 	.word	0x0800e68f
 800e67c:	2301      	movs	r3, #1
 800e67e:	77fb      	strb	r3, [r7, #31]
 800e680:	e151      	b.n	800e926 <UART_SetConfig+0x34e>
 800e682:	2302      	movs	r3, #2
 800e684:	77fb      	strb	r3, [r7, #31]
 800e686:	e14e      	b.n	800e926 <UART_SetConfig+0x34e>
 800e688:	2304      	movs	r3, #4
 800e68a:	77fb      	strb	r3, [r7, #31]
 800e68c:	e14b      	b.n	800e926 <UART_SetConfig+0x34e>
 800e68e:	2308      	movs	r3, #8
 800e690:	77fb      	strb	r3, [r7, #31]
 800e692:	e148      	b.n	800e926 <UART_SetConfig+0x34e>
 800e694:	2310      	movs	r3, #16
 800e696:	77fb      	strb	r3, [r7, #31]
 800e698:	bf00      	nop
 800e69a:	e144      	b.n	800e926 <UART_SetConfig+0x34e>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a8d      	ldr	r2, [pc, #564]	; (800e8d8 <UART_SetConfig+0x300>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d134      	bne.n	800e710 <UART_SetConfig+0x138>
 800e6a6:	4b8b      	ldr	r3, [pc, #556]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e6a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6ac:	f003 030c 	and.w	r3, r3, #12
 800e6b0:	2b0c      	cmp	r3, #12
 800e6b2:	d829      	bhi.n	800e708 <UART_SetConfig+0x130>
 800e6b4:	a201      	add	r2, pc, #4	; (adr r2, 800e6bc <UART_SetConfig+0xe4>)
 800e6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ba:	bf00      	nop
 800e6bc:	0800e6f1 	.word	0x0800e6f1
 800e6c0:	0800e709 	.word	0x0800e709
 800e6c4:	0800e709 	.word	0x0800e709
 800e6c8:	0800e709 	.word	0x0800e709
 800e6cc:	0800e6fd 	.word	0x0800e6fd
 800e6d0:	0800e709 	.word	0x0800e709
 800e6d4:	0800e709 	.word	0x0800e709
 800e6d8:	0800e709 	.word	0x0800e709
 800e6dc:	0800e6f7 	.word	0x0800e6f7
 800e6e0:	0800e709 	.word	0x0800e709
 800e6e4:	0800e709 	.word	0x0800e709
 800e6e8:	0800e709 	.word	0x0800e709
 800e6ec:	0800e703 	.word	0x0800e703
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	77fb      	strb	r3, [r7, #31]
 800e6f4:	e117      	b.n	800e926 <UART_SetConfig+0x34e>
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	77fb      	strb	r3, [r7, #31]
 800e6fa:	e114      	b.n	800e926 <UART_SetConfig+0x34e>
 800e6fc:	2304      	movs	r3, #4
 800e6fe:	77fb      	strb	r3, [r7, #31]
 800e700:	e111      	b.n	800e926 <UART_SetConfig+0x34e>
 800e702:	2308      	movs	r3, #8
 800e704:	77fb      	strb	r3, [r7, #31]
 800e706:	e10e      	b.n	800e926 <UART_SetConfig+0x34e>
 800e708:	2310      	movs	r3, #16
 800e70a:	77fb      	strb	r3, [r7, #31]
 800e70c:	bf00      	nop
 800e70e:	e10a      	b.n	800e926 <UART_SetConfig+0x34e>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a71      	ldr	r2, [pc, #452]	; (800e8dc <UART_SetConfig+0x304>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d120      	bne.n	800e75c <UART_SetConfig+0x184>
 800e71a:	4b6e      	ldr	r3, [pc, #440]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e71c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e720:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e724:	2b10      	cmp	r3, #16
 800e726:	d00f      	beq.n	800e748 <UART_SetConfig+0x170>
 800e728:	2b10      	cmp	r3, #16
 800e72a:	d802      	bhi.n	800e732 <UART_SetConfig+0x15a>
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d005      	beq.n	800e73c <UART_SetConfig+0x164>
 800e730:	e010      	b.n	800e754 <UART_SetConfig+0x17c>
 800e732:	2b20      	cmp	r3, #32
 800e734:	d005      	beq.n	800e742 <UART_SetConfig+0x16a>
 800e736:	2b30      	cmp	r3, #48	; 0x30
 800e738:	d009      	beq.n	800e74e <UART_SetConfig+0x176>
 800e73a:	e00b      	b.n	800e754 <UART_SetConfig+0x17c>
 800e73c:	2300      	movs	r3, #0
 800e73e:	77fb      	strb	r3, [r7, #31]
 800e740:	e0f1      	b.n	800e926 <UART_SetConfig+0x34e>
 800e742:	2302      	movs	r3, #2
 800e744:	77fb      	strb	r3, [r7, #31]
 800e746:	e0ee      	b.n	800e926 <UART_SetConfig+0x34e>
 800e748:	2304      	movs	r3, #4
 800e74a:	77fb      	strb	r3, [r7, #31]
 800e74c:	e0eb      	b.n	800e926 <UART_SetConfig+0x34e>
 800e74e:	2308      	movs	r3, #8
 800e750:	77fb      	strb	r3, [r7, #31]
 800e752:	e0e8      	b.n	800e926 <UART_SetConfig+0x34e>
 800e754:	2310      	movs	r3, #16
 800e756:	77fb      	strb	r3, [r7, #31]
 800e758:	bf00      	nop
 800e75a:	e0e4      	b.n	800e926 <UART_SetConfig+0x34e>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a5f      	ldr	r2, [pc, #380]	; (800e8e0 <UART_SetConfig+0x308>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d120      	bne.n	800e7a8 <UART_SetConfig+0x1d0>
 800e766:	4b5b      	ldr	r3, [pc, #364]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e76c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e770:	2b40      	cmp	r3, #64	; 0x40
 800e772:	d00f      	beq.n	800e794 <UART_SetConfig+0x1bc>
 800e774:	2b40      	cmp	r3, #64	; 0x40
 800e776:	d802      	bhi.n	800e77e <UART_SetConfig+0x1a6>
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d005      	beq.n	800e788 <UART_SetConfig+0x1b0>
 800e77c:	e010      	b.n	800e7a0 <UART_SetConfig+0x1c8>
 800e77e:	2b80      	cmp	r3, #128	; 0x80
 800e780:	d005      	beq.n	800e78e <UART_SetConfig+0x1b6>
 800e782:	2bc0      	cmp	r3, #192	; 0xc0
 800e784:	d009      	beq.n	800e79a <UART_SetConfig+0x1c2>
 800e786:	e00b      	b.n	800e7a0 <UART_SetConfig+0x1c8>
 800e788:	2300      	movs	r3, #0
 800e78a:	77fb      	strb	r3, [r7, #31]
 800e78c:	e0cb      	b.n	800e926 <UART_SetConfig+0x34e>
 800e78e:	2302      	movs	r3, #2
 800e790:	77fb      	strb	r3, [r7, #31]
 800e792:	e0c8      	b.n	800e926 <UART_SetConfig+0x34e>
 800e794:	2304      	movs	r3, #4
 800e796:	77fb      	strb	r3, [r7, #31]
 800e798:	e0c5      	b.n	800e926 <UART_SetConfig+0x34e>
 800e79a:	2308      	movs	r3, #8
 800e79c:	77fb      	strb	r3, [r7, #31]
 800e79e:	e0c2      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7a0:	2310      	movs	r3, #16
 800e7a2:	77fb      	strb	r3, [r7, #31]
 800e7a4:	bf00      	nop
 800e7a6:	e0be      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a4d      	ldr	r2, [pc, #308]	; (800e8e4 <UART_SetConfig+0x30c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d124      	bne.n	800e7fc <UART_SetConfig+0x224>
 800e7b2:	4b48      	ldr	r3, [pc, #288]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7c0:	d012      	beq.n	800e7e8 <UART_SetConfig+0x210>
 800e7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7c6:	d802      	bhi.n	800e7ce <UART_SetConfig+0x1f6>
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d007      	beq.n	800e7dc <UART_SetConfig+0x204>
 800e7cc:	e012      	b.n	800e7f4 <UART_SetConfig+0x21c>
 800e7ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7d2:	d006      	beq.n	800e7e2 <UART_SetConfig+0x20a>
 800e7d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7d8:	d009      	beq.n	800e7ee <UART_SetConfig+0x216>
 800e7da:	e00b      	b.n	800e7f4 <UART_SetConfig+0x21c>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	77fb      	strb	r3, [r7, #31]
 800e7e0:	e0a1      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7e2:	2302      	movs	r3, #2
 800e7e4:	77fb      	strb	r3, [r7, #31]
 800e7e6:	e09e      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7e8:	2304      	movs	r3, #4
 800e7ea:	77fb      	strb	r3, [r7, #31]
 800e7ec:	e09b      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7ee:	2308      	movs	r3, #8
 800e7f0:	77fb      	strb	r3, [r7, #31]
 800e7f2:	e098      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7f4:	2310      	movs	r3, #16
 800e7f6:	77fb      	strb	r3, [r7, #31]
 800e7f8:	bf00      	nop
 800e7fa:	e094      	b.n	800e926 <UART_SetConfig+0x34e>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4a39      	ldr	r2, [pc, #228]	; (800e8e8 <UART_SetConfig+0x310>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d124      	bne.n	800e850 <UART_SetConfig+0x278>
 800e806:	4b33      	ldr	r3, [pc, #204]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e80c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e814:	d012      	beq.n	800e83c <UART_SetConfig+0x264>
 800e816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e81a:	d802      	bhi.n	800e822 <UART_SetConfig+0x24a>
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d007      	beq.n	800e830 <UART_SetConfig+0x258>
 800e820:	e012      	b.n	800e848 <UART_SetConfig+0x270>
 800e822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e826:	d006      	beq.n	800e836 <UART_SetConfig+0x25e>
 800e828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e82c:	d009      	beq.n	800e842 <UART_SetConfig+0x26a>
 800e82e:	e00b      	b.n	800e848 <UART_SetConfig+0x270>
 800e830:	2301      	movs	r3, #1
 800e832:	77fb      	strb	r3, [r7, #31]
 800e834:	e077      	b.n	800e926 <UART_SetConfig+0x34e>
 800e836:	2302      	movs	r3, #2
 800e838:	77fb      	strb	r3, [r7, #31]
 800e83a:	e074      	b.n	800e926 <UART_SetConfig+0x34e>
 800e83c:	2304      	movs	r3, #4
 800e83e:	77fb      	strb	r3, [r7, #31]
 800e840:	e071      	b.n	800e926 <UART_SetConfig+0x34e>
 800e842:	2308      	movs	r3, #8
 800e844:	77fb      	strb	r3, [r7, #31]
 800e846:	e06e      	b.n	800e926 <UART_SetConfig+0x34e>
 800e848:	2310      	movs	r3, #16
 800e84a:	77fb      	strb	r3, [r7, #31]
 800e84c:	bf00      	nop
 800e84e:	e06a      	b.n	800e926 <UART_SetConfig+0x34e>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4a25      	ldr	r2, [pc, #148]	; (800e8ec <UART_SetConfig+0x314>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d124      	bne.n	800e8a4 <UART_SetConfig+0x2cc>
 800e85a:	4b1e      	ldr	r3, [pc, #120]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e85c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e860:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e868:	d012      	beq.n	800e890 <UART_SetConfig+0x2b8>
 800e86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e86e:	d802      	bhi.n	800e876 <UART_SetConfig+0x29e>
 800e870:	2b00      	cmp	r3, #0
 800e872:	d007      	beq.n	800e884 <UART_SetConfig+0x2ac>
 800e874:	e012      	b.n	800e89c <UART_SetConfig+0x2c4>
 800e876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e87a:	d006      	beq.n	800e88a <UART_SetConfig+0x2b2>
 800e87c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e880:	d009      	beq.n	800e896 <UART_SetConfig+0x2be>
 800e882:	e00b      	b.n	800e89c <UART_SetConfig+0x2c4>
 800e884:	2300      	movs	r3, #0
 800e886:	77fb      	strb	r3, [r7, #31]
 800e888:	e04d      	b.n	800e926 <UART_SetConfig+0x34e>
 800e88a:	2302      	movs	r3, #2
 800e88c:	77fb      	strb	r3, [r7, #31]
 800e88e:	e04a      	b.n	800e926 <UART_SetConfig+0x34e>
 800e890:	2304      	movs	r3, #4
 800e892:	77fb      	strb	r3, [r7, #31]
 800e894:	e047      	b.n	800e926 <UART_SetConfig+0x34e>
 800e896:	2308      	movs	r3, #8
 800e898:	77fb      	strb	r3, [r7, #31]
 800e89a:	e044      	b.n	800e926 <UART_SetConfig+0x34e>
 800e89c:	2310      	movs	r3, #16
 800e89e:	77fb      	strb	r3, [r7, #31]
 800e8a0:	bf00      	nop
 800e8a2:	e040      	b.n	800e926 <UART_SetConfig+0x34e>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4a11      	ldr	r2, [pc, #68]	; (800e8f0 <UART_SetConfig+0x318>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d139      	bne.n	800e922 <UART_SetConfig+0x34a>
 800e8ae:	4b09      	ldr	r3, [pc, #36]	; (800e8d4 <UART_SetConfig+0x2fc>)
 800e8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e8b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8bc:	d027      	beq.n	800e90e <UART_SetConfig+0x336>
 800e8be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8c2:	d817      	bhi.n	800e8f4 <UART_SetConfig+0x31c>
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d01c      	beq.n	800e902 <UART_SetConfig+0x32a>
 800e8c8:	e027      	b.n	800e91a <UART_SetConfig+0x342>
 800e8ca:	bf00      	nop
 800e8cc:	efff69f3 	.word	0xefff69f3
 800e8d0:	40011000 	.word	0x40011000
 800e8d4:	40023800 	.word	0x40023800
 800e8d8:	40004400 	.word	0x40004400
 800e8dc:	40004800 	.word	0x40004800
 800e8e0:	40004c00 	.word	0x40004c00
 800e8e4:	40005000 	.word	0x40005000
 800e8e8:	40011400 	.word	0x40011400
 800e8ec:	40007800 	.word	0x40007800
 800e8f0:	40007c00 	.word	0x40007c00
 800e8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8f8:	d006      	beq.n	800e908 <UART_SetConfig+0x330>
 800e8fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e8fe:	d009      	beq.n	800e914 <UART_SetConfig+0x33c>
 800e900:	e00b      	b.n	800e91a <UART_SetConfig+0x342>
 800e902:	2300      	movs	r3, #0
 800e904:	77fb      	strb	r3, [r7, #31]
 800e906:	e00e      	b.n	800e926 <UART_SetConfig+0x34e>
 800e908:	2302      	movs	r3, #2
 800e90a:	77fb      	strb	r3, [r7, #31]
 800e90c:	e00b      	b.n	800e926 <UART_SetConfig+0x34e>
 800e90e:	2304      	movs	r3, #4
 800e910:	77fb      	strb	r3, [r7, #31]
 800e912:	e008      	b.n	800e926 <UART_SetConfig+0x34e>
 800e914:	2308      	movs	r3, #8
 800e916:	77fb      	strb	r3, [r7, #31]
 800e918:	e005      	b.n	800e926 <UART_SetConfig+0x34e>
 800e91a:	2310      	movs	r3, #16
 800e91c:	77fb      	strb	r3, [r7, #31]
 800e91e:	bf00      	nop
 800e920:	e001      	b.n	800e926 <UART_SetConfig+0x34e>
 800e922:	2310      	movs	r3, #16
 800e924:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e92e:	d17f      	bne.n	800ea30 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e930:	7ffb      	ldrb	r3, [r7, #31]
 800e932:	2b08      	cmp	r3, #8
 800e934:	d85c      	bhi.n	800e9f0 <UART_SetConfig+0x418>
 800e936:	a201      	add	r2, pc, #4	; (adr r2, 800e93c <UART_SetConfig+0x364>)
 800e938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e93c:	0800e961 	.word	0x0800e961
 800e940:	0800e981 	.word	0x0800e981
 800e944:	0800e9a1 	.word	0x0800e9a1
 800e948:	0800e9f1 	.word	0x0800e9f1
 800e94c:	0800e9b9 	.word	0x0800e9b9
 800e950:	0800e9f1 	.word	0x0800e9f1
 800e954:	0800e9f1 	.word	0x0800e9f1
 800e958:	0800e9f1 	.word	0x0800e9f1
 800e95c:	0800e9d9 	.word	0x0800e9d9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e960:	f7fc f99c 	bl	800ac9c <HAL_RCC_GetPCLK1Freq>
 800e964:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	005a      	lsls	r2, r3, #1
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	085b      	lsrs	r3, r3, #1
 800e970:	441a      	add	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	685b      	ldr	r3, [r3, #4]
 800e976:	fbb2 f3f3 	udiv	r3, r2, r3
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	61bb      	str	r3, [r7, #24]
        break;
 800e97e:	e03a      	b.n	800e9f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e980:	f7fc f9a0 	bl	800acc4 <HAL_RCC_GetPCLK2Freq>
 800e984:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	005a      	lsls	r2, r3, #1
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	085b      	lsrs	r3, r3, #1
 800e990:	441a      	add	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	fbb2 f3f3 	udiv	r3, r2, r3
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	61bb      	str	r3, [r7, #24]
        break;
 800e99e:	e02a      	b.n	800e9f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	085a      	lsrs	r2, r3, #1
 800e9a6:	4b5f      	ldr	r3, [pc, #380]	; (800eb24 <UART_SetConfig+0x54c>)
 800e9a8:	4413      	add	r3, r2
 800e9aa:	687a      	ldr	r2, [r7, #4]
 800e9ac:	6852      	ldr	r2, [r2, #4]
 800e9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	61bb      	str	r3, [r7, #24]
        break;
 800e9b6:	e01e      	b.n	800e9f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e9b8:	f7fc f88c 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800e9bc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	005a      	lsls	r2, r3, #1
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	085b      	lsrs	r3, r3, #1
 800e9c8:	441a      	add	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	61bb      	str	r3, [r7, #24]
        break;
 800e9d6:	e00e      	b.n	800e9f6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	085b      	lsrs	r3, r3, #1
 800e9de:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	61bb      	str	r3, [r7, #24]
        break;
 800e9ee:	e002      	b.n	800e9f6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	75fb      	strb	r3, [r7, #23]
        break;
 800e9f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	2b0f      	cmp	r3, #15
 800e9fa:	d916      	bls.n	800ea2a <UART_SetConfig+0x452>
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea02:	d212      	bcs.n	800ea2a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	f023 030f 	bic.w	r3, r3, #15
 800ea0c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	085b      	lsrs	r3, r3, #1
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	f003 0307 	and.w	r3, r3, #7
 800ea18:	b29a      	uxth	r2, r3
 800ea1a:	897b      	ldrh	r3, [r7, #10]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	897a      	ldrh	r2, [r7, #10]
 800ea26:	60da      	str	r2, [r3, #12]
 800ea28:	e070      	b.n	800eb0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	75fb      	strb	r3, [r7, #23]
 800ea2e:	e06d      	b.n	800eb0c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800ea30:	7ffb      	ldrb	r3, [r7, #31]
 800ea32:	2b08      	cmp	r3, #8
 800ea34:	d859      	bhi.n	800eaea <UART_SetConfig+0x512>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <UART_SetConfig+0x464>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800ea61 	.word	0x0800ea61
 800ea40:	0800ea7f 	.word	0x0800ea7f
 800ea44:	0800ea9d 	.word	0x0800ea9d
 800ea48:	0800eaeb 	.word	0x0800eaeb
 800ea4c:	0800eab5 	.word	0x0800eab5
 800ea50:	0800eaeb 	.word	0x0800eaeb
 800ea54:	0800eaeb 	.word	0x0800eaeb
 800ea58:	0800eaeb 	.word	0x0800eaeb
 800ea5c:	0800ead3 	.word	0x0800ead3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea60:	f7fc f91c 	bl	800ac9c <HAL_RCC_GetPCLK1Freq>
 800ea64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	085a      	lsrs	r2, r3, #1
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	441a      	add	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	61bb      	str	r3, [r7, #24]
        break;
 800ea7c:	e038      	b.n	800eaf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea7e:	f7fc f921 	bl	800acc4 <HAL_RCC_GetPCLK2Freq>
 800ea82:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	685b      	ldr	r3, [r3, #4]
 800ea88:	085a      	lsrs	r2, r3, #1
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	441a      	add	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	61bb      	str	r3, [r7, #24]
        break;
 800ea9a:	e029      	b.n	800eaf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	085a      	lsrs	r2, r3, #1
 800eaa2:	4b21      	ldr	r3, [pc, #132]	; (800eb28 <UART_SetConfig+0x550>)
 800eaa4:	4413      	add	r3, r2
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	6852      	ldr	r2, [r2, #4]
 800eaaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	61bb      	str	r3, [r7, #24]
        break;
 800eab2:	e01d      	b.n	800eaf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800eab4:	f7fc f80e 	bl	800aad4 <HAL_RCC_GetSysClockFreq>
 800eab8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	085a      	lsrs	r2, r3, #1
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	441a      	add	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	fbb2 f3f3 	udiv	r3, r2, r3
 800eacc:	b29b      	uxth	r3, r3
 800eace:	61bb      	str	r3, [r7, #24]
        break;
 800ead0:	e00e      	b.n	800eaf0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	685b      	ldr	r3, [r3, #4]
 800ead6:	085b      	lsrs	r3, r3, #1
 800ead8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	61bb      	str	r3, [r7, #24]
        break;
 800eae8:	e002      	b.n	800eaf0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800eaea:	2301      	movs	r3, #1
 800eaec:	75fb      	strb	r3, [r7, #23]
        break;
 800eaee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eaf0:	69bb      	ldr	r3, [r7, #24]
 800eaf2:	2b0f      	cmp	r3, #15
 800eaf4:	d908      	bls.n	800eb08 <UART_SetConfig+0x530>
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eafc:	d204      	bcs.n	800eb08 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	69ba      	ldr	r2, [r7, #24]
 800eb04:	60da      	str	r2, [r3, #12]
 800eb06:	e001      	b.n	800eb0c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800eb18:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3720      	adds	r7, #32
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}
 800eb22:	bf00      	nop
 800eb24:	01e84800 	.word	0x01e84800
 800eb28:	00f42400 	.word	0x00f42400

0800eb2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb38:	f003 0301 	and.w	r3, r3, #1
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00a      	beq.n	800eb56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	685b      	ldr	r3, [r3, #4]
 800eb46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	430a      	orrs	r2, r1
 800eb54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00a      	beq.n	800eb78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	430a      	orrs	r2, r1
 800eb76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7c:	f003 0304 	and.w	r3, r3, #4
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00a      	beq.n	800eb9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	685b      	ldr	r3, [r3, #4]
 800eb8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	430a      	orrs	r2, r1
 800eb98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb9e:	f003 0308 	and.w	r3, r3, #8
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00a      	beq.n	800ebbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	685b      	ldr	r3, [r3, #4]
 800ebac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc0:	f003 0310 	and.w	r3, r3, #16
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d00a      	beq.n	800ebde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	430a      	orrs	r2, r1
 800ebdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebe2:	f003 0320 	and.w	r3, r3, #32
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d00a      	beq.n	800ec00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	430a      	orrs	r2, r1
 800ebfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d01a      	beq.n	800ec42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ec2a:	d10a      	bne.n	800ec42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	430a      	orrs	r2, r1
 800ec40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00a      	beq.n	800ec64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	605a      	str	r2, [r3, #4]
  }
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b086      	sub	sp, #24
 800ec74:	af02      	add	r7, sp, #8
 800ec76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ec7e:	f7f8 fe61 	bl	8007944 <HAL_GetTick>
 800ec82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f003 0308 	and.w	r3, r3, #8
 800ec8e:	2b08      	cmp	r3, #8
 800ec90:	d10e      	bne.n	800ecb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec96:	9300      	str	r3, [sp, #0]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f814 	bl	800ecce <UART_WaitOnFlagUntilTimeout>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d001      	beq.n	800ecb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e00a      	b.n	800ecc6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2220      	movs	r2, #32
 800ecb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b084      	sub	sp, #16
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	603b      	str	r3, [r7, #0]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ecde:	e05d      	b.n	800ed9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece6:	d059      	beq.n	800ed9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ece8:	f7f8 fe2c 	bl	8007944 <HAL_GetTick>
 800ecec:	4602      	mov	r2, r0
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	1ad3      	subs	r3, r2, r3
 800ecf2:	69ba      	ldr	r2, [r7, #24]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d302      	bcc.n	800ecfe <UART_WaitOnFlagUntilTimeout+0x30>
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d11b      	bne.n	800ed36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	689a      	ldr	r2, [r3, #8]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f022 0201 	bic.w	r2, r2, #1
 800ed1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	2220      	movs	r2, #32
 800ed22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	2220      	movs	r2, #32
 800ed28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e042      	b.n	800edbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	f003 0304 	and.w	r3, r3, #4
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d02b      	beq.n	800ed9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	69db      	ldr	r3, [r3, #28]
 800ed4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed52:	d123      	bne.n	800ed9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ed6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	689a      	ldr	r2, [r3, #8]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f022 0201 	bic.w	r2, r2, #1
 800ed7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2220      	movs	r2, #32
 800ed82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2220      	movs	r2, #32
 800ed88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2220      	movs	r2, #32
 800ed8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ed98:	2303      	movs	r3, #3
 800ed9a:	e00f      	b.n	800edbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	69da      	ldr	r2, [r3, #28]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	4013      	ands	r3, r2
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	bf0c      	ite	eq
 800edac:	2301      	moveq	r3, #1
 800edae:	2300      	movne	r3, #0
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	461a      	mov	r2, r3
 800edb4:	79fb      	ldrb	r3, [r7, #7]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d092      	beq.n	800ece0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3710      	adds	r7, #16
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	681a      	ldr	r2, [r3, #0]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800edda:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2220      	movs	r2, #32
 800ede0:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ede2:	bf00      	nop
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edee:	b480      	push	{r7}
 800edf0:	b083      	sub	sp, #12
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee04:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	689a      	ldr	r2, [r3, #8]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f022 0201 	bic.w	r2, r2, #1
 800ee14:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2220      	movs	r2, #32
 800ee1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ee22:	bf00      	nop
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b084      	sub	sp, #16
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee3a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	69db      	ldr	r3, [r3, #28]
 800ee40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee44:	d01e      	beq.n	800ee84 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689a      	ldr	r2, [r3, #8]
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 0201 	bic.w	r2, r2, #1
 800ee6c:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689a      	ldr	r2, [r3, #8]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee7c:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2220      	movs	r2, #32
 800ee82:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7f8 fca3 	bl	80077d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee8a:	bf00      	nop
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f7ff fb85 	bl	800e5b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eea6:	bf00      	nop
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b086      	sub	sp, #24
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eec0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eec6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eed2:	2b80      	cmp	r3, #128	; 0x80
 800eed4:	d109      	bne.n	800eeea <UART_DMAError+0x3c>
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	2b21      	cmp	r3, #33	; 0x21
 800eeda:	d106      	bne.n	800eeea <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	2200      	movs	r2, #0
 800eee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800eee4:	6978      	ldr	r0, [r7, #20]
 800eee6:	f7ff ff6d 	bl	800edc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eef4:	2b40      	cmp	r3, #64	; 0x40
 800eef6:	d109      	bne.n	800ef0c <UART_DMAError+0x5e>
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2b22      	cmp	r3, #34	; 0x22
 800eefc:	d106      	bne.n	800ef0c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7ff ff71 	bl	800edee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef10:	f043 0210 	orr.w	r2, r3, #16
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef18:	6978      	ldr	r0, [r7, #20]
 800ef1a:	f7ff fb53 	bl	800e5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef1e:	bf00      	nop
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b084      	sub	sp, #16
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2200      	movs	r2, #0
 800ef38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef44:	68f8      	ldr	r0, [r7, #12]
 800ef46:	f7ff fb3d 	bl	800e5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b082      	sub	sp, #8
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef68:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2220      	movs	r2, #32
 800ef6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f7ff fb10 	bl	800e59c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}

0800ef84 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef92:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef98:	2b22      	cmp	r3, #34	; 0x22
 800ef9a:	d13a      	bne.n	800f012 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efa2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800efa4:	89bb      	ldrh	r3, [r7, #12]
 800efa6:	b2d9      	uxtb	r1, r3
 800efa8:	89fb      	ldrh	r3, [r7, #14]
 800efaa:	b2da      	uxtb	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efb0:	400a      	ands	r2, r1
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efba:	1c5a      	adds	r2, r3, #1
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800efc6:	b29b      	uxth	r3, r3
 800efc8:	3b01      	subs	r3, #1
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800efd8:	b29b      	uxth	r3, r3
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d121      	bne.n	800f022 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800efec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	689a      	ldr	r2, [r3, #8]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	f022 0201 	bic.w	r2, r2, #1
 800effc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2220      	movs	r2, #32
 800f002:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f8 fbe0 	bl	80077d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f010:	e007      	b.n	800f022 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	699a      	ldr	r2, [r3, #24]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f042 0208 	orr.w	r2, r2, #8
 800f020:	619a      	str	r2, [r3, #24]
}
 800f022:	bf00      	nop
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f038:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f03e:	2b22      	cmp	r3, #34	; 0x22
 800f040:	d13a      	bne.n	800f0b8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f048:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f04e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800f050:	89ba      	ldrh	r2, [r7, #12]
 800f052:	89fb      	ldrh	r3, [r7, #14]
 800f054:	4013      	ands	r3, r2
 800f056:	b29a      	uxth	r2, r3
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f060:	1c9a      	adds	r2, r3, #2
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	3b01      	subs	r3, #1
 800f070:	b29a      	uxth	r2, r3
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f07e:	b29b      	uxth	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d121      	bne.n	800f0c8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f092:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f022 0201 	bic.w	r2, r2, #1
 800f0a2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2220      	movs	r2, #32
 800f0a8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f7f8 fb8d 	bl	80077d0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f0b6:	e007      	b.n	800f0c8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	699a      	ldr	r2, [r3, #24]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f042 0208 	orr.w	r2, r2, #8
 800f0c6:	619a      	str	r2, [r3, #24]
}
 800f0c8:	bf00      	nop
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	b480      	push	{r7}
 800f0d4:	b085      	sub	sp, #20
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	f107 001c 	add.w	r0, r7, #28
 800f0de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f0e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f0ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f0ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f0f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f0f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f0fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	4b07      	ldr	r3, [pc, #28]	; (800f124 <SDMMC_Init+0x54>)
 800f108:	4013      	ands	r3, r2
 800f10a:	68fa      	ldr	r2, [r7, #12]
 800f10c:	431a      	orrs	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f112:	2300      	movs	r3, #0
}
 800f114:	4618      	mov	r0, r3
 800f116:	3714      	adds	r7, #20
 800f118:	46bd      	mov	sp, r7
 800f11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11e:	b004      	add	sp, #16
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	ffff8100 	.word	0xffff8100

0800f128 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f136:	4618      	mov	r0, r3
 800f138:	370c      	adds	r7, #12
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
 800f14a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f156:	2300      	movs	r3, #0
}
 800f158:	4618      	mov	r0, r3
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2203      	movs	r2, #3
 800f170:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800f172:	2002      	movs	r0, #2
 800f174:	f7f8 fbf2 	bl	800795c <HAL_Delay>
  
  return HAL_OK;
 800f178:	2300      	movs	r3, #0
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3708      	adds	r7, #8
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f182:	b480      	push	{r7}
 800f184:	b083      	sub	sp, #12
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f003 0303 	and.w	r3, r3, #3
}
 800f192:	4618      	mov	r0, r3
 800f194:	370c      	adds	r7, #12
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr
	...

0800f1a0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1be:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f1c4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f1ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	68da      	ldr	r2, [r3, #12]
 800f1d6:	4b06      	ldr	r3, [pc, #24]	; (800f1f0 <SDMMC_SendCommand+0x50>)
 800f1d8:	4013      	ands	r3, r2
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	431a      	orrs	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3714      	adds	r7, #20
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	fffff000 	.word	0xfffff000

0800f1f4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	691b      	ldr	r3, [r3, #16]
 800f200:	b2db      	uxtb	r3, r3
}
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f20e:	b480      	push	{r7}
 800f210:	b085      	sub	sp, #20
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
 800f216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3314      	adds	r3, #20
 800f21c:	461a      	mov	r2, r3
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	4413      	add	r3, r2
 800f222:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
}  
 800f228:	4618      	mov	r0, r3
 800f22a:	3714      	adds	r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f232:	4770      	bx	lr

0800f234 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f234:	b480      	push	{r7}
 800f236:	b085      	sub	sp, #20
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	681a      	ldr	r2, [r3, #0]
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f24a:	683b      	ldr	r3, [r7, #0]
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f25a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f260:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f266:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f268:	68fa      	ldr	r2, [r7, #12]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f272:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	431a      	orrs	r2, r3
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0

}
 800f280:	4618      	mov	r0, r3
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b088      	sub	sp, #32
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f29a:	2310      	movs	r3, #16
 800f29c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f29e:	2340      	movs	r3, #64	; 0x40
 800f2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2ac:	f107 0308 	add.w	r3, r7, #8
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff ff74 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f2b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2bc:	2110      	movs	r1, #16
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f000 fa42 	bl	800f748 <SDMMC_GetCmdResp1>
 800f2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2c6:	69fb      	ldr	r3, [r7, #28]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3720      	adds	r7, #32
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f2de:	2311      	movs	r3, #17
 800f2e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2e2:	2340      	movs	r3, #64	; 0x40
 800f2e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2f0:	f107 0308 	add.w	r3, r7, #8
 800f2f4:	4619      	mov	r1, r3
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7ff ff52 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f300:	2111      	movs	r1, #17
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fa20 	bl	800f748 <SDMMC_GetCmdResp1>
 800f308:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f30a:	69fb      	ldr	r3, [r7, #28]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3720      	adds	r7, #32
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b088      	sub	sp, #32
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f322:	2312      	movs	r3, #18
 800f324:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f326:	2340      	movs	r3, #64	; 0x40
 800f328:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f32e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f332:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f334:	f107 0308 	add.w	r3, r7, #8
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7ff ff30 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f340:	f241 3288 	movw	r2, #5000	; 0x1388
 800f344:	2112      	movs	r1, #18
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 f9fe 	bl	800f748 <SDMMC_GetCmdResp1>
 800f34c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f34e:	69fb      	ldr	r3, [r7, #28]
}
 800f350:	4618      	mov	r0, r3
 800f352:	3720      	adds	r7, #32
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}

0800f358 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
 800f360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f366:	2318      	movs	r3, #24
 800f368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f36a:	2340      	movs	r3, #64	; 0x40
 800f36c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f36e:	2300      	movs	r3, #0
 800f370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f378:	f107 0308 	add.w	r3, r7, #8
 800f37c:	4619      	mov	r1, r3
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f7ff ff0e 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f384:	f241 3288 	movw	r2, #5000	; 0x1388
 800f388:	2118      	movs	r1, #24
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f9dc 	bl	800f748 <SDMMC_GetCmdResp1>
 800f390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f392:	69fb      	ldr	r3, [r7, #28]
}
 800f394:	4618      	mov	r0, r3
 800f396:	3720      	adds	r7, #32
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}

0800f39c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f3aa:	2319      	movs	r3, #25
 800f3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3ae:	2340      	movs	r3, #64	; 0x40
 800f3b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3bc:	f107 0308 	add.w	r3, r7, #8
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f7ff feec 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3cc:	2119      	movs	r1, #25
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f9ba 	bl	800f748 <SDMMC_GetCmdResp1>
 800f3d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3d6:	69fb      	ldr	r3, [r7, #28]
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3720      	adds	r7, #32
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f3ec:	230c      	movs	r3, #12
 800f3ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3f0:	2340      	movs	r3, #64	; 0x40
 800f3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3fe:	f107 0308 	add.w	r3, r7, #8
 800f402:	4619      	mov	r1, r3
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7ff fecb 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f40a:	4a05      	ldr	r2, [pc, #20]	; (800f420 <SDMMC_CmdStopTransfer+0x40>)
 800f40c:	210c      	movs	r1, #12
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 f99a 	bl	800f748 <SDMMC_GetCmdResp1>
 800f414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f416:	69fb      	ldr	r3, [r7, #28]
}
 800f418:	4618      	mov	r0, r3
 800f41a:	3720      	adds	r7, #32
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	05f5e100 	.word	0x05f5e100

0800f424 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b08a      	sub	sp, #40	; 0x28
 800f428:	af00      	add	r7, sp, #0
 800f42a:	60f8      	str	r0, [r7, #12]
 800f42c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f434:	2307      	movs	r3, #7
 800f436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f438:	2340      	movs	r3, #64	; 0x40
 800f43a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f43c:	2300      	movs	r3, #0
 800f43e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f444:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f446:	f107 0310 	add.w	r3, r7, #16
 800f44a:	4619      	mov	r1, r3
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	f7ff fea7 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f452:	f241 3288 	movw	r2, #5000	; 0x1388
 800f456:	2107      	movs	r1, #7
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f000 f975 	bl	800f748 <SDMMC_GetCmdResp1>
 800f45e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f462:	4618      	mov	r0, r3
 800f464:	3728      	adds	r7, #40	; 0x28
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b088      	sub	sp, #32
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f472:	2300      	movs	r3, #0
 800f474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f476:	2300      	movs	r3, #0
 800f478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f47a:	2300      	movs	r3, #0
 800f47c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f47e:	2300      	movs	r3, #0
 800f480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f488:	f107 0308 	add.w	r3, r7, #8
 800f48c:	4619      	mov	r1, r3
 800f48e:	6878      	ldr	r0, [r7, #4]
 800f490:	f7ff fe86 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f92f 	bl	800f6f8 <SDMMC_GetCmdError>
 800f49a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f49c:	69fb      	ldr	r3, [r7, #28]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3720      	adds	r7, #32
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b088      	sub	sp, #32
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f4ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f4b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f4b4:	2308      	movs	r3, #8
 800f4b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4b8:	2340      	movs	r3, #64	; 0x40
 800f4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4c6:	f107 0308 	add.w	r3, r7, #8
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff fe67 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f000 fb18 	bl	800fb08 <SDMMC_GetCmdResp7>
 800f4d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4da:	69fb      	ldr	r3, [r7, #28]
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	3720      	adds	r7, #32
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	bd80      	pop	{r7, pc}

0800f4e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b088      	sub	sp, #32
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f4f2:	2337      	movs	r3, #55	; 0x37
 800f4f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4f6:	2340      	movs	r3, #64	; 0x40
 800f4f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f502:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f504:	f107 0308 	add.w	r3, r7, #8
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff fe48 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f510:	f241 3288 	movw	r2, #5000	; 0x1388
 800f514:	2137      	movs	r1, #55	; 0x37
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f916 	bl	800f748 <SDMMC_GetCmdResp1>
 800f51c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f51e:	69fb      	ldr	r3, [r7, #28]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3720      	adds	r7, #32
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	4b0d      	ldr	r3, [pc, #52]	; (800f56c <SDMMC_CmdAppOperCommand+0x44>)
 800f536:	4313      	orrs	r3, r2
 800f538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f53a:	2329      	movs	r3, #41	; 0x29
 800f53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f53e:	2340      	movs	r3, #64	; 0x40
 800f540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f542:	2300      	movs	r3, #0
 800f544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f54a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f54c:	f107 0308 	add.w	r3, r7, #8
 800f550:	4619      	mov	r1, r3
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7ff fe24 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 fa27 	bl	800f9ac <SDMMC_GetCmdResp3>
 800f55e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f560:	69fb      	ldr	r3, [r7, #28]
}
 800f562:	4618      	mov	r0, r3
 800f564:	3720      	adds	r7, #32
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	80100000 	.word	0x80100000

0800f570 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b088      	sub	sp, #32
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
 800f578:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f57e:	2306      	movs	r3, #6
 800f580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f582:	2340      	movs	r3, #64	; 0x40
 800f584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f586:	2300      	movs	r3, #0
 800f588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f58e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f590:	f107 0308 	add.w	r3, r7, #8
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff fe02 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f59c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5a0:	2106      	movs	r1, #6
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f8d0 	bl	800f748 <SDMMC_GetCmdResp1>
 800f5a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5aa:	69fb      	ldr	r3, [r7, #28]
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	3720      	adds	r7, #32
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	bd80      	pop	{r7, pc}

0800f5b4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b088      	sub	sp, #32
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f5c0:	2333      	movs	r3, #51	; 0x33
 800f5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5c4:	2340      	movs	r3, #64	; 0x40
 800f5c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5d2:	f107 0308 	add.w	r3, r7, #8
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f7ff fde1 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f5de:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e2:	2133      	movs	r1, #51	; 0x33
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f8af 	bl	800f748 <SDMMC_GetCmdResp1>
 800f5ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ec:	69fb      	ldr	r3, [r7, #28]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3720      	adds	r7, #32
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b088      	sub	sp, #32
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f5fe:	2300      	movs	r3, #0
 800f600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f602:	2302      	movs	r3, #2
 800f604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f606:	23c0      	movs	r3, #192	; 0xc0
 800f608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f60a:	2300      	movs	r3, #0
 800f60c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f614:	f107 0308 	add.w	r3, r7, #8
 800f618:	4619      	mov	r1, r3
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f7ff fdc0 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f000 f97d 	bl	800f920 <SDMMC_GetCmdResp2>
 800f626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f628:	69fb      	ldr	r3, [r7, #28]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3720      	adds	r7, #32
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b088      	sub	sp, #32
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f640:	2309      	movs	r3, #9
 800f642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f644:	23c0      	movs	r3, #192	; 0xc0
 800f646:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f648:	2300      	movs	r3, #0
 800f64a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f650:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f652:	f107 0308 	add.w	r3, r7, #8
 800f656:	4619      	mov	r1, r3
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f7ff fda1 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 f95e 	bl	800f920 <SDMMC_GetCmdResp2>
 800f664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f666:	69fb      	ldr	r3, [r7, #28]
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3720      	adds	r7, #32
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f67a:	2300      	movs	r3, #0
 800f67c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f67e:	2303      	movs	r3, #3
 800f680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f682:	2340      	movs	r3, #64	; 0x40
 800f684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f686:	2300      	movs	r3, #0
 800f688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f68e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f690:	f107 0308 	add.w	r3, r7, #8
 800f694:	4619      	mov	r1, r3
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f7ff fd82 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	2103      	movs	r1, #3
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f9bd 	bl	800fa20 <SDMMC_GetCmdResp6>
 800f6a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6a8:	69fb      	ldr	r3, [r7, #28]
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3720      	adds	r7, #32
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b088      	sub	sp, #32
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
 800f6ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f6c0:	230d      	movs	r3, #13
 800f6c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f6c4:	2340      	movs	r3, #64	; 0x40
 800f6c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f6d2:	f107 0308 	add.w	r3, r7, #8
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f7ff fd61 	bl	800f1a0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f6de:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6e2:	210d      	movs	r1, #13
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 f82f 	bl	800f748 <SDMMC_GetCmdResp1>
 800f6ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6ec:	69fb      	ldr	r3, [r7, #28]
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f6f8:	b490      	push	{r4, r7}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f700:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <SDMMC_GetCmdError+0x48>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4a0f      	ldr	r2, [pc, #60]	; (800f744 <SDMMC_GetCmdError+0x4c>)
 800f706:	fba2 2303 	umull	r2, r3, r2, r3
 800f70a:	0a5b      	lsrs	r3, r3, #9
 800f70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f710:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f714:	4623      	mov	r3, r4
 800f716:	1e5c      	subs	r4, r3, #1
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d102      	bne.n	800f722 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f720:	e009      	b.n	800f736 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d0f2      	beq.n	800f714 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	22c5      	movs	r2, #197	; 0xc5
 800f732:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3708      	adds	r7, #8
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bc90      	pop	{r4, r7}
 800f73e:	4770      	bx	lr
 800f740:	20000000 	.word	0x20000000
 800f744:	10624dd3 	.word	0x10624dd3

0800f748 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f748:	b590      	push	{r4, r7, lr}
 800f74a:	b087      	sub	sp, #28
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	60f8      	str	r0, [r7, #12]
 800f750:	460b      	mov	r3, r1
 800f752:	607a      	str	r2, [r7, #4]
 800f754:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f756:	4b6f      	ldr	r3, [pc, #444]	; (800f914 <SDMMC_GetCmdResp1+0x1cc>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	4a6f      	ldr	r2, [pc, #444]	; (800f918 <SDMMC_GetCmdResp1+0x1d0>)
 800f75c:	fba2 2303 	umull	r2, r3, r2, r3
 800f760:	0a5b      	lsrs	r3, r3, #9
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f768:	4623      	mov	r3, r4
 800f76a:	1e5c      	subs	r4, r3, #1
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d102      	bne.n	800f776 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f770:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f774:	e0c9      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f77a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f782:	2b00      	cmp	r3, #0
 800f784:	d0f0      	beq.n	800f768 <SDMMC_GetCmdResp1+0x20>
 800f786:	697b      	ldr	r3, [r7, #20]
 800f788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1eb      	bne.n	800f768 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f794:	f003 0304 	and.w	r3, r3, #4
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d004      	beq.n	800f7a6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2204      	movs	r2, #4
 800f7a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f7a2:	2304      	movs	r3, #4
 800f7a4:	e0b1      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7aa:	f003 0301 	and.w	r3, r3, #1
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d004      	beq.n	800f7bc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e0a6      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	22c5      	movs	r2, #197	; 0xc5
 800f7c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f7c2:	68f8      	ldr	r0, [r7, #12]
 800f7c4:	f7ff fd16 	bl	800f1f4 <SDMMC_GetCommandResponse>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	7afb      	ldrb	r3, [r7, #11]
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d001      	beq.n	800f7d6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e099      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f7ff fd18 	bl	800f20e <SDMMC_GetResponse>
 800f7de:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f7e0:	693a      	ldr	r2, [r7, #16]
 800f7e2:	4b4e      	ldr	r3, [pc, #312]	; (800f91c <SDMMC_GetCmdResp1+0x1d4>)
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d101      	bne.n	800f7ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	e08d      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	da02      	bge.n	800f7fa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f7f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f7f8:	e087      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d001      	beq.n	800f808 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f804:	2340      	movs	r3, #64	; 0x40
 800f806:	e080      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f812:	2380      	movs	r3, #128	; 0x80
 800f814:	e079      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f820:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f824:	e071      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f830:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f834:	e069      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d002      	beq.n	800f846 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f844:	e061      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f850:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f854:	e059      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f856:	693b      	ldr	r3, [r7, #16]
 800f858:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f864:	e051      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d002      	beq.n	800f876 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f874:	e049      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d002      	beq.n	800f886 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f880:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f884:	e041      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d002      	beq.n	800f896 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f894:	e039      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f8a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f8a4:	e031      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d002      	beq.n	800f8b6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f8b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f8b4:	e029      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f8c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f8c4:	e021      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f8d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f8d4:	e019      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d002      	beq.n	800f8e6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f8e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f8e4:	e011      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f8f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f8f4:	e009      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	f003 0308 	and.w	r3, r3, #8
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d002      	beq.n	800f906 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f900:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f904:	e001      	b.n	800f90a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	371c      	adds	r7, #28
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd90      	pop	{r4, r7, pc}
 800f912:	bf00      	nop
 800f914:	20000000 	.word	0x20000000
 800f918:	10624dd3 	.word	0x10624dd3
 800f91c:	fdffe008 	.word	0xfdffe008

0800f920 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f920:	b490      	push	{r4, r7}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f928:	4b1e      	ldr	r3, [pc, #120]	; (800f9a4 <SDMMC_GetCmdResp2+0x84>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a1e      	ldr	r2, [pc, #120]	; (800f9a8 <SDMMC_GetCmdResp2+0x88>)
 800f92e:	fba2 2303 	umull	r2, r3, r2, r3
 800f932:	0a5b      	lsrs	r3, r3, #9
 800f934:	f241 3288 	movw	r2, #5000	; 0x1388
 800f938:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f93c:	4623      	mov	r3, r4
 800f93e:	1e5c      	subs	r4, r3, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	d102      	bne.n	800f94a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f948:	e026      	b.n	800f998 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f94e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f956:	2b00      	cmp	r3, #0
 800f958:	d0f0      	beq.n	800f93c <SDMMC_GetCmdResp2+0x1c>
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f960:	2b00      	cmp	r3, #0
 800f962:	d1eb      	bne.n	800f93c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f968:	f003 0304 	and.w	r3, r3, #4
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d004      	beq.n	800f97a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2204      	movs	r2, #4
 800f974:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f976:	2304      	movs	r3, #4
 800f978:	e00e      	b.n	800f998 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f97e:	f003 0301 	and.w	r3, r3, #1
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f98c:	2301      	movs	r3, #1
 800f98e:	e003      	b.n	800f998 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	22c5      	movs	r2, #197	; 0xc5
 800f994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3710      	adds	r7, #16
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bc90      	pop	{r4, r7}
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	20000000 	.word	0x20000000
 800f9a8:	10624dd3 	.word	0x10624dd3

0800f9ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f9ac:	b490      	push	{r4, r7}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f9b4:	4b18      	ldr	r3, [pc, #96]	; (800fa18 <SDMMC_GetCmdResp3+0x6c>)
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a18      	ldr	r2, [pc, #96]	; (800fa1c <SDMMC_GetCmdResp3+0x70>)
 800f9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f9be:	0a5b      	lsrs	r3, r3, #9
 800f9c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f9c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f9c8:	4623      	mov	r3, r4
 800f9ca:	1e5c      	subs	r4, r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d102      	bne.n	800f9d6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f9d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f9d4:	e01b      	b.n	800fa0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d0f0      	beq.n	800f9c8 <SDMMC_GetCmdResp3+0x1c>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1eb      	bne.n	800f9c8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9f4:	f003 0304 	and.w	r3, r3, #4
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d004      	beq.n	800fa06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2204      	movs	r2, #4
 800fa00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa02:	2304      	movs	r3, #4
 800fa04:	e003      	b.n	800fa0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	22c5      	movs	r2, #197	; 0xc5
 800fa0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bc90      	pop	{r4, r7}
 800fa16:	4770      	bx	lr
 800fa18:	20000000 	.word	0x20000000
 800fa1c:	10624dd3 	.word	0x10624dd3

0800fa20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b087      	sub	sp, #28
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa2e:	4b34      	ldr	r3, [pc, #208]	; (800fb00 <SDMMC_GetCmdResp6+0xe0>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a34      	ldr	r2, [pc, #208]	; (800fb04 <SDMMC_GetCmdResp6+0xe4>)
 800fa34:	fba2 2303 	umull	r2, r3, r2, r3
 800fa38:	0a5b      	lsrs	r3, r3, #9
 800fa3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fa42:	4623      	mov	r3, r4
 800fa44:	1e5c      	subs	r4, r3, #1
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d102      	bne.n	800fa50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa4e:	e052      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d0f0      	beq.n	800fa42 <SDMMC_GetCmdResp6+0x22>
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1eb      	bne.n	800fa42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6e:	f003 0304 	and.w	r3, r3, #4
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d004      	beq.n	800fa80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2204      	movs	r2, #4
 800fa7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	e03a      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa84:	f003 0301 	and.w	r3, r3, #1
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d004      	beq.n	800fa96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2201      	movs	r2, #1
 800fa90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa92:	2301      	movs	r3, #1
 800fa94:	e02f      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f7ff fbac 	bl	800f1f4 <SDMMC_GetCommandResponse>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
 800faa0:	7afb      	ldrb	r3, [r7, #11]
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d001      	beq.n	800faaa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e025      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	22c5      	movs	r2, #197	; 0xc5
 800faae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fab0:	2100      	movs	r1, #0
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff fbab 	bl	800f20e <SDMMC_GetResponse>
 800fab8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d106      	bne.n	800fad2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	0c1b      	lsrs	r3, r3, #16
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800face:	2300      	movs	r3, #0
 800fad0:	e011      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d002      	beq.n	800fae2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fadc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fae0:	e009      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800faec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800faf0:	e001      	b.n	800faf6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800faf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	371c      	adds	r7, #28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd90      	pop	{r4, r7, pc}
 800fafe:	bf00      	nop
 800fb00:	20000000 	.word	0x20000000
 800fb04:	10624dd3 	.word	0x10624dd3

0800fb08 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800fb08:	b490      	push	{r4, r7}
 800fb0a:	b084      	sub	sp, #16
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb10:	4b21      	ldr	r3, [pc, #132]	; (800fb98 <SDMMC_GetCmdResp7+0x90>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	4a21      	ldr	r2, [pc, #132]	; (800fb9c <SDMMC_GetCmdResp7+0x94>)
 800fb16:	fba2 2303 	umull	r2, r3, r2, r3
 800fb1a:	0a5b      	lsrs	r3, r3, #9
 800fb1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800fb24:	4623      	mov	r3, r4
 800fb26:	1e5c      	subs	r4, r3, #1
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d102      	bne.n	800fb32 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb30:	e02c      	b.n	800fb8c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d0f0      	beq.n	800fb24 <SDMMC_GetCmdResp7+0x1c>
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d1eb      	bne.n	800fb24 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d004      	beq.n	800fb62 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2204      	movs	r2, #4
 800fb5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb5e:	2304      	movs	r3, #4
 800fb60:	e014      	b.n	800fb8c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d004      	beq.n	800fb78 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2201      	movs	r2, #1
 800fb72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb74:	2301      	movs	r3, #1
 800fb76:	e009      	b.n	800fb8c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d002      	beq.n	800fb8a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2240      	movs	r2, #64	; 0x40
 800fb88:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb8a:	2300      	movs	r3, #0
  
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bc90      	pop	{r4, r7}
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	20000000 	.word	0x20000000
 800fb9c:	10624dd3 	.word	0x10624dd3

0800fba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fba0:	b084      	sub	sp, #16
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b084      	sub	sp, #16
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	f107 001c 	add.w	r0, r7, #28
 800fbae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d120      	bne.n	800fbfa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	68da      	ldr	r2, [r3, #12]
 800fbc8:	4b20      	ldr	r3, [pc, #128]	; (800fc4c <USB_CoreInit+0xac>)
 800fbca:	4013      	ands	r3, r2
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	68db      	ldr	r3, [r3, #12]
 800fbd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fbdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d105      	bne.n	800fbee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800fbee:	6878      	ldr	r0, [r7, #4]
 800fbf0:	f001 fac4 	bl	801117c <USB_CoreReset>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	73fb      	strb	r3, [r7, #15]
 800fbf8:	e010      	b.n	800fc1c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68db      	ldr	r3, [r3, #12]
 800fbfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f001 fab8 	bl	801117c <USB_CoreReset>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800fc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d10b      	bne.n	800fc3a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	689b      	ldr	r3, [r3, #8]
 800fc26:	f043 0206 	orr.w	r2, r3, #6
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	f043 0220 	orr.w	r2, r3, #32
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3710      	adds	r7, #16
 800fc40:	46bd      	mov	sp, r7
 800fc42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fc46:	b004      	add	sp, #16
 800fc48:	4770      	bx	lr
 800fc4a:	bf00      	nop
 800fc4c:	ffbdffbf 	.word	0xffbdffbf

0800fc50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fc50:	b480      	push	{r7}
 800fc52:	b087      	sub	sp, #28
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fc5e:	79fb      	ldrb	r3, [r7, #7]
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	d165      	bne.n	800fd30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	4a41      	ldr	r2, [pc, #260]	; (800fd6c <USB_SetTurnaroundTime+0x11c>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d906      	bls.n	800fc7a <USB_SetTurnaroundTime+0x2a>
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	4a40      	ldr	r2, [pc, #256]	; (800fd70 <USB_SetTurnaroundTime+0x120>)
 800fc70:	4293      	cmp	r3, r2
 800fc72:	d802      	bhi.n	800fc7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fc74:	230f      	movs	r3, #15
 800fc76:	617b      	str	r3, [r7, #20]
 800fc78:	e062      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	4a3c      	ldr	r2, [pc, #240]	; (800fd70 <USB_SetTurnaroundTime+0x120>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d906      	bls.n	800fc90 <USB_SetTurnaroundTime+0x40>
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	4a3b      	ldr	r2, [pc, #236]	; (800fd74 <USB_SetTurnaroundTime+0x124>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d802      	bhi.n	800fc90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fc8a:	230e      	movs	r3, #14
 800fc8c:	617b      	str	r3, [r7, #20]
 800fc8e:	e057      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	4a38      	ldr	r2, [pc, #224]	; (800fd74 <USB_SetTurnaroundTime+0x124>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d906      	bls.n	800fca6 <USB_SetTurnaroundTime+0x56>
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	4a37      	ldr	r2, [pc, #220]	; (800fd78 <USB_SetTurnaroundTime+0x128>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d802      	bhi.n	800fca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fca0:	230d      	movs	r3, #13
 800fca2:	617b      	str	r3, [r7, #20]
 800fca4:	e04c      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	4a33      	ldr	r2, [pc, #204]	; (800fd78 <USB_SetTurnaroundTime+0x128>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d906      	bls.n	800fcbc <USB_SetTurnaroundTime+0x6c>
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	4a32      	ldr	r2, [pc, #200]	; (800fd7c <USB_SetTurnaroundTime+0x12c>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d802      	bhi.n	800fcbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fcb6:	230c      	movs	r3, #12
 800fcb8:	617b      	str	r3, [r7, #20]
 800fcba:	e041      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	4a2f      	ldr	r2, [pc, #188]	; (800fd7c <USB_SetTurnaroundTime+0x12c>)
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d906      	bls.n	800fcd2 <USB_SetTurnaroundTime+0x82>
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	4a2e      	ldr	r2, [pc, #184]	; (800fd80 <USB_SetTurnaroundTime+0x130>)
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	d802      	bhi.n	800fcd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fccc:	230b      	movs	r3, #11
 800fcce:	617b      	str	r3, [r7, #20]
 800fcd0:	e036      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	4a2a      	ldr	r2, [pc, #168]	; (800fd80 <USB_SetTurnaroundTime+0x130>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d906      	bls.n	800fce8 <USB_SetTurnaroundTime+0x98>
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	4a29      	ldr	r2, [pc, #164]	; (800fd84 <USB_SetTurnaroundTime+0x134>)
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d802      	bhi.n	800fce8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fce2:	230a      	movs	r3, #10
 800fce4:	617b      	str	r3, [r7, #20]
 800fce6:	e02b      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	4a26      	ldr	r2, [pc, #152]	; (800fd84 <USB_SetTurnaroundTime+0x134>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d906      	bls.n	800fcfe <USB_SetTurnaroundTime+0xae>
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	4a25      	ldr	r2, [pc, #148]	; (800fd88 <USB_SetTurnaroundTime+0x138>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d802      	bhi.n	800fcfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fcf8:	2309      	movs	r3, #9
 800fcfa:	617b      	str	r3, [r7, #20]
 800fcfc:	e020      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	4a21      	ldr	r2, [pc, #132]	; (800fd88 <USB_SetTurnaroundTime+0x138>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d906      	bls.n	800fd14 <USB_SetTurnaroundTime+0xc4>
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	4a20      	ldr	r2, [pc, #128]	; (800fd8c <USB_SetTurnaroundTime+0x13c>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d802      	bhi.n	800fd14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fd0e:	2308      	movs	r3, #8
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	e015      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	4a1d      	ldr	r2, [pc, #116]	; (800fd8c <USB_SetTurnaroundTime+0x13c>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d906      	bls.n	800fd2a <USB_SetTurnaroundTime+0xda>
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	4a1c      	ldr	r2, [pc, #112]	; (800fd90 <USB_SetTurnaroundTime+0x140>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d802      	bhi.n	800fd2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fd24:	2307      	movs	r3, #7
 800fd26:	617b      	str	r3, [r7, #20]
 800fd28:	e00a      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fd2a:	2306      	movs	r3, #6
 800fd2c:	617b      	str	r3, [r7, #20]
 800fd2e:	e007      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d102      	bne.n	800fd3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fd36:	2309      	movs	r3, #9
 800fd38:	617b      	str	r3, [r7, #20]
 800fd3a:	e001      	b.n	800fd40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fd3c:	2309      	movs	r3, #9
 800fd3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	68da      	ldr	r2, [r3, #12]
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	029b      	lsls	r3, r3, #10
 800fd54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fd58:	431a      	orrs	r2, r3
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fd5e:	2300      	movs	r3, #0
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	371c      	adds	r7, #28
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr
 800fd6c:	00d8acbf 	.word	0x00d8acbf
 800fd70:	00e4e1bf 	.word	0x00e4e1bf
 800fd74:	00f423ff 	.word	0x00f423ff
 800fd78:	0106737f 	.word	0x0106737f
 800fd7c:	011a499f 	.word	0x011a499f
 800fd80:	01312cff 	.word	0x01312cff
 800fd84:	014ca43f 	.word	0x014ca43f
 800fd88:	016e35ff 	.word	0x016e35ff
 800fd8c:	01a6ab1f 	.word	0x01a6ab1f
 800fd90:	01e847ff 	.word	0x01e847ff

0800fd94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd94:	b480      	push	{r7}
 800fd96:	b083      	sub	sp, #12
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	f043 0201 	orr.w	r2, r3, #1
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	370c      	adds	r7, #12
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr

0800fdb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fdb6:	b480      	push	{r7}
 800fdb8:	b083      	sub	sp, #12
 800fdba:	af00      	add	r7, sp, #0
 800fdbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	689b      	ldr	r3, [r3, #8]
 800fdc2:	f023 0201 	bic.w	r2, r3, #1
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fdca:	2300      	movs	r3, #0
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b082      	sub	sp, #8
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	460b      	mov	r3, r1
 800fde2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fdf0:	78fb      	ldrb	r3, [r7, #3]
 800fdf2:	2b01      	cmp	r3, #1
 800fdf4:	d106      	bne.n	800fe04 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	68db      	ldr	r3, [r3, #12]
 800fdfa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	60da      	str	r2, [r3, #12]
 800fe02:	e00b      	b.n	800fe1c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fe04:	78fb      	ldrb	r3, [r7, #3]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d106      	bne.n	800fe18 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68db      	ldr	r3, [r3, #12]
 800fe0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	60da      	str	r2, [r3, #12]
 800fe16:	e001      	b.n	800fe1c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	e003      	b.n	800fe24 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fe1c:	2032      	movs	r0, #50	; 0x32
 800fe1e:	f7f7 fd9d 	bl	800795c <HAL_Delay>

  return HAL_OK;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe2c:	b084      	sub	sp, #16
 800fe2e:	b580      	push	{r7, lr}
 800fe30:	b086      	sub	sp, #24
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	6078      	str	r0, [r7, #4]
 800fe36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe46:	2300      	movs	r3, #0
 800fe48:	613b      	str	r3, [r7, #16]
 800fe4a:	e009      	b.n	800fe60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	3340      	adds	r3, #64	; 0x40
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	2200      	movs	r2, #0
 800fe58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	613b      	str	r3, [r7, #16]
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	2b0e      	cmp	r3, #14
 800fe64:	d9f2      	bls.n	800fe4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d11c      	bne.n	800fea6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe7a:	f043 0302 	orr.w	r3, r3, #2
 800fe7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	601a      	str	r2, [r3, #0]
 800fea4:	e005      	b.n	800feb2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800feb8:	461a      	mov	r2, r3
 800feba:	2300      	movs	r3, #0
 800febc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec4:	4619      	mov	r1, r3
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fecc:	461a      	mov	r2, r3
 800fece:	680b      	ldr	r3, [r1, #0]
 800fed0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d10c      	bne.n	800fef2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d104      	bne.n	800fee8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fede:	2100      	movs	r1, #0
 800fee0:	6878      	ldr	r0, [r7, #4]
 800fee2:	f000 f959 	bl	8010198 <USB_SetDevSpeed>
 800fee6:	e018      	b.n	800ff1a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fee8:	2101      	movs	r1, #1
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 f954 	bl	8010198 <USB_SetDevSpeed>
 800fef0:	e013      	b.n	800ff1a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800fef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef4:	2b03      	cmp	r3, #3
 800fef6:	d10c      	bne.n	800ff12 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d104      	bne.n	800ff08 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fefe:	2100      	movs	r1, #0
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f949 	bl	8010198 <USB_SetDevSpeed>
 800ff06:	e008      	b.n	800ff1a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ff08:	2101      	movs	r1, #1
 800ff0a:	6878      	ldr	r0, [r7, #4]
 800ff0c:	f000 f944 	bl	8010198 <USB_SetDevSpeed>
 800ff10:	e003      	b.n	800ff1a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ff12:	2103      	movs	r1, #3
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f000 f93f 	bl	8010198 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ff1a:	2110      	movs	r1, #16
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f8f3 	bl	8010108 <USB_FlushTxFifo>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d001      	beq.n	800ff2c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800ff28:	2301      	movs	r3, #1
 800ff2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f000 f911 	bl	8010154 <USB_FlushRxFifo>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800ff38:	2301      	movs	r3, #1
 800ff3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff42:	461a      	mov	r2, r3
 800ff44:	2300      	movs	r3, #0
 800ff46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff4e:	461a      	mov	r2, r3
 800ff50:	2300      	movs	r3, #0
 800ff52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff60:	2300      	movs	r3, #0
 800ff62:	613b      	str	r3, [r7, #16]
 800ff64:	e043      	b.n	800ffee <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	015a      	lsls	r2, r3, #5
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff7c:	d118      	bne.n	800ffb0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10a      	bne.n	800ff9a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff84:	693b      	ldr	r3, [r7, #16]
 800ff86:	015a      	lsls	r2, r3, #5
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff90:	461a      	mov	r2, r3
 800ff92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff96:	6013      	str	r3, [r2, #0]
 800ff98:	e013      	b.n	800ffc2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	015a      	lsls	r2, r3, #5
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ffac:	6013      	str	r3, [r2, #0]
 800ffae:	e008      	b.n	800ffc2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	015a      	lsls	r2, r3, #5
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	4413      	add	r3, r2
 800ffb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	015a      	lsls	r2, r3, #5
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4413      	add	r3, r2
 800ffca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffce:	461a      	mov	r2, r3
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	015a      	lsls	r2, r3, #5
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	4413      	add	r3, r2
 800ffdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ffe6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	3301      	adds	r3, #1
 800ffec:	613b      	str	r3, [r7, #16]
 800ffee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff0:	693a      	ldr	r2, [r7, #16]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d3b7      	bcc.n	800ff66 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fff6:	2300      	movs	r3, #0
 800fff8:	613b      	str	r3, [r7, #16]
 800fffa:	e043      	b.n	8010084 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	015a      	lsls	r2, r3, #5
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	4413      	add	r3, r2
 8010004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801000e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010012:	d118      	bne.n	8010046 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d10a      	bne.n	8010030 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801001a:	693b      	ldr	r3, [r7, #16]
 801001c:	015a      	lsls	r2, r3, #5
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4413      	add	r3, r2
 8010022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010026:	461a      	mov	r2, r3
 8010028:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801002c:	6013      	str	r3, [r2, #0]
 801002e:	e013      	b.n	8010058 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	015a      	lsls	r2, r3, #5
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	4413      	add	r3, r2
 8010038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801003c:	461a      	mov	r2, r3
 801003e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010042:	6013      	str	r3, [r2, #0]
 8010044:	e008      	b.n	8010058 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	015a      	lsls	r2, r3, #5
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	4413      	add	r3, r2
 801004e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010052:	461a      	mov	r2, r3
 8010054:	2300      	movs	r3, #0
 8010056:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	015a      	lsls	r2, r3, #5
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	4413      	add	r3, r2
 8010060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010064:	461a      	mov	r2, r3
 8010066:	2300      	movs	r3, #0
 8010068:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	015a      	lsls	r2, r3, #5
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	4413      	add	r3, r2
 8010072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010076:	461a      	mov	r2, r3
 8010078:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801007c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	3301      	adds	r3, #1
 8010082:	613b      	str	r3, [r7, #16]
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	693a      	ldr	r2, [r7, #16]
 8010088:	429a      	cmp	r2, r3
 801008a:	d3b7      	bcc.n	800fffc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801009a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801009e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2200      	movs	r2, #0
 80100a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80100ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d105      	bne.n	80100c0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	699b      	ldr	r3, [r3, #24]
 80100b8:	f043 0210 	orr.w	r2, r3, #16
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	699a      	ldr	r2, [r3, #24]
 80100c4:	4b0e      	ldr	r3, [pc, #56]	; (8010100 <USB_DevInit+0x2d4>)
 80100c6:	4313      	orrs	r3, r2
 80100c8:	687a      	ldr	r2, [r7, #4]
 80100ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d005      	beq.n	80100de <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	f043 0208 	orr.w	r2, r3, #8
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	d105      	bne.n	80100f0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	699a      	ldr	r2, [r3, #24]
 80100e8:	4b06      	ldr	r3, [pc, #24]	; (8010104 <USB_DevInit+0x2d8>)
 80100ea:	4313      	orrs	r3, r2
 80100ec:	687a      	ldr	r2, [r7, #4]
 80100ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f2:	4618      	mov	r0, r3
 80100f4:	3718      	adds	r7, #24
 80100f6:	46bd      	mov	sp, r7
 80100f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100fc:	b004      	add	sp, #16
 80100fe:	4770      	bx	lr
 8010100:	803c3800 	.word	0x803c3800
 8010104:	40000004 	.word	0x40000004

08010108 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010108:	b480      	push	{r7}
 801010a:	b085      	sub	sp, #20
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8010112:	2300      	movs	r3, #0
 8010114:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010116:	683b      	ldr	r3, [r7, #0]
 8010118:	019b      	lsls	r3, r3, #6
 801011a:	f043 0220 	orr.w	r2, r3, #32
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	3301      	adds	r3, #1
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	4a09      	ldr	r2, [pc, #36]	; (8010150 <USB_FlushTxFifo+0x48>)
 801012c:	4293      	cmp	r3, r2
 801012e:	d901      	bls.n	8010134 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8010130:	2303      	movs	r3, #3
 8010132:	e006      	b.n	8010142 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	691b      	ldr	r3, [r3, #16]
 8010138:	f003 0320 	and.w	r3, r3, #32
 801013c:	2b20      	cmp	r3, #32
 801013e:	d0f0      	beq.n	8010122 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	00030d40 	.word	0x00030d40

08010154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801015c:	2300      	movs	r3, #0
 801015e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2210      	movs	r2, #16
 8010164:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	3301      	adds	r3, #1
 801016a:	60fb      	str	r3, [r7, #12]
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	4a09      	ldr	r2, [pc, #36]	; (8010194 <USB_FlushRxFifo+0x40>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d901      	bls.n	8010178 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8010174:	2303      	movs	r3, #3
 8010176:	e006      	b.n	8010186 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	691b      	ldr	r3, [r3, #16]
 801017c:	f003 0310 	and.w	r3, r3, #16
 8010180:	2b10      	cmp	r3, #16
 8010182:	d0f0      	beq.n	8010166 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8010184:	2300      	movs	r3, #0
}
 8010186:	4618      	mov	r0, r3
 8010188:	3714      	adds	r7, #20
 801018a:	46bd      	mov	sp, r7
 801018c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop
 8010194:	00030d40 	.word	0x00030d40

08010198 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
 80101a0:	460b      	mov	r3, r1
 80101a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	78fb      	ldrb	r3, [r7, #3]
 80101b2:	68f9      	ldr	r1, [r7, #12]
 80101b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101b8:	4313      	orrs	r3, r2
 80101ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101bc:	2300      	movs	r3, #0
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr

080101ca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80101ca:	b480      	push	{r7}
 80101cc:	b087      	sub	sp, #28
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80101d6:	693b      	ldr	r3, [r7, #16]
 80101d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101dc:	689b      	ldr	r3, [r3, #8]
 80101de:	f003 0306 	and.w	r3, r3, #6
 80101e2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d102      	bne.n	80101f0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80101ea:	2300      	movs	r3, #0
 80101ec:	75fb      	strb	r3, [r7, #23]
 80101ee:	e00a      	b.n	8010206 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2b02      	cmp	r3, #2
 80101f4:	d002      	beq.n	80101fc <USB_GetDevSpeed+0x32>
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2b06      	cmp	r3, #6
 80101fa:	d102      	bne.n	8010202 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80101fc:	2302      	movs	r3, #2
 80101fe:	75fb      	strb	r3, [r7, #23]
 8010200:	e001      	b.n	8010206 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010202:	230f      	movs	r3, #15
 8010204:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010206:	7dfb      	ldrb	r3, [r7, #23]
}
 8010208:	4618      	mov	r0, r3
 801020a:	371c      	adds	r7, #28
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr

08010214 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010214:	b480      	push	{r7}
 8010216:	b085      	sub	sp, #20
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	781b      	ldrb	r3, [r3, #0]
 8010226:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	785b      	ldrb	r3, [r3, #1]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d139      	bne.n	80102a4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010236:	69da      	ldr	r2, [r3, #28]
 8010238:	683b      	ldr	r3, [r7, #0]
 801023a:	781b      	ldrb	r3, [r3, #0]
 801023c:	f003 030f 	and.w	r3, r3, #15
 8010240:	2101      	movs	r1, #1
 8010242:	fa01 f303 	lsl.w	r3, r1, r3
 8010246:	b29b      	uxth	r3, r3
 8010248:	68f9      	ldr	r1, [r7, #12]
 801024a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801024e:	4313      	orrs	r3, r2
 8010250:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	015a      	lsls	r2, r3, #5
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	4413      	add	r3, r2
 801025a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010264:	2b00      	cmp	r3, #0
 8010266:	d153      	bne.n	8010310 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	015a      	lsls	r2, r3, #5
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	4413      	add	r3, r2
 8010270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	78db      	ldrb	r3, [r3, #3]
 8010282:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010284:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	059b      	lsls	r3, r3, #22
 801028a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801028c:	431a      	orrs	r2, r3
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	0159      	lsls	r1, r3, #5
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	440b      	add	r3, r1
 8010296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029a:	4619      	mov	r1, r3
 801029c:	4b20      	ldr	r3, [pc, #128]	; (8010320 <USB_ActivateEndpoint+0x10c>)
 801029e:	4313      	orrs	r3, r2
 80102a0:	600b      	str	r3, [r1, #0]
 80102a2:	e035      	b.n	8010310 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102aa:	69da      	ldr	r2, [r3, #28]
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	781b      	ldrb	r3, [r3, #0]
 80102b0:	f003 030f 	and.w	r3, r3, #15
 80102b4:	2101      	movs	r1, #1
 80102b6:	fa01 f303 	lsl.w	r3, r1, r3
 80102ba:	041b      	lsls	r3, r3, #16
 80102bc:	68f9      	ldr	r1, [r7, #12]
 80102be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102c2:	4313      	orrs	r3, r2
 80102c4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	015a      	lsls	r2, r3, #5
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	4413      	add	r3, r2
 80102ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d119      	bne.n	8010310 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	015a      	lsls	r2, r3, #5
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	4413      	add	r3, r2
 80102e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102e8:	681a      	ldr	r2, [r3, #0]
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	689b      	ldr	r3, [r3, #8]
 80102ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	78db      	ldrb	r3, [r3, #3]
 80102f6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102f8:	430b      	orrs	r3, r1
 80102fa:	431a      	orrs	r2, r3
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	0159      	lsls	r1, r3, #5
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	440b      	add	r3, r1
 8010304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010308:	4619      	mov	r1, r3
 801030a:	4b05      	ldr	r3, [pc, #20]	; (8010320 <USB_ActivateEndpoint+0x10c>)
 801030c:	4313      	orrs	r3, r2
 801030e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr
 801031e:	bf00      	nop
 8010320:	10008000 	.word	0x10008000

08010324 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	781b      	ldrb	r3, [r3, #0]
 8010336:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	785b      	ldrb	r3, [r3, #1]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d161      	bne.n	8010404 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	015a      	lsls	r2, r3, #5
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	4413      	add	r3, r2
 8010348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010356:	d11f      	bne.n	8010398 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	015a      	lsls	r2, r3, #5
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	4413      	add	r3, r2
 8010360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	68ba      	ldr	r2, [r7, #8]
 8010368:	0151      	lsls	r1, r2, #5
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	440a      	add	r2, r1
 801036e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010376:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	015a      	lsls	r2, r3, #5
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4413      	add	r3, r2
 8010380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	0151      	lsls	r1, r2, #5
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	440a      	add	r2, r1
 801038e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010396:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801039e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	f003 030f 	and.w	r3, r3, #15
 80103a8:	2101      	movs	r1, #1
 80103aa:	fa01 f303 	lsl.w	r3, r1, r3
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	43db      	mvns	r3, r3
 80103b2:	68f9      	ldr	r1, [r7, #12]
 80103b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103b8:	4013      	ands	r3, r2
 80103ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103c2:	69da      	ldr	r2, [r3, #28]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	f003 030f 	and.w	r3, r3, #15
 80103cc:	2101      	movs	r1, #1
 80103ce:	fa01 f303 	lsl.w	r3, r1, r3
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	43db      	mvns	r3, r3
 80103d6:	68f9      	ldr	r1, [r7, #12]
 80103d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80103dc:	4013      	ands	r3, r2
 80103de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	015a      	lsls	r2, r3, #5
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	4413      	add	r3, r2
 80103e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103ec:	681a      	ldr	r2, [r3, #0]
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	0159      	lsls	r1, r3, #5
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	440b      	add	r3, r1
 80103f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fa:	4619      	mov	r1, r3
 80103fc:	4b35      	ldr	r3, [pc, #212]	; (80104d4 <USB_DeactivateEndpoint+0x1b0>)
 80103fe:	4013      	ands	r3, r2
 8010400:	600b      	str	r3, [r1, #0]
 8010402:	e060      	b.n	80104c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	015a      	lsls	r2, r3, #5
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	4413      	add	r3, r2
 801040c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801041a:	d11f      	bne.n	801045c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	015a      	lsls	r2, r3, #5
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4413      	add	r3, r2
 8010424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	0151      	lsls	r1, r2, #5
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	440a      	add	r2, r1
 8010432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801043a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	015a      	lsls	r2, r3, #5
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	4413      	add	r3, r2
 8010444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68ba      	ldr	r2, [r7, #8]
 801044c:	0151      	lsls	r1, r2, #5
 801044e:	68fa      	ldr	r2, [r7, #12]
 8010450:	440a      	add	r2, r1
 8010452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010456:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801045a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	781b      	ldrb	r3, [r3, #0]
 8010468:	f003 030f 	and.w	r3, r3, #15
 801046c:	2101      	movs	r1, #1
 801046e:	fa01 f303 	lsl.w	r3, r1, r3
 8010472:	041b      	lsls	r3, r3, #16
 8010474:	43db      	mvns	r3, r3
 8010476:	68f9      	ldr	r1, [r7, #12]
 8010478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801047c:	4013      	ands	r3, r2
 801047e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010486:	69da      	ldr	r2, [r3, #28]
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 030f 	and.w	r3, r3, #15
 8010490:	2101      	movs	r1, #1
 8010492:	fa01 f303 	lsl.w	r3, r1, r3
 8010496:	041b      	lsls	r3, r3, #16
 8010498:	43db      	mvns	r3, r3
 801049a:	68f9      	ldr	r1, [r7, #12]
 801049c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104a0:	4013      	ands	r3, r2
 80104a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	68bb      	ldr	r3, [r7, #8]
 80104b4:	0159      	lsls	r1, r3, #5
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	440b      	add	r3, r1
 80104ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104be:	4619      	mov	r1, r3
 80104c0:	4b05      	ldr	r3, [pc, #20]	; (80104d8 <USB_DeactivateEndpoint+0x1b4>)
 80104c2:	4013      	ands	r3, r2
 80104c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80104c6:	2300      	movs	r3, #0
}
 80104c8:	4618      	mov	r0, r3
 80104ca:	3714      	adds	r7, #20
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr
 80104d4:	ec337800 	.word	0xec337800
 80104d8:	eff37800 	.word	0xeff37800

080104dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b08a      	sub	sp, #40	; 0x28
 80104e0:	af02      	add	r7, sp, #8
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	4613      	mov	r3, r2
 80104e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	785b      	ldrb	r3, [r3, #1]
 80104f8:	2b01      	cmp	r3, #1
 80104fa:	f040 8163 	bne.w	80107c4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	695b      	ldr	r3, [r3, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d132      	bne.n	801056c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	015a      	lsls	r2, r3, #5
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	4413      	add	r3, r2
 801050e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010512:	691a      	ldr	r2, [r3, #16]
 8010514:	69bb      	ldr	r3, [r7, #24]
 8010516:	0159      	lsls	r1, r3, #5
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	440b      	add	r3, r1
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	4619      	mov	r1, r3
 8010522:	4ba5      	ldr	r3, [pc, #660]	; (80107b8 <USB_EPStartXfer+0x2dc>)
 8010524:	4013      	ands	r3, r2
 8010526:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	015a      	lsls	r2, r3, #5
 801052c:	69fb      	ldr	r3, [r7, #28]
 801052e:	4413      	add	r3, r2
 8010530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	0151      	lsls	r1, r2, #5
 801053a:	69fa      	ldr	r2, [r7, #28]
 801053c:	440a      	add	r2, r1
 801053e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	015a      	lsls	r2, r3, #5
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	4413      	add	r3, r2
 8010550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010554:	691a      	ldr	r2, [r3, #16]
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	0159      	lsls	r1, r3, #5
 801055a:	69fb      	ldr	r3, [r7, #28]
 801055c:	440b      	add	r3, r1
 801055e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010562:	4619      	mov	r1, r3
 8010564:	4b95      	ldr	r3, [pc, #596]	; (80107bc <USB_EPStartXfer+0x2e0>)
 8010566:	4013      	ands	r3, r2
 8010568:	610b      	str	r3, [r1, #16]
 801056a:	e074      	b.n	8010656 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	015a      	lsls	r2, r3, #5
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	4413      	add	r3, r2
 8010574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010578:	691a      	ldr	r2, [r3, #16]
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	0159      	lsls	r1, r3, #5
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	440b      	add	r3, r1
 8010582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010586:	4619      	mov	r1, r3
 8010588:	4b8c      	ldr	r3, [pc, #560]	; (80107bc <USB_EPStartXfer+0x2e0>)
 801058a:	4013      	ands	r3, r2
 801058c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	015a      	lsls	r2, r3, #5
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	4413      	add	r3, r2
 8010596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801059a:	691a      	ldr	r2, [r3, #16]
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	0159      	lsls	r1, r3, #5
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	440b      	add	r3, r1
 80105a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105a8:	4619      	mov	r1, r3
 80105aa:	4b83      	ldr	r3, [pc, #524]	; (80107b8 <USB_EPStartXfer+0x2dc>)
 80105ac:	4013      	ands	r3, r2
 80105ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	015a      	lsls	r2, r3, #5
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	4413      	add	r3, r2
 80105b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105bc:	691a      	ldr	r2, [r3, #16]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	6959      	ldr	r1, [r3, #20]
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	689b      	ldr	r3, [r3, #8]
 80105c6:	440b      	add	r3, r1
 80105c8:	1e59      	subs	r1, r3, #1
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	689b      	ldr	r3, [r3, #8]
 80105ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80105d2:	04d9      	lsls	r1, r3, #19
 80105d4:	4b7a      	ldr	r3, [pc, #488]	; (80107c0 <USB_EPStartXfer+0x2e4>)
 80105d6:	400b      	ands	r3, r1
 80105d8:	69b9      	ldr	r1, [r7, #24]
 80105da:	0148      	lsls	r0, r1, #5
 80105dc:	69f9      	ldr	r1, [r7, #28]
 80105de:	4401      	add	r1, r0
 80105e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80105e4:	4313      	orrs	r3, r2
 80105e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80105e8:	69bb      	ldr	r3, [r7, #24]
 80105ea:	015a      	lsls	r2, r3, #5
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	4413      	add	r3, r2
 80105f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f4:	691a      	ldr	r2, [r3, #16]
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	695b      	ldr	r3, [r3, #20]
 80105fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105fe:	69b9      	ldr	r1, [r7, #24]
 8010600:	0148      	lsls	r0, r1, #5
 8010602:	69f9      	ldr	r1, [r7, #28]
 8010604:	4401      	add	r1, r0
 8010606:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801060a:	4313      	orrs	r3, r2
 801060c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	78db      	ldrb	r3, [r3, #3]
 8010612:	2b01      	cmp	r3, #1
 8010614:	d11f      	bne.n	8010656 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	015a      	lsls	r2, r3, #5
 801061a:	69fb      	ldr	r3, [r7, #28]
 801061c:	4413      	add	r3, r2
 801061e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010622:	691b      	ldr	r3, [r3, #16]
 8010624:	69ba      	ldr	r2, [r7, #24]
 8010626:	0151      	lsls	r1, r2, #5
 8010628:	69fa      	ldr	r2, [r7, #28]
 801062a:	440a      	add	r2, r1
 801062c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010630:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010634:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	015a      	lsls	r2, r3, #5
 801063a:	69fb      	ldr	r3, [r7, #28]
 801063c:	4413      	add	r3, r2
 801063e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	69ba      	ldr	r2, [r7, #24]
 8010646:	0151      	lsls	r1, r2, #5
 8010648:	69fa      	ldr	r2, [r7, #28]
 801064a:	440a      	add	r2, r1
 801064c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010650:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010654:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010656:	79fb      	ldrb	r3, [r7, #7]
 8010658:	2b01      	cmp	r3, #1
 801065a:	d14b      	bne.n	80106f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801065c:	68bb      	ldr	r3, [r7, #8]
 801065e:	691b      	ldr	r3, [r3, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d009      	beq.n	8010678 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	015a      	lsls	r2, r3, #5
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	4413      	add	r3, r2
 801066c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010670:	461a      	mov	r2, r3
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	78db      	ldrb	r3, [r3, #3]
 801067c:	2b01      	cmp	r3, #1
 801067e:	d128      	bne.n	80106d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801068c:	2b00      	cmp	r3, #0
 801068e:	d110      	bne.n	80106b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	015a      	lsls	r2, r3, #5
 8010694:	69fb      	ldr	r3, [r7, #28]
 8010696:	4413      	add	r3, r2
 8010698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	69ba      	ldr	r2, [r7, #24]
 80106a0:	0151      	lsls	r1, r2, #5
 80106a2:	69fa      	ldr	r2, [r7, #28]
 80106a4:	440a      	add	r2, r1
 80106a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80106ae:	6013      	str	r3, [r2, #0]
 80106b0:	e00f      	b.n	80106d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	015a      	lsls	r2, r3, #5
 80106b6:	69fb      	ldr	r3, [r7, #28]
 80106b8:	4413      	add	r3, r2
 80106ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	69ba      	ldr	r2, [r7, #24]
 80106c2:	0151      	lsls	r1, r2, #5
 80106c4:	69fa      	ldr	r2, [r7, #28]
 80106c6:	440a      	add	r2, r1
 80106c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106d2:	69bb      	ldr	r3, [r7, #24]
 80106d4:	015a      	lsls	r2, r3, #5
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	4413      	add	r3, r2
 80106da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	69ba      	ldr	r2, [r7, #24]
 80106e2:	0151      	lsls	r1, r2, #5
 80106e4:	69fa      	ldr	r2, [r7, #28]
 80106e6:	440a      	add	r2, r1
 80106e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80106f0:	6013      	str	r3, [r2, #0]
 80106f2:	e133      	b.n	801095c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	69fb      	ldr	r3, [r7, #28]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	69ba      	ldr	r2, [r7, #24]
 8010704:	0151      	lsls	r1, r2, #5
 8010706:	69fa      	ldr	r2, [r7, #28]
 8010708:	440a      	add	r2, r1
 801070a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801070e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010712:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	78db      	ldrb	r3, [r3, #3]
 8010718:	2b01      	cmp	r3, #1
 801071a:	d015      	beq.n	8010748 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	695b      	ldr	r3, [r3, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	f000 811b 	beq.w	801095c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801072c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	781b      	ldrb	r3, [r3, #0]
 8010732:	f003 030f 	and.w	r3, r3, #15
 8010736:	2101      	movs	r1, #1
 8010738:	fa01 f303 	lsl.w	r3, r1, r3
 801073c:	69f9      	ldr	r1, [r7, #28]
 801073e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010742:	4313      	orrs	r3, r2
 8010744:	634b      	str	r3, [r1, #52]	; 0x34
 8010746:	e109      	b.n	801095c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010754:	2b00      	cmp	r3, #0
 8010756:	d110      	bne.n	801077a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	015a      	lsls	r2, r3, #5
 801075c:	69fb      	ldr	r3, [r7, #28]
 801075e:	4413      	add	r3, r2
 8010760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	69ba      	ldr	r2, [r7, #24]
 8010768:	0151      	lsls	r1, r2, #5
 801076a:	69fa      	ldr	r2, [r7, #28]
 801076c:	440a      	add	r2, r1
 801076e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010776:	6013      	str	r3, [r2, #0]
 8010778:	e00f      	b.n	801079a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	015a      	lsls	r2, r3, #5
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	4413      	add	r3, r2
 8010782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	69ba      	ldr	r2, [r7, #24]
 801078a:	0151      	lsls	r1, r2, #5
 801078c:	69fa      	ldr	r2, [r7, #28]
 801078e:	440a      	add	r2, r1
 8010790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010798:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	68d9      	ldr	r1, [r3, #12]
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	781a      	ldrb	r2, [r3, #0]
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	695b      	ldr	r3, [r3, #20]
 80107a6:	b298      	uxth	r0, r3
 80107a8:	79fb      	ldrb	r3, [r7, #7]
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	4603      	mov	r3, r0
 80107ae:	68f8      	ldr	r0, [r7, #12]
 80107b0:	f000 fa38 	bl	8010c24 <USB_WritePacket>
 80107b4:	e0d2      	b.n	801095c <USB_EPStartXfer+0x480>
 80107b6:	bf00      	nop
 80107b8:	e007ffff 	.word	0xe007ffff
 80107bc:	fff80000 	.word	0xfff80000
 80107c0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	015a      	lsls	r2, r3, #5
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	4413      	add	r3, r2
 80107cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d0:	691a      	ldr	r2, [r3, #16]
 80107d2:	69bb      	ldr	r3, [r7, #24]
 80107d4:	0159      	lsls	r1, r3, #5
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	440b      	add	r3, r1
 80107da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107de:	4619      	mov	r1, r3
 80107e0:	4b61      	ldr	r3, [pc, #388]	; (8010968 <USB_EPStartXfer+0x48c>)
 80107e2:	4013      	ands	r3, r2
 80107e4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	015a      	lsls	r2, r3, #5
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	4413      	add	r3, r2
 80107ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f2:	691a      	ldr	r2, [r3, #16]
 80107f4:	69bb      	ldr	r3, [r7, #24]
 80107f6:	0159      	lsls	r1, r3, #5
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	440b      	add	r3, r1
 80107fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010800:	4619      	mov	r1, r3
 8010802:	4b5a      	ldr	r3, [pc, #360]	; (801096c <USB_EPStartXfer+0x490>)
 8010804:	4013      	ands	r3, r2
 8010806:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	695b      	ldr	r3, [r3, #20]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d123      	bne.n	8010858 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010810:	69bb      	ldr	r3, [r7, #24]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	69fb      	ldr	r3, [r7, #28]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081c:	691a      	ldr	r2, [r3, #16]
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010826:	69b9      	ldr	r1, [r7, #24]
 8010828:	0148      	lsls	r0, r1, #5
 801082a:	69f9      	ldr	r1, [r7, #28]
 801082c:	4401      	add	r1, r0
 801082e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010832:	4313      	orrs	r3, r2
 8010834:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010836:	69bb      	ldr	r3, [r7, #24]
 8010838:	015a      	lsls	r2, r3, #5
 801083a:	69fb      	ldr	r3, [r7, #28]
 801083c:	4413      	add	r3, r2
 801083e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010842:	691b      	ldr	r3, [r3, #16]
 8010844:	69ba      	ldr	r2, [r7, #24]
 8010846:	0151      	lsls	r1, r2, #5
 8010848:	69fa      	ldr	r2, [r7, #28]
 801084a:	440a      	add	r2, r1
 801084c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010850:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010854:	6113      	str	r3, [r2, #16]
 8010856:	e033      	b.n	80108c0 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	695a      	ldr	r2, [r3, #20]
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	4413      	add	r3, r2
 8010862:	1e5a      	subs	r2, r3, #1
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	689b      	ldr	r3, [r3, #8]
 8010868:	fbb2 f3f3 	udiv	r3, r2, r3
 801086c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	015a      	lsls	r2, r3, #5
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	4413      	add	r3, r2
 8010876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801087a:	691a      	ldr	r2, [r3, #16]
 801087c:	8afb      	ldrh	r3, [r7, #22]
 801087e:	04d9      	lsls	r1, r3, #19
 8010880:	4b3b      	ldr	r3, [pc, #236]	; (8010970 <USB_EPStartXfer+0x494>)
 8010882:	400b      	ands	r3, r1
 8010884:	69b9      	ldr	r1, [r7, #24]
 8010886:	0148      	lsls	r0, r1, #5
 8010888:	69f9      	ldr	r1, [r7, #28]
 801088a:	4401      	add	r1, r0
 801088c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010890:	4313      	orrs	r3, r2
 8010892:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	015a      	lsls	r2, r3, #5
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	4413      	add	r3, r2
 801089c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108a0:	691a      	ldr	r2, [r3, #16]
 80108a2:	68bb      	ldr	r3, [r7, #8]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	8af9      	ldrh	r1, [r7, #22]
 80108a8:	fb01 f303 	mul.w	r3, r1, r3
 80108ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108b0:	69b9      	ldr	r1, [r7, #24]
 80108b2:	0148      	lsls	r0, r1, #5
 80108b4:	69f9      	ldr	r1, [r7, #28]
 80108b6:	4401      	add	r1, r0
 80108b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80108bc:	4313      	orrs	r3, r2
 80108be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80108c0:	79fb      	ldrb	r3, [r7, #7]
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	d10d      	bne.n	80108e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	68db      	ldr	r3, [r3, #12]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d009      	beq.n	80108e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	68d9      	ldr	r1, [r3, #12]
 80108d2:	69bb      	ldr	r3, [r7, #24]
 80108d4:	015a      	lsls	r2, r3, #5
 80108d6:	69fb      	ldr	r3, [r7, #28]
 80108d8:	4413      	add	r3, r2
 80108da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108de:	460a      	mov	r2, r1
 80108e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	78db      	ldrb	r3, [r3, #3]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d128      	bne.n	801093c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80108ea:	69fb      	ldr	r3, [r7, #28]
 80108ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108f0:	689b      	ldr	r3, [r3, #8]
 80108f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d110      	bne.n	801091c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80108fa:	69bb      	ldr	r3, [r7, #24]
 80108fc:	015a      	lsls	r2, r3, #5
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	4413      	add	r3, r2
 8010902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	69ba      	ldr	r2, [r7, #24]
 801090a:	0151      	lsls	r1, r2, #5
 801090c:	69fa      	ldr	r2, [r7, #28]
 801090e:	440a      	add	r2, r1
 8010910:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010918:	6013      	str	r3, [r2, #0]
 801091a:	e00f      	b.n	801093c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801091c:	69bb      	ldr	r3, [r7, #24]
 801091e:	015a      	lsls	r2, r3, #5
 8010920:	69fb      	ldr	r3, [r7, #28]
 8010922:	4413      	add	r3, r2
 8010924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	69ba      	ldr	r2, [r7, #24]
 801092c:	0151      	lsls	r1, r2, #5
 801092e:	69fa      	ldr	r2, [r7, #28]
 8010930:	440a      	add	r2, r1
 8010932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801093a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801093c:	69bb      	ldr	r3, [r7, #24]
 801093e:	015a      	lsls	r2, r3, #5
 8010940:	69fb      	ldr	r3, [r7, #28]
 8010942:	4413      	add	r3, r2
 8010944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	69ba      	ldr	r2, [r7, #24]
 801094c:	0151      	lsls	r1, r2, #5
 801094e:	69fa      	ldr	r2, [r7, #28]
 8010950:	440a      	add	r2, r1
 8010952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010956:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801095a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3720      	adds	r7, #32
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	fff80000 	.word	0xfff80000
 801096c:	e007ffff 	.word	0xe007ffff
 8010970:	1ff80000 	.word	0x1ff80000

08010974 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010974:	b480      	push	{r7}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	4613      	mov	r3, r2
 8010980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	781b      	ldrb	r3, [r3, #0]
 801098a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	785b      	ldrb	r3, [r3, #1]
 8010990:	2b01      	cmp	r3, #1
 8010992:	f040 80cd 	bne.w	8010b30 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d132      	bne.n	8010a04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	015a      	lsls	r2, r3, #5
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	4413      	add	r3, r2
 80109a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109aa:	691a      	ldr	r2, [r3, #16]
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	0159      	lsls	r1, r3, #5
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	440b      	add	r3, r1
 80109b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b8:	4619      	mov	r1, r3
 80109ba:	4b98      	ldr	r3, [pc, #608]	; (8010c1c <USB_EP0StartXfer+0x2a8>)
 80109bc:	4013      	ands	r3, r2
 80109be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	015a      	lsls	r2, r3, #5
 80109c4:	697b      	ldr	r3, [r7, #20]
 80109c6:	4413      	add	r3, r2
 80109c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109cc:	691b      	ldr	r3, [r3, #16]
 80109ce:	693a      	ldr	r2, [r7, #16]
 80109d0:	0151      	lsls	r1, r2, #5
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	440a      	add	r2, r1
 80109d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80109de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	015a      	lsls	r2, r3, #5
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	4413      	add	r3, r2
 80109e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ec:	691a      	ldr	r2, [r3, #16]
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	0159      	lsls	r1, r3, #5
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	440b      	add	r3, r1
 80109f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109fa:	4619      	mov	r1, r3
 80109fc:	4b88      	ldr	r3, [pc, #544]	; (8010c20 <USB_EP0StartXfer+0x2ac>)
 80109fe:	4013      	ands	r3, r2
 8010a00:	610b      	str	r3, [r1, #16]
 8010a02:	e04e      	b.n	8010aa2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	015a      	lsls	r2, r3, #5
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a10:	691a      	ldr	r2, [r3, #16]
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	0159      	lsls	r1, r3, #5
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	440b      	add	r3, r1
 8010a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4b7f      	ldr	r3, [pc, #508]	; (8010c20 <USB_EP0StartXfer+0x2ac>)
 8010a22:	4013      	ands	r3, r2
 8010a24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	015a      	lsls	r2, r3, #5
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a32:	691a      	ldr	r2, [r3, #16]
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	0159      	lsls	r1, r3, #5
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	440b      	add	r3, r1
 8010a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a40:	4619      	mov	r1, r3
 8010a42:	4b76      	ldr	r3, [pc, #472]	; (8010c1c <USB_EP0StartXfer+0x2a8>)
 8010a44:	4013      	ands	r3, r2
 8010a46:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	695a      	ldr	r2, [r3, #20]
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	429a      	cmp	r2, r3
 8010a52:	d903      	bls.n	8010a5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	689a      	ldr	r2, [r3, #8]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	015a      	lsls	r2, r3, #5
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	4413      	add	r3, r2
 8010a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a68:	691b      	ldr	r3, [r3, #16]
 8010a6a:	693a      	ldr	r2, [r7, #16]
 8010a6c:	0151      	lsls	r1, r2, #5
 8010a6e:	697a      	ldr	r2, [r7, #20]
 8010a70:	440a      	add	r2, r1
 8010a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010a7c:	693b      	ldr	r3, [r7, #16]
 8010a7e:	015a      	lsls	r2, r3, #5
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	4413      	add	r3, r2
 8010a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a88:	691a      	ldr	r2, [r3, #16]
 8010a8a:	68bb      	ldr	r3, [r7, #8]
 8010a8c:	695b      	ldr	r3, [r3, #20]
 8010a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a92:	6939      	ldr	r1, [r7, #16]
 8010a94:	0148      	lsls	r0, r1, #5
 8010a96:	6979      	ldr	r1, [r7, #20]
 8010a98:	4401      	add	r1, r0
 8010a9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d11e      	bne.n	8010ae6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	691b      	ldr	r3, [r3, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d009      	beq.n	8010ac4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	015a      	lsls	r2, r3, #5
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010abc:	461a      	mov	r2, r3
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	691b      	ldr	r3, [r3, #16]
 8010ac2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010ac4:	693b      	ldr	r3, [r7, #16]
 8010ac6:	015a      	lsls	r2, r3, #5
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	4413      	add	r3, r2
 8010acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	693a      	ldr	r2, [r7, #16]
 8010ad4:	0151      	lsls	r1, r2, #5
 8010ad6:	697a      	ldr	r2, [r7, #20]
 8010ad8:	440a      	add	r2, r1
 8010ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ade:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ae2:	6013      	str	r3, [r2, #0]
 8010ae4:	e092      	b.n	8010c0c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010ae6:	693b      	ldr	r3, [r7, #16]
 8010ae8:	015a      	lsls	r2, r3, #5
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	4413      	add	r3, r2
 8010aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	693a      	ldr	r2, [r7, #16]
 8010af6:	0151      	lsls	r1, r2, #5
 8010af8:	697a      	ldr	r2, [r7, #20]
 8010afa:	440a      	add	r2, r1
 8010afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	695b      	ldr	r3, [r3, #20]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d07e      	beq.n	8010c0c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	f003 030f 	and.w	r3, r3, #15
 8010b1e:	2101      	movs	r1, #1
 8010b20:	fa01 f303 	lsl.w	r3, r1, r3
 8010b24:	6979      	ldr	r1, [r7, #20]
 8010b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	634b      	str	r3, [r1, #52]	; 0x34
 8010b2e:	e06d      	b.n	8010c0c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	015a      	lsls	r2, r3, #5
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	4413      	add	r3, r2
 8010b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b3c:	691a      	ldr	r2, [r3, #16]
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	0159      	lsls	r1, r3, #5
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	440b      	add	r3, r1
 8010b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	4b34      	ldr	r3, [pc, #208]	; (8010c20 <USB_EP0StartXfer+0x2ac>)
 8010b4e:	4013      	ands	r3, r2
 8010b50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	015a      	lsls	r2, r3, #5
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	4413      	add	r3, r2
 8010b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b5e:	691a      	ldr	r2, [r3, #16]
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	0159      	lsls	r1, r3, #5
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	440b      	add	r3, r1
 8010b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	4b2b      	ldr	r3, [pc, #172]	; (8010c1c <USB_EP0StartXfer+0x2a8>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	695b      	ldr	r3, [r3, #20]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d003      	beq.n	8010b84 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	689a      	ldr	r2, [r3, #8]
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	015a      	lsls	r2, r3, #5
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	4413      	add	r3, r2
 8010b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b90:	691b      	ldr	r3, [r3, #16]
 8010b92:	693a      	ldr	r2, [r7, #16]
 8010b94:	0151      	lsls	r1, r2, #5
 8010b96:	697a      	ldr	r2, [r7, #20]
 8010b98:	440a      	add	r2, r1
 8010b9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ba2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	015a      	lsls	r2, r3, #5
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	4413      	add	r3, r2
 8010bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb0:	691a      	ldr	r2, [r3, #16]
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	689b      	ldr	r3, [r3, #8]
 8010bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010bba:	6939      	ldr	r1, [r7, #16]
 8010bbc:	0148      	lsls	r0, r1, #5
 8010bbe:	6979      	ldr	r1, [r7, #20]
 8010bc0:	4401      	add	r1, r0
 8010bc2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010bca:	79fb      	ldrb	r3, [r7, #7]
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d10d      	bne.n	8010bec <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d009      	beq.n	8010bec <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	68d9      	ldr	r1, [r3, #12]
 8010bdc:	693b      	ldr	r3, [r7, #16]
 8010bde:	015a      	lsls	r2, r3, #5
 8010be0:	697b      	ldr	r3, [r7, #20]
 8010be2:	4413      	add	r3, r2
 8010be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010be8:	460a      	mov	r2, r1
 8010bea:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	015a      	lsls	r2, r3, #5
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	4413      	add	r3, r2
 8010bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	693a      	ldr	r2, [r7, #16]
 8010bfc:	0151      	lsls	r1, r2, #5
 8010bfe:	697a      	ldr	r2, [r7, #20]
 8010c00:	440a      	add	r2, r1
 8010c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c06:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	371c      	adds	r7, #28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	e007ffff 	.word	0xe007ffff
 8010c20:	fff80000 	.word	0xfff80000

08010c24 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b089      	sub	sp, #36	; 0x24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	60f8      	str	r0, [r7, #12]
 8010c2c:	60b9      	str	r1, [r7, #8]
 8010c2e:	4611      	mov	r1, r2
 8010c30:	461a      	mov	r2, r3
 8010c32:	460b      	mov	r3, r1
 8010c34:	71fb      	strb	r3, [r7, #7]
 8010c36:	4613      	mov	r3, r2
 8010c38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010c42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d11a      	bne.n	8010c80 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010c4a:	88bb      	ldrh	r3, [r7, #4]
 8010c4c:	3303      	adds	r3, #3
 8010c4e:	089b      	lsrs	r3, r3, #2
 8010c50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010c52:	2300      	movs	r3, #0
 8010c54:	61bb      	str	r3, [r7, #24]
 8010c56:	e00f      	b.n	8010c78 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010c58:	79fb      	ldrb	r3, [r7, #7]
 8010c5a:	031a      	lsls	r2, r3, #12
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	4413      	add	r3, r2
 8010c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010c64:	461a      	mov	r2, r3
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	3304      	adds	r3, #4
 8010c70:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	3301      	adds	r3, #1
 8010c76:	61bb      	str	r3, [r7, #24]
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d3eb      	bcc.n	8010c58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3724      	adds	r7, #36	; 0x24
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010c8e:	b480      	push	{r7}
 8010c90:	b089      	sub	sp, #36	; 0x24
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	60f8      	str	r0, [r7, #12]
 8010c96:	60b9      	str	r1, [r7, #8]
 8010c98:	4613      	mov	r3, r2
 8010c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010ca4:	88fb      	ldrh	r3, [r7, #6]
 8010ca6:	3303      	adds	r3, #3
 8010ca8:	089b      	lsrs	r3, r3, #2
 8010caa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010cac:	2300      	movs	r3, #0
 8010cae:	61bb      	str	r3, [r7, #24]
 8010cb0:	e00b      	b.n	8010cca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010cb8:	681a      	ldr	r2, [r3, #0]
 8010cba:	69fb      	ldr	r3, [r7, #28]
 8010cbc:	601a      	str	r2, [r3, #0]
    pDest++;
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	3304      	adds	r3, #4
 8010cc2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010cc4:	69bb      	ldr	r3, [r7, #24]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	61bb      	str	r3, [r7, #24]
 8010cca:	69ba      	ldr	r2, [r7, #24]
 8010ccc:	693b      	ldr	r3, [r7, #16]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d3ef      	bcc.n	8010cb2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010cd2:	69fb      	ldr	r3, [r7, #28]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3724      	adds	r7, #36	; 0x24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	785b      	ldrb	r3, [r3, #1]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	d12c      	bne.n	8010d56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	015a      	lsls	r2, r3, #5
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	4413      	add	r3, r2
 8010d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	db12      	blt.n	8010d34 <USB_EPSetStall+0x54>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d00f      	beq.n	8010d34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	015a      	lsls	r2, r3, #5
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	0151      	lsls	r1, r2, #5
 8010d26:	68fa      	ldr	r2, [r7, #12]
 8010d28:	440a      	add	r2, r1
 8010d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	015a      	lsls	r2, r3, #5
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	4413      	add	r3, r2
 8010d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	68ba      	ldr	r2, [r7, #8]
 8010d44:	0151      	lsls	r1, r2, #5
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	440a      	add	r2, r1
 8010d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010d52:	6013      	str	r3, [r2, #0]
 8010d54:	e02b      	b.n	8010dae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	015a      	lsls	r2, r3, #5
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	4413      	add	r3, r2
 8010d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	db12      	blt.n	8010d8e <USB_EPSetStall+0xae>
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d00f      	beq.n	8010d8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	015a      	lsls	r2, r3, #5
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	4413      	add	r3, r2
 8010d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	0151      	lsls	r1, r2, #5
 8010d80:	68fa      	ldr	r2, [r7, #12]
 8010d82:	440a      	add	r2, r1
 8010d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010d8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	015a      	lsls	r2, r3, #5
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	4413      	add	r3, r2
 8010d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	0151      	lsls	r1, r2, #5
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	440a      	add	r2, r1
 8010da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010da8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010dac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3714      	adds	r7, #20
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b085      	sub	sp, #20
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	785b      	ldrb	r3, [r3, #1]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d128      	bne.n	8010e2a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	015a      	lsls	r2, r3, #5
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	4413      	add	r3, r2
 8010de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	68ba      	ldr	r2, [r7, #8]
 8010de8:	0151      	lsls	r1, r2, #5
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	440a      	add	r2, r1
 8010dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010df2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010df6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	78db      	ldrb	r3, [r3, #3]
 8010dfc:	2b03      	cmp	r3, #3
 8010dfe:	d003      	beq.n	8010e08 <USB_EPClearStall+0x4c>
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	78db      	ldrb	r3, [r3, #3]
 8010e04:	2b02      	cmp	r3, #2
 8010e06:	d138      	bne.n	8010e7a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	015a      	lsls	r2, r3, #5
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	4413      	add	r3, r2
 8010e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	68ba      	ldr	r2, [r7, #8]
 8010e18:	0151      	lsls	r1, r2, #5
 8010e1a:	68fa      	ldr	r2, [r7, #12]
 8010e1c:	440a      	add	r2, r1
 8010e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e26:	6013      	str	r3, [r2, #0]
 8010e28:	e027      	b.n	8010e7a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	015a      	lsls	r2, r3, #5
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	4413      	add	r3, r2
 8010e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	0151      	lsls	r1, r2, #5
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	440a      	add	r2, r1
 8010e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e48:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	78db      	ldrb	r3, [r3, #3]
 8010e4e:	2b03      	cmp	r3, #3
 8010e50:	d003      	beq.n	8010e5a <USB_EPClearStall+0x9e>
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	78db      	ldrb	r3, [r3, #3]
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	d10f      	bne.n	8010e7a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	015a      	lsls	r2, r3, #5
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	4413      	add	r3, r2
 8010e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	68ba      	ldr	r2, [r7, #8]
 8010e6a:	0151      	lsls	r1, r2, #5
 8010e6c:	68fa      	ldr	r2, [r7, #12]
 8010e6e:	440a      	add	r2, r1
 8010e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010e78:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3714      	adds	r7, #20
 8010e80:	46bd      	mov	sp, r7
 8010e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e86:	4770      	bx	lr

08010e88 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	460b      	mov	r3, r1
 8010e92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ea6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010eaa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010eb2:	681a      	ldr	r2, [r3, #0]
 8010eb4:	78fb      	ldrb	r3, [r7, #3]
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010ebc:	68f9      	ldr	r1, [r7, #12]
 8010ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010ec6:	2300      	movs	r3, #0
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3714      	adds	r7, #20
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed2:	4770      	bx	lr

08010ed4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	68fa      	ldr	r2, [r7, #12]
 8010eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010eee:	f023 0302 	bic.w	r3, r3, #2
 8010ef2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010ef4:	2003      	movs	r0, #3
 8010ef6:	f7f6 fd31 	bl	800795c <HAL_Delay>

  return HAL_OK;
 8010efa:	2300      	movs	r3, #0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3710      	adds	r7, #16
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f1e:	f043 0302 	orr.w	r3, r3, #2
 8010f22:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010f24:	2003      	movs	r0, #3
 8010f26:	f7f6 fd19 	bl	800795c <HAL_Delay>

  return HAL_OK;
 8010f2a:	2300      	movs	r3, #0
}
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	3710      	adds	r7, #16
 8010f30:	46bd      	mov	sp, r7
 8010f32:	bd80      	pop	{r7, pc}

08010f34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	695b      	ldr	r3, [r3, #20]
 8010f40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	699b      	ldr	r3, [r3, #24]
 8010f46:	68fa      	ldr	r2, [r7, #12]
 8010f48:	4013      	ands	r3, r2
 8010f4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3714      	adds	r7, #20
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f5a:	b480      	push	{r7}
 8010f5c:	b085      	sub	sp, #20
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f6c:	699b      	ldr	r3, [r3, #24]
 8010f6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f76:	69db      	ldr	r3, [r3, #28]
 8010f78:	68ba      	ldr	r2, [r7, #8]
 8010f7a:	4013      	ands	r3, r2
 8010f7c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	0c1b      	lsrs	r3, r3, #16
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3714      	adds	r7, #20
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr

08010f8e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010f8e:	b480      	push	{r7}
 8010f90:	b085      	sub	sp, #20
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fa0:	699b      	ldr	r3, [r3, #24]
 8010fa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	4013      	ands	r3, r2
 8010fb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	b29b      	uxth	r3, r3
}
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	3714      	adds	r7, #20
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b085      	sub	sp, #20
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	460b      	mov	r3, r1
 8010fcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010fd2:	78fb      	ldrb	r3, [r7, #3]
 8010fd4:	015a      	lsls	r2, r3, #5
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	4413      	add	r3, r2
 8010fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fde:	689b      	ldr	r3, [r3, #8]
 8010fe0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	4013      	ands	r3, r2
 8010fee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ff0:	68bb      	ldr	r3, [r7, #8]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3714      	adds	r7, #20
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr

08010ffe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010ffe:	b480      	push	{r7}
 8011000:	b087      	sub	sp, #28
 8011002:	af00      	add	r7, sp, #0
 8011004:	6078      	str	r0, [r7, #4]
 8011006:	460b      	mov	r3, r1
 8011008:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011014:	691b      	ldr	r3, [r3, #16]
 8011016:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011020:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011022:	78fb      	ldrb	r3, [r7, #3]
 8011024:	f003 030f 	and.w	r3, r3, #15
 8011028:	68fa      	ldr	r2, [r7, #12]
 801102a:	fa22 f303 	lsr.w	r3, r2, r3
 801102e:	01db      	lsls	r3, r3, #7
 8011030:	b2db      	uxtb	r3, r3
 8011032:	693a      	ldr	r2, [r7, #16]
 8011034:	4313      	orrs	r3, r2
 8011036:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011038:	78fb      	ldrb	r3, [r7, #3]
 801103a:	015a      	lsls	r2, r3, #5
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	4413      	add	r3, r2
 8011040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	693a      	ldr	r2, [r7, #16]
 8011048:	4013      	ands	r3, r2
 801104a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801104c:	68bb      	ldr	r3, [r7, #8]
}
 801104e:	4618      	mov	r0, r3
 8011050:	371c      	adds	r7, #28
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801105a:	b480      	push	{r7}
 801105c:	b083      	sub	sp, #12
 801105e:	af00      	add	r7, sp, #0
 8011060:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	f003 0301 	and.w	r3, r3, #1
}
 801106a:	4618      	mov	r0, r3
 801106c:	370c      	adds	r7, #12
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
	...

08011078 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801108a:	681a      	ldr	r2, [r3, #0]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011092:	4619      	mov	r1, r3
 8011094:	4b09      	ldr	r3, [pc, #36]	; (80110bc <USB_ActivateSetup+0x44>)
 8011096:	4013      	ands	r3, r2
 8011098:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	68fa      	ldr	r2, [r7, #12]
 80110a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr
 80110bc:	fffff800 	.word	0xfffff800

080110c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b087      	sub	sp, #28
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	460b      	mov	r3, r1
 80110ca:	607a      	str	r2, [r7, #4]
 80110cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	333c      	adds	r3, #60	; 0x3c
 80110d6:	3304      	adds	r3, #4
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	4a26      	ldr	r2, [pc, #152]	; (8011178 <USB_EP0_OutStart+0xb8>)
 80110e0:	4293      	cmp	r3, r2
 80110e2:	d90a      	bls.n	80110fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80110f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110f4:	d101      	bne.n	80110fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80110f6:	2300      	movs	r3, #0
 80110f8:	e037      	b.n	801116a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011100:	461a      	mov	r2, r3
 8011102:	2300      	movs	r3, #0
 8011104:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801110c:	691b      	ldr	r3, [r3, #16]
 801110e:	697a      	ldr	r2, [r7, #20]
 8011110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011114:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011118:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011120:	691b      	ldr	r3, [r3, #16]
 8011122:	697a      	ldr	r2, [r7, #20]
 8011124:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011128:	f043 0318 	orr.w	r3, r3, #24
 801112c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011134:	691b      	ldr	r3, [r3, #16]
 8011136:	697a      	ldr	r2, [r7, #20]
 8011138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801113c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8011140:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011142:	7afb      	ldrb	r3, [r7, #11]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d10f      	bne.n	8011168 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801114e:	461a      	mov	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	697a      	ldr	r2, [r7, #20]
 801115e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011162:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011166:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	371c      	adds	r7, #28
 801116e:	46bd      	mov	sp, r7
 8011170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011174:	4770      	bx	lr
 8011176:	bf00      	nop
 8011178:	4f54300a 	.word	0x4f54300a

0801117c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8011184:	2300      	movs	r3, #0
 8011186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	3301      	adds	r3, #1
 801118c:	60fb      	str	r3, [r7, #12]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	4a13      	ldr	r2, [pc, #76]	; (80111e0 <USB_CoreReset+0x64>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d901      	bls.n	801119a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011196:	2303      	movs	r3, #3
 8011198:	e01b      	b.n	80111d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	691b      	ldr	r3, [r3, #16]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	daf2      	bge.n	8011188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80111a2:	2300      	movs	r3, #0
 80111a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	691b      	ldr	r3, [r3, #16]
 80111aa:	f043 0201 	orr.w	r2, r3, #1
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	3301      	adds	r3, #1
 80111b6:	60fb      	str	r3, [r7, #12]
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	4a09      	ldr	r2, [pc, #36]	; (80111e0 <USB_CoreReset+0x64>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d901      	bls.n	80111c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80111c0:	2303      	movs	r3, #3
 80111c2:	e006      	b.n	80111d2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	f003 0301 	and.w	r3, r3, #1
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d0f0      	beq.n	80111b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80111d0:	2300      	movs	r3, #0
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3714      	adds	r7, #20
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	00030d40 	.word	0x00030d40

080111e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80111e8:	4904      	ldr	r1, [pc, #16]	; (80111fc <MX_FATFS_Init+0x18>)
 80111ea:	4805      	ldr	r0, [pc, #20]	; (8011200 <MX_FATFS_Init+0x1c>)
 80111ec:	f004 fdaa 	bl	8015d44 <FATFS_LinkDriver>
 80111f0:	4603      	mov	r3, r0
 80111f2:	461a      	mov	r2, r3
 80111f4:	4b03      	ldr	r3, [pc, #12]	; (8011204 <MX_FATFS_Init+0x20>)
 80111f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80111f8:	bf00      	nop
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	2001c630 	.word	0x2001c630
 8011200:	0801da84 	.word	0x0801da84
 8011204:	2001c62c 	.word	0x2001c62c

08011208 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011208:	b480      	push	{r7}
 801120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801120c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 801120e:	4618      	mov	r0, r3
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr

08011218 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011222:	f000 f896 	bl	8011352 <BSP_SD_IsDetected>
 8011226:	4603      	mov	r3, r0
 8011228:	2b01      	cmp	r3, #1
 801122a:	d001      	beq.n	8011230 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801122c:	2302      	movs	r3, #2
 801122e:	e012      	b.n	8011256 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011230:	480b      	ldr	r0, [pc, #44]	; (8011260 <BSP_SD_Init+0x48>)
 8011232:	f7fa f943 	bl	800b4bc <HAL_SD_Init>
 8011236:	4603      	mov	r3, r0
 8011238:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801123a:	79fb      	ldrb	r3, [r7, #7]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d109      	bne.n	8011254 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011244:	4806      	ldr	r0, [pc, #24]	; (8011260 <BSP_SD_Init+0x48>)
 8011246:	f7fa fefb 	bl	800c040 <HAL_SD_ConfigWideBusOperation>
 801124a:	4603      	mov	r3, r0
 801124c:	2b00      	cmp	r3, #0
 801124e:	d001      	beq.n	8011254 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011250:	2301      	movs	r3, #1
 8011252:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011254:	79fb      	ldrb	r3, [r7, #7]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	2000b934 	.word	0x2000b934

08011264 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b086      	sub	sp, #24
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	68f9      	ldr	r1, [r7, #12]
 801127a:	4806      	ldr	r0, [pc, #24]	; (8011294 <BSP_SD_ReadBlocks_DMA+0x30>)
 801127c:	f7fa f9b6 	bl	800b5ec <HAL_SD_ReadBlocks_DMA>
 8011280:	4603      	mov	r3, r0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011286:	2301      	movs	r3, #1
 8011288:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801128a:	7dfb      	ldrb	r3, [r7, #23]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3718      	adds	r7, #24
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	2000b934 	.word	0x2000b934

08011298 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b086      	sub	sp, #24
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80112a4:	2300      	movs	r3, #0
 80112a6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	68f9      	ldr	r1, [r7, #12]
 80112ae:	4806      	ldr	r0, [pc, #24]	; (80112c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80112b0:	f7fa fa88 	bl	800b7c4 <HAL_SD_WriteBlocks_DMA>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80112be:	7dfb      	ldrb	r3, [r7, #23]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3718      	adds	r7, #24
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	2000b934 	.word	0x2000b934

080112cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80112d0:	4805      	ldr	r0, [pc, #20]	; (80112e8 <BSP_SD_GetCardState+0x1c>)
 80112d2:	f7fa ff31 	bl	800c138 <HAL_SD_GetCardState>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b04      	cmp	r3, #4
 80112da:	bf14      	ite	ne
 80112dc:	2301      	movne	r3, #1
 80112de:	2300      	moveq	r3, #0
 80112e0:	b2db      	uxtb	r3, r3
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	bd80      	pop	{r7, pc}
 80112e6:	bf00      	nop
 80112e8:	2000b934 	.word	0x2000b934

080112ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b082      	sub	sp, #8
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80112f4:	6879      	ldr	r1, [r7, #4]
 80112f6:	4803      	ldr	r0, [pc, #12]	; (8011304 <BSP_SD_GetCardInfo+0x18>)
 80112f8:	f7fa fe76 	bl	800bfe8 <HAL_SD_GetCardInfo>
}
 80112fc:	bf00      	nop
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	2000b934 	.word	0x2000b934

08011308 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011310:	f000 f818 	bl	8011344 <BSP_SD_AbortCallback>
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011324:	f000 f9b4 	bl	8011690 <BSP_SD_WriteCpltCallback>
}
 8011328:	bf00      	nop
 801132a:	3708      	adds	r7, #8
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b082      	sub	sp, #8
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011338:	f000 f9bc 	bl	80116b4 <BSP_SD_ReadCpltCallback>
}
 801133c:	bf00      	nop
 801133e:	3708      	adds	r7, #8
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011344:	b480      	push	{r7}
 8011346:	af00      	add	r7, sp, #0

}
 8011348:	bf00      	nop
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b082      	sub	sp, #8
 8011356:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011358:	2301      	movs	r3, #1
 801135a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801135c:	f000 f80c 	bl	8011378 <BSP_PlatformIsDetected>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d101      	bne.n	801136a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011366:	2300      	movs	r3, #0
 8011368:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801136a:	79fb      	ldrb	r3, [r7, #7]
 801136c:	b2db      	uxtb	r3, r3
}
 801136e:	4618      	mov	r0, r3
 8011370:	3708      	adds	r7, #8
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
	...

08011378 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801137e:	2301      	movs	r3, #1
 8011380:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011382:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011386:	4806      	ldr	r0, [pc, #24]	; (80113a0 <BSP_PlatformIsDetected+0x28>)
 8011388:	f7f7 fe0a 	bl	8008fa0 <HAL_GPIO_ReadPin>
 801138c:	4603      	mov	r3, r0
 801138e:	2b00      	cmp	r3, #0
 8011390:	d001      	beq.n	8011396 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011392:	2300      	movs	r3, #0
 8011394:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8011396:	79fb      	ldrb	r3, [r7, #7]
}  
 8011398:	4618      	mov	r0, r3
 801139a:	3708      	adds	r7, #8
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	40020800 	.word	0x40020800

080113a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80113ac:	f004 fdb4 	bl	8015f18 <osKernelGetTickCount>
 80113b0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80113b2:	e006      	b.n	80113c2 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80113b4:	f7ff ff8a 	bl	80112cc <BSP_SD_GetCardState>
 80113b8:	4603      	mov	r3, r0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d101      	bne.n	80113c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80113be:	2300      	movs	r3, #0
 80113c0:	e009      	b.n	80113d6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 80113c2:	f004 fda9 	bl	8015f18 <osKernelGetTickCount>
 80113c6:	4602      	mov	r2, r0
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d8f0      	bhi.n	80113b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80113d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	3710      	adds	r7, #16
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
	...

080113e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	4603      	mov	r3, r0
 80113e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80113ea:	4b0b      	ldr	r3, [pc, #44]	; (8011418 <SD_CheckStatus+0x38>)
 80113ec:	2201      	movs	r2, #1
 80113ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80113f0:	f7ff ff6c 	bl	80112cc <BSP_SD_GetCardState>
 80113f4:	4603      	mov	r3, r0
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d107      	bne.n	801140a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80113fa:	4b07      	ldr	r3, [pc, #28]	; (8011418 <SD_CheckStatus+0x38>)
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	b2db      	uxtb	r3, r3
 8011400:	f023 0301 	bic.w	r3, r3, #1
 8011404:	b2da      	uxtb	r2, r3
 8011406:	4b04      	ldr	r3, [pc, #16]	; (8011418 <SD_CheckStatus+0x38>)
 8011408:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801140a:	4b03      	ldr	r3, [pc, #12]	; (8011418 <SD_CheckStatus+0x38>)
 801140c:	781b      	ldrb	r3, [r3, #0]
 801140e:	b2db      	uxtb	r3, r3
}
 8011410:	4618      	mov	r0, r3
 8011412:	3708      	adds	r7, #8
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}
 8011418:	20000009 	.word	0x20000009

0801141c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801141c:	b580      	push	{r7, lr}
 801141e:	b082      	sub	sp, #8
 8011420:	af00      	add	r7, sp, #0
 8011422:	4603      	mov	r3, r0
 8011424:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8011426:	4b1c      	ldr	r3, [pc, #112]	; (8011498 <SD_initialize+0x7c>)
 8011428:	2201      	movs	r2, #1
 801142a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801142c:	f004 fd1c 	bl	8015e68 <osKernelGetState>
 8011430:	4603      	mov	r3, r0
 8011432:	2b02      	cmp	r3, #2
 8011434:	d129      	bne.n	801148a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011436:	f7ff feef 	bl	8011218 <BSP_SD_Init>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d107      	bne.n	8011450 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011440:	79fb      	ldrb	r3, [r7, #7]
 8011442:	4618      	mov	r0, r3
 8011444:	f7ff ffcc 	bl	80113e0 <SD_CheckStatus>
 8011448:	4603      	mov	r3, r0
 801144a:	461a      	mov	r2, r3
 801144c:	4b12      	ldr	r3, [pc, #72]	; (8011498 <SD_initialize+0x7c>)
 801144e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011450:	4b11      	ldr	r3, [pc, #68]	; (8011498 <SD_initialize+0x7c>)
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	b2db      	uxtb	r3, r3
 8011456:	2b01      	cmp	r3, #1
 8011458:	d017      	beq.n	801148a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801145a:	4b10      	ldr	r3, [pc, #64]	; (801149c <SD_initialize+0x80>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d107      	bne.n	8011472 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011462:	2200      	movs	r2, #0
 8011464:	2102      	movs	r1, #2
 8011466:	200a      	movs	r0, #10
 8011468:	f005 f976 	bl	8016758 <osMessageQueueNew>
 801146c:	4602      	mov	r2, r0
 801146e:	4b0b      	ldr	r3, [pc, #44]	; (801149c <SD_initialize+0x80>)
 8011470:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011472:	4b0a      	ldr	r3, [pc, #40]	; (801149c <SD_initialize+0x80>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d107      	bne.n	801148a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801147a:	4b07      	ldr	r3, [pc, #28]	; (8011498 <SD_initialize+0x7c>)
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	b2db      	uxtb	r3, r3
 8011480:	f043 0301 	orr.w	r3, r3, #1
 8011484:	b2da      	uxtb	r2, r3
 8011486:	4b04      	ldr	r3, [pc, #16]	; (8011498 <SD_initialize+0x7c>)
 8011488:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801148a:	4b03      	ldr	r3, [pc, #12]	; (8011498 <SD_initialize+0x7c>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b2db      	uxtb	r3, r3
}
 8011490:	4618      	mov	r0, r3
 8011492:	3708      	adds	r7, #8
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}
 8011498:	20000009 	.word	0x20000009
 801149c:	20000338 	.word	0x20000338

080114a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b082      	sub	sp, #8
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80114aa:	79fb      	ldrb	r3, [r7, #7]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff ff97 	bl	80113e0 <SD_CheckStatus>
 80114b2:	4603      	mov	r3, r0
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b088      	sub	sp, #32
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60b9      	str	r1, [r7, #8]
 80114c4:	607a      	str	r2, [r7, #4]
 80114c6:	603b      	str	r3, [r7, #0]
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114cc:	2301      	movs	r3, #1
 80114ce:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114d0:	f247 5030 	movw	r0, #30000	; 0x7530
 80114d4:	f7ff ff66 	bl	80113a4 <SD_CheckStatusWithTimeout>
 80114d8:	4603      	mov	r3, r0
 80114da:	2b00      	cmp	r3, #0
 80114dc:	da01      	bge.n	80114e2 <SD_read+0x26>
  {
    return res;
 80114de:	7ffb      	ldrb	r3, [r7, #31]
 80114e0:	e02f      	b.n	8011542 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80114e2:	683a      	ldr	r2, [r7, #0]
 80114e4:	6879      	ldr	r1, [r7, #4]
 80114e6:	68b8      	ldr	r0, [r7, #8]
 80114e8:	f7ff febc 	bl	8011264 <BSP_SD_ReadBlocks_DMA>
 80114ec:	4603      	mov	r3, r0
 80114ee:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80114f0:	7fbb      	ldrb	r3, [r7, #30]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d124      	bne.n	8011540 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80114f6:	4b15      	ldr	r3, [pc, #84]	; (801154c <SD_read+0x90>)
 80114f8:	6818      	ldr	r0, [r3, #0]
 80114fa:	f107 0112 	add.w	r1, r7, #18
 80114fe:	f247 5330 	movw	r3, #30000	; 0x7530
 8011502:	2200      	movs	r2, #0
 8011504:	f005 fa22 	bl	801694c <osMessageQueueGet>
 8011508:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d117      	bne.n	8011540 <SD_read+0x84>
 8011510:	8a7b      	ldrh	r3, [r7, #18]
 8011512:	2b01      	cmp	r3, #1
 8011514:	d114      	bne.n	8011540 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8011516:	f004 fcff 	bl	8015f18 <osKernelGetTickCount>
 801151a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801151c:	e007      	b.n	801152e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801151e:	f7ff fed5 	bl	80112cc <BSP_SD_GetCardState>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d102      	bne.n	801152e <SD_read+0x72>
              {
                res = RES_OK;
 8011528:	2300      	movs	r3, #0
 801152a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801152c:	e008      	b.n	8011540 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801152e:	f004 fcf3 	bl	8015f18 <osKernelGetTickCount>
 8011532:	4602      	mov	r2, r0
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	f247 522f 	movw	r2, #29999	; 0x752f
 801153c:	4293      	cmp	r3, r2
 801153e:	d9ee      	bls.n	801151e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011540:	7ffb      	ldrb	r3, [r7, #31]
}
 8011542:	4618      	mov	r0, r3
 8011544:	3720      	adds	r7, #32
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	20000338 	.word	0x20000338

08011550 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b088      	sub	sp, #32
 8011554:	af00      	add	r7, sp, #0
 8011556:	60b9      	str	r1, [r7, #8]
 8011558:	607a      	str	r2, [r7, #4]
 801155a:	603b      	str	r3, [r7, #0]
 801155c:	4603      	mov	r3, r0
 801155e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011560:	2301      	movs	r3, #1
 8011562:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011564:	f247 5030 	movw	r0, #30000	; 0x7530
 8011568:	f7ff ff1c 	bl	80113a4 <SD_CheckStatusWithTimeout>
 801156c:	4603      	mov	r3, r0
 801156e:	2b00      	cmp	r3, #0
 8011570:	da01      	bge.n	8011576 <SD_write+0x26>
  {
    return res;
 8011572:	7ffb      	ldrb	r3, [r7, #31]
 8011574:	e02d      	b.n	80115d2 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011576:	683a      	ldr	r2, [r7, #0]
 8011578:	6879      	ldr	r1, [r7, #4]
 801157a:	68b8      	ldr	r0, [r7, #8]
 801157c:	f7ff fe8c 	bl	8011298 <BSP_SD_WriteBlocks_DMA>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d124      	bne.n	80115d0 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8011586:	4b15      	ldr	r3, [pc, #84]	; (80115dc <SD_write+0x8c>)
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	f107 0112 	add.w	r1, r7, #18
 801158e:	f247 5330 	movw	r3, #30000	; 0x7530
 8011592:	2200      	movs	r2, #0
 8011594:	f005 f9da 	bl	801694c <osMessageQueueGet>
 8011598:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d117      	bne.n	80115d0 <SD_write+0x80>
 80115a0:	8a7b      	ldrh	r3, [r7, #18]
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	d114      	bne.n	80115d0 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80115a6:	f004 fcb7 	bl	8015f18 <osKernelGetTickCount>
 80115aa:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80115ac:	e007      	b.n	80115be <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80115ae:	f7ff fe8d 	bl	80112cc <BSP_SD_GetCardState>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d102      	bne.n	80115be <SD_write+0x6e>
          {
            res = RES_OK;
 80115b8:	2300      	movs	r3, #0
 80115ba:	77fb      	strb	r3, [r7, #31]
            break;
 80115bc:	e008      	b.n	80115d0 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80115be:	f004 fcab 	bl	8015f18 <osKernelGetTickCount>
 80115c2:	4602      	mov	r2, r0
 80115c4:	697b      	ldr	r3, [r7, #20]
 80115c6:	1ad3      	subs	r3, r2, r3
 80115c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d9ee      	bls.n	80115ae <SD_write+0x5e>
    }

  }
#endif

  return res;
 80115d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	3720      	adds	r7, #32
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	20000338 	.word	0x20000338

080115e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b08c      	sub	sp, #48	; 0x30
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	603a      	str	r2, [r7, #0]
 80115ea:	71fb      	strb	r3, [r7, #7]
 80115ec:	460b      	mov	r3, r1
 80115ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80115f0:	2301      	movs	r3, #1
 80115f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80115f6:	4b25      	ldr	r3, [pc, #148]	; (801168c <SD_ioctl+0xac>)
 80115f8:	781b      	ldrb	r3, [r3, #0]
 80115fa:	b2db      	uxtb	r3, r3
 80115fc:	f003 0301 	and.w	r3, r3, #1
 8011600:	2b00      	cmp	r3, #0
 8011602:	d001      	beq.n	8011608 <SD_ioctl+0x28>
 8011604:	2303      	movs	r3, #3
 8011606:	e03c      	b.n	8011682 <SD_ioctl+0xa2>

  switch (cmd)
 8011608:	79bb      	ldrb	r3, [r7, #6]
 801160a:	2b03      	cmp	r3, #3
 801160c:	d834      	bhi.n	8011678 <SD_ioctl+0x98>
 801160e:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <SD_ioctl+0x34>)
 8011610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011614:	08011625 	.word	0x08011625
 8011618:	0801162d 	.word	0x0801162d
 801161c:	08011645 	.word	0x08011645
 8011620:	0801165f 	.word	0x0801165f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801162a:	e028      	b.n	801167e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801162c:	f107 030c 	add.w	r3, r7, #12
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff fe5b 	bl	80112ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801163c:	2300      	movs	r3, #0
 801163e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011642:	e01c      	b.n	801167e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011644:	f107 030c 	add.w	r3, r7, #12
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fe4f 	bl	80112ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	b29a      	uxth	r2, r3
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011656:	2300      	movs	r3, #0
 8011658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801165c:	e00f      	b.n	801167e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801165e:	f107 030c 	add.w	r3, r7, #12
 8011662:	4618      	mov	r0, r3
 8011664:	f7ff fe42 	bl	80112ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801166a:	0a5a      	lsrs	r2, r3, #9
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011670:	2300      	movs	r3, #0
 8011672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011676:	e002      	b.n	801167e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011678:	2304      	movs	r3, #4
 801167a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801167e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011682:	4618      	mov	r0, r3
 8011684:	3730      	adds	r7, #48	; 0x30
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20000009 	.word	0x20000009

08011690 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b082      	sub	sp, #8
 8011694:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8011696:	2302      	movs	r3, #2
 8011698:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801169a:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <BSP_SD_WriteCpltCallback+0x20>)
 801169c:	6818      	ldr	r0, [r3, #0]
 801169e:	1db9      	adds	r1, r7, #6
 80116a0:	2300      	movs	r3, #0
 80116a2:	2200      	movs	r2, #0
 80116a4:	f005 f8de 	bl	8016864 <osMessageQueuePut>
#endif
}
 80116a8:	bf00      	nop
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	20000338 	.word	0x20000338

080116b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80116ba:	2301      	movs	r3, #1
 80116bc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80116be:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <BSP_SD_ReadCpltCallback+0x20>)
 80116c0:	6818      	ldr	r0, [r3, #0]
 80116c2:	1db9      	adds	r1, r7, #6
 80116c4:	2300      	movs	r3, #0
 80116c6:	2200      	movs	r2, #0
 80116c8:	f005 f8cc 	bl	8016864 <osMessageQueuePut>
#endif
}
 80116cc:	bf00      	nop
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	20000338 	.word	0x20000338

080116d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	460b      	mov	r3, r1
 80116e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80116e4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80116e8:	f009 f8ec 	bl	801a8c4 <malloc>
 80116ec:	4603      	mov	r3, r0
 80116ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d105      	bne.n	8011702 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2200      	movs	r2, #0
 80116fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80116fe:	2302      	movs	r3, #2
 8011700:	e066      	b.n	80117d0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	7c1b      	ldrb	r3, [r3, #16]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d119      	bne.n	8011746 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011716:	2202      	movs	r2, #2
 8011718:	2181      	movs	r1, #129	; 0x81
 801171a:	6878      	ldr	r0, [r7, #4]
 801171c:	f008 ff05 	bl	801a52a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2201      	movs	r2, #1
 8011724:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011726:	f44f 7300 	mov.w	r3, #512	; 0x200
 801172a:	2202      	movs	r2, #2
 801172c:	2101      	movs	r1, #1
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f008 fefb 	bl	801a52a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2201      	movs	r2, #1
 8011738:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2210      	movs	r2, #16
 8011740:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011744:	e016      	b.n	8011774 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011746:	2340      	movs	r3, #64	; 0x40
 8011748:	2202      	movs	r2, #2
 801174a:	2181      	movs	r1, #129	; 0x81
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f008 feec 	bl	801a52a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2201      	movs	r2, #1
 8011756:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011758:	2340      	movs	r3, #64	; 0x40
 801175a:	2202      	movs	r2, #2
 801175c:	2101      	movs	r1, #1
 801175e:	6878      	ldr	r0, [r7, #4]
 8011760:	f008 fee3 	bl	801a52a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	2201      	movs	r2, #1
 8011768:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	2210      	movs	r2, #16
 8011770:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011774:	2308      	movs	r3, #8
 8011776:	2203      	movs	r2, #3
 8011778:	2182      	movs	r1, #130	; 0x82
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f008 fed5 	bl	801a52a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2201      	movs	r2, #1
 8011784:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2200      	movs	r2, #0
 801179e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	7c1b      	ldrb	r3, [r3, #16]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d109      	bne.n	80117be <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80117b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117b4:	2101      	movs	r1, #1
 80117b6:	6878      	ldr	r0, [r7, #4]
 80117b8:	f008 ffa6 	bl	801a708 <USBD_LL_PrepareReceive>
 80117bc:	e007      	b.n	80117ce <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80117c4:	2340      	movs	r3, #64	; 0x40
 80117c6:	2101      	movs	r1, #1
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f008 ff9d 	bl	801a708 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b084      	sub	sp, #16
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	460b      	mov	r3, r1
 80117e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80117e4:	2300      	movs	r3, #0
 80117e6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80117e8:	2181      	movs	r1, #129	; 0x81
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f008 fec3 	bl	801a576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80117f6:	2101      	movs	r1, #1
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f008 febc 	bl	801a576 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2200      	movs	r2, #0
 8011802:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011806:	2182      	movs	r1, #130	; 0x82
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f008 feb4 	bl	801a576 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2200      	movs	r2, #0
 8011812:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2200      	movs	r2, #0
 801181a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011824:	2b00      	cmp	r3, #0
 8011826:	d00e      	beq.n	8011846 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011838:	4618      	mov	r0, r3
 801183a:	f009 f84b 	bl	801a8d4 <free>
    pdev->pClassData = NULL;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011846:	7bfb      	ldrb	r3, [r7, #15]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3710      	adds	r7, #16
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}

08011850 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b086      	sub	sp, #24
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011860:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011862:	2300      	movs	r3, #0
 8011864:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8011866:	2300      	movs	r3, #0
 8011868:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801186a:	2300      	movs	r3, #0
 801186c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011876:	2b00      	cmp	r3, #0
 8011878:	d03a      	beq.n	80118f0 <USBD_CDC_Setup+0xa0>
 801187a:	2b20      	cmp	r3, #32
 801187c:	f040 8097 	bne.w	80119ae <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	88db      	ldrh	r3, [r3, #6]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d029      	beq.n	80118dc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	b25b      	sxtb	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	da11      	bge.n	80118b6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011898:	689b      	ldr	r3, [r3, #8]
 801189a:	683a      	ldr	r2, [r7, #0]
 801189c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 801189e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80118a0:	683a      	ldr	r2, [r7, #0]
 80118a2:	88d2      	ldrh	r2, [r2, #6]
 80118a4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80118a6:	6939      	ldr	r1, [r7, #16]
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	88db      	ldrh	r3, [r3, #6]
 80118ac:	461a      	mov	r2, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f001 fa97 	bl	8012de2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80118b4:	e082      	b.n	80119bc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	785a      	ldrb	r2, [r3, #1]
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	88db      	ldrh	r3, [r3, #6]
 80118c4:	b2da      	uxtb	r2, r3
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80118cc:	6939      	ldr	r1, [r7, #16]
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	88db      	ldrh	r3, [r3, #6]
 80118d2:	461a      	mov	r2, r3
 80118d4:	6878      	ldr	r0, [r7, #4]
 80118d6:	f001 fab0 	bl	8012e3a <USBD_CtlPrepareRx>
    break;
 80118da:	e06f      	b.n	80119bc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118e2:	689b      	ldr	r3, [r3, #8]
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	7850      	ldrb	r0, [r2, #1]
 80118e8:	2200      	movs	r2, #0
 80118ea:	6839      	ldr	r1, [r7, #0]
 80118ec:	4798      	blx	r3
    break;
 80118ee:	e065      	b.n	80119bc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	785b      	ldrb	r3, [r3, #1]
 80118f4:	2b0b      	cmp	r3, #11
 80118f6:	d84f      	bhi.n	8011998 <USBD_CDC_Setup+0x148>
 80118f8:	a201      	add	r2, pc, #4	; (adr r2, 8011900 <USBD_CDC_Setup+0xb0>)
 80118fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118fe:	bf00      	nop
 8011900:	08011931 	.word	0x08011931
 8011904:	080119a7 	.word	0x080119a7
 8011908:	08011999 	.word	0x08011999
 801190c:	08011999 	.word	0x08011999
 8011910:	08011999 	.word	0x08011999
 8011914:	08011999 	.word	0x08011999
 8011918:	08011999 	.word	0x08011999
 801191c:	08011999 	.word	0x08011999
 8011920:	08011999 	.word	0x08011999
 8011924:	08011999 	.word	0x08011999
 8011928:	08011959 	.word	0x08011959
 801192c:	08011981 	.word	0x08011981
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011936:	2b03      	cmp	r3, #3
 8011938:	d107      	bne.n	801194a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801193a:	f107 030c 	add.w	r3, r7, #12
 801193e:	2202      	movs	r2, #2
 8011940:	4619      	mov	r1, r3
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f001 fa4d 	bl	8012de2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011948:	e030      	b.n	80119ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801194a:	6839      	ldr	r1, [r7, #0]
 801194c:	6878      	ldr	r0, [r7, #4]
 801194e:	f001 f9d7 	bl	8012d00 <USBD_CtlError>
        ret = USBD_FAIL;
 8011952:	2303      	movs	r3, #3
 8011954:	75fb      	strb	r3, [r7, #23]
      break;
 8011956:	e029      	b.n	80119ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801195e:	2b03      	cmp	r3, #3
 8011960:	d107      	bne.n	8011972 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011962:	f107 030f 	add.w	r3, r7, #15
 8011966:	2201      	movs	r2, #1
 8011968:	4619      	mov	r1, r3
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f001 fa39 	bl	8012de2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011970:	e01c      	b.n	80119ac <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011972:	6839      	ldr	r1, [r7, #0]
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f001 f9c3 	bl	8012d00 <USBD_CtlError>
        ret = USBD_FAIL;
 801197a:	2303      	movs	r3, #3
 801197c:	75fb      	strb	r3, [r7, #23]
      break;
 801197e:	e015      	b.n	80119ac <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011986:	2b03      	cmp	r3, #3
 8011988:	d00f      	beq.n	80119aa <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801198a:	6839      	ldr	r1, [r7, #0]
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f001 f9b7 	bl	8012d00 <USBD_CtlError>
        ret = USBD_FAIL;
 8011992:	2303      	movs	r3, #3
 8011994:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8011996:	e008      	b.n	80119aa <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8011998:	6839      	ldr	r1, [r7, #0]
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	f001 f9b0 	bl	8012d00 <USBD_CtlError>
      ret = USBD_FAIL;
 80119a0:	2303      	movs	r3, #3
 80119a2:	75fb      	strb	r3, [r7, #23]
      break;
 80119a4:	e002      	b.n	80119ac <USBD_CDC_Setup+0x15c>
      break;
 80119a6:	bf00      	nop
 80119a8:	e008      	b.n	80119bc <USBD_CDC_Setup+0x16c>
      break;
 80119aa:	bf00      	nop
    }
    break;
 80119ac:	e006      	b.n	80119bc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80119ae:	6839      	ldr	r1, [r7, #0]
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f001 f9a5 	bl	8012d00 <USBD_CtlError>
    ret = USBD_FAIL;
 80119b6:	2303      	movs	r3, #3
 80119b8:	75fb      	strb	r3, [r7, #23]
    break;
 80119ba:	bf00      	nop
  }

  return (uint8_t)ret;
 80119bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop

080119c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	460b      	mov	r3, r1
 80119d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80119da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d101      	bne.n	80119ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80119e6:	2303      	movs	r3, #3
 80119e8:	e049      	b.n	8011a7e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80119f2:	78fa      	ldrb	r2, [r7, #3]
 80119f4:	6879      	ldr	r1, [r7, #4]
 80119f6:	4613      	mov	r3, r2
 80119f8:	009b      	lsls	r3, r3, #2
 80119fa:	4413      	add	r3, r2
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	440b      	add	r3, r1
 8011a00:	3318      	adds	r3, #24
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d029      	beq.n	8011a5c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011a08:	78fa      	ldrb	r2, [r7, #3]
 8011a0a:	6879      	ldr	r1, [r7, #4]
 8011a0c:	4613      	mov	r3, r2
 8011a0e:	009b      	lsls	r3, r3, #2
 8011a10:	4413      	add	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	440b      	add	r3, r1
 8011a16:	3318      	adds	r3, #24
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	78f9      	ldrb	r1, [r7, #3]
 8011a1c:	68f8      	ldr	r0, [r7, #12]
 8011a1e:	460b      	mov	r3, r1
 8011a20:	00db      	lsls	r3, r3, #3
 8011a22:	1a5b      	subs	r3, r3, r1
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	4403      	add	r3, r0
 8011a28:	3344      	adds	r3, #68	; 0x44
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011a30:	fb03 f301 	mul.w	r3, r3, r1
 8011a34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d110      	bne.n	8011a5c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8011a3a:	78fa      	ldrb	r2, [r7, #3]
 8011a3c:	6879      	ldr	r1, [r7, #4]
 8011a3e:	4613      	mov	r3, r2
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	4413      	add	r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	440b      	add	r3, r1
 8011a48:	3318      	adds	r3, #24
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011a4e:	78f9      	ldrb	r1, [r7, #3]
 8011a50:	2300      	movs	r3, #0
 8011a52:	2200      	movs	r2, #0
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f008 fe36 	bl	801a6c6 <USBD_LL_Transmit>
 8011a5a:	e00f      	b.n	8011a7c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2200      	movs	r2, #0
 8011a60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a6a:	691b      	ldr	r3, [r3, #16]
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011a72:	68ba      	ldr	r2, [r7, #8]
 8011a74:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011a78:	78fa      	ldrb	r2, [r7, #3]
 8011a7a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011a7c:	2300      	movs	r3, #0
}
 8011a7e:	4618      	mov	r0, r3
 8011a80:	3710      	adds	r7, #16
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b084      	sub	sp, #16
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	460b      	mov	r3, r1
 8011a90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011aa4:	2303      	movs	r3, #3
 8011aa6:	e015      	b.n	8011ad4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011aa8:	78fb      	ldrb	r3, [r7, #3]
 8011aaa:	4619      	mov	r1, r3
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f008 fe4c 	bl	801a74a <USBD_LL_GetRxDataSize>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ac0:	68db      	ldr	r3, [r3, #12]
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011ac8:	68fa      	ldr	r2, [r7, #12]
 8011aca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011ace:	4611      	mov	r1, r2
 8011ad0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011ad2:	2300      	movs	r3, #0
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aea:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d015      	beq.n	8011b22 <USBD_CDC_EP0_RxReady+0x46>
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011afc:	2bff      	cmp	r3, #255	; 0xff
 8011afe:	d010      	beq.n	8011b22 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b06:	689b      	ldr	r3, [r3, #8]
 8011b08:	68fa      	ldr	r2, [r7, #12]
 8011b0a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011b0e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011b10:	68fa      	ldr	r2, [r7, #12]
 8011b12:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011b16:	b292      	uxth	r2, r2
 8011b18:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	22ff      	movs	r2, #255	; 0xff
 8011b1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011b2c:	b480      	push	{r7}
 8011b2e:	b083      	sub	sp, #12
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2243      	movs	r2, #67	; 0x43
 8011b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8011b3a:	4b03      	ldr	r3, [pc, #12]	; (8011b48 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	370c      	adds	r7, #12
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	20000094 	.word	0x20000094

08011b4c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	2243      	movs	r2, #67	; 0x43
 8011b58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8011b5a:	4b03      	ldr	r3, [pc, #12]	; (8011b68 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	370c      	adds	r7, #12
 8011b60:	46bd      	mov	sp, r7
 8011b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b66:	4770      	bx	lr
 8011b68:	20000050 	.word	0x20000050

08011b6c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2243      	movs	r2, #67	; 0x43
 8011b78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8011b7a:	4b03      	ldr	r3, [pc, #12]	; (8011b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr
 8011b88:	200000d8 	.word	0x200000d8

08011b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011b8c:	b480      	push	{r7}
 8011b8e:	b083      	sub	sp, #12
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	220a      	movs	r2, #10
 8011b98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011b9a:	4b03      	ldr	r3, [pc, #12]	; (8011ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	2000000c 	.word	0x2000000c

08011bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011bac:	b480      	push	{r7}
 8011bae:	b083      	sub	sp, #12
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
 8011bb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011bb6:	683b      	ldr	r3, [r7, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	e004      	b.n	8011bca <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	683a      	ldr	r2, [r7, #0]
 8011bc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011bc8:	2300      	movs	r3, #0
}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	370c      	adds	r7, #12
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd4:	4770      	bx	lr

08011bd6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011bd6:	b480      	push	{r7}
 8011bd8:	b087      	sub	sp, #28
 8011bda:	af00      	add	r7, sp, #0
 8011bdc:	60f8      	str	r0, [r7, #12]
 8011bde:	60b9      	str	r1, [r7, #8]
 8011be0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011be8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	68ba      	ldr	r2, [r7, #8]
 8011bee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011bfa:	2300      	movs	r3, #0
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	371c      	adds	r7, #28
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b085      	sub	sp, #20
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c18:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	683a      	ldr	r2, [r7, #0]
 8011c1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011c22:	2300      	movs	r3, #0
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3714      	adds	r7, #20
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr

08011c30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c3e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d101      	bne.n	8011c4e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8011c4a:	2303      	movs	r3, #3
 8011c4c:	e016      	b.n	8011c7c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	7c1b      	ldrb	r3, [r3, #16]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d109      	bne.n	8011c6a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011c60:	2101      	movs	r1, #1
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f008 fd50 	bl	801a708 <USBD_LL_PrepareReceive>
 8011c68:	e007      	b.n	8011c7a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011c70:	2340      	movs	r3, #64	; 0x40
 8011c72:	2101      	movs	r1, #1
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f008 fd47 	bl	801a708 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b086      	sub	sp, #24
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	60f8      	str	r0, [r7, #12]
 8011c8c:	60b9      	str	r1, [r7, #8]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d101      	bne.n	8011c9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011c98:	2303      	movs	r3, #3
 8011c9a:	e025      	b.n	8011ce8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d003      	beq.n	8011cae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d003      	beq.n	8011cc0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d003      	beq.n	8011cce <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	79fa      	ldrb	r2, [r7, #7]
 8011cda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f008 fbbd 	bl	801a45c <USBD_LL_Init>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011d04:	2303      	movs	r3, #3
 8011d06:	e010      	b.n	8011d2a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d18:	f107 020e 	add.w	r2, r7, #14
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	4798      	blx	r3
 8011d20:	4602      	mov	r2, r0
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011d28:	2300      	movs	r3, #0
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}

08011d32 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011d32:	b580      	push	{r7, lr}
 8011d34:	b082      	sub	sp, #8
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011d3a:	6878      	ldr	r0, [r7, #4]
 8011d3c:	f008 fbda 	bl	801a4f4 <USBD_LL_Start>
 8011d40:	4603      	mov	r3, r0
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}

08011d4a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011d4a:	b480      	push	{r7}
 8011d4c:	b083      	sub	sp, #12
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011d52:	2300      	movs	r3, #0
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
 8011d68:	460b      	mov	r3, r1
 8011d6a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011d6c:	2303      	movs	r3, #3
 8011d6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d009      	beq.n	8011d8e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	78fa      	ldrb	r2, [r7, #3]
 8011d84:	4611      	mov	r1, r2
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	4798      	blx	r3
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d90:	4618      	mov	r0, r3
 8011d92:	3710      	adds	r7, #16
 8011d94:	46bd      	mov	sp, r7
 8011d96:	bd80      	pop	{r7, pc}

08011d98 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d007      	beq.n	8011dbe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	78fa      	ldrb	r2, [r7, #3]
 8011db8:	4611      	mov	r1, r2
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	4798      	blx	r3
  }

  return USBD_OK;
 8011dbe:	2300      	movs	r3, #0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3708      	adds	r7, #8
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}

08011dc8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011dc8:	b580      	push	{r7, lr}
 8011dca:	b084      	sub	sp, #16
 8011dcc:	af00      	add	r7, sp, #0
 8011dce:	6078      	str	r0, [r7, #4]
 8011dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011dd8:	6839      	ldr	r1, [r7, #0]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 ff56 	bl	8012c8c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	2201      	movs	r2, #1
 8011de4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011dee:	461a      	mov	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011dfc:	f003 031f 	and.w	r3, r3, #31
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d00e      	beq.n	8011e22 <USBD_LL_SetupStage+0x5a>
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d302      	bcc.n	8011e0e <USBD_LL_SetupStage+0x46>
 8011e08:	2b02      	cmp	r3, #2
 8011e0a:	d014      	beq.n	8011e36 <USBD_LL_SetupStage+0x6e>
 8011e0c:	e01d      	b.n	8011e4a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e14:	4619      	mov	r1, r3
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f000 fa18 	bl	801224c <USBD_StdDevReq>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e20:	e020      	b.n	8011e64 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e28:	4619      	mov	r1, r3
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 fa7c 	bl	8012328 <USBD_StdItfReq>
 8011e30:	4603      	mov	r3, r0
 8011e32:	73fb      	strb	r3, [r7, #15]
      break;
 8011e34:	e016      	b.n	8011e64 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f000 fab8 	bl	80123b4 <USBD_StdEPReq>
 8011e44:	4603      	mov	r3, r0
 8011e46:	73fb      	strb	r3, [r7, #15]
      break;
 8011e48:	e00c      	b.n	8011e64 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011e50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011e54:	b2db      	uxtb	r3, r3
 8011e56:	4619      	mov	r1, r3
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f008 fbab 	bl	801a5b4 <USBD_LL_StallEP>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	73fb      	strb	r3, [r7, #15]
      break;
 8011e62:	bf00      	nop
  }

  return ret;
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011e6e:	b580      	push	{r7, lr}
 8011e70:	b086      	sub	sp, #24
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	60f8      	str	r0, [r7, #12]
 8011e76:	460b      	mov	r3, r1
 8011e78:	607a      	str	r2, [r7, #4]
 8011e7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011e7c:	7afb      	ldrb	r3, [r7, #11]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d137      	bne.n	8011ef2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011e88:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e90:	2b03      	cmp	r3, #3
 8011e92:	d14a      	bne.n	8011f2a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	689a      	ldr	r2, [r3, #8]
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	68db      	ldr	r3, [r3, #12]
 8011e9c:	429a      	cmp	r2, r3
 8011e9e:	d913      	bls.n	8011ec8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	689a      	ldr	r2, [r3, #8]
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	68db      	ldr	r3, [r3, #12]
 8011ea8:	1ad2      	subs	r2, r2, r3
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011eae:	693b      	ldr	r3, [r7, #16]
 8011eb0:	68da      	ldr	r2, [r3, #12]
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	689b      	ldr	r3, [r3, #8]
 8011eb6:	4293      	cmp	r3, r2
 8011eb8:	bf28      	it	cs
 8011eba:	4613      	movcs	r3, r2
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	6879      	ldr	r1, [r7, #4]
 8011ec0:	68f8      	ldr	r0, [r7, #12]
 8011ec2:	f000 ffd7 	bl	8012e74 <USBD_CtlContinueRx>
 8011ec6:	e030      	b.n	8011f2a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d00a      	beq.n	8011eea <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011eda:	2b03      	cmp	r3, #3
 8011edc:	d105      	bne.n	8011eea <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ee4:	691b      	ldr	r3, [r3, #16]
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f000 ffd3 	bl	8012e96 <USBD_CtlSendStatus>
 8011ef0:	e01b      	b.n	8011f2a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef8:	699b      	ldr	r3, [r3, #24]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d013      	beq.n	8011f26 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011f04:	2b03      	cmp	r3, #3
 8011f06:	d10e      	bne.n	8011f26 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f0e:	699b      	ldr	r3, [r3, #24]
 8011f10:	7afa      	ldrb	r2, [r7, #11]
 8011f12:	4611      	mov	r1, r2
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	4798      	blx	r3
 8011f18:	4603      	mov	r3, r0
 8011f1a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011f1c:	7dfb      	ldrb	r3, [r7, #23]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d003      	beq.n	8011f2a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	e002      	b.n	8011f2c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011f26:	2303      	movs	r3, #3
 8011f28:	e000      	b.n	8011f2c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3718      	adds	r7, #24
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b086      	sub	sp, #24
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60f8      	str	r0, [r7, #12]
 8011f3c:	460b      	mov	r3, r1
 8011f3e:	607a      	str	r2, [r7, #4]
 8011f40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011f42:	7afb      	ldrb	r3, [r7, #11]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d16a      	bne.n	801201e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	3314      	adds	r3, #20
 8011f4c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f54:	2b02      	cmp	r3, #2
 8011f56:	d155      	bne.n	8012004 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	689a      	ldr	r2, [r3, #8]
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d914      	bls.n	8011f8e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	689a      	ldr	r2, [r3, #8]
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	68db      	ldr	r3, [r3, #12]
 8011f6c:	1ad2      	subs	r2, r2, r3
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	689b      	ldr	r3, [r3, #8]
 8011f76:	461a      	mov	r2, r3
 8011f78:	6879      	ldr	r1, [r7, #4]
 8011f7a:	68f8      	ldr	r0, [r7, #12]
 8011f7c:	f000 ff4c 	bl	8012e18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f80:	2300      	movs	r3, #0
 8011f82:	2200      	movs	r2, #0
 8011f84:	2100      	movs	r1, #0
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f008 fbbe 	bl	801a708 <USBD_LL_PrepareReceive>
 8011f8c:	e03a      	b.n	8012004 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	68da      	ldr	r2, [r3, #12]
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	689b      	ldr	r3, [r3, #8]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d11c      	bne.n	8011fd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	685a      	ldr	r2, [r3, #4]
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d316      	bcc.n	8011fd4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	685a      	ldr	r2, [r3, #4]
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011fb0:	429a      	cmp	r2, r3
 8011fb2:	d20f      	bcs.n	8011fd4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f000 ff2d 	bl	8012e18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	2200      	movs	r2, #0
 8011fca:	2100      	movs	r1, #0
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f008 fb9b 	bl	801a708 <USBD_LL_PrepareReceive>
 8011fd2:	e017      	b.n	8012004 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d00a      	beq.n	8011ff6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011fe6:	2b03      	cmp	r3, #3
 8011fe8:	d105      	bne.n	8011ff6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	68f8      	ldr	r0, [r7, #12]
 8011ff4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ff6:	2180      	movs	r1, #128	; 0x80
 8011ff8:	68f8      	ldr	r0, [r7, #12]
 8011ffa:	f008 fadb 	bl	801a5b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011ffe:	68f8      	ldr	r0, [r7, #12]
 8012000:	f000 ff5c 	bl	8012ebc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801200a:	2b01      	cmp	r3, #1
 801200c:	d123      	bne.n	8012056 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f7ff fe9b 	bl	8011d4a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	2200      	movs	r2, #0
 8012018:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801201c:	e01b      	b.n	8012056 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d013      	beq.n	8012052 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8012030:	2b03      	cmp	r3, #3
 8012032:	d10e      	bne.n	8012052 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801203a:	695b      	ldr	r3, [r3, #20]
 801203c:	7afa      	ldrb	r2, [r7, #11]
 801203e:	4611      	mov	r1, r2
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	4798      	blx	r3
 8012044:	4603      	mov	r3, r0
 8012046:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8012048:	7dfb      	ldrb	r3, [r7, #23]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d003      	beq.n	8012056 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801204e:	7dfb      	ldrb	r3, [r7, #23]
 8012050:	e002      	b.n	8012058 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8012052:	2303      	movs	r3, #3
 8012054:	e000      	b.n	8012058 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8012056:	2300      	movs	r3, #0
}
 8012058:	4618      	mov	r0, r3
 801205a:	3718      	adds	r7, #24
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012060:	b580      	push	{r7, lr}
 8012062:	b082      	sub	sp, #8
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2201      	movs	r2, #1
 801206c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801208c:	2b00      	cmp	r3, #0
 801208e:	d009      	beq.n	80120a4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	687a      	ldr	r2, [r7, #4]
 801209a:	6852      	ldr	r2, [r2, #4]
 801209c:	b2d2      	uxtb	r2, r2
 801209e:	4611      	mov	r1, r2
 80120a0:	6878      	ldr	r0, [r7, #4]
 80120a2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120a4:	2340      	movs	r3, #64	; 0x40
 80120a6:	2200      	movs	r2, #0
 80120a8:	2100      	movs	r1, #0
 80120aa:	6878      	ldr	r0, [r7, #4]
 80120ac:	f008 fa3d 	bl	801a52a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2201      	movs	r2, #1
 80120b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2240      	movs	r2, #64	; 0x40
 80120bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120c0:	2340      	movs	r3, #64	; 0x40
 80120c2:	2200      	movs	r2, #0
 80120c4:	2180      	movs	r1, #128	; 0x80
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f008 fa2f 	bl	801a52a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2201      	movs	r2, #1
 80120d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	2240      	movs	r2, #64	; 0x40
 80120d6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80120e2:	b480      	push	{r7}
 80120e4:	b083      	sub	sp, #12
 80120e6:	af00      	add	r7, sp, #0
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	460b      	mov	r3, r1
 80120ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	78fa      	ldrb	r2, [r7, #3]
 80120f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80120f4:	2300      	movs	r3, #0
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	370c      	adds	r7, #12
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr

08012102 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012102:	b480      	push	{r7}
 8012104:	b083      	sub	sp, #12
 8012106:	af00      	add	r7, sp, #0
 8012108:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2204      	movs	r2, #4
 801211a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	370c      	adds	r7, #12
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr

0801212c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801213a:	2b04      	cmp	r3, #4
 801213c:	d105      	bne.n	801214a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801214a:	2300      	movs	r3, #0
}
 801214c:	4618      	mov	r0, r3
 801214e:	370c      	adds	r7, #12
 8012150:	46bd      	mov	sp, r7
 8012152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012156:	4770      	bx	lr

08012158 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b082      	sub	sp, #8
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012166:	2b03      	cmp	r3, #3
 8012168:	d10b      	bne.n	8012182 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012170:	69db      	ldr	r3, [r3, #28]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d005      	beq.n	8012182 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801217c:	69db      	ldr	r3, [r3, #28]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012182:	2300      	movs	r3, #0
}
 8012184:	4618      	mov	r0, r3
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801218c:	b480      	push	{r7}
 801218e:	b083      	sub	sp, #12
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	460b      	mov	r3, r1
 8012196:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8012198:	2300      	movs	r3, #0
}
 801219a:	4618      	mov	r0, r3
 801219c:	370c      	adds	r7, #12
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr

080121a6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80121a6:	b480      	push	{r7}
 80121a8:	b083      	sub	sp, #12
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
 80121ae:	460b      	mov	r3, r1
 80121b0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80121b2:	2300      	movs	r3, #0
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b083      	sub	sp, #12
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	370c      	adds	r7, #12
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b082      	sub	sp, #8
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d009      	beq.n	8012204 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	6852      	ldr	r2, [r2, #4]
 80121fc:	b2d2      	uxtb	r2, r2
 80121fe:	4611      	mov	r1, r2
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	4798      	blx	r3
  }

  return USBD_OK;
 8012204:	2300      	movs	r3, #0
}
 8012206:	4618      	mov	r0, r3
 8012208:	3708      	adds	r7, #8
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801220e:	b480      	push	{r7}
 8012210:	b087      	sub	sp, #28
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	3301      	adds	r3, #1
 8012224:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801222c:	8a3b      	ldrh	r3, [r7, #16]
 801222e:	021b      	lsls	r3, r3, #8
 8012230:	b21a      	sxth	r2, r3
 8012232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012236:	4313      	orrs	r3, r2
 8012238:	b21b      	sxth	r3, r3
 801223a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801223c:	89fb      	ldrh	r3, [r7, #14]
}
 801223e:	4618      	mov	r0, r3
 8012240:	371c      	adds	r7, #28
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr
	...

0801224c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012256:	2300      	movs	r3, #0
 8012258:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012262:	2b20      	cmp	r3, #32
 8012264:	d004      	beq.n	8012270 <USBD_StdDevReq+0x24>
 8012266:	2b40      	cmp	r3, #64	; 0x40
 8012268:	d002      	beq.n	8012270 <USBD_StdDevReq+0x24>
 801226a:	2b00      	cmp	r3, #0
 801226c:	d00a      	beq.n	8012284 <USBD_StdDevReq+0x38>
 801226e:	e050      	b.n	8012312 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	6839      	ldr	r1, [r7, #0]
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	4798      	blx	r3
 801227e:	4603      	mov	r3, r0
 8012280:	73fb      	strb	r3, [r7, #15]
    break;
 8012282:	e04b      	b.n	801231c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	785b      	ldrb	r3, [r3, #1]
 8012288:	2b09      	cmp	r3, #9
 801228a:	d83c      	bhi.n	8012306 <USBD_StdDevReq+0xba>
 801228c:	a201      	add	r2, pc, #4	; (adr r2, 8012294 <USBD_StdDevReq+0x48>)
 801228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012292:	bf00      	nop
 8012294:	080122e9 	.word	0x080122e9
 8012298:	080122fd 	.word	0x080122fd
 801229c:	08012307 	.word	0x08012307
 80122a0:	080122f3 	.word	0x080122f3
 80122a4:	08012307 	.word	0x08012307
 80122a8:	080122c7 	.word	0x080122c7
 80122ac:	080122bd 	.word	0x080122bd
 80122b0:	08012307 	.word	0x08012307
 80122b4:	080122df 	.word	0x080122df
 80122b8:	080122d1 	.word	0x080122d1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80122bc:	6839      	ldr	r1, [r7, #0]
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f9ce 	bl	8012660 <USBD_GetDescriptor>
      break;
 80122c4:	e024      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80122c6:	6839      	ldr	r1, [r7, #0]
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fb5d 	bl	8012988 <USBD_SetAddress>
      break;
 80122ce:	e01f      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80122d0:	6839      	ldr	r1, [r7, #0]
 80122d2:	6878      	ldr	r0, [r7, #4]
 80122d4:	f000 fb9a 	bl	8012a0c <USBD_SetConfig>
 80122d8:	4603      	mov	r3, r0
 80122da:	73fb      	strb	r3, [r7, #15]
      break;
 80122dc:	e018      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80122de:	6839      	ldr	r1, [r7, #0]
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 fc37 	bl	8012b54 <USBD_GetConfig>
      break;
 80122e6:	e013      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80122e8:	6839      	ldr	r1, [r7, #0]
 80122ea:	6878      	ldr	r0, [r7, #4]
 80122ec:	f000 fc66 	bl	8012bbc <USBD_GetStatus>
      break;
 80122f0:	e00e      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80122f2:	6839      	ldr	r1, [r7, #0]
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 fc94 	bl	8012c22 <USBD_SetFeature>
      break;
 80122fa:	e009      	b.n	8012310 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80122fc:	6839      	ldr	r1, [r7, #0]
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fca3 	bl	8012c4a <USBD_ClrFeature>
      break;
 8012304:	e004      	b.n	8012310 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8012306:	6839      	ldr	r1, [r7, #0]
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f000 fcf9 	bl	8012d00 <USBD_CtlError>
      break;
 801230e:	bf00      	nop
    }
    break;
 8012310:	e004      	b.n	801231c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8012312:	6839      	ldr	r1, [r7, #0]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 fcf3 	bl	8012d00 <USBD_CtlError>
    break;
 801231a:	bf00      	nop
  }

  return ret;
 801231c:	7bfb      	ldrb	r3, [r7, #15]
}
 801231e:	4618      	mov	r0, r3
 8012320:	3710      	adds	r7, #16
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
 8012326:	bf00      	nop

08012328 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012332:	2300      	movs	r3, #0
 8012334:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801233e:	2b20      	cmp	r3, #32
 8012340:	d003      	beq.n	801234a <USBD_StdItfReq+0x22>
 8012342:	2b40      	cmp	r3, #64	; 0x40
 8012344:	d001      	beq.n	801234a <USBD_StdItfReq+0x22>
 8012346:	2b00      	cmp	r3, #0
 8012348:	d12a      	bne.n	80123a0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012350:	3b01      	subs	r3, #1
 8012352:	2b02      	cmp	r3, #2
 8012354:	d81d      	bhi.n	8012392 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	889b      	ldrh	r3, [r3, #4]
 801235a:	b2db      	uxtb	r3, r3
 801235c:	2b01      	cmp	r3, #1
 801235e:	d813      	bhi.n	8012388 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	6839      	ldr	r1, [r7, #0]
 801236a:	6878      	ldr	r0, [r7, #4]
 801236c:	4798      	blx	r3
 801236e:	4603      	mov	r3, r0
 8012370:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	88db      	ldrh	r3, [r3, #6]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d110      	bne.n	801239c <USBD_StdItfReq+0x74>
 801237a:	7bfb      	ldrb	r3, [r7, #15]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10d      	bne.n	801239c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 fd88 	bl	8012e96 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8012386:	e009      	b.n	801239c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8012388:	6839      	ldr	r1, [r7, #0]
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 fcb8 	bl	8012d00 <USBD_CtlError>
      break;
 8012390:	e004      	b.n	801239c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8012392:	6839      	ldr	r1, [r7, #0]
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 fcb3 	bl	8012d00 <USBD_CtlError>
      break;
 801239a:	e000      	b.n	801239e <USBD_StdItfReq+0x76>
      break;
 801239c:	bf00      	nop
    }
    break;
 801239e:	e004      	b.n	80123aa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80123a0:	6839      	ldr	r1, [r7, #0]
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fcac 	bl	8012d00 <USBD_CtlError>
    break;
 80123a8:	bf00      	nop
  }

  return ret;
 80123aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3710      	adds	r7, #16
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	889b      	ldrh	r3, [r3, #4]
 80123c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80123c8:	683b      	ldr	r3, [r7, #0]
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80123d0:	2b20      	cmp	r3, #32
 80123d2:	d004      	beq.n	80123de <USBD_StdEPReq+0x2a>
 80123d4:	2b40      	cmp	r3, #64	; 0x40
 80123d6:	d002      	beq.n	80123de <USBD_StdEPReq+0x2a>
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d00a      	beq.n	80123f2 <USBD_StdEPReq+0x3e>
 80123dc:	e135      	b.n	801264a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123e4:	689b      	ldr	r3, [r3, #8]
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	4798      	blx	r3
 80123ec:	4603      	mov	r3, r0
 80123ee:	73fb      	strb	r3, [r7, #15]
    break;
 80123f0:	e130      	b.n	8012654 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	785b      	ldrb	r3, [r3, #1]
 80123f6:	2b01      	cmp	r3, #1
 80123f8:	d03e      	beq.n	8012478 <USBD_StdEPReq+0xc4>
 80123fa:	2b03      	cmp	r3, #3
 80123fc:	d002      	beq.n	8012404 <USBD_StdEPReq+0x50>
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d077      	beq.n	80124f2 <USBD_StdEPReq+0x13e>
 8012402:	e11c      	b.n	801263e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801240a:	2b02      	cmp	r3, #2
 801240c:	d002      	beq.n	8012414 <USBD_StdEPReq+0x60>
 801240e:	2b03      	cmp	r3, #3
 8012410:	d015      	beq.n	801243e <USBD_StdEPReq+0x8a>
 8012412:	e02b      	b.n	801246c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012414:	7bbb      	ldrb	r3, [r7, #14]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00c      	beq.n	8012434 <USBD_StdEPReq+0x80>
 801241a:	7bbb      	ldrb	r3, [r7, #14]
 801241c:	2b80      	cmp	r3, #128	; 0x80
 801241e:	d009      	beq.n	8012434 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012420:	7bbb      	ldrb	r3, [r7, #14]
 8012422:	4619      	mov	r1, r3
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f008 f8c5 	bl	801a5b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801242a:	2180      	movs	r1, #128	; 0x80
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f008 f8c1 	bl	801a5b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012432:	e020      	b.n	8012476 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8012434:	6839      	ldr	r1, [r7, #0]
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f000 fc62 	bl	8012d00 <USBD_CtlError>
        break;
 801243c:	e01b      	b.n	8012476 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	885b      	ldrh	r3, [r3, #2]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d10e      	bne.n	8012464 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012446:	7bbb      	ldrb	r3, [r7, #14]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00b      	beq.n	8012464 <USBD_StdEPReq+0xb0>
 801244c:	7bbb      	ldrb	r3, [r7, #14]
 801244e:	2b80      	cmp	r3, #128	; 0x80
 8012450:	d008      	beq.n	8012464 <USBD_StdEPReq+0xb0>
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	88db      	ldrh	r3, [r3, #6]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d104      	bne.n	8012464 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801245a:	7bbb      	ldrb	r3, [r7, #14]
 801245c:	4619      	mov	r1, r3
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f008 f8a8 	bl	801a5b4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 fd16 	bl	8012e96 <USBD_CtlSendStatus>

        break;
 801246a:	e004      	b.n	8012476 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 fc46 	bl	8012d00 <USBD_CtlError>
        break;
 8012474:	bf00      	nop
      }
      break;
 8012476:	e0e7      	b.n	8012648 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801247e:	2b02      	cmp	r3, #2
 8012480:	d002      	beq.n	8012488 <USBD_StdEPReq+0xd4>
 8012482:	2b03      	cmp	r3, #3
 8012484:	d015      	beq.n	80124b2 <USBD_StdEPReq+0xfe>
 8012486:	e02d      	b.n	80124e4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012488:	7bbb      	ldrb	r3, [r7, #14]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d00c      	beq.n	80124a8 <USBD_StdEPReq+0xf4>
 801248e:	7bbb      	ldrb	r3, [r7, #14]
 8012490:	2b80      	cmp	r3, #128	; 0x80
 8012492:	d009      	beq.n	80124a8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012494:	7bbb      	ldrb	r3, [r7, #14]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f008 f88b 	bl	801a5b4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801249e:	2180      	movs	r1, #128	; 0x80
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f008 f887 	bl	801a5b4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80124a6:	e023      	b.n	80124f0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80124a8:	6839      	ldr	r1, [r7, #0]
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 fc28 	bl	8012d00 <USBD_CtlError>
        break;
 80124b0:	e01e      	b.n	80124f0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80124b2:	683b      	ldr	r3, [r7, #0]
 80124b4:	885b      	ldrh	r3, [r3, #2]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d119      	bne.n	80124ee <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80124ba:	7bbb      	ldrb	r3, [r7, #14]
 80124bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d004      	beq.n	80124ce <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80124c4:	7bbb      	ldrb	r3, [r7, #14]
 80124c6:	4619      	mov	r1, r3
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f008 f892 	bl	801a5f2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fce1 	bl	8012e96 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124da:	689b      	ldr	r3, [r3, #8]
 80124dc:	6839      	ldr	r1, [r7, #0]
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	4798      	blx	r3
        }
        break;
 80124e2:	e004      	b.n	80124ee <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 fc0a 	bl	8012d00 <USBD_CtlError>
        break;
 80124ec:	e000      	b.n	80124f0 <USBD_StdEPReq+0x13c>
        break;
 80124ee:	bf00      	nop
      }
      break;
 80124f0:	e0aa      	b.n	8012648 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124f8:	2b02      	cmp	r3, #2
 80124fa:	d002      	beq.n	8012502 <USBD_StdEPReq+0x14e>
 80124fc:	2b03      	cmp	r3, #3
 80124fe:	d032      	beq.n	8012566 <USBD_StdEPReq+0x1b2>
 8012500:	e097      	b.n	8012632 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012502:	7bbb      	ldrb	r3, [r7, #14]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d007      	beq.n	8012518 <USBD_StdEPReq+0x164>
 8012508:	7bbb      	ldrb	r3, [r7, #14]
 801250a:	2b80      	cmp	r3, #128	; 0x80
 801250c:	d004      	beq.n	8012518 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 fbf5 	bl	8012d00 <USBD_CtlError>
          break;
 8012516:	e091      	b.n	801263c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801251c:	2b00      	cmp	r3, #0
 801251e:	da0b      	bge.n	8012538 <USBD_StdEPReq+0x184>
 8012520:	7bbb      	ldrb	r3, [r7, #14]
 8012522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012526:	4613      	mov	r3, r2
 8012528:	009b      	lsls	r3, r3, #2
 801252a:	4413      	add	r3, r2
 801252c:	009b      	lsls	r3, r3, #2
 801252e:	3310      	adds	r3, #16
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	4413      	add	r3, r2
 8012534:	3304      	adds	r3, #4
 8012536:	e00b      	b.n	8012550 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012538:	7bbb      	ldrb	r3, [r7, #14]
 801253a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801253e:	4613      	mov	r3, r2
 8012540:	009b      	lsls	r3, r3, #2
 8012542:	4413      	add	r3, r2
 8012544:	009b      	lsls	r3, r3, #2
 8012546:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	4413      	add	r3, r2
 801254e:	3304      	adds	r3, #4
 8012550:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	2200      	movs	r2, #0
 8012556:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	2202      	movs	r2, #2
 801255c:	4619      	mov	r1, r3
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f000 fc3f 	bl	8012de2 <USBD_CtlSendData>
        break;
 8012564:	e06a      	b.n	801263c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012566:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801256a:	2b00      	cmp	r3, #0
 801256c:	da11      	bge.n	8012592 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801256e:	7bbb      	ldrb	r3, [r7, #14]
 8012570:	f003 020f 	and.w	r2, r3, #15
 8012574:	6879      	ldr	r1, [r7, #4]
 8012576:	4613      	mov	r3, r2
 8012578:	009b      	lsls	r3, r3, #2
 801257a:	4413      	add	r3, r2
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	440b      	add	r3, r1
 8012580:	3324      	adds	r3, #36	; 0x24
 8012582:	881b      	ldrh	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d117      	bne.n	80125b8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8012588:	6839      	ldr	r1, [r7, #0]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fbb8 	bl	8012d00 <USBD_CtlError>
            break;
 8012590:	e054      	b.n	801263c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012592:	7bbb      	ldrb	r3, [r7, #14]
 8012594:	f003 020f 	and.w	r2, r3, #15
 8012598:	6879      	ldr	r1, [r7, #4]
 801259a:	4613      	mov	r3, r2
 801259c:	009b      	lsls	r3, r3, #2
 801259e:	4413      	add	r3, r2
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	440b      	add	r3, r1
 80125a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80125a8:	881b      	ldrh	r3, [r3, #0]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d104      	bne.n	80125b8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 fba5 	bl	8012d00 <USBD_CtlError>
            break;
 80125b6:	e041      	b.n	801263c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	da0b      	bge.n	80125d8 <USBD_StdEPReq+0x224>
 80125c0:	7bbb      	ldrb	r3, [r7, #14]
 80125c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125c6:	4613      	mov	r3, r2
 80125c8:	009b      	lsls	r3, r3, #2
 80125ca:	4413      	add	r3, r2
 80125cc:	009b      	lsls	r3, r3, #2
 80125ce:	3310      	adds	r3, #16
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	4413      	add	r3, r2
 80125d4:	3304      	adds	r3, #4
 80125d6:	e00b      	b.n	80125f0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80125d8:	7bbb      	ldrb	r3, [r7, #14]
 80125da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80125de:	4613      	mov	r3, r2
 80125e0:	009b      	lsls	r3, r3, #2
 80125e2:	4413      	add	r3, r2
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	4413      	add	r3, r2
 80125ee:	3304      	adds	r3, #4
 80125f0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80125f2:	7bbb      	ldrb	r3, [r7, #14]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d002      	beq.n	80125fe <USBD_StdEPReq+0x24a>
 80125f8:	7bbb      	ldrb	r3, [r7, #14]
 80125fa:	2b80      	cmp	r3, #128	; 0x80
 80125fc:	d103      	bne.n	8012606 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	2200      	movs	r2, #0
 8012602:	601a      	str	r2, [r3, #0]
 8012604:	e00e      	b.n	8012624 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012606:	7bbb      	ldrb	r3, [r7, #14]
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f008 f810 	bl	801a630 <USBD_LL_IsStallEP>
 8012610:	4603      	mov	r3, r0
 8012612:	2b00      	cmp	r3, #0
 8012614:	d003      	beq.n	801261e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	2201      	movs	r2, #1
 801261a:	601a      	str	r2, [r3, #0]
 801261c:	e002      	b.n	8012624 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 801261e:	68bb      	ldr	r3, [r7, #8]
 8012620:	2200      	movs	r2, #0
 8012622:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	2202      	movs	r2, #2
 8012628:	4619      	mov	r1, r3
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fbd9 	bl	8012de2 <USBD_CtlSendData>
          break;
 8012630:	e004      	b.n	801263c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8012632:	6839      	ldr	r1, [r7, #0]
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f000 fb63 	bl	8012d00 <USBD_CtlError>
        break;
 801263a:	bf00      	nop
      }
      break;
 801263c:	e004      	b.n	8012648 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fb5d 	bl	8012d00 <USBD_CtlError>
      break;
 8012646:	bf00      	nop
    }
    break;
 8012648:	e004      	b.n	8012654 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 801264a:	6839      	ldr	r1, [r7, #0]
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fb57 	bl	8012d00 <USBD_CtlError>
    break;
 8012652:	bf00      	nop
  }

  return ret;
 8012654:	7bfb      	ldrb	r3, [r7, #15]
}
 8012656:	4618      	mov	r0, r3
 8012658:	3710      	adds	r7, #16
 801265a:	46bd      	mov	sp, r7
 801265c:	bd80      	pop	{r7, pc}
	...

08012660 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b084      	sub	sp, #16
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801266a:	2300      	movs	r3, #0
 801266c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801266e:	2300      	movs	r3, #0
 8012670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012672:	2300      	movs	r3, #0
 8012674:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	885b      	ldrh	r3, [r3, #2]
 801267a:	0a1b      	lsrs	r3, r3, #8
 801267c:	b29b      	uxth	r3, r3
 801267e:	3b01      	subs	r3, #1
 8012680:	2b0e      	cmp	r3, #14
 8012682:	f200 8152 	bhi.w	801292a <USBD_GetDescriptor+0x2ca>
 8012686:	a201      	add	r2, pc, #4	; (adr r2, 801268c <USBD_GetDescriptor+0x2c>)
 8012688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801268c:	080126fd 	.word	0x080126fd
 8012690:	08012715 	.word	0x08012715
 8012694:	08012755 	.word	0x08012755
 8012698:	0801292b 	.word	0x0801292b
 801269c:	0801292b 	.word	0x0801292b
 80126a0:	080128cb 	.word	0x080128cb
 80126a4:	080128f7 	.word	0x080128f7
 80126a8:	0801292b 	.word	0x0801292b
 80126ac:	0801292b 	.word	0x0801292b
 80126b0:	0801292b 	.word	0x0801292b
 80126b4:	0801292b 	.word	0x0801292b
 80126b8:	0801292b 	.word	0x0801292b
 80126bc:	0801292b 	.word	0x0801292b
 80126c0:	0801292b 	.word	0x0801292b
 80126c4:	080126c9 	.word	0x080126c9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126ce:	69db      	ldr	r3, [r3, #28]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d00b      	beq.n	80126ec <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80126da:	69db      	ldr	r3, [r3, #28]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	7c12      	ldrb	r2, [r2, #16]
 80126e0:	f107 0108 	add.w	r1, r7, #8
 80126e4:	4610      	mov	r0, r2
 80126e6:	4798      	blx	r3
 80126e8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126ea:	e126      	b.n	801293a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80126ec:	6839      	ldr	r1, [r7, #0]
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f000 fb06 	bl	8012d00 <USBD_CtlError>
      err++;
 80126f4:	7afb      	ldrb	r3, [r7, #11]
 80126f6:	3301      	adds	r3, #1
 80126f8:	72fb      	strb	r3, [r7, #11]
    break;
 80126fa:	e11e      	b.n	801293a <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	7c12      	ldrb	r2, [r2, #16]
 8012708:	f107 0108 	add.w	r1, r7, #8
 801270c:	4610      	mov	r0, r2
 801270e:	4798      	blx	r3
 8012710:	60f8      	str	r0, [r7, #12]
    break;
 8012712:	e112      	b.n	801293a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	7c1b      	ldrb	r3, [r3, #16]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d10d      	bne.n	8012738 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012724:	f107 0208 	add.w	r2, r7, #8
 8012728:	4610      	mov	r0, r2
 801272a:	4798      	blx	r3
 801272c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	3301      	adds	r3, #1
 8012732:	2202      	movs	r2, #2
 8012734:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8012736:	e100      	b.n	801293a <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012740:	f107 0208 	add.w	r2, r7, #8
 8012744:	4610      	mov	r0, r2
 8012746:	4798      	blx	r3
 8012748:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	3301      	adds	r3, #1
 801274e:	2202      	movs	r2, #2
 8012750:	701a      	strb	r2, [r3, #0]
    break;
 8012752:	e0f2      	b.n	801293a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012754:	683b      	ldr	r3, [r7, #0]
 8012756:	885b      	ldrh	r3, [r3, #2]
 8012758:	b2db      	uxtb	r3, r3
 801275a:	2b05      	cmp	r3, #5
 801275c:	f200 80ac 	bhi.w	80128b8 <USBD_GetDescriptor+0x258>
 8012760:	a201      	add	r2, pc, #4	; (adr r2, 8012768 <USBD_GetDescriptor+0x108>)
 8012762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012766:	bf00      	nop
 8012768:	08012781 	.word	0x08012781
 801276c:	080127b5 	.word	0x080127b5
 8012770:	080127e9 	.word	0x080127e9
 8012774:	0801281d 	.word	0x0801281d
 8012778:	08012851 	.word	0x08012851
 801277c:	08012885 	.word	0x08012885
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d00b      	beq.n	80127a4 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	7c12      	ldrb	r2, [r2, #16]
 8012798:	f107 0108 	add.w	r1, r7, #8
 801279c:	4610      	mov	r0, r2
 801279e:	4798      	blx	r3
 80127a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127a2:	e091      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 faaa 	bl	8012d00 <USBD_CtlError>
        err++;
 80127ac:	7afb      	ldrb	r3, [r7, #11]
 80127ae:	3301      	adds	r3, #1
 80127b0:	72fb      	strb	r3, [r7, #11]
      break;
 80127b2:	e089      	b.n	80128c8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ba:	689b      	ldr	r3, [r3, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d00b      	beq.n	80127d8 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127c6:	689b      	ldr	r3, [r3, #8]
 80127c8:	687a      	ldr	r2, [r7, #4]
 80127ca:	7c12      	ldrb	r2, [r2, #16]
 80127cc:	f107 0108 	add.w	r1, r7, #8
 80127d0:	4610      	mov	r0, r2
 80127d2:	4798      	blx	r3
 80127d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80127d6:	e077      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f000 fa90 	bl	8012d00 <USBD_CtlError>
        err++;
 80127e0:	7afb      	ldrb	r3, [r7, #11]
 80127e2:	3301      	adds	r3, #1
 80127e4:	72fb      	strb	r3, [r7, #11]
      break;
 80127e6:	e06f      	b.n	80128c8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127ee:	68db      	ldr	r3, [r3, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d00b      	beq.n	801280c <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	687a      	ldr	r2, [r7, #4]
 80127fe:	7c12      	ldrb	r2, [r2, #16]
 8012800:	f107 0108 	add.w	r1, r7, #8
 8012804:	4610      	mov	r0, r2
 8012806:	4798      	blx	r3
 8012808:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801280a:	e05d      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f000 fa76 	bl	8012d00 <USBD_CtlError>
        err++;
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	3301      	adds	r3, #1
 8012818:	72fb      	strb	r3, [r7, #11]
      break;
 801281a:	e055      	b.n	80128c8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012822:	691b      	ldr	r3, [r3, #16]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d00b      	beq.n	8012840 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801282e:	691b      	ldr	r3, [r3, #16]
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	7c12      	ldrb	r2, [r2, #16]
 8012834:	f107 0108 	add.w	r1, r7, #8
 8012838:	4610      	mov	r0, r2
 801283a:	4798      	blx	r3
 801283c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801283e:	e043      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012840:	6839      	ldr	r1, [r7, #0]
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 fa5c 	bl	8012d00 <USBD_CtlError>
        err++;
 8012848:	7afb      	ldrb	r3, [r7, #11]
 801284a:	3301      	adds	r3, #1
 801284c:	72fb      	strb	r3, [r7, #11]
      break;
 801284e:	e03b      	b.n	80128c8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012856:	695b      	ldr	r3, [r3, #20]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00b      	beq.n	8012874 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012862:	695b      	ldr	r3, [r3, #20]
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	7c12      	ldrb	r2, [r2, #16]
 8012868:	f107 0108 	add.w	r1, r7, #8
 801286c:	4610      	mov	r0, r2
 801286e:	4798      	blx	r3
 8012870:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012872:	e029      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012874:	6839      	ldr	r1, [r7, #0]
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fa42 	bl	8012d00 <USBD_CtlError>
        err++;
 801287c:	7afb      	ldrb	r3, [r7, #11]
 801287e:	3301      	adds	r3, #1
 8012880:	72fb      	strb	r3, [r7, #11]
      break;
 8012882:	e021      	b.n	80128c8 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801288a:	699b      	ldr	r3, [r3, #24]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d00b      	beq.n	80128a8 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	7c12      	ldrb	r2, [r2, #16]
 801289c:	f107 0108 	add.w	r1, r7, #8
 80128a0:	4610      	mov	r0, r2
 80128a2:	4798      	blx	r3
 80128a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128a6:	e00f      	b.n	80128c8 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80128a8:	6839      	ldr	r1, [r7, #0]
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fa28 	bl	8012d00 <USBD_CtlError>
        err++;
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	3301      	adds	r3, #1
 80128b4:	72fb      	strb	r3, [r7, #11]
      break;
 80128b6:	e007      	b.n	80128c8 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80128b8:	6839      	ldr	r1, [r7, #0]
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f000 fa20 	bl	8012d00 <USBD_CtlError>
      err++;
 80128c0:	7afb      	ldrb	r3, [r7, #11]
 80128c2:	3301      	adds	r3, #1
 80128c4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80128c6:	bf00      	nop
    }
    break;
 80128c8:	e037      	b.n	801293a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	7c1b      	ldrb	r3, [r3, #16]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d109      	bne.n	80128e6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128da:	f107 0208 	add.w	r2, r7, #8
 80128de:	4610      	mov	r0, r2
 80128e0:	4798      	blx	r3
 80128e2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80128e4:	e029      	b.n	801293a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80128e6:	6839      	ldr	r1, [r7, #0]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fa09 	bl	8012d00 <USBD_CtlError>
      err++;
 80128ee:	7afb      	ldrb	r3, [r7, #11]
 80128f0:	3301      	adds	r3, #1
 80128f2:	72fb      	strb	r3, [r7, #11]
    break;
 80128f4:	e021      	b.n	801293a <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	7c1b      	ldrb	r3, [r3, #16]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d10d      	bne.n	801291a <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012906:	f107 0208 	add.w	r2, r7, #8
 801290a:	4610      	mov	r0, r2
 801290c:	4798      	blx	r3
 801290e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	3301      	adds	r3, #1
 8012914:	2207      	movs	r2, #7
 8012916:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012918:	e00f      	b.n	801293a <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f9ef 	bl	8012d00 <USBD_CtlError>
      err++;
 8012922:	7afb      	ldrb	r3, [r7, #11]
 8012924:	3301      	adds	r3, #1
 8012926:	72fb      	strb	r3, [r7, #11]
    break;
 8012928:	e007      	b.n	801293a <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 801292a:	6839      	ldr	r1, [r7, #0]
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f000 f9e7 	bl	8012d00 <USBD_CtlError>
    err++;
 8012932:	7afb      	ldrb	r3, [r7, #11]
 8012934:	3301      	adds	r3, #1
 8012936:	72fb      	strb	r3, [r7, #11]
    break;
 8012938:	bf00      	nop
  }

  if (err != 0U)
 801293a:	7afb      	ldrb	r3, [r7, #11]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d11e      	bne.n	801297e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	88db      	ldrh	r3, [r3, #6]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d016      	beq.n	8012976 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8012948:	893b      	ldrh	r3, [r7, #8]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d00e      	beq.n	801296c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	88da      	ldrh	r2, [r3, #6]
 8012952:	893b      	ldrh	r3, [r7, #8]
 8012954:	4293      	cmp	r3, r2
 8012956:	bf28      	it	cs
 8012958:	4613      	movcs	r3, r2
 801295a:	b29b      	uxth	r3, r3
 801295c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801295e:	893b      	ldrh	r3, [r7, #8]
 8012960:	461a      	mov	r2, r3
 8012962:	68f9      	ldr	r1, [r7, #12]
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 fa3c 	bl	8012de2 <USBD_CtlSendData>
 801296a:	e009      	b.n	8012980 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801296c:	6839      	ldr	r1, [r7, #0]
 801296e:	6878      	ldr	r0, [r7, #4]
 8012970:	f000 f9c6 	bl	8012d00 <USBD_CtlError>
 8012974:	e004      	b.n	8012980 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f000 fa8d 	bl	8012e96 <USBD_CtlSendStatus>
 801297c:	e000      	b.n	8012980 <USBD_GetDescriptor+0x320>
    return;
 801297e:	bf00      	nop
    }
  }
}
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop

08012988 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b084      	sub	sp, #16
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
 8012990:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	889b      	ldrh	r3, [r3, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d130      	bne.n	80129fc <USBD_SetAddress+0x74>
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	88db      	ldrh	r3, [r3, #6]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d12c      	bne.n	80129fc <USBD_SetAddress+0x74>
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	885b      	ldrh	r3, [r3, #2]
 80129a6:	2b7f      	cmp	r3, #127	; 0x7f
 80129a8:	d828      	bhi.n	80129fc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	885b      	ldrh	r3, [r3, #2]
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129bc:	2b03      	cmp	r3, #3
 80129be:	d104      	bne.n	80129ca <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80129c0:	6839      	ldr	r1, [r7, #0]
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f000 f99c 	bl	8012d00 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129c8:	e01c      	b.n	8012a04 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	7bfa      	ldrb	r2, [r7, #15]
 80129ce:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80129d2:	7bfb      	ldrb	r3, [r7, #15]
 80129d4:	4619      	mov	r1, r3
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f007 fe56 	bl	801a688 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f000 fa5a 	bl	8012e96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80129e2:	7bfb      	ldrb	r3, [r7, #15]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d004      	beq.n	80129f2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2202      	movs	r2, #2
 80129ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129f0:	e008      	b.n	8012a04 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	2201      	movs	r2, #1
 80129f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129fa:	e003      	b.n	8012a04 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f000 f97e 	bl	8012d00 <USBD_CtlError>
  }
}
 8012a04:	bf00      	nop
 8012a06:	3710      	adds	r7, #16
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b084      	sub	sp, #16
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	6078      	str	r0, [r7, #4]
 8012a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a16:	2300      	movs	r3, #0
 8012a18:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	885b      	ldrh	r3, [r3, #2]
 8012a1e:	b2da      	uxtb	r2, r3
 8012a20:	4b4b      	ldr	r3, [pc, #300]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012a24:	4b4a      	ldr	r3, [pc, #296]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d905      	bls.n	8012a38 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f966 	bl	8012d00 <USBD_CtlError>
    return USBD_FAIL;
 8012a34:	2303      	movs	r3, #3
 8012a36:	e087      	b.n	8012b48 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a3e:	2b02      	cmp	r3, #2
 8012a40:	d002      	beq.n	8012a48 <USBD_SetConfig+0x3c>
 8012a42:	2b03      	cmp	r3, #3
 8012a44:	d025      	beq.n	8012a92 <USBD_SetConfig+0x86>
 8012a46:	e071      	b.n	8012b2c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8012a48:	4b41      	ldr	r3, [pc, #260]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d01c      	beq.n	8012a8a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012a50:	4b3f      	ldr	r3, [pc, #252]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	461a      	mov	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012a5a:	4b3d      	ldr	r3, [pc, #244]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	4619      	mov	r1, r3
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f7ff f97d 	bl	8011d60 <USBD_SetClassConfig>
 8012a66:	4603      	mov	r3, r0
 8012a68:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8012a6a:	7bfb      	ldrb	r3, [r7, #15]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d004      	beq.n	8012a7a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012a70:	6839      	ldr	r1, [r7, #0]
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f000 f944 	bl	8012d00 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012a78:	e065      	b.n	8012b46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f000 fa0b 	bl	8012e96 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	2203      	movs	r2, #3
 8012a84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012a88:	e05d      	b.n	8012b46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f000 fa03 	bl	8012e96 <USBD_CtlSendStatus>
    break;
 8012a90:	e059      	b.n	8012b46 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012a92:	4b2f      	ldr	r3, [pc, #188]	; (8012b50 <USBD_SetConfig+0x144>)
 8012a94:	781b      	ldrb	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d112      	bne.n	8012ac0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2202      	movs	r2, #2
 8012a9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012aa2:	4b2b      	ldr	r3, [pc, #172]	; (8012b50 <USBD_SetConfig+0x144>)
 8012aa4:	781b      	ldrb	r3, [r3, #0]
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012aac:	4b28      	ldr	r3, [pc, #160]	; (8012b50 <USBD_SetConfig+0x144>)
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	4619      	mov	r1, r3
 8012ab2:	6878      	ldr	r0, [r7, #4]
 8012ab4:	f7ff f970 	bl	8011d98 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 f9ec 	bl	8012e96 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012abe:	e042      	b.n	8012b46 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012ac0:	4b23      	ldr	r3, [pc, #140]	; (8012b50 <USBD_SetConfig+0x144>)
 8012ac2:	781b      	ldrb	r3, [r3, #0]
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d02a      	beq.n	8012b24 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	b2db      	uxtb	r3, r3
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff f95e 	bl	8011d98 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012adc:	4b1c      	ldr	r3, [pc, #112]	; (8012b50 <USBD_SetConfig+0x144>)
 8012ade:	781b      	ldrb	r3, [r3, #0]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ae6:	4b1a      	ldr	r3, [pc, #104]	; (8012b50 <USBD_SetConfig+0x144>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	4619      	mov	r1, r3
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7ff f937 	bl	8011d60 <USBD_SetClassConfig>
 8012af2:	4603      	mov	r3, r0
 8012af4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012af6:	7bfb      	ldrb	r3, [r7, #15]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00f      	beq.n	8012b1c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 f8fe 	bl	8012d00 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	b2db      	uxtb	r3, r3
 8012b0a:	4619      	mov	r1, r3
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7ff f943 	bl	8011d98 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2202      	movs	r2, #2
 8012b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012b1a:	e014      	b.n	8012b46 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8012b1c:	6878      	ldr	r0, [r7, #4]
 8012b1e:	f000 f9ba 	bl	8012e96 <USBD_CtlSendStatus>
    break;
 8012b22:	e010      	b.n	8012b46 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f000 f9b6 	bl	8012e96 <USBD_CtlSendStatus>
    break;
 8012b2a:	e00c      	b.n	8012b46 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8012b2c:	6839      	ldr	r1, [r7, #0]
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f000 f8e6 	bl	8012d00 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012b34:	4b06      	ldr	r3, [pc, #24]	; (8012b50 <USBD_SetConfig+0x144>)
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	4619      	mov	r1, r3
 8012b3a:	6878      	ldr	r0, [r7, #4]
 8012b3c:	f7ff f92c 	bl	8011d98 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8012b40:	2303      	movs	r3, #3
 8012b42:	73fb      	strb	r3, [r7, #15]
    break;
 8012b44:	bf00      	nop
  }

  return ret;
 8012b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b48:	4618      	mov	r0, r3
 8012b4a:	3710      	adds	r7, #16
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bd80      	pop	{r7, pc}
 8012b50:	2000033c 	.word	0x2000033c

08012b54 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b082      	sub	sp, #8
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	88db      	ldrh	r3, [r3, #6]
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d004      	beq.n	8012b70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012b66:	6839      	ldr	r1, [r7, #0]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f8c9 	bl	8012d00 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012b6e:	e021      	b.n	8012bb4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	db17      	blt.n	8012baa <USBD_GetConfig+0x56>
 8012b7a:	2b02      	cmp	r3, #2
 8012b7c:	dd02      	ble.n	8012b84 <USBD_GetConfig+0x30>
 8012b7e:	2b03      	cmp	r3, #3
 8012b80:	d00b      	beq.n	8012b9a <USBD_GetConfig+0x46>
 8012b82:	e012      	b.n	8012baa <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	2200      	movs	r2, #0
 8012b88:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	3308      	adds	r3, #8
 8012b8e:	2201      	movs	r2, #1
 8012b90:	4619      	mov	r1, r3
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 f925 	bl	8012de2 <USBD_CtlSendData>
      break;
 8012b98:	e00c      	b.n	8012bb4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	3304      	adds	r3, #4
 8012b9e:	2201      	movs	r2, #1
 8012ba0:	4619      	mov	r1, r3
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 f91d 	bl	8012de2 <USBD_CtlSendData>
      break;
 8012ba8:	e004      	b.n	8012bb4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8012baa:	6839      	ldr	r1, [r7, #0]
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f8a7 	bl	8012d00 <USBD_CtlError>
      break;
 8012bb2:	bf00      	nop
}
 8012bb4:	bf00      	nop
 8012bb6:	3708      	adds	r7, #8
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bd80      	pop	{r7, pc}

08012bbc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
 8012bc4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012bcc:	3b01      	subs	r3, #1
 8012bce:	2b02      	cmp	r3, #2
 8012bd0:	d81e      	bhi.n	8012c10 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012bd2:	683b      	ldr	r3, [r7, #0]
 8012bd4:	88db      	ldrh	r3, [r3, #6]
 8012bd6:	2b02      	cmp	r3, #2
 8012bd8:	d004      	beq.n	8012be4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8012bda:	6839      	ldr	r1, [r7, #0]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f000 f88f 	bl	8012d00 <USBD_CtlError>
      break;
 8012be2:	e01a      	b.n	8012c1a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2201      	movs	r2, #1
 8012be8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d005      	beq.n	8012c00 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	f043 0202 	orr.w	r2, r3, #2
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	330c      	adds	r3, #12
 8012c04:	2202      	movs	r2, #2
 8012c06:	4619      	mov	r1, r3
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f000 f8ea 	bl	8012de2 <USBD_CtlSendData>
    break;
 8012c0e:	e004      	b.n	8012c1a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012c10:	6839      	ldr	r1, [r7, #0]
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f000 f874 	bl	8012d00 <USBD_CtlError>
    break;
 8012c18:	bf00      	nop
  }
}
 8012c1a:	bf00      	nop
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c22:	b580      	push	{r7, lr}
 8012c24:	b082      	sub	sp, #8
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
 8012c2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c2c:	683b      	ldr	r3, [r7, #0]
 8012c2e:	885b      	ldrh	r3, [r3, #2]
 8012c30:	2b01      	cmp	r3, #1
 8012c32:	d106      	bne.n	8012c42 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	2201      	movs	r2, #1
 8012c38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f000 f92a 	bl	8012e96 <USBD_CtlSendStatus>
  }
}
 8012c42:	bf00      	nop
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b082      	sub	sp, #8
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
 8012c52:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c5a:	3b01      	subs	r3, #1
 8012c5c:	2b02      	cmp	r3, #2
 8012c5e:	d80b      	bhi.n	8012c78 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	885b      	ldrh	r3, [r3, #2]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d10c      	bne.n	8012c82 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f000 f910 	bl	8012e96 <USBD_CtlSendStatus>
      }
      break;
 8012c76:	e004      	b.n	8012c82 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012c78:	6839      	ldr	r1, [r7, #0]
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f000 f840 	bl	8012d00 <USBD_CtlError>
      break;
 8012c80:	e000      	b.n	8012c84 <USBD_ClrFeature+0x3a>
      break;
 8012c82:	bf00      	nop
  }
}
 8012c84:	bf00      	nop
 8012c86:	3708      	adds	r7, #8
 8012c88:	46bd      	mov	sp, r7
 8012c8a:	bd80      	pop	{r7, pc}

08012c8c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012c96:	683b      	ldr	r3, [r7, #0]
 8012c98:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	781a      	ldrb	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	781a      	ldrb	r2, [r3, #0]
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	f7ff faa9 	bl	801220e <SWAPBYTE>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	3301      	adds	r3, #1
 8012cc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	3301      	adds	r3, #1
 8012cce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012cd0:	68f8      	ldr	r0, [r7, #12]
 8012cd2:	f7ff fa9c 	bl	801220e <SWAPBYTE>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	461a      	mov	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012cea:	68f8      	ldr	r0, [r7, #12]
 8012cec:	f7ff fa8f 	bl	801220e <SWAPBYTE>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	80da      	strh	r2, [r3, #6]
}
 8012cf8:	bf00      	nop
 8012cfa:	3710      	adds	r7, #16
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}

08012d00 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012d0a:	2180      	movs	r1, #128	; 0x80
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f007 fc51 	bl	801a5b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012d12:	2100      	movs	r1, #0
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f007 fc4d 	bl	801a5b4 <USBD_LL_StallEP>
}
 8012d1a:	bf00      	nop
 8012d1c:	3708      	adds	r7, #8
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}

08012d22 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b086      	sub	sp, #24
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	60f8      	str	r0, [r7, #12]
 8012d2a:	60b9      	str	r1, [r7, #8]
 8012d2c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012d2e:	2300      	movs	r3, #0
 8012d30:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d036      	beq.n	8012da6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012d3c:	6938      	ldr	r0, [r7, #16]
 8012d3e:	f000 f836 	bl	8012dae <USBD_GetLen>
 8012d42:	4603      	mov	r3, r0
 8012d44:	3301      	adds	r3, #1
 8012d46:	b29b      	uxth	r3, r3
 8012d48:	005b      	lsls	r3, r3, #1
 8012d4a:	b29a      	uxth	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
 8012d52:	68ba      	ldr	r2, [r7, #8]
 8012d54:	4413      	add	r3, r2
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	7812      	ldrb	r2, [r2, #0]
 8012d5a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
 8012d64:	68ba      	ldr	r2, [r7, #8]
 8012d66:	4413      	add	r3, r2
 8012d68:	2203      	movs	r2, #3
 8012d6a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012d6c:	7dfb      	ldrb	r3, [r7, #23]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012d72:	e013      	b.n	8012d9c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	4413      	add	r3, r2
 8012d7a:	693a      	ldr	r2, [r7, #16]
 8012d7c:	7812      	ldrb	r2, [r2, #0]
 8012d7e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	3301      	adds	r3, #1
 8012d84:	613b      	str	r3, [r7, #16]
    idx++;
 8012d86:	7dfb      	ldrb	r3, [r7, #23]
 8012d88:	3301      	adds	r3, #1
 8012d8a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012d8c:	7dfb      	ldrb	r3, [r7, #23]
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	4413      	add	r3, r2
 8012d92:	2200      	movs	r2, #0
 8012d94:	701a      	strb	r2, [r3, #0]
    idx++;
 8012d96:	7dfb      	ldrb	r3, [r7, #23]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d1e7      	bne.n	8012d74 <USBD_GetString+0x52>
 8012da4:	e000      	b.n	8012da8 <USBD_GetString+0x86>
    return;
 8012da6:	bf00      	nop
  }
}
 8012da8:	3718      	adds	r7, #24
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}

08012dae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012dae:	b480      	push	{r7}
 8012db0:	b085      	sub	sp, #20
 8012db2:	af00      	add	r7, sp, #0
 8012db4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012db6:	2300      	movs	r3, #0
 8012db8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012dbe:	e005      	b.n	8012dcc <USBD_GetLen+0x1e>
  {
    len++;
 8012dc0:	7bfb      	ldrb	r3, [r7, #15]
 8012dc2:	3301      	adds	r3, #1
 8012dc4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	3301      	adds	r3, #1
 8012dca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	781b      	ldrb	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d1f5      	bne.n	8012dc0 <USBD_GetLen+0x12>
  }

  return len;
 8012dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3714      	adds	r7, #20
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr

08012de2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012de2:	b580      	push	{r7, lr}
 8012de4:	b084      	sub	sp, #16
 8012de6:	af00      	add	r7, sp, #0
 8012de8:	60f8      	str	r0, [r7, #12]
 8012dea:	60b9      	str	r1, [r7, #8]
 8012dec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	2202      	movs	r2, #2
 8012df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	2100      	movs	r1, #0
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f007 fc5c 	bl	801a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3710      	adds	r7, #16
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	60f8      	str	r0, [r7, #12]
 8012e20:	60b9      	str	r1, [r7, #8]
 8012e22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	68ba      	ldr	r2, [r7, #8]
 8012e28:	2100      	movs	r1, #0
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f007 fc4b 	bl	801a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3710      	adds	r7, #16
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}

08012e3a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012e3a:	b580      	push	{r7, lr}
 8012e3c:	b084      	sub	sp, #16
 8012e3e:	af00      	add	r7, sp, #0
 8012e40:	60f8      	str	r0, [r7, #12]
 8012e42:	60b9      	str	r1, [r7, #8]
 8012e44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	2203      	movs	r2, #3
 8012e4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	687a      	ldr	r2, [r7, #4]
 8012e5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	68ba      	ldr	r2, [r7, #8]
 8012e62:	2100      	movs	r1, #0
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f007 fc4f 	bl	801a708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	60b9      	str	r1, [r7, #8]
 8012e7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	2100      	movs	r1, #0
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f007 fc3e 	bl	801a708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012e8c:	2300      	movs	r3, #0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b082      	sub	sp, #8
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2204      	movs	r2, #4
 8012ea2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6878      	ldr	r0, [r7, #4]
 8012eae:	f007 fc0a 	bl	801a6c6 <USBD_LL_Transmit>

  return USBD_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3708      	adds	r7, #8
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b082      	sub	sp, #8
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2205      	movs	r2, #5
 8012ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ecc:	2300      	movs	r3, #0
 8012ece:	2200      	movs	r2, #0
 8012ed0:	2100      	movs	r1, #0
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f007 fc18 	bl	801a708 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
	...

08012ee4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	4603      	mov	r3, r0
 8012eec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012eee:	79fb      	ldrb	r3, [r7, #7]
 8012ef0:	4a08      	ldr	r2, [pc, #32]	; (8012f14 <disk_status+0x30>)
 8012ef2:	009b      	lsls	r3, r3, #2
 8012ef4:	4413      	add	r3, r2
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	79fa      	ldrb	r2, [r7, #7]
 8012efc:	4905      	ldr	r1, [pc, #20]	; (8012f14 <disk_status+0x30>)
 8012efe:	440a      	add	r2, r1
 8012f00:	7a12      	ldrb	r2, [r2, #8]
 8012f02:	4610      	mov	r0, r2
 8012f04:	4798      	blx	r3
 8012f06:	4603      	mov	r3, r0
 8012f08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3710      	adds	r7, #16
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	20000368 	.word	0x20000368

08012f18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b084      	sub	sp, #16
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	4603      	mov	r3, r0
 8012f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012f22:	2300      	movs	r3, #0
 8012f24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012f26:	79fb      	ldrb	r3, [r7, #7]
 8012f28:	4a0d      	ldr	r2, [pc, #52]	; (8012f60 <disk_initialize+0x48>)
 8012f2a:	5cd3      	ldrb	r3, [r2, r3]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d111      	bne.n	8012f54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012f30:	79fb      	ldrb	r3, [r7, #7]
 8012f32:	4a0b      	ldr	r2, [pc, #44]	; (8012f60 <disk_initialize+0x48>)
 8012f34:	2101      	movs	r1, #1
 8012f36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012f38:	79fb      	ldrb	r3, [r7, #7]
 8012f3a:	4a09      	ldr	r2, [pc, #36]	; (8012f60 <disk_initialize+0x48>)
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	685b      	ldr	r3, [r3, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	79fa      	ldrb	r2, [r7, #7]
 8012f46:	4906      	ldr	r1, [pc, #24]	; (8012f60 <disk_initialize+0x48>)
 8012f48:	440a      	add	r2, r1
 8012f4a:	7a12      	ldrb	r2, [r2, #8]
 8012f4c:	4610      	mov	r0, r2
 8012f4e:	4798      	blx	r3
 8012f50:	4603      	mov	r3, r0
 8012f52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3710      	adds	r7, #16
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	20000368 	.word	0x20000368

08012f64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012f64:	b590      	push	{r4, r7, lr}
 8012f66:	b087      	sub	sp, #28
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60b9      	str	r1, [r7, #8]
 8012f6c:	607a      	str	r2, [r7, #4]
 8012f6e:	603b      	str	r3, [r7, #0]
 8012f70:	4603      	mov	r3, r0
 8012f72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012f74:	7bfb      	ldrb	r3, [r7, #15]
 8012f76:	4a0a      	ldr	r2, [pc, #40]	; (8012fa0 <disk_read+0x3c>)
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	4413      	add	r3, r2
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	689c      	ldr	r4, [r3, #8]
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
 8012f82:	4a07      	ldr	r2, [pc, #28]	; (8012fa0 <disk_read+0x3c>)
 8012f84:	4413      	add	r3, r2
 8012f86:	7a18      	ldrb	r0, [r3, #8]
 8012f88:	683b      	ldr	r3, [r7, #0]
 8012f8a:	687a      	ldr	r2, [r7, #4]
 8012f8c:	68b9      	ldr	r1, [r7, #8]
 8012f8e:	47a0      	blx	r4
 8012f90:	4603      	mov	r3, r0
 8012f92:	75fb      	strb	r3, [r7, #23]
  return res;
 8012f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	371c      	adds	r7, #28
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd90      	pop	{r4, r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	20000368 	.word	0x20000368

08012fa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012fa4:	b590      	push	{r4, r7, lr}
 8012fa6:	b087      	sub	sp, #28
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	60b9      	str	r1, [r7, #8]
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	603b      	str	r3, [r7, #0]
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012fb4:	7bfb      	ldrb	r3, [r7, #15]
 8012fb6:	4a0a      	ldr	r2, [pc, #40]	; (8012fe0 <disk_write+0x3c>)
 8012fb8:	009b      	lsls	r3, r3, #2
 8012fba:	4413      	add	r3, r2
 8012fbc:	685b      	ldr	r3, [r3, #4]
 8012fbe:	68dc      	ldr	r4, [r3, #12]
 8012fc0:	7bfb      	ldrb	r3, [r7, #15]
 8012fc2:	4a07      	ldr	r2, [pc, #28]	; (8012fe0 <disk_write+0x3c>)
 8012fc4:	4413      	add	r3, r2
 8012fc6:	7a18      	ldrb	r0, [r3, #8]
 8012fc8:	683b      	ldr	r3, [r7, #0]
 8012fca:	687a      	ldr	r2, [r7, #4]
 8012fcc:	68b9      	ldr	r1, [r7, #8]
 8012fce:	47a0      	blx	r4
 8012fd0:	4603      	mov	r3, r0
 8012fd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8012fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	371c      	adds	r7, #28
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd90      	pop	{r4, r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	20000368 	.word	0x20000368

08012fe4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	4603      	mov	r3, r0
 8012fec:	603a      	str	r2, [r7, #0]
 8012fee:	71fb      	strb	r3, [r7, #7]
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012ff4:	79fb      	ldrb	r3, [r7, #7]
 8012ff6:	4a09      	ldr	r2, [pc, #36]	; (801301c <disk_ioctl+0x38>)
 8012ff8:	009b      	lsls	r3, r3, #2
 8012ffa:	4413      	add	r3, r2
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	691b      	ldr	r3, [r3, #16]
 8013000:	79fa      	ldrb	r2, [r7, #7]
 8013002:	4906      	ldr	r1, [pc, #24]	; (801301c <disk_ioctl+0x38>)
 8013004:	440a      	add	r2, r1
 8013006:	7a10      	ldrb	r0, [r2, #8]
 8013008:	79b9      	ldrb	r1, [r7, #6]
 801300a:	683a      	ldr	r2, [r7, #0]
 801300c:	4798      	blx	r3
 801300e:	4603      	mov	r3, r0
 8013010:	73fb      	strb	r3, [r7, #15]
  return res;
 8013012:	7bfb      	ldrb	r3, [r7, #15]
}
 8013014:	4618      	mov	r0, r3
 8013016:	3710      	adds	r7, #16
 8013018:	46bd      	mov	sp, r7
 801301a:	bd80      	pop	{r7, pc}
 801301c:	20000368 	.word	0x20000368

08013020 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	3301      	adds	r3, #1
 801302c:	781b      	ldrb	r3, [r3, #0]
 801302e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013030:	89fb      	ldrh	r3, [r7, #14]
 8013032:	021b      	lsls	r3, r3, #8
 8013034:	b21a      	sxth	r2, r3
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	b21b      	sxth	r3, r3
 801303c:	4313      	orrs	r3, r2
 801303e:	b21b      	sxth	r3, r3
 8013040:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013042:	89fb      	ldrh	r3, [r7, #14]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3714      	adds	r7, #20
 8013048:	46bd      	mov	sp, r7
 801304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304e:	4770      	bx	lr

08013050 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013050:	b480      	push	{r7}
 8013052:	b085      	sub	sp, #20
 8013054:	af00      	add	r7, sp, #0
 8013056:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	3303      	adds	r3, #3
 801305c:	781b      	ldrb	r3, [r3, #0]
 801305e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013060:	68fb      	ldr	r3, [r7, #12]
 8013062:	021b      	lsls	r3, r3, #8
 8013064:	687a      	ldr	r2, [r7, #4]
 8013066:	3202      	adds	r2, #2
 8013068:	7812      	ldrb	r2, [r2, #0]
 801306a:	4313      	orrs	r3, r2
 801306c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	021b      	lsls	r3, r3, #8
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	3201      	adds	r2, #1
 8013076:	7812      	ldrb	r2, [r2, #0]
 8013078:	4313      	orrs	r3, r2
 801307a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	021b      	lsls	r3, r3, #8
 8013080:	687a      	ldr	r2, [r7, #4]
 8013082:	7812      	ldrb	r2, [r2, #0]
 8013084:	4313      	orrs	r3, r2
 8013086:	60fb      	str	r3, [r7, #12]
	return rv;
 8013088:	68fb      	ldr	r3, [r7, #12]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3714      	adds	r7, #20
 801308e:	46bd      	mov	sp, r7
 8013090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013094:	4770      	bx	lr

08013096 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013096:	b480      	push	{r7}
 8013098:	b083      	sub	sp, #12
 801309a:	af00      	add	r7, sp, #0
 801309c:	6078      	str	r0, [r7, #4]
 801309e:	460b      	mov	r3, r1
 80130a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	1c5a      	adds	r2, r3, #1
 80130a6:	607a      	str	r2, [r7, #4]
 80130a8:	887a      	ldrh	r2, [r7, #2]
 80130aa:	b2d2      	uxtb	r2, r2
 80130ac:	701a      	strb	r2, [r3, #0]
 80130ae:	887b      	ldrh	r3, [r7, #2]
 80130b0:	0a1b      	lsrs	r3, r3, #8
 80130b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	1c5a      	adds	r2, r3, #1
 80130b8:	607a      	str	r2, [r7, #4]
 80130ba:	887a      	ldrh	r2, [r7, #2]
 80130bc:	b2d2      	uxtb	r2, r2
 80130be:	701a      	strb	r2, [r3, #0]
}
 80130c0:	bf00      	nop
 80130c2:	370c      	adds	r7, #12
 80130c4:	46bd      	mov	sp, r7
 80130c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ca:	4770      	bx	lr

080130cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80130cc:	b480      	push	{r7}
 80130ce:	b083      	sub	sp, #12
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	607a      	str	r2, [r7, #4]
 80130dc:	683a      	ldr	r2, [r7, #0]
 80130de:	b2d2      	uxtb	r2, r2
 80130e0:	701a      	strb	r2, [r3, #0]
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	0a1b      	lsrs	r3, r3, #8
 80130e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	1c5a      	adds	r2, r3, #1
 80130ec:	607a      	str	r2, [r7, #4]
 80130ee:	683a      	ldr	r2, [r7, #0]
 80130f0:	b2d2      	uxtb	r2, r2
 80130f2:	701a      	strb	r2, [r3, #0]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	0a1b      	lsrs	r3, r3, #8
 80130f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	1c5a      	adds	r2, r3, #1
 80130fe:	607a      	str	r2, [r7, #4]
 8013100:	683a      	ldr	r2, [r7, #0]
 8013102:	b2d2      	uxtb	r2, r2
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	0a1b      	lsrs	r3, r3, #8
 801310a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	1c5a      	adds	r2, r3, #1
 8013110:	607a      	str	r2, [r7, #4]
 8013112:	683a      	ldr	r2, [r7, #0]
 8013114:	b2d2      	uxtb	r2, r2
 8013116:	701a      	strb	r2, [r3, #0]
}
 8013118:	bf00      	nop
 801311a:	370c      	adds	r7, #12
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr

08013124 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013124:	b480      	push	{r7}
 8013126:	b087      	sub	sp, #28
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00d      	beq.n	801315a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801313e:	693a      	ldr	r2, [r7, #16]
 8013140:	1c53      	adds	r3, r2, #1
 8013142:	613b      	str	r3, [r7, #16]
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	1c59      	adds	r1, r3, #1
 8013148:	6179      	str	r1, [r7, #20]
 801314a:	7812      	ldrb	r2, [r2, #0]
 801314c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	3b01      	subs	r3, #1
 8013152:	607b      	str	r3, [r7, #4]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d1f1      	bne.n	801313e <mem_cpy+0x1a>
	}
}
 801315a:	bf00      	nop
 801315c:	371c      	adds	r7, #28
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8013166:	b480      	push	{r7}
 8013168:	b087      	sub	sp, #28
 801316a:	af00      	add	r7, sp, #0
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	60b9      	str	r1, [r7, #8]
 8013170:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	617a      	str	r2, [r7, #20]
 801317c:	68ba      	ldr	r2, [r7, #8]
 801317e:	b2d2      	uxtb	r2, r2
 8013180:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	3b01      	subs	r3, #1
 8013186:	607b      	str	r3, [r7, #4]
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d1f3      	bne.n	8013176 <mem_set+0x10>
}
 801318e:	bf00      	nop
 8013190:	371c      	adds	r7, #28
 8013192:	46bd      	mov	sp, r7
 8013194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013198:	4770      	bx	lr

0801319a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801319a:	b480      	push	{r7}
 801319c:	b089      	sub	sp, #36	; 0x24
 801319e:	af00      	add	r7, sp, #0
 80131a0:	60f8      	str	r0, [r7, #12]
 80131a2:	60b9      	str	r1, [r7, #8]
 80131a4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	61fb      	str	r3, [r7, #28]
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80131ae:	2300      	movs	r3, #0
 80131b0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	1c5a      	adds	r2, r3, #1
 80131b6:	61fa      	str	r2, [r7, #28]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	4619      	mov	r1, r3
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	1c5a      	adds	r2, r3, #1
 80131c0:	61ba      	str	r2, [r7, #24]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	1acb      	subs	r3, r1, r3
 80131c6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3b01      	subs	r3, #1
 80131cc:	607b      	str	r3, [r7, #4]
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d002      	beq.n	80131da <mem_cmp+0x40>
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d0eb      	beq.n	80131b2 <mem_cmp+0x18>

	return r;
 80131da:	697b      	ldr	r3, [r7, #20]
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3724      	adds	r7, #36	; 0x24
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80131e8:	b480      	push	{r7}
 80131ea:	b083      	sub	sp, #12
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
 80131f0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80131f2:	e002      	b.n	80131fa <chk_chr+0x12>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	3301      	adds	r3, #1
 80131f8:	607b      	str	r3, [r7, #4]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	781b      	ldrb	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d005      	beq.n	801320e <chk_chr+0x26>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	461a      	mov	r2, r3
 8013208:	683b      	ldr	r3, [r7, #0]
 801320a:	4293      	cmp	r3, r2
 801320c:	d1f2      	bne.n	80131f4 <chk_chr+0xc>
	return *str;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	781b      	ldrb	r3, [r3, #0]
}
 8013212:	4618      	mov	r0, r3
 8013214:	370c      	adds	r7, #12
 8013216:	46bd      	mov	sp, r7
 8013218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801321c:	4770      	bx	lr

0801321e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b082      	sub	sp, #8
 8013222:	af00      	add	r7, sp, #0
 8013224:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d009      	beq.n	8013240 <lock_fs+0x22>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	4618      	mov	r0, r3
 8013232:	f002 fdbd 	bl	8015db0 <ff_req_grant>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d001      	beq.n	8013240 <lock_fs+0x22>
 801323c:	2301      	movs	r3, #1
 801323e:	e000      	b.n	8013242 <lock_fs+0x24>
 8013240:	2300      	movs	r3, #0
}
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b082      	sub	sp, #8
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
 8013252:	460b      	mov	r3, r1
 8013254:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d00d      	beq.n	8013278 <unlock_fs+0x2e>
 801325c:	78fb      	ldrb	r3, [r7, #3]
 801325e:	2b0c      	cmp	r3, #12
 8013260:	d00a      	beq.n	8013278 <unlock_fs+0x2e>
 8013262:	78fb      	ldrb	r3, [r7, #3]
 8013264:	2b0b      	cmp	r3, #11
 8013266:	d007      	beq.n	8013278 <unlock_fs+0x2e>
 8013268:	78fb      	ldrb	r3, [r7, #3]
 801326a:	2b0f      	cmp	r3, #15
 801326c:	d004      	beq.n	8013278 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	4618      	mov	r0, r3
 8013274:	f002 fdb1 	bl	8015dda <ff_rel_grant>
	}
}
 8013278:	bf00      	nop
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}

08013280 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013280:	b480      	push	{r7}
 8013282:	b085      	sub	sp, #20
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801328a:	2300      	movs	r3, #0
 801328c:	60bb      	str	r3, [r7, #8]
 801328e:	68bb      	ldr	r3, [r7, #8]
 8013290:	60fb      	str	r3, [r7, #12]
 8013292:	e029      	b.n	80132e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013294:	4a27      	ldr	r2, [pc, #156]	; (8013334 <chk_lock+0xb4>)
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	011b      	lsls	r3, r3, #4
 801329a:	4413      	add	r3, r2
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d01d      	beq.n	80132de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80132a2:	4a24      	ldr	r2, [pc, #144]	; (8013334 <chk_lock+0xb4>)
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	011b      	lsls	r3, r3, #4
 80132a8:	4413      	add	r3, r2
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d116      	bne.n	80132e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80132b4:	4a1f      	ldr	r2, [pc, #124]	; (8013334 <chk_lock+0xb4>)
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	011b      	lsls	r3, r3, #4
 80132ba:	4413      	add	r3, r2
 80132bc:	3304      	adds	r3, #4
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80132c4:	429a      	cmp	r2, r3
 80132c6:	d10c      	bne.n	80132e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80132c8:	4a1a      	ldr	r2, [pc, #104]	; (8013334 <chk_lock+0xb4>)
 80132ca:	68fb      	ldr	r3, [r7, #12]
 80132cc:	011b      	lsls	r3, r3, #4
 80132ce:	4413      	add	r3, r2
 80132d0:	3308      	adds	r3, #8
 80132d2:	681a      	ldr	r2, [r3, #0]
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80132d8:	429a      	cmp	r2, r3
 80132da:	d102      	bne.n	80132e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80132dc:	e007      	b.n	80132ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80132de:	2301      	movs	r3, #1
 80132e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	3301      	adds	r3, #1
 80132e6:	60fb      	str	r3, [r7, #12]
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	2b01      	cmp	r3, #1
 80132ec:	d9d2      	bls.n	8013294 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	d109      	bne.n	8013308 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d102      	bne.n	8013300 <chk_lock+0x80>
 80132fa:	683b      	ldr	r3, [r7, #0]
 80132fc:	2b02      	cmp	r3, #2
 80132fe:	d101      	bne.n	8013304 <chk_lock+0x84>
 8013300:	2300      	movs	r3, #0
 8013302:	e010      	b.n	8013326 <chk_lock+0xa6>
 8013304:	2312      	movs	r3, #18
 8013306:	e00e      	b.n	8013326 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d108      	bne.n	8013320 <chk_lock+0xa0>
 801330e:	4a09      	ldr	r2, [pc, #36]	; (8013334 <chk_lock+0xb4>)
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	011b      	lsls	r3, r3, #4
 8013314:	4413      	add	r3, r2
 8013316:	330c      	adds	r3, #12
 8013318:	881b      	ldrh	r3, [r3, #0]
 801331a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801331e:	d101      	bne.n	8013324 <chk_lock+0xa4>
 8013320:	2310      	movs	r3, #16
 8013322:	e000      	b.n	8013326 <chk_lock+0xa6>
 8013324:	2300      	movs	r3, #0
}
 8013326:	4618      	mov	r0, r3
 8013328:	3714      	adds	r7, #20
 801332a:	46bd      	mov	sp, r7
 801332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013330:	4770      	bx	lr
 8013332:	bf00      	nop
 8013334:	20000348 	.word	0x20000348

08013338 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8013338:	b480      	push	{r7}
 801333a:	b083      	sub	sp, #12
 801333c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801333e:	2300      	movs	r3, #0
 8013340:	607b      	str	r3, [r7, #4]
 8013342:	e002      	b.n	801334a <enq_lock+0x12>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	3301      	adds	r3, #1
 8013348:	607b      	str	r3, [r7, #4]
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d806      	bhi.n	801335e <enq_lock+0x26>
 8013350:	4a09      	ldr	r2, [pc, #36]	; (8013378 <enq_lock+0x40>)
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	011b      	lsls	r3, r3, #4
 8013356:	4413      	add	r3, r2
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d1f2      	bne.n	8013344 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2b02      	cmp	r3, #2
 8013362:	bf14      	ite	ne
 8013364:	2301      	movne	r3, #1
 8013366:	2300      	moveq	r3, #0
 8013368:	b2db      	uxtb	r3, r3
}
 801336a:	4618      	mov	r0, r3
 801336c:	370c      	adds	r7, #12
 801336e:	46bd      	mov	sp, r7
 8013370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013374:	4770      	bx	lr
 8013376:	bf00      	nop
 8013378:	20000348 	.word	0x20000348

0801337c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801337c:	b480      	push	{r7}
 801337e:	b085      	sub	sp, #20
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013386:	2300      	movs	r3, #0
 8013388:	60fb      	str	r3, [r7, #12]
 801338a:	e01f      	b.n	80133cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801338c:	4a41      	ldr	r2, [pc, #260]	; (8013494 <inc_lock+0x118>)
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	011b      	lsls	r3, r3, #4
 8013392:	4413      	add	r3, r2
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	429a      	cmp	r2, r3
 801339c:	d113      	bne.n	80133c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801339e:	4a3d      	ldr	r2, [pc, #244]	; (8013494 <inc_lock+0x118>)
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	011b      	lsls	r3, r3, #4
 80133a4:	4413      	add	r3, r2
 80133a6:	3304      	adds	r3, #4
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d109      	bne.n	80133c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80133b2:	4a38      	ldr	r2, [pc, #224]	; (8013494 <inc_lock+0x118>)
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	011b      	lsls	r3, r3, #4
 80133b8:	4413      	add	r3, r2
 80133ba:	3308      	adds	r3, #8
 80133bc:	681a      	ldr	r2, [r3, #0]
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d006      	beq.n	80133d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	3301      	adds	r3, #1
 80133ca:	60fb      	str	r3, [r7, #12]
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d9dc      	bls.n	801338c <inc_lock+0x10>
 80133d2:	e000      	b.n	80133d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80133d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	2b02      	cmp	r3, #2
 80133da:	d132      	bne.n	8013442 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80133dc:	2300      	movs	r3, #0
 80133de:	60fb      	str	r3, [r7, #12]
 80133e0:	e002      	b.n	80133e8 <inc_lock+0x6c>
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	3301      	adds	r3, #1
 80133e6:	60fb      	str	r3, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	2b01      	cmp	r3, #1
 80133ec:	d806      	bhi.n	80133fc <inc_lock+0x80>
 80133ee:	4a29      	ldr	r2, [pc, #164]	; (8013494 <inc_lock+0x118>)
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	011b      	lsls	r3, r3, #4
 80133f4:	4413      	add	r3, r2
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d1f2      	bne.n	80133e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d101      	bne.n	8013406 <inc_lock+0x8a>
 8013402:	2300      	movs	r3, #0
 8013404:	e040      	b.n	8013488 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681a      	ldr	r2, [r3, #0]
 801340a:	4922      	ldr	r1, [pc, #136]	; (8013494 <inc_lock+0x118>)
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	011b      	lsls	r3, r3, #4
 8013410:	440b      	add	r3, r1
 8013412:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	689a      	ldr	r2, [r3, #8]
 8013418:	491e      	ldr	r1, [pc, #120]	; (8013494 <inc_lock+0x118>)
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	011b      	lsls	r3, r3, #4
 801341e:	440b      	add	r3, r1
 8013420:	3304      	adds	r3, #4
 8013422:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	695a      	ldr	r2, [r3, #20]
 8013428:	491a      	ldr	r1, [pc, #104]	; (8013494 <inc_lock+0x118>)
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	011b      	lsls	r3, r3, #4
 801342e:	440b      	add	r3, r1
 8013430:	3308      	adds	r3, #8
 8013432:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8013434:	4a17      	ldr	r2, [pc, #92]	; (8013494 <inc_lock+0x118>)
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	011b      	lsls	r3, r3, #4
 801343a:	4413      	add	r3, r2
 801343c:	330c      	adds	r3, #12
 801343e:	2200      	movs	r2, #0
 8013440:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d009      	beq.n	801345c <inc_lock+0xe0>
 8013448:	4a12      	ldr	r2, [pc, #72]	; (8013494 <inc_lock+0x118>)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	011b      	lsls	r3, r3, #4
 801344e:	4413      	add	r3, r2
 8013450:	330c      	adds	r3, #12
 8013452:	881b      	ldrh	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d001      	beq.n	801345c <inc_lock+0xe0>
 8013458:	2300      	movs	r3, #0
 801345a:	e015      	b.n	8013488 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d108      	bne.n	8013474 <inc_lock+0xf8>
 8013462:	4a0c      	ldr	r2, [pc, #48]	; (8013494 <inc_lock+0x118>)
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	011b      	lsls	r3, r3, #4
 8013468:	4413      	add	r3, r2
 801346a:	330c      	adds	r3, #12
 801346c:	881b      	ldrh	r3, [r3, #0]
 801346e:	3301      	adds	r3, #1
 8013470:	b29a      	uxth	r2, r3
 8013472:	e001      	b.n	8013478 <inc_lock+0xfc>
 8013474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013478:	4906      	ldr	r1, [pc, #24]	; (8013494 <inc_lock+0x118>)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	011b      	lsls	r3, r3, #4
 801347e:	440b      	add	r3, r1
 8013480:	330c      	adds	r3, #12
 8013482:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	3301      	adds	r3, #1
}
 8013488:	4618      	mov	r0, r3
 801348a:	3714      	adds	r7, #20
 801348c:	46bd      	mov	sp, r7
 801348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013492:	4770      	bx	lr
 8013494:	20000348 	.word	0x20000348

08013498 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013498:	b480      	push	{r7}
 801349a:	b085      	sub	sp, #20
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	3b01      	subs	r3, #1
 80134a4:	607b      	str	r3, [r7, #4]
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2b01      	cmp	r3, #1
 80134aa:	d825      	bhi.n	80134f8 <dec_lock+0x60>
		n = Files[i].ctr;
 80134ac:	4a17      	ldr	r2, [pc, #92]	; (801350c <dec_lock+0x74>)
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	011b      	lsls	r3, r3, #4
 80134b2:	4413      	add	r3, r2
 80134b4:	330c      	adds	r3, #12
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80134ba:	89fb      	ldrh	r3, [r7, #14]
 80134bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134c0:	d101      	bne.n	80134c6 <dec_lock+0x2e>
 80134c2:	2300      	movs	r3, #0
 80134c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80134c6:	89fb      	ldrh	r3, [r7, #14]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <dec_lock+0x3a>
 80134cc:	89fb      	ldrh	r3, [r7, #14]
 80134ce:	3b01      	subs	r3, #1
 80134d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80134d2:	4a0e      	ldr	r2, [pc, #56]	; (801350c <dec_lock+0x74>)
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	011b      	lsls	r3, r3, #4
 80134d8:	4413      	add	r3, r2
 80134da:	330c      	adds	r3, #12
 80134dc:	89fa      	ldrh	r2, [r7, #14]
 80134de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80134e0:	89fb      	ldrh	r3, [r7, #14]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d105      	bne.n	80134f2 <dec_lock+0x5a>
 80134e6:	4a09      	ldr	r2, [pc, #36]	; (801350c <dec_lock+0x74>)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	011b      	lsls	r3, r3, #4
 80134ec:	4413      	add	r3, r2
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80134f2:	2300      	movs	r3, #0
 80134f4:	737b      	strb	r3, [r7, #13]
 80134f6:	e001      	b.n	80134fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80134f8:	2302      	movs	r3, #2
 80134fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80134fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3714      	adds	r7, #20
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	20000348 	.word	0x20000348

08013510 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013510:	b480      	push	{r7}
 8013512:	b085      	sub	sp, #20
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8013518:	2300      	movs	r3, #0
 801351a:	60fb      	str	r3, [r7, #12]
 801351c:	e010      	b.n	8013540 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801351e:	4a0d      	ldr	r2, [pc, #52]	; (8013554 <clear_lock+0x44>)
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	011b      	lsls	r3, r3, #4
 8013524:	4413      	add	r3, r2
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	687a      	ldr	r2, [r7, #4]
 801352a:	429a      	cmp	r2, r3
 801352c:	d105      	bne.n	801353a <clear_lock+0x2a>
 801352e:	4a09      	ldr	r2, [pc, #36]	; (8013554 <clear_lock+0x44>)
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	011b      	lsls	r3, r3, #4
 8013534:	4413      	add	r3, r2
 8013536:	2200      	movs	r2, #0
 8013538:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	3301      	adds	r3, #1
 801353e:	60fb      	str	r3, [r7, #12]
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2b01      	cmp	r3, #1
 8013544:	d9eb      	bls.n	801351e <clear_lock+0xe>
	}
}
 8013546:	bf00      	nop
 8013548:	3714      	adds	r7, #20
 801354a:	46bd      	mov	sp, r7
 801354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013550:	4770      	bx	lr
 8013552:	bf00      	nop
 8013554:	20000348 	.word	0x20000348

08013558 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b086      	sub	sp, #24
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013560:	2300      	movs	r3, #0
 8013562:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	78db      	ldrb	r3, [r3, #3]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d034      	beq.n	80135d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013570:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	7858      	ldrb	r0, [r3, #1]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801357c:	2301      	movs	r3, #1
 801357e:	697a      	ldr	r2, [r7, #20]
 8013580:	f7ff fd10 	bl	8012fa4 <disk_write>
 8013584:	4603      	mov	r3, r0
 8013586:	2b00      	cmp	r3, #0
 8013588:	d002      	beq.n	8013590 <sync_window+0x38>
			res = FR_DISK_ERR;
 801358a:	2301      	movs	r3, #1
 801358c:	73fb      	strb	r3, [r7, #15]
 801358e:	e022      	b.n	80135d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2200      	movs	r2, #0
 8013594:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801359a:	697a      	ldr	r2, [r7, #20]
 801359c:	1ad2      	subs	r2, r2, r3
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	69db      	ldr	r3, [r3, #28]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d217      	bcs.n	80135d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	789b      	ldrb	r3, [r3, #2]
 80135aa:	613b      	str	r3, [r7, #16]
 80135ac:	e010      	b.n	80135d0 <sync_window+0x78>
					wsect += fs->fsize;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	69db      	ldr	r3, [r3, #28]
 80135b2:	697a      	ldr	r2, [r7, #20]
 80135b4:	4413      	add	r3, r2
 80135b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	7858      	ldrb	r0, [r3, #1]
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80135c2:	2301      	movs	r3, #1
 80135c4:	697a      	ldr	r2, [r7, #20]
 80135c6:	f7ff fced 	bl	8012fa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	3b01      	subs	r3, #1
 80135ce:	613b      	str	r3, [r7, #16]
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d8eb      	bhi.n	80135ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80135d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3718      	adds	r7, #24
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80135ea:	2300      	movs	r3, #0
 80135ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135f2:	683a      	ldr	r2, [r7, #0]
 80135f4:	429a      	cmp	r2, r3
 80135f6:	d01b      	beq.n	8013630 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f7ff ffad 	bl	8013558 <sync_window>
 80135fe:	4603      	mov	r3, r0
 8013600:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013602:	7bfb      	ldrb	r3, [r7, #15]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d113      	bne.n	8013630 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	7858      	ldrb	r0, [r3, #1]
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013612:	2301      	movs	r3, #1
 8013614:	683a      	ldr	r2, [r7, #0]
 8013616:	f7ff fca5 	bl	8012f64 <disk_read>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d004      	beq.n	801362a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013620:	f04f 33ff 	mov.w	r3, #4294967295
 8013624:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013626:	2301      	movs	r3, #1
 8013628:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	683a      	ldr	r2, [r7, #0]
 801362e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8013630:	7bfb      	ldrb	r3, [r7, #15]
}
 8013632:	4618      	mov	r0, r3
 8013634:	3710      	adds	r7, #16
 8013636:	46bd      	mov	sp, r7
 8013638:	bd80      	pop	{r7, pc}
	...

0801363c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff ff87 	bl	8013558 <sync_window>
 801364a:	4603      	mov	r3, r0
 801364c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801364e:	7bfb      	ldrb	r3, [r7, #15]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d158      	bne.n	8013706 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	2b03      	cmp	r3, #3
 801365a:	d148      	bne.n	80136ee <sync_fs+0xb2>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	791b      	ldrb	r3, [r3, #4]
 8013660:	2b01      	cmp	r3, #1
 8013662:	d144      	bne.n	80136ee <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	3334      	adds	r3, #52	; 0x34
 8013668:	f44f 7200 	mov.w	r2, #512	; 0x200
 801366c:	2100      	movs	r1, #0
 801366e:	4618      	mov	r0, r3
 8013670:	f7ff fd79 	bl	8013166 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	3334      	adds	r3, #52	; 0x34
 8013678:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801367c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff fd08 	bl	8013096 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	3334      	adds	r3, #52	; 0x34
 801368a:	4921      	ldr	r1, [pc, #132]	; (8013710 <sync_fs+0xd4>)
 801368c:	4618      	mov	r0, r3
 801368e:	f7ff fd1d 	bl	80130cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	3334      	adds	r3, #52	; 0x34
 8013696:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801369a:	491e      	ldr	r1, [pc, #120]	; (8013714 <sync_fs+0xd8>)
 801369c:	4618      	mov	r0, r3
 801369e:	f7ff fd15 	bl	80130cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3334      	adds	r3, #52	; 0x34
 80136a6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	695b      	ldr	r3, [r3, #20]
 80136ae:	4619      	mov	r1, r3
 80136b0:	4610      	mov	r0, r2
 80136b2:	f7ff fd0b 	bl	80130cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	3334      	adds	r3, #52	; 0x34
 80136ba:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	691b      	ldr	r3, [r3, #16]
 80136c2:	4619      	mov	r1, r3
 80136c4:	4610      	mov	r0, r2
 80136c6:	f7ff fd01 	bl	80130cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	6a1b      	ldr	r3, [r3, #32]
 80136ce:	1c5a      	adds	r2, r3, #1
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	7858      	ldrb	r0, [r3, #1]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80136e2:	2301      	movs	r3, #1
 80136e4:	f7ff fc5e 	bl	8012fa4 <disk_write>
			fs->fsi_flag = 0;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	2200      	movs	r2, #0
 80136ec:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	785b      	ldrb	r3, [r3, #1]
 80136f2:	2200      	movs	r2, #0
 80136f4:	2100      	movs	r1, #0
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7ff fc74 	bl	8012fe4 <disk_ioctl>
 80136fc:	4603      	mov	r3, r0
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d001      	beq.n	8013706 <sync_fs+0xca>
 8013702:	2301      	movs	r3, #1
 8013704:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013706:	7bfb      	ldrb	r3, [r7, #15]
}
 8013708:	4618      	mov	r0, r3
 801370a:	3710      	adds	r7, #16
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	41615252 	.word	0x41615252
 8013714:	61417272 	.word	0x61417272

08013718 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	3b02      	subs	r3, #2
 8013726:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	699b      	ldr	r3, [r3, #24]
 801372c:	3b02      	subs	r3, #2
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	429a      	cmp	r2, r3
 8013732:	d301      	bcc.n	8013738 <clust2sect+0x20>
 8013734:	2300      	movs	r3, #0
 8013736:	e008      	b.n	801374a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	895b      	ldrh	r3, [r3, #10]
 801373c:	461a      	mov	r2, r3
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	fb03 f202 	mul.w	r2, r3, r2
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013748:	4413      	add	r3, r2
}
 801374a:	4618      	mov	r0, r3
 801374c:	370c      	adds	r7, #12
 801374e:	46bd      	mov	sp, r7
 8013750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013754:	4770      	bx	lr

08013756 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013756:	b580      	push	{r7, lr}
 8013758:	b086      	sub	sp, #24
 801375a:	af00      	add	r7, sp, #0
 801375c:	6078      	str	r0, [r7, #4]
 801375e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	2b01      	cmp	r3, #1
 801376a:	d904      	bls.n	8013776 <get_fat+0x20>
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	699b      	ldr	r3, [r3, #24]
 8013770:	683a      	ldr	r2, [r7, #0]
 8013772:	429a      	cmp	r2, r3
 8013774:	d302      	bcc.n	801377c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013776:	2301      	movs	r3, #1
 8013778:	617b      	str	r3, [r7, #20]
 801377a:	e08c      	b.n	8013896 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801377c:	f04f 33ff 	mov.w	r3, #4294967295
 8013780:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	2b02      	cmp	r3, #2
 8013788:	d045      	beq.n	8013816 <get_fat+0xc0>
 801378a:	2b03      	cmp	r3, #3
 801378c:	d05d      	beq.n	801384a <get_fat+0xf4>
 801378e:	2b01      	cmp	r3, #1
 8013790:	d177      	bne.n	8013882 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013792:	683b      	ldr	r3, [r7, #0]
 8013794:	60fb      	str	r3, [r7, #12]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	085b      	lsrs	r3, r3, #1
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	4413      	add	r3, r2
 801379e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	0a5b      	lsrs	r3, r3, #9
 80137a8:	4413      	add	r3, r2
 80137aa:	4619      	mov	r1, r3
 80137ac:	6938      	ldr	r0, [r7, #16]
 80137ae:	f7ff ff17 	bl	80135e0 <move_window>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d167      	bne.n	8013888 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	60fa      	str	r2, [r7, #12]
 80137be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137c2:	693a      	ldr	r2, [r7, #16]
 80137c4:	4413      	add	r3, r2
 80137c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80137cc:	693b      	ldr	r3, [r7, #16]
 80137ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	0a5b      	lsrs	r3, r3, #9
 80137d4:	4413      	add	r3, r2
 80137d6:	4619      	mov	r1, r3
 80137d8:	6938      	ldr	r0, [r7, #16]
 80137da:	f7ff ff01 	bl	80135e0 <move_window>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d153      	bne.n	801388c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80137ea:	693a      	ldr	r2, [r7, #16]
 80137ec:	4413      	add	r3, r2
 80137ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80137f2:	021b      	lsls	r3, r3, #8
 80137f4:	461a      	mov	r2, r3
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	4313      	orrs	r3, r2
 80137fa:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	f003 0301 	and.w	r3, r3, #1
 8013802:	2b00      	cmp	r3, #0
 8013804:	d002      	beq.n	801380c <get_fat+0xb6>
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	091b      	lsrs	r3, r3, #4
 801380a:	e002      	b.n	8013812 <get_fat+0xbc>
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013812:	617b      	str	r3, [r7, #20]
			break;
 8013814:	e03f      	b.n	8013896 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	0a1b      	lsrs	r3, r3, #8
 801381e:	4413      	add	r3, r2
 8013820:	4619      	mov	r1, r3
 8013822:	6938      	ldr	r0, [r7, #16]
 8013824:	f7ff fedc 	bl	80135e0 <move_window>
 8013828:	4603      	mov	r3, r0
 801382a:	2b00      	cmp	r3, #0
 801382c:	d130      	bne.n	8013890 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801383c:	4413      	add	r3, r2
 801383e:	4618      	mov	r0, r3
 8013840:	f7ff fbee 	bl	8013020 <ld_word>
 8013844:	4603      	mov	r3, r0
 8013846:	617b      	str	r3, [r7, #20]
			break;
 8013848:	e025      	b.n	8013896 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	09db      	lsrs	r3, r3, #7
 8013852:	4413      	add	r3, r2
 8013854:	4619      	mov	r1, r3
 8013856:	6938      	ldr	r0, [r7, #16]
 8013858:	f7ff fec2 	bl	80135e0 <move_window>
 801385c:	4603      	mov	r3, r0
 801385e:	2b00      	cmp	r3, #0
 8013860:	d118      	bne.n	8013894 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	009b      	lsls	r3, r3, #2
 801386c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013870:	4413      	add	r3, r2
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff fbec 	bl	8013050 <ld_dword>
 8013878:	4603      	mov	r3, r0
 801387a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801387e:	617b      	str	r3, [r7, #20]
			break;
 8013880:	e009      	b.n	8013896 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013882:	2301      	movs	r3, #1
 8013884:	617b      	str	r3, [r7, #20]
 8013886:	e006      	b.n	8013896 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013888:	bf00      	nop
 801388a:	e004      	b.n	8013896 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801388c:	bf00      	nop
 801388e:	e002      	b.n	8013896 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013890:	bf00      	nop
 8013892:	e000      	b.n	8013896 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013894:	bf00      	nop
		}
	}

	return val;
 8013896:	697b      	ldr	r3, [r7, #20]
}
 8013898:	4618      	mov	r0, r3
 801389a:	3718      	adds	r7, #24
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80138a0:	b590      	push	{r4, r7, lr}
 80138a2:	b089      	sub	sp, #36	; 0x24
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	60f8      	str	r0, [r7, #12]
 80138a8:	60b9      	str	r1, [r7, #8]
 80138aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80138ac:	2302      	movs	r3, #2
 80138ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	2b01      	cmp	r3, #1
 80138b4:	f240 80d6 	bls.w	8013a64 <put_fat+0x1c4>
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	699b      	ldr	r3, [r3, #24]
 80138bc:	68ba      	ldr	r2, [r7, #8]
 80138be:	429a      	cmp	r2, r3
 80138c0:	f080 80d0 	bcs.w	8013a64 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2b02      	cmp	r3, #2
 80138ca:	d073      	beq.n	80139b4 <put_fat+0x114>
 80138cc:	2b03      	cmp	r3, #3
 80138ce:	f000 8091 	beq.w	80139f4 <put_fat+0x154>
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	f040 80c6 	bne.w	8013a64 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	61bb      	str	r3, [r7, #24]
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	085b      	lsrs	r3, r3, #1
 80138e0:	69ba      	ldr	r2, [r7, #24]
 80138e2:	4413      	add	r3, r2
 80138e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	0a5b      	lsrs	r3, r3, #9
 80138ee:	4413      	add	r3, r2
 80138f0:	4619      	mov	r1, r3
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7ff fe74 	bl	80135e0 <move_window>
 80138f8:	4603      	mov	r3, r0
 80138fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80138fc:	7ffb      	ldrb	r3, [r7, #31]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f040 80a9 	bne.w	8013a56 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801390a:	69bb      	ldr	r3, [r7, #24]
 801390c:	1c59      	adds	r1, r3, #1
 801390e:	61b9      	str	r1, [r7, #24]
 8013910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013914:	4413      	add	r3, r2
 8013916:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	f003 0301 	and.w	r3, r3, #1
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00d      	beq.n	801393e <put_fat+0x9e>
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	b25b      	sxtb	r3, r3
 8013928:	f003 030f 	and.w	r3, r3, #15
 801392c:	b25a      	sxtb	r2, r3
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	b2db      	uxtb	r3, r3
 8013932:	011b      	lsls	r3, r3, #4
 8013934:	b25b      	sxtb	r3, r3
 8013936:	4313      	orrs	r3, r2
 8013938:	b25b      	sxtb	r3, r3
 801393a:	b2db      	uxtb	r3, r3
 801393c:	e001      	b.n	8013942 <put_fat+0xa2>
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	b2db      	uxtb	r3, r3
 8013942:	697a      	ldr	r2, [r7, #20]
 8013944:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	2201      	movs	r2, #1
 801394a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	0a5b      	lsrs	r3, r3, #9
 8013954:	4413      	add	r3, r2
 8013956:	4619      	mov	r1, r3
 8013958:	68f8      	ldr	r0, [r7, #12]
 801395a:	f7ff fe41 	bl	80135e0 <move_window>
 801395e:	4603      	mov	r3, r0
 8013960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013962:	7ffb      	ldrb	r3, [r7, #31]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d178      	bne.n	8013a5a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801396e:	69bb      	ldr	r3, [r7, #24]
 8013970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013974:	4413      	add	r3, r2
 8013976:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	f003 0301 	and.w	r3, r3, #1
 801397e:	2b00      	cmp	r3, #0
 8013980:	d003      	beq.n	801398a <put_fat+0xea>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	091b      	lsrs	r3, r3, #4
 8013986:	b2db      	uxtb	r3, r3
 8013988:	e00e      	b.n	80139a8 <put_fat+0x108>
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	b25b      	sxtb	r3, r3
 8013990:	f023 030f 	bic.w	r3, r3, #15
 8013994:	b25a      	sxtb	r2, r3
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	0a1b      	lsrs	r3, r3, #8
 801399a:	b25b      	sxtb	r3, r3
 801399c:	f003 030f 	and.w	r3, r3, #15
 80139a0:	b25b      	sxtb	r3, r3
 80139a2:	4313      	orrs	r3, r2
 80139a4:	b25b      	sxtb	r3, r3
 80139a6:	b2db      	uxtb	r3, r3
 80139a8:	697a      	ldr	r2, [r7, #20]
 80139aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	2201      	movs	r2, #1
 80139b0:	70da      	strb	r2, [r3, #3]
			break;
 80139b2:	e057      	b.n	8013a64 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	0a1b      	lsrs	r3, r3, #8
 80139bc:	4413      	add	r3, r2
 80139be:	4619      	mov	r1, r3
 80139c0:	68f8      	ldr	r0, [r7, #12]
 80139c2:	f7ff fe0d 	bl	80135e0 <move_window>
 80139c6:	4603      	mov	r3, r0
 80139c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80139ca:	7ffb      	ldrb	r3, [r7, #31]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d146      	bne.n	8013a5e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80139de:	4413      	add	r3, r2
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	b292      	uxth	r2, r2
 80139e4:	4611      	mov	r1, r2
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7ff fb55 	bl	8013096 <st_word>
			fs->wflag = 1;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2201      	movs	r2, #1
 80139f0:	70da      	strb	r2, [r3, #3]
			break;
 80139f2:	e037      	b.n	8013a64 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80139f8:	68bb      	ldr	r3, [r7, #8]
 80139fa:	09db      	lsrs	r3, r3, #7
 80139fc:	4413      	add	r3, r2
 80139fe:	4619      	mov	r1, r3
 8013a00:	68f8      	ldr	r0, [r7, #12]
 8013a02:	f7ff fded 	bl	80135e0 <move_window>
 8013a06:	4603      	mov	r3, r0
 8013a08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a0a:	7ffb      	ldrb	r3, [r7, #31]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d128      	bne.n	8013a62 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	009b      	lsls	r3, r3, #2
 8013a20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013a24:	4413      	add	r3, r2
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fb12 	bl	8013050 <ld_dword>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013a32:	4323      	orrs	r3, r4
 8013a34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	009b      	lsls	r3, r3, #2
 8013a40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013a44:	4413      	add	r3, r2
 8013a46:	6879      	ldr	r1, [r7, #4]
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f7ff fb3f 	bl	80130cc <st_dword>
			fs->wflag = 1;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2201      	movs	r2, #1
 8013a52:	70da      	strb	r2, [r3, #3]
			break;
 8013a54:	e006      	b.n	8013a64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013a56:	bf00      	nop
 8013a58:	e004      	b.n	8013a64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013a5a:	bf00      	nop
 8013a5c:	e002      	b.n	8013a64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013a5e:	bf00      	nop
 8013a60:	e000      	b.n	8013a64 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013a62:	bf00      	nop
		}
	}
	return res;
 8013a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8013a66:	4618      	mov	r0, r3
 8013a68:	3724      	adds	r7, #36	; 0x24
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd90      	pop	{r4, r7, pc}

08013a6e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013a6e:	b580      	push	{r7, lr}
 8013a70:	b088      	sub	sp, #32
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	60f8      	str	r0, [r7, #12]
 8013a76:	60b9      	str	r1, [r7, #8]
 8013a78:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	d904      	bls.n	8013a94 <remove_chain+0x26>
 8013a8a:	69bb      	ldr	r3, [r7, #24]
 8013a8c:	699b      	ldr	r3, [r3, #24]
 8013a8e:	68ba      	ldr	r2, [r7, #8]
 8013a90:	429a      	cmp	r2, r3
 8013a92:	d301      	bcc.n	8013a98 <remove_chain+0x2a>
 8013a94:	2302      	movs	r3, #2
 8013a96:	e04b      	b.n	8013b30 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00c      	beq.n	8013ab8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	69b8      	ldr	r0, [r7, #24]
 8013aa6:	f7ff fefb 	bl	80138a0 <put_fat>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013aae:	7ffb      	ldrb	r3, [r7, #31]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <remove_chain+0x4a>
 8013ab4:	7ffb      	ldrb	r3, [r7, #31]
 8013ab6:	e03b      	b.n	8013b30 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013ab8:	68b9      	ldr	r1, [r7, #8]
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f7ff fe4b 	bl	8013756 <get_fat>
 8013ac0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d031      	beq.n	8013b2c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013ac8:	697b      	ldr	r3, [r7, #20]
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	d101      	bne.n	8013ad2 <remove_chain+0x64>
 8013ace:	2302      	movs	r3, #2
 8013ad0:	e02e      	b.n	8013b30 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013ad2:	697b      	ldr	r3, [r7, #20]
 8013ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad8:	d101      	bne.n	8013ade <remove_chain+0x70>
 8013ada:	2301      	movs	r3, #1
 8013adc:	e028      	b.n	8013b30 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013ade:	2200      	movs	r2, #0
 8013ae0:	68b9      	ldr	r1, [r7, #8]
 8013ae2:	69b8      	ldr	r0, [r7, #24]
 8013ae4:	f7ff fedc 	bl	80138a0 <put_fat>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013aec:	7ffb      	ldrb	r3, [r7, #31]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <remove_chain+0x88>
 8013af2:	7ffb      	ldrb	r3, [r7, #31]
 8013af4:	e01c      	b.n	8013b30 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	695a      	ldr	r2, [r3, #20]
 8013afa:	69bb      	ldr	r3, [r7, #24]
 8013afc:	699b      	ldr	r3, [r3, #24]
 8013afe:	3b02      	subs	r3, #2
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d20b      	bcs.n	8013b1c <remove_chain+0xae>
			fs->free_clst++;
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	695b      	ldr	r3, [r3, #20]
 8013b08:	1c5a      	adds	r2, r3, #1
 8013b0a:	69bb      	ldr	r3, [r7, #24]
 8013b0c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013b0e:	69bb      	ldr	r3, [r7, #24]
 8013b10:	791b      	ldrb	r3, [r3, #4]
 8013b12:	f043 0301 	orr.w	r3, r3, #1
 8013b16:	b2da      	uxtb	r2, r3
 8013b18:	69bb      	ldr	r3, [r7, #24]
 8013b1a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013b1c:	697b      	ldr	r3, [r7, #20]
 8013b1e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013b20:	69bb      	ldr	r3, [r7, #24]
 8013b22:	699b      	ldr	r3, [r3, #24]
 8013b24:	68ba      	ldr	r2, [r7, #8]
 8013b26:	429a      	cmp	r2, r3
 8013b28:	d3c6      	bcc.n	8013ab8 <remove_chain+0x4a>
 8013b2a:	e000      	b.n	8013b2e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013b2c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013b2e:	2300      	movs	r3, #0
}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3720      	adds	r7, #32
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b088      	sub	sp, #32
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d10d      	bne.n	8013b6a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013b4e:	693b      	ldr	r3, [r7, #16]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013b54:	69bb      	ldr	r3, [r7, #24]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d004      	beq.n	8013b64 <create_chain+0x2c>
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	699b      	ldr	r3, [r3, #24]
 8013b5e:	69ba      	ldr	r2, [r7, #24]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	d31b      	bcc.n	8013b9c <create_chain+0x64>
 8013b64:	2301      	movs	r3, #1
 8013b66:	61bb      	str	r3, [r7, #24]
 8013b68:	e018      	b.n	8013b9c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013b6a:	6839      	ldr	r1, [r7, #0]
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f7ff fdf2 	bl	8013756 <get_fat>
 8013b72:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	2b01      	cmp	r3, #1
 8013b78:	d801      	bhi.n	8013b7e <create_chain+0x46>
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	e070      	b.n	8013c60 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b84:	d101      	bne.n	8013b8a <create_chain+0x52>
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	e06a      	b.n	8013c60 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	699b      	ldr	r3, [r3, #24]
 8013b8e:	68fa      	ldr	r2, [r7, #12]
 8013b90:	429a      	cmp	r2, r3
 8013b92:	d201      	bcs.n	8013b98 <create_chain+0x60>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	e063      	b.n	8013c60 <create_chain+0x128>
		scl = clst;
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013ba0:	69fb      	ldr	r3, [r7, #28]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013ba6:	693b      	ldr	r3, [r7, #16]
 8013ba8:	699b      	ldr	r3, [r3, #24]
 8013baa:	69fa      	ldr	r2, [r7, #28]
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d307      	bcc.n	8013bc0 <create_chain+0x88>
				ncl = 2;
 8013bb0:	2302      	movs	r3, #2
 8013bb2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013bb4:	69fa      	ldr	r2, [r7, #28]
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	429a      	cmp	r2, r3
 8013bba:	d901      	bls.n	8013bc0 <create_chain+0x88>
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	e04f      	b.n	8013c60 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013bc0:	69f9      	ldr	r1, [r7, #28]
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f7ff fdc7 	bl	8013756 <get_fat>
 8013bc8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d00e      	beq.n	8013bee <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d003      	beq.n	8013bde <create_chain+0xa6>
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bdc:	d101      	bne.n	8013be2 <create_chain+0xaa>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	e03e      	b.n	8013c60 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013be2:	69fa      	ldr	r2, [r7, #28]
 8013be4:	69bb      	ldr	r3, [r7, #24]
 8013be6:	429a      	cmp	r2, r3
 8013be8:	d1da      	bne.n	8013ba0 <create_chain+0x68>
 8013bea:	2300      	movs	r3, #0
 8013bec:	e038      	b.n	8013c60 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013bee:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bf4:	69f9      	ldr	r1, [r7, #28]
 8013bf6:	6938      	ldr	r0, [r7, #16]
 8013bf8:	f7ff fe52 	bl	80138a0 <put_fat>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013c00:	7dfb      	ldrb	r3, [r7, #23]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d109      	bne.n	8013c1a <create_chain+0xe2>
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d006      	beq.n	8013c1a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013c0c:	69fa      	ldr	r2, [r7, #28]
 8013c0e:	6839      	ldr	r1, [r7, #0]
 8013c10:	6938      	ldr	r0, [r7, #16]
 8013c12:	f7ff fe45 	bl	80138a0 <put_fat>
 8013c16:	4603      	mov	r3, r0
 8013c18:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013c1a:	7dfb      	ldrb	r3, [r7, #23]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d116      	bne.n	8013c4e <create_chain+0x116>
		fs->last_clst = ncl;
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	69fa      	ldr	r2, [r7, #28]
 8013c24:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	695a      	ldr	r2, [r3, #20]
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	699b      	ldr	r3, [r3, #24]
 8013c2e:	3b02      	subs	r3, #2
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d804      	bhi.n	8013c3e <create_chain+0x106>
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	695b      	ldr	r3, [r3, #20]
 8013c38:	1e5a      	subs	r2, r3, #1
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	791b      	ldrb	r3, [r3, #4]
 8013c42:	f043 0301 	orr.w	r3, r3, #1
 8013c46:	b2da      	uxtb	r2, r3
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	711a      	strb	r2, [r3, #4]
 8013c4c:	e007      	b.n	8013c5e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013c4e:	7dfb      	ldrb	r3, [r7, #23]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d102      	bne.n	8013c5a <create_chain+0x122>
 8013c54:	f04f 33ff 	mov.w	r3, #4294967295
 8013c58:	e000      	b.n	8013c5c <create_chain+0x124>
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013c5e:	69fb      	ldr	r3, [r7, #28]
}
 8013c60:	4618      	mov	r0, r3
 8013c62:	3720      	adds	r7, #32
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bd80      	pop	{r7, pc}

08013c68 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b087      	sub	sp, #28
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
 8013c70:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c7c:	3304      	adds	r3, #4
 8013c7e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	0a5b      	lsrs	r3, r3, #9
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	8952      	ldrh	r2, [r2, #10]
 8013c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c8c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013c8e:	693b      	ldr	r3, [r7, #16]
 8013c90:	1d1a      	adds	r2, r3, #4
 8013c92:	613a      	str	r2, [r7, #16]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d101      	bne.n	8013ca2 <clmt_clust+0x3a>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	e010      	b.n	8013cc4 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013ca2:	697a      	ldr	r2, [r7, #20]
 8013ca4:	68bb      	ldr	r3, [r7, #8]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d307      	bcc.n	8013cba <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013caa:	697a      	ldr	r2, [r7, #20]
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	617b      	str	r3, [r7, #20]
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013cb8:	e7e9      	b.n	8013c8e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013cba:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	4413      	add	r3, r2
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	371c      	adds	r7, #28
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr

08013cd0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b086      	sub	sp, #24
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ce6:	d204      	bcs.n	8013cf2 <dir_sdi+0x22>
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	f003 031f 	and.w	r3, r3, #31
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d001      	beq.n	8013cf6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013cf2:	2302      	movs	r3, #2
 8013cf4:	e063      	b.n	8013dbe <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	689b      	ldr	r3, [r3, #8]
 8013d00:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013d02:	697b      	ldr	r3, [r7, #20]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d106      	bne.n	8013d16 <dir_sdi+0x46>
 8013d08:	693b      	ldr	r3, [r7, #16]
 8013d0a:	781b      	ldrb	r3, [r3, #0]
 8013d0c:	2b02      	cmp	r3, #2
 8013d0e:	d902      	bls.n	8013d16 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013d10:	693b      	ldr	r3, [r7, #16]
 8013d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d14:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d10c      	bne.n	8013d36 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013d1c:	683b      	ldr	r3, [r7, #0]
 8013d1e:	095b      	lsrs	r3, r3, #5
 8013d20:	693a      	ldr	r2, [r7, #16]
 8013d22:	8912      	ldrh	r2, [r2, #8]
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d301      	bcc.n	8013d2c <dir_sdi+0x5c>
 8013d28:	2302      	movs	r3, #2
 8013d2a:	e048      	b.n	8013dbe <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013d2c:	693b      	ldr	r3, [r7, #16]
 8013d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	61da      	str	r2, [r3, #28]
 8013d34:	e029      	b.n	8013d8a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	895b      	ldrh	r3, [r3, #10]
 8013d3a:	025b      	lsls	r3, r3, #9
 8013d3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d3e:	e019      	b.n	8013d74 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6979      	ldr	r1, [r7, #20]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7ff fd06 	bl	8013756 <get_fat>
 8013d4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d52:	d101      	bne.n	8013d58 <dir_sdi+0x88>
 8013d54:	2301      	movs	r3, #1
 8013d56:	e032      	b.n	8013dbe <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	2b01      	cmp	r3, #1
 8013d5c:	d904      	bls.n	8013d68 <dir_sdi+0x98>
 8013d5e:	693b      	ldr	r3, [r7, #16]
 8013d60:	699b      	ldr	r3, [r3, #24]
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d301      	bcc.n	8013d6c <dir_sdi+0x9c>
 8013d68:	2302      	movs	r3, #2
 8013d6a:	e028      	b.n	8013dbe <dir_sdi+0xee>
			ofs -= csz;
 8013d6c:	683a      	ldr	r2, [r7, #0]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	1ad3      	subs	r3, r2, r3
 8013d72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013d74:	683a      	ldr	r2, [r7, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d2e1      	bcs.n	8013d40 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013d7c:	6979      	ldr	r1, [r7, #20]
 8013d7e:	6938      	ldr	r0, [r7, #16]
 8013d80:	f7ff fcca 	bl	8013718 <clust2sect>
 8013d84:	4602      	mov	r2, r0
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	697a      	ldr	r2, [r7, #20]
 8013d8e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	69db      	ldr	r3, [r3, #28]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d101      	bne.n	8013d9c <dir_sdi+0xcc>
 8013d98:	2302      	movs	r3, #2
 8013d9a:	e010      	b.n	8013dbe <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	69da      	ldr	r2, [r3, #28]
 8013da0:	683b      	ldr	r3, [r7, #0]
 8013da2:	0a5b      	lsrs	r3, r3, #9
 8013da4:	441a      	add	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013daa:	693b      	ldr	r3, [r7, #16]
 8013dac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013db0:	683b      	ldr	r3, [r7, #0]
 8013db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013db6:	441a      	add	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013dbc:	2300      	movs	r3, #0
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3718      	adds	r7, #24
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}

08013dc6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013dc6:	b580      	push	{r7, lr}
 8013dc8:	b086      	sub	sp, #24
 8013dca:	af00      	add	r7, sp, #0
 8013dcc:	6078      	str	r0, [r7, #4]
 8013dce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	695b      	ldr	r3, [r3, #20]
 8013dda:	3320      	adds	r3, #32
 8013ddc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	69db      	ldr	r3, [r3, #28]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d003      	beq.n	8013dee <dir_next+0x28>
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013dec:	d301      	bcc.n	8013df2 <dir_next+0x2c>
 8013dee:	2304      	movs	r3, #4
 8013df0:	e0aa      	b.n	8013f48 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	f040 8098 	bne.w	8013f2e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	69db      	ldr	r3, [r3, #28]
 8013e02:	1c5a      	adds	r2, r3, #1
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	699b      	ldr	r3, [r3, #24]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d10b      	bne.n	8013e28 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013e10:	68bb      	ldr	r3, [r7, #8]
 8013e12:	095b      	lsrs	r3, r3, #5
 8013e14:	68fa      	ldr	r2, [r7, #12]
 8013e16:	8912      	ldrh	r2, [r2, #8]
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	f0c0 8088 	bcc.w	8013f2e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	2200      	movs	r2, #0
 8013e22:	61da      	str	r2, [r3, #28]
 8013e24:	2304      	movs	r3, #4
 8013e26:	e08f      	b.n	8013f48 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013e28:	68bb      	ldr	r3, [r7, #8]
 8013e2a:	0a5b      	lsrs	r3, r3, #9
 8013e2c:	68fa      	ldr	r2, [r7, #12]
 8013e2e:	8952      	ldrh	r2, [r2, #10]
 8013e30:	3a01      	subs	r2, #1
 8013e32:	4013      	ands	r3, r2
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d17a      	bne.n	8013f2e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	699b      	ldr	r3, [r3, #24]
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4610      	mov	r0, r2
 8013e42:	f7ff fc88 	bl	8013756 <get_fat>
 8013e46:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013e48:	697b      	ldr	r3, [r7, #20]
 8013e4a:	2b01      	cmp	r3, #1
 8013e4c:	d801      	bhi.n	8013e52 <dir_next+0x8c>
 8013e4e:	2302      	movs	r3, #2
 8013e50:	e07a      	b.n	8013f48 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e58:	d101      	bne.n	8013e5e <dir_next+0x98>
 8013e5a:	2301      	movs	r3, #1
 8013e5c:	e074      	b.n	8013f48 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	699b      	ldr	r3, [r3, #24]
 8013e62:	697a      	ldr	r2, [r7, #20]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d358      	bcc.n	8013f1a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d104      	bne.n	8013e78 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	61da      	str	r2, [r3, #28]
 8013e74:	2304      	movs	r3, #4
 8013e76:	e067      	b.n	8013f48 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	699b      	ldr	r3, [r3, #24]
 8013e7e:	4619      	mov	r1, r3
 8013e80:	4610      	mov	r0, r2
 8013e82:	f7ff fe59 	bl	8013b38 <create_chain>
 8013e86:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013e88:	697b      	ldr	r3, [r7, #20]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d101      	bne.n	8013e92 <dir_next+0xcc>
 8013e8e:	2307      	movs	r3, #7
 8013e90:	e05a      	b.n	8013f48 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d101      	bne.n	8013e9c <dir_next+0xd6>
 8013e98:	2302      	movs	r3, #2
 8013e9a:	e055      	b.n	8013f48 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ea2:	d101      	bne.n	8013ea8 <dir_next+0xe2>
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e04f      	b.n	8013f48 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013ea8:	68f8      	ldr	r0, [r7, #12]
 8013eaa:	f7ff fb55 	bl	8013558 <sync_window>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d001      	beq.n	8013eb8 <dir_next+0xf2>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e047      	b.n	8013f48 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	3334      	adds	r3, #52	; 0x34
 8013ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	f7ff f94f 	bl	8013166 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ec8:	2300      	movs	r3, #0
 8013eca:	613b      	str	r3, [r7, #16]
 8013ecc:	6979      	ldr	r1, [r7, #20]
 8013ece:	68f8      	ldr	r0, [r7, #12]
 8013ed0:	f7ff fc22 	bl	8013718 <clust2sect>
 8013ed4:	4602      	mov	r2, r0
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8013eda:	e012      	b.n	8013f02 <dir_next+0x13c>
						fs->wflag = 1;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f7ff fb38 	bl	8013558 <sync_window>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <dir_next+0x12c>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	e02a      	b.n	8013f48 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	613b      	str	r3, [r7, #16]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013efc:	1c5a      	adds	r2, r3, #1
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	631a      	str	r2, [r3, #48]	; 0x30
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	895b      	ldrh	r3, [r3, #10]
 8013f06:	461a      	mov	r2, r3
 8013f08:	693b      	ldr	r3, [r7, #16]
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d3e6      	bcc.n	8013edc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f12:	693b      	ldr	r3, [r7, #16]
 8013f14:	1ad2      	subs	r2, r2, r3
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	697a      	ldr	r2, [r7, #20]
 8013f1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013f20:	6979      	ldr	r1, [r7, #20]
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f7ff fbf8 	bl	8013718 <clust2sect>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f40:	441a      	add	r2, r3
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013f46:	2300      	movs	r3, #0
}
 8013f48:	4618      	mov	r0, r3
 8013f4a:	3718      	adds	r7, #24
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013f60:	2100      	movs	r1, #0
 8013f62:	6878      	ldr	r0, [r7, #4]
 8013f64:	f7ff feb4 	bl	8013cd0 <dir_sdi>
 8013f68:	4603      	mov	r3, r0
 8013f6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013f6c:	7dfb      	ldrb	r3, [r7, #23]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d12b      	bne.n	8013fca <dir_alloc+0x7a>
		n = 0;
 8013f72:	2300      	movs	r3, #0
 8013f74:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	69db      	ldr	r3, [r3, #28]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f7ff fb2f 	bl	80135e0 <move_window>
 8013f82:	4603      	mov	r3, r0
 8013f84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013f86:	7dfb      	ldrb	r3, [r7, #23]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d11d      	bne.n	8013fc8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6a1b      	ldr	r3, [r3, #32]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2be5      	cmp	r3, #229	; 0xe5
 8013f94:	d004      	beq.n	8013fa0 <dir_alloc+0x50>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6a1b      	ldr	r3, [r3, #32]
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d107      	bne.n	8013fb0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	613b      	str	r3, [r7, #16]
 8013fa6:	693a      	ldr	r2, [r7, #16]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d102      	bne.n	8013fb4 <dir_alloc+0x64>
 8013fae:	e00c      	b.n	8013fca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013fb4:	2101      	movs	r1, #1
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7ff ff05 	bl	8013dc6 <dir_next>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013fc0:	7dfb      	ldrb	r3, [r7, #23]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d0d7      	beq.n	8013f76 <dir_alloc+0x26>
 8013fc6:	e000      	b.n	8013fca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013fc8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013fca:	7dfb      	ldrb	r3, [r7, #23]
 8013fcc:	2b04      	cmp	r3, #4
 8013fce:	d101      	bne.n	8013fd4 <dir_alloc+0x84>
 8013fd0:	2307      	movs	r3, #7
 8013fd2:	75fb      	strb	r3, [r7, #23]
	return res;
 8013fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3718      	adds	r7, #24
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}

08013fde <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b084      	sub	sp, #16
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	331a      	adds	r3, #26
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7ff f817 	bl	8013020 <ld_word>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	2b03      	cmp	r3, #3
 8013ffc:	d109      	bne.n	8014012 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013ffe:	683b      	ldr	r3, [r7, #0]
 8014000:	3314      	adds	r3, #20
 8014002:	4618      	mov	r0, r3
 8014004:	f7ff f80c 	bl	8013020 <ld_word>
 8014008:	4603      	mov	r3, r0
 801400a:	041b      	lsls	r3, r3, #16
 801400c:	68fa      	ldr	r2, [r7, #12]
 801400e:	4313      	orrs	r3, r2
 8014010:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014012:	68fb      	ldr	r3, [r7, #12]
}
 8014014:	4618      	mov	r0, r3
 8014016:	3710      	adds	r7, #16
 8014018:	46bd      	mov	sp, r7
 801401a:	bd80      	pop	{r7, pc}

0801401c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b084      	sub	sp, #16
 8014020:	af00      	add	r7, sp, #0
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	331a      	adds	r3, #26
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	b292      	uxth	r2, r2
 8014030:	4611      	mov	r1, r2
 8014032:	4618      	mov	r0, r3
 8014034:	f7ff f82f 	bl	8013096 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	2b03      	cmp	r3, #3
 801403e:	d109      	bne.n	8014054 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	f103 0214 	add.w	r2, r3, #20
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	0c1b      	lsrs	r3, r3, #16
 801404a:	b29b      	uxth	r3, r3
 801404c:	4619      	mov	r1, r3
 801404e:	4610      	mov	r0, r2
 8014050:	f7ff f821 	bl	8013096 <st_word>
	}
}
 8014054:	bf00      	nop
 8014056:	3710      	adds	r7, #16
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b086      	sub	sp, #24
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8014066:	2304      	movs	r3, #4
 8014068:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8014070:	e03c      	b.n	80140ec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	69db      	ldr	r3, [r3, #28]
 8014076:	4619      	mov	r1, r3
 8014078:	6938      	ldr	r0, [r7, #16]
 801407a:	f7ff fab1 	bl	80135e0 <move_window>
 801407e:	4603      	mov	r3, r0
 8014080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8014082:	7dfb      	ldrb	r3, [r7, #23]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d136      	bne.n	80140f6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6a1b      	ldr	r3, [r3, #32]
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8014090:	7bfb      	ldrb	r3, [r7, #15]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d102      	bne.n	801409c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8014096:	2304      	movs	r3, #4
 8014098:	75fb      	strb	r3, [r7, #23]
 801409a:	e031      	b.n	8014100 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6a1b      	ldr	r3, [r3, #32]
 80140a0:	330b      	adds	r3, #11
 80140a2:	781b      	ldrb	r3, [r3, #0]
 80140a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80140a8:	73bb      	strb	r3, [r7, #14]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	7bba      	ldrb	r2, [r7, #14]
 80140ae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80140b0:	7bfb      	ldrb	r3, [r7, #15]
 80140b2:	2be5      	cmp	r3, #229	; 0xe5
 80140b4:	d011      	beq.n	80140da <dir_read+0x7e>
 80140b6:	7bfb      	ldrb	r3, [r7, #15]
 80140b8:	2b2e      	cmp	r3, #46	; 0x2e
 80140ba:	d00e      	beq.n	80140da <dir_read+0x7e>
 80140bc:	7bbb      	ldrb	r3, [r7, #14]
 80140be:	2b0f      	cmp	r3, #15
 80140c0:	d00b      	beq.n	80140da <dir_read+0x7e>
 80140c2:	7bbb      	ldrb	r3, [r7, #14]
 80140c4:	f023 0320 	bic.w	r3, r3, #32
 80140c8:	2b08      	cmp	r3, #8
 80140ca:	bf0c      	ite	eq
 80140cc:	2301      	moveq	r3, #1
 80140ce:	2300      	movne	r3, #0
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	461a      	mov	r2, r3
 80140d4:	683b      	ldr	r3, [r7, #0]
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d00f      	beq.n	80140fa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80140da:	2100      	movs	r1, #0
 80140dc:	6878      	ldr	r0, [r7, #4]
 80140de:	f7ff fe72 	bl	8013dc6 <dir_next>
 80140e2:	4603      	mov	r3, r0
 80140e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80140e6:	7dfb      	ldrb	r3, [r7, #23]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d108      	bne.n	80140fe <dir_read+0xa2>
	while (dp->sect) {
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	69db      	ldr	r3, [r3, #28]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d1be      	bne.n	8014072 <dir_read+0x16>
 80140f4:	e004      	b.n	8014100 <dir_read+0xa4>
		if (res != FR_OK) break;
 80140f6:	bf00      	nop
 80140f8:	e002      	b.n	8014100 <dir_read+0xa4>
				break;
 80140fa:	bf00      	nop
 80140fc:	e000      	b.n	8014100 <dir_read+0xa4>
		if (res != FR_OK) break;
 80140fe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d002      	beq.n	801410c <dir_read+0xb0>
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	2200      	movs	r2, #0
 801410a:	61da      	str	r2, [r3, #28]
	return res;
 801410c:	7dfb      	ldrb	r3, [r7, #23]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3718      	adds	r7, #24
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b086      	sub	sp, #24
 801411a:	af00      	add	r7, sp, #0
 801411c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8014124:	2100      	movs	r1, #0
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f7ff fdd2 	bl	8013cd0 <dir_sdi>
 801412c:	4603      	mov	r3, r0
 801412e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8014130:	7dfb      	ldrb	r3, [r7, #23]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d001      	beq.n	801413a <dir_find+0x24>
 8014136:	7dfb      	ldrb	r3, [r7, #23]
 8014138:	e03e      	b.n	80141b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	69db      	ldr	r3, [r3, #28]
 801413e:	4619      	mov	r1, r3
 8014140:	6938      	ldr	r0, [r7, #16]
 8014142:	f7ff fa4d 	bl	80135e0 <move_window>
 8014146:	4603      	mov	r3, r0
 8014148:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801414a:	7dfb      	ldrb	r3, [r7, #23]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d12f      	bne.n	80141b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6a1b      	ldr	r3, [r3, #32]
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8014158:	7bfb      	ldrb	r3, [r7, #15]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d102      	bne.n	8014164 <dir_find+0x4e>
 801415e:	2304      	movs	r3, #4
 8014160:	75fb      	strb	r3, [r7, #23]
 8014162:	e028      	b.n	80141b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6a1b      	ldr	r3, [r3, #32]
 8014168:	330b      	adds	r3, #11
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014170:	b2da      	uxtb	r2, r3
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6a1b      	ldr	r3, [r3, #32]
 801417a:	330b      	adds	r3, #11
 801417c:	781b      	ldrb	r3, [r3, #0]
 801417e:	f003 0308 	and.w	r3, r3, #8
 8014182:	2b00      	cmp	r3, #0
 8014184:	d10a      	bne.n	801419c <dir_find+0x86>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6a18      	ldr	r0, [r3, #32]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	3324      	adds	r3, #36	; 0x24
 801418e:	220b      	movs	r2, #11
 8014190:	4619      	mov	r1, r3
 8014192:	f7ff f802 	bl	801319a <mem_cmp>
 8014196:	4603      	mov	r3, r0
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00b      	beq.n	80141b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801419c:	2100      	movs	r1, #0
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f7ff fe11 	bl	8013dc6 <dir_next>
 80141a4:	4603      	mov	r3, r0
 80141a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80141a8:	7dfb      	ldrb	r3, [r7, #23]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d0c5      	beq.n	801413a <dir_find+0x24>
 80141ae:	e002      	b.n	80141b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80141b0:	bf00      	nop
 80141b2:	e000      	b.n	80141b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80141b4:	bf00      	nop

	return res;
 80141b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3718      	adds	r7, #24
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b084      	sub	sp, #16
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80141ce:	2101      	movs	r1, #1
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	f7ff febd 	bl	8013f50 <dir_alloc>
 80141d6:	4603      	mov	r3, r0
 80141d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80141da:	7bfb      	ldrb	r3, [r7, #15]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d11c      	bne.n	801421a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	69db      	ldr	r3, [r3, #28]
 80141e4:	4619      	mov	r1, r3
 80141e6:	68b8      	ldr	r0, [r7, #8]
 80141e8:	f7ff f9fa 	bl	80135e0 <move_window>
 80141ec:	4603      	mov	r3, r0
 80141ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80141f0:	7bfb      	ldrb	r3, [r7, #15]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d111      	bne.n	801421a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6a1b      	ldr	r3, [r3, #32]
 80141fa:	2220      	movs	r2, #32
 80141fc:	2100      	movs	r1, #0
 80141fe:	4618      	mov	r0, r3
 8014200:	f7fe ffb1 	bl	8013166 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6a18      	ldr	r0, [r3, #32]
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	3324      	adds	r3, #36	; 0x24
 801420c:	220b      	movs	r2, #11
 801420e:	4619      	mov	r1, r3
 8014210:	f7fe ff88 	bl	8013124 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	2201      	movs	r2, #1
 8014218:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801421a:	7bfb      	ldrb	r3, [r7, #15]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801422e:	683b      	ldr	r3, [r7, #0]
 8014230:	2200      	movs	r2, #0
 8014232:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	69db      	ldr	r3, [r3, #28]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d04e      	beq.n	80142da <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	613b      	str	r3, [r7, #16]
 8014240:	693b      	ldr	r3, [r7, #16]
 8014242:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8014244:	e021      	b.n	801428a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6a1a      	ldr	r2, [r3, #32]
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	1c59      	adds	r1, r3, #1
 801424e:	6179      	str	r1, [r7, #20]
 8014250:	4413      	add	r3, r2
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8014256:	7bfb      	ldrb	r3, [r7, #15]
 8014258:	2b20      	cmp	r3, #32
 801425a:	d100      	bne.n	801425e <get_fileinfo+0x3a>
 801425c:	e015      	b.n	801428a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801425e:	7bfb      	ldrb	r3, [r7, #15]
 8014260:	2b05      	cmp	r3, #5
 8014262:	d101      	bne.n	8014268 <get_fileinfo+0x44>
 8014264:	23e5      	movs	r3, #229	; 0xe5
 8014266:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	2b09      	cmp	r3, #9
 801426c:	d106      	bne.n	801427c <get_fileinfo+0x58>
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	1c5a      	adds	r2, r3, #1
 8014272:	613a      	str	r2, [r7, #16]
 8014274:	683a      	ldr	r2, [r7, #0]
 8014276:	4413      	add	r3, r2
 8014278:	222e      	movs	r2, #46	; 0x2e
 801427a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	1c5a      	adds	r2, r3, #1
 8014280:	613a      	str	r2, [r7, #16]
 8014282:	683a      	ldr	r2, [r7, #0]
 8014284:	4413      	add	r3, r2
 8014286:	7bfa      	ldrb	r2, [r7, #15]
 8014288:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	2b0a      	cmp	r3, #10
 801428e:	d9da      	bls.n	8014246 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014290:	683a      	ldr	r2, [r7, #0]
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	4413      	add	r3, r2
 8014296:	3309      	adds	r3, #9
 8014298:	2200      	movs	r2, #0
 801429a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	6a1b      	ldr	r3, [r3, #32]
 80142a0:	7ada      	ldrb	r2, [r3, #11]
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6a1b      	ldr	r3, [r3, #32]
 80142aa:	331c      	adds	r3, #28
 80142ac:	4618      	mov	r0, r3
 80142ae:	f7fe fecf 	bl	8013050 <ld_dword>
 80142b2:	4602      	mov	r2, r0
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6a1b      	ldr	r3, [r3, #32]
 80142bc:	3316      	adds	r3, #22
 80142be:	4618      	mov	r0, r3
 80142c0:	f7fe fec6 	bl	8013050 <ld_dword>
 80142c4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	b29a      	uxth	r2, r3
 80142ca:	683b      	ldr	r3, [r7, #0]
 80142cc:	80da      	strh	r2, [r3, #6]
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	0c1b      	lsrs	r3, r3, #16
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	809a      	strh	r2, [r3, #4]
 80142d8:	e000      	b.n	80142dc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80142da:	bf00      	nop
}
 80142dc:	3718      	adds	r7, #24
 80142de:	46bd      	mov	sp, r7
 80142e0:	bd80      	pop	{r7, pc}
	...

080142e4 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b085      	sub	sp, #20
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	1c59      	adds	r1, r3, #1
 80142f2:	687a      	ldr	r2, [r7, #4]
 80142f4:	6011      	str	r1, [r2, #0]
 80142f6:	781b      	ldrb	r3, [r3, #0]
 80142f8:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80142fa:	89fb      	ldrh	r3, [r7, #14]
 80142fc:	2b60      	cmp	r3, #96	; 0x60
 80142fe:	d905      	bls.n	801430c <get_achar+0x28>
 8014300:	89fb      	ldrh	r3, [r7, #14]
 8014302:	2b7a      	cmp	r3, #122	; 0x7a
 8014304:	d802      	bhi.n	801430c <get_achar+0x28>
 8014306:	89fb      	ldrh	r3, [r7, #14]
 8014308:	3b20      	subs	r3, #32
 801430a:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801430c:	89fb      	ldrh	r3, [r7, #14]
 801430e:	2b7f      	cmp	r3, #127	; 0x7f
 8014310:	d904      	bls.n	801431c <get_achar+0x38>
 8014312:	89fb      	ldrh	r3, [r7, #14]
 8014314:	3b80      	subs	r3, #128	; 0x80
 8014316:	4a05      	ldr	r2, [pc, #20]	; (801432c <get_achar+0x48>)
 8014318:	5cd3      	ldrb	r3, [r2, r3]
 801431a:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 801431c:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 801431e:	4618      	mov	r0, r3
 8014320:	3714      	adds	r7, #20
 8014322:	46bd      	mov	sp, r7
 8014324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014328:	4770      	bx	lr
 801432a:	bf00      	nop
 801432c:	0801da98 	.word	0x0801da98

08014330 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08a      	sub	sp, #40	; 0x28
 8014334:	af00      	add	r7, sp, #0
 8014336:	60f8      	str	r0, [r7, #12]
 8014338:	60b9      	str	r1, [r7, #8]
 801433a:	607a      	str	r2, [r7, #4]
 801433c:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801433e:	e009      	b.n	8014354 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8014340:	f107 0308 	add.w	r3, r7, #8
 8014344:	4618      	mov	r0, r3
 8014346:	f7ff ffcd 	bl	80142e4 <get_achar>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d101      	bne.n	8014354 <pattern_matching+0x24>
 8014350:	2300      	movs	r3, #0
 8014352:	e064      	b.n	801441e <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	1e5a      	subs	r2, r3, #1
 8014358:	607a      	str	r2, [r7, #4]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1f0      	bne.n	8014340 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d104      	bne.n	8014370 <pattern_matching+0x40>
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d001      	beq.n	8014370 <pattern_matching+0x40>
 801436c:	2301      	movs	r3, #1
 801436e:	e056      	b.n	801441e <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	617b      	str	r3, [r7, #20]
 8014374:	68bb      	ldr	r3, [r7, #8]
 8014376:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	2b3f      	cmp	r3, #63	; 0x3f
 801437e:	d003      	beq.n	8014388 <pattern_matching+0x58>
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	2b2a      	cmp	r3, #42	; 0x2a
 8014386:	d126      	bne.n	80143d6 <pattern_matching+0xa6>
				nm = nx = 0;
 8014388:	2300      	movs	r3, #0
 801438a:	61fb      	str	r3, [r7, #28]
 801438c:	69fb      	ldr	r3, [r7, #28]
 801438e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	1c5a      	adds	r2, r3, #1
 8014394:	617a      	str	r2, [r7, #20]
 8014396:	781b      	ldrb	r3, [r3, #0]
 8014398:	2b3f      	cmp	r3, #63	; 0x3f
 801439a:	d103      	bne.n	80143a4 <pattern_matching+0x74>
 801439c:	6a3b      	ldr	r3, [r7, #32]
 801439e:	3301      	adds	r3, #1
 80143a0:	623b      	str	r3, [r7, #32]
 80143a2:	e001      	b.n	80143a8 <pattern_matching+0x78>
 80143a4:	2301      	movs	r3, #1
 80143a6:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	781b      	ldrb	r3, [r3, #0]
 80143ac:	2b3f      	cmp	r3, #63	; 0x3f
 80143ae:	d0ef      	beq.n	8014390 <pattern_matching+0x60>
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	781b      	ldrb	r3, [r3, #0]
 80143b4:	2b2a      	cmp	r3, #42	; 0x2a
 80143b6:	d0eb      	beq.n	8014390 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80143b8:	6978      	ldr	r0, [r7, #20]
 80143ba:	6939      	ldr	r1, [r7, #16]
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	6a3a      	ldr	r2, [r7, #32]
 80143c0:	f7ff ffb6 	bl	8014330 <pattern_matching>
 80143c4:	4603      	mov	r3, r0
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d001      	beq.n	80143ce <pattern_matching+0x9e>
 80143ca:	2301      	movs	r3, #1
 80143cc:	e027      	b.n	801441e <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80143d4:	e017      	b.n	8014406 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80143d6:	f107 0314 	add.w	r3, r7, #20
 80143da:	4618      	mov	r0, r3
 80143dc:	f7ff ff82 	bl	80142e4 <get_achar>
 80143e0:	4603      	mov	r3, r0
 80143e2:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80143e4:	f107 0310 	add.w	r3, r7, #16
 80143e8:	4618      	mov	r0, r3
 80143ea:	f7ff ff7b 	bl	80142e4 <get_achar>
 80143ee:	4603      	mov	r3, r0
 80143f0:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80143f2:	8b7a      	ldrh	r2, [r7, #26]
 80143f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d104      	bne.n	8014404 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80143fa:	8b7b      	ldrh	r3, [r7, #26]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d1bb      	bne.n	8014378 <pattern_matching+0x48>
 8014400:	2301      	movs	r3, #1
 8014402:	e00c      	b.n	801441e <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8014404:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 8014406:	f107 0308 	add.w	r3, r7, #8
 801440a:	4618      	mov	r0, r3
 801440c:	f7ff ff6a 	bl	80142e4 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d002      	beq.n	801441c <pattern_matching+0xec>
 8014416:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1a9      	bne.n	8014370 <pattern_matching+0x40>

	return 0;
 801441c:	2300      	movs	r3, #0
}
 801441e:	4618      	mov	r0, r3
 8014420:	3728      	adds	r7, #40	; 0x28
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
	...

08014428 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b088      	sub	sp, #32
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	60fb      	str	r3, [r7, #12]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	3324      	adds	r3, #36	; 0x24
 801443c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801443e:	220b      	movs	r2, #11
 8014440:	2120      	movs	r1, #32
 8014442:	68b8      	ldr	r0, [r7, #8]
 8014444:	f7fe fe8f 	bl	8013166 <mem_set>
	si = i = 0; ni = 8;
 8014448:	2300      	movs	r3, #0
 801444a:	613b      	str	r3, [r7, #16]
 801444c:	693b      	ldr	r3, [r7, #16]
 801444e:	617b      	str	r3, [r7, #20]
 8014450:	2308      	movs	r3, #8
 8014452:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	1c5a      	adds	r2, r3, #1
 8014458:	617a      	str	r2, [r7, #20]
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	4413      	add	r3, r2
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014462:	7ffb      	ldrb	r3, [r7, #31]
 8014464:	2b20      	cmp	r3, #32
 8014466:	d94e      	bls.n	8014506 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014468:	7ffb      	ldrb	r3, [r7, #31]
 801446a:	2b2f      	cmp	r3, #47	; 0x2f
 801446c:	d006      	beq.n	801447c <create_name+0x54>
 801446e:	7ffb      	ldrb	r3, [r7, #31]
 8014470:	2b5c      	cmp	r3, #92	; 0x5c
 8014472:	d110      	bne.n	8014496 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014474:	e002      	b.n	801447c <create_name+0x54>
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	3301      	adds	r3, #1
 801447a:	617b      	str	r3, [r7, #20]
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	4413      	add	r3, r2
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	2b2f      	cmp	r3, #47	; 0x2f
 8014486:	d0f6      	beq.n	8014476 <create_name+0x4e>
 8014488:	68fa      	ldr	r2, [r7, #12]
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	4413      	add	r3, r2
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	2b5c      	cmp	r3, #92	; 0x5c
 8014492:	d0f0      	beq.n	8014476 <create_name+0x4e>
			break;
 8014494:	e038      	b.n	8014508 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014496:	7ffb      	ldrb	r3, [r7, #31]
 8014498:	2b2e      	cmp	r3, #46	; 0x2e
 801449a:	d003      	beq.n	80144a4 <create_name+0x7c>
 801449c:	693a      	ldr	r2, [r7, #16]
 801449e:	69bb      	ldr	r3, [r7, #24]
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d30c      	bcc.n	80144be <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80144a4:	69bb      	ldr	r3, [r7, #24]
 80144a6:	2b0b      	cmp	r3, #11
 80144a8:	d002      	beq.n	80144b0 <create_name+0x88>
 80144aa:	7ffb      	ldrb	r3, [r7, #31]
 80144ac:	2b2e      	cmp	r3, #46	; 0x2e
 80144ae:	d001      	beq.n	80144b4 <create_name+0x8c>
 80144b0:	2306      	movs	r3, #6
 80144b2:	e044      	b.n	801453e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80144b4:	2308      	movs	r3, #8
 80144b6:	613b      	str	r3, [r7, #16]
 80144b8:	230b      	movs	r3, #11
 80144ba:	61bb      	str	r3, [r7, #24]
			continue;
 80144bc:	e022      	b.n	8014504 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80144be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	da04      	bge.n	80144d0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80144c6:	7ffb      	ldrb	r3, [r7, #31]
 80144c8:	3b80      	subs	r3, #128	; 0x80
 80144ca:	4a1f      	ldr	r2, [pc, #124]	; (8014548 <create_name+0x120>)
 80144cc:	5cd3      	ldrb	r3, [r2, r3]
 80144ce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80144d0:	7ffb      	ldrb	r3, [r7, #31]
 80144d2:	4619      	mov	r1, r3
 80144d4:	481d      	ldr	r0, [pc, #116]	; (801454c <create_name+0x124>)
 80144d6:	f7fe fe87 	bl	80131e8 <chk_chr>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d001      	beq.n	80144e4 <create_name+0xbc>
 80144e0:	2306      	movs	r3, #6
 80144e2:	e02c      	b.n	801453e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80144e4:	7ffb      	ldrb	r3, [r7, #31]
 80144e6:	2b60      	cmp	r3, #96	; 0x60
 80144e8:	d905      	bls.n	80144f6 <create_name+0xce>
 80144ea:	7ffb      	ldrb	r3, [r7, #31]
 80144ec:	2b7a      	cmp	r3, #122	; 0x7a
 80144ee:	d802      	bhi.n	80144f6 <create_name+0xce>
 80144f0:	7ffb      	ldrb	r3, [r7, #31]
 80144f2:	3b20      	subs	r3, #32
 80144f4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	1c5a      	adds	r2, r3, #1
 80144fa:	613a      	str	r2, [r7, #16]
 80144fc:	68ba      	ldr	r2, [r7, #8]
 80144fe:	4413      	add	r3, r2
 8014500:	7ffa      	ldrb	r2, [r7, #31]
 8014502:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014504:	e7a6      	b.n	8014454 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014506:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8014508:	68fa      	ldr	r2, [r7, #12]
 801450a:	697b      	ldr	r3, [r7, #20]
 801450c:	441a      	add	r2, r3
 801450e:	683b      	ldr	r3, [r7, #0]
 8014510:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014512:	693b      	ldr	r3, [r7, #16]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d101      	bne.n	801451c <create_name+0xf4>
 8014518:	2306      	movs	r3, #6
 801451a:	e010      	b.n	801453e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	781b      	ldrb	r3, [r3, #0]
 8014520:	2be5      	cmp	r3, #229	; 0xe5
 8014522:	d102      	bne.n	801452a <create_name+0x102>
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	2205      	movs	r2, #5
 8014528:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801452a:	7ffb      	ldrb	r3, [r7, #31]
 801452c:	2b20      	cmp	r3, #32
 801452e:	d801      	bhi.n	8014534 <create_name+0x10c>
 8014530:	2204      	movs	r2, #4
 8014532:	e000      	b.n	8014536 <create_name+0x10e>
 8014534:	2200      	movs	r2, #0
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	330b      	adds	r3, #11
 801453a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801453c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801453e:	4618      	mov	r0, r3
 8014540:	3720      	adds	r7, #32
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	0801da98 	.word	0x0801da98
 801454c:	0801d858 	.word	0x0801d858

08014550 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b086      	sub	sp, #24
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014564:	e002      	b.n	801456c <follow_path+0x1c>
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	3301      	adds	r3, #1
 801456a:	603b      	str	r3, [r7, #0]
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	781b      	ldrb	r3, [r3, #0]
 8014570:	2b2f      	cmp	r3, #47	; 0x2f
 8014572:	d0f8      	beq.n	8014566 <follow_path+0x16>
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2b5c      	cmp	r3, #92	; 0x5c
 801457a:	d0f4      	beq.n	8014566 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801457c:	693b      	ldr	r3, [r7, #16]
 801457e:	2200      	movs	r2, #0
 8014580:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	781b      	ldrb	r3, [r3, #0]
 8014586:	2b1f      	cmp	r3, #31
 8014588:	d80a      	bhi.n	80145a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2280      	movs	r2, #128	; 0x80
 801458e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014592:	2100      	movs	r1, #0
 8014594:	6878      	ldr	r0, [r7, #4]
 8014596:	f7ff fb9b 	bl	8013cd0 <dir_sdi>
 801459a:	4603      	mov	r3, r0
 801459c:	75fb      	strb	r3, [r7, #23]
 801459e:	e043      	b.n	8014628 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80145a0:	463b      	mov	r3, r7
 80145a2:	4619      	mov	r1, r3
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f7ff ff3f 	bl	8014428 <create_name>
 80145aa:	4603      	mov	r3, r0
 80145ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80145ae:	7dfb      	ldrb	r3, [r7, #23]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d134      	bne.n	801461e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80145b4:	6878      	ldr	r0, [r7, #4]
 80145b6:	f7ff fdae 	bl	8014116 <dir_find>
 80145ba:	4603      	mov	r3, r0
 80145bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80145c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80145c6:	7dfb      	ldrb	r3, [r7, #23]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d00a      	beq.n	80145e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80145cc:	7dfb      	ldrb	r3, [r7, #23]
 80145ce:	2b04      	cmp	r3, #4
 80145d0:	d127      	bne.n	8014622 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80145d2:	7afb      	ldrb	r3, [r7, #11]
 80145d4:	f003 0304 	and.w	r3, r3, #4
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d122      	bne.n	8014622 <follow_path+0xd2>
 80145dc:	2305      	movs	r3, #5
 80145de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80145e0:	e01f      	b.n	8014622 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80145e2:	7afb      	ldrb	r3, [r7, #11]
 80145e4:	f003 0304 	and.w	r3, r3, #4
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d11c      	bne.n	8014626 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	799b      	ldrb	r3, [r3, #6]
 80145f0:	f003 0310 	and.w	r3, r3, #16
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80145f8:	2305      	movs	r3, #5
 80145fa:	75fb      	strb	r3, [r7, #23]
 80145fc:	e014      	b.n	8014628 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	695b      	ldr	r3, [r3, #20]
 8014608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801460c:	4413      	add	r3, r2
 801460e:	4619      	mov	r1, r3
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f7ff fce4 	bl	8013fde <ld_clust>
 8014616:	4602      	mov	r2, r0
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801461c:	e7c0      	b.n	80145a0 <follow_path+0x50>
			if (res != FR_OK) break;
 801461e:	bf00      	nop
 8014620:	e002      	b.n	8014628 <follow_path+0xd8>
				break;
 8014622:	bf00      	nop
 8014624:	e000      	b.n	8014628 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014626:	bf00      	nop
			}
		}
	}

	return res;
 8014628:	7dfb      	ldrb	r3, [r7, #23]
}
 801462a:	4618      	mov	r0, r3
 801462c:	3718      	adds	r7, #24
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014632:	b480      	push	{r7}
 8014634:	b087      	sub	sp, #28
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801463a:	f04f 33ff 	mov.w	r3, #4294967295
 801463e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d031      	beq.n	80146ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	617b      	str	r3, [r7, #20]
 801464e:	e002      	b.n	8014656 <get_ldnumber+0x24>
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	3301      	adds	r3, #1
 8014654:	617b      	str	r3, [r7, #20]
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	781b      	ldrb	r3, [r3, #0]
 801465a:	2b20      	cmp	r3, #32
 801465c:	d903      	bls.n	8014666 <get_ldnumber+0x34>
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	781b      	ldrb	r3, [r3, #0]
 8014662:	2b3a      	cmp	r3, #58	; 0x3a
 8014664:	d1f4      	bne.n	8014650 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014666:	697b      	ldr	r3, [r7, #20]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	2b3a      	cmp	r3, #58	; 0x3a
 801466c:	d11c      	bne.n	80146a8 <get_ldnumber+0x76>
			tp = *path;
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	1c5a      	adds	r2, r3, #1
 8014678:	60fa      	str	r2, [r7, #12]
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	3b30      	subs	r3, #48	; 0x30
 801467e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	2b09      	cmp	r3, #9
 8014684:	d80e      	bhi.n	80146a4 <get_ldnumber+0x72>
 8014686:	68fa      	ldr	r2, [r7, #12]
 8014688:	697b      	ldr	r3, [r7, #20]
 801468a:	429a      	cmp	r2, r3
 801468c:	d10a      	bne.n	80146a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d107      	bne.n	80146a4 <get_ldnumber+0x72>
					vol = (int)i;
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	3301      	adds	r3, #1
 801469c:	617b      	str	r3, [r7, #20]
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	697a      	ldr	r2, [r7, #20]
 80146a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80146a4:	693b      	ldr	r3, [r7, #16]
 80146a6:	e002      	b.n	80146ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80146a8:	2300      	movs	r3, #0
 80146aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80146ac:	693b      	ldr	r3, [r7, #16]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	371c      	adds	r7, #28
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr
	...

080146bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2200      	movs	r2, #0
 80146ca:	70da      	strb	r2, [r3, #3]
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	f04f 32ff 	mov.w	r2, #4294967295
 80146d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80146d4:	6839      	ldr	r1, [r7, #0]
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f7fe ff82 	bl	80135e0 <move_window>
 80146dc:	4603      	mov	r3, r0
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d001      	beq.n	80146e6 <check_fs+0x2a>
 80146e2:	2304      	movs	r3, #4
 80146e4:	e038      	b.n	8014758 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	3334      	adds	r3, #52	; 0x34
 80146ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fe fc96 	bl	8013020 <ld_word>
 80146f4:	4603      	mov	r3, r0
 80146f6:	461a      	mov	r2, r3
 80146f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d001      	beq.n	8014704 <check_fs+0x48>
 8014700:	2303      	movs	r3, #3
 8014702:	e029      	b.n	8014758 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801470a:	2be9      	cmp	r3, #233	; 0xe9
 801470c:	d009      	beq.n	8014722 <check_fs+0x66>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014714:	2beb      	cmp	r3, #235	; 0xeb
 8014716:	d11e      	bne.n	8014756 <check_fs+0x9a>
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801471e:	2b90      	cmp	r3, #144	; 0x90
 8014720:	d119      	bne.n	8014756 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	3334      	adds	r3, #52	; 0x34
 8014726:	3336      	adds	r3, #54	; 0x36
 8014728:	4618      	mov	r0, r3
 801472a:	f7fe fc91 	bl	8013050 <ld_dword>
 801472e:	4603      	mov	r3, r0
 8014730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014734:	4a0a      	ldr	r2, [pc, #40]	; (8014760 <check_fs+0xa4>)
 8014736:	4293      	cmp	r3, r2
 8014738:	d101      	bne.n	801473e <check_fs+0x82>
 801473a:	2300      	movs	r3, #0
 801473c:	e00c      	b.n	8014758 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	3334      	adds	r3, #52	; 0x34
 8014742:	3352      	adds	r3, #82	; 0x52
 8014744:	4618      	mov	r0, r3
 8014746:	f7fe fc83 	bl	8013050 <ld_dword>
 801474a:	4602      	mov	r2, r0
 801474c:	4b05      	ldr	r3, [pc, #20]	; (8014764 <check_fs+0xa8>)
 801474e:	429a      	cmp	r2, r3
 8014750:	d101      	bne.n	8014756 <check_fs+0x9a>
 8014752:	2300      	movs	r3, #0
 8014754:	e000      	b.n	8014758 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014756:	2302      	movs	r3, #2
}
 8014758:	4618      	mov	r0, r3
 801475a:	3708      	adds	r7, #8
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	00544146 	.word	0x00544146
 8014764:	33544146 	.word	0x33544146

08014768 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b096      	sub	sp, #88	; 0x58
 801476c:	af00      	add	r7, sp, #0
 801476e:	60f8      	str	r0, [r7, #12]
 8014770:	60b9      	str	r1, [r7, #8]
 8014772:	4613      	mov	r3, r2
 8014774:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	2200      	movs	r2, #0
 801477a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	f7ff ff58 	bl	8014632 <get_ldnumber>
 8014782:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014786:	2b00      	cmp	r3, #0
 8014788:	da01      	bge.n	801478e <find_volume+0x26>
 801478a:	230b      	movs	r3, #11
 801478c:	e236      	b.n	8014bfc <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801478e:	4aac      	ldr	r2, [pc, #688]	; (8014a40 <find_volume+0x2d8>)
 8014790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014796:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801479a:	2b00      	cmp	r3, #0
 801479c:	d101      	bne.n	80147a2 <find_volume+0x3a>
 801479e:	230c      	movs	r3, #12
 80147a0:	e22c      	b.n	8014bfc <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 80147a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147a4:	f7fe fd3b 	bl	801321e <lock_fs>
 80147a8:	4603      	mov	r3, r0
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d101      	bne.n	80147b2 <find_volume+0x4a>
 80147ae:	230f      	movs	r3, #15
 80147b0:	e224      	b.n	8014bfc <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80147b8:	79fb      	ldrb	r3, [r7, #7]
 80147ba:	f023 0301 	bic.w	r3, r3, #1
 80147be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80147c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d01a      	beq.n	80147fe <find_volume+0x96>
		stat = disk_status(fs->drv);
 80147c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ca:	785b      	ldrb	r3, [r3, #1]
 80147cc:	4618      	mov	r0, r3
 80147ce:	f7fe fb89 	bl	8012ee4 <disk_status>
 80147d2:	4603      	mov	r3, r0
 80147d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80147d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147dc:	f003 0301 	and.w	r3, r3, #1
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d10c      	bne.n	80147fe <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80147e4:	79fb      	ldrb	r3, [r7, #7]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d007      	beq.n	80147fa <find_volume+0x92>
 80147ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147ee:	f003 0304 	and.w	r3, r3, #4
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d001      	beq.n	80147fa <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80147f6:	230a      	movs	r3, #10
 80147f8:	e200      	b.n	8014bfc <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80147fa:	2300      	movs	r3, #0
 80147fc:	e1fe      	b.n	8014bfc <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80147fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014800:	2200      	movs	r2, #0
 8014802:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014806:	b2da      	uxtb	r2, r3
 8014808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480e:	785b      	ldrb	r3, [r3, #1]
 8014810:	4618      	mov	r0, r3
 8014812:	f7fe fb81 	bl	8012f18 <disk_initialize>
 8014816:	4603      	mov	r3, r0
 8014818:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801481c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014820:	f003 0301 	and.w	r3, r3, #1
 8014824:	2b00      	cmp	r3, #0
 8014826:	d001      	beq.n	801482c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014828:	2303      	movs	r3, #3
 801482a:	e1e7      	b.n	8014bfc <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801482c:	79fb      	ldrb	r3, [r7, #7]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d007      	beq.n	8014842 <find_volume+0xda>
 8014832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014836:	f003 0304 	and.w	r3, r3, #4
 801483a:	2b00      	cmp	r3, #0
 801483c:	d001      	beq.n	8014842 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801483e:	230a      	movs	r3, #10
 8014840:	e1dc      	b.n	8014bfc <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014842:	2300      	movs	r3, #0
 8014844:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014848:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801484a:	f7ff ff37 	bl	80146bc <check_fs>
 801484e:	4603      	mov	r3, r0
 8014850:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014858:	2b02      	cmp	r3, #2
 801485a:	d14b      	bne.n	80148f4 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801485c:	2300      	movs	r3, #0
 801485e:	643b      	str	r3, [r7, #64]	; 0x40
 8014860:	e01f      	b.n	80148a2 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014864:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801486a:	011b      	lsls	r3, r3, #4
 801486c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014870:	4413      	add	r3, r2
 8014872:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014876:	3304      	adds	r3, #4
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d006      	beq.n	801488c <find_volume+0x124>
 801487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014880:	3308      	adds	r3, #8
 8014882:	4618      	mov	r0, r3
 8014884:	f7fe fbe4 	bl	8013050 <ld_dword>
 8014888:	4602      	mov	r2, r0
 801488a:	e000      	b.n	801488e <find_volume+0x126>
 801488c:	2200      	movs	r2, #0
 801488e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014890:	009b      	lsls	r3, r3, #2
 8014892:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014896:	440b      	add	r3, r1
 8014898:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801489c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801489e:	3301      	adds	r3, #1
 80148a0:	643b      	str	r3, [r7, #64]	; 0x40
 80148a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148a4:	2b03      	cmp	r3, #3
 80148a6:	d9dc      	bls.n	8014862 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80148a8:	2300      	movs	r3, #0
 80148aa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80148ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d002      	beq.n	80148b8 <find_volume+0x150>
 80148b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148b4:	3b01      	subs	r3, #1
 80148b6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80148b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ba:	009b      	lsls	r3, r3, #2
 80148bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80148c0:	4413      	add	r3, r2
 80148c2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80148c6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80148c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d005      	beq.n	80148da <find_volume+0x172>
 80148ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80148d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148d2:	f7ff fef3 	bl	80146bc <check_fs>
 80148d6:	4603      	mov	r3, r0
 80148d8:	e000      	b.n	80148dc <find_volume+0x174>
 80148da:	2303      	movs	r3, #3
 80148dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80148e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148e4:	2b01      	cmp	r3, #1
 80148e6:	d905      	bls.n	80148f4 <find_volume+0x18c>
 80148e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148ea:	3301      	adds	r3, #1
 80148ec:	643b      	str	r3, [r7, #64]	; 0x40
 80148ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148f0:	2b03      	cmp	r3, #3
 80148f2:	d9e1      	bls.n	80148b8 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80148f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148f8:	2b04      	cmp	r3, #4
 80148fa:	d101      	bne.n	8014900 <find_volume+0x198>
 80148fc:	2301      	movs	r3, #1
 80148fe:	e17d      	b.n	8014bfc <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014900:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014904:	2b01      	cmp	r3, #1
 8014906:	d901      	bls.n	801490c <find_volume+0x1a4>
 8014908:	230d      	movs	r3, #13
 801490a:	e177      	b.n	8014bfc <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490e:	3334      	adds	r3, #52	; 0x34
 8014910:	330b      	adds	r3, #11
 8014912:	4618      	mov	r0, r3
 8014914:	f7fe fb84 	bl	8013020 <ld_word>
 8014918:	4603      	mov	r3, r0
 801491a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801491e:	d001      	beq.n	8014924 <find_volume+0x1bc>
 8014920:	230d      	movs	r3, #13
 8014922:	e16b      	b.n	8014bfc <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8014924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014926:	3334      	adds	r3, #52	; 0x34
 8014928:	3316      	adds	r3, #22
 801492a:	4618      	mov	r0, r3
 801492c:	f7fe fb78 	bl	8013020 <ld_word>
 8014930:	4603      	mov	r3, r0
 8014932:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8014934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014936:	2b00      	cmp	r3, #0
 8014938:	d106      	bne.n	8014948 <find_volume+0x1e0>
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	3334      	adds	r3, #52	; 0x34
 801493e:	3324      	adds	r3, #36	; 0x24
 8014940:	4618      	mov	r0, r3
 8014942:	f7fe fb85 	bl	8013050 <ld_dword>
 8014946:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8014948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801494a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801494c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014950:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014956:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8014958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495a:	789b      	ldrb	r3, [r3, #2]
 801495c:	2b01      	cmp	r3, #1
 801495e:	d005      	beq.n	801496c <find_volume+0x204>
 8014960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014962:	789b      	ldrb	r3, [r3, #2]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d001      	beq.n	801496c <find_volume+0x204>
 8014968:	230d      	movs	r3, #13
 801496a:	e147      	b.n	8014bfc <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496e:	789b      	ldrb	r3, [r3, #2]
 8014970:	461a      	mov	r2, r3
 8014972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014974:	fb02 f303 	mul.w	r3, r2, r3
 8014978:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014980:	b29a      	uxth	r2, r3
 8014982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014984:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014988:	895b      	ldrh	r3, [r3, #10]
 801498a:	2b00      	cmp	r3, #0
 801498c:	d008      	beq.n	80149a0 <find_volume+0x238>
 801498e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014990:	895b      	ldrh	r3, [r3, #10]
 8014992:	461a      	mov	r2, r3
 8014994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014996:	895b      	ldrh	r3, [r3, #10]
 8014998:	3b01      	subs	r3, #1
 801499a:	4013      	ands	r3, r2
 801499c:	2b00      	cmp	r3, #0
 801499e:	d001      	beq.n	80149a4 <find_volume+0x23c>
 80149a0:	230d      	movs	r3, #13
 80149a2:	e12b      	b.n	8014bfc <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	3334      	adds	r3, #52	; 0x34
 80149a8:	3311      	adds	r3, #17
 80149aa:	4618      	mov	r0, r3
 80149ac:	f7fe fb38 	bl	8013020 <ld_word>
 80149b0:	4603      	mov	r3, r0
 80149b2:	461a      	mov	r2, r3
 80149b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80149b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149ba:	891b      	ldrh	r3, [r3, #8]
 80149bc:	f003 030f 	and.w	r3, r3, #15
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d001      	beq.n	80149ca <find_volume+0x262>
 80149c6:	230d      	movs	r3, #13
 80149c8:	e118      	b.n	8014bfc <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80149ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149cc:	3334      	adds	r3, #52	; 0x34
 80149ce:	3313      	adds	r3, #19
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fe fb25 	bl	8013020 <ld_word>
 80149d6:	4603      	mov	r3, r0
 80149d8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80149da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d106      	bne.n	80149ee <find_volume+0x286>
 80149e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149e2:	3334      	adds	r3, #52	; 0x34
 80149e4:	3320      	adds	r3, #32
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7fe fb32 	bl	8013050 <ld_dword>
 80149ec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80149ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f0:	3334      	adds	r3, #52	; 0x34
 80149f2:	330e      	adds	r3, #14
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7fe fb13 	bl	8013020 <ld_word>
 80149fa:	4603      	mov	r3, r0
 80149fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80149fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <find_volume+0x2a0>
 8014a04:	230d      	movs	r3, #13
 8014a06:	e0f9      	b.n	8014bfc <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8014a08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a0c:	4413      	add	r3, r2
 8014a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a10:	8912      	ldrh	r2, [r2, #8]
 8014a12:	0912      	lsrs	r2, r2, #4
 8014a14:	b292      	uxth	r2, r2
 8014a16:	4413      	add	r3, r2
 8014a18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d201      	bcs.n	8014a26 <find_volume+0x2be>
 8014a22:	230d      	movs	r3, #13
 8014a24:	e0ea      	b.n	8014bfc <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014a2e:	8952      	ldrh	r2, [r2, #10]
 8014a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8014a34:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d103      	bne.n	8014a44 <find_volume+0x2dc>
 8014a3c:	230d      	movs	r3, #13
 8014a3e:	e0dd      	b.n	8014bfc <find_volume+0x494>
 8014a40:	20000340 	.word	0x20000340
		fmt = FS_FAT32;
 8014a44:	2303      	movs	r3, #3
 8014a46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d802      	bhi.n	8014a5a <find_volume+0x2f2>
 8014a54:	2302      	movs	r3, #2
 8014a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d802      	bhi.n	8014a6a <find_volume+0x302>
 8014a64:	2301      	movs	r3, #1
 8014a66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6c:	1c9a      	adds	r2, r3, #2
 8014a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a70:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a76:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014a78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a7c:	441a      	add	r2, r3
 8014a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a80:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014a82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a86:	441a      	add	r2, r3
 8014a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014a90:	2b03      	cmp	r3, #3
 8014a92:	d11e      	bne.n	8014ad2 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a96:	3334      	adds	r3, #52	; 0x34
 8014a98:	332a      	adds	r3, #42	; 0x2a
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fe fac0 	bl	8013020 <ld_word>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d001      	beq.n	8014aaa <find_volume+0x342>
 8014aa6:	230d      	movs	r3, #13
 8014aa8:	e0a8      	b.n	8014bfc <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aac:	891b      	ldrh	r3, [r3, #8]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d001      	beq.n	8014ab6 <find_volume+0x34e>
 8014ab2:	230d      	movs	r3, #13
 8014ab4:	e0a2      	b.n	8014bfc <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab8:	3334      	adds	r3, #52	; 0x34
 8014aba:	332c      	adds	r3, #44	; 0x2c
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7fe fac7 	bl	8013050 <ld_dword>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aca:	699b      	ldr	r3, [r3, #24]
 8014acc:	009b      	lsls	r3, r3, #2
 8014ace:	647b      	str	r3, [r7, #68]	; 0x44
 8014ad0:	e01f      	b.n	8014b12 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad4:	891b      	ldrh	r3, [r3, #8]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d101      	bne.n	8014ade <find_volume+0x376>
 8014ada:	230d      	movs	r3, #13
 8014adc:	e08e      	b.n	8014bfc <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ae4:	441a      	add	r2, r3
 8014ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ae8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8014aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014aee:	2b02      	cmp	r3, #2
 8014af0:	d103      	bne.n	8014afa <find_volume+0x392>
 8014af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af4:	699b      	ldr	r3, [r3, #24]
 8014af6:	005b      	lsls	r3, r3, #1
 8014af8:	e00a      	b.n	8014b10 <find_volume+0x3a8>
 8014afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014afc:	699a      	ldr	r2, [r3, #24]
 8014afe:	4613      	mov	r3, r2
 8014b00:	005b      	lsls	r3, r3, #1
 8014b02:	4413      	add	r3, r2
 8014b04:	085a      	lsrs	r2, r3, #1
 8014b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b08:	699b      	ldr	r3, [r3, #24]
 8014b0a:	f003 0301 	and.w	r3, r3, #1
 8014b0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014b10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b14:	69da      	ldr	r2, [r3, #28]
 8014b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8014b1c:	0a5b      	lsrs	r3, r3, #9
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d201      	bcs.n	8014b26 <find_volume+0x3be>
 8014b22:	230d      	movs	r3, #13
 8014b24:	e06a      	b.n	8014bfc <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b28:	f04f 32ff 	mov.w	r2, #4294967295
 8014b2c:	615a      	str	r2, [r3, #20]
 8014b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b30:	695a      	ldr	r2, [r3, #20]
 8014b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b34:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8014b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b38:	2280      	movs	r2, #128	; 0x80
 8014b3a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014b40:	2b03      	cmp	r3, #3
 8014b42:	d149      	bne.n	8014bd8 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b46:	3334      	adds	r3, #52	; 0x34
 8014b48:	3330      	adds	r3, #48	; 0x30
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7fe fa68 	bl	8013020 <ld_word>
 8014b50:	4603      	mov	r3, r0
 8014b52:	2b01      	cmp	r3, #1
 8014b54:	d140      	bne.n	8014bd8 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014b56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b58:	3301      	adds	r3, #1
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014b5e:	f7fe fd3f 	bl	80135e0 <move_window>
 8014b62:	4603      	mov	r3, r0
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d137      	bne.n	8014bd8 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b70:	3334      	adds	r3, #52	; 0x34
 8014b72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fe fa52 	bl	8013020 <ld_word>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	461a      	mov	r2, r3
 8014b80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d127      	bne.n	8014bd8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8a:	3334      	adds	r3, #52	; 0x34
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7fe fa5f 	bl	8013050 <ld_dword>
 8014b92:	4602      	mov	r2, r0
 8014b94:	4b1b      	ldr	r3, [pc, #108]	; (8014c04 <find_volume+0x49c>)
 8014b96:	429a      	cmp	r2, r3
 8014b98:	d11e      	bne.n	8014bd8 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b9c:	3334      	adds	r3, #52	; 0x34
 8014b9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fe fa54 	bl	8013050 <ld_dword>
 8014ba8:	4602      	mov	r2, r0
 8014baa:	4b17      	ldr	r3, [pc, #92]	; (8014c08 <find_volume+0x4a0>)
 8014bac:	429a      	cmp	r2, r3
 8014bae:	d113      	bne.n	8014bd8 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb2:	3334      	adds	r3, #52	; 0x34
 8014bb4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014bb8:	4618      	mov	r0, r3
 8014bba:	f7fe fa49 	bl	8013050 <ld_dword>
 8014bbe:	4602      	mov	r2, r0
 8014bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc6:	3334      	adds	r3, #52	; 0x34
 8014bc8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7fe fa3f 	bl	8013050 <ld_dword>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014bde:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014be0:	4b0a      	ldr	r3, [pc, #40]	; (8014c0c <find_volume+0x4a4>)
 8014be2:	881b      	ldrh	r3, [r3, #0]
 8014be4:	3301      	adds	r3, #1
 8014be6:	b29a      	uxth	r2, r3
 8014be8:	4b08      	ldr	r3, [pc, #32]	; (8014c0c <find_volume+0x4a4>)
 8014bea:	801a      	strh	r2, [r3, #0]
 8014bec:	4b07      	ldr	r3, [pc, #28]	; (8014c0c <find_volume+0x4a4>)
 8014bee:	881a      	ldrh	r2, [r3, #0]
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014bf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bf6:	f7fe fc8b 	bl	8013510 <clear_lock>
#endif
	return FR_OK;
 8014bfa:	2300      	movs	r3, #0
}
 8014bfc:	4618      	mov	r0, r3
 8014bfe:	3758      	adds	r7, #88	; 0x58
 8014c00:	46bd      	mov	sp, r7
 8014c02:	bd80      	pop	{r7, pc}
 8014c04:	41615252 	.word	0x41615252
 8014c08:	61417272 	.word	0x61417272
 8014c0c:	20000344 	.word	0x20000344

08014c10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014c1a:	2309      	movs	r3, #9
 8014c1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d02e      	beq.n	8014c82 <validate+0x72>
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d02a      	beq.n	8014c82 <validate+0x72>
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d025      	beq.n	8014c82 <validate+0x72>
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	889a      	ldrh	r2, [r3, #4]
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	88db      	ldrh	r3, [r3, #6]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d11e      	bne.n	8014c82 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4618      	mov	r0, r3
 8014c4a:	f7fe fae8 	bl	801321e <lock_fs>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d014      	beq.n	8014c7e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	785b      	ldrb	r3, [r3, #1]
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fe f942 	bl	8012ee4 <disk_status>
 8014c60:	4603      	mov	r3, r0
 8014c62:	f003 0301 	and.w	r3, r3, #1
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d102      	bne.n	8014c70 <validate+0x60>
				res = FR_OK;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	73fb      	strb	r3, [r7, #15]
 8014c6e:	e008      	b.n	8014c82 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	2100      	movs	r1, #0
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fe fae7 	bl	801324a <unlock_fs>
 8014c7c:	e001      	b.n	8014c82 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014c7e:	230f      	movs	r3, #15
 8014c80:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014c82:	7bfb      	ldrb	r3, [r7, #15]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d102      	bne.n	8014c8e <validate+0x7e>
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	e000      	b.n	8014c90 <validate+0x80>
 8014c8e:	2300      	movs	r3, #0
 8014c90:	683a      	ldr	r2, [r7, #0]
 8014c92:	6013      	str	r3, [r2, #0]
	return res;
 8014c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3710      	adds	r7, #16
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
	...

08014ca0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b088      	sub	sp, #32
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	60f8      	str	r0, [r7, #12]
 8014ca8:	60b9      	str	r1, [r7, #8]
 8014caa:	4613      	mov	r3, r2
 8014cac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014cb2:	f107 0310 	add.w	r3, r7, #16
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7ff fcbb 	bl	8014632 <get_ldnumber>
 8014cbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da01      	bge.n	8014cc8 <f_mount+0x28>
 8014cc4:	230b      	movs	r3, #11
 8014cc6:	e048      	b.n	8014d5a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014cc8:	4a26      	ldr	r2, [pc, #152]	; (8014d64 <f_mount+0xc4>)
 8014cca:	69fb      	ldr	r3, [r7, #28]
 8014ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014cd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d00f      	beq.n	8014cf8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014cd8:	69b8      	ldr	r0, [r7, #24]
 8014cda:	f7fe fc19 	bl	8013510 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014cde:	69bb      	ldr	r3, [r7, #24]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f001 f858 	bl	8015d98 <ff_del_syncobj>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d101      	bne.n	8014cf2 <f_mount+0x52>
 8014cee:	2302      	movs	r3, #2
 8014cf0:	e033      	b.n	8014d5a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d00f      	beq.n	8014d1e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2200      	movs	r2, #0
 8014d02:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	b2da      	uxtb	r2, r3
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	330c      	adds	r3, #12
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	4610      	mov	r0, r2
 8014d10:	f001 f827 	bl	8015d62 <ff_cre_syncobj>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d101      	bne.n	8014d1e <f_mount+0x7e>
 8014d1a:	2302      	movs	r3, #2
 8014d1c:	e01d      	b.n	8014d5a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	4910      	ldr	r1, [pc, #64]	; (8014d64 <f_mount+0xc4>)
 8014d22:	69fb      	ldr	r3, [r7, #28]
 8014d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d002      	beq.n	8014d34 <f_mount+0x94>
 8014d2e:	79fb      	ldrb	r3, [r7, #7]
 8014d30:	2b01      	cmp	r3, #1
 8014d32:	d001      	beq.n	8014d38 <f_mount+0x98>
 8014d34:	2300      	movs	r3, #0
 8014d36:	e010      	b.n	8014d5a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014d38:	f107 010c 	add.w	r1, r7, #12
 8014d3c:	f107 0308 	add.w	r3, r7, #8
 8014d40:	2200      	movs	r2, #0
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7ff fd10 	bl	8014768 <find_volume>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	7dfa      	ldrb	r2, [r7, #23]
 8014d50:	4611      	mov	r1, r2
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fe fa79 	bl	801324a <unlock_fs>
 8014d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3720      	adds	r7, #32
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	20000340 	.word	0x20000340

08014d68 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	b09a      	sub	sp, #104	; 0x68
 8014d6c:	af00      	add	r7, sp, #0
 8014d6e:	60f8      	str	r0, [r7, #12]
 8014d70:	60b9      	str	r1, [r7, #8]
 8014d72:	4613      	mov	r3, r2
 8014d74:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d101      	bne.n	8014d80 <f_open+0x18>
 8014d7c:	2309      	movs	r3, #9
 8014d7e:	e1b4      	b.n	80150ea <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014d80:	79fb      	ldrb	r3, [r7, #7]
 8014d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014d86:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014d88:	79fa      	ldrb	r2, [r7, #7]
 8014d8a:	f107 0114 	add.w	r1, r7, #20
 8014d8e:	f107 0308 	add.w	r3, r7, #8
 8014d92:	4618      	mov	r0, r3
 8014d94:	f7ff fce8 	bl	8014768 <find_volume>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014d9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	f040 8191 	bne.w	80150ca <f_open+0x362>
		dj.obj.fs = fs;
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014dac:	68ba      	ldr	r2, [r7, #8]
 8014dae:	f107 0318 	add.w	r3, r7, #24
 8014db2:	4611      	mov	r1, r2
 8014db4:	4618      	mov	r0, r3
 8014db6:	f7ff fbcb 	bl	8014550 <follow_path>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014dc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d11a      	bne.n	8014dfe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014dcc:	b25b      	sxtb	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	da03      	bge.n	8014dda <f_open+0x72>
				res = FR_INVALID_NAME;
 8014dd2:	2306      	movs	r3, #6
 8014dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014dd8:	e011      	b.n	8014dfe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014dda:	79fb      	ldrb	r3, [r7, #7]
 8014ddc:	f023 0301 	bic.w	r3, r3, #1
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	bf14      	ite	ne
 8014de4:	2301      	movne	r3, #1
 8014de6:	2300      	moveq	r3, #0
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	461a      	mov	r2, r3
 8014dec:	f107 0318 	add.w	r3, r7, #24
 8014df0:	4611      	mov	r1, r2
 8014df2:	4618      	mov	r0, r3
 8014df4:	f7fe fa44 	bl	8013280 <chk_lock>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014dfe:	79fb      	ldrb	r3, [r7, #7]
 8014e00:	f003 031c 	and.w	r3, r3, #28
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d07f      	beq.n	8014f08 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014e08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d017      	beq.n	8014e40 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e14:	2b04      	cmp	r3, #4
 8014e16:	d10e      	bne.n	8014e36 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014e18:	f7fe fa8e 	bl	8013338 <enq_lock>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d006      	beq.n	8014e30 <f_open+0xc8>
 8014e22:	f107 0318 	add.w	r3, r7, #24
 8014e26:	4618      	mov	r0, r3
 8014e28:	f7ff f9ca 	bl	80141c0 <dir_register>
 8014e2c:	4603      	mov	r3, r0
 8014e2e:	e000      	b.n	8014e32 <f_open+0xca>
 8014e30:	2312      	movs	r3, #18
 8014e32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014e36:	79fb      	ldrb	r3, [r7, #7]
 8014e38:	f043 0308 	orr.w	r3, r3, #8
 8014e3c:	71fb      	strb	r3, [r7, #7]
 8014e3e:	e010      	b.n	8014e62 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014e40:	7fbb      	ldrb	r3, [r7, #30]
 8014e42:	f003 0311 	and.w	r3, r3, #17
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d003      	beq.n	8014e52 <f_open+0xea>
					res = FR_DENIED;
 8014e4a:	2307      	movs	r3, #7
 8014e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014e50:	e007      	b.n	8014e62 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014e52:	79fb      	ldrb	r3, [r7, #7]
 8014e54:	f003 0304 	and.w	r3, r3, #4
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d002      	beq.n	8014e62 <f_open+0xfa>
 8014e5c:	2308      	movs	r3, #8
 8014e5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d168      	bne.n	8014f3c <f_open+0x1d4>
 8014e6a:	79fb      	ldrb	r3, [r7, #7]
 8014e6c:	f003 0308 	and.w	r3, r3, #8
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d063      	beq.n	8014f3c <f_open+0x1d4>
				dw = GET_FATTIME();
 8014e74:	f7fc f9c8 	bl	8011208 <get_fattime>
 8014e78:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7c:	330e      	adds	r3, #14
 8014e7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fe f923 	bl	80130cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e88:	3316      	adds	r3, #22
 8014e8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7fe f91d 	bl	80130cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e94:	330b      	adds	r3, #11
 8014e96:	2220      	movs	r2, #32
 8014e98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e9e:	4611      	mov	r1, r2
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7ff f89c 	bl	8013fde <ld_clust>
 8014ea6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014ea8:	697b      	ldr	r3, [r7, #20]
 8014eaa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014eac:	2200      	movs	r2, #0
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7ff f8b4 	bl	801401c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eb6:	331c      	adds	r3, #28
 8014eb8:	2100      	movs	r1, #0
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7fe f906 	bl	80130cc <st_dword>
					fs->wflag = 1;
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	2201      	movs	r2, #1
 8014ec4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d037      	beq.n	8014f3c <f_open+0x1d4>
						dw = fs->winsect;
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ed0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014ed2:	f107 0318 	add.w	r3, r7, #24
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014eda:	4618      	mov	r0, r3
 8014edc:	f7fe fdc7 	bl	8013a6e <remove_chain>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014ee6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d126      	bne.n	8014f3c <f_open+0x1d4>
							res = move_window(fs, dw);
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fe fb74 	bl	80135e0 <move_window>
 8014ef8:	4603      	mov	r3, r0
 8014efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014f02:	3a01      	subs	r2, #1
 8014f04:	611a      	str	r2, [r3, #16]
 8014f06:	e019      	b.n	8014f3c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014f08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d115      	bne.n	8014f3c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014f10:	7fbb      	ldrb	r3, [r7, #30]
 8014f12:	f003 0310 	and.w	r3, r3, #16
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d003      	beq.n	8014f22 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014f1a:	2304      	movs	r3, #4
 8014f1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014f20:	e00c      	b.n	8014f3c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014f22:	79fb      	ldrb	r3, [r7, #7]
 8014f24:	f003 0302 	and.w	r3, r3, #2
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d007      	beq.n	8014f3c <f_open+0x1d4>
 8014f2c:	7fbb      	ldrb	r3, [r7, #30]
 8014f2e:	f003 0301 	and.w	r3, r3, #1
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d002      	beq.n	8014f3c <f_open+0x1d4>
						res = FR_DENIED;
 8014f36:	2307      	movs	r3, #7
 8014f38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014f3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d128      	bne.n	8014f96 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014f44:	79fb      	ldrb	r3, [r7, #7]
 8014f46:	f003 0308 	and.w	r3, r3, #8
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d003      	beq.n	8014f56 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014f56:	697b      	ldr	r3, [r7, #20]
 8014f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014f64:	79fb      	ldrb	r3, [r7, #7]
 8014f66:	f023 0301 	bic.w	r3, r3, #1
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	bf14      	ite	ne
 8014f6e:	2301      	movne	r3, #1
 8014f70:	2300      	moveq	r3, #0
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	461a      	mov	r2, r3
 8014f76:	f107 0318 	add.w	r3, r7, #24
 8014f7a:	4611      	mov	r1, r2
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f7fe f9fd 	bl	801337c <inc_lock>
 8014f82:	4602      	mov	r2, r0
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	691b      	ldr	r3, [r3, #16]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d102      	bne.n	8014f96 <f_open+0x22e>
 8014f90:	2302      	movs	r3, #2
 8014f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014f96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f040 8095 	bne.w	80150ca <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014fa0:	697b      	ldr	r3, [r7, #20]
 8014fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014fa4:	4611      	mov	r1, r2
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7ff f819 	bl	8013fde <ld_clust>
 8014fac:	4602      	mov	r2, r0
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fb4:	331c      	adds	r3, #28
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f7fe f84a 	bl	8013050 <ld_dword>
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014fc8:	697a      	ldr	r2, [r7, #20]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	88da      	ldrh	r2, [r3, #6]
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	79fa      	ldrb	r2, [r7, #7]
 8014fda:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2200      	movs	r2, #0
 8014fe0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	2200      	movs	r2, #0
 8014fec:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	3330      	adds	r3, #48	; 0x30
 8014ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ff6:	2100      	movs	r1, #0
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7fe f8b4 	bl	8013166 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014ffe:	79fb      	ldrb	r3, [r7, #7]
 8015000:	f003 0320 	and.w	r3, r3, #32
 8015004:	2b00      	cmp	r3, #0
 8015006:	d060      	beq.n	80150ca <f_open+0x362>
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	68db      	ldr	r3, [r3, #12]
 801500c:	2b00      	cmp	r3, #0
 801500e:	d05c      	beq.n	80150ca <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	68da      	ldr	r2, [r3, #12]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	895b      	ldrh	r3, [r3, #10]
 801501c:	025b      	lsls	r3, r3, #9
 801501e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	689b      	ldr	r3, [r3, #8]
 8015024:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	68db      	ldr	r3, [r3, #12]
 801502a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801502c:	e016      	b.n	801505c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015032:	4618      	mov	r0, r3
 8015034:	f7fe fb8f 	bl	8013756 <get_fat>
 8015038:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801503a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801503c:	2b01      	cmp	r3, #1
 801503e:	d802      	bhi.n	8015046 <f_open+0x2de>
 8015040:	2302      	movs	r3, #2
 8015042:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801504c:	d102      	bne.n	8015054 <f_open+0x2ec>
 801504e:	2301      	movs	r3, #1
 8015050:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801505c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015060:	2b00      	cmp	r3, #0
 8015062:	d103      	bne.n	801506c <f_open+0x304>
 8015064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015068:	429a      	cmp	r2, r3
 801506a:	d8e0      	bhi.n	801502e <f_open+0x2c6>
				}
				fp->clust = clst;
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015070:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015072:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8015076:	2b00      	cmp	r3, #0
 8015078:	d127      	bne.n	80150ca <f_open+0x362>
 801507a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801507c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015080:	2b00      	cmp	r3, #0
 8015082:	d022      	beq.n	80150ca <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015088:	4618      	mov	r0, r3
 801508a:	f7fe fb45 	bl	8013718 <clust2sect>
 801508e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015092:	2b00      	cmp	r3, #0
 8015094:	d103      	bne.n	801509e <f_open+0x336>
						res = FR_INT_ERR;
 8015096:	2302      	movs	r3, #2
 8015098:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801509c:	e015      	b.n	80150ca <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801509e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150a0:	0a5a      	lsrs	r2, r3, #9
 80150a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150a4:	441a      	add	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	7858      	ldrb	r0, [r3, #1]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	6a1a      	ldr	r2, [r3, #32]
 80150b8:	2301      	movs	r3, #1
 80150ba:	f7fd ff53 	bl	8012f64 <disk_read>
 80150be:	4603      	mov	r3, r0
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d002      	beq.n	80150ca <f_open+0x362>
 80150c4:	2301      	movs	r3, #1
 80150c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80150ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d002      	beq.n	80150d8 <f_open+0x370>
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2200      	movs	r2, #0
 80150d6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80150de:	4611      	mov	r1, r2
 80150e0:	4618      	mov	r0, r3
 80150e2:	f7fe f8b2 	bl	801324a <unlock_fs>
 80150e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3768      	adds	r7, #104	; 0x68
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}

080150f2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80150f2:	b580      	push	{r7, lr}
 80150f4:	b08c      	sub	sp, #48	; 0x30
 80150f6:	af00      	add	r7, sp, #0
 80150f8:	60f8      	str	r0, [r7, #12]
 80150fa:	60b9      	str	r1, [r7, #8]
 80150fc:	607a      	str	r2, [r7, #4]
 80150fe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8015104:	683b      	ldr	r3, [r7, #0]
 8015106:	2200      	movs	r2, #0
 8015108:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	f107 0210 	add.w	r2, r7, #16
 8015110:	4611      	mov	r1, r2
 8015112:	4618      	mov	r0, r3
 8015114:	f7ff fd7c 	bl	8014c10 <validate>
 8015118:	4603      	mov	r3, r0
 801511a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801511e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015122:	2b00      	cmp	r3, #0
 8015124:	d107      	bne.n	8015136 <f_write+0x44>
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	7d5b      	ldrb	r3, [r3, #21]
 801512a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801512e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015132:	2b00      	cmp	r3, #0
 8015134:	d009      	beq.n	801514a <f_write+0x58>
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801513c:	4611      	mov	r1, r2
 801513e:	4618      	mov	r0, r3
 8015140:	f7fe f883 	bl	801324a <unlock_fs>
 8015144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015148:	e173      	b.n	8015432 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	7d1b      	ldrb	r3, [r3, #20]
 801514e:	f003 0302 	and.w	r3, r3, #2
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <f_write+0x72>
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	2107      	movs	r1, #7
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe f875 	bl	801324a <unlock_fs>
 8015160:	2307      	movs	r3, #7
 8015162:	e166      	b.n	8015432 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	699a      	ldr	r2, [r3, #24]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	441a      	add	r2, r3
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	699b      	ldr	r3, [r3, #24]
 8015170:	429a      	cmp	r2, r3
 8015172:	f080 814b 	bcs.w	801540c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	699b      	ldr	r3, [r3, #24]
 801517a:	43db      	mvns	r3, r3
 801517c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801517e:	e145      	b.n	801540c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	699b      	ldr	r3, [r3, #24]
 8015184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015188:	2b00      	cmp	r3, #0
 801518a:	f040 8101 	bne.w	8015390 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	699b      	ldr	r3, [r3, #24]
 8015192:	0a5b      	lsrs	r3, r3, #9
 8015194:	693a      	ldr	r2, [r7, #16]
 8015196:	8952      	ldrh	r2, [r2, #10]
 8015198:	3a01      	subs	r2, #1
 801519a:	4013      	ands	r3, r2
 801519c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d14d      	bne.n	8015240 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	699b      	ldr	r3, [r3, #24]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10c      	bne.n	80151c6 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	689b      	ldr	r3, [r3, #8]
 80151b0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80151b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d11a      	bne.n	80151ee <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2100      	movs	r1, #0
 80151bc:	4618      	mov	r0, r3
 80151be:	f7fe fcbb 	bl	8013b38 <create_chain>
 80151c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80151c4:	e013      	b.n	80151ee <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d007      	beq.n	80151de <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	699b      	ldr	r3, [r3, #24]
 80151d2:	4619      	mov	r1, r3
 80151d4:	68f8      	ldr	r0, [r7, #12]
 80151d6:	f7fe fd47 	bl	8013c68 <clmt_clust>
 80151da:	62b8      	str	r0, [r7, #40]	; 0x28
 80151dc:	e007      	b.n	80151ee <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	69db      	ldr	r3, [r3, #28]
 80151e4:	4619      	mov	r1, r3
 80151e6:	4610      	mov	r0, r2
 80151e8:	f7fe fca6 	bl	8013b38 <create_chain>
 80151ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	f000 8110 	beq.w	8015416 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80151f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f8:	2b01      	cmp	r3, #1
 80151fa:	d109      	bne.n	8015210 <f_write+0x11e>
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2202      	movs	r2, #2
 8015200:	755a      	strb	r2, [r3, #21]
 8015202:	693b      	ldr	r3, [r7, #16]
 8015204:	2102      	movs	r1, #2
 8015206:	4618      	mov	r0, r3
 8015208:	f7fe f81f 	bl	801324a <unlock_fs>
 801520c:	2302      	movs	r3, #2
 801520e:	e110      	b.n	8015432 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015216:	d109      	bne.n	801522c <f_write+0x13a>
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	2201      	movs	r2, #1
 801521c:	755a      	strb	r2, [r3, #21]
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	2101      	movs	r1, #1
 8015222:	4618      	mov	r0, r3
 8015224:	f7fe f811 	bl	801324a <unlock_fs>
 8015228:	2301      	movs	r3, #1
 801522a:	e102      	b.n	8015432 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015230:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	689b      	ldr	r3, [r3, #8]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <f_write+0x14e>
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801523e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	7d1b      	ldrb	r3, [r3, #20]
 8015244:	b25b      	sxtb	r3, r3
 8015246:	2b00      	cmp	r3, #0
 8015248:	da1d      	bge.n	8015286 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	7858      	ldrb	r0, [r3, #1]
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	6a1a      	ldr	r2, [r3, #32]
 8015258:	2301      	movs	r3, #1
 801525a:	f7fd fea3 	bl	8012fa4 <disk_write>
 801525e:	4603      	mov	r3, r0
 8015260:	2b00      	cmp	r3, #0
 8015262:	d009      	beq.n	8015278 <f_write+0x186>
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2201      	movs	r2, #1
 8015268:	755a      	strb	r2, [r3, #21]
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	2101      	movs	r1, #1
 801526e:	4618      	mov	r0, r3
 8015270:	f7fd ffeb 	bl	801324a <unlock_fs>
 8015274:	2301      	movs	r3, #1
 8015276:	e0dc      	b.n	8015432 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	7d1b      	ldrb	r3, [r3, #20]
 801527c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015280:	b2da      	uxtb	r2, r3
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015286:	693a      	ldr	r2, [r7, #16]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	69db      	ldr	r3, [r3, #28]
 801528c:	4619      	mov	r1, r3
 801528e:	4610      	mov	r0, r2
 8015290:	f7fe fa42 	bl	8013718 <clust2sect>
 8015294:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d109      	bne.n	80152b0 <f_write+0x1be>
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	2202      	movs	r2, #2
 80152a0:	755a      	strb	r2, [r3, #21]
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	2102      	movs	r1, #2
 80152a6:	4618      	mov	r0, r3
 80152a8:	f7fd ffcf 	bl	801324a <unlock_fs>
 80152ac:	2302      	movs	r3, #2
 80152ae:	e0c0      	b.n	8015432 <f_write+0x340>
			sect += csect;
 80152b0:	697a      	ldr	r2, [r7, #20]
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	4413      	add	r3, r2
 80152b6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	0a5b      	lsrs	r3, r3, #9
 80152bc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80152be:	6a3b      	ldr	r3, [r7, #32]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d041      	beq.n	8015348 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80152c4:	69ba      	ldr	r2, [r7, #24]
 80152c6:	6a3b      	ldr	r3, [r7, #32]
 80152c8:	4413      	add	r3, r2
 80152ca:	693a      	ldr	r2, [r7, #16]
 80152cc:	8952      	ldrh	r2, [r2, #10]
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d905      	bls.n	80152de <f_write+0x1ec>
					cc = fs->csize - csect;
 80152d2:	693b      	ldr	r3, [r7, #16]
 80152d4:	895b      	ldrh	r3, [r3, #10]
 80152d6:	461a      	mov	r2, r3
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	1ad3      	subs	r3, r2, r3
 80152dc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80152de:	693b      	ldr	r3, [r7, #16]
 80152e0:	7858      	ldrb	r0, [r3, #1]
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	697a      	ldr	r2, [r7, #20]
 80152e6:	69f9      	ldr	r1, [r7, #28]
 80152e8:	f7fd fe5c 	bl	8012fa4 <disk_write>
 80152ec:	4603      	mov	r3, r0
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d009      	beq.n	8015306 <f_write+0x214>
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	2201      	movs	r2, #1
 80152f6:	755a      	strb	r2, [r3, #21]
 80152f8:	693b      	ldr	r3, [r7, #16]
 80152fa:	2101      	movs	r1, #1
 80152fc:	4618      	mov	r0, r3
 80152fe:	f7fd ffa4 	bl	801324a <unlock_fs>
 8015302:	2301      	movs	r3, #1
 8015304:	e095      	b.n	8015432 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	6a1a      	ldr	r2, [r3, #32]
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	1ad3      	subs	r3, r2, r3
 801530e:	6a3a      	ldr	r2, [r7, #32]
 8015310:	429a      	cmp	r2, r3
 8015312:	d915      	bls.n	8015340 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	6a1a      	ldr	r2, [r3, #32]
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	025b      	lsls	r3, r3, #9
 8015324:	69fa      	ldr	r2, [r7, #28]
 8015326:	4413      	add	r3, r2
 8015328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801532c:	4619      	mov	r1, r3
 801532e:	f7fd fef9 	bl	8013124 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	7d1b      	ldrb	r3, [r3, #20]
 8015336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801533a:	b2da      	uxtb	r2, r3
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015340:	6a3b      	ldr	r3, [r7, #32]
 8015342:	025b      	lsls	r3, r3, #9
 8015344:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015346:	e044      	b.n	80153d2 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	6a1b      	ldr	r3, [r3, #32]
 801534c:	697a      	ldr	r2, [r7, #20]
 801534e:	429a      	cmp	r2, r3
 8015350:	d01b      	beq.n	801538a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	699a      	ldr	r2, [r3, #24]
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801535a:	429a      	cmp	r2, r3
 801535c:	d215      	bcs.n	801538a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801535e:	693b      	ldr	r3, [r7, #16]
 8015360:	7858      	ldrb	r0, [r3, #1]
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015368:	2301      	movs	r3, #1
 801536a:	697a      	ldr	r2, [r7, #20]
 801536c:	f7fd fdfa 	bl	8012f64 <disk_read>
 8015370:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015372:	2b00      	cmp	r3, #0
 8015374:	d009      	beq.n	801538a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	2201      	movs	r2, #1
 801537a:	755a      	strb	r2, [r3, #21]
 801537c:	693b      	ldr	r3, [r7, #16]
 801537e:	2101      	movs	r1, #1
 8015380:	4618      	mov	r0, r3
 8015382:	f7fd ff62 	bl	801324a <unlock_fs>
 8015386:	2301      	movs	r3, #1
 8015388:	e053      	b.n	8015432 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801538a:	68fb      	ldr	r3, [r7, #12]
 801538c:	697a      	ldr	r2, [r7, #20]
 801538e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	699b      	ldr	r3, [r3, #24]
 8015394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015398:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801539c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d901      	bls.n	80153aa <f_write+0x2b8>
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	699b      	ldr	r3, [r3, #24]
 80153b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153b8:	4413      	add	r3, r2
 80153ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153bc:	69f9      	ldr	r1, [r7, #28]
 80153be:	4618      	mov	r0, r3
 80153c0:	f7fd feb0 	bl	8013124 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	7d1b      	ldrb	r3, [r3, #20]
 80153c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153cc:	b2da      	uxtb	r2, r3
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80153d2:	69fa      	ldr	r2, [r7, #28]
 80153d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d6:	4413      	add	r3, r2
 80153d8:	61fb      	str	r3, [r7, #28]
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	699a      	ldr	r2, [r3, #24]
 80153de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e0:	441a      	add	r2, r3
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	619a      	str	r2, [r3, #24]
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	68da      	ldr	r2, [r3, #12]
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	699b      	ldr	r3, [r3, #24]
 80153ee:	429a      	cmp	r2, r3
 80153f0:	bf38      	it	cc
 80153f2:	461a      	movcc	r2, r3
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	60da      	str	r2, [r3, #12]
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fe:	441a      	add	r2, r3
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	601a      	str	r2, [r3, #0]
 8015404:	687a      	ldr	r2, [r7, #4]
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	1ad3      	subs	r3, r2, r3
 801540a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	f47f aeb6 	bne.w	8015180 <f_write+0x8e>
 8015414:	e000      	b.n	8015418 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015416:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015418:	68fb      	ldr	r3, [r7, #12]
 801541a:	7d1b      	ldrb	r3, [r3, #20]
 801541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015420:	b2da      	uxtb	r2, r3
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	2100      	movs	r1, #0
 801542a:	4618      	mov	r0, r3
 801542c:	f7fd ff0d 	bl	801324a <unlock_fs>
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	3730      	adds	r7, #48	; 0x30
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801543a:	b580      	push	{r7, lr}
 801543c:	b086      	sub	sp, #24
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	f107 0208 	add.w	r2, r7, #8
 8015448:	4611      	mov	r1, r2
 801544a:	4618      	mov	r0, r3
 801544c:	f7ff fbe0 	bl	8014c10 <validate>
 8015450:	4603      	mov	r3, r0
 8015452:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015454:	7dfb      	ldrb	r3, [r7, #23]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d16d      	bne.n	8015536 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	7d1b      	ldrb	r3, [r3, #20]
 801545e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015462:	2b00      	cmp	r3, #0
 8015464:	d067      	beq.n	8015536 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	7d1b      	ldrb	r3, [r3, #20]
 801546a:	b25b      	sxtb	r3, r3
 801546c:	2b00      	cmp	r3, #0
 801546e:	da1a      	bge.n	80154a6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	7858      	ldrb	r0, [r3, #1]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6a1a      	ldr	r2, [r3, #32]
 801547e:	2301      	movs	r3, #1
 8015480:	f7fd fd90 	bl	8012fa4 <disk_write>
 8015484:	4603      	mov	r3, r0
 8015486:	2b00      	cmp	r3, #0
 8015488:	d006      	beq.n	8015498 <f_sync+0x5e>
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	2101      	movs	r1, #1
 801548e:	4618      	mov	r0, r3
 8015490:	f7fd fedb 	bl	801324a <unlock_fs>
 8015494:	2301      	movs	r3, #1
 8015496:	e055      	b.n	8015544 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	7d1b      	ldrb	r3, [r3, #20]
 801549c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154a0:	b2da      	uxtb	r2, r3
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80154a6:	f7fb feaf 	bl	8011208 <get_fattime>
 80154aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b2:	4619      	mov	r1, r3
 80154b4:	4610      	mov	r0, r2
 80154b6:	f7fe f893 	bl	80135e0 <move_window>
 80154ba:	4603      	mov	r3, r0
 80154bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80154be:	7dfb      	ldrb	r3, [r7, #23]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d138      	bne.n	8015536 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	330b      	adds	r3, #11
 80154ce:	781a      	ldrb	r2, [r3, #0]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	330b      	adds	r3, #11
 80154d4:	f042 0220 	orr.w	r2, r2, #32
 80154d8:	b2d2      	uxtb	r2, r2
 80154da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6818      	ldr	r0, [r3, #0]
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	689b      	ldr	r3, [r3, #8]
 80154e4:	461a      	mov	r2, r3
 80154e6:	68f9      	ldr	r1, [r7, #12]
 80154e8:	f7fe fd98 	bl	801401c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f103 021c 	add.w	r2, r3, #28
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	68db      	ldr	r3, [r3, #12]
 80154f6:	4619      	mov	r1, r3
 80154f8:	4610      	mov	r0, r2
 80154fa:	f7fd fde7 	bl	80130cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	3316      	adds	r3, #22
 8015502:	6939      	ldr	r1, [r7, #16]
 8015504:	4618      	mov	r0, r3
 8015506:	f7fd fde1 	bl	80130cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	3312      	adds	r3, #18
 801550e:	2100      	movs	r1, #0
 8015510:	4618      	mov	r0, r3
 8015512:	f7fd fdc0 	bl	8013096 <st_word>
					fs->wflag = 1;
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	2201      	movs	r2, #1
 801551a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	4618      	mov	r0, r3
 8015520:	f7fe f88c 	bl	801363c <sync_fs>
 8015524:	4603      	mov	r3, r0
 8015526:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	7d1b      	ldrb	r3, [r3, #20]
 801552c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015530:	b2da      	uxtb	r2, r3
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	7dfa      	ldrb	r2, [r7, #23]
 801553a:	4611      	mov	r1, r2
 801553c:	4618      	mov	r0, r3
 801553e:	f7fd fe84 	bl	801324a <unlock_fs>
 8015542:	7dfb      	ldrb	r3, [r7, #23]
}
 8015544:	4618      	mov	r0, r3
 8015546:	3718      	adds	r7, #24
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7ff ff70 	bl	801543a <f_sync>
 801555a:	4603      	mov	r3, r0
 801555c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801555e:	7bfb      	ldrb	r3, [r7, #15]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d11d      	bne.n	80155a0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f107 0208 	add.w	r2, r7, #8
 801556a:	4611      	mov	r1, r2
 801556c:	4618      	mov	r0, r3
 801556e:	f7ff fb4f 	bl	8014c10 <validate>
 8015572:	4603      	mov	r3, r0
 8015574:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015576:	7bfb      	ldrb	r3, [r7, #15]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d111      	bne.n	80155a0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	691b      	ldr	r3, [r3, #16]
 8015580:	4618      	mov	r0, r3
 8015582:	f7fd ff89 	bl	8013498 <dec_lock>
 8015586:	4603      	mov	r3, r0
 8015588:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801558a:	7bfb      	ldrb	r3, [r7, #15]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d102      	bne.n	8015596 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	2200      	movs	r2, #0
 8015594:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	2100      	movs	r1, #0
 801559a:	4618      	mov	r0, r3
 801559c:	f7fd fe55 	bl	801324a <unlock_fs>
#endif
		}
	}
	return res;
 80155a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b090      	sub	sp, #64	; 0x40
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
 80155b2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f107 0208 	add.w	r2, r7, #8
 80155ba:	4611      	mov	r1, r2
 80155bc:	4618      	mov	r0, r3
 80155be:	f7ff fb27 	bl	8014c10 <validate>
 80155c2:	4603      	mov	r3, r0
 80155c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80155c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d103      	bne.n	80155d8 <f_lseek+0x2e>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	7d5b      	ldrb	r3, [r3, #21]
 80155d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80155d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d009      	beq.n	80155f4 <f_lseek+0x4a>
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80155e6:	4611      	mov	r1, r2
 80155e8:	4618      	mov	r0, r3
 80155ea:	f7fd fe2e 	bl	801324a <unlock_fs>
 80155ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155f2:	e229      	b.n	8015a48 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	f000 80ea 	beq.w	80157d2 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80155fe:	683b      	ldr	r3, [r7, #0]
 8015600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015604:	d164      	bne.n	80156d0 <f_lseek+0x126>
			tbl = fp->cltbl;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801560a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560e:	1d1a      	adds	r2, r3, #4
 8015610:	627a      	str	r2, [r7, #36]	; 0x24
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	617b      	str	r3, [r7, #20]
 8015616:	2302      	movs	r3, #2
 8015618:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015622:	2b00      	cmp	r3, #0
 8015624:	d044      	beq.n	80156b0 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015628:	613b      	str	r3, [r7, #16]
 801562a:	2300      	movs	r3, #0
 801562c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015630:	3302      	adds	r3, #2
 8015632:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015636:	60fb      	str	r3, [r7, #12]
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	3301      	adds	r3, #1
 801563c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015642:	4618      	mov	r0, r3
 8015644:	f7fe f887 	bl	8013756 <get_fat>
 8015648:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564c:	2b01      	cmp	r3, #1
 801564e:	d809      	bhi.n	8015664 <f_lseek+0xba>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2202      	movs	r2, #2
 8015654:	755a      	strb	r2, [r3, #21]
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	2102      	movs	r1, #2
 801565a:	4618      	mov	r0, r3
 801565c:	f7fd fdf5 	bl	801324a <unlock_fs>
 8015660:	2302      	movs	r3, #2
 8015662:	e1f1      	b.n	8015a48 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801566a:	d109      	bne.n	8015680 <f_lseek+0xd6>
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2201      	movs	r2, #1
 8015670:	755a      	strb	r2, [r3, #21]
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	2101      	movs	r1, #1
 8015676:	4618      	mov	r0, r3
 8015678:	f7fd fde7 	bl	801324a <unlock_fs>
 801567c:	2301      	movs	r3, #1
 801567e:	e1e3      	b.n	8015a48 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	3301      	adds	r3, #1
 8015684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015686:	429a      	cmp	r2, r3
 8015688:	d0d4      	beq.n	8015634 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801568a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	429a      	cmp	r2, r3
 8015690:	d809      	bhi.n	80156a6 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	1d1a      	adds	r2, r3, #4
 8015696:	627a      	str	r2, [r7, #36]	; 0x24
 8015698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801569a:	601a      	str	r2, [r3, #0]
 801569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569e:	1d1a      	adds	r2, r3, #4
 80156a0:	627a      	str	r2, [r7, #36]	; 0x24
 80156a2:	693a      	ldr	r2, [r7, #16]
 80156a4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	699b      	ldr	r3, [r3, #24]
 80156aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d3ba      	bcc.n	8015626 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156b6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80156b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80156ba:	697b      	ldr	r3, [r7, #20]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d803      	bhi.n	80156c8 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80156c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c2:	2200      	movs	r2, #0
 80156c4:	601a      	str	r2, [r3, #0]
 80156c6:	e1b6      	b.n	8015a36 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80156c8:	2311      	movs	r3, #17
 80156ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80156ce:	e1b2      	b.n	8015a36 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	68db      	ldr	r3, [r3, #12]
 80156d4:	683a      	ldr	r2, [r7, #0]
 80156d6:	429a      	cmp	r2, r3
 80156d8:	d902      	bls.n	80156e0 <f_lseek+0x136>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	683a      	ldr	r2, [r7, #0]
 80156e4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	f000 81a4 	beq.w	8015a36 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	3b01      	subs	r3, #1
 80156f2:	4619      	mov	r1, r3
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7fe fab7 	bl	8013c68 <clmt_clust>
 80156fa:	4602      	mov	r2, r0
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015700:	68ba      	ldr	r2, [r7, #8]
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	69db      	ldr	r3, [r3, #28]
 8015706:	4619      	mov	r1, r3
 8015708:	4610      	mov	r0, r2
 801570a:	f7fe f805 	bl	8013718 <clust2sect>
 801570e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d109      	bne.n	801572a <f_lseek+0x180>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	2202      	movs	r2, #2
 801571a:	755a      	strb	r2, [r3, #21]
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	2102      	movs	r1, #2
 8015720:	4618      	mov	r0, r3
 8015722:	f7fd fd92 	bl	801324a <unlock_fs>
 8015726:	2302      	movs	r3, #2
 8015728:	e18e      	b.n	8015a48 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	3b01      	subs	r3, #1
 801572e:	0a5b      	lsrs	r3, r3, #9
 8015730:	68ba      	ldr	r2, [r7, #8]
 8015732:	8952      	ldrh	r2, [r2, #10]
 8015734:	3a01      	subs	r2, #1
 8015736:	4013      	ands	r3, r2
 8015738:	69ba      	ldr	r2, [r7, #24]
 801573a:	4413      	add	r3, r2
 801573c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	699b      	ldr	r3, [r3, #24]
 8015742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015746:	2b00      	cmp	r3, #0
 8015748:	f000 8175 	beq.w	8015a36 <f_lseek+0x48c>
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	6a1b      	ldr	r3, [r3, #32]
 8015750:	69ba      	ldr	r2, [r7, #24]
 8015752:	429a      	cmp	r2, r3
 8015754:	f000 816f 	beq.w	8015a36 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	7d1b      	ldrb	r3, [r3, #20]
 801575c:	b25b      	sxtb	r3, r3
 801575e:	2b00      	cmp	r3, #0
 8015760:	da1d      	bge.n	801579e <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015762:	68bb      	ldr	r3, [r7, #8]
 8015764:	7858      	ldrb	r0, [r3, #1]
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	6a1a      	ldr	r2, [r3, #32]
 8015770:	2301      	movs	r3, #1
 8015772:	f7fd fc17 	bl	8012fa4 <disk_write>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d009      	beq.n	8015790 <f_lseek+0x1e6>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2201      	movs	r2, #1
 8015780:	755a      	strb	r2, [r3, #21]
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	2101      	movs	r1, #1
 8015786:	4618      	mov	r0, r3
 8015788:	f7fd fd5f 	bl	801324a <unlock_fs>
 801578c:	2301      	movs	r3, #1
 801578e:	e15b      	b.n	8015a48 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	7d1b      	ldrb	r3, [r3, #20]
 8015794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015798:	b2da      	uxtb	r2, r3
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	7858      	ldrb	r0, [r3, #1]
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80157a8:	2301      	movs	r3, #1
 80157aa:	69ba      	ldr	r2, [r7, #24]
 80157ac:	f7fd fbda 	bl	8012f64 <disk_read>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d009      	beq.n	80157ca <f_lseek+0x220>
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	2201      	movs	r2, #1
 80157ba:	755a      	strb	r2, [r3, #21]
 80157bc:	68bb      	ldr	r3, [r7, #8]
 80157be:	2101      	movs	r1, #1
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7fd fd42 	bl	801324a <unlock_fs>
 80157c6:	2301      	movs	r3, #1
 80157c8:	e13e      	b.n	8015a48 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	69ba      	ldr	r2, [r7, #24]
 80157ce:	621a      	str	r2, [r3, #32]
 80157d0:	e131      	b.n	8015a36 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d908      	bls.n	80157ee <f_lseek+0x244>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	7d1b      	ldrb	r3, [r3, #20]
 80157e0:	f003 0302 	and.w	r3, r3, #2
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d102      	bne.n	80157ee <f_lseek+0x244>
			ofs = fp->obj.objsize;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	699b      	ldr	r3, [r3, #24]
 80157f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80157f4:	2300      	movs	r3, #0
 80157f6:	637b      	str	r3, [r7, #52]	; 0x34
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157fc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	f000 80c0 	beq.w	8015986 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	895b      	ldrh	r3, [r3, #10]
 801580a:	025b      	lsls	r3, r3, #9
 801580c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801580e:	6a3b      	ldr	r3, [r7, #32]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d01b      	beq.n	801584c <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	1e5a      	subs	r2, r3, #1
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	fbb2 f2f3 	udiv	r2, r2, r3
 801581e:	6a3b      	ldr	r3, [r7, #32]
 8015820:	1e59      	subs	r1, r3, #1
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8015828:	429a      	cmp	r2, r3
 801582a:	d30f      	bcc.n	801584c <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801582c:	6a3b      	ldr	r3, [r7, #32]
 801582e:	1e5a      	subs	r2, r3, #1
 8015830:	69fb      	ldr	r3, [r7, #28]
 8015832:	425b      	negs	r3, r3
 8015834:	401a      	ands	r2, r3
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	699b      	ldr	r3, [r3, #24]
 801583e:	683a      	ldr	r2, [r7, #0]
 8015840:	1ad3      	subs	r3, r2, r3
 8015842:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	69db      	ldr	r3, [r3, #28]
 8015848:	63bb      	str	r3, [r7, #56]	; 0x38
 801584a:	e02c      	b.n	80158a6 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	689b      	ldr	r3, [r3, #8]
 8015850:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015854:	2b00      	cmp	r3, #0
 8015856:	d123      	bne.n	80158a0 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	2100      	movs	r1, #0
 801585c:	4618      	mov	r0, r3
 801585e:	f7fe f96b 	bl	8013b38 <create_chain>
 8015862:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8015864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015866:	2b01      	cmp	r3, #1
 8015868:	d109      	bne.n	801587e <f_lseek+0x2d4>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2202      	movs	r2, #2
 801586e:	755a      	strb	r2, [r3, #21]
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	2102      	movs	r1, #2
 8015874:	4618      	mov	r0, r3
 8015876:	f7fd fce8 	bl	801324a <unlock_fs>
 801587a:	2302      	movs	r3, #2
 801587c:	e0e4      	b.n	8015a48 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015884:	d109      	bne.n	801589a <f_lseek+0x2f0>
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2201      	movs	r2, #1
 801588a:	755a      	strb	r2, [r3, #21]
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	2101      	movs	r1, #1
 8015890:	4618      	mov	r0, r3
 8015892:	f7fd fcda 	bl	801324a <unlock_fs>
 8015896:	2301      	movs	r3, #1
 8015898:	e0d6      	b.n	8015a48 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801589e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158a4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80158a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d06c      	beq.n	8015986 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80158ac:	e044      	b.n	8015938 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80158ae:	683a      	ldr	r2, [r7, #0]
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	603b      	str	r3, [r7, #0]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	699a      	ldr	r2, [r3, #24]
 80158ba:	69fb      	ldr	r3, [r7, #28]
 80158bc:	441a      	add	r2, r3
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7d1b      	ldrb	r3, [r3, #20]
 80158c6:	f003 0302 	and.w	r3, r3, #2
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00b      	beq.n	80158e6 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158d2:	4618      	mov	r0, r3
 80158d4:	f7fe f930 	bl	8013b38 <create_chain>
 80158d8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80158da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d108      	bne.n	80158f2 <f_lseek+0x348>
							ofs = 0; break;
 80158e0:	2300      	movs	r3, #0
 80158e2:	603b      	str	r3, [r7, #0]
 80158e4:	e02c      	b.n	8015940 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fd ff33 	bl	8013756 <get_fat>
 80158f0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158f8:	d109      	bne.n	801590e <f_lseek+0x364>
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2201      	movs	r2, #1
 80158fe:	755a      	strb	r2, [r3, #21]
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	2101      	movs	r1, #1
 8015904:	4618      	mov	r0, r3
 8015906:	f7fd fca0 	bl	801324a <unlock_fs>
 801590a:	2301      	movs	r3, #1
 801590c:	e09c      	b.n	8015a48 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801590e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015910:	2b01      	cmp	r3, #1
 8015912:	d904      	bls.n	801591e <f_lseek+0x374>
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	699b      	ldr	r3, [r3, #24]
 8015918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801591a:	429a      	cmp	r2, r3
 801591c:	d309      	bcc.n	8015932 <f_lseek+0x388>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	2202      	movs	r2, #2
 8015922:	755a      	strb	r2, [r3, #21]
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	2102      	movs	r1, #2
 8015928:	4618      	mov	r0, r3
 801592a:	f7fd fc8e 	bl	801324a <unlock_fs>
 801592e:	2302      	movs	r3, #2
 8015930:	e08a      	b.n	8015a48 <f_lseek+0x49e>
					fp->clust = clst;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015936:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8015938:	683a      	ldr	r2, [r7, #0]
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	429a      	cmp	r2, r3
 801593e:	d8b6      	bhi.n	80158ae <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	699a      	ldr	r2, [r3, #24]
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	441a      	add	r2, r3
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015952:	2b00      	cmp	r3, #0
 8015954:	d017      	beq.n	8015986 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801595a:	4618      	mov	r0, r3
 801595c:	f7fd fedc 	bl	8013718 <clust2sect>
 8015960:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015964:	2b00      	cmp	r3, #0
 8015966:	d109      	bne.n	801597c <f_lseek+0x3d2>
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2202      	movs	r2, #2
 801596c:	755a      	strb	r2, [r3, #21]
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	2102      	movs	r1, #2
 8015972:	4618      	mov	r0, r3
 8015974:	f7fd fc69 	bl	801324a <unlock_fs>
 8015978:	2302      	movs	r3, #2
 801597a:	e065      	b.n	8015a48 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	0a5b      	lsrs	r3, r3, #9
 8015980:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015982:	4413      	add	r3, r2
 8015984:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	699a      	ldr	r2, [r3, #24]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	429a      	cmp	r2, r3
 8015990:	d90a      	bls.n	80159a8 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	699a      	ldr	r2, [r3, #24]
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	7d1b      	ldrb	r3, [r3, #20]
 801599e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159a2:	b2da      	uxtb	r2, r3
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	699b      	ldr	r3, [r3, #24]
 80159ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d040      	beq.n	8015a36 <f_lseek+0x48c>
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	6a1b      	ldr	r3, [r3, #32]
 80159b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80159ba:	429a      	cmp	r2, r3
 80159bc:	d03b      	beq.n	8015a36 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	7d1b      	ldrb	r3, [r3, #20]
 80159c2:	b25b      	sxtb	r3, r3
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	da1d      	bge.n	8015a04 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	7858      	ldrb	r0, [r3, #1]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6a1a      	ldr	r2, [r3, #32]
 80159d6:	2301      	movs	r3, #1
 80159d8:	f7fd fae4 	bl	8012fa4 <disk_write>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d009      	beq.n	80159f6 <f_lseek+0x44c>
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	2201      	movs	r2, #1
 80159e6:	755a      	strb	r2, [r3, #21]
 80159e8:	68bb      	ldr	r3, [r7, #8]
 80159ea:	2101      	movs	r1, #1
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fd fc2c 	bl	801324a <unlock_fs>
 80159f2:	2301      	movs	r3, #1
 80159f4:	e028      	b.n	8015a48 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	7d1b      	ldrb	r3, [r3, #20]
 80159fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159fe:	b2da      	uxtb	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015a04:	68bb      	ldr	r3, [r7, #8]
 8015a06:	7858      	ldrb	r0, [r3, #1]
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015a0e:	2301      	movs	r3, #1
 8015a10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a12:	f7fd faa7 	bl	8012f64 <disk_read>
 8015a16:	4603      	mov	r3, r0
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d009      	beq.n	8015a30 <f_lseek+0x486>
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2201      	movs	r2, #1
 8015a20:	755a      	strb	r2, [r3, #21]
 8015a22:	68bb      	ldr	r3, [r7, #8]
 8015a24:	2101      	movs	r1, #1
 8015a26:	4618      	mov	r0, r3
 8015a28:	f7fd fc0f 	bl	801324a <unlock_fs>
 8015a2c:	2301      	movs	r3, #1
 8015a2e:	e00b      	b.n	8015a48 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015a34:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015a3c:	4611      	mov	r1, r2
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f7fd fc03 	bl	801324a <unlock_fs>
 8015a44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3740      	adds	r7, #64	; 0x40
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	bd80      	pop	{r7, pc}

08015a50 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b086      	sub	sp, #24
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	6078      	str	r0, [r7, #4]
 8015a58:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d101      	bne.n	8015a64 <f_opendir+0x14>
 8015a60:	2309      	movs	r3, #9
 8015a62:	e06a      	b.n	8015b3a <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015a68:	f107 010c 	add.w	r1, r7, #12
 8015a6c:	463b      	mov	r3, r7
 8015a6e:	2200      	movs	r2, #0
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7fe fe79 	bl	8014768 <find_volume>
 8015a76:	4603      	mov	r3, r0
 8015a78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015a7a:	7dfb      	ldrb	r3, [r7, #23]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d14f      	bne.n	8015b20 <f_opendir+0xd0>
		obj->fs = fs;
 8015a80:	68fa      	ldr	r2, [r7, #12]
 8015a82:	693b      	ldr	r3, [r7, #16]
 8015a84:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	4619      	mov	r1, r3
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7fe fd60 	bl	8014550 <follow_path>
 8015a90:	4603      	mov	r3, r0
 8015a92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015a94:	7dfb      	ldrb	r3, [r7, #23]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d13d      	bne.n	8015b16 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015aa0:	b25b      	sxtb	r3, r3
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	db12      	blt.n	8015acc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	799b      	ldrb	r3, [r3, #6]
 8015aaa:	f003 0310 	and.w	r3, r3, #16
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d00a      	beq.n	8015ac8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015ab2:	68fa      	ldr	r2, [r7, #12]
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6a1b      	ldr	r3, [r3, #32]
 8015ab8:	4619      	mov	r1, r3
 8015aba:	4610      	mov	r0, r2
 8015abc:	f7fe fa8f 	bl	8013fde <ld_clust>
 8015ac0:	4602      	mov	r2, r0
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	609a      	str	r2, [r3, #8]
 8015ac6:	e001      	b.n	8015acc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015ac8:	2305      	movs	r3, #5
 8015aca:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015acc:	7dfb      	ldrb	r3, [r7, #23]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d121      	bne.n	8015b16 <f_opendir+0xc6>
				obj->id = fs->id;
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	88da      	ldrh	r2, [r3, #6]
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015ada:	2100      	movs	r1, #0
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f7fe f8f7 	bl	8013cd0 <dir_sdi>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015ae6:	7dfb      	ldrb	r3, [r7, #23]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d114      	bne.n	8015b16 <f_opendir+0xc6>
					if (obj->sclust) {
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	689b      	ldr	r3, [r3, #8]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d00d      	beq.n	8015b10 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015af4:	2100      	movs	r1, #0
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7fd fc40 	bl	801337c <inc_lock>
 8015afc:	4602      	mov	r2, r0
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	691b      	ldr	r3, [r3, #16]
 8015b06:	2b00      	cmp	r3, #0
 8015b08:	d105      	bne.n	8015b16 <f_opendir+0xc6>
 8015b0a:	2312      	movs	r3, #18
 8015b0c:	75fb      	strb	r3, [r7, #23]
 8015b0e:	e002      	b.n	8015b16 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015b10:	693b      	ldr	r3, [r7, #16]
 8015b12:	2200      	movs	r2, #0
 8015b14:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015b16:	7dfb      	ldrb	r3, [r7, #23]
 8015b18:	2b04      	cmp	r3, #4
 8015b1a:	d101      	bne.n	8015b20 <f_opendir+0xd0>
 8015b1c:	2305      	movs	r3, #5
 8015b1e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015b20:	7dfb      	ldrb	r3, [r7, #23]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <f_opendir+0xdc>
 8015b26:	693b      	ldr	r3, [r7, #16]
 8015b28:	2200      	movs	r2, #0
 8015b2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	7dfa      	ldrb	r2, [r7, #23]
 8015b30:	4611      	mov	r1, r2
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fd fb89 	bl	801324a <unlock_fs>
 8015b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3718      	adds	r7, #24
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}

08015b42 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015b42:	b580      	push	{r7, lr}
 8015b44:	b084      	sub	sp, #16
 8015b46:	af00      	add	r7, sp, #0
 8015b48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	f107 0208 	add.w	r2, r7, #8
 8015b50:	4611      	mov	r1, r2
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7ff f85c 	bl	8014c10 <validate>
 8015b58:	4603      	mov	r3, r0
 8015b5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015b5c:	7bfb      	ldrb	r3, [r7, #15]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d115      	bne.n	8015b8e <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	691b      	ldr	r3, [r3, #16]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d006      	beq.n	8015b78 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	691b      	ldr	r3, [r3, #16]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7fd fc92 	bl	8013498 <dec_lock>
 8015b74:	4603      	mov	r3, r0
 8015b76:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8015b78:	7bfb      	ldrb	r3, [r7, #15]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d102      	bne.n	8015b84 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2200      	movs	r2, #0
 8015b82:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	2100      	movs	r1, #0
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7fd fb5e 	bl	801324a <unlock_fs>
#endif
	}
	return res;
 8015b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3710      	adds	r7, #16
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f107 0208 	add.w	r2, r7, #8
 8015ba8:	4611      	mov	r1, r2
 8015baa:	4618      	mov	r0, r3
 8015bac:	f7ff f830 	bl	8014c10 <validate>
 8015bb0:	4603      	mov	r3, r0
 8015bb2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015bb4:	7bfb      	ldrb	r3, [r7, #15]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d126      	bne.n	8015c08 <f_readdir+0x70>
		if (!fno) {
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d106      	bne.n	8015bce <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015bc0:	2100      	movs	r1, #0
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f7fe f884 	bl	8013cd0 <dir_sdi>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	73fb      	strb	r3, [r7, #15]
 8015bcc:	e01c      	b.n	8015c08 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015bce:	2100      	movs	r1, #0
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f7fe fa43 	bl	801405c <dir_read>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015bda:	7bfb      	ldrb	r3, [r7, #15]
 8015bdc:	2b04      	cmp	r3, #4
 8015bde:	d101      	bne.n	8015be4 <f_readdir+0x4c>
 8015be0:	2300      	movs	r3, #0
 8015be2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015be4:	7bfb      	ldrb	r3, [r7, #15]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d10e      	bne.n	8015c08 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015bea:	6839      	ldr	r1, [r7, #0]
 8015bec:	6878      	ldr	r0, [r7, #4]
 8015bee:	f7fe fb19 	bl	8014224 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015bf2:	2100      	movs	r1, #0
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f7fe f8e6 	bl	8013dc6 <dir_next>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015bfe:	7bfb      	ldrb	r3, [r7, #15]
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	d101      	bne.n	8015c08 <f_readdir+0x70>
 8015c04:	2300      	movs	r3, #0
 8015c06:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	7bfa      	ldrb	r2, [r7, #15]
 8015c0c:	4611      	mov	r1, r2
 8015c0e:	4618      	mov	r0, r3
 8015c10:	f7fd fb1b 	bl	801324a <unlock_fs>
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c16:	4618      	mov	r0, r3
 8015c18:	3710      	adds	r7, #16
 8015c1a:	46bd      	mov	sp, r7
 8015c1c:	bd80      	pop	{r7, pc}

08015c1e <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8015c1e:	b580      	push	{r7, lr}
 8015c20:	b084      	sub	sp, #16
 8015c22:	af00      	add	r7, sp, #0
 8015c24:	6078      	str	r0, [r7, #4]
 8015c26:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8015c28:	6839      	ldr	r1, [r7, #0]
 8015c2a:	6878      	ldr	r0, [r7, #4]
 8015c2c:	f7ff ffb4 	bl	8015b98 <f_readdir>
 8015c30:	4603      	mov	r3, r0
 8015c32:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8015c34:	7bfb      	ldrb	r3, [r7, #15]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d114      	bne.n	8015c64 <f_findnext+0x46>
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d011      	beq.n	8015c64 <f_findnext+0x46>
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	7a5b      	ldrb	r3, [r3, #9]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00d      	beq.n	8015c64 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	f103 0109 	add.w	r1, r3, #9
 8015c52:	2300      	movs	r3, #0
 8015c54:	2200      	movs	r2, #0
 8015c56:	f7fe fb6b 	bl	8014330 <pattern_matching>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d100      	bne.n	8015c62 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8015c60:	e7e2      	b.n	8015c28 <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8015c62:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8015c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c66:	4618      	mov	r0, r3
 8015c68:	3710      	adds	r7, #16
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}

08015c6e <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8015c6e:	b580      	push	{r7, lr}
 8015c70:	b086      	sub	sp, #24
 8015c72:	af00      	add	r7, sp, #0
 8015c74:	60f8      	str	r0, [r7, #12]
 8015c76:	60b9      	str	r1, [r7, #8]
 8015c78:	607a      	str	r2, [r7, #4]
 8015c7a:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8015c7c:	68fb      	ldr	r3, [r7, #12]
 8015c7e:	683a      	ldr	r2, [r7, #0]
 8015c80:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8015c82:	6879      	ldr	r1, [r7, #4]
 8015c84:	68f8      	ldr	r0, [r7, #12]
 8015c86:	f7ff fee3 	bl	8015a50 <f_opendir>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c8e:	7dfb      	ldrb	r3, [r7, #23]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d105      	bne.n	8015ca0 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8015c94:	68b9      	ldr	r1, [r7, #8]
 8015c96:	68f8      	ldr	r0, [r7, #12]
 8015c98:	f7ff ffc1 	bl	8015c1e <f_findnext>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8015ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	3718      	adds	r7, #24
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	bd80      	pop	{r7, pc}
	...

08015cac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b087      	sub	sp, #28
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	60f8      	str	r0, [r7, #12]
 8015cb4:	60b9      	str	r1, [r7, #8]
 8015cb6:	4613      	mov	r3, r2
 8015cb8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015cc2:	4b1f      	ldr	r3, [pc, #124]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cc4:	7a5b      	ldrb	r3, [r3, #9]
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d131      	bne.n	8015d30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015ccc:	4b1c      	ldr	r3, [pc, #112]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cce:	7a5b      	ldrb	r3, [r3, #9]
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	4b1a      	ldr	r3, [pc, #104]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cd6:	2100      	movs	r1, #0
 8015cd8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015cda:	4b19      	ldr	r3, [pc, #100]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cdc:	7a5b      	ldrb	r3, [r3, #9]
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	4a17      	ldr	r2, [pc, #92]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015ce2:	009b      	lsls	r3, r3, #2
 8015ce4:	4413      	add	r3, r2
 8015ce6:	68fa      	ldr	r2, [r7, #12]
 8015ce8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015cea:	4b15      	ldr	r3, [pc, #84]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cec:	7a5b      	ldrb	r3, [r3, #9]
 8015cee:	b2db      	uxtb	r3, r3
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	4b13      	ldr	r3, [pc, #76]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cf4:	4413      	add	r3, r2
 8015cf6:	79fa      	ldrb	r2, [r7, #7]
 8015cf8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015cfa:	4b11      	ldr	r3, [pc, #68]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015cfc:	7a5b      	ldrb	r3, [r3, #9]
 8015cfe:	b2db      	uxtb	r3, r3
 8015d00:	1c5a      	adds	r2, r3, #1
 8015d02:	b2d1      	uxtb	r1, r2
 8015d04:	4a0e      	ldr	r2, [pc, #56]	; (8015d40 <FATFS_LinkDriverEx+0x94>)
 8015d06:	7251      	strb	r1, [r2, #9]
 8015d08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015d0a:	7dbb      	ldrb	r3, [r7, #22]
 8015d0c:	3330      	adds	r3, #48	; 0x30
 8015d0e:	b2da      	uxtb	r2, r3
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	3301      	adds	r3, #1
 8015d18:	223a      	movs	r2, #58	; 0x3a
 8015d1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015d1c:	68bb      	ldr	r3, [r7, #8]
 8015d1e:	3302      	adds	r3, #2
 8015d20:	222f      	movs	r2, #47	; 0x2f
 8015d22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015d24:	68bb      	ldr	r3, [r7, #8]
 8015d26:	3303      	adds	r3, #3
 8015d28:	2200      	movs	r2, #0
 8015d2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015d2c:	2300      	movs	r3, #0
 8015d2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	371c      	adds	r7, #28
 8015d36:	46bd      	mov	sp, r7
 8015d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3c:	4770      	bx	lr
 8015d3e:	bf00      	nop
 8015d40:	20000368 	.word	0x20000368

08015d44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b082      	sub	sp, #8
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
 8015d4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015d4e:	2200      	movs	r2, #0
 8015d50:	6839      	ldr	r1, [r7, #0]
 8015d52:	6878      	ldr	r0, [r7, #4]
 8015d54:	f7ff ffaa 	bl	8015cac <FATFS_LinkDriverEx>
 8015d58:	4603      	mov	r3, r0
}
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	3708      	adds	r7, #8
 8015d5e:	46bd      	mov	sp, r7
 8015d60:	bd80      	pop	{r7, pc}

08015d62 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015d62:	b580      	push	{r7, lr}
 8015d64:	b084      	sub	sp, #16
 8015d66:	af00      	add	r7, sp, #0
 8015d68:	4603      	mov	r3, r0
 8015d6a:	6039      	str	r1, [r7, #0]
 8015d6c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015d6e:	2200      	movs	r2, #0
 8015d70:	2101      	movs	r1, #1
 8015d72:	2001      	movs	r0, #1
 8015d74:	f000 fb5e 	bl	8016434 <osSemaphoreNew>
 8015d78:	4602      	mov	r2, r0
 8015d7a:	683b      	ldr	r3, [r7, #0]
 8015d7c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015d7e:	683b      	ldr	r3, [r7, #0]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	bf14      	ite	ne
 8015d86:	2301      	movne	r3, #1
 8015d88:	2300      	moveq	r3, #0
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	60fb      	str	r3, [r7, #12]

    return ret;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
}
 8015d90:	4618      	mov	r0, r3
 8015d92:	3710      	adds	r7, #16
 8015d94:	46bd      	mov	sp, r7
 8015d96:	bd80      	pop	{r7, pc}

08015d98 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b082      	sub	sp, #8
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f000 fca3 	bl	80166ec <osSemaphoreDelete>
#endif
    return 1;
 8015da6:	2301      	movs	r3, #1
}
 8015da8:	4618      	mov	r0, r3
 8015daa:	3708      	adds	r7, #8
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015db0:	b580      	push	{r7, lr}
 8015db2:	b084      	sub	sp, #16
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015dc0:	6878      	ldr	r0, [r7, #4]
 8015dc2:	f000 fbd5 	bl	8016570 <osSemaphoreAcquire>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d101      	bne.n	8015dd0 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015dcc:	2301      	movs	r3, #1
 8015dce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	3710      	adds	r7, #16
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd80      	pop	{r7, pc}

08015dda <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015dda:	b580      	push	{r7, lr}
 8015ddc:	b082      	sub	sp, #8
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015de2:	6878      	ldr	r0, [r7, #4]
 8015de4:	f000 fc2a 	bl	801663c <osSemaphoreRelease>
#endif
}
 8015de8:	bf00      	nop
 8015dea:	3708      	adds	r7, #8
 8015dec:	46bd      	mov	sp, r7
 8015dee:	bd80      	pop	{r7, pc}

08015df0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015df0:	b480      	push	{r7}
 8015df2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8015df4:	bf00      	nop
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr
	...

08015e00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015e00:	b480      	push	{r7}
 8015e02:	b085      	sub	sp, #20
 8015e04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e06:	f3ef 8305 	mrs	r3, IPSR
 8015e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d10f      	bne.n	8015e32 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e12:	f3ef 8310 	mrs	r3, PRIMASK
 8015e16:	607b      	str	r3, [r7, #4]
  return(result);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d105      	bne.n	8015e2a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8015e22:	603b      	str	r3, [r7, #0]
  return(result);
 8015e24:	683b      	ldr	r3, [r7, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d007      	beq.n	8015e3a <osKernelInitialize+0x3a>
 8015e2a:	4b0e      	ldr	r3, [pc, #56]	; (8015e64 <osKernelInitialize+0x64>)
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2b02      	cmp	r3, #2
 8015e30:	d103      	bne.n	8015e3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8015e32:	f06f 0305 	mvn.w	r3, #5
 8015e36:	60fb      	str	r3, [r7, #12]
 8015e38:	e00c      	b.n	8015e54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015e3a:	4b0a      	ldr	r3, [pc, #40]	; (8015e64 <osKernelInitialize+0x64>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d105      	bne.n	8015e4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015e42:	4b08      	ldr	r3, [pc, #32]	; (8015e64 <osKernelInitialize+0x64>)
 8015e44:	2201      	movs	r2, #1
 8015e46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	60fb      	str	r3, [r7, #12]
 8015e4c:	e002      	b.n	8015e54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8015e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8015e52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015e54:	68fb      	ldr	r3, [r7, #12]
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	3714      	adds	r7, #20
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e60:	4770      	bx	lr
 8015e62:	bf00      	nop
 8015e64:	20000374 	.word	0x20000374

08015e68 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b082      	sub	sp, #8
 8015e6c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015e6e:	f002 fe7b 	bl	8018b68 <xTaskGetSchedulerState>
 8015e72:	4603      	mov	r3, r0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d004      	beq.n	8015e82 <osKernelGetState+0x1a>
 8015e78:	2b02      	cmp	r3, #2
 8015e7a:	d105      	bne.n	8015e88 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015e7c:	2302      	movs	r3, #2
 8015e7e:	607b      	str	r3, [r7, #4]
      break;
 8015e80:	e00c      	b.n	8015e9c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015e82:	2303      	movs	r3, #3
 8015e84:	607b      	str	r3, [r7, #4]
      break;
 8015e86:	e009      	b.n	8015e9c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015e88:	4b07      	ldr	r3, [pc, #28]	; (8015ea8 <osKernelGetState+0x40>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d102      	bne.n	8015e96 <osKernelGetState+0x2e>
        state = osKernelReady;
 8015e90:	2301      	movs	r3, #1
 8015e92:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015e94:	e001      	b.n	8015e9a <osKernelGetState+0x32>
        state = osKernelInactive;
 8015e96:	2300      	movs	r3, #0
 8015e98:	607b      	str	r3, [r7, #4]
      break;
 8015e9a:	bf00      	nop
  }

  return (state);
 8015e9c:	687b      	ldr	r3, [r7, #4]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3708      	adds	r7, #8
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	20000374 	.word	0x20000374

08015eac <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b084      	sub	sp, #16
 8015eb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015eb2:	f3ef 8305 	mrs	r3, IPSR
 8015eb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8015eb8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d10f      	bne.n	8015ede <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8015ec2:	607b      	str	r3, [r7, #4]
  return(result);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d105      	bne.n	8015ed6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015eca:	f3ef 8311 	mrs	r3, BASEPRI
 8015ece:	603b      	str	r3, [r7, #0]
  return(result);
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d007      	beq.n	8015ee6 <osKernelStart+0x3a>
 8015ed6:	4b0f      	ldr	r3, [pc, #60]	; (8015f14 <osKernelStart+0x68>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b02      	cmp	r3, #2
 8015edc:	d103      	bne.n	8015ee6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8015ede:	f06f 0305 	mvn.w	r3, #5
 8015ee2:	60fb      	str	r3, [r7, #12]
 8015ee4:	e010      	b.n	8015f08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015ee6:	4b0b      	ldr	r3, [pc, #44]	; (8015f14 <osKernelStart+0x68>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d109      	bne.n	8015f02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015eee:	f7ff ff7f 	bl	8015df0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015ef2:	4b08      	ldr	r3, [pc, #32]	; (8015f14 <osKernelStart+0x68>)
 8015ef4:	2202      	movs	r2, #2
 8015ef6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015ef8:	f002 f9c8 	bl	801828c <vTaskStartScheduler>
      stat = osOK;
 8015efc:	2300      	movs	r3, #0
 8015efe:	60fb      	str	r3, [r7, #12]
 8015f00:	e002      	b.n	8015f08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8015f02:	f04f 33ff 	mov.w	r3, #4294967295
 8015f06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015f08:	68fb      	ldr	r3, [r7, #12]
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	3710      	adds	r7, #16
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	bd80      	pop	{r7, pc}
 8015f12:	bf00      	nop
 8015f14:	20000374 	.word	0x20000374

08015f18 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f1e:	f3ef 8305 	mrs	r3, IPSR
 8015f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f24:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d10f      	bne.n	8015f4a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8015f2e:	607b      	str	r3, [r7, #4]
  return(result);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d105      	bne.n	8015f42 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f36:	f3ef 8311 	mrs	r3, BASEPRI
 8015f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d007      	beq.n	8015f52 <osKernelGetTickCount+0x3a>
 8015f42:	4b08      	ldr	r3, [pc, #32]	; (8015f64 <osKernelGetTickCount+0x4c>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	2b02      	cmp	r3, #2
 8015f48:	d103      	bne.n	8015f52 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015f4a:	f002 fac3 	bl	80184d4 <xTaskGetTickCountFromISR>
 8015f4e:	60f8      	str	r0, [r7, #12]
 8015f50:	e002      	b.n	8015f58 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8015f52:	f002 faaf 	bl	80184b4 <xTaskGetTickCount>
 8015f56:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015f58:	68fb      	ldr	r3, [r7, #12]
}
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	20000374 	.word	0x20000374

08015f68 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8015f68:	b480      	push	{r7}
 8015f6a:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8015f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	46bd      	mov	sp, r7
 8015f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f78:	4770      	bx	lr
	...

08015f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b090      	sub	sp, #64	; 0x40
 8015f80:	af04      	add	r7, sp, #16
 8015f82:	60f8      	str	r0, [r7, #12]
 8015f84:	60b9      	str	r1, [r7, #8]
 8015f86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f8c:	f3ef 8305 	mrs	r3, IPSR
 8015f90:	61fb      	str	r3, [r7, #28]
  return(result);
 8015f92:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f040 808f 	bne.w	80160b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f9a:	f3ef 8310 	mrs	r3, PRIMASK
 8015f9e:	61bb      	str	r3, [r7, #24]
  return(result);
 8015fa0:	69bb      	ldr	r3, [r7, #24]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d105      	bne.n	8015fb2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015fa6:	f3ef 8311 	mrs	r3, BASEPRI
 8015faa:	617b      	str	r3, [r7, #20]
  return(result);
 8015fac:	697b      	ldr	r3, [r7, #20]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d003      	beq.n	8015fba <osThreadNew+0x3e>
 8015fb2:	4b44      	ldr	r3, [pc, #272]	; (80160c4 <osThreadNew+0x148>)
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b02      	cmp	r3, #2
 8015fb8:	d07e      	beq.n	80160b8 <osThreadNew+0x13c>
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d07b      	beq.n	80160b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8015fc0:	2380      	movs	r3, #128	; 0x80
 8015fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8015fc4:	2318      	movs	r3, #24
 8015fc6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8015fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d045      	beq.n	8016064 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d002      	beq.n	8015fe6 <osThreadNew+0x6a>
        name = attr->name;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	699b      	ldr	r3, [r3, #24]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d002      	beq.n	8015ff4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	699b      	ldr	r3, [r3, #24]
 8015ff2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d008      	beq.n	801600c <osThreadNew+0x90>
 8015ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ffc:	2b38      	cmp	r3, #56	; 0x38
 8015ffe:	d805      	bhi.n	801600c <osThreadNew+0x90>
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	685b      	ldr	r3, [r3, #4]
 8016004:	f003 0301 	and.w	r3, r3, #1
 8016008:	2b00      	cmp	r3, #0
 801600a:	d001      	beq.n	8016010 <osThreadNew+0x94>
        return (NULL);
 801600c:	2300      	movs	r3, #0
 801600e:	e054      	b.n	80160ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	695b      	ldr	r3, [r3, #20]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d003      	beq.n	8016020 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	695b      	ldr	r3, [r3, #20]
 801601c:	089b      	lsrs	r3, r3, #2
 801601e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	689b      	ldr	r3, [r3, #8]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d00e      	beq.n	8016046 <osThreadNew+0xca>
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	68db      	ldr	r3, [r3, #12]
 801602c:	2b5b      	cmp	r3, #91	; 0x5b
 801602e:	d90a      	bls.n	8016046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8016034:	2b00      	cmp	r3, #0
 8016036:	d006      	beq.n	8016046 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	695b      	ldr	r3, [r3, #20]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d002      	beq.n	8016046 <osThreadNew+0xca>
        mem = 1;
 8016040:	2301      	movs	r3, #1
 8016042:	623b      	str	r3, [r7, #32]
 8016044:	e010      	b.n	8016068 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d10c      	bne.n	8016068 <osThreadNew+0xec>
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	68db      	ldr	r3, [r3, #12]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d108      	bne.n	8016068 <osThreadNew+0xec>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	691b      	ldr	r3, [r3, #16]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d104      	bne.n	8016068 <osThreadNew+0xec>
          mem = 0;
 801605e:	2300      	movs	r3, #0
 8016060:	623b      	str	r3, [r7, #32]
 8016062:	e001      	b.n	8016068 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8016064:	2300      	movs	r3, #0
 8016066:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8016068:	6a3b      	ldr	r3, [r7, #32]
 801606a:	2b01      	cmp	r3, #1
 801606c:	d110      	bne.n	8016090 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8016076:	9202      	str	r2, [sp, #8]
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016084:	68f8      	ldr	r0, [r7, #12]
 8016086:	f001 fea5 	bl	8017dd4 <xTaskCreateStatic>
 801608a:	4603      	mov	r3, r0
 801608c:	613b      	str	r3, [r7, #16]
 801608e:	e013      	b.n	80160b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8016090:	6a3b      	ldr	r3, [r7, #32]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d110      	bne.n	80160b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	b29a      	uxth	r2, r3
 801609a:	f107 0310 	add.w	r3, r7, #16
 801609e:	9301      	str	r3, [sp, #4]
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	9300      	str	r3, [sp, #0]
 80160a4:	68bb      	ldr	r3, [r7, #8]
 80160a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f001 fef3 	bl	8017e94 <xTaskCreate>
 80160ae:	4603      	mov	r3, r0
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	d001      	beq.n	80160b8 <osThreadNew+0x13c>
          hTask = NULL;
 80160b4:	2300      	movs	r3, #0
 80160b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80160b8:	693b      	ldr	r3, [r7, #16]
}
 80160ba:	4618      	mov	r0, r3
 80160bc:	3730      	adds	r7, #48	; 0x30
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	20000374 	.word	0x20000374

080160c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160d0:	f3ef 8305 	mrs	r3, IPSR
 80160d4:	613b      	str	r3, [r7, #16]
  return(result);
 80160d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d10f      	bne.n	80160fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160dc:	f3ef 8310 	mrs	r3, PRIMASK
 80160e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d105      	bne.n	80160f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80160e8:	f3ef 8311 	mrs	r3, BASEPRI
 80160ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d007      	beq.n	8016104 <osDelay+0x3c>
 80160f4:	4b0a      	ldr	r3, [pc, #40]	; (8016120 <osDelay+0x58>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2b02      	cmp	r3, #2
 80160fa:	d103      	bne.n	8016104 <osDelay+0x3c>
    stat = osErrorISR;
 80160fc:	f06f 0305 	mvn.w	r3, #5
 8016100:	617b      	str	r3, [r7, #20]
 8016102:	e007      	b.n	8016114 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8016104:	2300      	movs	r3, #0
 8016106:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d002      	beq.n	8016114 <osDelay+0x4c>
      vTaskDelay(ticks);
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f002 f886 	bl	8018220 <vTaskDelay>
    }
  }

  return (stat);
 8016114:	697b      	ldr	r3, [r7, #20]
}
 8016116:	4618      	mov	r0, r3
 8016118:	3718      	adds	r7, #24
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	20000374 	.word	0x20000374

08016124 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8016124:	b580      	push	{r7, lr}
 8016126:	b088      	sub	sp, #32
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801612c:	f3ef 8305 	mrs	r3, IPSR
 8016130:	617b      	str	r3, [r7, #20]
  return(result);
 8016132:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8016134:	2b00      	cmp	r3, #0
 8016136:	d10f      	bne.n	8016158 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016138:	f3ef 8310 	mrs	r3, PRIMASK
 801613c:	613b      	str	r3, [r7, #16]
  return(result);
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d105      	bne.n	8016150 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016144:	f3ef 8311 	mrs	r3, BASEPRI
 8016148:	60fb      	str	r3, [r7, #12]
  return(result);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d007      	beq.n	8016160 <osDelayUntil+0x3c>
 8016150:	4b13      	ldr	r3, [pc, #76]	; (80161a0 <osDelayUntil+0x7c>)
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	2b02      	cmp	r3, #2
 8016156:	d103      	bne.n	8016160 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8016158:	f06f 0305 	mvn.w	r3, #5
 801615c:	61fb      	str	r3, [r7, #28]
 801615e:	e019      	b.n	8016194 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8016160:	2300      	movs	r3, #0
 8016162:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8016164:	f002 f9a6 	bl	80184b4 <xTaskGetTickCount>
 8016168:	4603      	mov	r3, r0
 801616a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	687a      	ldr	r2, [r7, #4]
 8016170:	1ad3      	subs	r3, r2, r3
 8016172:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8016174:	69bb      	ldr	r3, [r7, #24]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d009      	beq.n	801618e <osDelayUntil+0x6a>
 801617a:	69bb      	ldr	r3, [r7, #24]
 801617c:	2b00      	cmp	r3, #0
 801617e:	db06      	blt.n	801618e <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8016180:	f107 0308 	add.w	r3, r7, #8
 8016184:	69b9      	ldr	r1, [r7, #24]
 8016186:	4618      	mov	r0, r3
 8016188:	f001 ffca 	bl	8018120 <vTaskDelayUntil>
 801618c:	e002      	b.n	8016194 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 801618e:	f06f 0303 	mvn.w	r3, #3
 8016192:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8016194:	69fb      	ldr	r3, [r7, #28]
}
 8016196:	4618      	mov	r0, r3
 8016198:	3720      	adds	r7, #32
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	20000374 	.word	0x20000374

080161a4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b08a      	sub	sp, #40	; 0x28
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80161ac:	2300      	movs	r3, #0
 80161ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161b0:	f3ef 8305 	mrs	r3, IPSR
 80161b4:	613b      	str	r3, [r7, #16]
  return(result);
 80161b6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f040 8085 	bne.w	80162c8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161be:	f3ef 8310 	mrs	r3, PRIMASK
 80161c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d105      	bne.n	80161d6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80161ca:	f3ef 8311 	mrs	r3, BASEPRI
 80161ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80161d0:	68bb      	ldr	r3, [r7, #8]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d003      	beq.n	80161de <osMutexNew+0x3a>
 80161d6:	4b3f      	ldr	r3, [pc, #252]	; (80162d4 <osMutexNew+0x130>)
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	2b02      	cmp	r3, #2
 80161dc:	d074      	beq.n	80162c8 <osMutexNew+0x124>
    if (attr != NULL) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d003      	beq.n	80161ec <osMutexNew+0x48>
      type = attr->attr_bits;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	623b      	str	r3, [r7, #32]
 80161ea:	e001      	b.n	80161f0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80161ec:	2300      	movs	r3, #0
 80161ee:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80161f0:	6a3b      	ldr	r3, [r7, #32]
 80161f2:	f003 0301 	and.w	r3, r3, #1
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d002      	beq.n	8016200 <osMutexNew+0x5c>
      rmtx = 1U;
 80161fa:	2301      	movs	r3, #1
 80161fc:	61fb      	str	r3, [r7, #28]
 80161fe:	e001      	b.n	8016204 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8016200:	2300      	movs	r3, #0
 8016202:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	f003 0308 	and.w	r3, r3, #8
 801620a:	2b00      	cmp	r3, #0
 801620c:	d15c      	bne.n	80162c8 <osMutexNew+0x124>
      mem = -1;
 801620e:	f04f 33ff 	mov.w	r3, #4294967295
 8016212:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d015      	beq.n	8016246 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	689b      	ldr	r3, [r3, #8]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d006      	beq.n	8016230 <osMutexNew+0x8c>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	68db      	ldr	r3, [r3, #12]
 8016226:	2b4f      	cmp	r3, #79	; 0x4f
 8016228:	d902      	bls.n	8016230 <osMutexNew+0x8c>
          mem = 1;
 801622a:	2301      	movs	r3, #1
 801622c:	61bb      	str	r3, [r7, #24]
 801622e:	e00c      	b.n	801624a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	689b      	ldr	r3, [r3, #8]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d108      	bne.n	801624a <osMutexNew+0xa6>
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	68db      	ldr	r3, [r3, #12]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d104      	bne.n	801624a <osMutexNew+0xa6>
            mem = 0;
 8016240:	2300      	movs	r3, #0
 8016242:	61bb      	str	r3, [r7, #24]
 8016244:	e001      	b.n	801624a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8016246:	2300      	movs	r3, #0
 8016248:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	2b01      	cmp	r3, #1
 801624e:	d112      	bne.n	8016276 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8016250:	69fb      	ldr	r3, [r7, #28]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d007      	beq.n	8016266 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	689b      	ldr	r3, [r3, #8]
 801625a:	4619      	mov	r1, r3
 801625c:	2004      	movs	r0, #4
 801625e:	f000 fe4c 	bl	8016efa <xQueueCreateMutexStatic>
 8016262:	6278      	str	r0, [r7, #36]	; 0x24
 8016264:	e016      	b.n	8016294 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	689b      	ldr	r3, [r3, #8]
 801626a:	4619      	mov	r1, r3
 801626c:	2001      	movs	r0, #1
 801626e:	f000 fe44 	bl	8016efa <xQueueCreateMutexStatic>
 8016272:	6278      	str	r0, [r7, #36]	; 0x24
 8016274:	e00e      	b.n	8016294 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8016276:	69bb      	ldr	r3, [r7, #24]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d10b      	bne.n	8016294 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 801627c:	69fb      	ldr	r3, [r7, #28]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d004      	beq.n	801628c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8016282:	2004      	movs	r0, #4
 8016284:	f000 fe21 	bl	8016eca <xQueueCreateMutex>
 8016288:	6278      	str	r0, [r7, #36]	; 0x24
 801628a:	e003      	b.n	8016294 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 801628c:	2001      	movs	r0, #1
 801628e:	f000 fe1c 	bl	8016eca <xQueueCreateMutex>
 8016292:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00c      	beq.n	80162b4 <osMutexNew+0x110>
        if (attr != NULL) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d003      	beq.n	80162a8 <osMutexNew+0x104>
          name = attr->name;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	617b      	str	r3, [r7, #20]
 80162a6:	e001      	b.n	80162ac <osMutexNew+0x108>
        } else {
          name = NULL;
 80162a8:	2300      	movs	r3, #0
 80162aa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80162ac:	6979      	ldr	r1, [r7, #20]
 80162ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162b0:	f001 fd0a 	bl	8017cc8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d006      	beq.n	80162c8 <osMutexNew+0x124>
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d003      	beq.n	80162c8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80162c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c2:	f043 0301 	orr.w	r3, r3, #1
 80162c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80162c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3728      	adds	r7, #40	; 0x28
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	20000374 	.word	0x20000374

080162d8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80162d8:	b580      	push	{r7, lr}
 80162da:	b088      	sub	sp, #32
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
 80162e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f023 0301 	bic.w	r3, r3, #1
 80162e8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f003 0301 	and.w	r3, r3, #1
 80162f0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80162f2:	2300      	movs	r3, #0
 80162f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162f6:	f3ef 8305 	mrs	r3, IPSR
 80162fa:	613b      	str	r3, [r7, #16]
  return(result);
 80162fc:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d10f      	bne.n	8016322 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016302:	f3ef 8310 	mrs	r3, PRIMASK
 8016306:	60fb      	str	r3, [r7, #12]
  return(result);
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d105      	bne.n	801631a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801630e:	f3ef 8311 	mrs	r3, BASEPRI
 8016312:	60bb      	str	r3, [r7, #8]
  return(result);
 8016314:	68bb      	ldr	r3, [r7, #8]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d007      	beq.n	801632a <osMutexAcquire+0x52>
 801631a:	4b1d      	ldr	r3, [pc, #116]	; (8016390 <osMutexAcquire+0xb8>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	2b02      	cmp	r3, #2
 8016320:	d103      	bne.n	801632a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8016322:	f06f 0305 	mvn.w	r3, #5
 8016326:	61fb      	str	r3, [r7, #28]
 8016328:	e02c      	b.n	8016384 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d103      	bne.n	8016338 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8016330:	f06f 0303 	mvn.w	r3, #3
 8016334:	61fb      	str	r3, [r7, #28]
 8016336:	e025      	b.n	8016384 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8016338:	697b      	ldr	r3, [r7, #20]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d011      	beq.n	8016362 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801633e:	6839      	ldr	r1, [r7, #0]
 8016340:	69b8      	ldr	r0, [r7, #24]
 8016342:	f000 fe2a 	bl	8016f9a <xQueueTakeMutexRecursive>
 8016346:	4603      	mov	r3, r0
 8016348:	2b01      	cmp	r3, #1
 801634a:	d01b      	beq.n	8016384 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d003      	beq.n	801635a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8016352:	f06f 0301 	mvn.w	r3, #1
 8016356:	61fb      	str	r3, [r7, #28]
 8016358:	e014      	b.n	8016384 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801635a:	f06f 0302 	mvn.w	r3, #2
 801635e:	61fb      	str	r3, [r7, #28]
 8016360:	e010      	b.n	8016384 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8016362:	6839      	ldr	r1, [r7, #0]
 8016364:	69b8      	ldr	r0, [r7, #24]
 8016366:	f001 f9cf 	bl	8017708 <xQueueSemaphoreTake>
 801636a:	4603      	mov	r3, r0
 801636c:	2b01      	cmp	r3, #1
 801636e:	d009      	beq.n	8016384 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8016370:	683b      	ldr	r3, [r7, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d003      	beq.n	801637e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8016376:	f06f 0301 	mvn.w	r3, #1
 801637a:	61fb      	str	r3, [r7, #28]
 801637c:	e002      	b.n	8016384 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801637e:	f06f 0302 	mvn.w	r3, #2
 8016382:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8016384:	69fb      	ldr	r3, [r7, #28]
}
 8016386:	4618      	mov	r0, r3
 8016388:	3720      	adds	r7, #32
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop
 8016390:	20000374 	.word	0x20000374

08016394 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8016394:	b580      	push	{r7, lr}
 8016396:	b088      	sub	sp, #32
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	f023 0301 	bic.w	r3, r3, #1
 80163a2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f003 0301 	and.w	r3, r3, #1
 80163aa:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80163ac:	2300      	movs	r3, #0
 80163ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163b0:	f3ef 8305 	mrs	r3, IPSR
 80163b4:	613b      	str	r3, [r7, #16]
  return(result);
 80163b6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d10f      	bne.n	80163dc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163bc:	f3ef 8310 	mrs	r3, PRIMASK
 80163c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d105      	bne.n	80163d4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80163c8:	f3ef 8311 	mrs	r3, BASEPRI
 80163cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80163ce:	68bb      	ldr	r3, [r7, #8]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d007      	beq.n	80163e4 <osMutexRelease+0x50>
 80163d4:	4b16      	ldr	r3, [pc, #88]	; (8016430 <osMutexRelease+0x9c>)
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	2b02      	cmp	r3, #2
 80163da:	d103      	bne.n	80163e4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80163dc:	f06f 0305 	mvn.w	r3, #5
 80163e0:	61fb      	str	r3, [r7, #28]
 80163e2:	e01f      	b.n	8016424 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d103      	bne.n	80163f2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80163ea:	f06f 0303 	mvn.w	r3, #3
 80163ee:	61fb      	str	r3, [r7, #28]
 80163f0:	e018      	b.n	8016424 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80163f2:	697b      	ldr	r3, [r7, #20]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d009      	beq.n	801640c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80163f8:	69b8      	ldr	r0, [r7, #24]
 80163fa:	f000 fd99 	bl	8016f30 <xQueueGiveMutexRecursive>
 80163fe:	4603      	mov	r3, r0
 8016400:	2b01      	cmp	r3, #1
 8016402:	d00f      	beq.n	8016424 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016404:	f06f 0302 	mvn.w	r3, #2
 8016408:	61fb      	str	r3, [r7, #28]
 801640a:	e00b      	b.n	8016424 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801640c:	2300      	movs	r3, #0
 801640e:	2200      	movs	r2, #0
 8016410:	2100      	movs	r1, #0
 8016412:	69b8      	ldr	r0, [r7, #24]
 8016414:	f000 fe66 	bl	80170e4 <xQueueGenericSend>
 8016418:	4603      	mov	r3, r0
 801641a:	2b01      	cmp	r3, #1
 801641c:	d002      	beq.n	8016424 <osMutexRelease+0x90>
        stat = osErrorResource;
 801641e:	f06f 0302 	mvn.w	r3, #2
 8016422:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8016424:	69fb      	ldr	r3, [r7, #28]
}
 8016426:	4618      	mov	r0, r3
 8016428:	3720      	adds	r7, #32
 801642a:	46bd      	mov	sp, r7
 801642c:	bd80      	pop	{r7, pc}
 801642e:	bf00      	nop
 8016430:	20000374 	.word	0x20000374

08016434 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016434:	b580      	push	{r7, lr}
 8016436:	b08c      	sub	sp, #48	; 0x30
 8016438:	af02      	add	r7, sp, #8
 801643a:	60f8      	str	r0, [r7, #12]
 801643c:	60b9      	str	r1, [r7, #8]
 801643e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016440:	2300      	movs	r3, #0
 8016442:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016444:	f3ef 8305 	mrs	r3, IPSR
 8016448:	61bb      	str	r3, [r7, #24]
  return(result);
 801644a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801644c:	2b00      	cmp	r3, #0
 801644e:	f040 8087 	bne.w	8016560 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016452:	f3ef 8310 	mrs	r3, PRIMASK
 8016456:	617b      	str	r3, [r7, #20]
  return(result);
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d105      	bne.n	801646a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801645e:	f3ef 8311 	mrs	r3, BASEPRI
 8016462:	613b      	str	r3, [r7, #16]
  return(result);
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d003      	beq.n	8016472 <osSemaphoreNew+0x3e>
 801646a:	4b40      	ldr	r3, [pc, #256]	; (801656c <osSemaphoreNew+0x138>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	2b02      	cmp	r3, #2
 8016470:	d076      	beq.n	8016560 <osSemaphoreNew+0x12c>
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d073      	beq.n	8016560 <osSemaphoreNew+0x12c>
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	429a      	cmp	r2, r3
 801647e:	d86f      	bhi.n	8016560 <osSemaphoreNew+0x12c>
    mem = -1;
 8016480:	f04f 33ff 	mov.w	r3, #4294967295
 8016484:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2b00      	cmp	r3, #0
 801648a:	d015      	beq.n	80164b8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	689b      	ldr	r3, [r3, #8]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d006      	beq.n	80164a2 <osSemaphoreNew+0x6e>
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	2b4f      	cmp	r3, #79	; 0x4f
 801649a:	d902      	bls.n	80164a2 <osSemaphoreNew+0x6e>
        mem = 1;
 801649c:	2301      	movs	r3, #1
 801649e:	623b      	str	r3, [r7, #32]
 80164a0:	e00c      	b.n	80164bc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	689b      	ldr	r3, [r3, #8]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d108      	bne.n	80164bc <osSemaphoreNew+0x88>
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	68db      	ldr	r3, [r3, #12]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d104      	bne.n	80164bc <osSemaphoreNew+0x88>
          mem = 0;
 80164b2:	2300      	movs	r3, #0
 80164b4:	623b      	str	r3, [r7, #32]
 80164b6:	e001      	b.n	80164bc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80164b8:	2300      	movs	r3, #0
 80164ba:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80164bc:	6a3b      	ldr	r3, [r7, #32]
 80164be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164c2:	d04d      	beq.n	8016560 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	2b01      	cmp	r3, #1
 80164c8:	d129      	bne.n	801651e <osSemaphoreNew+0xea>
        if (mem == 1) {
 80164ca:	6a3b      	ldr	r3, [r7, #32]
 80164cc:	2b01      	cmp	r3, #1
 80164ce:	d10b      	bne.n	80164e8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	689a      	ldr	r2, [r3, #8]
 80164d4:	2303      	movs	r3, #3
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	4613      	mov	r3, r2
 80164da:	2200      	movs	r2, #0
 80164dc:	2100      	movs	r1, #0
 80164de:	2001      	movs	r0, #1
 80164e0:	f000 fbf8 	bl	8016cd4 <xQueueGenericCreateStatic>
 80164e4:	6278      	str	r0, [r7, #36]	; 0x24
 80164e6:	e005      	b.n	80164f4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80164e8:	2203      	movs	r2, #3
 80164ea:	2100      	movs	r1, #0
 80164ec:	2001      	movs	r0, #1
 80164ee:	f000 fc6e 	bl	8016dce <xQueueGenericCreate>
 80164f2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80164f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d022      	beq.n	8016540 <osSemaphoreNew+0x10c>
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d01f      	beq.n	8016540 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016500:	2300      	movs	r3, #0
 8016502:	2200      	movs	r2, #0
 8016504:	2100      	movs	r1, #0
 8016506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016508:	f000 fdec 	bl	80170e4 <xQueueGenericSend>
 801650c:	4603      	mov	r3, r0
 801650e:	2b01      	cmp	r3, #1
 8016510:	d016      	beq.n	8016540 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8016512:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016514:	f001 fa8b 	bl	8017a2e <vQueueDelete>
            hSemaphore = NULL;
 8016518:	2300      	movs	r3, #0
 801651a:	627b      	str	r3, [r7, #36]	; 0x24
 801651c:	e010      	b.n	8016540 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801651e:	6a3b      	ldr	r3, [r7, #32]
 8016520:	2b01      	cmp	r3, #1
 8016522:	d108      	bne.n	8016536 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	689b      	ldr	r3, [r3, #8]
 8016528:	461a      	mov	r2, r3
 801652a:	68b9      	ldr	r1, [r7, #8]
 801652c:	68f8      	ldr	r0, [r7, #12]
 801652e:	f000 fd6b 	bl	8017008 <xQueueCreateCountingSemaphoreStatic>
 8016532:	6278      	str	r0, [r7, #36]	; 0x24
 8016534:	e004      	b.n	8016540 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016536:	68b9      	ldr	r1, [r7, #8]
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f000 fd9e 	bl	801707a <xQueueCreateCountingSemaphore>
 801653e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	2b00      	cmp	r3, #0
 8016544:	d00c      	beq.n	8016560 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2b00      	cmp	r3, #0
 801654a:	d003      	beq.n	8016554 <osSemaphoreNew+0x120>
          name = attr->name;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	61fb      	str	r3, [r7, #28]
 8016552:	e001      	b.n	8016558 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8016554:	2300      	movs	r3, #0
 8016556:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016558:	69f9      	ldr	r1, [r7, #28]
 801655a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801655c:	f001 fbb4 	bl	8017cc8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8016560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016562:	4618      	mov	r0, r3
 8016564:	3728      	adds	r7, #40	; 0x28
 8016566:	46bd      	mov	sp, r7
 8016568:	bd80      	pop	{r7, pc}
 801656a:	bf00      	nop
 801656c:	20000374 	.word	0x20000374

08016570 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016570:	b580      	push	{r7, lr}
 8016572:	b088      	sub	sp, #32
 8016574:	af00      	add	r7, sp, #0
 8016576:	6078      	str	r0, [r7, #4]
 8016578:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801657e:	2300      	movs	r3, #0
 8016580:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d103      	bne.n	8016590 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8016588:	f06f 0303 	mvn.w	r3, #3
 801658c:	61fb      	str	r3, [r7, #28]
 801658e:	e04b      	b.n	8016628 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016590:	f3ef 8305 	mrs	r3, IPSR
 8016594:	617b      	str	r3, [r7, #20]
  return(result);
 8016596:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016598:	2b00      	cmp	r3, #0
 801659a:	d10f      	bne.n	80165bc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801659c:	f3ef 8310 	mrs	r3, PRIMASK
 80165a0:	613b      	str	r3, [r7, #16]
  return(result);
 80165a2:	693b      	ldr	r3, [r7, #16]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d105      	bne.n	80165b4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80165a8:	f3ef 8311 	mrs	r3, BASEPRI
 80165ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d026      	beq.n	8016602 <osSemaphoreAcquire+0x92>
 80165b4:	4b1f      	ldr	r3, [pc, #124]	; (8016634 <osSemaphoreAcquire+0xc4>)
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	2b02      	cmp	r3, #2
 80165ba:	d122      	bne.n	8016602 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d003      	beq.n	80165ca <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80165c2:	f06f 0303 	mvn.w	r3, #3
 80165c6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80165c8:	e02d      	b.n	8016626 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80165ca:	2300      	movs	r3, #0
 80165cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80165ce:	f107 0308 	add.w	r3, r7, #8
 80165d2:	461a      	mov	r2, r3
 80165d4:	2100      	movs	r1, #0
 80165d6:	69b8      	ldr	r0, [r7, #24]
 80165d8:	f001 f9a6 	bl	8017928 <xQueueReceiveFromISR>
 80165dc:	4603      	mov	r3, r0
 80165de:	2b01      	cmp	r3, #1
 80165e0:	d003      	beq.n	80165ea <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80165e2:	f06f 0302 	mvn.w	r3, #2
 80165e6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80165e8:	e01d      	b.n	8016626 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d01a      	beq.n	8016626 <osSemaphoreAcquire+0xb6>
 80165f0:	4b11      	ldr	r3, [pc, #68]	; (8016638 <osSemaphoreAcquire+0xc8>)
 80165f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f6:	601a      	str	r2, [r3, #0]
 80165f8:	f3bf 8f4f 	dsb	sy
 80165fc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8016600:	e011      	b.n	8016626 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8016602:	6839      	ldr	r1, [r7, #0]
 8016604:	69b8      	ldr	r0, [r7, #24]
 8016606:	f001 f87f 	bl	8017708 <xQueueSemaphoreTake>
 801660a:	4603      	mov	r3, r0
 801660c:	2b01      	cmp	r3, #1
 801660e:	d00b      	beq.n	8016628 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d003      	beq.n	801661e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8016616:	f06f 0301 	mvn.w	r3, #1
 801661a:	61fb      	str	r3, [r7, #28]
 801661c:	e004      	b.n	8016628 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801661e:	f06f 0302 	mvn.w	r3, #2
 8016622:	61fb      	str	r3, [r7, #28]
 8016624:	e000      	b.n	8016628 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8016626:	bf00      	nop
      }
    }
  }

  return (stat);
 8016628:	69fb      	ldr	r3, [r7, #28]
}
 801662a:	4618      	mov	r0, r3
 801662c:	3720      	adds	r7, #32
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop
 8016634:	20000374 	.word	0x20000374
 8016638:	e000ed04 	.word	0xe000ed04

0801663c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801663c:	b580      	push	{r7, lr}
 801663e:	b088      	sub	sp, #32
 8016640:	af00      	add	r7, sp, #0
 8016642:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016648:	2300      	movs	r3, #0
 801664a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d103      	bne.n	801665a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8016652:	f06f 0303 	mvn.w	r3, #3
 8016656:	61fb      	str	r3, [r7, #28]
 8016658:	e03e      	b.n	80166d8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801665a:	f3ef 8305 	mrs	r3, IPSR
 801665e:	617b      	str	r3, [r7, #20]
  return(result);
 8016660:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016662:	2b00      	cmp	r3, #0
 8016664:	d10f      	bne.n	8016686 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016666:	f3ef 8310 	mrs	r3, PRIMASK
 801666a:	613b      	str	r3, [r7, #16]
  return(result);
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d105      	bne.n	801667e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016672:	f3ef 8311 	mrs	r3, BASEPRI
 8016676:	60fb      	str	r3, [r7, #12]
  return(result);
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d01e      	beq.n	80166bc <osSemaphoreRelease+0x80>
 801667e:	4b19      	ldr	r3, [pc, #100]	; (80166e4 <osSemaphoreRelease+0xa8>)
 8016680:	681b      	ldr	r3, [r3, #0]
 8016682:	2b02      	cmp	r3, #2
 8016684:	d11a      	bne.n	80166bc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8016686:	2300      	movs	r3, #0
 8016688:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801668a:	f107 0308 	add.w	r3, r7, #8
 801668e:	4619      	mov	r1, r3
 8016690:	69b8      	ldr	r0, [r7, #24]
 8016692:	f000 fec5 	bl	8017420 <xQueueGiveFromISR>
 8016696:	4603      	mov	r3, r0
 8016698:	2b01      	cmp	r3, #1
 801669a:	d003      	beq.n	80166a4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 801669c:	f06f 0302 	mvn.w	r3, #2
 80166a0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80166a2:	e018      	b.n	80166d6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d015      	beq.n	80166d6 <osSemaphoreRelease+0x9a>
 80166aa:	4b0f      	ldr	r3, [pc, #60]	; (80166e8 <osSemaphoreRelease+0xac>)
 80166ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166b0:	601a      	str	r2, [r3, #0]
 80166b2:	f3bf 8f4f 	dsb	sy
 80166b6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80166ba:	e00c      	b.n	80166d6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80166bc:	2300      	movs	r3, #0
 80166be:	2200      	movs	r2, #0
 80166c0:	2100      	movs	r1, #0
 80166c2:	69b8      	ldr	r0, [r7, #24]
 80166c4:	f000 fd0e 	bl	80170e4 <xQueueGenericSend>
 80166c8:	4603      	mov	r3, r0
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d004      	beq.n	80166d8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80166ce:	f06f 0302 	mvn.w	r3, #2
 80166d2:	61fb      	str	r3, [r7, #28]
 80166d4:	e000      	b.n	80166d8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80166d6:	bf00      	nop
    }
  }

  return (stat);
 80166d8:	69fb      	ldr	r3, [r7, #28]
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3720      	adds	r7, #32
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	20000374 	.word	0x20000374
 80166e8:	e000ed04 	.word	0xe000ed04

080166ec <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80166ec:	b580      	push	{r7, lr}
 80166ee:	b088      	sub	sp, #32
 80166f0:	af00      	add	r7, sp, #0
 80166f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166f8:	f3ef 8305 	mrs	r3, IPSR
 80166fc:	617b      	str	r3, [r7, #20]
  return(result);
 80166fe:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016700:	2b00      	cmp	r3, #0
 8016702:	d10f      	bne.n	8016724 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016704:	f3ef 8310 	mrs	r3, PRIMASK
 8016708:	613b      	str	r3, [r7, #16]
  return(result);
 801670a:	693b      	ldr	r3, [r7, #16]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d105      	bne.n	801671c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016710:	f3ef 8311 	mrs	r3, BASEPRI
 8016714:	60fb      	str	r3, [r7, #12]
  return(result);
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d007      	beq.n	801672c <osSemaphoreDelete+0x40>
 801671c:	4b0d      	ldr	r3, [pc, #52]	; (8016754 <osSemaphoreDelete+0x68>)
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b02      	cmp	r3, #2
 8016722:	d103      	bne.n	801672c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8016724:	f06f 0305 	mvn.w	r3, #5
 8016728:	61fb      	str	r3, [r7, #28]
 801672a:	e00e      	b.n	801674a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801672c:	69bb      	ldr	r3, [r7, #24]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d103      	bne.n	801673a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8016732:	f06f 0303 	mvn.w	r3, #3
 8016736:	61fb      	str	r3, [r7, #28]
 8016738:	e007      	b.n	801674a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801673a:	69b8      	ldr	r0, [r7, #24]
 801673c:	f001 faec 	bl	8017d18 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016740:	2300      	movs	r3, #0
 8016742:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8016744:	69b8      	ldr	r0, [r7, #24]
 8016746:	f001 f972 	bl	8017a2e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801674a:	69fb      	ldr	r3, [r7, #28]
}
 801674c:	4618      	mov	r0, r3
 801674e:	3720      	adds	r7, #32
 8016750:	46bd      	mov	sp, r7
 8016752:	bd80      	pop	{r7, pc}
 8016754:	20000374 	.word	0x20000374

08016758 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016758:	b580      	push	{r7, lr}
 801675a:	b08c      	sub	sp, #48	; 0x30
 801675c:	af02      	add	r7, sp, #8
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8016764:	2300      	movs	r3, #0
 8016766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016768:	f3ef 8305 	mrs	r3, IPSR
 801676c:	61bb      	str	r3, [r7, #24]
  return(result);
 801676e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016770:	2b00      	cmp	r3, #0
 8016772:	d170      	bne.n	8016856 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016774:	f3ef 8310 	mrs	r3, PRIMASK
 8016778:	617b      	str	r3, [r7, #20]
  return(result);
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d105      	bne.n	801678c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016780:	f3ef 8311 	mrs	r3, BASEPRI
 8016784:	613b      	str	r3, [r7, #16]
  return(result);
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d003      	beq.n	8016794 <osMessageQueueNew+0x3c>
 801678c:	4b34      	ldr	r3, [pc, #208]	; (8016860 <osMessageQueueNew+0x108>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	2b02      	cmp	r3, #2
 8016792:	d060      	beq.n	8016856 <osMessageQueueNew+0xfe>
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d05d      	beq.n	8016856 <osMessageQueueNew+0xfe>
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d05a      	beq.n	8016856 <osMessageQueueNew+0xfe>
    mem = -1;
 80167a0:	f04f 33ff 	mov.w	r3, #4294967295
 80167a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d029      	beq.n	8016800 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	689b      	ldr	r3, [r3, #8]
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d012      	beq.n	80167da <osMessageQueueNew+0x82>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	68db      	ldr	r3, [r3, #12]
 80167b8:	2b4f      	cmp	r3, #79	; 0x4f
 80167ba:	d90e      	bls.n	80167da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d00a      	beq.n	80167da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	695a      	ldr	r2, [r3, #20]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	68b9      	ldr	r1, [r7, #8]
 80167cc:	fb01 f303 	mul.w	r3, r1, r3
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d302      	bcc.n	80167da <osMessageQueueNew+0x82>
        mem = 1;
 80167d4:	2301      	movs	r3, #1
 80167d6:	623b      	str	r3, [r7, #32]
 80167d8:	e014      	b.n	8016804 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	689b      	ldr	r3, [r3, #8]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d110      	bne.n	8016804 <osMessageQueueNew+0xac>
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d10c      	bne.n	8016804 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d108      	bne.n	8016804 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	695b      	ldr	r3, [r3, #20]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d104      	bne.n	8016804 <osMessageQueueNew+0xac>
          mem = 0;
 80167fa:	2300      	movs	r3, #0
 80167fc:	623b      	str	r3, [r7, #32]
 80167fe:	e001      	b.n	8016804 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8016800:	2300      	movs	r3, #0
 8016802:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8016804:	6a3b      	ldr	r3, [r7, #32]
 8016806:	2b01      	cmp	r3, #1
 8016808:	d10c      	bne.n	8016824 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	691a      	ldr	r2, [r3, #16]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	6899      	ldr	r1, [r3, #8]
 8016812:	2300      	movs	r3, #0
 8016814:	9300      	str	r3, [sp, #0]
 8016816:	460b      	mov	r3, r1
 8016818:	68b9      	ldr	r1, [r7, #8]
 801681a:	68f8      	ldr	r0, [r7, #12]
 801681c:	f000 fa5a 	bl	8016cd4 <xQueueGenericCreateStatic>
 8016820:	6278      	str	r0, [r7, #36]	; 0x24
 8016822:	e008      	b.n	8016836 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8016824:	6a3b      	ldr	r3, [r7, #32]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d105      	bne.n	8016836 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801682a:	2200      	movs	r2, #0
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	68f8      	ldr	r0, [r7, #12]
 8016830:	f000 facd 	bl	8016dce <xQueueGenericCreate>
 8016834:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016838:	2b00      	cmp	r3, #0
 801683a:	d00c      	beq.n	8016856 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d003      	beq.n	801684a <osMessageQueueNew+0xf2>
        name = attr->name;
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	61fb      	str	r3, [r7, #28]
 8016848:	e001      	b.n	801684e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801684a:	2300      	movs	r3, #0
 801684c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801684e:	69f9      	ldr	r1, [r7, #28]
 8016850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016852:	f001 fa39 	bl	8017cc8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016858:	4618      	mov	r0, r3
 801685a:	3728      	adds	r7, #40	; 0x28
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	20000374 	.word	0x20000374

08016864 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016864:	b580      	push	{r7, lr}
 8016866:	b08a      	sub	sp, #40	; 0x28
 8016868:	af00      	add	r7, sp, #0
 801686a:	60f8      	str	r0, [r7, #12]
 801686c:	60b9      	str	r1, [r7, #8]
 801686e:	603b      	str	r3, [r7, #0]
 8016870:	4613      	mov	r3, r2
 8016872:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016878:	2300      	movs	r3, #0
 801687a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801687c:	f3ef 8305 	mrs	r3, IPSR
 8016880:	61fb      	str	r3, [r7, #28]
  return(result);
 8016882:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8016884:	2b00      	cmp	r3, #0
 8016886:	d10f      	bne.n	80168a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016888:	f3ef 8310 	mrs	r3, PRIMASK
 801688c:	61bb      	str	r3, [r7, #24]
  return(result);
 801688e:	69bb      	ldr	r3, [r7, #24]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d105      	bne.n	80168a0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016894:	f3ef 8311 	mrs	r3, BASEPRI
 8016898:	617b      	str	r3, [r7, #20]
  return(result);
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d02c      	beq.n	80168fa <osMessageQueuePut+0x96>
 80168a0:	4b28      	ldr	r3, [pc, #160]	; (8016944 <osMessageQueuePut+0xe0>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d128      	bne.n	80168fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80168a8:	6a3b      	ldr	r3, [r7, #32]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d005      	beq.n	80168ba <osMessageQueuePut+0x56>
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d002      	beq.n	80168ba <osMessageQueuePut+0x56>
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d003      	beq.n	80168c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80168ba:	f06f 0303 	mvn.w	r3, #3
 80168be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80168c0:	e039      	b.n	8016936 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80168c2:	2300      	movs	r3, #0
 80168c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80168c6:	f107 0210 	add.w	r2, r7, #16
 80168ca:	2300      	movs	r3, #0
 80168cc:	68b9      	ldr	r1, [r7, #8]
 80168ce:	6a38      	ldr	r0, [r7, #32]
 80168d0:	f000 fd0a 	bl	80172e8 <xQueueGenericSendFromISR>
 80168d4:	4603      	mov	r3, r0
 80168d6:	2b01      	cmp	r3, #1
 80168d8:	d003      	beq.n	80168e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80168da:	f06f 0302 	mvn.w	r3, #2
 80168de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80168e0:	e029      	b.n	8016936 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d026      	beq.n	8016936 <osMessageQueuePut+0xd2>
 80168e8:	4b17      	ldr	r3, [pc, #92]	; (8016948 <osMessageQueuePut+0xe4>)
 80168ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168ee:	601a      	str	r2, [r3, #0]
 80168f0:	f3bf 8f4f 	dsb	sy
 80168f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80168f8:	e01d      	b.n	8016936 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80168fa:	6a3b      	ldr	r3, [r7, #32]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d002      	beq.n	8016906 <osMessageQueuePut+0xa2>
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d103      	bne.n	801690e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8016906:	f06f 0303 	mvn.w	r3, #3
 801690a:	627b      	str	r3, [r7, #36]	; 0x24
 801690c:	e014      	b.n	8016938 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801690e:	2300      	movs	r3, #0
 8016910:	683a      	ldr	r2, [r7, #0]
 8016912:	68b9      	ldr	r1, [r7, #8]
 8016914:	6a38      	ldr	r0, [r7, #32]
 8016916:	f000 fbe5 	bl	80170e4 <xQueueGenericSend>
 801691a:	4603      	mov	r3, r0
 801691c:	2b01      	cmp	r3, #1
 801691e:	d00b      	beq.n	8016938 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d003      	beq.n	801692e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8016926:	f06f 0301 	mvn.w	r3, #1
 801692a:	627b      	str	r3, [r7, #36]	; 0x24
 801692c:	e004      	b.n	8016938 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801692e:	f06f 0302 	mvn.w	r3, #2
 8016932:	627b      	str	r3, [r7, #36]	; 0x24
 8016934:	e000      	b.n	8016938 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016936:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801693a:	4618      	mov	r0, r3
 801693c:	3728      	adds	r7, #40	; 0x28
 801693e:	46bd      	mov	sp, r7
 8016940:	bd80      	pop	{r7, pc}
 8016942:	bf00      	nop
 8016944:	20000374 	.word	0x20000374
 8016948:	e000ed04 	.word	0xe000ed04

0801694c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801694c:	b580      	push	{r7, lr}
 801694e:	b08a      	sub	sp, #40	; 0x28
 8016950:	af00      	add	r7, sp, #0
 8016952:	60f8      	str	r0, [r7, #12]
 8016954:	60b9      	str	r1, [r7, #8]
 8016956:	607a      	str	r2, [r7, #4]
 8016958:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801695e:	2300      	movs	r3, #0
 8016960:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016962:	f3ef 8305 	mrs	r3, IPSR
 8016966:	61fb      	str	r3, [r7, #28]
  return(result);
 8016968:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801696a:	2b00      	cmp	r3, #0
 801696c:	d10f      	bne.n	801698e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801696e:	f3ef 8310 	mrs	r3, PRIMASK
 8016972:	61bb      	str	r3, [r7, #24]
  return(result);
 8016974:	69bb      	ldr	r3, [r7, #24]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d105      	bne.n	8016986 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801697a:	f3ef 8311 	mrs	r3, BASEPRI
 801697e:	617b      	str	r3, [r7, #20]
  return(result);
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d02c      	beq.n	80169e0 <osMessageQueueGet+0x94>
 8016986:	4b28      	ldr	r3, [pc, #160]	; (8016a28 <osMessageQueueGet+0xdc>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	2b02      	cmp	r3, #2
 801698c:	d128      	bne.n	80169e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801698e:	6a3b      	ldr	r3, [r7, #32]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d005      	beq.n	80169a0 <osMessageQueueGet+0x54>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d002      	beq.n	80169a0 <osMessageQueueGet+0x54>
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d003      	beq.n	80169a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80169a0:	f06f 0303 	mvn.w	r3, #3
 80169a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80169a6:	e038      	b.n	8016a1a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80169a8:	2300      	movs	r3, #0
 80169aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80169ac:	f107 0310 	add.w	r3, r7, #16
 80169b0:	461a      	mov	r2, r3
 80169b2:	68b9      	ldr	r1, [r7, #8]
 80169b4:	6a38      	ldr	r0, [r7, #32]
 80169b6:	f000 ffb7 	bl	8017928 <xQueueReceiveFromISR>
 80169ba:	4603      	mov	r3, r0
 80169bc:	2b01      	cmp	r3, #1
 80169be:	d003      	beq.n	80169c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80169c0:	f06f 0302 	mvn.w	r3, #2
 80169c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80169c6:	e028      	b.n	8016a1a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80169c8:	693b      	ldr	r3, [r7, #16]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d025      	beq.n	8016a1a <osMessageQueueGet+0xce>
 80169ce:	4b17      	ldr	r3, [pc, #92]	; (8016a2c <osMessageQueueGet+0xe0>)
 80169d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169d4:	601a      	str	r2, [r3, #0]
 80169d6:	f3bf 8f4f 	dsb	sy
 80169da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80169de:	e01c      	b.n	8016a1a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80169e0:	6a3b      	ldr	r3, [r7, #32]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d002      	beq.n	80169ec <osMessageQueueGet+0xa0>
 80169e6:	68bb      	ldr	r3, [r7, #8]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d103      	bne.n	80169f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80169ec:	f06f 0303 	mvn.w	r3, #3
 80169f0:	627b      	str	r3, [r7, #36]	; 0x24
 80169f2:	e013      	b.n	8016a1c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	68b9      	ldr	r1, [r7, #8]
 80169f8:	6a38      	ldr	r0, [r7, #32]
 80169fa:	f000 fda3 	bl	8017544 <xQueueReceive>
 80169fe:	4603      	mov	r3, r0
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	d00b      	beq.n	8016a1c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d003      	beq.n	8016a12 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8016a0a:	f06f 0301 	mvn.w	r3, #1
 8016a0e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a10:	e004      	b.n	8016a1c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8016a12:	f06f 0302 	mvn.w	r3, #2
 8016a16:	627b      	str	r3, [r7, #36]	; 0x24
 8016a18:	e000      	b.n	8016a1c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016a1a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016a1e:	4618      	mov	r0, r3
 8016a20:	3728      	adds	r7, #40	; 0x28
 8016a22:	46bd      	mov	sp, r7
 8016a24:	bd80      	pop	{r7, pc}
 8016a26:	bf00      	nop
 8016a28:	20000374 	.word	0x20000374
 8016a2c:	e000ed04 	.word	0xe000ed04

08016a30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016a30:	b480      	push	{r7}
 8016a32:	b085      	sub	sp, #20
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	60f8      	str	r0, [r7, #12]
 8016a38:	60b9      	str	r1, [r7, #8]
 8016a3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	4a07      	ldr	r2, [pc, #28]	; (8016a5c <vApplicationGetIdleTaskMemory+0x2c>)
 8016a40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	4a06      	ldr	r2, [pc, #24]	; (8016a60 <vApplicationGetIdleTaskMemory+0x30>)
 8016a46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	2280      	movs	r2, #128	; 0x80
 8016a4c:	601a      	str	r2, [r3, #0]
}
 8016a4e:	bf00      	nop
 8016a50:	3714      	adds	r7, #20
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr
 8016a5a:	bf00      	nop
 8016a5c:	20000378 	.word	0x20000378
 8016a60:	200003d4 	.word	0x200003d4

08016a64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016a64:	b480      	push	{r7}
 8016a66:	b085      	sub	sp, #20
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	4a07      	ldr	r2, [pc, #28]	; (8016a90 <vApplicationGetTimerTaskMemory+0x2c>)
 8016a74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8016a76:	68bb      	ldr	r3, [r7, #8]
 8016a78:	4a06      	ldr	r2, [pc, #24]	; (8016a94 <vApplicationGetTimerTaskMemory+0x30>)
 8016a7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016a82:	601a      	str	r2, [r3, #0]
}
 8016a84:	bf00      	nop
 8016a86:	3714      	adds	r7, #20
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8e:	4770      	bx	lr
 8016a90:	200005d4 	.word	0x200005d4
 8016a94:	20000630 	.word	0x20000630

08016a98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b083      	sub	sp, #12
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f103 0208 	add.w	r2, r3, #8
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	f04f 32ff 	mov.w	r2, #4294967295
 8016ab0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f103 0208 	add.w	r2, r3, #8
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f103 0208 	add.w	r2, r3, #8
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	2200      	movs	r2, #0
 8016aca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016acc:	bf00      	nop
 8016ace:	370c      	adds	r7, #12
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad6:	4770      	bx	lr

08016ad8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016ad8:	b480      	push	{r7}
 8016ada:	b083      	sub	sp, #12
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016ae6:	bf00      	nop
 8016ae8:	370c      	adds	r7, #12
 8016aea:	46bd      	mov	sp, r7
 8016aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af0:	4770      	bx	lr

08016af2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016af2:	b480      	push	{r7}
 8016af4:	b085      	sub	sp, #20
 8016af6:	af00      	add	r7, sp, #0
 8016af8:	6078      	str	r0, [r7, #4]
 8016afa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	685b      	ldr	r3, [r3, #4]
 8016b00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	68fa      	ldr	r2, [r7, #12]
 8016b06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	689a      	ldr	r2, [r3, #8]
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	689b      	ldr	r3, [r3, #8]
 8016b14:	683a      	ldr	r2, [r7, #0]
 8016b16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	683a      	ldr	r2, [r7, #0]
 8016b1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	1c5a      	adds	r2, r3, #1
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	601a      	str	r2, [r3, #0]
}
 8016b2e:	bf00      	nop
 8016b30:	3714      	adds	r7, #20
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr

08016b3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016b3a:	b480      	push	{r7}
 8016b3c:	b085      	sub	sp, #20
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	6078      	str	r0, [r7, #4]
 8016b42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016b44:	683b      	ldr	r3, [r7, #0]
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016b4a:	68bb      	ldr	r3, [r7, #8]
 8016b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b50:	d103      	bne.n	8016b5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	691b      	ldr	r3, [r3, #16]
 8016b56:	60fb      	str	r3, [r7, #12]
 8016b58:	e00c      	b.n	8016b74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	3308      	adds	r3, #8
 8016b5e:	60fb      	str	r3, [r7, #12]
 8016b60:	e002      	b.n	8016b68 <vListInsert+0x2e>
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	60fb      	str	r3, [r7, #12]
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	68ba      	ldr	r2, [r7, #8]
 8016b70:	429a      	cmp	r2, r3
 8016b72:	d2f6      	bcs.n	8016b62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	685a      	ldr	r2, [r3, #4]
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016b7c:	683b      	ldr	r3, [r7, #0]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	683a      	ldr	r2, [r7, #0]
 8016b82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	68fa      	ldr	r2, [r7, #12]
 8016b88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	683a      	ldr	r2, [r7, #0]
 8016b8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	1c5a      	adds	r2, r3, #1
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	601a      	str	r2, [r3, #0]
}
 8016ba0:	bf00      	nop
 8016ba2:	3714      	adds	r7, #20
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016baa:	4770      	bx	lr

08016bac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016bac:	b480      	push	{r7}
 8016bae:	b085      	sub	sp, #20
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	691b      	ldr	r3, [r3, #16]
 8016bb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	685b      	ldr	r3, [r3, #4]
 8016bbe:	687a      	ldr	r2, [r7, #4]
 8016bc0:	6892      	ldr	r2, [r2, #8]
 8016bc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	689b      	ldr	r3, [r3, #8]
 8016bc8:	687a      	ldr	r2, [r7, #4]
 8016bca:	6852      	ldr	r2, [r2, #4]
 8016bcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	687a      	ldr	r2, [r7, #4]
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d103      	bne.n	8016be0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	689a      	ldr	r2, [r3, #8]
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2200      	movs	r2, #0
 8016be4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	1e5a      	subs	r2, r3, #1
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	681b      	ldr	r3, [r3, #0]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3714      	adds	r7, #20
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfe:	4770      	bx	lr

08016c00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b084      	sub	sp, #16
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	6078      	str	r0, [r7, #4]
 8016c08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	d10b      	bne.n	8016c2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c18:	b672      	cpsid	i
 8016c1a:	f383 8811 	msr	BASEPRI, r3
 8016c1e:	f3bf 8f6f 	isb	sy
 8016c22:	f3bf 8f4f 	dsb	sy
 8016c26:	b662      	cpsie	i
 8016c28:	60bb      	str	r3, [r7, #8]
 8016c2a:	e7fe      	b.n	8016c2a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8016c2c:	f002 fddc 	bl	80197e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c38:	68f9      	ldr	r1, [r7, #12]
 8016c3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016c3c:	fb01 f303 	mul.w	r3, r1, r3
 8016c40:	441a      	add	r2, r3
 8016c42:	68fb      	ldr	r3, [r7, #12]
 8016c44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681a      	ldr	r2, [r3, #0]
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016c5c:	3b01      	subs	r3, #1
 8016c5e:	68f9      	ldr	r1, [r7, #12]
 8016c60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016c62:	fb01 f303 	mul.w	r3, r1, r3
 8016c66:	441a      	add	r2, r3
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	22ff      	movs	r2, #255	; 0xff
 8016c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	22ff      	movs	r2, #255	; 0xff
 8016c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d114      	bne.n	8016cac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	691b      	ldr	r3, [r3, #16]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d01a      	beq.n	8016cc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	3310      	adds	r3, #16
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f001 fd9c 	bl	80187cc <xTaskRemoveFromEventList>
 8016c94:	4603      	mov	r3, r0
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d012      	beq.n	8016cc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016c9a:	4b0d      	ldr	r3, [pc, #52]	; (8016cd0 <xQueueGenericReset+0xd0>)
 8016c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ca0:	601a      	str	r2, [r3, #0]
 8016ca2:	f3bf 8f4f 	dsb	sy
 8016ca6:	f3bf 8f6f 	isb	sy
 8016caa:	e009      	b.n	8016cc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	3310      	adds	r3, #16
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f7ff fef1 	bl	8016a98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	3324      	adds	r3, #36	; 0x24
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7ff feec 	bl	8016a98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016cc0:	f002 fdc4 	bl	801984c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016cc4:	2301      	movs	r3, #1
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3710      	adds	r7, #16
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	bd80      	pop	{r7, pc}
 8016cce:	bf00      	nop
 8016cd0:	e000ed04 	.word	0xe000ed04

08016cd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b08e      	sub	sp, #56	; 0x38
 8016cd8:	af02      	add	r7, sp, #8
 8016cda:	60f8      	str	r0, [r7, #12]
 8016cdc:	60b9      	str	r1, [r7, #8]
 8016cde:	607a      	str	r2, [r7, #4]
 8016ce0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d10b      	bne.n	8016d00 <xQueueGenericCreateStatic+0x2c>
 8016ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cec:	b672      	cpsid	i
 8016cee:	f383 8811 	msr	BASEPRI, r3
 8016cf2:	f3bf 8f6f 	isb	sy
 8016cf6:	f3bf 8f4f 	dsb	sy
 8016cfa:	b662      	cpsie	i
 8016cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8016cfe:	e7fe      	b.n	8016cfe <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d10b      	bne.n	8016d1e <xQueueGenericCreateStatic+0x4a>
 8016d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d0a:	b672      	cpsid	i
 8016d0c:	f383 8811 	msr	BASEPRI, r3
 8016d10:	f3bf 8f6f 	isb	sy
 8016d14:	f3bf 8f4f 	dsb	sy
 8016d18:	b662      	cpsie	i
 8016d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8016d1c:	e7fe      	b.n	8016d1c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d002      	beq.n	8016d2a <xQueueGenericCreateStatic+0x56>
 8016d24:	68bb      	ldr	r3, [r7, #8]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d001      	beq.n	8016d2e <xQueueGenericCreateStatic+0x5a>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <xQueueGenericCreateStatic+0x5c>
 8016d2e:	2300      	movs	r3, #0
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d10b      	bne.n	8016d4c <xQueueGenericCreateStatic+0x78>
 8016d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d38:	b672      	cpsid	i
 8016d3a:	f383 8811 	msr	BASEPRI, r3
 8016d3e:	f3bf 8f6f 	isb	sy
 8016d42:	f3bf 8f4f 	dsb	sy
 8016d46:	b662      	cpsie	i
 8016d48:	623b      	str	r3, [r7, #32]
 8016d4a:	e7fe      	b.n	8016d4a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d102      	bne.n	8016d58 <xQueueGenericCreateStatic+0x84>
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d101      	bne.n	8016d5c <xQueueGenericCreateStatic+0x88>
 8016d58:	2301      	movs	r3, #1
 8016d5a:	e000      	b.n	8016d5e <xQueueGenericCreateStatic+0x8a>
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d10b      	bne.n	8016d7a <xQueueGenericCreateStatic+0xa6>
 8016d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d66:	b672      	cpsid	i
 8016d68:	f383 8811 	msr	BASEPRI, r3
 8016d6c:	f3bf 8f6f 	isb	sy
 8016d70:	f3bf 8f4f 	dsb	sy
 8016d74:	b662      	cpsie	i
 8016d76:	61fb      	str	r3, [r7, #28]
 8016d78:	e7fe      	b.n	8016d78 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016d7a:	2350      	movs	r3, #80	; 0x50
 8016d7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	2b50      	cmp	r3, #80	; 0x50
 8016d82:	d00b      	beq.n	8016d9c <xQueueGenericCreateStatic+0xc8>
 8016d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d88:	b672      	cpsid	i
 8016d8a:	f383 8811 	msr	BASEPRI, r3
 8016d8e:	f3bf 8f6f 	isb	sy
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	b662      	cpsie	i
 8016d98:	61bb      	str	r3, [r7, #24]
 8016d9a:	e7fe      	b.n	8016d9a <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016d9c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016d9e:	683b      	ldr	r3, [r7, #0]
 8016da0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d00d      	beq.n	8016dc4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016daa:	2201      	movs	r2, #1
 8016dac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016db0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db6:	9300      	str	r3, [sp, #0]
 8016db8:	4613      	mov	r3, r2
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	68b9      	ldr	r1, [r7, #8]
 8016dbe:	68f8      	ldr	r0, [r7, #12]
 8016dc0:	f000 f846 	bl	8016e50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3730      	adds	r7, #48	; 0x30
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b08a      	sub	sp, #40	; 0x28
 8016dd2:	af02      	add	r7, sp, #8
 8016dd4:	60f8      	str	r0, [r7, #12]
 8016dd6:	60b9      	str	r1, [r7, #8]
 8016dd8:	4613      	mov	r3, r2
 8016dda:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d10b      	bne.n	8016dfa <xQueueGenericCreate+0x2c>
 8016de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de6:	b672      	cpsid	i
 8016de8:	f383 8811 	msr	BASEPRI, r3
 8016dec:	f3bf 8f6f 	isb	sy
 8016df0:	f3bf 8f4f 	dsb	sy
 8016df4:	b662      	cpsie	i
 8016df6:	613b      	str	r3, [r7, #16]
 8016df8:	e7fe      	b.n	8016df8 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d102      	bne.n	8016e06 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016e00:	2300      	movs	r3, #0
 8016e02:	61fb      	str	r3, [r7, #28]
 8016e04:	e004      	b.n	8016e10 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	68ba      	ldr	r2, [r7, #8]
 8016e0a:	fb02 f303 	mul.w	r3, r2, r3
 8016e0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016e10:	69fb      	ldr	r3, [r7, #28]
 8016e12:	3350      	adds	r3, #80	; 0x50
 8016e14:	4618      	mov	r0, r3
 8016e16:	f002 fe09 	bl	8019a2c <pvPortMalloc>
 8016e1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d011      	beq.n	8016e46 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	3350      	adds	r3, #80	; 0x50
 8016e2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016e2c:	69bb      	ldr	r3, [r7, #24]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e34:	79fa      	ldrb	r2, [r7, #7]
 8016e36:	69bb      	ldr	r3, [r7, #24]
 8016e38:	9300      	str	r3, [sp, #0]
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	697a      	ldr	r2, [r7, #20]
 8016e3e:	68b9      	ldr	r1, [r7, #8]
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f000 f805 	bl	8016e50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016e46:	69bb      	ldr	r3, [r7, #24]
	}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3720      	adds	r7, #32
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	60f8      	str	r0, [r7, #12]
 8016e58:	60b9      	str	r1, [r7, #8]
 8016e5a:	607a      	str	r2, [r7, #4]
 8016e5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016e5e:	68bb      	ldr	r3, [r7, #8]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d103      	bne.n	8016e6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016e64:	69bb      	ldr	r3, [r7, #24]
 8016e66:	69ba      	ldr	r2, [r7, #24]
 8016e68:	601a      	str	r2, [r3, #0]
 8016e6a:	e002      	b.n	8016e72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	687a      	ldr	r2, [r7, #4]
 8016e70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016e72:	69bb      	ldr	r3, [r7, #24]
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016e78:	69bb      	ldr	r3, [r7, #24]
 8016e7a:	68ba      	ldr	r2, [r7, #8]
 8016e7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016e7e:	2101      	movs	r1, #1
 8016e80:	69b8      	ldr	r0, [r7, #24]
 8016e82:	f7ff febd 	bl	8016c00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	78fa      	ldrb	r2, [r7, #3]
 8016e8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016e8e:	bf00      	nop
 8016e90:	3710      	adds	r7, #16
 8016e92:	46bd      	mov	sp, r7
 8016e94:	bd80      	pop	{r7, pc}

08016e96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016e96:	b580      	push	{r7, lr}
 8016e98:	b082      	sub	sp, #8
 8016e9a:	af00      	add	r7, sp, #0
 8016e9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	2b00      	cmp	r3, #0
 8016ea2:	d00e      	beq.n	8016ec2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2200      	movs	r2, #0
 8016eae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2200      	movs	r2, #0
 8016eb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	2200      	movs	r2, #0
 8016eba:	2100      	movs	r1, #0
 8016ebc:	6878      	ldr	r0, [r7, #4]
 8016ebe:	f000 f911 	bl	80170e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016ec2:	bf00      	nop
 8016ec4:	3708      	adds	r7, #8
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	bd80      	pop	{r7, pc}

08016eca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016eca:	b580      	push	{r7, lr}
 8016ecc:	b086      	sub	sp, #24
 8016ece:	af00      	add	r7, sp, #0
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	617b      	str	r3, [r7, #20]
 8016ed8:	2300      	movs	r3, #0
 8016eda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016edc:	79fb      	ldrb	r3, [r7, #7]
 8016ede:	461a      	mov	r2, r3
 8016ee0:	6939      	ldr	r1, [r7, #16]
 8016ee2:	6978      	ldr	r0, [r7, #20]
 8016ee4:	f7ff ff73 	bl	8016dce <xQueueGenericCreate>
 8016ee8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016eea:	68f8      	ldr	r0, [r7, #12]
 8016eec:	f7ff ffd3 	bl	8016e96 <prvInitialiseMutex>

		return xNewQueue;
 8016ef0:	68fb      	ldr	r3, [r7, #12]
	}
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	3718      	adds	r7, #24
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	bd80      	pop	{r7, pc}

08016efa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016efa:	b580      	push	{r7, lr}
 8016efc:	b088      	sub	sp, #32
 8016efe:	af02      	add	r7, sp, #8
 8016f00:	4603      	mov	r3, r0
 8016f02:	6039      	str	r1, [r7, #0]
 8016f04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016f06:	2301      	movs	r3, #1
 8016f08:	617b      	str	r3, [r7, #20]
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016f0e:	79fb      	ldrb	r3, [r7, #7]
 8016f10:	9300      	str	r3, [sp, #0]
 8016f12:	683b      	ldr	r3, [r7, #0]
 8016f14:	2200      	movs	r2, #0
 8016f16:	6939      	ldr	r1, [r7, #16]
 8016f18:	6978      	ldr	r0, [r7, #20]
 8016f1a:	f7ff fedb 	bl	8016cd4 <xQueueGenericCreateStatic>
 8016f1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016f20:	68f8      	ldr	r0, [r7, #12]
 8016f22:	f7ff ffb8 	bl	8016e96 <prvInitialiseMutex>

		return xNewQueue;
 8016f26:	68fb      	ldr	r3, [r7, #12]
	}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3718      	adds	r7, #24
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}

08016f30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016f30:	b590      	push	{r4, r7, lr}
 8016f32:	b087      	sub	sp, #28
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016f3c:	693b      	ldr	r3, [r7, #16]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d10b      	bne.n	8016f5a <xQueueGiveMutexRecursive+0x2a>
 8016f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f46:	b672      	cpsid	i
 8016f48:	f383 8811 	msr	BASEPRI, r3
 8016f4c:	f3bf 8f6f 	isb	sy
 8016f50:	f3bf 8f4f 	dsb	sy
 8016f54:	b662      	cpsie	i
 8016f56:	60fb      	str	r3, [r7, #12]
 8016f58:	e7fe      	b.n	8016f58 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016f5a:	693b      	ldr	r3, [r7, #16]
 8016f5c:	689c      	ldr	r4, [r3, #8]
 8016f5e:	f001 fdf3 	bl	8018b48 <xTaskGetCurrentTaskHandle>
 8016f62:	4603      	mov	r3, r0
 8016f64:	429c      	cmp	r4, r3
 8016f66:	d111      	bne.n	8016f8c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	68db      	ldr	r3, [r3, #12]
 8016f6c:	1e5a      	subs	r2, r3, #1
 8016f6e:	693b      	ldr	r3, [r7, #16]
 8016f70:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016f72:	693b      	ldr	r3, [r7, #16]
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d105      	bne.n	8016f86 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	2200      	movs	r2, #0
 8016f7e:	2100      	movs	r1, #0
 8016f80:	6938      	ldr	r0, [r7, #16]
 8016f82:	f000 f8af 	bl	80170e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016f86:	2301      	movs	r3, #1
 8016f88:	617b      	str	r3, [r7, #20]
 8016f8a:	e001      	b.n	8016f90 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016f90:	697b      	ldr	r3, [r7, #20]
	}
 8016f92:	4618      	mov	r0, r3
 8016f94:	371c      	adds	r7, #28
 8016f96:	46bd      	mov	sp, r7
 8016f98:	bd90      	pop	{r4, r7, pc}

08016f9a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016f9a:	b590      	push	{r4, r7, lr}
 8016f9c:	b087      	sub	sp, #28
 8016f9e:	af00      	add	r7, sp, #0
 8016fa0:	6078      	str	r0, [r7, #4]
 8016fa2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016fa8:	693b      	ldr	r3, [r7, #16]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d10b      	bne.n	8016fc6 <xQueueTakeMutexRecursive+0x2c>
 8016fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb2:	b672      	cpsid	i
 8016fb4:	f383 8811 	msr	BASEPRI, r3
 8016fb8:	f3bf 8f6f 	isb	sy
 8016fbc:	f3bf 8f4f 	dsb	sy
 8016fc0:	b662      	cpsie	i
 8016fc2:	60fb      	str	r3, [r7, #12]
 8016fc4:	e7fe      	b.n	8016fc4 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	689c      	ldr	r4, [r3, #8]
 8016fca:	f001 fdbd 	bl	8018b48 <xTaskGetCurrentTaskHandle>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	429c      	cmp	r4, r3
 8016fd2:	d107      	bne.n	8016fe4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016fd4:	693b      	ldr	r3, [r7, #16]
 8016fd6:	68db      	ldr	r3, [r3, #12]
 8016fd8:	1c5a      	adds	r2, r3, #1
 8016fda:	693b      	ldr	r3, [r7, #16]
 8016fdc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016fde:	2301      	movs	r3, #1
 8016fe0:	617b      	str	r3, [r7, #20]
 8016fe2:	e00c      	b.n	8016ffe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016fe4:	6839      	ldr	r1, [r7, #0]
 8016fe6:	6938      	ldr	r0, [r7, #16]
 8016fe8:	f000 fb8e 	bl	8017708 <xQueueSemaphoreTake>
 8016fec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d004      	beq.n	8016ffe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016ff4:	693b      	ldr	r3, [r7, #16]
 8016ff6:	68db      	ldr	r3, [r3, #12]
 8016ff8:	1c5a      	adds	r2, r3, #1
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016ffe:	697b      	ldr	r3, [r7, #20]
	}
 8017000:	4618      	mov	r0, r3
 8017002:	371c      	adds	r7, #28
 8017004:	46bd      	mov	sp, r7
 8017006:	bd90      	pop	{r4, r7, pc}

08017008 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8017008:	b580      	push	{r7, lr}
 801700a:	b08a      	sub	sp, #40	; 0x28
 801700c:	af02      	add	r7, sp, #8
 801700e:	60f8      	str	r0, [r7, #12]
 8017010:	60b9      	str	r1, [r7, #8]
 8017012:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10b      	bne.n	8017032 <xQueueCreateCountingSemaphoreStatic+0x2a>
 801701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801701e:	b672      	cpsid	i
 8017020:	f383 8811 	msr	BASEPRI, r3
 8017024:	f3bf 8f6f 	isb	sy
 8017028:	f3bf 8f4f 	dsb	sy
 801702c:	b662      	cpsie	i
 801702e:	61bb      	str	r3, [r7, #24]
 8017030:	e7fe      	b.n	8017030 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	429a      	cmp	r2, r3
 8017038:	d90b      	bls.n	8017052 <xQueueCreateCountingSemaphoreStatic+0x4a>
 801703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801703e:	b672      	cpsid	i
 8017040:	f383 8811 	msr	BASEPRI, r3
 8017044:	f3bf 8f6f 	isb	sy
 8017048:	f3bf 8f4f 	dsb	sy
 801704c:	b662      	cpsie	i
 801704e:	617b      	str	r3, [r7, #20]
 8017050:	e7fe      	b.n	8017050 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017052:	2302      	movs	r3, #2
 8017054:	9300      	str	r3, [sp, #0]
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	2100      	movs	r1, #0
 801705c:	68f8      	ldr	r0, [r7, #12]
 801705e:	f7ff fe39 	bl	8016cd4 <xQueueGenericCreateStatic>
 8017062:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8017064:	69fb      	ldr	r3, [r7, #28]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d002      	beq.n	8017070 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801706a:	69fb      	ldr	r3, [r7, #28]
 801706c:	68ba      	ldr	r2, [r7, #8]
 801706e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017070:	69fb      	ldr	r3, [r7, #28]
	}
 8017072:	4618      	mov	r0, r3
 8017074:	3720      	adds	r7, #32
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}

0801707a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801707a:	b580      	push	{r7, lr}
 801707c:	b086      	sub	sp, #24
 801707e:	af00      	add	r7, sp, #0
 8017080:	6078      	str	r0, [r7, #4]
 8017082:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d10b      	bne.n	80170a2 <xQueueCreateCountingSemaphore+0x28>
 801708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801708e:	b672      	cpsid	i
 8017090:	f383 8811 	msr	BASEPRI, r3
 8017094:	f3bf 8f6f 	isb	sy
 8017098:	f3bf 8f4f 	dsb	sy
 801709c:	b662      	cpsie	i
 801709e:	613b      	str	r3, [r7, #16]
 80170a0:	e7fe      	b.n	80170a0 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80170a2:	683a      	ldr	r2, [r7, #0]
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d90b      	bls.n	80170c2 <xQueueCreateCountingSemaphore+0x48>
 80170aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ae:	b672      	cpsid	i
 80170b0:	f383 8811 	msr	BASEPRI, r3
 80170b4:	f3bf 8f6f 	isb	sy
 80170b8:	f3bf 8f4f 	dsb	sy
 80170bc:	b662      	cpsie	i
 80170be:	60fb      	str	r3, [r7, #12]
 80170c0:	e7fe      	b.n	80170c0 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80170c2:	2202      	movs	r2, #2
 80170c4:	2100      	movs	r1, #0
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f7ff fe81 	bl	8016dce <xQueueGenericCreate>
 80170cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d002      	beq.n	80170da <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80170d4:	697b      	ldr	r3, [r7, #20]
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80170da:	697b      	ldr	r3, [r7, #20]
	}
 80170dc:	4618      	mov	r0, r3
 80170de:	3718      	adds	r7, #24
 80170e0:	46bd      	mov	sp, r7
 80170e2:	bd80      	pop	{r7, pc}

080170e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80170e4:	b580      	push	{r7, lr}
 80170e6:	b08e      	sub	sp, #56	; 0x38
 80170e8:	af00      	add	r7, sp, #0
 80170ea:	60f8      	str	r0, [r7, #12]
 80170ec:	60b9      	str	r1, [r7, #8]
 80170ee:	607a      	str	r2, [r7, #4]
 80170f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80170f2:	2300      	movs	r3, #0
 80170f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80170fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d10b      	bne.n	8017118 <xQueueGenericSend+0x34>
 8017100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017104:	b672      	cpsid	i
 8017106:	f383 8811 	msr	BASEPRI, r3
 801710a:	f3bf 8f6f 	isb	sy
 801710e:	f3bf 8f4f 	dsb	sy
 8017112:	b662      	cpsie	i
 8017114:	62bb      	str	r3, [r7, #40]	; 0x28
 8017116:	e7fe      	b.n	8017116 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d103      	bne.n	8017126 <xQueueGenericSend+0x42>
 801711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017122:	2b00      	cmp	r3, #0
 8017124:	d101      	bne.n	801712a <xQueueGenericSend+0x46>
 8017126:	2301      	movs	r3, #1
 8017128:	e000      	b.n	801712c <xQueueGenericSend+0x48>
 801712a:	2300      	movs	r3, #0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d10b      	bne.n	8017148 <xQueueGenericSend+0x64>
 8017130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017134:	b672      	cpsid	i
 8017136:	f383 8811 	msr	BASEPRI, r3
 801713a:	f3bf 8f6f 	isb	sy
 801713e:	f3bf 8f4f 	dsb	sy
 8017142:	b662      	cpsie	i
 8017144:	627b      	str	r3, [r7, #36]	; 0x24
 8017146:	e7fe      	b.n	8017146 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	2b02      	cmp	r3, #2
 801714c:	d103      	bne.n	8017156 <xQueueGenericSend+0x72>
 801714e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017152:	2b01      	cmp	r3, #1
 8017154:	d101      	bne.n	801715a <xQueueGenericSend+0x76>
 8017156:	2301      	movs	r3, #1
 8017158:	e000      	b.n	801715c <xQueueGenericSend+0x78>
 801715a:	2300      	movs	r3, #0
 801715c:	2b00      	cmp	r3, #0
 801715e:	d10b      	bne.n	8017178 <xQueueGenericSend+0x94>
 8017160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017164:	b672      	cpsid	i
 8017166:	f383 8811 	msr	BASEPRI, r3
 801716a:	f3bf 8f6f 	isb	sy
 801716e:	f3bf 8f4f 	dsb	sy
 8017172:	b662      	cpsie	i
 8017174:	623b      	str	r3, [r7, #32]
 8017176:	e7fe      	b.n	8017176 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017178:	f001 fcf6 	bl	8018b68 <xTaskGetSchedulerState>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	d102      	bne.n	8017188 <xQueueGenericSend+0xa4>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d101      	bne.n	801718c <xQueueGenericSend+0xa8>
 8017188:	2301      	movs	r3, #1
 801718a:	e000      	b.n	801718e <xQueueGenericSend+0xaa>
 801718c:	2300      	movs	r3, #0
 801718e:	2b00      	cmp	r3, #0
 8017190:	d10b      	bne.n	80171aa <xQueueGenericSend+0xc6>
 8017192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017196:	b672      	cpsid	i
 8017198:	f383 8811 	msr	BASEPRI, r3
 801719c:	f3bf 8f6f 	isb	sy
 80171a0:	f3bf 8f4f 	dsb	sy
 80171a4:	b662      	cpsie	i
 80171a6:	61fb      	str	r3, [r7, #28]
 80171a8:	e7fe      	b.n	80171a8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80171aa:	f002 fb1d 	bl	80197e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80171ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d302      	bcc.n	80171c0 <xQueueGenericSend+0xdc>
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	2b02      	cmp	r3, #2
 80171be:	d129      	bne.n	8017214 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80171c0:	683a      	ldr	r2, [r7, #0]
 80171c2:	68b9      	ldr	r1, [r7, #8]
 80171c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171c6:	f000 fc6e 	bl	8017aa6 <prvCopyDataToQueue>
 80171ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80171cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d010      	beq.n	80171f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80171d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171d6:	3324      	adds	r3, #36	; 0x24
 80171d8:	4618      	mov	r0, r3
 80171da:	f001 faf7 	bl	80187cc <xTaskRemoveFromEventList>
 80171de:	4603      	mov	r3, r0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d013      	beq.n	801720c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80171e4:	4b3f      	ldr	r3, [pc, #252]	; (80172e4 <xQueueGenericSend+0x200>)
 80171e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171ea:	601a      	str	r2, [r3, #0]
 80171ec:	f3bf 8f4f 	dsb	sy
 80171f0:	f3bf 8f6f 	isb	sy
 80171f4:	e00a      	b.n	801720c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80171f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d007      	beq.n	801720c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80171fc:	4b39      	ldr	r3, [pc, #228]	; (80172e4 <xQueueGenericSend+0x200>)
 80171fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017202:	601a      	str	r2, [r3, #0]
 8017204:	f3bf 8f4f 	dsb	sy
 8017208:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801720c:	f002 fb1e 	bl	801984c <vPortExitCritical>
				return pdPASS;
 8017210:	2301      	movs	r3, #1
 8017212:	e063      	b.n	80172dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2b00      	cmp	r3, #0
 8017218:	d103      	bne.n	8017222 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801721a:	f002 fb17 	bl	801984c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801721e:	2300      	movs	r3, #0
 8017220:	e05c      	b.n	80172dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017224:	2b00      	cmp	r3, #0
 8017226:	d106      	bne.n	8017236 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017228:	f107 0314 	add.w	r3, r7, #20
 801722c:	4618      	mov	r0, r3
 801722e:	f001 fb31 	bl	8018894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017232:	2301      	movs	r3, #1
 8017234:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017236:	f002 fb09 	bl	801984c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801723a:	f001 f88f 	bl	801835c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801723e:	f002 fad3 	bl	80197e8 <vPortEnterCritical>
 8017242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017248:	b25b      	sxtb	r3, r3
 801724a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801724e:	d103      	bne.n	8017258 <xQueueGenericSend+0x174>
 8017250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017252:	2200      	movs	r2, #0
 8017254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801725a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801725e:	b25b      	sxtb	r3, r3
 8017260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017264:	d103      	bne.n	801726e <xQueueGenericSend+0x18a>
 8017266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017268:	2200      	movs	r2, #0
 801726a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801726e:	f002 faed 	bl	801984c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017272:	1d3a      	adds	r2, r7, #4
 8017274:	f107 0314 	add.w	r3, r7, #20
 8017278:	4611      	mov	r1, r2
 801727a:	4618      	mov	r0, r3
 801727c:	f001 fb20 	bl	80188c0 <xTaskCheckForTimeOut>
 8017280:	4603      	mov	r3, r0
 8017282:	2b00      	cmp	r3, #0
 8017284:	d124      	bne.n	80172d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8017286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017288:	f000 fd05 	bl	8017c96 <prvIsQueueFull>
 801728c:	4603      	mov	r3, r0
 801728e:	2b00      	cmp	r3, #0
 8017290:	d018      	beq.n	80172c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017294:	3310      	adds	r3, #16
 8017296:	687a      	ldr	r2, [r7, #4]
 8017298:	4611      	mov	r1, r2
 801729a:	4618      	mov	r0, r3
 801729c:	f001 fa44 	bl	8018728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80172a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172a2:	f000 fc90 	bl	8017bc6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80172a6:	f001 f867 	bl	8018378 <xTaskResumeAll>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	f47f af7c 	bne.w	80171aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80172b2:	4b0c      	ldr	r3, [pc, #48]	; (80172e4 <xQueueGenericSend+0x200>)
 80172b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172b8:	601a      	str	r2, [r3, #0]
 80172ba:	f3bf 8f4f 	dsb	sy
 80172be:	f3bf 8f6f 	isb	sy
 80172c2:	e772      	b.n	80171aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80172c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172c6:	f000 fc7e 	bl	8017bc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80172ca:	f001 f855 	bl	8018378 <xTaskResumeAll>
 80172ce:	e76c      	b.n	80171aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80172d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172d2:	f000 fc78 	bl	8017bc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80172d6:	f001 f84f 	bl	8018378 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80172da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3738      	adds	r7, #56	; 0x38
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd80      	pop	{r7, pc}
 80172e4:	e000ed04 	.word	0xe000ed04

080172e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b08e      	sub	sp, #56	; 0x38
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
 80172f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80172f6:	68fb      	ldr	r3, [r7, #12]
 80172f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80172fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d10b      	bne.n	8017318 <xQueueGenericSendFromISR+0x30>
 8017300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017304:	b672      	cpsid	i
 8017306:	f383 8811 	msr	BASEPRI, r3
 801730a:	f3bf 8f6f 	isb	sy
 801730e:	f3bf 8f4f 	dsb	sy
 8017312:	b662      	cpsie	i
 8017314:	627b      	str	r3, [r7, #36]	; 0x24
 8017316:	e7fe      	b.n	8017316 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d103      	bne.n	8017326 <xQueueGenericSendFromISR+0x3e>
 801731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017322:	2b00      	cmp	r3, #0
 8017324:	d101      	bne.n	801732a <xQueueGenericSendFromISR+0x42>
 8017326:	2301      	movs	r3, #1
 8017328:	e000      	b.n	801732c <xQueueGenericSendFromISR+0x44>
 801732a:	2300      	movs	r3, #0
 801732c:	2b00      	cmp	r3, #0
 801732e:	d10b      	bne.n	8017348 <xQueueGenericSendFromISR+0x60>
 8017330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017334:	b672      	cpsid	i
 8017336:	f383 8811 	msr	BASEPRI, r3
 801733a:	f3bf 8f6f 	isb	sy
 801733e:	f3bf 8f4f 	dsb	sy
 8017342:	b662      	cpsie	i
 8017344:	623b      	str	r3, [r7, #32]
 8017346:	e7fe      	b.n	8017346 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017348:	683b      	ldr	r3, [r7, #0]
 801734a:	2b02      	cmp	r3, #2
 801734c:	d103      	bne.n	8017356 <xQueueGenericSendFromISR+0x6e>
 801734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017352:	2b01      	cmp	r3, #1
 8017354:	d101      	bne.n	801735a <xQueueGenericSendFromISR+0x72>
 8017356:	2301      	movs	r3, #1
 8017358:	e000      	b.n	801735c <xQueueGenericSendFromISR+0x74>
 801735a:	2300      	movs	r3, #0
 801735c:	2b00      	cmp	r3, #0
 801735e:	d10b      	bne.n	8017378 <xQueueGenericSendFromISR+0x90>
 8017360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017364:	b672      	cpsid	i
 8017366:	f383 8811 	msr	BASEPRI, r3
 801736a:	f3bf 8f6f 	isb	sy
 801736e:	f3bf 8f4f 	dsb	sy
 8017372:	b662      	cpsie	i
 8017374:	61fb      	str	r3, [r7, #28]
 8017376:	e7fe      	b.n	8017376 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017378:	f002 fb16 	bl	80199a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801737c:	f3ef 8211 	mrs	r2, BASEPRI
 8017380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017384:	b672      	cpsid	i
 8017386:	f383 8811 	msr	BASEPRI, r3
 801738a:	f3bf 8f6f 	isb	sy
 801738e:	f3bf 8f4f 	dsb	sy
 8017392:	b662      	cpsie	i
 8017394:	61ba      	str	r2, [r7, #24]
 8017396:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017398:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801739a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801739e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80173a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173a4:	429a      	cmp	r2, r3
 80173a6:	d302      	bcc.n	80173ae <xQueueGenericSendFromISR+0xc6>
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	2b02      	cmp	r3, #2
 80173ac:	d12c      	bne.n	8017408 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80173ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80173b8:	683a      	ldr	r2, [r7, #0]
 80173ba:	68b9      	ldr	r1, [r7, #8]
 80173bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80173be:	f000 fb72 	bl	8017aa6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80173c2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80173c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173ca:	d112      	bne.n	80173f2 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80173cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d016      	beq.n	8017402 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80173d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d6:	3324      	adds	r3, #36	; 0x24
 80173d8:	4618      	mov	r0, r3
 80173da:	f001 f9f7 	bl	80187cc <xTaskRemoveFromEventList>
 80173de:	4603      	mov	r3, r0
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00e      	beq.n	8017402 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d00b      	beq.n	8017402 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	2201      	movs	r2, #1
 80173ee:	601a      	str	r2, [r3, #0]
 80173f0:	e007      	b.n	8017402 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80173f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80173f6:	3301      	adds	r3, #1
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	b25a      	sxtb	r2, r3
 80173fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017402:	2301      	movs	r3, #1
 8017404:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017406:	e001      	b.n	801740c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017408:	2300      	movs	r3, #0
 801740a:	637b      	str	r3, [r7, #52]	; 0x34
 801740c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801740e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017410:	693b      	ldr	r3, [r7, #16]
 8017412:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017418:	4618      	mov	r0, r3
 801741a:	3738      	adds	r7, #56	; 0x38
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}

08017420 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b08e      	sub	sp, #56	; 0x38
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
 8017428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017430:	2b00      	cmp	r3, #0
 8017432:	d10b      	bne.n	801744c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8017434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017438:	b672      	cpsid	i
 801743a:	f383 8811 	msr	BASEPRI, r3
 801743e:	f3bf 8f6f 	isb	sy
 8017442:	f3bf 8f4f 	dsb	sy
 8017446:	b662      	cpsie	i
 8017448:	623b      	str	r3, [r7, #32]
 801744a:	e7fe      	b.n	801744a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801744c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017450:	2b00      	cmp	r3, #0
 8017452:	d00b      	beq.n	801746c <xQueueGiveFromISR+0x4c>
 8017454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017458:	b672      	cpsid	i
 801745a:	f383 8811 	msr	BASEPRI, r3
 801745e:	f3bf 8f6f 	isb	sy
 8017462:	f3bf 8f4f 	dsb	sy
 8017466:	b662      	cpsie	i
 8017468:	61fb      	str	r3, [r7, #28]
 801746a:	e7fe      	b.n	801746a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	2b00      	cmp	r3, #0
 8017472:	d103      	bne.n	801747c <xQueueGiveFromISR+0x5c>
 8017474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017476:	689b      	ldr	r3, [r3, #8]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d101      	bne.n	8017480 <xQueueGiveFromISR+0x60>
 801747c:	2301      	movs	r3, #1
 801747e:	e000      	b.n	8017482 <xQueueGiveFromISR+0x62>
 8017480:	2300      	movs	r3, #0
 8017482:	2b00      	cmp	r3, #0
 8017484:	d10b      	bne.n	801749e <xQueueGiveFromISR+0x7e>
 8017486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801748a:	b672      	cpsid	i
 801748c:	f383 8811 	msr	BASEPRI, r3
 8017490:	f3bf 8f6f 	isb	sy
 8017494:	f3bf 8f4f 	dsb	sy
 8017498:	b662      	cpsie	i
 801749a:	61bb      	str	r3, [r7, #24]
 801749c:	e7fe      	b.n	801749c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801749e:	f002 fa83 	bl	80199a8 <vPortValidateInterruptPriority>
	__asm volatile
 80174a2:	f3ef 8211 	mrs	r2, BASEPRI
 80174a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174aa:	b672      	cpsid	i
 80174ac:	f383 8811 	msr	BASEPRI, r3
 80174b0:	f3bf 8f6f 	isb	sy
 80174b4:	f3bf 8f4f 	dsb	sy
 80174b8:	b662      	cpsie	i
 80174ba:	617a      	str	r2, [r7, #20]
 80174bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80174be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80174c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80174c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80174cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80174ce:	429a      	cmp	r2, r3
 80174d0:	d22b      	bcs.n	801752a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80174d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80174d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80174dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174de:	1c5a      	adds	r2, r3, #1
 80174e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80174e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80174e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174ec:	d112      	bne.n	8017514 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80174ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d016      	beq.n	8017524 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80174f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174f8:	3324      	adds	r3, #36	; 0x24
 80174fa:	4618      	mov	r0, r3
 80174fc:	f001 f966 	bl	80187cc <xTaskRemoveFromEventList>
 8017500:	4603      	mov	r3, r0
 8017502:	2b00      	cmp	r3, #0
 8017504:	d00e      	beq.n	8017524 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d00b      	beq.n	8017524 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	2201      	movs	r2, #1
 8017510:	601a      	str	r2, [r3, #0]
 8017512:	e007      	b.n	8017524 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017518:	3301      	adds	r3, #1
 801751a:	b2db      	uxtb	r3, r3
 801751c:	b25a      	sxtb	r2, r3
 801751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017524:	2301      	movs	r3, #1
 8017526:	637b      	str	r3, [r7, #52]	; 0x34
 8017528:	e001      	b.n	801752e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801752a:	2300      	movs	r3, #0
 801752c:	637b      	str	r3, [r7, #52]	; 0x34
 801752e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017530:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801753a:	4618      	mov	r0, r3
 801753c:	3738      	adds	r7, #56	; 0x38
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
	...

08017544 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b08c      	sub	sp, #48	; 0x30
 8017548:	af00      	add	r7, sp, #0
 801754a:	60f8      	str	r0, [r7, #12]
 801754c:	60b9      	str	r1, [r7, #8]
 801754e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017550:	2300      	movs	r3, #0
 8017552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755a:	2b00      	cmp	r3, #0
 801755c:	d10b      	bne.n	8017576 <xQueueReceive+0x32>
	__asm volatile
 801755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017562:	b672      	cpsid	i
 8017564:	f383 8811 	msr	BASEPRI, r3
 8017568:	f3bf 8f6f 	isb	sy
 801756c:	f3bf 8f4f 	dsb	sy
 8017570:	b662      	cpsie	i
 8017572:	623b      	str	r3, [r7, #32]
 8017574:	e7fe      	b.n	8017574 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d103      	bne.n	8017584 <xQueueReceive+0x40>
 801757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017580:	2b00      	cmp	r3, #0
 8017582:	d101      	bne.n	8017588 <xQueueReceive+0x44>
 8017584:	2301      	movs	r3, #1
 8017586:	e000      	b.n	801758a <xQueueReceive+0x46>
 8017588:	2300      	movs	r3, #0
 801758a:	2b00      	cmp	r3, #0
 801758c:	d10b      	bne.n	80175a6 <xQueueReceive+0x62>
 801758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017592:	b672      	cpsid	i
 8017594:	f383 8811 	msr	BASEPRI, r3
 8017598:	f3bf 8f6f 	isb	sy
 801759c:	f3bf 8f4f 	dsb	sy
 80175a0:	b662      	cpsie	i
 80175a2:	61fb      	str	r3, [r7, #28]
 80175a4:	e7fe      	b.n	80175a4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80175a6:	f001 fadf 	bl	8018b68 <xTaskGetSchedulerState>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d102      	bne.n	80175b6 <xQueueReceive+0x72>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d101      	bne.n	80175ba <xQueueReceive+0x76>
 80175b6:	2301      	movs	r3, #1
 80175b8:	e000      	b.n	80175bc <xQueueReceive+0x78>
 80175ba:	2300      	movs	r3, #0
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d10b      	bne.n	80175d8 <xQueueReceive+0x94>
 80175c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175c4:	b672      	cpsid	i
 80175c6:	f383 8811 	msr	BASEPRI, r3
 80175ca:	f3bf 8f6f 	isb	sy
 80175ce:	f3bf 8f4f 	dsb	sy
 80175d2:	b662      	cpsie	i
 80175d4:	61bb      	str	r3, [r7, #24]
 80175d6:	e7fe      	b.n	80175d6 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80175d8:	f002 f906 	bl	80197e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80175e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d01f      	beq.n	8017628 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80175e8:	68b9      	ldr	r1, [r7, #8]
 80175ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80175ec:	f000 fac5 	bl	8017b7a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80175f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175f2:	1e5a      	subs	r2, r3, #1
 80175f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80175f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175fa:	691b      	ldr	r3, [r3, #16]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d00f      	beq.n	8017620 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017602:	3310      	adds	r3, #16
 8017604:	4618      	mov	r0, r3
 8017606:	f001 f8e1 	bl	80187cc <xTaskRemoveFromEventList>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d007      	beq.n	8017620 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017610:	4b3c      	ldr	r3, [pc, #240]	; (8017704 <xQueueReceive+0x1c0>)
 8017612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017616:	601a      	str	r2, [r3, #0]
 8017618:	f3bf 8f4f 	dsb	sy
 801761c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017620:	f002 f914 	bl	801984c <vPortExitCritical>
				return pdPASS;
 8017624:	2301      	movs	r3, #1
 8017626:	e069      	b.n	80176fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d103      	bne.n	8017636 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801762e:	f002 f90d 	bl	801984c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017632:	2300      	movs	r3, #0
 8017634:	e062      	b.n	80176fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801763c:	f107 0310 	add.w	r3, r7, #16
 8017640:	4618      	mov	r0, r3
 8017642:	f001 f927 	bl	8018894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017646:	2301      	movs	r3, #1
 8017648:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801764a:	f002 f8ff 	bl	801984c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801764e:	f000 fe85 	bl	801835c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017652:	f002 f8c9 	bl	80197e8 <vPortEnterCritical>
 8017656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801765c:	b25b      	sxtb	r3, r3
 801765e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017662:	d103      	bne.n	801766c <xQueueReceive+0x128>
 8017664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017666:	2200      	movs	r2, #0
 8017668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801766c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801766e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017672:	b25b      	sxtb	r3, r3
 8017674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017678:	d103      	bne.n	8017682 <xQueueReceive+0x13e>
 801767a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801767c:	2200      	movs	r2, #0
 801767e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017682:	f002 f8e3 	bl	801984c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017686:	1d3a      	adds	r2, r7, #4
 8017688:	f107 0310 	add.w	r3, r7, #16
 801768c:	4611      	mov	r1, r2
 801768e:	4618      	mov	r0, r3
 8017690:	f001 f916 	bl	80188c0 <xTaskCheckForTimeOut>
 8017694:	4603      	mov	r3, r0
 8017696:	2b00      	cmp	r3, #0
 8017698:	d123      	bne.n	80176e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801769a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801769c:	f000 fae5 	bl	8017c6a <prvIsQueueEmpty>
 80176a0:	4603      	mov	r3, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d017      	beq.n	80176d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80176a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a8:	3324      	adds	r3, #36	; 0x24
 80176aa:	687a      	ldr	r2, [r7, #4]
 80176ac:	4611      	mov	r1, r2
 80176ae:	4618      	mov	r0, r3
 80176b0:	f001 f83a 	bl	8018728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80176b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176b6:	f000 fa86 	bl	8017bc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80176ba:	f000 fe5d 	bl	8018378 <xTaskResumeAll>
 80176be:	4603      	mov	r3, r0
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d189      	bne.n	80175d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80176c4:	4b0f      	ldr	r3, [pc, #60]	; (8017704 <xQueueReceive+0x1c0>)
 80176c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176ca:	601a      	str	r2, [r3, #0]
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	f3bf 8f6f 	isb	sy
 80176d4:	e780      	b.n	80175d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80176d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176d8:	f000 fa75 	bl	8017bc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80176dc:	f000 fe4c 	bl	8018378 <xTaskResumeAll>
 80176e0:	e77a      	b.n	80175d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80176e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176e4:	f000 fa6f 	bl	8017bc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80176e8:	f000 fe46 	bl	8018378 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80176ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176ee:	f000 fabc 	bl	8017c6a <prvIsQueueEmpty>
 80176f2:	4603      	mov	r3, r0
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f43f af6f 	beq.w	80175d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80176fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80176fc:	4618      	mov	r0, r3
 80176fe:	3730      	adds	r7, #48	; 0x30
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}
 8017704:	e000ed04 	.word	0xe000ed04

08017708 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b08e      	sub	sp, #56	; 0x38
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017712:	2300      	movs	r3, #0
 8017714:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801771a:	2300      	movs	r3, #0
 801771c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017720:	2b00      	cmp	r3, #0
 8017722:	d10b      	bne.n	801773c <xQueueSemaphoreTake+0x34>
 8017724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017728:	b672      	cpsid	i
 801772a:	f383 8811 	msr	BASEPRI, r3
 801772e:	f3bf 8f6f 	isb	sy
 8017732:	f3bf 8f4f 	dsb	sy
 8017736:	b662      	cpsie	i
 8017738:	623b      	str	r3, [r7, #32]
 801773a:	e7fe      	b.n	801773a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801773c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801773e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017740:	2b00      	cmp	r3, #0
 8017742:	d00b      	beq.n	801775c <xQueueSemaphoreTake+0x54>
 8017744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017748:	b672      	cpsid	i
 801774a:	f383 8811 	msr	BASEPRI, r3
 801774e:	f3bf 8f6f 	isb	sy
 8017752:	f3bf 8f4f 	dsb	sy
 8017756:	b662      	cpsie	i
 8017758:	61fb      	str	r3, [r7, #28]
 801775a:	e7fe      	b.n	801775a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801775c:	f001 fa04 	bl	8018b68 <xTaskGetSchedulerState>
 8017760:	4603      	mov	r3, r0
 8017762:	2b00      	cmp	r3, #0
 8017764:	d102      	bne.n	801776c <xQueueSemaphoreTake+0x64>
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d101      	bne.n	8017770 <xQueueSemaphoreTake+0x68>
 801776c:	2301      	movs	r3, #1
 801776e:	e000      	b.n	8017772 <xQueueSemaphoreTake+0x6a>
 8017770:	2300      	movs	r3, #0
 8017772:	2b00      	cmp	r3, #0
 8017774:	d10b      	bne.n	801778e <xQueueSemaphoreTake+0x86>
 8017776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801777a:	b672      	cpsid	i
 801777c:	f383 8811 	msr	BASEPRI, r3
 8017780:	f3bf 8f6f 	isb	sy
 8017784:	f3bf 8f4f 	dsb	sy
 8017788:	b662      	cpsie	i
 801778a:	61bb      	str	r3, [r7, #24]
 801778c:	e7fe      	b.n	801778c <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801778e:	f002 f82b 	bl	80197e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8017792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017796:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801779a:	2b00      	cmp	r3, #0
 801779c:	d024      	beq.n	80177e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a0:	1e5a      	subs	r2, r3, #1
 80177a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80177a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d104      	bne.n	80177b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80177ae:	f001 fb55 	bl	8018e5c <pvTaskIncrementMutexHeldCount>
 80177b2:	4602      	mov	r2, r0
 80177b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80177b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177ba:	691b      	ldr	r3, [r3, #16]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d00f      	beq.n	80177e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80177c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177c2:	3310      	adds	r3, #16
 80177c4:	4618      	mov	r0, r3
 80177c6:	f001 f801 	bl	80187cc <xTaskRemoveFromEventList>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d007      	beq.n	80177e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80177d0:	4b54      	ldr	r3, [pc, #336]	; (8017924 <xQueueSemaphoreTake+0x21c>)
 80177d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177d6:	601a      	str	r2, [r3, #0]
 80177d8:	f3bf 8f4f 	dsb	sy
 80177dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80177e0:	f002 f834 	bl	801984c <vPortExitCritical>
				return pdPASS;
 80177e4:	2301      	movs	r3, #1
 80177e6:	e098      	b.n	801791a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d112      	bne.n	8017814 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80177ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00b      	beq.n	801780c <xQueueSemaphoreTake+0x104>
 80177f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177f8:	b672      	cpsid	i
 80177fa:	f383 8811 	msr	BASEPRI, r3
 80177fe:	f3bf 8f6f 	isb	sy
 8017802:	f3bf 8f4f 	dsb	sy
 8017806:	b662      	cpsie	i
 8017808:	617b      	str	r3, [r7, #20]
 801780a:	e7fe      	b.n	801780a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801780c:	f002 f81e 	bl	801984c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017810:	2300      	movs	r3, #0
 8017812:	e082      	b.n	801791a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017816:	2b00      	cmp	r3, #0
 8017818:	d106      	bne.n	8017828 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801781a:	f107 030c 	add.w	r3, r7, #12
 801781e:	4618      	mov	r0, r3
 8017820:	f001 f838 	bl	8018894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017824:	2301      	movs	r3, #1
 8017826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017828:	f002 f810 	bl	801984c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801782c:	f000 fd96 	bl	801835c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017830:	f001 ffda 	bl	80197e8 <vPortEnterCritical>
 8017834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801783a:	b25b      	sxtb	r3, r3
 801783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017840:	d103      	bne.n	801784a <xQueueSemaphoreTake+0x142>
 8017842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017844:	2200      	movs	r2, #0
 8017846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017850:	b25b      	sxtb	r3, r3
 8017852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017856:	d103      	bne.n	8017860 <xQueueSemaphoreTake+0x158>
 8017858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801785a:	2200      	movs	r2, #0
 801785c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017860:	f001 fff4 	bl	801984c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017864:	463a      	mov	r2, r7
 8017866:	f107 030c 	add.w	r3, r7, #12
 801786a:	4611      	mov	r1, r2
 801786c:	4618      	mov	r0, r3
 801786e:	f001 f827 	bl	80188c0 <xTaskCheckForTimeOut>
 8017872:	4603      	mov	r3, r0
 8017874:	2b00      	cmp	r3, #0
 8017876:	d132      	bne.n	80178de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801787a:	f000 f9f6 	bl	8017c6a <prvIsQueueEmpty>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d026      	beq.n	80178d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d109      	bne.n	80178a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801788c:	f001 ffac 	bl	80197e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	689b      	ldr	r3, [r3, #8]
 8017894:	4618      	mov	r0, r3
 8017896:	f001 f985 	bl	8018ba4 <xTaskPriorityInherit>
 801789a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801789c:	f001 ffd6 	bl	801984c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80178a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178a2:	3324      	adds	r3, #36	; 0x24
 80178a4:	683a      	ldr	r2, [r7, #0]
 80178a6:	4611      	mov	r1, r2
 80178a8:	4618      	mov	r0, r3
 80178aa:	f000 ff3d 	bl	8018728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80178ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178b0:	f000 f989 	bl	8017bc6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80178b4:	f000 fd60 	bl	8018378 <xTaskResumeAll>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	f47f af67 	bne.w	801778e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80178c0:	4b18      	ldr	r3, [pc, #96]	; (8017924 <xQueueSemaphoreTake+0x21c>)
 80178c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80178c6:	601a      	str	r2, [r3, #0]
 80178c8:	f3bf 8f4f 	dsb	sy
 80178cc:	f3bf 8f6f 	isb	sy
 80178d0:	e75d      	b.n	801778e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80178d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178d4:	f000 f977 	bl	8017bc6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80178d8:	f000 fd4e 	bl	8018378 <xTaskResumeAll>
 80178dc:	e757      	b.n	801778e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80178de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178e0:	f000 f971 	bl	8017bc6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80178e4:	f000 fd48 	bl	8018378 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80178e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178ea:	f000 f9be 	bl	8017c6a <prvIsQueueEmpty>
 80178ee:	4603      	mov	r3, r0
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	f43f af4c 	beq.w	801778e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80178f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d00d      	beq.n	8017918 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80178fc:	f001 ff74 	bl	80197e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017902:	f000 f8b8 	bl	8017a76 <prvGetDisinheritPriorityAfterTimeout>
 8017906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801790a:	689b      	ldr	r3, [r3, #8]
 801790c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801790e:	4618      	mov	r0, r3
 8017910:	f001 fa20 	bl	8018d54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017914:	f001 ff9a 	bl	801984c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801791a:	4618      	mov	r0, r3
 801791c:	3738      	adds	r7, #56	; 0x38
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}
 8017922:	bf00      	nop
 8017924:	e000ed04 	.word	0xe000ed04

08017928 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b08e      	sub	sp, #56	; 0x38
 801792c:	af00      	add	r7, sp, #0
 801792e:	60f8      	str	r0, [r7, #12]
 8017930:	60b9      	str	r1, [r7, #8]
 8017932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801793a:	2b00      	cmp	r3, #0
 801793c:	d10b      	bne.n	8017956 <xQueueReceiveFromISR+0x2e>
 801793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017942:	b672      	cpsid	i
 8017944:	f383 8811 	msr	BASEPRI, r3
 8017948:	f3bf 8f6f 	isb	sy
 801794c:	f3bf 8f4f 	dsb	sy
 8017950:	b662      	cpsie	i
 8017952:	623b      	str	r3, [r7, #32]
 8017954:	e7fe      	b.n	8017954 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	2b00      	cmp	r3, #0
 801795a:	d103      	bne.n	8017964 <xQueueReceiveFromISR+0x3c>
 801795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801795e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017960:	2b00      	cmp	r3, #0
 8017962:	d101      	bne.n	8017968 <xQueueReceiveFromISR+0x40>
 8017964:	2301      	movs	r3, #1
 8017966:	e000      	b.n	801796a <xQueueReceiveFromISR+0x42>
 8017968:	2300      	movs	r3, #0
 801796a:	2b00      	cmp	r3, #0
 801796c:	d10b      	bne.n	8017986 <xQueueReceiveFromISR+0x5e>
 801796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017972:	b672      	cpsid	i
 8017974:	f383 8811 	msr	BASEPRI, r3
 8017978:	f3bf 8f6f 	isb	sy
 801797c:	f3bf 8f4f 	dsb	sy
 8017980:	b662      	cpsie	i
 8017982:	61fb      	str	r3, [r7, #28]
 8017984:	e7fe      	b.n	8017984 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017986:	f002 f80f 	bl	80199a8 <vPortValidateInterruptPriority>
	__asm volatile
 801798a:	f3ef 8211 	mrs	r2, BASEPRI
 801798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017992:	b672      	cpsid	i
 8017994:	f383 8811 	msr	BASEPRI, r3
 8017998:	f3bf 8f6f 	isb	sy
 801799c:	f3bf 8f4f 	dsb	sy
 80179a0:	b662      	cpsie	i
 80179a2:	61ba      	str	r2, [r7, #24]
 80179a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80179a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80179a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80179aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80179b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d02f      	beq.n	8017a16 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80179b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80179c0:	68b9      	ldr	r1, [r7, #8]
 80179c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179c4:	f000 f8d9 	bl	8017b7a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80179c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ca:	1e5a      	subs	r2, r3, #1
 80179cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80179d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80179d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179d8:	d112      	bne.n	8017a00 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	691b      	ldr	r3, [r3, #16]
 80179de:	2b00      	cmp	r3, #0
 80179e0:	d016      	beq.n	8017a10 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80179e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e4:	3310      	adds	r3, #16
 80179e6:	4618      	mov	r0, r3
 80179e8:	f000 fef0 	bl	80187cc <xTaskRemoveFromEventList>
 80179ec:	4603      	mov	r3, r0
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d00e      	beq.n	8017a10 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d00b      	beq.n	8017a10 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2201      	movs	r2, #1
 80179fc:	601a      	str	r2, [r3, #0]
 80179fe:	e007      	b.n	8017a10 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a04:	3301      	adds	r3, #1
 8017a06:	b2db      	uxtb	r3, r3
 8017a08:	b25a      	sxtb	r2, r3
 8017a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017a10:	2301      	movs	r3, #1
 8017a12:	637b      	str	r3, [r7, #52]	; 0x34
 8017a14:	e001      	b.n	8017a1a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8017a16:	2300      	movs	r3, #0
 8017a18:	637b      	str	r3, [r7, #52]	; 0x34
 8017a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a1c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017a1e:	693b      	ldr	r3, [r7, #16]
 8017a20:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3738      	adds	r7, #56	; 0x38
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}

08017a2e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017a2e:	b580      	push	{r7, lr}
 8017a30:	b084      	sub	sp, #16
 8017a32:	af00      	add	r7, sp, #0
 8017a34:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d10b      	bne.n	8017a58 <vQueueDelete+0x2a>
	__asm volatile
 8017a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a44:	b672      	cpsid	i
 8017a46:	f383 8811 	msr	BASEPRI, r3
 8017a4a:	f3bf 8f6f 	isb	sy
 8017a4e:	f3bf 8f4f 	dsb	sy
 8017a52:	b662      	cpsie	i
 8017a54:	60bb      	str	r3, [r7, #8]
 8017a56:	e7fe      	b.n	8017a56 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017a58:	68f8      	ldr	r0, [r7, #12]
 8017a5a:	f000 f95d 	bl	8017d18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017a5e:	68fb      	ldr	r3, [r7, #12]
 8017a60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d102      	bne.n	8017a6e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8017a68:	68f8      	ldr	r0, [r7, #12]
 8017a6a:	f002 f8a7 	bl	8019bbc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017a6e:	bf00      	nop
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017a76:	b480      	push	{r7}
 8017a78:	b085      	sub	sp, #20
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d006      	beq.n	8017a94 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8017a90:	60fb      	str	r3, [r7, #12]
 8017a92:	e001      	b.n	8017a98 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8017a94:	2300      	movs	r3, #0
 8017a96:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8017a98:	68fb      	ldr	r3, [r7, #12]
	}
 8017a9a:	4618      	mov	r0, r3
 8017a9c:	3714      	adds	r7, #20
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr

08017aa6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8017aa6:	b580      	push	{r7, lr}
 8017aa8:	b086      	sub	sp, #24
 8017aaa:	af00      	add	r7, sp, #0
 8017aac:	60f8      	str	r0, [r7, #12]
 8017aae:	60b9      	str	r1, [r7, #8]
 8017ab0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017aba:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d10d      	bne.n	8017ae0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017ac4:	68fb      	ldr	r3, [r7, #12]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	d14d      	bne.n	8017b68 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	689b      	ldr	r3, [r3, #8]
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f001 f8cf 	bl	8018c74 <xTaskPriorityDisinherit>
 8017ad6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2200      	movs	r2, #0
 8017adc:	609a      	str	r2, [r3, #8]
 8017ade:	e043      	b.n	8017b68 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d119      	bne.n	8017b1a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	6858      	ldr	r0, [r3, #4]
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aee:	461a      	mov	r2, r3
 8017af0:	68b9      	ldr	r1, [r7, #8]
 8017af2:	f002 fef7 	bl	801a8e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	685a      	ldr	r2, [r3, #4]
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017afe:	441a      	add	r2, r3
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	685a      	ldr	r2, [r3, #4]
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	689b      	ldr	r3, [r3, #8]
 8017b0c:	429a      	cmp	r2, r3
 8017b0e:	d32b      	bcc.n	8017b68 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	681a      	ldr	r2, [r3, #0]
 8017b14:	68fb      	ldr	r3, [r7, #12]
 8017b16:	605a      	str	r2, [r3, #4]
 8017b18:	e026      	b.n	8017b68 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	68d8      	ldr	r0, [r3, #12]
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b22:	461a      	mov	r2, r3
 8017b24:	68b9      	ldr	r1, [r7, #8]
 8017b26:	f002 fedd 	bl	801a8e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	68da      	ldr	r2, [r3, #12]
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b32:	425b      	negs	r3, r3
 8017b34:	441a      	add	r2, r3
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	68da      	ldr	r2, [r3, #12]
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d207      	bcs.n	8017b56 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	689a      	ldr	r2, [r3, #8]
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b4e:	425b      	negs	r3, r3
 8017b50:	441a      	add	r2, r3
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	2b02      	cmp	r3, #2
 8017b5a:	d105      	bne.n	8017b68 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d002      	beq.n	8017b68 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	3b01      	subs	r3, #1
 8017b66:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	1c5a      	adds	r2, r3, #1
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017b70:	697b      	ldr	r3, [r7, #20]
}
 8017b72:	4618      	mov	r0, r3
 8017b74:	3718      	adds	r7, #24
 8017b76:	46bd      	mov	sp, r7
 8017b78:	bd80      	pop	{r7, pc}

08017b7a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017b7a:	b580      	push	{r7, lr}
 8017b7c:	b082      	sub	sp, #8
 8017b7e:	af00      	add	r7, sp, #0
 8017b80:	6078      	str	r0, [r7, #4]
 8017b82:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d018      	beq.n	8017bbe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	68da      	ldr	r2, [r3, #12]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017b94:	441a      	add	r2, r3
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	68da      	ldr	r2, [r3, #12]
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	689b      	ldr	r3, [r3, #8]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d303      	bcc.n	8017bae <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681a      	ldr	r2, [r3, #0]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	68d9      	ldr	r1, [r3, #12]
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bb6:	461a      	mov	r2, r3
 8017bb8:	6838      	ldr	r0, [r7, #0]
 8017bba:	f002 fe93 	bl	801a8e4 <memcpy>
	}
}
 8017bbe:	bf00      	nop
 8017bc0:	3708      	adds	r7, #8
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}

08017bc6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017bc6:	b580      	push	{r7, lr}
 8017bc8:	b084      	sub	sp, #16
 8017bca:	af00      	add	r7, sp, #0
 8017bcc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017bce:	f001 fe0b 	bl	80197e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017bd8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017bda:	e011      	b.n	8017c00 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d012      	beq.n	8017c0a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3324      	adds	r3, #36	; 0x24
 8017be8:	4618      	mov	r0, r3
 8017bea:	f000 fdef 	bl	80187cc <xTaskRemoveFromEventList>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d001      	beq.n	8017bf8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017bf4:	f000 fec8 	bl	8018988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017bf8:	7bfb      	ldrb	r3, [r7, #15]
 8017bfa:	3b01      	subs	r3, #1
 8017bfc:	b2db      	uxtb	r3, r3
 8017bfe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	dce9      	bgt.n	8017bdc <prvUnlockQueue+0x16>
 8017c08:	e000      	b.n	8017c0c <prvUnlockQueue+0x46>
					break;
 8017c0a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	22ff      	movs	r2, #255	; 0xff
 8017c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017c14:	f001 fe1a 	bl	801984c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017c18:	f001 fde6 	bl	80197e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017c22:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c24:	e011      	b.n	8017c4a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	691b      	ldr	r3, [r3, #16]
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d012      	beq.n	8017c54 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	3310      	adds	r3, #16
 8017c32:	4618      	mov	r0, r3
 8017c34:	f000 fdca 	bl	80187cc <xTaskRemoveFromEventList>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d001      	beq.n	8017c42 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017c3e:	f000 fea3 	bl	8018988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017c42:	7bbb      	ldrb	r3, [r7, #14]
 8017c44:	3b01      	subs	r3, #1
 8017c46:	b2db      	uxtb	r3, r3
 8017c48:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017c4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	dce9      	bgt.n	8017c26 <prvUnlockQueue+0x60>
 8017c52:	e000      	b.n	8017c56 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017c54:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	22ff      	movs	r2, #255	; 0xff
 8017c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017c5e:	f001 fdf5 	bl	801984c <vPortExitCritical>
}
 8017c62:	bf00      	nop
 8017c64:	3710      	adds	r7, #16
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}

08017c6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017c6a:	b580      	push	{r7, lr}
 8017c6c:	b084      	sub	sp, #16
 8017c6e:	af00      	add	r7, sp, #0
 8017c70:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c72:	f001 fdb9 	bl	80197e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d102      	bne.n	8017c84 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017c7e:	2301      	movs	r3, #1
 8017c80:	60fb      	str	r3, [r7, #12]
 8017c82:	e001      	b.n	8017c88 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017c84:	2300      	movs	r3, #0
 8017c86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017c88:	f001 fde0 	bl	801984c <vPortExitCritical>

	return xReturn;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
}
 8017c8e:	4618      	mov	r0, r3
 8017c90:	3710      	adds	r7, #16
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}

08017c96 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017c96:	b580      	push	{r7, lr}
 8017c98:	b084      	sub	sp, #16
 8017c9a:	af00      	add	r7, sp, #0
 8017c9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017c9e:	f001 fda3 	bl	80197e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017caa:	429a      	cmp	r2, r3
 8017cac:	d102      	bne.n	8017cb4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017cae:	2301      	movs	r3, #1
 8017cb0:	60fb      	str	r3, [r7, #12]
 8017cb2:	e001      	b.n	8017cb8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017cb8:	f001 fdc8 	bl	801984c <vPortExitCritical>

	return xReturn;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
}
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	3710      	adds	r7, #16
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
	...

08017cc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017cc8:	b480      	push	{r7}
 8017cca:	b085      	sub	sp, #20
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
 8017cd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	60fb      	str	r3, [r7, #12]
 8017cd6:	e014      	b.n	8017d02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017cd8:	4a0e      	ldr	r2, [pc, #56]	; (8017d14 <vQueueAddToRegistry+0x4c>)
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d10b      	bne.n	8017cfc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017ce4:	490b      	ldr	r1, [pc, #44]	; (8017d14 <vQueueAddToRegistry+0x4c>)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	683a      	ldr	r2, [r7, #0]
 8017cea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017cee:	4a09      	ldr	r2, [pc, #36]	; (8017d14 <vQueueAddToRegistry+0x4c>)
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	00db      	lsls	r3, r3, #3
 8017cf4:	4413      	add	r3, r2
 8017cf6:	687a      	ldr	r2, [r7, #4]
 8017cf8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017cfa:	e005      	b.n	8017d08 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017cfc:	68fb      	ldr	r3, [r7, #12]
 8017cfe:	3301      	adds	r3, #1
 8017d00:	60fb      	str	r3, [r7, #12]
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	2b07      	cmp	r3, #7
 8017d06:	d9e7      	bls.n	8017cd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017d08:	bf00      	nop
 8017d0a:	3714      	adds	r7, #20
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d12:	4770      	bx	lr
 8017d14:	2001ca98 	.word	0x2001ca98

08017d18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017d18:	b480      	push	{r7}
 8017d1a:	b085      	sub	sp, #20
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d20:	2300      	movs	r3, #0
 8017d22:	60fb      	str	r3, [r7, #12]
 8017d24:	e016      	b.n	8017d54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017d26:	4a10      	ldr	r2, [pc, #64]	; (8017d68 <vQueueUnregisterQueue+0x50>)
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	00db      	lsls	r3, r3, #3
 8017d2c:	4413      	add	r3, r2
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	687a      	ldr	r2, [r7, #4]
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d10b      	bne.n	8017d4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017d36:	4a0c      	ldr	r2, [pc, #48]	; (8017d68 <vQueueUnregisterQueue+0x50>)
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017d40:	4a09      	ldr	r2, [pc, #36]	; (8017d68 <vQueueUnregisterQueue+0x50>)
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	00db      	lsls	r3, r3, #3
 8017d46:	4413      	add	r3, r2
 8017d48:	2200      	movs	r2, #0
 8017d4a:	605a      	str	r2, [r3, #4]
				break;
 8017d4c:	e005      	b.n	8017d5a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	3301      	adds	r3, #1
 8017d52:	60fb      	str	r3, [r7, #12]
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2b07      	cmp	r3, #7
 8017d58:	d9e5      	bls.n	8017d26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017d5a:	bf00      	nop
 8017d5c:	3714      	adds	r7, #20
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	2001ca98 	.word	0x2001ca98

08017d6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b086      	sub	sp, #24
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	60b9      	str	r1, [r7, #8]
 8017d76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017d7c:	f001 fd34 	bl	80197e8 <vPortEnterCritical>
 8017d80:	697b      	ldr	r3, [r7, #20]
 8017d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017d86:	b25b      	sxtb	r3, r3
 8017d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d8c:	d103      	bne.n	8017d96 <vQueueWaitForMessageRestricted+0x2a>
 8017d8e:	697b      	ldr	r3, [r7, #20]
 8017d90:	2200      	movs	r2, #0
 8017d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017d9c:	b25b      	sxtb	r3, r3
 8017d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017da2:	d103      	bne.n	8017dac <vQueueWaitForMessageRestricted+0x40>
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	2200      	movs	r2, #0
 8017da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017dac:	f001 fd4e 	bl	801984c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d106      	bne.n	8017dc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017db8:	697b      	ldr	r3, [r7, #20]
 8017dba:	3324      	adds	r3, #36	; 0x24
 8017dbc:	687a      	ldr	r2, [r7, #4]
 8017dbe:	68b9      	ldr	r1, [r7, #8]
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f000 fcd7 	bl	8018774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017dc6:	6978      	ldr	r0, [r7, #20]
 8017dc8:	f7ff fefd 	bl	8017bc6 <prvUnlockQueue>
	}
 8017dcc:	bf00      	nop
 8017dce:	3718      	adds	r7, #24
 8017dd0:	46bd      	mov	sp, r7
 8017dd2:	bd80      	pop	{r7, pc}

08017dd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	b08e      	sub	sp, #56	; 0x38
 8017dd8:	af04      	add	r7, sp, #16
 8017dda:	60f8      	str	r0, [r7, #12]
 8017ddc:	60b9      	str	r1, [r7, #8]
 8017dde:	607a      	str	r2, [r7, #4]
 8017de0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d10b      	bne.n	8017e00 <xTaskCreateStatic+0x2c>
 8017de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dec:	b672      	cpsid	i
 8017dee:	f383 8811 	msr	BASEPRI, r3
 8017df2:	f3bf 8f6f 	isb	sy
 8017df6:	f3bf 8f4f 	dsb	sy
 8017dfa:	b662      	cpsie	i
 8017dfc:	623b      	str	r3, [r7, #32]
 8017dfe:	e7fe      	b.n	8017dfe <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8017e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d10b      	bne.n	8017e1e <xTaskCreateStatic+0x4a>
 8017e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e0a:	b672      	cpsid	i
 8017e0c:	f383 8811 	msr	BASEPRI, r3
 8017e10:	f3bf 8f6f 	isb	sy
 8017e14:	f3bf 8f4f 	dsb	sy
 8017e18:	b662      	cpsie	i
 8017e1a:	61fb      	str	r3, [r7, #28]
 8017e1c:	e7fe      	b.n	8017e1c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017e1e:	235c      	movs	r3, #92	; 0x5c
 8017e20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017e22:	693b      	ldr	r3, [r7, #16]
 8017e24:	2b5c      	cmp	r3, #92	; 0x5c
 8017e26:	d00b      	beq.n	8017e40 <xTaskCreateStatic+0x6c>
 8017e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e2c:	b672      	cpsid	i
 8017e2e:	f383 8811 	msr	BASEPRI, r3
 8017e32:	f3bf 8f6f 	isb	sy
 8017e36:	f3bf 8f4f 	dsb	sy
 8017e3a:	b662      	cpsie	i
 8017e3c:	61bb      	str	r3, [r7, #24]
 8017e3e:	e7fe      	b.n	8017e3e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017e40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d01e      	beq.n	8017e86 <xTaskCreateStatic+0xb2>
 8017e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e4a:	2b00      	cmp	r3, #0
 8017e4c:	d01b      	beq.n	8017e86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e50:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e56:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e5a:	2202      	movs	r2, #2
 8017e5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017e60:	2300      	movs	r3, #0
 8017e62:	9303      	str	r3, [sp, #12]
 8017e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e66:	9302      	str	r3, [sp, #8]
 8017e68:	f107 0314 	add.w	r3, r7, #20
 8017e6c:	9301      	str	r3, [sp, #4]
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	9300      	str	r3, [sp, #0]
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	687a      	ldr	r2, [r7, #4]
 8017e76:	68b9      	ldr	r1, [r7, #8]
 8017e78:	68f8      	ldr	r0, [r7, #12]
 8017e7a:	f000 f850 	bl	8017f1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017e7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e80:	f000 f8de 	bl	8018040 <prvAddNewTaskToReadyList>
 8017e84:	e001      	b.n	8017e8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017e86:	2300      	movs	r3, #0
 8017e88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017e8a:	697b      	ldr	r3, [r7, #20]
	}
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	3728      	adds	r7, #40	; 0x28
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b08c      	sub	sp, #48	; 0x30
 8017e98:	af04      	add	r7, sp, #16
 8017e9a:	60f8      	str	r0, [r7, #12]
 8017e9c:	60b9      	str	r1, [r7, #8]
 8017e9e:	603b      	str	r3, [r7, #0]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017ea4:	88fb      	ldrh	r3, [r7, #6]
 8017ea6:	009b      	lsls	r3, r3, #2
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f001 fdbf 	bl	8019a2c <pvPortMalloc>
 8017eae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d00e      	beq.n	8017ed4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017eb6:	205c      	movs	r0, #92	; 0x5c
 8017eb8:	f001 fdb8 	bl	8019a2c <pvPortMalloc>
 8017ebc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017ebe:	69fb      	ldr	r3, [r7, #28]
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d003      	beq.n	8017ecc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017ec4:	69fb      	ldr	r3, [r7, #28]
 8017ec6:	697a      	ldr	r2, [r7, #20]
 8017ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8017eca:	e005      	b.n	8017ed8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017ecc:	6978      	ldr	r0, [r7, #20]
 8017ece:	f001 fe75 	bl	8019bbc <vPortFree>
 8017ed2:	e001      	b.n	8017ed8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017ed8:	69fb      	ldr	r3, [r7, #28]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d017      	beq.n	8017f0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017ee6:	88fa      	ldrh	r2, [r7, #6]
 8017ee8:	2300      	movs	r3, #0
 8017eea:	9303      	str	r3, [sp, #12]
 8017eec:	69fb      	ldr	r3, [r7, #28]
 8017eee:	9302      	str	r3, [sp, #8]
 8017ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef2:	9301      	str	r3, [sp, #4]
 8017ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef6:	9300      	str	r3, [sp, #0]
 8017ef8:	683b      	ldr	r3, [r7, #0]
 8017efa:	68b9      	ldr	r1, [r7, #8]
 8017efc:	68f8      	ldr	r0, [r7, #12]
 8017efe:	f000 f80e 	bl	8017f1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017f02:	69f8      	ldr	r0, [r7, #28]
 8017f04:	f000 f89c 	bl	8018040 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017f08:	2301      	movs	r3, #1
 8017f0a:	61bb      	str	r3, [r7, #24]
 8017f0c:	e002      	b.n	8017f14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8017f12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017f14:	69bb      	ldr	r3, [r7, #24]
	}
 8017f16:	4618      	mov	r0, r3
 8017f18:	3720      	adds	r7, #32
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}

08017f1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017f1e:	b580      	push	{r7, lr}
 8017f20:	b088      	sub	sp, #32
 8017f22:	af00      	add	r7, sp, #0
 8017f24:	60f8      	str	r0, [r7, #12]
 8017f26:	60b9      	str	r1, [r7, #8]
 8017f28:	607a      	str	r2, [r7, #4]
 8017f2a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	461a      	mov	r2, r3
 8017f36:	21a5      	movs	r1, #165	; 0xa5
 8017f38:	f002 fcdf 	bl	801a8fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017f46:	440b      	add	r3, r1
 8017f48:	009b      	lsls	r3, r3, #2
 8017f4a:	4413      	add	r3, r2
 8017f4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017f4e:	69bb      	ldr	r3, [r7, #24]
 8017f50:	f023 0307 	bic.w	r3, r3, #7
 8017f54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017f56:	69bb      	ldr	r3, [r7, #24]
 8017f58:	f003 0307 	and.w	r3, r3, #7
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d00b      	beq.n	8017f78 <prvInitialiseNewTask+0x5a>
 8017f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f64:	b672      	cpsid	i
 8017f66:	f383 8811 	msr	BASEPRI, r3
 8017f6a:	f3bf 8f6f 	isb	sy
 8017f6e:	f3bf 8f4f 	dsb	sy
 8017f72:	b662      	cpsie	i
 8017f74:	617b      	str	r3, [r7, #20]
 8017f76:	e7fe      	b.n	8017f76 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d01f      	beq.n	8017fbe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017f7e:	2300      	movs	r3, #0
 8017f80:	61fb      	str	r3, [r7, #28]
 8017f82:	e012      	b.n	8017faa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017f84:	68ba      	ldr	r2, [r7, #8]
 8017f86:	69fb      	ldr	r3, [r7, #28]
 8017f88:	4413      	add	r3, r2
 8017f8a:	7819      	ldrb	r1, [r3, #0]
 8017f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f8e:	69fb      	ldr	r3, [r7, #28]
 8017f90:	4413      	add	r3, r2
 8017f92:	3334      	adds	r3, #52	; 0x34
 8017f94:	460a      	mov	r2, r1
 8017f96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017f98:	68ba      	ldr	r2, [r7, #8]
 8017f9a:	69fb      	ldr	r3, [r7, #28]
 8017f9c:	4413      	add	r3, r2
 8017f9e:	781b      	ldrb	r3, [r3, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d006      	beq.n	8017fb2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017fa4:	69fb      	ldr	r3, [r7, #28]
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	61fb      	str	r3, [r7, #28]
 8017faa:	69fb      	ldr	r3, [r7, #28]
 8017fac:	2b0f      	cmp	r3, #15
 8017fae:	d9e9      	bls.n	8017f84 <prvInitialiseNewTask+0x66>
 8017fb0:	e000      	b.n	8017fb4 <prvInitialiseNewTask+0x96>
			{
				break;
 8017fb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017fbc:	e003      	b.n	8017fc6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fc8:	2b37      	cmp	r3, #55	; 0x37
 8017fca:	d901      	bls.n	8017fd0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017fcc:	2337      	movs	r3, #55	; 0x37
 8017fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fde:	2200      	movs	r2, #0
 8017fe0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fe4:	3304      	adds	r3, #4
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7fe fd76 	bl	8016ad8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fee:	3318      	adds	r3, #24
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7fe fd71 	bl	8016ad8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801800a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801800e:	2200      	movs	r2, #0
 8018010:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018014:	2200      	movs	r2, #0
 8018016:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801801a:	683a      	ldr	r2, [r7, #0]
 801801c:	68f9      	ldr	r1, [r7, #12]
 801801e:	69b8      	ldr	r0, [r7, #24]
 8018020:	f001 fad8 	bl	80195d4 <pxPortInitialiseStack>
 8018024:	4602      	mov	r2, r0
 8018026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018028:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	2b00      	cmp	r3, #0
 801802e:	d002      	beq.n	8018036 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8018030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018036:	bf00      	nop
 8018038:	3720      	adds	r7, #32
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}
	...

08018040 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018048:	f001 fbce 	bl	80197e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801804c:	4b2d      	ldr	r3, [pc, #180]	; (8018104 <prvAddNewTaskToReadyList+0xc4>)
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	3301      	adds	r3, #1
 8018052:	4a2c      	ldr	r2, [pc, #176]	; (8018104 <prvAddNewTaskToReadyList+0xc4>)
 8018054:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018056:	4b2c      	ldr	r3, [pc, #176]	; (8018108 <prvAddNewTaskToReadyList+0xc8>)
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d109      	bne.n	8018072 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801805e:	4a2a      	ldr	r2, [pc, #168]	; (8018108 <prvAddNewTaskToReadyList+0xc8>)
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018064:	4b27      	ldr	r3, [pc, #156]	; (8018104 <prvAddNewTaskToReadyList+0xc4>)
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	2b01      	cmp	r3, #1
 801806a:	d110      	bne.n	801808e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801806c:	f000 fcb0 	bl	80189d0 <prvInitialiseTaskLists>
 8018070:	e00d      	b.n	801808e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8018072:	4b26      	ldr	r3, [pc, #152]	; (801810c <prvAddNewTaskToReadyList+0xcc>)
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d109      	bne.n	801808e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801807a:	4b23      	ldr	r3, [pc, #140]	; (8018108 <prvAddNewTaskToReadyList+0xc8>)
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018084:	429a      	cmp	r2, r3
 8018086:	d802      	bhi.n	801808e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8018088:	4a1f      	ldr	r2, [pc, #124]	; (8018108 <prvAddNewTaskToReadyList+0xc8>)
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801808e:	4b20      	ldr	r3, [pc, #128]	; (8018110 <prvAddNewTaskToReadyList+0xd0>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	3301      	adds	r3, #1
 8018094:	4a1e      	ldr	r2, [pc, #120]	; (8018110 <prvAddNewTaskToReadyList+0xd0>)
 8018096:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8018098:	4b1d      	ldr	r3, [pc, #116]	; (8018110 <prvAddNewTaskToReadyList+0xd0>)
 801809a:	681a      	ldr	r2, [r3, #0]
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180a4:	4b1b      	ldr	r3, [pc, #108]	; (8018114 <prvAddNewTaskToReadyList+0xd4>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d903      	bls.n	80180b4 <prvAddNewTaskToReadyList+0x74>
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180b0:	4a18      	ldr	r2, [pc, #96]	; (8018114 <prvAddNewTaskToReadyList+0xd4>)
 80180b2:	6013      	str	r3, [r2, #0]
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180b8:	4613      	mov	r3, r2
 80180ba:	009b      	lsls	r3, r3, #2
 80180bc:	4413      	add	r3, r2
 80180be:	009b      	lsls	r3, r3, #2
 80180c0:	4a15      	ldr	r2, [pc, #84]	; (8018118 <prvAddNewTaskToReadyList+0xd8>)
 80180c2:	441a      	add	r2, r3
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	3304      	adds	r3, #4
 80180c8:	4619      	mov	r1, r3
 80180ca:	4610      	mov	r0, r2
 80180cc:	f7fe fd11 	bl	8016af2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80180d0:	f001 fbbc 	bl	801984c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80180d4:	4b0d      	ldr	r3, [pc, #52]	; (801810c <prvAddNewTaskToReadyList+0xcc>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d00e      	beq.n	80180fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80180dc:	4b0a      	ldr	r3, [pc, #40]	; (8018108 <prvAddNewTaskToReadyList+0xc8>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d207      	bcs.n	80180fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80180ea:	4b0c      	ldr	r3, [pc, #48]	; (801811c <prvAddNewTaskToReadyList+0xdc>)
 80180ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80180f0:	601a      	str	r2, [r3, #0]
 80180f2:	f3bf 8f4f 	dsb	sy
 80180f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80180fa:	bf00      	nop
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}
 8018102:	bf00      	nop
 8018104:	20000f04 	.word	0x20000f04
 8018108:	20000a30 	.word	0x20000a30
 801810c:	20000f10 	.word	0x20000f10
 8018110:	20000f20 	.word	0x20000f20
 8018114:	20000f0c 	.word	0x20000f0c
 8018118:	20000a34 	.word	0x20000a34
 801811c:	e000ed04 	.word	0xe000ed04

08018120 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8018120:	b580      	push	{r7, lr}
 8018122:	b08a      	sub	sp, #40	; 0x28
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
 8018128:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801812a:	2300      	movs	r3, #0
 801812c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2b00      	cmp	r3, #0
 8018132:	d10b      	bne.n	801814c <vTaskDelayUntil+0x2c>
 8018134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018138:	b672      	cpsid	i
 801813a:	f383 8811 	msr	BASEPRI, r3
 801813e:	f3bf 8f6f 	isb	sy
 8018142:	f3bf 8f4f 	dsb	sy
 8018146:	b662      	cpsie	i
 8018148:	617b      	str	r3, [r7, #20]
 801814a:	e7fe      	b.n	801814a <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d10b      	bne.n	801816a <vTaskDelayUntil+0x4a>
 8018152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018156:	b672      	cpsid	i
 8018158:	f383 8811 	msr	BASEPRI, r3
 801815c:	f3bf 8f6f 	isb	sy
 8018160:	f3bf 8f4f 	dsb	sy
 8018164:	b662      	cpsie	i
 8018166:	613b      	str	r3, [r7, #16]
 8018168:	e7fe      	b.n	8018168 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 801816a:	4b2a      	ldr	r3, [pc, #168]	; (8018214 <vTaskDelayUntil+0xf4>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d00b      	beq.n	801818a <vTaskDelayUntil+0x6a>
 8018172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018176:	b672      	cpsid	i
 8018178:	f383 8811 	msr	BASEPRI, r3
 801817c:	f3bf 8f6f 	isb	sy
 8018180:	f3bf 8f4f 	dsb	sy
 8018184:	b662      	cpsie	i
 8018186:	60fb      	str	r3, [r7, #12]
 8018188:	e7fe      	b.n	8018188 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 801818a:	f000 f8e7 	bl	801835c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801818e:	4b22      	ldr	r3, [pc, #136]	; (8018218 <vTaskDelayUntil+0xf8>)
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	683a      	ldr	r2, [r7, #0]
 801819a:	4413      	add	r3, r2
 801819c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	6a3a      	ldr	r2, [r7, #32]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d20b      	bcs.n	80181c0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	69fa      	ldr	r2, [r7, #28]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d211      	bcs.n	80181d6 <vTaskDelayUntil+0xb6>
 80181b2:	69fa      	ldr	r2, [r7, #28]
 80181b4:	6a3b      	ldr	r3, [r7, #32]
 80181b6:	429a      	cmp	r2, r3
 80181b8:	d90d      	bls.n	80181d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80181ba:	2301      	movs	r3, #1
 80181bc:	627b      	str	r3, [r7, #36]	; 0x24
 80181be:	e00a      	b.n	80181d6 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	69fa      	ldr	r2, [r7, #28]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d303      	bcc.n	80181d2 <vTaskDelayUntil+0xb2>
 80181ca:	69fa      	ldr	r2, [r7, #28]
 80181cc:	6a3b      	ldr	r3, [r7, #32]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	d901      	bls.n	80181d6 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80181d2:	2301      	movs	r3, #1
 80181d4:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	69fa      	ldr	r2, [r7, #28]
 80181da:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80181dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d006      	beq.n	80181f0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80181e2:	69fa      	ldr	r2, [r7, #28]
 80181e4:	6a3b      	ldr	r3, [r7, #32]
 80181e6:	1ad3      	subs	r3, r2, r3
 80181e8:	2100      	movs	r1, #0
 80181ea:	4618      	mov	r0, r3
 80181ec:	f000 fe4a 	bl	8018e84 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80181f0:	f000 f8c2 	bl	8018378 <xTaskResumeAll>
 80181f4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80181f6:	69bb      	ldr	r3, [r7, #24]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d107      	bne.n	801820c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80181fc:	4b07      	ldr	r3, [pc, #28]	; (801821c <vTaskDelayUntil+0xfc>)
 80181fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018202:	601a      	str	r2, [r3, #0]
 8018204:	f3bf 8f4f 	dsb	sy
 8018208:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801820c:	bf00      	nop
 801820e:	3728      	adds	r7, #40	; 0x28
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	20000f2c 	.word	0x20000f2c
 8018218:	20000f08 	.word	0x20000f08
 801821c:	e000ed04 	.word	0xe000ed04

08018220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018220:	b580      	push	{r7, lr}
 8018222:	b084      	sub	sp, #16
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018228:	2300      	movs	r3, #0
 801822a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d018      	beq.n	8018264 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018232:	4b14      	ldr	r3, [pc, #80]	; (8018284 <vTaskDelay+0x64>)
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d00b      	beq.n	8018252 <vTaskDelay+0x32>
 801823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801823e:	b672      	cpsid	i
 8018240:	f383 8811 	msr	BASEPRI, r3
 8018244:	f3bf 8f6f 	isb	sy
 8018248:	f3bf 8f4f 	dsb	sy
 801824c:	b662      	cpsie	i
 801824e:	60bb      	str	r3, [r7, #8]
 8018250:	e7fe      	b.n	8018250 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8018252:	f000 f883 	bl	801835c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018256:	2100      	movs	r1, #0
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f000 fe13 	bl	8018e84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801825e:	f000 f88b 	bl	8018378 <xTaskResumeAll>
 8018262:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d107      	bne.n	801827a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801826a:	4b07      	ldr	r3, [pc, #28]	; (8018288 <vTaskDelay+0x68>)
 801826c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018270:	601a      	str	r2, [r3, #0]
 8018272:	f3bf 8f4f 	dsb	sy
 8018276:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801827a:	bf00      	nop
 801827c:	3710      	adds	r7, #16
 801827e:	46bd      	mov	sp, r7
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	20000f2c 	.word	0x20000f2c
 8018288:	e000ed04 	.word	0xe000ed04

0801828c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b08a      	sub	sp, #40	; 0x28
 8018290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8018292:	2300      	movs	r3, #0
 8018294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8018296:	2300      	movs	r3, #0
 8018298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801829a:	463a      	mov	r2, r7
 801829c:	1d39      	adds	r1, r7, #4
 801829e:	f107 0308 	add.w	r3, r7, #8
 80182a2:	4618      	mov	r0, r3
 80182a4:	f7fe fbc4 	bl	8016a30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80182a8:	6839      	ldr	r1, [r7, #0]
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	68ba      	ldr	r2, [r7, #8]
 80182ae:	9202      	str	r2, [sp, #8]
 80182b0:	9301      	str	r3, [sp, #4]
 80182b2:	2300      	movs	r3, #0
 80182b4:	9300      	str	r3, [sp, #0]
 80182b6:	2300      	movs	r3, #0
 80182b8:	460a      	mov	r2, r1
 80182ba:	4922      	ldr	r1, [pc, #136]	; (8018344 <vTaskStartScheduler+0xb8>)
 80182bc:	4822      	ldr	r0, [pc, #136]	; (8018348 <vTaskStartScheduler+0xbc>)
 80182be:	f7ff fd89 	bl	8017dd4 <xTaskCreateStatic>
 80182c2:	4602      	mov	r2, r0
 80182c4:	4b21      	ldr	r3, [pc, #132]	; (801834c <vTaskStartScheduler+0xc0>)
 80182c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80182c8:	4b20      	ldr	r3, [pc, #128]	; (801834c <vTaskStartScheduler+0xc0>)
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d002      	beq.n	80182d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80182d0:	2301      	movs	r3, #1
 80182d2:	617b      	str	r3, [r7, #20]
 80182d4:	e001      	b.n	80182da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80182d6:	2300      	movs	r3, #0
 80182d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80182da:	697b      	ldr	r3, [r7, #20]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d102      	bne.n	80182e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80182e0:	f000 fe24 	bl	8018f2c <xTimerCreateTimerTask>
 80182e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80182e6:	697b      	ldr	r3, [r7, #20]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	d117      	bne.n	801831c <vTaskStartScheduler+0x90>
 80182ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182f0:	b672      	cpsid	i
 80182f2:	f383 8811 	msr	BASEPRI, r3
 80182f6:	f3bf 8f6f 	isb	sy
 80182fa:	f3bf 8f4f 	dsb	sy
 80182fe:	b662      	cpsie	i
 8018300:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018302:	4b13      	ldr	r3, [pc, #76]	; (8018350 <vTaskStartScheduler+0xc4>)
 8018304:	f04f 32ff 	mov.w	r2, #4294967295
 8018308:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801830a:	4b12      	ldr	r3, [pc, #72]	; (8018354 <vTaskStartScheduler+0xc8>)
 801830c:	2201      	movs	r2, #1
 801830e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018310:	4b11      	ldr	r3, [pc, #68]	; (8018358 <vTaskStartScheduler+0xcc>)
 8018312:	2200      	movs	r2, #0
 8018314:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018316:	f001 f9eb 	bl	80196f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801831a:	e00f      	b.n	801833c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801831c:	697b      	ldr	r3, [r7, #20]
 801831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018322:	d10b      	bne.n	801833c <vTaskStartScheduler+0xb0>
 8018324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018328:	b672      	cpsid	i
 801832a:	f383 8811 	msr	BASEPRI, r3
 801832e:	f3bf 8f6f 	isb	sy
 8018332:	f3bf 8f4f 	dsb	sy
 8018336:	b662      	cpsie	i
 8018338:	60fb      	str	r3, [r7, #12]
 801833a:	e7fe      	b.n	801833a <vTaskStartScheduler+0xae>
}
 801833c:	bf00      	nop
 801833e:	3718      	adds	r7, #24
 8018340:	46bd      	mov	sp, r7
 8018342:	bd80      	pop	{r7, pc}
 8018344:	0801d89c 	.word	0x0801d89c
 8018348:	080189a1 	.word	0x080189a1
 801834c:	20000f28 	.word	0x20000f28
 8018350:	20000f24 	.word	0x20000f24
 8018354:	20000f10 	.word	0x20000f10
 8018358:	20000f08 	.word	0x20000f08

0801835c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801835c:	b480      	push	{r7}
 801835e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8018360:	4b04      	ldr	r3, [pc, #16]	; (8018374 <vTaskSuspendAll+0x18>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	4a03      	ldr	r2, [pc, #12]	; (8018374 <vTaskSuspendAll+0x18>)
 8018368:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801836a:	bf00      	nop
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr
 8018374:	20000f2c 	.word	0x20000f2c

08018378 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018378:	b580      	push	{r7, lr}
 801837a:	b084      	sub	sp, #16
 801837c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801837e:	2300      	movs	r3, #0
 8018380:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018382:	2300      	movs	r3, #0
 8018384:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8018386:	4b42      	ldr	r3, [pc, #264]	; (8018490 <xTaskResumeAll+0x118>)
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d10b      	bne.n	80183a6 <xTaskResumeAll+0x2e>
 801838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018392:	b672      	cpsid	i
 8018394:	f383 8811 	msr	BASEPRI, r3
 8018398:	f3bf 8f6f 	isb	sy
 801839c:	f3bf 8f4f 	dsb	sy
 80183a0:	b662      	cpsie	i
 80183a2:	603b      	str	r3, [r7, #0]
 80183a4:	e7fe      	b.n	80183a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80183a6:	f001 fa1f 	bl	80197e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80183aa:	4b39      	ldr	r3, [pc, #228]	; (8018490 <xTaskResumeAll+0x118>)
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	3b01      	subs	r3, #1
 80183b0:	4a37      	ldr	r2, [pc, #220]	; (8018490 <xTaskResumeAll+0x118>)
 80183b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80183b4:	4b36      	ldr	r3, [pc, #216]	; (8018490 <xTaskResumeAll+0x118>)
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d162      	bne.n	8018482 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80183bc:	4b35      	ldr	r3, [pc, #212]	; (8018494 <xTaskResumeAll+0x11c>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d05e      	beq.n	8018482 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80183c4:	e02f      	b.n	8018426 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183c6:	4b34      	ldr	r3, [pc, #208]	; (8018498 <xTaskResumeAll+0x120>)
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	68db      	ldr	r3, [r3, #12]
 80183cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	3318      	adds	r3, #24
 80183d2:	4618      	mov	r0, r3
 80183d4:	f7fe fbea 	bl	8016bac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	3304      	adds	r3, #4
 80183dc:	4618      	mov	r0, r3
 80183de:	f7fe fbe5 	bl	8016bac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183e6:	4b2d      	ldr	r3, [pc, #180]	; (801849c <xTaskResumeAll+0x124>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d903      	bls.n	80183f6 <xTaskResumeAll+0x7e>
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183f2:	4a2a      	ldr	r2, [pc, #168]	; (801849c <xTaskResumeAll+0x124>)
 80183f4:	6013      	str	r3, [r2, #0]
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80183fa:	4613      	mov	r3, r2
 80183fc:	009b      	lsls	r3, r3, #2
 80183fe:	4413      	add	r3, r2
 8018400:	009b      	lsls	r3, r3, #2
 8018402:	4a27      	ldr	r2, [pc, #156]	; (80184a0 <xTaskResumeAll+0x128>)
 8018404:	441a      	add	r2, r3
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	3304      	adds	r3, #4
 801840a:	4619      	mov	r1, r3
 801840c:	4610      	mov	r0, r2
 801840e:	f7fe fb70 	bl	8016af2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018416:	4b23      	ldr	r3, [pc, #140]	; (80184a4 <xTaskResumeAll+0x12c>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801841c:	429a      	cmp	r2, r3
 801841e:	d302      	bcc.n	8018426 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018420:	4b21      	ldr	r3, [pc, #132]	; (80184a8 <xTaskResumeAll+0x130>)
 8018422:	2201      	movs	r2, #1
 8018424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018426:	4b1c      	ldr	r3, [pc, #112]	; (8018498 <xTaskResumeAll+0x120>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d1cb      	bne.n	80183c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d001      	beq.n	8018438 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018434:	f000 fb68 	bl	8018b08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018438:	4b1c      	ldr	r3, [pc, #112]	; (80184ac <xTaskResumeAll+0x134>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d010      	beq.n	8018466 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018444:	f000 f858 	bl	80184f8 <xTaskIncrementTick>
 8018448:	4603      	mov	r3, r0
 801844a:	2b00      	cmp	r3, #0
 801844c:	d002      	beq.n	8018454 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801844e:	4b16      	ldr	r3, [pc, #88]	; (80184a8 <xTaskResumeAll+0x130>)
 8018450:	2201      	movs	r2, #1
 8018452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	3b01      	subs	r3, #1
 8018458:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	2b00      	cmp	r3, #0
 801845e:	d1f1      	bne.n	8018444 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8018460:	4b12      	ldr	r3, [pc, #72]	; (80184ac <xTaskResumeAll+0x134>)
 8018462:	2200      	movs	r2, #0
 8018464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018466:	4b10      	ldr	r3, [pc, #64]	; (80184a8 <xTaskResumeAll+0x130>)
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d009      	beq.n	8018482 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801846e:	2301      	movs	r3, #1
 8018470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018472:	4b0f      	ldr	r3, [pc, #60]	; (80184b0 <xTaskResumeAll+0x138>)
 8018474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018478:	601a      	str	r2, [r3, #0]
 801847a:	f3bf 8f4f 	dsb	sy
 801847e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018482:	f001 f9e3 	bl	801984c <vPortExitCritical>

	return xAlreadyYielded;
 8018486:	68bb      	ldr	r3, [r7, #8]
}
 8018488:	4618      	mov	r0, r3
 801848a:	3710      	adds	r7, #16
 801848c:	46bd      	mov	sp, r7
 801848e:	bd80      	pop	{r7, pc}
 8018490:	20000f2c 	.word	0x20000f2c
 8018494:	20000f04 	.word	0x20000f04
 8018498:	20000ec4 	.word	0x20000ec4
 801849c:	20000f0c 	.word	0x20000f0c
 80184a0:	20000a34 	.word	0x20000a34
 80184a4:	20000a30 	.word	0x20000a30
 80184a8:	20000f18 	.word	0x20000f18
 80184ac:	20000f14 	.word	0x20000f14
 80184b0:	e000ed04 	.word	0xe000ed04

080184b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80184b4:	b480      	push	{r7}
 80184b6:	b083      	sub	sp, #12
 80184b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80184ba:	4b05      	ldr	r3, [pc, #20]	; (80184d0 <xTaskGetTickCount+0x1c>)
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80184c0:	687b      	ldr	r3, [r7, #4]
}
 80184c2:	4618      	mov	r0, r3
 80184c4:	370c      	adds	r7, #12
 80184c6:	46bd      	mov	sp, r7
 80184c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184cc:	4770      	bx	lr
 80184ce:	bf00      	nop
 80184d0:	20000f08 	.word	0x20000f08

080184d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80184d4:	b580      	push	{r7, lr}
 80184d6:	b082      	sub	sp, #8
 80184d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80184da:	f001 fa65 	bl	80199a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80184de:	2300      	movs	r3, #0
 80184e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80184e2:	4b04      	ldr	r3, [pc, #16]	; (80184f4 <xTaskGetTickCountFromISR+0x20>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80184e8:	683b      	ldr	r3, [r7, #0]
}
 80184ea:	4618      	mov	r0, r3
 80184ec:	3708      	adds	r7, #8
 80184ee:	46bd      	mov	sp, r7
 80184f0:	bd80      	pop	{r7, pc}
 80184f2:	bf00      	nop
 80184f4:	20000f08 	.word	0x20000f08

080184f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b086      	sub	sp, #24
 80184fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80184fe:	2300      	movs	r3, #0
 8018500:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018502:	4b4f      	ldr	r3, [pc, #316]	; (8018640 <xTaskIncrementTick+0x148>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	2b00      	cmp	r3, #0
 8018508:	f040 808a 	bne.w	8018620 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801850c:	4b4d      	ldr	r3, [pc, #308]	; (8018644 <xTaskIncrementTick+0x14c>)
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	3301      	adds	r3, #1
 8018512:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018514:	4a4b      	ldr	r2, [pc, #300]	; (8018644 <xTaskIncrementTick+0x14c>)
 8018516:	693b      	ldr	r3, [r7, #16]
 8018518:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	2b00      	cmp	r3, #0
 801851e:	d121      	bne.n	8018564 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018520:	4b49      	ldr	r3, [pc, #292]	; (8018648 <xTaskIncrementTick+0x150>)
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	681b      	ldr	r3, [r3, #0]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d00b      	beq.n	8018542 <xTaskIncrementTick+0x4a>
 801852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801852e:	b672      	cpsid	i
 8018530:	f383 8811 	msr	BASEPRI, r3
 8018534:	f3bf 8f6f 	isb	sy
 8018538:	f3bf 8f4f 	dsb	sy
 801853c:	b662      	cpsie	i
 801853e:	603b      	str	r3, [r7, #0]
 8018540:	e7fe      	b.n	8018540 <xTaskIncrementTick+0x48>
 8018542:	4b41      	ldr	r3, [pc, #260]	; (8018648 <xTaskIncrementTick+0x150>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	60fb      	str	r3, [r7, #12]
 8018548:	4b40      	ldr	r3, [pc, #256]	; (801864c <xTaskIncrementTick+0x154>)
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	4a3e      	ldr	r2, [pc, #248]	; (8018648 <xTaskIncrementTick+0x150>)
 801854e:	6013      	str	r3, [r2, #0]
 8018550:	4a3e      	ldr	r2, [pc, #248]	; (801864c <xTaskIncrementTick+0x154>)
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	6013      	str	r3, [r2, #0]
 8018556:	4b3e      	ldr	r3, [pc, #248]	; (8018650 <xTaskIncrementTick+0x158>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	3301      	adds	r3, #1
 801855c:	4a3c      	ldr	r2, [pc, #240]	; (8018650 <xTaskIncrementTick+0x158>)
 801855e:	6013      	str	r3, [r2, #0]
 8018560:	f000 fad2 	bl	8018b08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018564:	4b3b      	ldr	r3, [pc, #236]	; (8018654 <xTaskIncrementTick+0x15c>)
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	693a      	ldr	r2, [r7, #16]
 801856a:	429a      	cmp	r2, r3
 801856c:	d349      	bcc.n	8018602 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801856e:	4b36      	ldr	r3, [pc, #216]	; (8018648 <xTaskIncrementTick+0x150>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d104      	bne.n	8018582 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018578:	4b36      	ldr	r3, [pc, #216]	; (8018654 <xTaskIncrementTick+0x15c>)
 801857a:	f04f 32ff 	mov.w	r2, #4294967295
 801857e:	601a      	str	r2, [r3, #0]
					break;
 8018580:	e03f      	b.n	8018602 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018582:	4b31      	ldr	r3, [pc, #196]	; (8018648 <xTaskIncrementTick+0x150>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	68db      	ldr	r3, [r3, #12]
 8018588:	68db      	ldr	r3, [r3, #12]
 801858a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801858c:	68bb      	ldr	r3, [r7, #8]
 801858e:	685b      	ldr	r3, [r3, #4]
 8018590:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018592:	693a      	ldr	r2, [r7, #16]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	429a      	cmp	r2, r3
 8018598:	d203      	bcs.n	80185a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801859a:	4a2e      	ldr	r2, [pc, #184]	; (8018654 <xTaskIncrementTick+0x15c>)
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80185a0:	e02f      	b.n	8018602 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80185a2:	68bb      	ldr	r3, [r7, #8]
 80185a4:	3304      	adds	r3, #4
 80185a6:	4618      	mov	r0, r3
 80185a8:	f7fe fb00 	bl	8016bac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80185ac:	68bb      	ldr	r3, [r7, #8]
 80185ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d004      	beq.n	80185be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	3318      	adds	r3, #24
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7fe faf7 	bl	8016bac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80185be:	68bb      	ldr	r3, [r7, #8]
 80185c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185c2:	4b25      	ldr	r3, [pc, #148]	; (8018658 <xTaskIncrementTick+0x160>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	429a      	cmp	r2, r3
 80185c8:	d903      	bls.n	80185d2 <xTaskIncrementTick+0xda>
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ce:	4a22      	ldr	r2, [pc, #136]	; (8018658 <xTaskIncrementTick+0x160>)
 80185d0:	6013      	str	r3, [r2, #0]
 80185d2:	68bb      	ldr	r3, [r7, #8]
 80185d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185d6:	4613      	mov	r3, r2
 80185d8:	009b      	lsls	r3, r3, #2
 80185da:	4413      	add	r3, r2
 80185dc:	009b      	lsls	r3, r3, #2
 80185de:	4a1f      	ldr	r2, [pc, #124]	; (801865c <xTaskIncrementTick+0x164>)
 80185e0:	441a      	add	r2, r3
 80185e2:	68bb      	ldr	r3, [r7, #8]
 80185e4:	3304      	adds	r3, #4
 80185e6:	4619      	mov	r1, r3
 80185e8:	4610      	mov	r0, r2
 80185ea:	f7fe fa82 	bl	8016af2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80185ee:	68bb      	ldr	r3, [r7, #8]
 80185f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185f2:	4b1b      	ldr	r3, [pc, #108]	; (8018660 <xTaskIncrementTick+0x168>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d3b8      	bcc.n	801856e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80185fc:	2301      	movs	r3, #1
 80185fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018600:	e7b5      	b.n	801856e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018602:	4b17      	ldr	r3, [pc, #92]	; (8018660 <xTaskIncrementTick+0x168>)
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018608:	4914      	ldr	r1, [pc, #80]	; (801865c <xTaskIncrementTick+0x164>)
 801860a:	4613      	mov	r3, r2
 801860c:	009b      	lsls	r3, r3, #2
 801860e:	4413      	add	r3, r2
 8018610:	009b      	lsls	r3, r3, #2
 8018612:	440b      	add	r3, r1
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	2b01      	cmp	r3, #1
 8018618:	d907      	bls.n	801862a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801861a:	2301      	movs	r3, #1
 801861c:	617b      	str	r3, [r7, #20]
 801861e:	e004      	b.n	801862a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018620:	4b10      	ldr	r3, [pc, #64]	; (8018664 <xTaskIncrementTick+0x16c>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	3301      	adds	r3, #1
 8018626:	4a0f      	ldr	r2, [pc, #60]	; (8018664 <xTaskIncrementTick+0x16c>)
 8018628:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801862a:	4b0f      	ldr	r3, [pc, #60]	; (8018668 <xTaskIncrementTick+0x170>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d001      	beq.n	8018636 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8018632:	2301      	movs	r3, #1
 8018634:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8018636:	697b      	ldr	r3, [r7, #20]
}
 8018638:	4618      	mov	r0, r3
 801863a:	3718      	adds	r7, #24
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}
 8018640:	20000f2c 	.word	0x20000f2c
 8018644:	20000f08 	.word	0x20000f08
 8018648:	20000ebc 	.word	0x20000ebc
 801864c:	20000ec0 	.word	0x20000ec0
 8018650:	20000f1c 	.word	0x20000f1c
 8018654:	20000f24 	.word	0x20000f24
 8018658:	20000f0c 	.word	0x20000f0c
 801865c:	20000a34 	.word	0x20000a34
 8018660:	20000a30 	.word	0x20000a30
 8018664:	20000f14 	.word	0x20000f14
 8018668:	20000f18 	.word	0x20000f18

0801866c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801866c:	b480      	push	{r7}
 801866e:	b085      	sub	sp, #20
 8018670:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018672:	4b28      	ldr	r3, [pc, #160]	; (8018714 <vTaskSwitchContext+0xa8>)
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d003      	beq.n	8018682 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801867a:	4b27      	ldr	r3, [pc, #156]	; (8018718 <vTaskSwitchContext+0xac>)
 801867c:	2201      	movs	r2, #1
 801867e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018680:	e042      	b.n	8018708 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8018682:	4b25      	ldr	r3, [pc, #148]	; (8018718 <vTaskSwitchContext+0xac>)
 8018684:	2200      	movs	r2, #0
 8018686:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018688:	4b24      	ldr	r3, [pc, #144]	; (801871c <vTaskSwitchContext+0xb0>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	60fb      	str	r3, [r7, #12]
 801868e:	e011      	b.n	80186b4 <vTaskSwitchContext+0x48>
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d10b      	bne.n	80186ae <vTaskSwitchContext+0x42>
 8018696:	f04f 0350 	mov.w	r3, #80	; 0x50
 801869a:	b672      	cpsid	i
 801869c:	f383 8811 	msr	BASEPRI, r3
 80186a0:	f3bf 8f6f 	isb	sy
 80186a4:	f3bf 8f4f 	dsb	sy
 80186a8:	b662      	cpsie	i
 80186aa:	607b      	str	r3, [r7, #4]
 80186ac:	e7fe      	b.n	80186ac <vTaskSwitchContext+0x40>
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	3b01      	subs	r3, #1
 80186b2:	60fb      	str	r3, [r7, #12]
 80186b4:	491a      	ldr	r1, [pc, #104]	; (8018720 <vTaskSwitchContext+0xb4>)
 80186b6:	68fa      	ldr	r2, [r7, #12]
 80186b8:	4613      	mov	r3, r2
 80186ba:	009b      	lsls	r3, r3, #2
 80186bc:	4413      	add	r3, r2
 80186be:	009b      	lsls	r3, r3, #2
 80186c0:	440b      	add	r3, r1
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d0e3      	beq.n	8018690 <vTaskSwitchContext+0x24>
 80186c8:	68fa      	ldr	r2, [r7, #12]
 80186ca:	4613      	mov	r3, r2
 80186cc:	009b      	lsls	r3, r3, #2
 80186ce:	4413      	add	r3, r2
 80186d0:	009b      	lsls	r3, r3, #2
 80186d2:	4a13      	ldr	r2, [pc, #76]	; (8018720 <vTaskSwitchContext+0xb4>)
 80186d4:	4413      	add	r3, r2
 80186d6:	60bb      	str	r3, [r7, #8]
 80186d8:	68bb      	ldr	r3, [r7, #8]
 80186da:	685b      	ldr	r3, [r3, #4]
 80186dc:	685a      	ldr	r2, [r3, #4]
 80186de:	68bb      	ldr	r3, [r7, #8]
 80186e0:	605a      	str	r2, [r3, #4]
 80186e2:	68bb      	ldr	r3, [r7, #8]
 80186e4:	685a      	ldr	r2, [r3, #4]
 80186e6:	68bb      	ldr	r3, [r7, #8]
 80186e8:	3308      	adds	r3, #8
 80186ea:	429a      	cmp	r2, r3
 80186ec:	d104      	bne.n	80186f8 <vTaskSwitchContext+0x8c>
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	685b      	ldr	r3, [r3, #4]
 80186f2:	685a      	ldr	r2, [r3, #4]
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	605a      	str	r2, [r3, #4]
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	685b      	ldr	r3, [r3, #4]
 80186fc:	68db      	ldr	r3, [r3, #12]
 80186fe:	4a09      	ldr	r2, [pc, #36]	; (8018724 <vTaskSwitchContext+0xb8>)
 8018700:	6013      	str	r3, [r2, #0]
 8018702:	4a06      	ldr	r2, [pc, #24]	; (801871c <vTaskSwitchContext+0xb0>)
 8018704:	68fb      	ldr	r3, [r7, #12]
 8018706:	6013      	str	r3, [r2, #0]
}
 8018708:	bf00      	nop
 801870a:	3714      	adds	r7, #20
 801870c:	46bd      	mov	sp, r7
 801870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018712:	4770      	bx	lr
 8018714:	20000f2c 	.word	0x20000f2c
 8018718:	20000f18 	.word	0x20000f18
 801871c:	20000f0c 	.word	0x20000f0c
 8018720:	20000a34 	.word	0x20000a34
 8018724:	20000a30 	.word	0x20000a30

08018728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b084      	sub	sp, #16
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
 8018730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d10b      	bne.n	8018750 <vTaskPlaceOnEventList+0x28>
 8018738:	f04f 0350 	mov.w	r3, #80	; 0x50
 801873c:	b672      	cpsid	i
 801873e:	f383 8811 	msr	BASEPRI, r3
 8018742:	f3bf 8f6f 	isb	sy
 8018746:	f3bf 8f4f 	dsb	sy
 801874a:	b662      	cpsie	i
 801874c:	60fb      	str	r3, [r7, #12]
 801874e:	e7fe      	b.n	801874e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018750:	4b07      	ldr	r3, [pc, #28]	; (8018770 <vTaskPlaceOnEventList+0x48>)
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	3318      	adds	r3, #24
 8018756:	4619      	mov	r1, r3
 8018758:	6878      	ldr	r0, [r7, #4]
 801875a:	f7fe f9ee 	bl	8016b3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801875e:	2101      	movs	r1, #1
 8018760:	6838      	ldr	r0, [r7, #0]
 8018762:	f000 fb8f 	bl	8018e84 <prvAddCurrentTaskToDelayedList>
}
 8018766:	bf00      	nop
 8018768:	3710      	adds	r7, #16
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	20000a30 	.word	0x20000a30

08018774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018774:	b580      	push	{r7, lr}
 8018776:	b086      	sub	sp, #24
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d10b      	bne.n	801879e <vTaskPlaceOnEventListRestricted+0x2a>
 8018786:	f04f 0350 	mov.w	r3, #80	; 0x50
 801878a:	b672      	cpsid	i
 801878c:	f383 8811 	msr	BASEPRI, r3
 8018790:	f3bf 8f6f 	isb	sy
 8018794:	f3bf 8f4f 	dsb	sy
 8018798:	b662      	cpsie	i
 801879a:	617b      	str	r3, [r7, #20]
 801879c:	e7fe      	b.n	801879c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801879e:	4b0a      	ldr	r3, [pc, #40]	; (80187c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	3318      	adds	r3, #24
 80187a4:	4619      	mov	r1, r3
 80187a6:	68f8      	ldr	r0, [r7, #12]
 80187a8:	f7fe f9a3 	bl	8016af2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d002      	beq.n	80187b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80187b2:	f04f 33ff 	mov.w	r3, #4294967295
 80187b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80187b8:	6879      	ldr	r1, [r7, #4]
 80187ba:	68b8      	ldr	r0, [r7, #8]
 80187bc:	f000 fb62 	bl	8018e84 <prvAddCurrentTaskToDelayedList>
	}
 80187c0:	bf00      	nop
 80187c2:	3718      	adds	r7, #24
 80187c4:	46bd      	mov	sp, r7
 80187c6:	bd80      	pop	{r7, pc}
 80187c8:	20000a30 	.word	0x20000a30

080187cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b086      	sub	sp, #24
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	68db      	ldr	r3, [r3, #12]
 80187da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d10b      	bne.n	80187fa <xTaskRemoveFromEventList+0x2e>
 80187e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e6:	b672      	cpsid	i
 80187e8:	f383 8811 	msr	BASEPRI, r3
 80187ec:	f3bf 8f6f 	isb	sy
 80187f0:	f3bf 8f4f 	dsb	sy
 80187f4:	b662      	cpsie	i
 80187f6:	60fb      	str	r3, [r7, #12]
 80187f8:	e7fe      	b.n	80187f8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	3318      	adds	r3, #24
 80187fe:	4618      	mov	r0, r3
 8018800:	f7fe f9d4 	bl	8016bac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018804:	4b1d      	ldr	r3, [pc, #116]	; (801887c <xTaskRemoveFromEventList+0xb0>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d11d      	bne.n	8018848 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801880c:	693b      	ldr	r3, [r7, #16]
 801880e:	3304      	adds	r3, #4
 8018810:	4618      	mov	r0, r3
 8018812:	f7fe f9cb 	bl	8016bac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018816:	693b      	ldr	r3, [r7, #16]
 8018818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801881a:	4b19      	ldr	r3, [pc, #100]	; (8018880 <xTaskRemoveFromEventList+0xb4>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	429a      	cmp	r2, r3
 8018820:	d903      	bls.n	801882a <xTaskRemoveFromEventList+0x5e>
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018826:	4a16      	ldr	r2, [pc, #88]	; (8018880 <xTaskRemoveFromEventList+0xb4>)
 8018828:	6013      	str	r3, [r2, #0]
 801882a:	693b      	ldr	r3, [r7, #16]
 801882c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801882e:	4613      	mov	r3, r2
 8018830:	009b      	lsls	r3, r3, #2
 8018832:	4413      	add	r3, r2
 8018834:	009b      	lsls	r3, r3, #2
 8018836:	4a13      	ldr	r2, [pc, #76]	; (8018884 <xTaskRemoveFromEventList+0xb8>)
 8018838:	441a      	add	r2, r3
 801883a:	693b      	ldr	r3, [r7, #16]
 801883c:	3304      	adds	r3, #4
 801883e:	4619      	mov	r1, r3
 8018840:	4610      	mov	r0, r2
 8018842:	f7fe f956 	bl	8016af2 <vListInsertEnd>
 8018846:	e005      	b.n	8018854 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	3318      	adds	r3, #24
 801884c:	4619      	mov	r1, r3
 801884e:	480e      	ldr	r0, [pc, #56]	; (8018888 <xTaskRemoveFromEventList+0xbc>)
 8018850:	f7fe f94f 	bl	8016af2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018858:	4b0c      	ldr	r3, [pc, #48]	; (801888c <xTaskRemoveFromEventList+0xc0>)
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801885e:	429a      	cmp	r2, r3
 8018860:	d905      	bls.n	801886e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018862:	2301      	movs	r3, #1
 8018864:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018866:	4b0a      	ldr	r3, [pc, #40]	; (8018890 <xTaskRemoveFromEventList+0xc4>)
 8018868:	2201      	movs	r2, #1
 801886a:	601a      	str	r2, [r3, #0]
 801886c:	e001      	b.n	8018872 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801886e:	2300      	movs	r3, #0
 8018870:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018872:	697b      	ldr	r3, [r7, #20]
}
 8018874:	4618      	mov	r0, r3
 8018876:	3718      	adds	r7, #24
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	20000f2c 	.word	0x20000f2c
 8018880:	20000f0c 	.word	0x20000f0c
 8018884:	20000a34 	.word	0x20000a34
 8018888:	20000ec4 	.word	0x20000ec4
 801888c:	20000a30 	.word	0x20000a30
 8018890:	20000f18 	.word	0x20000f18

08018894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8018894:	b480      	push	{r7}
 8018896:	b083      	sub	sp, #12
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801889c:	4b06      	ldr	r3, [pc, #24]	; (80188b8 <vTaskInternalSetTimeOutState+0x24>)
 801889e:	681a      	ldr	r2, [r3, #0]
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80188a4:	4b05      	ldr	r3, [pc, #20]	; (80188bc <vTaskInternalSetTimeOutState+0x28>)
 80188a6:	681a      	ldr	r2, [r3, #0]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	605a      	str	r2, [r3, #4]
}
 80188ac:	bf00      	nop
 80188ae:	370c      	adds	r7, #12
 80188b0:	46bd      	mov	sp, r7
 80188b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b6:	4770      	bx	lr
 80188b8:	20000f1c 	.word	0x20000f1c
 80188bc:	20000f08 	.word	0x20000f08

080188c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b088      	sub	sp, #32
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d10b      	bne.n	80188e8 <xTaskCheckForTimeOut+0x28>
 80188d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188d4:	b672      	cpsid	i
 80188d6:	f383 8811 	msr	BASEPRI, r3
 80188da:	f3bf 8f6f 	isb	sy
 80188de:	f3bf 8f4f 	dsb	sy
 80188e2:	b662      	cpsie	i
 80188e4:	613b      	str	r3, [r7, #16]
 80188e6:	e7fe      	b.n	80188e6 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 80188e8:	683b      	ldr	r3, [r7, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d10b      	bne.n	8018906 <xTaskCheckForTimeOut+0x46>
 80188ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f2:	b672      	cpsid	i
 80188f4:	f383 8811 	msr	BASEPRI, r3
 80188f8:	f3bf 8f6f 	isb	sy
 80188fc:	f3bf 8f4f 	dsb	sy
 8018900:	b662      	cpsie	i
 8018902:	60fb      	str	r3, [r7, #12]
 8018904:	e7fe      	b.n	8018904 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8018906:	f000 ff6f 	bl	80197e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801890a:	4b1d      	ldr	r3, [pc, #116]	; (8018980 <xTaskCheckForTimeOut+0xc0>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	685b      	ldr	r3, [r3, #4]
 8018914:	69ba      	ldr	r2, [r7, #24]
 8018916:	1ad3      	subs	r3, r2, r3
 8018918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801891a:	683b      	ldr	r3, [r7, #0]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018922:	d102      	bne.n	801892a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018924:	2300      	movs	r3, #0
 8018926:	61fb      	str	r3, [r7, #28]
 8018928:	e023      	b.n	8018972 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681a      	ldr	r2, [r3, #0]
 801892e:	4b15      	ldr	r3, [pc, #84]	; (8018984 <xTaskCheckForTimeOut+0xc4>)
 8018930:	681b      	ldr	r3, [r3, #0]
 8018932:	429a      	cmp	r2, r3
 8018934:	d007      	beq.n	8018946 <xTaskCheckForTimeOut+0x86>
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	69ba      	ldr	r2, [r7, #24]
 801893c:	429a      	cmp	r2, r3
 801893e:	d302      	bcc.n	8018946 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018940:	2301      	movs	r3, #1
 8018942:	61fb      	str	r3, [r7, #28]
 8018944:	e015      	b.n	8018972 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	697a      	ldr	r2, [r7, #20]
 801894c:	429a      	cmp	r2, r3
 801894e:	d20b      	bcs.n	8018968 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018950:	683b      	ldr	r3, [r7, #0]
 8018952:	681a      	ldr	r2, [r3, #0]
 8018954:	697b      	ldr	r3, [r7, #20]
 8018956:	1ad2      	subs	r2, r2, r3
 8018958:	683b      	ldr	r3, [r7, #0]
 801895a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7ff ff99 	bl	8018894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018962:	2300      	movs	r3, #0
 8018964:	61fb      	str	r3, [r7, #28]
 8018966:	e004      	b.n	8018972 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8018968:	683b      	ldr	r3, [r7, #0]
 801896a:	2200      	movs	r2, #0
 801896c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801896e:	2301      	movs	r3, #1
 8018970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018972:	f000 ff6b 	bl	801984c <vPortExitCritical>

	return xReturn;
 8018976:	69fb      	ldr	r3, [r7, #28]
}
 8018978:	4618      	mov	r0, r3
 801897a:	3720      	adds	r7, #32
 801897c:	46bd      	mov	sp, r7
 801897e:	bd80      	pop	{r7, pc}
 8018980:	20000f08 	.word	0x20000f08
 8018984:	20000f1c 	.word	0x20000f1c

08018988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8018988:	b480      	push	{r7}
 801898a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801898c:	4b03      	ldr	r3, [pc, #12]	; (801899c <vTaskMissedYield+0x14>)
 801898e:	2201      	movs	r2, #1
 8018990:	601a      	str	r2, [r3, #0]
}
 8018992:	bf00      	nop
 8018994:	46bd      	mov	sp, r7
 8018996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801899a:	4770      	bx	lr
 801899c:	20000f18 	.word	0x20000f18

080189a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b082      	sub	sp, #8
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80189a8:	f000 f852 	bl	8018a50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80189ac:	4b06      	ldr	r3, [pc, #24]	; (80189c8 <prvIdleTask+0x28>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d9f9      	bls.n	80189a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80189b4:	4b05      	ldr	r3, [pc, #20]	; (80189cc <prvIdleTask+0x2c>)
 80189b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189ba:	601a      	str	r2, [r3, #0]
 80189bc:	f3bf 8f4f 	dsb	sy
 80189c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80189c4:	e7f0      	b.n	80189a8 <prvIdleTask+0x8>
 80189c6:	bf00      	nop
 80189c8:	20000a34 	.word	0x20000a34
 80189cc:	e000ed04 	.word	0xe000ed04

080189d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b082      	sub	sp, #8
 80189d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189d6:	2300      	movs	r3, #0
 80189d8:	607b      	str	r3, [r7, #4]
 80189da:	e00c      	b.n	80189f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80189dc:	687a      	ldr	r2, [r7, #4]
 80189de:	4613      	mov	r3, r2
 80189e0:	009b      	lsls	r3, r3, #2
 80189e2:	4413      	add	r3, r2
 80189e4:	009b      	lsls	r3, r3, #2
 80189e6:	4a12      	ldr	r2, [pc, #72]	; (8018a30 <prvInitialiseTaskLists+0x60>)
 80189e8:	4413      	add	r3, r2
 80189ea:	4618      	mov	r0, r3
 80189ec:	f7fe f854 	bl	8016a98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	3301      	adds	r3, #1
 80189f4:	607b      	str	r3, [r7, #4]
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	2b37      	cmp	r3, #55	; 0x37
 80189fa:	d9ef      	bls.n	80189dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80189fc:	480d      	ldr	r0, [pc, #52]	; (8018a34 <prvInitialiseTaskLists+0x64>)
 80189fe:	f7fe f84b 	bl	8016a98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018a02:	480d      	ldr	r0, [pc, #52]	; (8018a38 <prvInitialiseTaskLists+0x68>)
 8018a04:	f7fe f848 	bl	8016a98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018a08:	480c      	ldr	r0, [pc, #48]	; (8018a3c <prvInitialiseTaskLists+0x6c>)
 8018a0a:	f7fe f845 	bl	8016a98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018a0e:	480c      	ldr	r0, [pc, #48]	; (8018a40 <prvInitialiseTaskLists+0x70>)
 8018a10:	f7fe f842 	bl	8016a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018a14:	480b      	ldr	r0, [pc, #44]	; (8018a44 <prvInitialiseTaskLists+0x74>)
 8018a16:	f7fe f83f 	bl	8016a98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018a1a:	4b0b      	ldr	r3, [pc, #44]	; (8018a48 <prvInitialiseTaskLists+0x78>)
 8018a1c:	4a05      	ldr	r2, [pc, #20]	; (8018a34 <prvInitialiseTaskLists+0x64>)
 8018a1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018a20:	4b0a      	ldr	r3, [pc, #40]	; (8018a4c <prvInitialiseTaskLists+0x7c>)
 8018a22:	4a05      	ldr	r2, [pc, #20]	; (8018a38 <prvInitialiseTaskLists+0x68>)
 8018a24:	601a      	str	r2, [r3, #0]
}
 8018a26:	bf00      	nop
 8018a28:	3708      	adds	r7, #8
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}
 8018a2e:	bf00      	nop
 8018a30:	20000a34 	.word	0x20000a34
 8018a34:	20000e94 	.word	0x20000e94
 8018a38:	20000ea8 	.word	0x20000ea8
 8018a3c:	20000ec4 	.word	0x20000ec4
 8018a40:	20000ed8 	.word	0x20000ed8
 8018a44:	20000ef0 	.word	0x20000ef0
 8018a48:	20000ebc 	.word	0x20000ebc
 8018a4c:	20000ec0 	.word	0x20000ec0

08018a50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b082      	sub	sp, #8
 8018a54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a56:	e019      	b.n	8018a8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018a58:	f000 fec6 	bl	80197e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a5c:	4b0f      	ldr	r3, [pc, #60]	; (8018a9c <prvCheckTasksWaitingTermination+0x4c>)
 8018a5e:	68db      	ldr	r3, [r3, #12]
 8018a60:	68db      	ldr	r3, [r3, #12]
 8018a62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	3304      	adds	r3, #4
 8018a68:	4618      	mov	r0, r3
 8018a6a:	f7fe f89f 	bl	8016bac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018a6e:	4b0c      	ldr	r3, [pc, #48]	; (8018aa0 <prvCheckTasksWaitingTermination+0x50>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	3b01      	subs	r3, #1
 8018a74:	4a0a      	ldr	r2, [pc, #40]	; (8018aa0 <prvCheckTasksWaitingTermination+0x50>)
 8018a76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018a78:	4b0a      	ldr	r3, [pc, #40]	; (8018aa4 <prvCheckTasksWaitingTermination+0x54>)
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	4a09      	ldr	r2, [pc, #36]	; (8018aa4 <prvCheckTasksWaitingTermination+0x54>)
 8018a80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018a82:	f000 fee3 	bl	801984c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018a86:	6878      	ldr	r0, [r7, #4]
 8018a88:	f000 f80e 	bl	8018aa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018a8c:	4b05      	ldr	r3, [pc, #20]	; (8018aa4 <prvCheckTasksWaitingTermination+0x54>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d1e1      	bne.n	8018a58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018a94:	bf00      	nop
 8018a96:	3708      	adds	r7, #8
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bd80      	pop	{r7, pc}
 8018a9c:	20000ed8 	.word	0x20000ed8
 8018aa0:	20000f04 	.word	0x20000f04
 8018aa4:	20000eec 	.word	0x20000eec

08018aa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	d108      	bne.n	8018acc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f001 f87c 	bl	8019bbc <vPortFree>
				vPortFree( pxTCB );
 8018ac4:	6878      	ldr	r0, [r7, #4]
 8018ac6:	f001 f879 	bl	8019bbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018aca:	e019      	b.n	8018b00 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ad2:	2b01      	cmp	r3, #1
 8018ad4:	d103      	bne.n	8018ade <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	f001 f870 	bl	8019bbc <vPortFree>
	}
 8018adc:	e010      	b.n	8018b00 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018ae4:	2b02      	cmp	r3, #2
 8018ae6:	d00b      	beq.n	8018b00 <prvDeleteTCB+0x58>
 8018ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aec:	b672      	cpsid	i
 8018aee:	f383 8811 	msr	BASEPRI, r3
 8018af2:	f3bf 8f6f 	isb	sy
 8018af6:	f3bf 8f4f 	dsb	sy
 8018afa:	b662      	cpsie	i
 8018afc:	60fb      	str	r3, [r7, #12]
 8018afe:	e7fe      	b.n	8018afe <prvDeleteTCB+0x56>
	}
 8018b00:	bf00      	nop
 8018b02:	3710      	adds	r7, #16
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bd80      	pop	{r7, pc}

08018b08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018b08:	b480      	push	{r7}
 8018b0a:	b083      	sub	sp, #12
 8018b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018b0e:	4b0c      	ldr	r3, [pc, #48]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d104      	bne.n	8018b22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018b18:	4b0a      	ldr	r3, [pc, #40]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8018b1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018b20:	e008      	b.n	8018b34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b22:	4b07      	ldr	r3, [pc, #28]	; (8018b40 <prvResetNextTaskUnblockTime+0x38>)
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	68db      	ldr	r3, [r3, #12]
 8018b28:	68db      	ldr	r3, [r3, #12]
 8018b2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	4a04      	ldr	r2, [pc, #16]	; (8018b44 <prvResetNextTaskUnblockTime+0x3c>)
 8018b32:	6013      	str	r3, [r2, #0]
}
 8018b34:	bf00      	nop
 8018b36:	370c      	adds	r7, #12
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3e:	4770      	bx	lr
 8018b40:	20000ebc 	.word	0x20000ebc
 8018b44:	20000f24 	.word	0x20000f24

08018b48 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018b48:	b480      	push	{r7}
 8018b4a:	b083      	sub	sp, #12
 8018b4c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018b4e:	4b05      	ldr	r3, [pc, #20]	; (8018b64 <xTaskGetCurrentTaskHandle+0x1c>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018b54:	687b      	ldr	r3, [r7, #4]
	}
 8018b56:	4618      	mov	r0, r3
 8018b58:	370c      	adds	r7, #12
 8018b5a:	46bd      	mov	sp, r7
 8018b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b60:	4770      	bx	lr
 8018b62:	bf00      	nop
 8018b64:	20000a30 	.word	0x20000a30

08018b68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8018b68:	b480      	push	{r7}
 8018b6a:	b083      	sub	sp, #12
 8018b6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018b6e:	4b0b      	ldr	r3, [pc, #44]	; (8018b9c <xTaskGetSchedulerState+0x34>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d102      	bne.n	8018b7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8018b76:	2301      	movs	r3, #1
 8018b78:	607b      	str	r3, [r7, #4]
 8018b7a:	e008      	b.n	8018b8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018b7c:	4b08      	ldr	r3, [pc, #32]	; (8018ba0 <xTaskGetSchedulerState+0x38>)
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	d102      	bne.n	8018b8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018b84:	2302      	movs	r3, #2
 8018b86:	607b      	str	r3, [r7, #4]
 8018b88:	e001      	b.n	8018b8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8018b8e:	687b      	ldr	r3, [r7, #4]
	}
 8018b90:	4618      	mov	r0, r3
 8018b92:	370c      	adds	r7, #12
 8018b94:	46bd      	mov	sp, r7
 8018b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9a:	4770      	bx	lr
 8018b9c:	20000f10 	.word	0x20000f10
 8018ba0:	20000f2c 	.word	0x20000f2c

08018ba4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b084      	sub	sp, #16
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d051      	beq.n	8018c5e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8018bba:	68bb      	ldr	r3, [r7, #8]
 8018bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018bbe:	4b2a      	ldr	r3, [pc, #168]	; (8018c68 <xTaskPriorityInherit+0xc4>)
 8018bc0:	681b      	ldr	r3, [r3, #0]
 8018bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d241      	bcs.n	8018c4c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018bc8:	68bb      	ldr	r3, [r7, #8]
 8018bca:	699b      	ldr	r3, [r3, #24]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	db06      	blt.n	8018bde <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018bd0:	4b25      	ldr	r3, [pc, #148]	; (8018c68 <xTaskPriorityInherit+0xc4>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018bd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018bde:	68bb      	ldr	r3, [r7, #8]
 8018be0:	6959      	ldr	r1, [r3, #20]
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018be6:	4613      	mov	r3, r2
 8018be8:	009b      	lsls	r3, r3, #2
 8018bea:	4413      	add	r3, r2
 8018bec:	009b      	lsls	r3, r3, #2
 8018bee:	4a1f      	ldr	r2, [pc, #124]	; (8018c6c <xTaskPriorityInherit+0xc8>)
 8018bf0:	4413      	add	r3, r2
 8018bf2:	4299      	cmp	r1, r3
 8018bf4:	d122      	bne.n	8018c3c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bf6:	68bb      	ldr	r3, [r7, #8]
 8018bf8:	3304      	adds	r3, #4
 8018bfa:	4618      	mov	r0, r3
 8018bfc:	f7fd ffd6 	bl	8016bac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c00:	4b19      	ldr	r3, [pc, #100]	; (8018c68 <xTaskPriorityInherit+0xc4>)
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c06:	68bb      	ldr	r3, [r7, #8]
 8018c08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018c0a:	68bb      	ldr	r3, [r7, #8]
 8018c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c0e:	4b18      	ldr	r3, [pc, #96]	; (8018c70 <xTaskPriorityInherit+0xcc>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d903      	bls.n	8018c1e <xTaskPriorityInherit+0x7a>
 8018c16:	68bb      	ldr	r3, [r7, #8]
 8018c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c1a:	4a15      	ldr	r2, [pc, #84]	; (8018c70 <xTaskPriorityInherit+0xcc>)
 8018c1c:	6013      	str	r3, [r2, #0]
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c22:	4613      	mov	r3, r2
 8018c24:	009b      	lsls	r3, r3, #2
 8018c26:	4413      	add	r3, r2
 8018c28:	009b      	lsls	r3, r3, #2
 8018c2a:	4a10      	ldr	r2, [pc, #64]	; (8018c6c <xTaskPriorityInherit+0xc8>)
 8018c2c:	441a      	add	r2, r3
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	3304      	adds	r3, #4
 8018c32:	4619      	mov	r1, r3
 8018c34:	4610      	mov	r0, r2
 8018c36:	f7fd ff5c 	bl	8016af2 <vListInsertEnd>
 8018c3a:	e004      	b.n	8018c46 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018c3c:	4b0a      	ldr	r3, [pc, #40]	; (8018c68 <xTaskPriorityInherit+0xc4>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c42:	68bb      	ldr	r3, [r7, #8]
 8018c44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018c46:	2301      	movs	r3, #1
 8018c48:	60fb      	str	r3, [r7, #12]
 8018c4a:	e008      	b.n	8018c5e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018c50:	4b05      	ldr	r3, [pc, #20]	; (8018c68 <xTaskPriorityInherit+0xc4>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d201      	bcs.n	8018c5e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
	}
 8018c60:	4618      	mov	r0, r3
 8018c62:	3710      	adds	r7, #16
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	20000a30 	.word	0x20000a30
 8018c6c:	20000a34 	.word	0x20000a34
 8018c70:	20000f0c 	.word	0x20000f0c

08018c74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b086      	sub	sp, #24
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018c80:	2300      	movs	r3, #0
 8018c82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d058      	beq.n	8018d3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018c8a:	4b2f      	ldr	r3, [pc, #188]	; (8018d48 <xTaskPriorityDisinherit+0xd4>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	693a      	ldr	r2, [r7, #16]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d00b      	beq.n	8018cac <xTaskPriorityDisinherit+0x38>
 8018c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c98:	b672      	cpsid	i
 8018c9a:	f383 8811 	msr	BASEPRI, r3
 8018c9e:	f3bf 8f6f 	isb	sy
 8018ca2:	f3bf 8f4f 	dsb	sy
 8018ca6:	b662      	cpsie	i
 8018ca8:	60fb      	str	r3, [r7, #12]
 8018caa:	e7fe      	b.n	8018caa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8018cac:	693b      	ldr	r3, [r7, #16]
 8018cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d10b      	bne.n	8018ccc <xTaskPriorityDisinherit+0x58>
 8018cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cb8:	b672      	cpsid	i
 8018cba:	f383 8811 	msr	BASEPRI, r3
 8018cbe:	f3bf 8f6f 	isb	sy
 8018cc2:	f3bf 8f4f 	dsb	sy
 8018cc6:	b662      	cpsie	i
 8018cc8:	60bb      	str	r3, [r7, #8]
 8018cca:	e7fe      	b.n	8018cca <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8018ccc:	693b      	ldr	r3, [r7, #16]
 8018cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018cd0:	1e5a      	subs	r2, r3, #1
 8018cd2:	693b      	ldr	r3, [r7, #16]
 8018cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018cd6:	693b      	ldr	r3, [r7, #16]
 8018cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018cda:	693b      	ldr	r3, [r7, #16]
 8018cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018cde:	429a      	cmp	r2, r3
 8018ce0:	d02c      	beq.n	8018d3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018ce2:	693b      	ldr	r3, [r7, #16]
 8018ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d128      	bne.n	8018d3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018cea:	693b      	ldr	r3, [r7, #16]
 8018cec:	3304      	adds	r3, #4
 8018cee:	4618      	mov	r0, r3
 8018cf0:	f7fd ff5c 	bl	8016bac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018cf4:	693b      	ldr	r3, [r7, #16]
 8018cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018cf8:	693b      	ldr	r3, [r7, #16]
 8018cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018cfc:	693b      	ldr	r3, [r7, #16]
 8018cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018d04:	693b      	ldr	r3, [r7, #16]
 8018d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018d08:	693b      	ldr	r3, [r7, #16]
 8018d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d0c:	4b0f      	ldr	r3, [pc, #60]	; (8018d4c <xTaskPriorityDisinherit+0xd8>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	429a      	cmp	r2, r3
 8018d12:	d903      	bls.n	8018d1c <xTaskPriorityDisinherit+0xa8>
 8018d14:	693b      	ldr	r3, [r7, #16]
 8018d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d18:	4a0c      	ldr	r2, [pc, #48]	; (8018d4c <xTaskPriorityDisinherit+0xd8>)
 8018d1a:	6013      	str	r3, [r2, #0]
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018d20:	4613      	mov	r3, r2
 8018d22:	009b      	lsls	r3, r3, #2
 8018d24:	4413      	add	r3, r2
 8018d26:	009b      	lsls	r3, r3, #2
 8018d28:	4a09      	ldr	r2, [pc, #36]	; (8018d50 <xTaskPriorityDisinherit+0xdc>)
 8018d2a:	441a      	add	r2, r3
 8018d2c:	693b      	ldr	r3, [r7, #16]
 8018d2e:	3304      	adds	r3, #4
 8018d30:	4619      	mov	r1, r3
 8018d32:	4610      	mov	r0, r2
 8018d34:	f7fd fedd 	bl	8016af2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018d38:	2301      	movs	r3, #1
 8018d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018d3c:	697b      	ldr	r3, [r7, #20]
	}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	3718      	adds	r7, #24
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	20000a30 	.word	0x20000a30
 8018d4c:	20000f0c 	.word	0x20000f0c
 8018d50:	20000a34 	.word	0x20000a34

08018d54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b088      	sub	sp, #32
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
 8018d5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018d62:	2301      	movs	r3, #1
 8018d64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d06c      	beq.n	8018e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018d6c:	69bb      	ldr	r3, [r7, #24]
 8018d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d10b      	bne.n	8018d8c <vTaskPriorityDisinheritAfterTimeout+0x38>
 8018d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d78:	b672      	cpsid	i
 8018d7a:	f383 8811 	msr	BASEPRI, r3
 8018d7e:	f3bf 8f6f 	isb	sy
 8018d82:	f3bf 8f4f 	dsb	sy
 8018d86:	b662      	cpsie	i
 8018d88:	60fb      	str	r3, [r7, #12]
 8018d8a:	e7fe      	b.n	8018d8a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018d8c:	69bb      	ldr	r3, [r7, #24]
 8018d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018d90:	683a      	ldr	r2, [r7, #0]
 8018d92:	429a      	cmp	r2, r3
 8018d94:	d902      	bls.n	8018d9c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	61fb      	str	r3, [r7, #28]
 8018d9a:	e002      	b.n	8018da2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018d9c:	69bb      	ldr	r3, [r7, #24]
 8018d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018da0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018da2:	69bb      	ldr	r3, [r7, #24]
 8018da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018da6:	69fa      	ldr	r2, [r7, #28]
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d04c      	beq.n	8018e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018dac:	69bb      	ldr	r3, [r7, #24]
 8018dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018db0:	697a      	ldr	r2, [r7, #20]
 8018db2:	429a      	cmp	r2, r3
 8018db4:	d147      	bne.n	8018e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018db6:	4b26      	ldr	r3, [pc, #152]	; (8018e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	69ba      	ldr	r2, [r7, #24]
 8018dbc:	429a      	cmp	r2, r3
 8018dbe:	d10b      	bne.n	8018dd8 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8018dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dc4:	b672      	cpsid	i
 8018dc6:	f383 8811 	msr	BASEPRI, r3
 8018dca:	f3bf 8f6f 	isb	sy
 8018dce:	f3bf 8f4f 	dsb	sy
 8018dd2:	b662      	cpsie	i
 8018dd4:	60bb      	str	r3, [r7, #8]
 8018dd6:	e7fe      	b.n	8018dd6 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018dd8:	69bb      	ldr	r3, [r7, #24]
 8018dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ddc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018dde:	69bb      	ldr	r3, [r7, #24]
 8018de0:	69fa      	ldr	r2, [r7, #28]
 8018de2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018de4:	69bb      	ldr	r3, [r7, #24]
 8018de6:	699b      	ldr	r3, [r3, #24]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	db04      	blt.n	8018df6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018dec:	69fb      	ldr	r3, [r7, #28]
 8018dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018df2:	69bb      	ldr	r3, [r7, #24]
 8018df4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018df6:	69bb      	ldr	r3, [r7, #24]
 8018df8:	6959      	ldr	r1, [r3, #20]
 8018dfa:	693a      	ldr	r2, [r7, #16]
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	009b      	lsls	r3, r3, #2
 8018e00:	4413      	add	r3, r2
 8018e02:	009b      	lsls	r3, r3, #2
 8018e04:	4a13      	ldr	r2, [pc, #76]	; (8018e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e06:	4413      	add	r3, r2
 8018e08:	4299      	cmp	r1, r3
 8018e0a:	d11c      	bne.n	8018e46 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e0c:	69bb      	ldr	r3, [r7, #24]
 8018e0e:	3304      	adds	r3, #4
 8018e10:	4618      	mov	r0, r3
 8018e12:	f7fd fecb 	bl	8016bac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018e16:	69bb      	ldr	r3, [r7, #24]
 8018e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e1a:	4b0f      	ldr	r3, [pc, #60]	; (8018e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d903      	bls.n	8018e2a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018e22:	69bb      	ldr	r3, [r7, #24]
 8018e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e26:	4a0c      	ldr	r2, [pc, #48]	; (8018e58 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018e28:	6013      	str	r3, [r2, #0]
 8018e2a:	69bb      	ldr	r3, [r7, #24]
 8018e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018e2e:	4613      	mov	r3, r2
 8018e30:	009b      	lsls	r3, r3, #2
 8018e32:	4413      	add	r3, r2
 8018e34:	009b      	lsls	r3, r3, #2
 8018e36:	4a07      	ldr	r2, [pc, #28]	; (8018e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018e38:	441a      	add	r2, r3
 8018e3a:	69bb      	ldr	r3, [r7, #24]
 8018e3c:	3304      	adds	r3, #4
 8018e3e:	4619      	mov	r1, r3
 8018e40:	4610      	mov	r0, r2
 8018e42:	f7fd fe56 	bl	8016af2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018e46:	bf00      	nop
 8018e48:	3720      	adds	r7, #32
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	bd80      	pop	{r7, pc}
 8018e4e:	bf00      	nop
 8018e50:	20000a30 	.word	0x20000a30
 8018e54:	20000a34 	.word	0x20000a34
 8018e58:	20000f0c 	.word	0x20000f0c

08018e5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018e5c:	b480      	push	{r7}
 8018e5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018e60:	4b07      	ldr	r3, [pc, #28]	; (8018e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d004      	beq.n	8018e72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018e68:	4b05      	ldr	r3, [pc, #20]	; (8018e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018e6e:	3201      	adds	r2, #1
 8018e70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018e72:	4b03      	ldr	r3, [pc, #12]	; (8018e80 <pvTaskIncrementMutexHeldCount+0x24>)
 8018e74:	681b      	ldr	r3, [r3, #0]
	}
 8018e76:	4618      	mov	r0, r3
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr
 8018e80:	20000a30 	.word	0x20000a30

08018e84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b084      	sub	sp, #16
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018e8e:	4b21      	ldr	r3, [pc, #132]	; (8018f14 <prvAddCurrentTaskToDelayedList+0x90>)
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018e94:	4b20      	ldr	r3, [pc, #128]	; (8018f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8018e96:	681b      	ldr	r3, [r3, #0]
 8018e98:	3304      	adds	r3, #4
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7fd fe86 	bl	8016bac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ea6:	d10a      	bne.n	8018ebe <prvAddCurrentTaskToDelayedList+0x3a>
 8018ea8:	683b      	ldr	r3, [r7, #0]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d007      	beq.n	8018ebe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018eae:	4b1a      	ldr	r3, [pc, #104]	; (8018f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	3304      	adds	r3, #4
 8018eb4:	4619      	mov	r1, r3
 8018eb6:	4819      	ldr	r0, [pc, #100]	; (8018f1c <prvAddCurrentTaskToDelayedList+0x98>)
 8018eb8:	f7fd fe1b 	bl	8016af2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018ebc:	e026      	b.n	8018f0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018ebe:	68fa      	ldr	r2, [r7, #12]
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	4413      	add	r3, r2
 8018ec4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018ec6:	4b14      	ldr	r3, [pc, #80]	; (8018f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	68ba      	ldr	r2, [r7, #8]
 8018ecc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018ece:	68ba      	ldr	r2, [r7, #8]
 8018ed0:	68fb      	ldr	r3, [r7, #12]
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d209      	bcs.n	8018eea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ed6:	4b12      	ldr	r3, [pc, #72]	; (8018f20 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018ed8:	681a      	ldr	r2, [r3, #0]
 8018eda:	4b0f      	ldr	r3, [pc, #60]	; (8018f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	3304      	adds	r3, #4
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	4610      	mov	r0, r2
 8018ee4:	f7fd fe29 	bl	8016b3a <vListInsert>
}
 8018ee8:	e010      	b.n	8018f0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018eea:	4b0e      	ldr	r3, [pc, #56]	; (8018f24 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018eec:	681a      	ldr	r2, [r3, #0]
 8018eee:	4b0a      	ldr	r3, [pc, #40]	; (8018f18 <prvAddCurrentTaskToDelayedList+0x94>)
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	3304      	adds	r3, #4
 8018ef4:	4619      	mov	r1, r3
 8018ef6:	4610      	mov	r0, r2
 8018ef8:	f7fd fe1f 	bl	8016b3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018efc:	4b0a      	ldr	r3, [pc, #40]	; (8018f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018efe:	681b      	ldr	r3, [r3, #0]
 8018f00:	68ba      	ldr	r2, [r7, #8]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d202      	bcs.n	8018f0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018f06:	4a08      	ldr	r2, [pc, #32]	; (8018f28 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018f08:	68bb      	ldr	r3, [r7, #8]
 8018f0a:	6013      	str	r3, [r2, #0]
}
 8018f0c:	bf00      	nop
 8018f0e:	3710      	adds	r7, #16
 8018f10:	46bd      	mov	sp, r7
 8018f12:	bd80      	pop	{r7, pc}
 8018f14:	20000f08 	.word	0x20000f08
 8018f18:	20000a30 	.word	0x20000a30
 8018f1c:	20000ef0 	.word	0x20000ef0
 8018f20:	20000ec0 	.word	0x20000ec0
 8018f24:	20000ebc 	.word	0x20000ebc
 8018f28:	20000f24 	.word	0x20000f24

08018f2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b08a      	sub	sp, #40	; 0x28
 8018f30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018f32:	2300      	movs	r3, #0
 8018f34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018f36:	f000 fb0d 	bl	8019554 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018f3a:	4b1d      	ldr	r3, [pc, #116]	; (8018fb0 <xTimerCreateTimerTask+0x84>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d021      	beq.n	8018f86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018f42:	2300      	movs	r3, #0
 8018f44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018f46:	2300      	movs	r3, #0
 8018f48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018f4a:	1d3a      	adds	r2, r7, #4
 8018f4c:	f107 0108 	add.w	r1, r7, #8
 8018f50:	f107 030c 	add.w	r3, r7, #12
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7fd fd85 	bl	8016a64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018f5a:	6879      	ldr	r1, [r7, #4]
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	68fa      	ldr	r2, [r7, #12]
 8018f60:	9202      	str	r2, [sp, #8]
 8018f62:	9301      	str	r3, [sp, #4]
 8018f64:	2302      	movs	r3, #2
 8018f66:	9300      	str	r3, [sp, #0]
 8018f68:	2300      	movs	r3, #0
 8018f6a:	460a      	mov	r2, r1
 8018f6c:	4911      	ldr	r1, [pc, #68]	; (8018fb4 <xTimerCreateTimerTask+0x88>)
 8018f6e:	4812      	ldr	r0, [pc, #72]	; (8018fb8 <xTimerCreateTimerTask+0x8c>)
 8018f70:	f7fe ff30 	bl	8017dd4 <xTaskCreateStatic>
 8018f74:	4602      	mov	r2, r0
 8018f76:	4b11      	ldr	r3, [pc, #68]	; (8018fbc <xTimerCreateTimerTask+0x90>)
 8018f78:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018f7a:	4b10      	ldr	r3, [pc, #64]	; (8018fbc <xTimerCreateTimerTask+0x90>)
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d001      	beq.n	8018f86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018f82:	2301      	movs	r3, #1
 8018f84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d10b      	bne.n	8018fa4 <xTimerCreateTimerTask+0x78>
 8018f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f90:	b672      	cpsid	i
 8018f92:	f383 8811 	msr	BASEPRI, r3
 8018f96:	f3bf 8f6f 	isb	sy
 8018f9a:	f3bf 8f4f 	dsb	sy
 8018f9e:	b662      	cpsie	i
 8018fa0:	613b      	str	r3, [r7, #16]
 8018fa2:	e7fe      	b.n	8018fa2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8018fa4:	697b      	ldr	r3, [r7, #20]
}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	3718      	adds	r7, #24
 8018faa:	46bd      	mov	sp, r7
 8018fac:	bd80      	pop	{r7, pc}
 8018fae:	bf00      	nop
 8018fb0:	20000f60 	.word	0x20000f60
 8018fb4:	0801d8a4 	.word	0x0801d8a4
 8018fb8:	080190f9 	.word	0x080190f9
 8018fbc:	20000f64 	.word	0x20000f64

08018fc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b08a      	sub	sp, #40	; 0x28
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	60f8      	str	r0, [r7, #12]
 8018fc8:	60b9      	str	r1, [r7, #8]
 8018fca:	607a      	str	r2, [r7, #4]
 8018fcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	d10b      	bne.n	8018ff0 <xTimerGenericCommand+0x30>
 8018fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fdc:	b672      	cpsid	i
 8018fde:	f383 8811 	msr	BASEPRI, r3
 8018fe2:	f3bf 8f6f 	isb	sy
 8018fe6:	f3bf 8f4f 	dsb	sy
 8018fea:	b662      	cpsie	i
 8018fec:	623b      	str	r3, [r7, #32]
 8018fee:	e7fe      	b.n	8018fee <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018ff0:	4b19      	ldr	r3, [pc, #100]	; (8019058 <xTimerGenericCommand+0x98>)
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d02a      	beq.n	801904e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018ff8:	68bb      	ldr	r3, [r7, #8]
 8018ffa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	2b05      	cmp	r3, #5
 8019008:	dc18      	bgt.n	801903c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801900a:	f7ff fdad 	bl	8018b68 <xTaskGetSchedulerState>
 801900e:	4603      	mov	r3, r0
 8019010:	2b02      	cmp	r3, #2
 8019012:	d109      	bne.n	8019028 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8019014:	4b10      	ldr	r3, [pc, #64]	; (8019058 <xTimerGenericCommand+0x98>)
 8019016:	6818      	ldr	r0, [r3, #0]
 8019018:	f107 0110 	add.w	r1, r7, #16
 801901c:	2300      	movs	r3, #0
 801901e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019020:	f7fe f860 	bl	80170e4 <xQueueGenericSend>
 8019024:	6278      	str	r0, [r7, #36]	; 0x24
 8019026:	e012      	b.n	801904e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8019028:	4b0b      	ldr	r3, [pc, #44]	; (8019058 <xTimerGenericCommand+0x98>)
 801902a:	6818      	ldr	r0, [r3, #0]
 801902c:	f107 0110 	add.w	r1, r7, #16
 8019030:	2300      	movs	r3, #0
 8019032:	2200      	movs	r2, #0
 8019034:	f7fe f856 	bl	80170e4 <xQueueGenericSend>
 8019038:	6278      	str	r0, [r7, #36]	; 0x24
 801903a:	e008      	b.n	801904e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801903c:	4b06      	ldr	r3, [pc, #24]	; (8019058 <xTimerGenericCommand+0x98>)
 801903e:	6818      	ldr	r0, [r3, #0]
 8019040:	f107 0110 	add.w	r1, r7, #16
 8019044:	2300      	movs	r3, #0
 8019046:	683a      	ldr	r2, [r7, #0]
 8019048:	f7fe f94e 	bl	80172e8 <xQueueGenericSendFromISR>
 801904c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8019050:	4618      	mov	r0, r3
 8019052:	3728      	adds	r7, #40	; 0x28
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}
 8019058:	20000f60 	.word	0x20000f60

0801905c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b088      	sub	sp, #32
 8019060:	af02      	add	r7, sp, #8
 8019062:	6078      	str	r0, [r7, #4]
 8019064:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019066:	4b23      	ldr	r3, [pc, #140]	; (80190f4 <prvProcessExpiredTimer+0x98>)
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	68db      	ldr	r3, [r3, #12]
 801906c:	68db      	ldr	r3, [r3, #12]
 801906e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8019070:	697b      	ldr	r3, [r7, #20]
 8019072:	3304      	adds	r3, #4
 8019074:	4618      	mov	r0, r3
 8019076:	f7fd fd99 	bl	8016bac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801907a:	697b      	ldr	r3, [r7, #20]
 801907c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019080:	f003 0304 	and.w	r3, r3, #4
 8019084:	2b00      	cmp	r3, #0
 8019086:	d023      	beq.n	80190d0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8019088:	697b      	ldr	r3, [r7, #20]
 801908a:	699a      	ldr	r2, [r3, #24]
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	18d1      	adds	r1, r2, r3
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	683a      	ldr	r2, [r7, #0]
 8019094:	6978      	ldr	r0, [r7, #20]
 8019096:	f000 f8d3 	bl	8019240 <prvInsertTimerInActiveList>
 801909a:	4603      	mov	r3, r0
 801909c:	2b00      	cmp	r3, #0
 801909e:	d020      	beq.n	80190e2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80190a0:	2300      	movs	r3, #0
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	2300      	movs	r3, #0
 80190a6:	687a      	ldr	r2, [r7, #4]
 80190a8:	2100      	movs	r1, #0
 80190aa:	6978      	ldr	r0, [r7, #20]
 80190ac:	f7ff ff88 	bl	8018fc0 <xTimerGenericCommand>
 80190b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80190b2:	693b      	ldr	r3, [r7, #16]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d114      	bne.n	80190e2 <prvProcessExpiredTimer+0x86>
 80190b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190bc:	b672      	cpsid	i
 80190be:	f383 8811 	msr	BASEPRI, r3
 80190c2:	f3bf 8f6f 	isb	sy
 80190c6:	f3bf 8f4f 	dsb	sy
 80190ca:	b662      	cpsie	i
 80190cc:	60fb      	str	r3, [r7, #12]
 80190ce:	e7fe      	b.n	80190ce <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80190d0:	697b      	ldr	r3, [r7, #20]
 80190d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190d6:	f023 0301 	bic.w	r3, r3, #1
 80190da:	b2da      	uxtb	r2, r3
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190e2:	697b      	ldr	r3, [r7, #20]
 80190e4:	6a1b      	ldr	r3, [r3, #32]
 80190e6:	6978      	ldr	r0, [r7, #20]
 80190e8:	4798      	blx	r3
}
 80190ea:	bf00      	nop
 80190ec:	3718      	adds	r7, #24
 80190ee:	46bd      	mov	sp, r7
 80190f0:	bd80      	pop	{r7, pc}
 80190f2:	bf00      	nop
 80190f4:	20000f58 	.word	0x20000f58

080190f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b084      	sub	sp, #16
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8019100:	f107 0308 	add.w	r3, r7, #8
 8019104:	4618      	mov	r0, r3
 8019106:	f000 f857 	bl	80191b8 <prvGetNextExpireTime>
 801910a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801910c:	68bb      	ldr	r3, [r7, #8]
 801910e:	4619      	mov	r1, r3
 8019110:	68f8      	ldr	r0, [r7, #12]
 8019112:	f000 f803 	bl	801911c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8019116:	f000 f8d5 	bl	80192c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801911a:	e7f1      	b.n	8019100 <prvTimerTask+0x8>

0801911c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8019126:	f7ff f919 	bl	801835c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801912a:	f107 0308 	add.w	r3, r7, #8
 801912e:	4618      	mov	r0, r3
 8019130:	f000 f866 	bl	8019200 <prvSampleTimeNow>
 8019134:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	2b00      	cmp	r3, #0
 801913a:	d130      	bne.n	801919e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801913c:	683b      	ldr	r3, [r7, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d10a      	bne.n	8019158 <prvProcessTimerOrBlockTask+0x3c>
 8019142:	687a      	ldr	r2, [r7, #4]
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	429a      	cmp	r2, r3
 8019148:	d806      	bhi.n	8019158 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801914a:	f7ff f915 	bl	8018378 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801914e:	68f9      	ldr	r1, [r7, #12]
 8019150:	6878      	ldr	r0, [r7, #4]
 8019152:	f7ff ff83 	bl	801905c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8019156:	e024      	b.n	80191a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d008      	beq.n	8019170 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801915e:	4b13      	ldr	r3, [pc, #76]	; (80191ac <prvProcessTimerOrBlockTask+0x90>)
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	2b00      	cmp	r3, #0
 8019166:	d101      	bne.n	801916c <prvProcessTimerOrBlockTask+0x50>
 8019168:	2301      	movs	r3, #1
 801916a:	e000      	b.n	801916e <prvProcessTimerOrBlockTask+0x52>
 801916c:	2300      	movs	r3, #0
 801916e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8019170:	4b0f      	ldr	r3, [pc, #60]	; (80191b0 <prvProcessTimerOrBlockTask+0x94>)
 8019172:	6818      	ldr	r0, [r3, #0]
 8019174:	687a      	ldr	r2, [r7, #4]
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	1ad3      	subs	r3, r2, r3
 801917a:	683a      	ldr	r2, [r7, #0]
 801917c:	4619      	mov	r1, r3
 801917e:	f7fe fdf5 	bl	8017d6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8019182:	f7ff f8f9 	bl	8018378 <xTaskResumeAll>
 8019186:	4603      	mov	r3, r0
 8019188:	2b00      	cmp	r3, #0
 801918a:	d10a      	bne.n	80191a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801918c:	4b09      	ldr	r3, [pc, #36]	; (80191b4 <prvProcessTimerOrBlockTask+0x98>)
 801918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019192:	601a      	str	r2, [r3, #0]
 8019194:	f3bf 8f4f 	dsb	sy
 8019198:	f3bf 8f6f 	isb	sy
}
 801919c:	e001      	b.n	80191a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801919e:	f7ff f8eb 	bl	8018378 <xTaskResumeAll>
}
 80191a2:	bf00      	nop
 80191a4:	3710      	adds	r7, #16
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}
 80191aa:	bf00      	nop
 80191ac:	20000f5c 	.word	0x20000f5c
 80191b0:	20000f60 	.word	0x20000f60
 80191b4:	e000ed04 	.word	0xe000ed04

080191b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80191b8:	b480      	push	{r7}
 80191ba:	b085      	sub	sp, #20
 80191bc:	af00      	add	r7, sp, #0
 80191be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80191c0:	4b0e      	ldr	r3, [pc, #56]	; (80191fc <prvGetNextExpireTime+0x44>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d101      	bne.n	80191ce <prvGetNextExpireTime+0x16>
 80191ca:	2201      	movs	r2, #1
 80191cc:	e000      	b.n	80191d0 <prvGetNextExpireTime+0x18>
 80191ce:	2200      	movs	r2, #0
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d105      	bne.n	80191e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191dc:	4b07      	ldr	r3, [pc, #28]	; (80191fc <prvGetNextExpireTime+0x44>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	68db      	ldr	r3, [r3, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	60fb      	str	r3, [r7, #12]
 80191e6:	e001      	b.n	80191ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80191e8:	2300      	movs	r3, #0
 80191ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80191ec:	68fb      	ldr	r3, [r7, #12]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	3714      	adds	r7, #20
 80191f2:	46bd      	mov	sp, r7
 80191f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop
 80191fc:	20000f58 	.word	0x20000f58

08019200 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b084      	sub	sp, #16
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8019208:	f7ff f954 	bl	80184b4 <xTaskGetTickCount>
 801920c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801920e:	4b0b      	ldr	r3, [pc, #44]	; (801923c <prvSampleTimeNow+0x3c>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	68fa      	ldr	r2, [r7, #12]
 8019214:	429a      	cmp	r2, r3
 8019216:	d205      	bcs.n	8019224 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8019218:	f000 f936 	bl	8019488 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2201      	movs	r2, #1
 8019220:	601a      	str	r2, [r3, #0]
 8019222:	e002      	b.n	801922a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	2200      	movs	r2, #0
 8019228:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801922a:	4a04      	ldr	r2, [pc, #16]	; (801923c <prvSampleTimeNow+0x3c>)
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8019230:	68fb      	ldr	r3, [r7, #12]
}
 8019232:	4618      	mov	r0, r3
 8019234:	3710      	adds	r7, #16
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}
 801923a:	bf00      	nop
 801923c:	20000f68 	.word	0x20000f68

08019240 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b086      	sub	sp, #24
 8019244:	af00      	add	r7, sp, #0
 8019246:	60f8      	str	r0, [r7, #12]
 8019248:	60b9      	str	r1, [r7, #8]
 801924a:	607a      	str	r2, [r7, #4]
 801924c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801924e:	2300      	movs	r3, #0
 8019250:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8019252:	68fb      	ldr	r3, [r7, #12]
 8019254:	68ba      	ldr	r2, [r7, #8]
 8019256:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	68fa      	ldr	r2, [r7, #12]
 801925c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801925e:	68ba      	ldr	r2, [r7, #8]
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	429a      	cmp	r2, r3
 8019264:	d812      	bhi.n	801928c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019266:	687a      	ldr	r2, [r7, #4]
 8019268:	683b      	ldr	r3, [r7, #0]
 801926a:	1ad2      	subs	r2, r2, r3
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	699b      	ldr	r3, [r3, #24]
 8019270:	429a      	cmp	r2, r3
 8019272:	d302      	bcc.n	801927a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8019274:	2301      	movs	r3, #1
 8019276:	617b      	str	r3, [r7, #20]
 8019278:	e01b      	b.n	80192b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801927a:	4b10      	ldr	r3, [pc, #64]	; (80192bc <prvInsertTimerInActiveList+0x7c>)
 801927c:	681a      	ldr	r2, [r3, #0]
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	3304      	adds	r3, #4
 8019282:	4619      	mov	r1, r3
 8019284:	4610      	mov	r0, r2
 8019286:	f7fd fc58 	bl	8016b3a <vListInsert>
 801928a:	e012      	b.n	80192b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801928c:	687a      	ldr	r2, [r7, #4]
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	429a      	cmp	r2, r3
 8019292:	d206      	bcs.n	80192a2 <prvInsertTimerInActiveList+0x62>
 8019294:	68ba      	ldr	r2, [r7, #8]
 8019296:	683b      	ldr	r3, [r7, #0]
 8019298:	429a      	cmp	r2, r3
 801929a:	d302      	bcc.n	80192a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801929c:	2301      	movs	r3, #1
 801929e:	617b      	str	r3, [r7, #20]
 80192a0:	e007      	b.n	80192b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80192a2:	4b07      	ldr	r3, [pc, #28]	; (80192c0 <prvInsertTimerInActiveList+0x80>)
 80192a4:	681a      	ldr	r2, [r3, #0]
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	3304      	adds	r3, #4
 80192aa:	4619      	mov	r1, r3
 80192ac:	4610      	mov	r0, r2
 80192ae:	f7fd fc44 	bl	8016b3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80192b2:	697b      	ldr	r3, [r7, #20]
}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3718      	adds	r7, #24
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	20000f5c 	.word	0x20000f5c
 80192c0:	20000f58 	.word	0x20000f58

080192c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80192c4:	b580      	push	{r7, lr}
 80192c6:	b08e      	sub	sp, #56	; 0x38
 80192c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80192ca:	e0cc      	b.n	8019466 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	da19      	bge.n	8019306 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80192d2:	1d3b      	adds	r3, r7, #4
 80192d4:	3304      	adds	r3, #4
 80192d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80192d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d10b      	bne.n	80192f6 <prvProcessReceivedCommands+0x32>
 80192de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e2:	b672      	cpsid	i
 80192e4:	f383 8811 	msr	BASEPRI, r3
 80192e8:	f3bf 8f6f 	isb	sy
 80192ec:	f3bf 8f4f 	dsb	sy
 80192f0:	b662      	cpsie	i
 80192f2:	61fb      	str	r3, [r7, #28]
 80192f4:	e7fe      	b.n	80192f4 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80192f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192fc:	6850      	ldr	r0, [r2, #4]
 80192fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019300:	6892      	ldr	r2, [r2, #8]
 8019302:	4611      	mov	r1, r2
 8019304:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2b00      	cmp	r3, #0
 801930a:	f2c0 80ab 	blt.w	8019464 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019314:	695b      	ldr	r3, [r3, #20]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d004      	beq.n	8019324 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801931c:	3304      	adds	r3, #4
 801931e:	4618      	mov	r0, r3
 8019320:	f7fd fc44 	bl	8016bac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019324:	463b      	mov	r3, r7
 8019326:	4618      	mov	r0, r3
 8019328:	f7ff ff6a 	bl	8019200 <prvSampleTimeNow>
 801932c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	2b09      	cmp	r3, #9
 8019332:	f200 8098 	bhi.w	8019466 <prvProcessReceivedCommands+0x1a2>
 8019336:	a201      	add	r2, pc, #4	; (adr r2, 801933c <prvProcessReceivedCommands+0x78>)
 8019338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801933c:	08019365 	.word	0x08019365
 8019340:	08019365 	.word	0x08019365
 8019344:	08019365 	.word	0x08019365
 8019348:	080193db 	.word	0x080193db
 801934c:	080193ef 	.word	0x080193ef
 8019350:	0801943b 	.word	0x0801943b
 8019354:	08019365 	.word	0x08019365
 8019358:	08019365 	.word	0x08019365
 801935c:	080193db 	.word	0x080193db
 8019360:	080193ef 	.word	0x080193ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801936a:	f043 0301 	orr.w	r3, r3, #1
 801936e:	b2da      	uxtb	r2, r3
 8019370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8019376:	68ba      	ldr	r2, [r7, #8]
 8019378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801937a:	699b      	ldr	r3, [r3, #24]
 801937c:	18d1      	adds	r1, r2, r3
 801937e:	68bb      	ldr	r3, [r7, #8]
 8019380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019384:	f7ff ff5c 	bl	8019240 <prvInsertTimerInActiveList>
 8019388:	4603      	mov	r3, r0
 801938a:	2b00      	cmp	r3, #0
 801938c:	d06b      	beq.n	8019466 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801938e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019390:	6a1b      	ldr	r3, [r3, #32]
 8019392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019394:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8019396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801939c:	f003 0304 	and.w	r3, r3, #4
 80193a0:	2b00      	cmp	r3, #0
 80193a2:	d060      	beq.n	8019466 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80193a4:	68ba      	ldr	r2, [r7, #8]
 80193a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a8:	699b      	ldr	r3, [r3, #24]
 80193aa:	441a      	add	r2, r3
 80193ac:	2300      	movs	r3, #0
 80193ae:	9300      	str	r3, [sp, #0]
 80193b0:	2300      	movs	r3, #0
 80193b2:	2100      	movs	r1, #0
 80193b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193b6:	f7ff fe03 	bl	8018fc0 <xTimerGenericCommand>
 80193ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80193bc:	6a3b      	ldr	r3, [r7, #32]
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d151      	bne.n	8019466 <prvProcessReceivedCommands+0x1a2>
 80193c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193c6:	b672      	cpsid	i
 80193c8:	f383 8811 	msr	BASEPRI, r3
 80193cc:	f3bf 8f6f 	isb	sy
 80193d0:	f3bf 8f4f 	dsb	sy
 80193d4:	b662      	cpsie	i
 80193d6:	61bb      	str	r3, [r7, #24]
 80193d8:	e7fe      	b.n	80193d8 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80193da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193e0:	f023 0301 	bic.w	r3, r3, #1
 80193e4:	b2da      	uxtb	r2, r3
 80193e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80193ec:	e03b      	b.n	8019466 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80193ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80193f4:	f043 0301 	orr.w	r3, r3, #1
 80193f8:	b2da      	uxtb	r2, r3
 80193fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019400:	68ba      	ldr	r2, [r7, #8]
 8019402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019404:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019408:	699b      	ldr	r3, [r3, #24]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d10b      	bne.n	8019426 <prvProcessReceivedCommands+0x162>
 801940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019412:	b672      	cpsid	i
 8019414:	f383 8811 	msr	BASEPRI, r3
 8019418:	f3bf 8f6f 	isb	sy
 801941c:	f3bf 8f4f 	dsb	sy
 8019420:	b662      	cpsie	i
 8019422:	617b      	str	r3, [r7, #20]
 8019424:	e7fe      	b.n	8019424 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019428:	699a      	ldr	r2, [r3, #24]
 801942a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801942c:	18d1      	adds	r1, r2, r3
 801942e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019434:	f7ff ff04 	bl	8019240 <prvInsertTimerInActiveList>
					break;
 8019438:	e015      	b.n	8019466 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801943c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019440:	f003 0302 	and.w	r3, r3, #2
 8019444:	2b00      	cmp	r3, #0
 8019446:	d103      	bne.n	8019450 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8019448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801944a:	f000 fbb7 	bl	8019bbc <vPortFree>
 801944e:	e00a      	b.n	8019466 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019452:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019456:	f023 0301 	bic.w	r3, r3, #1
 801945a:	b2da      	uxtb	r2, r3
 801945c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801945e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019462:	e000      	b.n	8019466 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019464:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8019466:	4b07      	ldr	r3, [pc, #28]	; (8019484 <prvProcessReceivedCommands+0x1c0>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	1d39      	adds	r1, r7, #4
 801946c:	2200      	movs	r2, #0
 801946e:	4618      	mov	r0, r3
 8019470:	f7fe f868 	bl	8017544 <xQueueReceive>
 8019474:	4603      	mov	r3, r0
 8019476:	2b00      	cmp	r3, #0
 8019478:	f47f af28 	bne.w	80192cc <prvProcessReceivedCommands+0x8>
	}
}
 801947c:	bf00      	nop
 801947e:	3730      	adds	r7, #48	; 0x30
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}
 8019484:	20000f60 	.word	0x20000f60

08019488 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b088      	sub	sp, #32
 801948c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801948e:	e049      	b.n	8019524 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8019490:	4b2e      	ldr	r3, [pc, #184]	; (801954c <prvSwitchTimerLists+0xc4>)
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	68db      	ldr	r3, [r3, #12]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801949a:	4b2c      	ldr	r3, [pc, #176]	; (801954c <prvSwitchTimerLists+0xc4>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	68db      	ldr	r3, [r3, #12]
 80194a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	3304      	adds	r3, #4
 80194a8:	4618      	mov	r0, r3
 80194aa:	f7fd fb7f 	bl	8016bac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	6a1b      	ldr	r3, [r3, #32]
 80194b2:	68f8      	ldr	r0, [r7, #12]
 80194b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80194b6:	68fb      	ldr	r3, [r7, #12]
 80194b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80194bc:	f003 0304 	and.w	r3, r3, #4
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d02f      	beq.n	8019524 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	699b      	ldr	r3, [r3, #24]
 80194c8:	693a      	ldr	r2, [r7, #16]
 80194ca:	4413      	add	r3, r2
 80194cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80194ce:	68ba      	ldr	r2, [r7, #8]
 80194d0:	693b      	ldr	r3, [r7, #16]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	d90e      	bls.n	80194f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80194d6:	68fb      	ldr	r3, [r7, #12]
 80194d8:	68ba      	ldr	r2, [r7, #8]
 80194da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	68fa      	ldr	r2, [r7, #12]
 80194e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80194e2:	4b1a      	ldr	r3, [pc, #104]	; (801954c <prvSwitchTimerLists+0xc4>)
 80194e4:	681a      	ldr	r2, [r3, #0]
 80194e6:	68fb      	ldr	r3, [r7, #12]
 80194e8:	3304      	adds	r3, #4
 80194ea:	4619      	mov	r1, r3
 80194ec:	4610      	mov	r0, r2
 80194ee:	f7fd fb24 	bl	8016b3a <vListInsert>
 80194f2:	e017      	b.n	8019524 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80194f4:	2300      	movs	r3, #0
 80194f6:	9300      	str	r3, [sp, #0]
 80194f8:	2300      	movs	r3, #0
 80194fa:	693a      	ldr	r2, [r7, #16]
 80194fc:	2100      	movs	r1, #0
 80194fe:	68f8      	ldr	r0, [r7, #12]
 8019500:	f7ff fd5e 	bl	8018fc0 <xTimerGenericCommand>
 8019504:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	2b00      	cmp	r3, #0
 801950a:	d10b      	bne.n	8019524 <prvSwitchTimerLists+0x9c>
 801950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019510:	b672      	cpsid	i
 8019512:	f383 8811 	msr	BASEPRI, r3
 8019516:	f3bf 8f6f 	isb	sy
 801951a:	f3bf 8f4f 	dsb	sy
 801951e:	b662      	cpsie	i
 8019520:	603b      	str	r3, [r7, #0]
 8019522:	e7fe      	b.n	8019522 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019524:	4b09      	ldr	r3, [pc, #36]	; (801954c <prvSwitchTimerLists+0xc4>)
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d1b0      	bne.n	8019490 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801952e:	4b07      	ldr	r3, [pc, #28]	; (801954c <prvSwitchTimerLists+0xc4>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019534:	4b06      	ldr	r3, [pc, #24]	; (8019550 <prvSwitchTimerLists+0xc8>)
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	4a04      	ldr	r2, [pc, #16]	; (801954c <prvSwitchTimerLists+0xc4>)
 801953a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801953c:	4a04      	ldr	r2, [pc, #16]	; (8019550 <prvSwitchTimerLists+0xc8>)
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	6013      	str	r3, [r2, #0]
}
 8019542:	bf00      	nop
 8019544:	3718      	adds	r7, #24
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}
 801954a:	bf00      	nop
 801954c:	20000f58 	.word	0x20000f58
 8019550:	20000f5c 	.word	0x20000f5c

08019554 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b082      	sub	sp, #8
 8019558:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801955a:	f000 f945 	bl	80197e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801955e:	4b15      	ldr	r3, [pc, #84]	; (80195b4 <prvCheckForValidListAndQueue+0x60>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d120      	bne.n	80195a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8019566:	4814      	ldr	r0, [pc, #80]	; (80195b8 <prvCheckForValidListAndQueue+0x64>)
 8019568:	f7fd fa96 	bl	8016a98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801956c:	4813      	ldr	r0, [pc, #76]	; (80195bc <prvCheckForValidListAndQueue+0x68>)
 801956e:	f7fd fa93 	bl	8016a98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019572:	4b13      	ldr	r3, [pc, #76]	; (80195c0 <prvCheckForValidListAndQueue+0x6c>)
 8019574:	4a10      	ldr	r2, [pc, #64]	; (80195b8 <prvCheckForValidListAndQueue+0x64>)
 8019576:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8019578:	4b12      	ldr	r3, [pc, #72]	; (80195c4 <prvCheckForValidListAndQueue+0x70>)
 801957a:	4a10      	ldr	r2, [pc, #64]	; (80195bc <prvCheckForValidListAndQueue+0x68>)
 801957c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801957e:	2300      	movs	r3, #0
 8019580:	9300      	str	r3, [sp, #0]
 8019582:	4b11      	ldr	r3, [pc, #68]	; (80195c8 <prvCheckForValidListAndQueue+0x74>)
 8019584:	4a11      	ldr	r2, [pc, #68]	; (80195cc <prvCheckForValidListAndQueue+0x78>)
 8019586:	2110      	movs	r1, #16
 8019588:	200a      	movs	r0, #10
 801958a:	f7fd fba3 	bl	8016cd4 <xQueueGenericCreateStatic>
 801958e:	4602      	mov	r2, r0
 8019590:	4b08      	ldr	r3, [pc, #32]	; (80195b4 <prvCheckForValidListAndQueue+0x60>)
 8019592:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8019594:	4b07      	ldr	r3, [pc, #28]	; (80195b4 <prvCheckForValidListAndQueue+0x60>)
 8019596:	681b      	ldr	r3, [r3, #0]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d005      	beq.n	80195a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801959c:	4b05      	ldr	r3, [pc, #20]	; (80195b4 <prvCheckForValidListAndQueue+0x60>)
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	490b      	ldr	r1, [pc, #44]	; (80195d0 <prvCheckForValidListAndQueue+0x7c>)
 80195a2:	4618      	mov	r0, r3
 80195a4:	f7fe fb90 	bl	8017cc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80195a8:	f000 f950 	bl	801984c <vPortExitCritical>
}
 80195ac:	bf00      	nop
 80195ae:	46bd      	mov	sp, r7
 80195b0:	bd80      	pop	{r7, pc}
 80195b2:	bf00      	nop
 80195b4:	20000f60 	.word	0x20000f60
 80195b8:	20000f30 	.word	0x20000f30
 80195bc:	20000f44 	.word	0x20000f44
 80195c0:	20000f58 	.word	0x20000f58
 80195c4:	20000f5c 	.word	0x20000f5c
 80195c8:	2000100c 	.word	0x2000100c
 80195cc:	20000f6c 	.word	0x20000f6c
 80195d0:	0801d8ac 	.word	0x0801d8ac

080195d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80195d4:	b480      	push	{r7}
 80195d6:	b085      	sub	sp, #20
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	60b9      	str	r1, [r7, #8]
 80195de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	3b04      	subs	r3, #4
 80195e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80195ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	3b04      	subs	r3, #4
 80195f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	f023 0201 	bic.w	r2, r3, #1
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	3b04      	subs	r3, #4
 8019602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019604:	4a0c      	ldr	r2, [pc, #48]	; (8019638 <pxPortInitialiseStack+0x64>)
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	3b14      	subs	r3, #20
 801960e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019610:	687a      	ldr	r2, [r7, #4]
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	3b04      	subs	r3, #4
 801961a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801961c:	68fb      	ldr	r3, [r7, #12]
 801961e:	f06f 0202 	mvn.w	r2, #2
 8019622:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	3b20      	subs	r3, #32
 8019628:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801962a:	68fb      	ldr	r3, [r7, #12]
}
 801962c:	4618      	mov	r0, r3
 801962e:	3714      	adds	r7, #20
 8019630:	46bd      	mov	sp, r7
 8019632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019636:	4770      	bx	lr
 8019638:	0801963d 	.word	0x0801963d

0801963c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801963c:	b480      	push	{r7}
 801963e:	b085      	sub	sp, #20
 8019640:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019642:	2300      	movs	r3, #0
 8019644:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019646:	4b13      	ldr	r3, [pc, #76]	; (8019694 <prvTaskExitError+0x58>)
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801964e:	d00b      	beq.n	8019668 <prvTaskExitError+0x2c>
 8019650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019654:	b672      	cpsid	i
 8019656:	f383 8811 	msr	BASEPRI, r3
 801965a:	f3bf 8f6f 	isb	sy
 801965e:	f3bf 8f4f 	dsb	sy
 8019662:	b662      	cpsie	i
 8019664:	60fb      	str	r3, [r7, #12]
 8019666:	e7fe      	b.n	8019666 <prvTaskExitError+0x2a>
 8019668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801966c:	b672      	cpsid	i
 801966e:	f383 8811 	msr	BASEPRI, r3
 8019672:	f3bf 8f6f 	isb	sy
 8019676:	f3bf 8f4f 	dsb	sy
 801967a:	b662      	cpsie	i
 801967c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801967e:	bf00      	nop
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	2b00      	cmp	r3, #0
 8019684:	d0fc      	beq.n	8019680 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019686:	bf00      	nop
 8019688:	3714      	adds	r7, #20
 801968a:	46bd      	mov	sp, r7
 801968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019690:	4770      	bx	lr
 8019692:	bf00      	nop
 8019694:	2000011c 	.word	0x2000011c
	...

080196a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80196a0:	4b07      	ldr	r3, [pc, #28]	; (80196c0 <pxCurrentTCBConst2>)
 80196a2:	6819      	ldr	r1, [r3, #0]
 80196a4:	6808      	ldr	r0, [r1, #0]
 80196a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196aa:	f380 8809 	msr	PSP, r0
 80196ae:	f3bf 8f6f 	isb	sy
 80196b2:	f04f 0000 	mov.w	r0, #0
 80196b6:	f380 8811 	msr	BASEPRI, r0
 80196ba:	4770      	bx	lr
 80196bc:	f3af 8000 	nop.w

080196c0 <pxCurrentTCBConst2>:
 80196c0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80196c4:	bf00      	nop
 80196c6:	bf00      	nop

080196c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80196c8:	4808      	ldr	r0, [pc, #32]	; (80196ec <prvPortStartFirstTask+0x24>)
 80196ca:	6800      	ldr	r0, [r0, #0]
 80196cc:	6800      	ldr	r0, [r0, #0]
 80196ce:	f380 8808 	msr	MSP, r0
 80196d2:	f04f 0000 	mov.w	r0, #0
 80196d6:	f380 8814 	msr	CONTROL, r0
 80196da:	b662      	cpsie	i
 80196dc:	b661      	cpsie	f
 80196de:	f3bf 8f4f 	dsb	sy
 80196e2:	f3bf 8f6f 	isb	sy
 80196e6:	df00      	svc	0
 80196e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80196ea:	bf00      	nop
 80196ec:	e000ed08 	.word	0xe000ed08

080196f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b084      	sub	sp, #16
 80196f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80196f6:	4b36      	ldr	r3, [pc, #216]	; (80197d0 <xPortStartScheduler+0xe0>)
 80196f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	781b      	ldrb	r3, [r3, #0]
 80196fe:	b2db      	uxtb	r3, r3
 8019700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	22ff      	movs	r2, #255	; 0xff
 8019706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019708:	68fb      	ldr	r3, [r7, #12]
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	b2db      	uxtb	r3, r3
 801970e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019710:	78fb      	ldrb	r3, [r7, #3]
 8019712:	b2db      	uxtb	r3, r3
 8019714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019718:	b2da      	uxtb	r2, r3
 801971a:	4b2e      	ldr	r3, [pc, #184]	; (80197d4 <xPortStartScheduler+0xe4>)
 801971c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801971e:	4b2e      	ldr	r3, [pc, #184]	; (80197d8 <xPortStartScheduler+0xe8>)
 8019720:	2207      	movs	r2, #7
 8019722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019724:	e009      	b.n	801973a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8019726:	4b2c      	ldr	r3, [pc, #176]	; (80197d8 <xPortStartScheduler+0xe8>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	3b01      	subs	r3, #1
 801972c:	4a2a      	ldr	r2, [pc, #168]	; (80197d8 <xPortStartScheduler+0xe8>)
 801972e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019730:	78fb      	ldrb	r3, [r7, #3]
 8019732:	b2db      	uxtb	r3, r3
 8019734:	005b      	lsls	r3, r3, #1
 8019736:	b2db      	uxtb	r3, r3
 8019738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801973a:	78fb      	ldrb	r3, [r7, #3]
 801973c:	b2db      	uxtb	r3, r3
 801973e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019742:	2b80      	cmp	r3, #128	; 0x80
 8019744:	d0ef      	beq.n	8019726 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019746:	4b24      	ldr	r3, [pc, #144]	; (80197d8 <xPortStartScheduler+0xe8>)
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	f1c3 0307 	rsb	r3, r3, #7
 801974e:	2b04      	cmp	r3, #4
 8019750:	d00b      	beq.n	801976a <xPortStartScheduler+0x7a>
 8019752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019756:	b672      	cpsid	i
 8019758:	f383 8811 	msr	BASEPRI, r3
 801975c:	f3bf 8f6f 	isb	sy
 8019760:	f3bf 8f4f 	dsb	sy
 8019764:	b662      	cpsie	i
 8019766:	60bb      	str	r3, [r7, #8]
 8019768:	e7fe      	b.n	8019768 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801976a:	4b1b      	ldr	r3, [pc, #108]	; (80197d8 <xPortStartScheduler+0xe8>)
 801976c:	681b      	ldr	r3, [r3, #0]
 801976e:	021b      	lsls	r3, r3, #8
 8019770:	4a19      	ldr	r2, [pc, #100]	; (80197d8 <xPortStartScheduler+0xe8>)
 8019772:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019774:	4b18      	ldr	r3, [pc, #96]	; (80197d8 <xPortStartScheduler+0xe8>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801977c:	4a16      	ldr	r2, [pc, #88]	; (80197d8 <xPortStartScheduler+0xe8>)
 801977e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	b2da      	uxtb	r2, r3
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8019788:	4b14      	ldr	r3, [pc, #80]	; (80197dc <xPortStartScheduler+0xec>)
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	4a13      	ldr	r2, [pc, #76]	; (80197dc <xPortStartScheduler+0xec>)
 801978e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019792:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8019794:	4b11      	ldr	r3, [pc, #68]	; (80197dc <xPortStartScheduler+0xec>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	4a10      	ldr	r2, [pc, #64]	; (80197dc <xPortStartScheduler+0xec>)
 801979a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801979e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80197a0:	f000 f8d4 	bl	801994c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80197a4:	4b0e      	ldr	r3, [pc, #56]	; (80197e0 <xPortStartScheduler+0xf0>)
 80197a6:	2200      	movs	r2, #0
 80197a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80197aa:	f000 f8f3 	bl	8019994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80197ae:	4b0d      	ldr	r3, [pc, #52]	; (80197e4 <xPortStartScheduler+0xf4>)
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	4a0c      	ldr	r2, [pc, #48]	; (80197e4 <xPortStartScheduler+0xf4>)
 80197b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80197b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80197ba:	f7ff ff85 	bl	80196c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80197be:	f7fe ff55 	bl	801866c <vTaskSwitchContext>
	prvTaskExitError();
 80197c2:	f7ff ff3b 	bl	801963c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80197c6:	2300      	movs	r3, #0
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3710      	adds	r7, #16
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}
 80197d0:	e000e400 	.word	0xe000e400
 80197d4:	2000105c 	.word	0x2000105c
 80197d8:	20001060 	.word	0x20001060
 80197dc:	e000ed20 	.word	0xe000ed20
 80197e0:	2000011c 	.word	0x2000011c
 80197e4:	e000ef34 	.word	0xe000ef34

080197e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80197e8:	b480      	push	{r7}
 80197ea:	b083      	sub	sp, #12
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197f2:	b672      	cpsid	i
 80197f4:	f383 8811 	msr	BASEPRI, r3
 80197f8:	f3bf 8f6f 	isb	sy
 80197fc:	f3bf 8f4f 	dsb	sy
 8019800:	b662      	cpsie	i
 8019802:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019804:	4b0f      	ldr	r3, [pc, #60]	; (8019844 <vPortEnterCritical+0x5c>)
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	3301      	adds	r3, #1
 801980a:	4a0e      	ldr	r2, [pc, #56]	; (8019844 <vPortEnterCritical+0x5c>)
 801980c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801980e:	4b0d      	ldr	r3, [pc, #52]	; (8019844 <vPortEnterCritical+0x5c>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	2b01      	cmp	r3, #1
 8019814:	d110      	bne.n	8019838 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019816:	4b0c      	ldr	r3, [pc, #48]	; (8019848 <vPortEnterCritical+0x60>)
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	b2db      	uxtb	r3, r3
 801981c:	2b00      	cmp	r3, #0
 801981e:	d00b      	beq.n	8019838 <vPortEnterCritical+0x50>
 8019820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019824:	b672      	cpsid	i
 8019826:	f383 8811 	msr	BASEPRI, r3
 801982a:	f3bf 8f6f 	isb	sy
 801982e:	f3bf 8f4f 	dsb	sy
 8019832:	b662      	cpsie	i
 8019834:	603b      	str	r3, [r7, #0]
 8019836:	e7fe      	b.n	8019836 <vPortEnterCritical+0x4e>
	}
}
 8019838:	bf00      	nop
 801983a:	370c      	adds	r7, #12
 801983c:	46bd      	mov	sp, r7
 801983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019842:	4770      	bx	lr
 8019844:	2000011c 	.word	0x2000011c
 8019848:	e000ed04 	.word	0xe000ed04

0801984c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801984c:	b480      	push	{r7}
 801984e:	b083      	sub	sp, #12
 8019850:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019852:	4b12      	ldr	r3, [pc, #72]	; (801989c <vPortExitCritical+0x50>)
 8019854:	681b      	ldr	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d10b      	bne.n	8019872 <vPortExitCritical+0x26>
 801985a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801985e:	b672      	cpsid	i
 8019860:	f383 8811 	msr	BASEPRI, r3
 8019864:	f3bf 8f6f 	isb	sy
 8019868:	f3bf 8f4f 	dsb	sy
 801986c:	b662      	cpsie	i
 801986e:	607b      	str	r3, [r7, #4]
 8019870:	e7fe      	b.n	8019870 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8019872:	4b0a      	ldr	r3, [pc, #40]	; (801989c <vPortExitCritical+0x50>)
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	3b01      	subs	r3, #1
 8019878:	4a08      	ldr	r2, [pc, #32]	; (801989c <vPortExitCritical+0x50>)
 801987a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801987c:	4b07      	ldr	r3, [pc, #28]	; (801989c <vPortExitCritical+0x50>)
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	2b00      	cmp	r3, #0
 8019882:	d104      	bne.n	801988e <vPortExitCritical+0x42>
 8019884:	2300      	movs	r3, #0
 8019886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019888:	683b      	ldr	r3, [r7, #0]
 801988a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 801988e:	bf00      	nop
 8019890:	370c      	adds	r7, #12
 8019892:	46bd      	mov	sp, r7
 8019894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019898:	4770      	bx	lr
 801989a:	bf00      	nop
 801989c:	2000011c 	.word	0x2000011c

080198a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80198a0:	f3ef 8009 	mrs	r0, PSP
 80198a4:	f3bf 8f6f 	isb	sy
 80198a8:	4b15      	ldr	r3, [pc, #84]	; (8019900 <pxCurrentTCBConst>)
 80198aa:	681a      	ldr	r2, [r3, #0]
 80198ac:	f01e 0f10 	tst.w	lr, #16
 80198b0:	bf08      	it	eq
 80198b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80198b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ba:	6010      	str	r0, [r2, #0]
 80198bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80198c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80198c4:	b672      	cpsid	i
 80198c6:	f380 8811 	msr	BASEPRI, r0
 80198ca:	f3bf 8f4f 	dsb	sy
 80198ce:	f3bf 8f6f 	isb	sy
 80198d2:	b662      	cpsie	i
 80198d4:	f7fe feca 	bl	801866c <vTaskSwitchContext>
 80198d8:	f04f 0000 	mov.w	r0, #0
 80198dc:	f380 8811 	msr	BASEPRI, r0
 80198e0:	bc09      	pop	{r0, r3}
 80198e2:	6819      	ldr	r1, [r3, #0]
 80198e4:	6808      	ldr	r0, [r1, #0]
 80198e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198ea:	f01e 0f10 	tst.w	lr, #16
 80198ee:	bf08      	it	eq
 80198f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80198f4:	f380 8809 	msr	PSP, r0
 80198f8:	f3bf 8f6f 	isb	sy
 80198fc:	4770      	bx	lr
 80198fe:	bf00      	nop

08019900 <pxCurrentTCBConst>:
 8019900:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019904:	bf00      	nop
 8019906:	bf00      	nop

08019908 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b082      	sub	sp, #8
 801990c:	af00      	add	r7, sp, #0
	__asm volatile
 801990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019912:	b672      	cpsid	i
 8019914:	f383 8811 	msr	BASEPRI, r3
 8019918:	f3bf 8f6f 	isb	sy
 801991c:	f3bf 8f4f 	dsb	sy
 8019920:	b662      	cpsie	i
 8019922:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019924:	f7fe fde8 	bl	80184f8 <xTaskIncrementTick>
 8019928:	4603      	mov	r3, r0
 801992a:	2b00      	cmp	r3, #0
 801992c:	d003      	beq.n	8019936 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801992e:	4b06      	ldr	r3, [pc, #24]	; (8019948 <SysTick_Handler+0x40>)
 8019930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019934:	601a      	str	r2, [r3, #0]
 8019936:	2300      	movs	r3, #0
 8019938:	603b      	str	r3, [r7, #0]
	__asm volatile
 801993a:	683b      	ldr	r3, [r7, #0]
 801993c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8019940:	bf00      	nop
 8019942:	3708      	adds	r7, #8
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	e000ed04 	.word	0xe000ed04

0801994c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801994c:	b480      	push	{r7}
 801994e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019950:	4b0b      	ldr	r3, [pc, #44]	; (8019980 <vPortSetupTimerInterrupt+0x34>)
 8019952:	2200      	movs	r2, #0
 8019954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019956:	4b0b      	ldr	r3, [pc, #44]	; (8019984 <vPortSetupTimerInterrupt+0x38>)
 8019958:	2200      	movs	r2, #0
 801995a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801995c:	4b0a      	ldr	r3, [pc, #40]	; (8019988 <vPortSetupTimerInterrupt+0x3c>)
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	4a0a      	ldr	r2, [pc, #40]	; (801998c <vPortSetupTimerInterrupt+0x40>)
 8019962:	fba2 2303 	umull	r2, r3, r2, r3
 8019966:	099b      	lsrs	r3, r3, #6
 8019968:	4a09      	ldr	r2, [pc, #36]	; (8019990 <vPortSetupTimerInterrupt+0x44>)
 801996a:	3b01      	subs	r3, #1
 801996c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801996e:	4b04      	ldr	r3, [pc, #16]	; (8019980 <vPortSetupTimerInterrupt+0x34>)
 8019970:	2207      	movs	r2, #7
 8019972:	601a      	str	r2, [r3, #0]
}
 8019974:	bf00      	nop
 8019976:	46bd      	mov	sp, r7
 8019978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801997c:	4770      	bx	lr
 801997e:	bf00      	nop
 8019980:	e000e010 	.word	0xe000e010
 8019984:	e000e018 	.word	0xe000e018
 8019988:	20000000 	.word	0x20000000
 801998c:	10624dd3 	.word	0x10624dd3
 8019990:	e000e014 	.word	0xe000e014

08019994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80199a4 <vPortEnableVFP+0x10>
 8019998:	6801      	ldr	r1, [r0, #0]
 801999a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801999e:	6001      	str	r1, [r0, #0]
 80199a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80199a2:	bf00      	nop
 80199a4:	e000ed88 	.word	0xe000ed88

080199a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80199a8:	b480      	push	{r7}
 80199aa:	b085      	sub	sp, #20
 80199ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80199ae:	f3ef 8305 	mrs	r3, IPSR
 80199b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	2b0f      	cmp	r3, #15
 80199b8:	d915      	bls.n	80199e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80199ba:	4a18      	ldr	r2, [pc, #96]	; (8019a1c <vPortValidateInterruptPriority+0x74>)
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	4413      	add	r3, r2
 80199c0:	781b      	ldrb	r3, [r3, #0]
 80199c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80199c4:	4b16      	ldr	r3, [pc, #88]	; (8019a20 <vPortValidateInterruptPriority+0x78>)
 80199c6:	781b      	ldrb	r3, [r3, #0]
 80199c8:	7afa      	ldrb	r2, [r7, #11]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d20b      	bcs.n	80199e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80199ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d2:	b672      	cpsid	i
 80199d4:	f383 8811 	msr	BASEPRI, r3
 80199d8:	f3bf 8f6f 	isb	sy
 80199dc:	f3bf 8f4f 	dsb	sy
 80199e0:	b662      	cpsie	i
 80199e2:	607b      	str	r3, [r7, #4]
 80199e4:	e7fe      	b.n	80199e4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80199e6:	4b0f      	ldr	r3, [pc, #60]	; (8019a24 <vPortValidateInterruptPriority+0x7c>)
 80199e8:	681b      	ldr	r3, [r3, #0]
 80199ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80199ee:	4b0e      	ldr	r3, [pc, #56]	; (8019a28 <vPortValidateInterruptPriority+0x80>)
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	429a      	cmp	r2, r3
 80199f4:	d90b      	bls.n	8019a0e <vPortValidateInterruptPriority+0x66>
 80199f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199fa:	b672      	cpsid	i
 80199fc:	f383 8811 	msr	BASEPRI, r3
 8019a00:	f3bf 8f6f 	isb	sy
 8019a04:	f3bf 8f4f 	dsb	sy
 8019a08:	b662      	cpsie	i
 8019a0a:	603b      	str	r3, [r7, #0]
 8019a0c:	e7fe      	b.n	8019a0c <vPortValidateInterruptPriority+0x64>
	}
 8019a0e:	bf00      	nop
 8019a10:	3714      	adds	r7, #20
 8019a12:	46bd      	mov	sp, r7
 8019a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a18:	4770      	bx	lr
 8019a1a:	bf00      	nop
 8019a1c:	e000e3f0 	.word	0xe000e3f0
 8019a20:	2000105c 	.word	0x2000105c
 8019a24:	e000ed0c 	.word	0xe000ed0c
 8019a28:	20001060 	.word	0x20001060

08019a2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b08a      	sub	sp, #40	; 0x28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019a34:	2300      	movs	r3, #0
 8019a36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019a38:	f7fe fc90 	bl	801835c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019a3c:	4b5a      	ldr	r3, [pc, #360]	; (8019ba8 <pvPortMalloc+0x17c>)
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d101      	bne.n	8019a48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019a44:	f000 f916 	bl	8019c74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019a48:	4b58      	ldr	r3, [pc, #352]	; (8019bac <pvPortMalloc+0x180>)
 8019a4a:	681a      	ldr	r2, [r3, #0]
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	4013      	ands	r3, r2
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	f040 8090 	bne.w	8019b76 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d01e      	beq.n	8019a9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8019a5c:	2208      	movs	r2, #8
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	4413      	add	r3, r2
 8019a62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	f003 0307 	and.w	r3, r3, #7
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d015      	beq.n	8019a9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	f023 0307 	bic.w	r3, r3, #7
 8019a74:	3308      	adds	r3, #8
 8019a76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	f003 0307 	and.w	r3, r3, #7
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d00b      	beq.n	8019a9a <pvPortMalloc+0x6e>
 8019a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a86:	b672      	cpsid	i
 8019a88:	f383 8811 	msr	BASEPRI, r3
 8019a8c:	f3bf 8f6f 	isb	sy
 8019a90:	f3bf 8f4f 	dsb	sy
 8019a94:	b662      	cpsie	i
 8019a96:	617b      	str	r3, [r7, #20]
 8019a98:	e7fe      	b.n	8019a98 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d06a      	beq.n	8019b76 <pvPortMalloc+0x14a>
 8019aa0:	4b43      	ldr	r3, [pc, #268]	; (8019bb0 <pvPortMalloc+0x184>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	429a      	cmp	r2, r3
 8019aa8:	d865      	bhi.n	8019b76 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019aaa:	4b42      	ldr	r3, [pc, #264]	; (8019bb4 <pvPortMalloc+0x188>)
 8019aac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019aae:	4b41      	ldr	r3, [pc, #260]	; (8019bb4 <pvPortMalloc+0x188>)
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019ab4:	e004      	b.n	8019ac0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	687a      	ldr	r2, [r7, #4]
 8019ac6:	429a      	cmp	r2, r3
 8019ac8:	d903      	bls.n	8019ad2 <pvPortMalloc+0xa6>
 8019aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d1f1      	bne.n	8019ab6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019ad2:	4b35      	ldr	r3, [pc, #212]	; (8019ba8 <pvPortMalloc+0x17c>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ad8:	429a      	cmp	r2, r3
 8019ada:	d04c      	beq.n	8019b76 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019adc:	6a3b      	ldr	r3, [r7, #32]
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	2208      	movs	r2, #8
 8019ae2:	4413      	add	r3, r2
 8019ae4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae8:	681a      	ldr	r2, [r3, #0]
 8019aea:	6a3b      	ldr	r3, [r7, #32]
 8019aec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019af0:	685a      	ldr	r2, [r3, #4]
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	1ad2      	subs	r2, r2, r3
 8019af6:	2308      	movs	r3, #8
 8019af8:	005b      	lsls	r3, r3, #1
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d920      	bls.n	8019b40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	4413      	add	r3, r2
 8019b04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b06:	69bb      	ldr	r3, [r7, #24]
 8019b08:	f003 0307 	and.w	r3, r3, #7
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d00b      	beq.n	8019b28 <pvPortMalloc+0xfc>
 8019b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b14:	b672      	cpsid	i
 8019b16:	f383 8811 	msr	BASEPRI, r3
 8019b1a:	f3bf 8f6f 	isb	sy
 8019b1e:	f3bf 8f4f 	dsb	sy
 8019b22:	b662      	cpsie	i
 8019b24:	613b      	str	r3, [r7, #16]
 8019b26:	e7fe      	b.n	8019b26 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b2a:	685a      	ldr	r2, [r3, #4]
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	1ad2      	subs	r2, r2, r3
 8019b30:	69bb      	ldr	r3, [r7, #24]
 8019b32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b36:	687a      	ldr	r2, [r7, #4]
 8019b38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019b3a:	69b8      	ldr	r0, [r7, #24]
 8019b3c:	f000 f8fc 	bl	8019d38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019b40:	4b1b      	ldr	r3, [pc, #108]	; (8019bb0 <pvPortMalloc+0x184>)
 8019b42:	681a      	ldr	r2, [r3, #0]
 8019b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b46:	685b      	ldr	r3, [r3, #4]
 8019b48:	1ad3      	subs	r3, r2, r3
 8019b4a:	4a19      	ldr	r2, [pc, #100]	; (8019bb0 <pvPortMalloc+0x184>)
 8019b4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019b4e:	4b18      	ldr	r3, [pc, #96]	; (8019bb0 <pvPortMalloc+0x184>)
 8019b50:	681a      	ldr	r2, [r3, #0]
 8019b52:	4b19      	ldr	r3, [pc, #100]	; (8019bb8 <pvPortMalloc+0x18c>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d203      	bcs.n	8019b62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019b5a:	4b15      	ldr	r3, [pc, #84]	; (8019bb0 <pvPortMalloc+0x184>)
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	4a16      	ldr	r2, [pc, #88]	; (8019bb8 <pvPortMalloc+0x18c>)
 8019b60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b64:	685a      	ldr	r2, [r3, #4]
 8019b66:	4b11      	ldr	r3, [pc, #68]	; (8019bac <pvPortMalloc+0x180>)
 8019b68:	681b      	ldr	r3, [r3, #0]
 8019b6a:	431a      	orrs	r2, r3
 8019b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b72:	2200      	movs	r2, #0
 8019b74:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019b76:	f7fe fbff 	bl	8018378 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019b7a:	69fb      	ldr	r3, [r7, #28]
 8019b7c:	f003 0307 	and.w	r3, r3, #7
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d00b      	beq.n	8019b9c <pvPortMalloc+0x170>
 8019b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b88:	b672      	cpsid	i
 8019b8a:	f383 8811 	msr	BASEPRI, r3
 8019b8e:	f3bf 8f6f 	isb	sy
 8019b92:	f3bf 8f4f 	dsb	sy
 8019b96:	b662      	cpsie	i
 8019b98:	60fb      	str	r3, [r7, #12]
 8019b9a:	e7fe      	b.n	8019b9a <pvPortMalloc+0x16e>
	return pvReturn;
 8019b9c:	69fb      	ldr	r3, [r7, #28]
}
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	3728      	adds	r7, #40	; 0x28
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}
 8019ba6:	bf00      	nop
 8019ba8:	2000886c 	.word	0x2000886c
 8019bac:	20008878 	.word	0x20008878
 8019bb0:	20008870 	.word	0x20008870
 8019bb4:	20008864 	.word	0x20008864
 8019bb8:	20008874 	.word	0x20008874

08019bbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b086      	sub	sp, #24
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d04a      	beq.n	8019c64 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019bce:	2308      	movs	r3, #8
 8019bd0:	425b      	negs	r3, r3
 8019bd2:	697a      	ldr	r2, [r7, #20]
 8019bd4:	4413      	add	r3, r2
 8019bd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019bd8:	697b      	ldr	r3, [r7, #20]
 8019bda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019bdc:	693b      	ldr	r3, [r7, #16]
 8019bde:	685a      	ldr	r2, [r3, #4]
 8019be0:	4b22      	ldr	r3, [pc, #136]	; (8019c6c <vPortFree+0xb0>)
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	4013      	ands	r3, r2
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d10b      	bne.n	8019c02 <vPortFree+0x46>
 8019bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019bee:	b672      	cpsid	i
 8019bf0:	f383 8811 	msr	BASEPRI, r3
 8019bf4:	f3bf 8f6f 	isb	sy
 8019bf8:	f3bf 8f4f 	dsb	sy
 8019bfc:	b662      	cpsie	i
 8019bfe:	60fb      	str	r3, [r7, #12]
 8019c00:	e7fe      	b.n	8019c00 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019c02:	693b      	ldr	r3, [r7, #16]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d00b      	beq.n	8019c22 <vPortFree+0x66>
 8019c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c0e:	b672      	cpsid	i
 8019c10:	f383 8811 	msr	BASEPRI, r3
 8019c14:	f3bf 8f6f 	isb	sy
 8019c18:	f3bf 8f4f 	dsb	sy
 8019c1c:	b662      	cpsie	i
 8019c1e:	60bb      	str	r3, [r7, #8]
 8019c20:	e7fe      	b.n	8019c20 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019c22:	693b      	ldr	r3, [r7, #16]
 8019c24:	685a      	ldr	r2, [r3, #4]
 8019c26:	4b11      	ldr	r3, [pc, #68]	; (8019c6c <vPortFree+0xb0>)
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	4013      	ands	r3, r2
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d019      	beq.n	8019c64 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019c30:	693b      	ldr	r3, [r7, #16]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d115      	bne.n	8019c64 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019c38:	693b      	ldr	r3, [r7, #16]
 8019c3a:	685a      	ldr	r2, [r3, #4]
 8019c3c:	4b0b      	ldr	r3, [pc, #44]	; (8019c6c <vPortFree+0xb0>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	43db      	mvns	r3, r3
 8019c42:	401a      	ands	r2, r3
 8019c44:	693b      	ldr	r3, [r7, #16]
 8019c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019c48:	f7fe fb88 	bl	801835c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019c4c:	693b      	ldr	r3, [r7, #16]
 8019c4e:	685a      	ldr	r2, [r3, #4]
 8019c50:	4b07      	ldr	r3, [pc, #28]	; (8019c70 <vPortFree+0xb4>)
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	4413      	add	r3, r2
 8019c56:	4a06      	ldr	r2, [pc, #24]	; (8019c70 <vPortFree+0xb4>)
 8019c58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019c5a:	6938      	ldr	r0, [r7, #16]
 8019c5c:	f000 f86c 	bl	8019d38 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019c60:	f7fe fb8a 	bl	8018378 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019c64:	bf00      	nop
 8019c66:	3718      	adds	r7, #24
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}
 8019c6c:	20008878 	.word	0x20008878
 8019c70:	20008870 	.word	0x20008870

08019c74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019c74:	b480      	push	{r7}
 8019c76:	b085      	sub	sp, #20
 8019c78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8019c7a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8019c7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019c80:	4b27      	ldr	r3, [pc, #156]	; (8019d20 <prvHeapInit+0xac>)
 8019c82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	f003 0307 	and.w	r3, r3, #7
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d00c      	beq.n	8019ca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	3307      	adds	r3, #7
 8019c92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019c94:	68fb      	ldr	r3, [r7, #12]
 8019c96:	f023 0307 	bic.w	r3, r3, #7
 8019c9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019c9c:	68ba      	ldr	r2, [r7, #8]
 8019c9e:	68fb      	ldr	r3, [r7, #12]
 8019ca0:	1ad3      	subs	r3, r2, r3
 8019ca2:	4a1f      	ldr	r2, [pc, #124]	; (8019d20 <prvHeapInit+0xac>)
 8019ca4:	4413      	add	r3, r2
 8019ca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019cac:	4a1d      	ldr	r2, [pc, #116]	; (8019d24 <prvHeapInit+0xb0>)
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019cb2:	4b1c      	ldr	r3, [pc, #112]	; (8019d24 <prvHeapInit+0xb0>)
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	68ba      	ldr	r2, [r7, #8]
 8019cbc:	4413      	add	r3, r2
 8019cbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019cc0:	2208      	movs	r2, #8
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	1a9b      	subs	r3, r3, r2
 8019cc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	f023 0307 	bic.w	r3, r3, #7
 8019cce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	4a15      	ldr	r2, [pc, #84]	; (8019d28 <prvHeapInit+0xb4>)
 8019cd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019cd6:	4b14      	ldr	r3, [pc, #80]	; (8019d28 <prvHeapInit+0xb4>)
 8019cd8:	681b      	ldr	r3, [r3, #0]
 8019cda:	2200      	movs	r2, #0
 8019cdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019cde:	4b12      	ldr	r3, [pc, #72]	; (8019d28 <prvHeapInit+0xb4>)
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019cea:	683b      	ldr	r3, [r7, #0]
 8019cec:	68fa      	ldr	r2, [r7, #12]
 8019cee:	1ad2      	subs	r2, r2, r3
 8019cf0:	683b      	ldr	r3, [r7, #0]
 8019cf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019cf4:	4b0c      	ldr	r3, [pc, #48]	; (8019d28 <prvHeapInit+0xb4>)
 8019cf6:	681a      	ldr	r2, [r3, #0]
 8019cf8:	683b      	ldr	r3, [r7, #0]
 8019cfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	685b      	ldr	r3, [r3, #4]
 8019d00:	4a0a      	ldr	r2, [pc, #40]	; (8019d2c <prvHeapInit+0xb8>)
 8019d02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	685b      	ldr	r3, [r3, #4]
 8019d08:	4a09      	ldr	r2, [pc, #36]	; (8019d30 <prvHeapInit+0xbc>)
 8019d0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019d0c:	4b09      	ldr	r3, [pc, #36]	; (8019d34 <prvHeapInit+0xc0>)
 8019d0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019d12:	601a      	str	r2, [r3, #0]
}
 8019d14:	bf00      	nop
 8019d16:	3714      	adds	r7, #20
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d1e:	4770      	bx	lr
 8019d20:	20001064 	.word	0x20001064
 8019d24:	20008864 	.word	0x20008864
 8019d28:	2000886c 	.word	0x2000886c
 8019d2c:	20008874 	.word	0x20008874
 8019d30:	20008870 	.word	0x20008870
 8019d34:	20008878 	.word	0x20008878

08019d38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019d38:	b480      	push	{r7}
 8019d3a:	b085      	sub	sp, #20
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019d40:	4b28      	ldr	r3, [pc, #160]	; (8019de4 <prvInsertBlockIntoFreeList+0xac>)
 8019d42:	60fb      	str	r3, [r7, #12]
 8019d44:	e002      	b.n	8019d4c <prvInsertBlockIntoFreeList+0x14>
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	60fb      	str	r3, [r7, #12]
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	687a      	ldr	r2, [r7, #4]
 8019d52:	429a      	cmp	r2, r3
 8019d54:	d8f7      	bhi.n	8019d46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019d5a:	68fb      	ldr	r3, [r7, #12]
 8019d5c:	685b      	ldr	r3, [r3, #4]
 8019d5e:	68ba      	ldr	r2, [r7, #8]
 8019d60:	4413      	add	r3, r2
 8019d62:	687a      	ldr	r2, [r7, #4]
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d108      	bne.n	8019d7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	685a      	ldr	r2, [r3, #4]
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	685b      	ldr	r3, [r3, #4]
 8019d70:	441a      	add	r2, r3
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019d76:	68fb      	ldr	r3, [r7, #12]
 8019d78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	68ba      	ldr	r2, [r7, #8]
 8019d84:	441a      	add	r2, r3
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d118      	bne.n	8019dc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681a      	ldr	r2, [r3, #0]
 8019d92:	4b15      	ldr	r3, [pc, #84]	; (8019de8 <prvInsertBlockIntoFreeList+0xb0>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	429a      	cmp	r2, r3
 8019d98:	d00d      	beq.n	8019db6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	685a      	ldr	r2, [r3, #4]
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	685b      	ldr	r3, [r3, #4]
 8019da4:	441a      	add	r2, r3
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	681a      	ldr	r2, [r3, #0]
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	601a      	str	r2, [r3, #0]
 8019db4:	e008      	b.n	8019dc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019db6:	4b0c      	ldr	r3, [pc, #48]	; (8019de8 <prvInsertBlockIntoFreeList+0xb0>)
 8019db8:	681a      	ldr	r2, [r3, #0]
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	601a      	str	r2, [r3, #0]
 8019dbe:	e003      	b.n	8019dc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	681a      	ldr	r2, [r3, #0]
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019dc8:	68fa      	ldr	r2, [r7, #12]
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d002      	beq.n	8019dd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	687a      	ldr	r2, [r7, #4]
 8019dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019dd6:	bf00      	nop
 8019dd8:	3714      	adds	r7, #20
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019de0:	4770      	bx	lr
 8019de2:	bf00      	nop
 8019de4:	20008864 	.word	0x20008864
 8019de8:	2000886c 	.word	0x2000886c

08019dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019dec:	b580      	push	{r7, lr}
 8019dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019df0:	2200      	movs	r2, #0
 8019df2:	4912      	ldr	r1, [pc, #72]	; (8019e3c <MX_USB_DEVICE_Init+0x50>)
 8019df4:	4812      	ldr	r0, [pc, #72]	; (8019e40 <MX_USB_DEVICE_Init+0x54>)
 8019df6:	f7f7 ff45 	bl	8011c84 <USBD_Init>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	2b00      	cmp	r3, #0
 8019dfe:	d001      	beq.n	8019e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019e00:	f7eb f8c8 	bl	8004f94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019e04:	490f      	ldr	r1, [pc, #60]	; (8019e44 <MX_USB_DEVICE_Init+0x58>)
 8019e06:	480e      	ldr	r0, [pc, #56]	; (8019e40 <MX_USB_DEVICE_Init+0x54>)
 8019e08:	f7f7 ff72 	bl	8011cf0 <USBD_RegisterClass>
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d001      	beq.n	8019e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019e12:	f7eb f8bf 	bl	8004f94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019e16:	490c      	ldr	r1, [pc, #48]	; (8019e48 <MX_USB_DEVICE_Init+0x5c>)
 8019e18:	4809      	ldr	r0, [pc, #36]	; (8019e40 <MX_USB_DEVICE_Init+0x54>)
 8019e1a:	f7f7 fec7 	bl	8011bac <USBD_CDC_RegisterInterface>
 8019e1e:	4603      	mov	r3, r0
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d001      	beq.n	8019e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019e24:	f7eb f8b6 	bl	8004f94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019e28:	4805      	ldr	r0, [pc, #20]	; (8019e40 <MX_USB_DEVICE_Init+0x54>)
 8019e2a:	f7f7 ff82 	bl	8011d32 <USBD_Start>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d001      	beq.n	8019e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019e34:	f7eb f8ae 	bl	8004f94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019e38:	bf00      	nop
 8019e3a:	bd80      	pop	{r7, pc}
 8019e3c:	20000134 	.word	0x20000134
 8019e40:	2001cad8 	.word	0x2001cad8
 8019e44:	20000018 	.word	0x20000018
 8019e48:	20000120 	.word	0x20000120

08019e4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019e4c:	b580      	push	{r7, lr}
 8019e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019e50:	2200      	movs	r2, #0
 8019e52:	4905      	ldr	r1, [pc, #20]	; (8019e68 <CDC_Init_FS+0x1c>)
 8019e54:	4805      	ldr	r0, [pc, #20]	; (8019e6c <CDC_Init_FS+0x20>)
 8019e56:	f7f7 febe 	bl	8011bd6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019e5a:	4905      	ldr	r1, [pc, #20]	; (8019e70 <CDC_Init_FS+0x24>)
 8019e5c:	4803      	ldr	r0, [pc, #12]	; (8019e6c <CDC_Init_FS+0x20>)
 8019e5e:	f7f7 fed3 	bl	8011c08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019e62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019e64:	4618      	mov	r0, r3
 8019e66:	bd80      	pop	{r7, pc}
 8019e68:	2001d5a8 	.word	0x2001d5a8
 8019e6c:	2001cad8 	.word	0x2001cad8
 8019e70:	2001cda8 	.word	0x2001cda8

08019e74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019e74:	b480      	push	{r7}
 8019e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019e78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e82:	4770      	bx	lr

08019e84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019e84:	b480      	push	{r7}
 8019e86:	b083      	sub	sp, #12
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	4603      	mov	r3, r0
 8019e8c:	6039      	str	r1, [r7, #0]
 8019e8e:	71fb      	strb	r3, [r7, #7]
 8019e90:	4613      	mov	r3, r2
 8019e92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019e94:	79fb      	ldrb	r3, [r7, #7]
 8019e96:	2b23      	cmp	r3, #35	; 0x23
 8019e98:	d84a      	bhi.n	8019f30 <CDC_Control_FS+0xac>
 8019e9a:	a201      	add	r2, pc, #4	; (adr r2, 8019ea0 <CDC_Control_FS+0x1c>)
 8019e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ea0:	08019f31 	.word	0x08019f31
 8019ea4:	08019f31 	.word	0x08019f31
 8019ea8:	08019f31 	.word	0x08019f31
 8019eac:	08019f31 	.word	0x08019f31
 8019eb0:	08019f31 	.word	0x08019f31
 8019eb4:	08019f31 	.word	0x08019f31
 8019eb8:	08019f31 	.word	0x08019f31
 8019ebc:	08019f31 	.word	0x08019f31
 8019ec0:	08019f31 	.word	0x08019f31
 8019ec4:	08019f31 	.word	0x08019f31
 8019ec8:	08019f31 	.word	0x08019f31
 8019ecc:	08019f31 	.word	0x08019f31
 8019ed0:	08019f31 	.word	0x08019f31
 8019ed4:	08019f31 	.word	0x08019f31
 8019ed8:	08019f31 	.word	0x08019f31
 8019edc:	08019f31 	.word	0x08019f31
 8019ee0:	08019f31 	.word	0x08019f31
 8019ee4:	08019f31 	.word	0x08019f31
 8019ee8:	08019f31 	.word	0x08019f31
 8019eec:	08019f31 	.word	0x08019f31
 8019ef0:	08019f31 	.word	0x08019f31
 8019ef4:	08019f31 	.word	0x08019f31
 8019ef8:	08019f31 	.word	0x08019f31
 8019efc:	08019f31 	.word	0x08019f31
 8019f00:	08019f31 	.word	0x08019f31
 8019f04:	08019f31 	.word	0x08019f31
 8019f08:	08019f31 	.word	0x08019f31
 8019f0c:	08019f31 	.word	0x08019f31
 8019f10:	08019f31 	.word	0x08019f31
 8019f14:	08019f31 	.word	0x08019f31
 8019f18:	08019f31 	.word	0x08019f31
 8019f1c:	08019f31 	.word	0x08019f31
 8019f20:	08019f31 	.word	0x08019f31
 8019f24:	08019f31 	.word	0x08019f31
 8019f28:	08019f31 	.word	0x08019f31
 8019f2c:	08019f31 	.word	0x08019f31
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019f30:	bf00      	nop
  }

  return (USBD_OK);
 8019f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019f34:	4618      	mov	r0, r3
 8019f36:	370c      	adds	r7, #12
 8019f38:	46bd      	mov	sp, r7
 8019f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3e:	4770      	bx	lr

08019f40 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b082      	sub	sp, #8
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
 8019f48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019f4a:	6879      	ldr	r1, [r7, #4]
 8019f4c:	4805      	ldr	r0, [pc, #20]	; (8019f64 <CDC_Receive_FS+0x24>)
 8019f4e:	f7f7 fe5b 	bl	8011c08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019f52:	4804      	ldr	r0, [pc, #16]	; (8019f64 <CDC_Receive_FS+0x24>)
 8019f54:	f7f7 fe6c 	bl	8011c30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019f58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3708      	adds	r7, #8
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}
 8019f62:	bf00      	nop
 8019f64:	2001cad8 	.word	0x2001cad8

08019f68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b087      	sub	sp, #28
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	60f8      	str	r0, [r7, #12]
 8019f70:	60b9      	str	r1, [r7, #8]
 8019f72:	4613      	mov	r3, r2
 8019f74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019f76:	2300      	movs	r3, #0
 8019f78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f7e:	4618      	mov	r0, r3
 8019f80:	371c      	adds	r7, #28
 8019f82:	46bd      	mov	sp, r7
 8019f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f88:	4770      	bx	lr
	...

08019f8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019f8c:	b480      	push	{r7}
 8019f8e:	b083      	sub	sp, #12
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	4603      	mov	r3, r0
 8019f94:	6039      	str	r1, [r7, #0]
 8019f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019f98:	683b      	ldr	r3, [r7, #0]
 8019f9a:	2212      	movs	r2, #18
 8019f9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019f9e:	4b03      	ldr	r3, [pc, #12]	; (8019fac <USBD_FS_DeviceDescriptor+0x20>)
}
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	370c      	adds	r7, #12
 8019fa4:	46bd      	mov	sp, r7
 8019fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019faa:	4770      	bx	lr
 8019fac:	20000154 	.word	0x20000154

08019fb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fb0:	b480      	push	{r7}
 8019fb2:	b083      	sub	sp, #12
 8019fb4:	af00      	add	r7, sp, #0
 8019fb6:	4603      	mov	r3, r0
 8019fb8:	6039      	str	r1, [r7, #0]
 8019fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019fbc:	683b      	ldr	r3, [r7, #0]
 8019fbe:	2204      	movs	r2, #4
 8019fc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019fc2:	4b03      	ldr	r3, [pc, #12]	; (8019fd0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	370c      	adds	r7, #12
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fce:	4770      	bx	lr
 8019fd0:	20000174 	.word	0x20000174

08019fd4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	b082      	sub	sp, #8
 8019fd8:	af00      	add	r7, sp, #0
 8019fda:	4603      	mov	r3, r0
 8019fdc:	6039      	str	r1, [r7, #0]
 8019fde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019fe0:	79fb      	ldrb	r3, [r7, #7]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d105      	bne.n	8019ff2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019fe6:	683a      	ldr	r2, [r7, #0]
 8019fe8:	4907      	ldr	r1, [pc, #28]	; (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
 8019fea:	4808      	ldr	r0, [pc, #32]	; (801a00c <USBD_FS_ProductStrDescriptor+0x38>)
 8019fec:	f7f8 fe99 	bl	8012d22 <USBD_GetString>
 8019ff0:	e004      	b.n	8019ffc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019ff2:	683a      	ldr	r2, [r7, #0]
 8019ff4:	4904      	ldr	r1, [pc, #16]	; (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
 8019ff6:	4805      	ldr	r0, [pc, #20]	; (801a00c <USBD_FS_ProductStrDescriptor+0x38>)
 8019ff8:	f7f8 fe93 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019ffc:	4b02      	ldr	r3, [pc, #8]	; (801a008 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019ffe:	4618      	mov	r0, r3
 801a000:	3708      	adds	r7, #8
 801a002:	46bd      	mov	sp, r7
 801a004:	bd80      	pop	{r7, pc}
 801a006:	bf00      	nop
 801a008:	2001dda8 	.word	0x2001dda8
 801a00c:	0801d8b4 	.word	0x0801d8b4

0801a010 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a010:	b580      	push	{r7, lr}
 801a012:	b082      	sub	sp, #8
 801a014:	af00      	add	r7, sp, #0
 801a016:	4603      	mov	r3, r0
 801a018:	6039      	str	r1, [r7, #0]
 801a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a01c:	683a      	ldr	r2, [r7, #0]
 801a01e:	4904      	ldr	r1, [pc, #16]	; (801a030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a020:	4804      	ldr	r0, [pc, #16]	; (801a034 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a022:	f7f8 fe7e 	bl	8012d22 <USBD_GetString>
  return USBD_StrDesc;
 801a026:	4b02      	ldr	r3, [pc, #8]	; (801a030 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a028:	4618      	mov	r0, r3
 801a02a:	3708      	adds	r7, #8
 801a02c:	46bd      	mov	sp, r7
 801a02e:	bd80      	pop	{r7, pc}
 801a030:	2001dda8 	.word	0x2001dda8
 801a034:	0801d8cc 	.word	0x0801d8cc

0801a038 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	4603      	mov	r3, r0
 801a040:	6039      	str	r1, [r7, #0]
 801a042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	221a      	movs	r2, #26
 801a048:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a04a:	f000 f855 	bl	801a0f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a04e:	4b02      	ldr	r3, [pc, #8]	; (801a058 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a050:	4618      	mov	r0, r3
 801a052:	3708      	adds	r7, #8
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}
 801a058:	20000178 	.word	0x20000178

0801a05c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b082      	sub	sp, #8
 801a060:	af00      	add	r7, sp, #0
 801a062:	4603      	mov	r3, r0
 801a064:	6039      	str	r1, [r7, #0]
 801a066:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a068:	79fb      	ldrb	r3, [r7, #7]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d105      	bne.n	801a07a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a06e:	683a      	ldr	r2, [r7, #0]
 801a070:	4907      	ldr	r1, [pc, #28]	; (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a072:	4808      	ldr	r0, [pc, #32]	; (801a094 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a074:	f7f8 fe55 	bl	8012d22 <USBD_GetString>
 801a078:	e004      	b.n	801a084 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a07a:	683a      	ldr	r2, [r7, #0]
 801a07c:	4904      	ldr	r1, [pc, #16]	; (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a07e:	4805      	ldr	r0, [pc, #20]	; (801a094 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a080:	f7f8 fe4f 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a084:	4b02      	ldr	r3, [pc, #8]	; (801a090 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a086:	4618      	mov	r0, r3
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	2001dda8 	.word	0x2001dda8
 801a094:	0801d8e0 	.word	0x0801d8e0

0801a098 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a098:	b580      	push	{r7, lr}
 801a09a:	b082      	sub	sp, #8
 801a09c:	af00      	add	r7, sp, #0
 801a09e:	4603      	mov	r3, r0
 801a0a0:	6039      	str	r1, [r7, #0]
 801a0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a0a4:	79fb      	ldrb	r3, [r7, #7]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d105      	bne.n	801a0b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0aa:	683a      	ldr	r2, [r7, #0]
 801a0ac:	4907      	ldr	r1, [pc, #28]	; (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0ae:	4808      	ldr	r0, [pc, #32]	; (801a0d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0b0:	f7f8 fe37 	bl	8012d22 <USBD_GetString>
 801a0b4:	e004      	b.n	801a0c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a0b6:	683a      	ldr	r2, [r7, #0]
 801a0b8:	4904      	ldr	r1, [pc, #16]	; (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a0ba:	4805      	ldr	r0, [pc, #20]	; (801a0d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a0bc:	f7f8 fe31 	bl	8012d22 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a0c0:	4b02      	ldr	r3, [pc, #8]	; (801a0cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3708      	adds	r7, #8
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
 801a0ca:	bf00      	nop
 801a0cc:	2001dda8 	.word	0x2001dda8
 801a0d0:	0801d8ec 	.word	0x0801d8ec

0801a0d4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a0d4:	b480      	push	{r7}
 801a0d6:	b083      	sub	sp, #12
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	4603      	mov	r3, r0
 801a0dc:	6039      	str	r1, [r7, #0]
 801a0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	220c      	movs	r2, #12
 801a0e4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801a0e6:	4b03      	ldr	r3, [pc, #12]	; (801a0f4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801a0e8:	4618      	mov	r0, r3
 801a0ea:	370c      	adds	r7, #12
 801a0ec:	46bd      	mov	sp, r7
 801a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0f2:	4770      	bx	lr
 801a0f4:	20000168 	.word	0x20000168

0801a0f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a0f8:	b580      	push	{r7, lr}
 801a0fa:	b084      	sub	sp, #16
 801a0fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a0fe:	4b0f      	ldr	r3, [pc, #60]	; (801a13c <Get_SerialNum+0x44>)
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a104:	4b0e      	ldr	r3, [pc, #56]	; (801a140 <Get_SerialNum+0x48>)
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a10a:	4b0e      	ldr	r3, [pc, #56]	; (801a144 <Get_SerialNum+0x4c>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a110:	68fa      	ldr	r2, [r7, #12]
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	4413      	add	r3, r2
 801a116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d009      	beq.n	801a132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a11e:	2208      	movs	r2, #8
 801a120:	4909      	ldr	r1, [pc, #36]	; (801a148 <Get_SerialNum+0x50>)
 801a122:	68f8      	ldr	r0, [r7, #12]
 801a124:	f000 f814 	bl	801a150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a128:	2204      	movs	r2, #4
 801a12a:	4908      	ldr	r1, [pc, #32]	; (801a14c <Get_SerialNum+0x54>)
 801a12c:	68b8      	ldr	r0, [r7, #8]
 801a12e:	f000 f80f 	bl	801a150 <IntToUnicode>
  }
}
 801a132:	bf00      	nop
 801a134:	3710      	adds	r7, #16
 801a136:	46bd      	mov	sp, r7
 801a138:	bd80      	pop	{r7, pc}
 801a13a:	bf00      	nop
 801a13c:	1ff0f420 	.word	0x1ff0f420
 801a140:	1ff0f424 	.word	0x1ff0f424
 801a144:	1ff0f428 	.word	0x1ff0f428
 801a148:	2000017a 	.word	0x2000017a
 801a14c:	2000018a 	.word	0x2000018a

0801a150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a150:	b480      	push	{r7}
 801a152:	b087      	sub	sp, #28
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	60b9      	str	r1, [r7, #8]
 801a15a:	4613      	mov	r3, r2
 801a15c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a15e:	2300      	movs	r3, #0
 801a160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a162:	2300      	movs	r3, #0
 801a164:	75fb      	strb	r3, [r7, #23]
 801a166:	e027      	b.n	801a1b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	0f1b      	lsrs	r3, r3, #28
 801a16c:	2b09      	cmp	r3, #9
 801a16e:	d80b      	bhi.n	801a188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	0f1b      	lsrs	r3, r3, #28
 801a174:	b2da      	uxtb	r2, r3
 801a176:	7dfb      	ldrb	r3, [r7, #23]
 801a178:	005b      	lsls	r3, r3, #1
 801a17a:	4619      	mov	r1, r3
 801a17c:	68bb      	ldr	r3, [r7, #8]
 801a17e:	440b      	add	r3, r1
 801a180:	3230      	adds	r2, #48	; 0x30
 801a182:	b2d2      	uxtb	r2, r2
 801a184:	701a      	strb	r2, [r3, #0]
 801a186:	e00a      	b.n	801a19e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	0f1b      	lsrs	r3, r3, #28
 801a18c:	b2da      	uxtb	r2, r3
 801a18e:	7dfb      	ldrb	r3, [r7, #23]
 801a190:	005b      	lsls	r3, r3, #1
 801a192:	4619      	mov	r1, r3
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	440b      	add	r3, r1
 801a198:	3237      	adds	r2, #55	; 0x37
 801a19a:	b2d2      	uxtb	r2, r2
 801a19c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	011b      	lsls	r3, r3, #4
 801a1a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a1a4:	7dfb      	ldrb	r3, [r7, #23]
 801a1a6:	005b      	lsls	r3, r3, #1
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	68ba      	ldr	r2, [r7, #8]
 801a1ac:	4413      	add	r3, r2
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a1b2:	7dfb      	ldrb	r3, [r7, #23]
 801a1b4:	3301      	adds	r3, #1
 801a1b6:	75fb      	strb	r3, [r7, #23]
 801a1b8:	7dfa      	ldrb	r2, [r7, #23]
 801a1ba:	79fb      	ldrb	r3, [r7, #7]
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d3d3      	bcc.n	801a168 <IntToUnicode+0x18>
  }
}
 801a1c0:	bf00      	nop
 801a1c2:	371c      	adds	r7, #28
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ca:	4770      	bx	lr

0801a1cc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b08a      	sub	sp, #40	; 0x28
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a1d4:	f107 0314 	add.w	r3, r7, #20
 801a1d8:	2200      	movs	r2, #0
 801a1da:	601a      	str	r2, [r3, #0]
 801a1dc:	605a      	str	r2, [r3, #4]
 801a1de:	609a      	str	r2, [r3, #8]
 801a1e0:	60da      	str	r2, [r3, #12]
 801a1e2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a1ec:	d13c      	bne.n	801a268 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a1ee:	4b20      	ldr	r3, [pc, #128]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1f2:	4a1f      	ldr	r2, [pc, #124]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a1f4:	f043 0301 	orr.w	r3, r3, #1
 801a1f8:	6313      	str	r3, [r2, #48]	; 0x30
 801a1fa:	4b1d      	ldr	r3, [pc, #116]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1fe:	f003 0301 	and.w	r3, r3, #1
 801a202:	613b      	str	r3, [r7, #16]
 801a204:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801a206:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801a20a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a20c:	2302      	movs	r3, #2
 801a20e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a210:	2300      	movs	r3, #0
 801a212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a214:	2303      	movs	r3, #3
 801a216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a218:	230a      	movs	r3, #10
 801a21a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a21c:	f107 0314 	add.w	r3, r7, #20
 801a220:	4619      	mov	r1, r3
 801a222:	4814      	ldr	r0, [pc, #80]	; (801a274 <HAL_PCD_MspInit+0xa8>)
 801a224:	f7ee fd12 	bl	8008c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a228:	4b11      	ldr	r3, [pc, #68]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a22c:	4a10      	ldr	r2, [pc, #64]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a22e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a232:	6353      	str	r3, [r2, #52]	; 0x34
 801a234:	4b0e      	ldr	r3, [pc, #56]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a23c:	60fb      	str	r3, [r7, #12]
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	4b0b      	ldr	r3, [pc, #44]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a244:	4a0a      	ldr	r2, [pc, #40]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a24a:	6453      	str	r3, [r2, #68]	; 0x44
 801a24c:	4b08      	ldr	r3, [pc, #32]	; (801a270 <HAL_PCD_MspInit+0xa4>)
 801a24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a254:	60bb      	str	r3, [r7, #8]
 801a256:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a258:	2200      	movs	r2, #0
 801a25a:	2105      	movs	r1, #5
 801a25c:	2043      	movs	r0, #67	; 0x43
 801a25e:	f7ee f8b7 	bl	80083d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a262:	2043      	movs	r0, #67	; 0x43
 801a264:	f7ee f8d0 	bl	8008408 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a268:	bf00      	nop
 801a26a:	3728      	adds	r7, #40	; 0x28
 801a26c:	46bd      	mov	sp, r7
 801a26e:	bd80      	pop	{r7, pc}
 801a270:	40023800 	.word	0x40023800
 801a274:	40020000 	.word	0x40020000

0801a278 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b082      	sub	sp, #8
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801a286:	687b      	ldr	r3, [r7, #4]
 801a288:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a28c:	4619      	mov	r1, r3
 801a28e:	4610      	mov	r0, r2
 801a290:	f7f7 fd9a 	bl	8011dc8 <USBD_LL_SetupStage>
}
 801a294:	bf00      	nop
 801a296:	3708      	adds	r7, #8
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b082      	sub	sp, #8
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801a2ae:	78fa      	ldrb	r2, [r7, #3]
 801a2b0:	6879      	ldr	r1, [r7, #4]
 801a2b2:	4613      	mov	r3, r2
 801a2b4:	00db      	lsls	r3, r3, #3
 801a2b6:	1a9b      	subs	r3, r3, r2
 801a2b8:	009b      	lsls	r3, r3, #2
 801a2ba:	440b      	add	r3, r1
 801a2bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a2c0:	681a      	ldr	r2, [r3, #0]
 801a2c2:	78fb      	ldrb	r3, [r7, #3]
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	f7f7 fdd2 	bl	8011e6e <USBD_LL_DataOutStage>
}
 801a2ca:	bf00      	nop
 801a2cc:	3708      	adds	r7, #8
 801a2ce:	46bd      	mov	sp, r7
 801a2d0:	bd80      	pop	{r7, pc}

0801a2d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a2d2:	b580      	push	{r7, lr}
 801a2d4:	b082      	sub	sp, #8
 801a2d6:	af00      	add	r7, sp, #0
 801a2d8:	6078      	str	r0, [r7, #4]
 801a2da:	460b      	mov	r3, r1
 801a2dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801a2e4:	78fa      	ldrb	r2, [r7, #3]
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	4613      	mov	r3, r2
 801a2ea:	00db      	lsls	r3, r3, #3
 801a2ec:	1a9b      	subs	r3, r3, r2
 801a2ee:	009b      	lsls	r3, r3, #2
 801a2f0:	440b      	add	r3, r1
 801a2f2:	3348      	adds	r3, #72	; 0x48
 801a2f4:	681a      	ldr	r2, [r3, #0]
 801a2f6:	78fb      	ldrb	r3, [r7, #3]
 801a2f8:	4619      	mov	r1, r3
 801a2fa:	f7f7 fe1b 	bl	8011f34 <USBD_LL_DataInStage>
}
 801a2fe:	bf00      	nop
 801a300:	3708      	adds	r7, #8
 801a302:	46bd      	mov	sp, r7
 801a304:	bd80      	pop	{r7, pc}

0801a306 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a306:	b580      	push	{r7, lr}
 801a308:	b082      	sub	sp, #8
 801a30a:	af00      	add	r7, sp, #0
 801a30c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a314:	4618      	mov	r0, r3
 801a316:	f7f7 ff1f 	bl	8012158 <USBD_LL_SOF>
}
 801a31a:	bf00      	nop
 801a31c:	3708      	adds	r7, #8
 801a31e:	46bd      	mov	sp, r7
 801a320:	bd80      	pop	{r7, pc}

0801a322 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801a322:	b580      	push	{r7, lr}
 801a324:	b084      	sub	sp, #16
 801a326:	af00      	add	r7, sp, #0
 801a328:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a32a:	2301      	movs	r3, #1
 801a32c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d102      	bne.n	801a33c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a336:	2300      	movs	r3, #0
 801a338:	73fb      	strb	r3, [r7, #15]
 801a33a:	e008      	b.n	801a34e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	68db      	ldr	r3, [r3, #12]
 801a340:	2b02      	cmp	r3, #2
 801a342:	d102      	bne.n	801a34a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a344:	2301      	movs	r3, #1
 801a346:	73fb      	strb	r3, [r7, #15]
 801a348:	e001      	b.n	801a34e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a34a:	f7ea fe23 	bl	8004f94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a354:	7bfa      	ldrb	r2, [r7, #15]
 801a356:	4611      	mov	r1, r2
 801a358:	4618      	mov	r0, r3
 801a35a:	f7f7 fec2 	bl	80120e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a364:	4618      	mov	r0, r3
 801a366:	f7f7 fe7b 	bl	8012060 <USBD_LL_Reset>
}
 801a36a:	bf00      	nop
 801a36c:	3710      	adds	r7, #16
 801a36e:	46bd      	mov	sp, r7
 801a370:	bd80      	pop	{r7, pc}
	...

0801a374 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b082      	sub	sp, #8
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a382:	4618      	mov	r0, r3
 801a384:	f7f7 febd 	bl	8012102 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	687a      	ldr	r2, [r7, #4]
 801a394:	6812      	ldr	r2, [r2, #0]
 801a396:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a39a:	f043 0301 	orr.w	r3, r3, #1
 801a39e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	6a1b      	ldr	r3, [r3, #32]
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d005      	beq.n	801a3b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a3a8:	4b04      	ldr	r3, [pc, #16]	; (801a3bc <HAL_PCD_SuspendCallback+0x48>)
 801a3aa:	691b      	ldr	r3, [r3, #16]
 801a3ac:	4a03      	ldr	r2, [pc, #12]	; (801a3bc <HAL_PCD_SuspendCallback+0x48>)
 801a3ae:	f043 0306 	orr.w	r3, r3, #6
 801a3b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a3b4:	bf00      	nop
 801a3b6:	3708      	adds	r7, #8
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}
 801a3bc:	e000ed00 	.word	0xe000ed00

0801a3c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b082      	sub	sp, #8
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a3ce:	4618      	mov	r0, r3
 801a3d0:	f7f7 feac 	bl	801212c <USBD_LL_Resume>
}
 801a3d4:	bf00      	nop
 801a3d6:	3708      	adds	r7, #8
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bd80      	pop	{r7, pc}

0801a3dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
 801a3e4:	460b      	mov	r3, r1
 801a3e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a3ee:	78fa      	ldrb	r2, [r7, #3]
 801a3f0:	4611      	mov	r1, r2
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f7f7 fed7 	bl	80121a6 <USBD_LL_IsoOUTIncomplete>
}
 801a3f8:	bf00      	nop
 801a3fa:	3708      	adds	r7, #8
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}

0801a400 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a400:	b580      	push	{r7, lr}
 801a402:	b082      	sub	sp, #8
 801a404:	af00      	add	r7, sp, #0
 801a406:	6078      	str	r0, [r7, #4]
 801a408:	460b      	mov	r3, r1
 801a40a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a412:	78fa      	ldrb	r2, [r7, #3]
 801a414:	4611      	mov	r1, r2
 801a416:	4618      	mov	r0, r3
 801a418:	f7f7 feb8 	bl	801218c <USBD_LL_IsoINIncomplete>
}
 801a41c:	bf00      	nop
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}

0801a424 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a424:	b580      	push	{r7, lr}
 801a426:	b082      	sub	sp, #8
 801a428:	af00      	add	r7, sp, #0
 801a42a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a42c:	687b      	ldr	r3, [r7, #4]
 801a42e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a432:	4618      	mov	r0, r3
 801a434:	f7f7 fec4 	bl	80121c0 <USBD_LL_DevConnected>
}
 801a438:	bf00      	nop
 801a43a:	3708      	adds	r7, #8
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd80      	pop	{r7, pc}

0801a440 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b082      	sub	sp, #8
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a44e:	4618      	mov	r0, r3
 801a450:	f7f7 fec1 	bl	80121d6 <USBD_LL_DevDisconnected>
}
 801a454:	bf00      	nop
 801a456:	3708      	adds	r7, #8
 801a458:	46bd      	mov	sp, r7
 801a45a:	bd80      	pop	{r7, pc}

0801a45c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b082      	sub	sp, #8
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	781b      	ldrb	r3, [r3, #0]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d13c      	bne.n	801a4e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a46c:	4a20      	ldr	r2, [pc, #128]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	4a1e      	ldr	r2, [pc, #120]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a478:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a47c:	4b1c      	ldr	r3, [pc, #112]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a47e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a482:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801a484:	4b1a      	ldr	r3, [pc, #104]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a486:	2206      	movs	r2, #6
 801a488:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a48a:	4b19      	ldr	r3, [pc, #100]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a48c:	2202      	movs	r2, #2
 801a48e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a490:	4b17      	ldr	r3, [pc, #92]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a492:	2200      	movs	r2, #0
 801a494:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a496:	4b16      	ldr	r3, [pc, #88]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a498:	2202      	movs	r2, #2
 801a49a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a49c:	4b14      	ldr	r3, [pc, #80]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a49e:	2200      	movs	r2, #0
 801a4a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a4a2:	4b13      	ldr	r3, [pc, #76]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a4a8:	4b11      	ldr	r3, [pc, #68]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a4ae:	4b10      	ldr	r3, [pc, #64]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a4b4:	4b0e      	ldr	r3, [pc, #56]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4b6:	2200      	movs	r2, #0
 801a4b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a4ba:	480d      	ldr	r0, [pc, #52]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4bc:	f7ee fdbb 	bl	8009036 <HAL_PCD_Init>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	d001      	beq.n	801a4ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a4c6:	f7ea fd65 	bl	8004f94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a4ca:	2180      	movs	r1, #128	; 0x80
 801a4cc:	4808      	ldr	r0, [pc, #32]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4ce:	f7ef ff3c 	bl	800a34a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a4d2:	2240      	movs	r2, #64	; 0x40
 801a4d4:	2100      	movs	r1, #0
 801a4d6:	4806      	ldr	r0, [pc, #24]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4d8:	f7ef fef0 	bl	800a2bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a4dc:	2280      	movs	r2, #128	; 0x80
 801a4de:	2101      	movs	r1, #1
 801a4e0:	4803      	ldr	r0, [pc, #12]	; (801a4f0 <USBD_LL_Init+0x94>)
 801a4e2:	f7ef feeb 	bl	800a2bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a4e6:	2300      	movs	r3, #0
}
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	3708      	adds	r7, #8
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bd80      	pop	{r7, pc}
 801a4f0:	2001dfa8 	.word	0x2001dfa8

0801a4f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a4f4:	b580      	push	{r7, lr}
 801a4f6:	b084      	sub	sp, #16
 801a4f8:	af00      	add	r7, sp, #0
 801a4fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a500:	2300      	movs	r3, #0
 801a502:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7ee feb7 	bl	800927e <HAL_PCD_Start>
 801a510:	4603      	mov	r3, r0
 801a512:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a514:	7bfb      	ldrb	r3, [r7, #15]
 801a516:	4618      	mov	r0, r3
 801a518:	f000 f97e 	bl	801a818 <USBD_Get_USB_Status>
 801a51c:	4603      	mov	r3, r0
 801a51e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a520:	7bbb      	ldrb	r3, [r7, #14]
}
 801a522:	4618      	mov	r0, r3
 801a524:	3710      	adds	r7, #16
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}

0801a52a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a52a:	b580      	push	{r7, lr}
 801a52c:	b084      	sub	sp, #16
 801a52e:	af00      	add	r7, sp, #0
 801a530:	6078      	str	r0, [r7, #4]
 801a532:	4608      	mov	r0, r1
 801a534:	4611      	mov	r1, r2
 801a536:	461a      	mov	r2, r3
 801a538:	4603      	mov	r3, r0
 801a53a:	70fb      	strb	r3, [r7, #3]
 801a53c:	460b      	mov	r3, r1
 801a53e:	70bb      	strb	r3, [r7, #2]
 801a540:	4613      	mov	r3, r2
 801a542:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a544:	2300      	movs	r3, #0
 801a546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a548:	2300      	movs	r3, #0
 801a54a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a552:	78bb      	ldrb	r3, [r7, #2]
 801a554:	883a      	ldrh	r2, [r7, #0]
 801a556:	78f9      	ldrb	r1, [r7, #3]
 801a558:	f7ef fab7 	bl	8009aca <HAL_PCD_EP_Open>
 801a55c:	4603      	mov	r3, r0
 801a55e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a560:	7bfb      	ldrb	r3, [r7, #15]
 801a562:	4618      	mov	r0, r3
 801a564:	f000 f958 	bl	801a818 <USBD_Get_USB_Status>
 801a568:	4603      	mov	r3, r0
 801a56a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a56c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a56e:	4618      	mov	r0, r3
 801a570:	3710      	adds	r7, #16
 801a572:	46bd      	mov	sp, r7
 801a574:	bd80      	pop	{r7, pc}

0801a576 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a576:	b580      	push	{r7, lr}
 801a578:	b084      	sub	sp, #16
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	6078      	str	r0, [r7, #4]
 801a57e:	460b      	mov	r3, r1
 801a580:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a582:	2300      	movs	r3, #0
 801a584:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a586:	2300      	movs	r3, #0
 801a588:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a590:	78fa      	ldrb	r2, [r7, #3]
 801a592:	4611      	mov	r1, r2
 801a594:	4618      	mov	r0, r3
 801a596:	f7ef fb00 	bl	8009b9a <HAL_PCD_EP_Close>
 801a59a:	4603      	mov	r3, r0
 801a59c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a59e:	7bfb      	ldrb	r3, [r7, #15]
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	f000 f939 	bl	801a818 <USBD_Get_USB_Status>
 801a5a6:	4603      	mov	r3, r0
 801a5a8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a5aa:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	3710      	adds	r7, #16
 801a5b0:	46bd      	mov	sp, r7
 801a5b2:	bd80      	pop	{r7, pc}

0801a5b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b084      	sub	sp, #16
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	460b      	mov	r3, r1
 801a5be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5c4:	2300      	movs	r3, #0
 801a5c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a5ce:	78fa      	ldrb	r2, [r7, #3]
 801a5d0:	4611      	mov	r1, r2
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f7ef fbd8 	bl	8009d88 <HAL_PCD_EP_SetStall>
 801a5d8:	4603      	mov	r3, r0
 801a5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a5dc:	7bfb      	ldrb	r3, [r7, #15]
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f000 f91a 	bl	801a818 <USBD_Get_USB_Status>
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	3710      	adds	r7, #16
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bd80      	pop	{r7, pc}

0801a5f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a5f2:	b580      	push	{r7, lr}
 801a5f4:	b084      	sub	sp, #16
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	6078      	str	r0, [r7, #4]
 801a5fa:	460b      	mov	r3, r1
 801a5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a5fe:	2300      	movs	r3, #0
 801a600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a602:	2300      	movs	r3, #0
 801a604:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a60c:	78fa      	ldrb	r2, [r7, #3]
 801a60e:	4611      	mov	r1, r2
 801a610:	4618      	mov	r0, r3
 801a612:	f7ef fc1d 	bl	8009e50 <HAL_PCD_EP_ClrStall>
 801a616:	4603      	mov	r3, r0
 801a618:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a61a:	7bfb      	ldrb	r3, [r7, #15]
 801a61c:	4618      	mov	r0, r3
 801a61e:	f000 f8fb 	bl	801a818 <USBD_Get_USB_Status>
 801a622:	4603      	mov	r3, r0
 801a624:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a626:	7bbb      	ldrb	r3, [r7, #14]
}
 801a628:	4618      	mov	r0, r3
 801a62a:	3710      	adds	r7, #16
 801a62c:	46bd      	mov	sp, r7
 801a62e:	bd80      	pop	{r7, pc}

0801a630 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a630:	b480      	push	{r7}
 801a632:	b085      	sub	sp, #20
 801a634:	af00      	add	r7, sp, #0
 801a636:	6078      	str	r0, [r7, #4]
 801a638:	460b      	mov	r3, r1
 801a63a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a642:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a644:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	da0b      	bge.n	801a664 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a64c:	78fb      	ldrb	r3, [r7, #3]
 801a64e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a652:	68f9      	ldr	r1, [r7, #12]
 801a654:	4613      	mov	r3, r2
 801a656:	00db      	lsls	r3, r3, #3
 801a658:	1a9b      	subs	r3, r3, r2
 801a65a:	009b      	lsls	r3, r3, #2
 801a65c:	440b      	add	r3, r1
 801a65e:	333e      	adds	r3, #62	; 0x3e
 801a660:	781b      	ldrb	r3, [r3, #0]
 801a662:	e00b      	b.n	801a67c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a664:	78fb      	ldrb	r3, [r7, #3]
 801a666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a66a:	68f9      	ldr	r1, [r7, #12]
 801a66c:	4613      	mov	r3, r2
 801a66e:	00db      	lsls	r3, r3, #3
 801a670:	1a9b      	subs	r3, r3, r2
 801a672:	009b      	lsls	r3, r3, #2
 801a674:	440b      	add	r3, r1
 801a676:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a67a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	3714      	adds	r7, #20
 801a680:	46bd      	mov	sp, r7
 801a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a686:	4770      	bx	lr

0801a688 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b084      	sub	sp, #16
 801a68c:	af00      	add	r7, sp, #0
 801a68e:	6078      	str	r0, [r7, #4]
 801a690:	460b      	mov	r3, r1
 801a692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a694:	2300      	movs	r3, #0
 801a696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a698:	2300      	movs	r3, #0
 801a69a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a6a2:	78fa      	ldrb	r2, [r7, #3]
 801a6a4:	4611      	mov	r1, r2
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	f7ef f9ea 	bl	8009a80 <HAL_PCD_SetAddress>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a6b0:	7bfb      	ldrb	r3, [r7, #15]
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	f000 f8b0 	bl	801a818 <USBD_Get_USB_Status>
 801a6b8:	4603      	mov	r3, r0
 801a6ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a6bc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a6be:	4618      	mov	r0, r3
 801a6c0:	3710      	adds	r7, #16
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}

0801a6c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a6c6:	b580      	push	{r7, lr}
 801a6c8:	b086      	sub	sp, #24
 801a6ca:	af00      	add	r7, sp, #0
 801a6cc:	60f8      	str	r0, [r7, #12]
 801a6ce:	607a      	str	r2, [r7, #4]
 801a6d0:	603b      	str	r3, [r7, #0]
 801a6d2:	460b      	mov	r3, r1
 801a6d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a6da:	2300      	movs	r3, #0
 801a6dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a6e4:	7af9      	ldrb	r1, [r7, #11]
 801a6e6:	683b      	ldr	r3, [r7, #0]
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	f7ef fb03 	bl	8009cf4 <HAL_PCD_EP_Transmit>
 801a6ee:	4603      	mov	r3, r0
 801a6f0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a6f2:	7dfb      	ldrb	r3, [r7, #23]
 801a6f4:	4618      	mov	r0, r3
 801a6f6:	f000 f88f 	bl	801a818 <USBD_Get_USB_Status>
 801a6fa:	4603      	mov	r3, r0
 801a6fc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a6fe:	7dbb      	ldrb	r3, [r7, #22]
}
 801a700:	4618      	mov	r0, r3
 801a702:	3718      	adds	r7, #24
 801a704:	46bd      	mov	sp, r7
 801a706:	bd80      	pop	{r7, pc}

0801a708 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b086      	sub	sp, #24
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	60f8      	str	r0, [r7, #12]
 801a710:	607a      	str	r2, [r7, #4]
 801a712:	603b      	str	r3, [r7, #0]
 801a714:	460b      	mov	r3, r1
 801a716:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a718:	2300      	movs	r3, #0
 801a71a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a71c:	2300      	movs	r3, #0
 801a71e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a726:	7af9      	ldrb	r1, [r7, #11]
 801a728:	683b      	ldr	r3, [r7, #0]
 801a72a:	687a      	ldr	r2, [r7, #4]
 801a72c:	f7ef fa7f 	bl	8009c2e <HAL_PCD_EP_Receive>
 801a730:	4603      	mov	r3, r0
 801a732:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a734:	7dfb      	ldrb	r3, [r7, #23]
 801a736:	4618      	mov	r0, r3
 801a738:	f000 f86e 	bl	801a818 <USBD_Get_USB_Status>
 801a73c:	4603      	mov	r3, r0
 801a73e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a740:	7dbb      	ldrb	r3, [r7, #22]
}
 801a742:	4618      	mov	r0, r3
 801a744:	3718      	adds	r7, #24
 801a746:	46bd      	mov	sp, r7
 801a748:	bd80      	pop	{r7, pc}

0801a74a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a74a:	b580      	push	{r7, lr}
 801a74c:	b082      	sub	sp, #8
 801a74e:	af00      	add	r7, sp, #0
 801a750:	6078      	str	r0, [r7, #4]
 801a752:	460b      	mov	r3, r1
 801a754:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a75c:	78fa      	ldrb	r2, [r7, #3]
 801a75e:	4611      	mov	r1, r2
 801a760:	4618      	mov	r0, r3
 801a762:	f7ef faaf 	bl	8009cc4 <HAL_PCD_EP_GetRxCount>
 801a766:	4603      	mov	r3, r0
}
 801a768:	4618      	mov	r0, r3
 801a76a:	3708      	adds	r7, #8
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}

0801a770 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b082      	sub	sp, #8
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
 801a778:	460b      	mov	r3, r1
 801a77a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a77c:	78fb      	ldrb	r3, [r7, #3]
 801a77e:	2b00      	cmp	r3, #0
 801a780:	d002      	beq.n	801a788 <HAL_PCDEx_LPM_Callback+0x18>
 801a782:	2b01      	cmp	r3, #1
 801a784:	d01f      	beq.n	801a7c6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801a786:	e03b      	b.n	801a800 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	6a1b      	ldr	r3, [r3, #32]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d007      	beq.n	801a7a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a790:	f000 f83c 	bl	801a80c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a794:	4b1c      	ldr	r3, [pc, #112]	; (801a808 <HAL_PCDEx_LPM_Callback+0x98>)
 801a796:	691b      	ldr	r3, [r3, #16]
 801a798:	4a1b      	ldr	r2, [pc, #108]	; (801a808 <HAL_PCDEx_LPM_Callback+0x98>)
 801a79a:	f023 0306 	bic.w	r3, r3, #6
 801a79e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	6812      	ldr	r2, [r2, #0]
 801a7ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a7b2:	f023 0301 	bic.w	r3, r3, #1
 801a7b6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f7f7 fcb4 	bl	801212c <USBD_LL_Resume>
    break;
 801a7c4:	e01c      	b.n	801a800 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	687a      	ldr	r2, [r7, #4]
 801a7d2:	6812      	ldr	r2, [r2, #0]
 801a7d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a7d8:	f043 0301 	orr.w	r3, r3, #1
 801a7dc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7f7 fc8c 	bl	8012102 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	6a1b      	ldr	r3, [r3, #32]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d005      	beq.n	801a7fe <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a7f2:	4b05      	ldr	r3, [pc, #20]	; (801a808 <HAL_PCDEx_LPM_Callback+0x98>)
 801a7f4:	691b      	ldr	r3, [r3, #16]
 801a7f6:	4a04      	ldr	r2, [pc, #16]	; (801a808 <HAL_PCDEx_LPM_Callback+0x98>)
 801a7f8:	f043 0306 	orr.w	r3, r3, #6
 801a7fc:	6113      	str	r3, [r2, #16]
    break;   
 801a7fe:	bf00      	nop
}
 801a800:	bf00      	nop
 801a802:	3708      	adds	r7, #8
 801a804:	46bd      	mov	sp, r7
 801a806:	bd80      	pop	{r7, pc}
 801a808:	e000ed00 	.word	0xe000ed00

0801a80c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a80c:	b580      	push	{r7, lr}
 801a80e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a810:	f7e9 ff9c 	bl	800474c <SystemClock_Config>
}
 801a814:	bf00      	nop
 801a816:	bd80      	pop	{r7, pc}

0801a818 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a818:	b480      	push	{r7}
 801a81a:	b085      	sub	sp, #20
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	4603      	mov	r3, r0
 801a820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a822:	2300      	movs	r3, #0
 801a824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a826:	79fb      	ldrb	r3, [r7, #7]
 801a828:	2b03      	cmp	r3, #3
 801a82a:	d817      	bhi.n	801a85c <USBD_Get_USB_Status+0x44>
 801a82c:	a201      	add	r2, pc, #4	; (adr r2, 801a834 <USBD_Get_USB_Status+0x1c>)
 801a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a832:	bf00      	nop
 801a834:	0801a845 	.word	0x0801a845
 801a838:	0801a84b 	.word	0x0801a84b
 801a83c:	0801a851 	.word	0x0801a851
 801a840:	0801a857 	.word	0x0801a857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a844:	2300      	movs	r3, #0
 801a846:	73fb      	strb	r3, [r7, #15]
    break;
 801a848:	e00b      	b.n	801a862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a84a:	2303      	movs	r3, #3
 801a84c:	73fb      	strb	r3, [r7, #15]
    break;
 801a84e:	e008      	b.n	801a862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a850:	2301      	movs	r3, #1
 801a852:	73fb      	strb	r3, [r7, #15]
    break;
 801a854:	e005      	b.n	801a862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a856:	2303      	movs	r3, #3
 801a858:	73fb      	strb	r3, [r7, #15]
    break;
 801a85a:	e002      	b.n	801a862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a85c:	2303      	movs	r3, #3
 801a85e:	73fb      	strb	r3, [r7, #15]
    break;
 801a860:	bf00      	nop
  }
  return usb_status;
 801a862:	7bfb      	ldrb	r3, [r7, #15]
}
 801a864:	4618      	mov	r0, r3
 801a866:	3714      	adds	r7, #20
 801a868:	46bd      	mov	sp, r7
 801a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86e:	4770      	bx	lr

0801a870 <__errno>:
 801a870:	4b01      	ldr	r3, [pc, #4]	; (801a878 <__errno+0x8>)
 801a872:	6818      	ldr	r0, [r3, #0]
 801a874:	4770      	bx	lr
 801a876:	bf00      	nop
 801a878:	20000194 	.word	0x20000194

0801a87c <__libc_init_array>:
 801a87c:	b570      	push	{r4, r5, r6, lr}
 801a87e:	4e0d      	ldr	r6, [pc, #52]	; (801a8b4 <__libc_init_array+0x38>)
 801a880:	4c0d      	ldr	r4, [pc, #52]	; (801a8b8 <__libc_init_array+0x3c>)
 801a882:	1ba4      	subs	r4, r4, r6
 801a884:	10a4      	asrs	r4, r4, #2
 801a886:	2500      	movs	r5, #0
 801a888:	42a5      	cmp	r5, r4
 801a88a:	d109      	bne.n	801a8a0 <__libc_init_array+0x24>
 801a88c:	4e0b      	ldr	r6, [pc, #44]	; (801a8bc <__libc_init_array+0x40>)
 801a88e:	4c0c      	ldr	r4, [pc, #48]	; (801a8c0 <__libc_init_array+0x44>)
 801a890:	f002 faa2 	bl	801cdd8 <_init>
 801a894:	1ba4      	subs	r4, r4, r6
 801a896:	10a4      	asrs	r4, r4, #2
 801a898:	2500      	movs	r5, #0
 801a89a:	42a5      	cmp	r5, r4
 801a89c:	d105      	bne.n	801a8aa <__libc_init_array+0x2e>
 801a89e:	bd70      	pop	{r4, r5, r6, pc}
 801a8a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8a4:	4798      	blx	r3
 801a8a6:	3501      	adds	r5, #1
 801a8a8:	e7ee      	b.n	801a888 <__libc_init_array+0xc>
 801a8aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a8ae:	4798      	blx	r3
 801a8b0:	3501      	adds	r5, #1
 801a8b2:	e7f2      	b.n	801a89a <__libc_init_array+0x1e>
 801a8b4:	0801dc28 	.word	0x0801dc28
 801a8b8:	0801dc28 	.word	0x0801dc28
 801a8bc:	0801dc28 	.word	0x0801dc28
 801a8c0:	0801dc2c 	.word	0x0801dc2c

0801a8c4 <malloc>:
 801a8c4:	4b02      	ldr	r3, [pc, #8]	; (801a8d0 <malloc+0xc>)
 801a8c6:	4601      	mov	r1, r0
 801a8c8:	6818      	ldr	r0, [r3, #0]
 801a8ca:	f000 b86d 	b.w	801a9a8 <_malloc_r>
 801a8ce:	bf00      	nop
 801a8d0:	20000194 	.word	0x20000194

0801a8d4 <free>:
 801a8d4:	4b02      	ldr	r3, [pc, #8]	; (801a8e0 <free+0xc>)
 801a8d6:	4601      	mov	r1, r0
 801a8d8:	6818      	ldr	r0, [r3, #0]
 801a8da:	f000 b817 	b.w	801a90c <_free_r>
 801a8de:	bf00      	nop
 801a8e0:	20000194 	.word	0x20000194

0801a8e4 <memcpy>:
 801a8e4:	b510      	push	{r4, lr}
 801a8e6:	1e43      	subs	r3, r0, #1
 801a8e8:	440a      	add	r2, r1
 801a8ea:	4291      	cmp	r1, r2
 801a8ec:	d100      	bne.n	801a8f0 <memcpy+0xc>
 801a8ee:	bd10      	pop	{r4, pc}
 801a8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a8f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a8f8:	e7f7      	b.n	801a8ea <memcpy+0x6>

0801a8fa <memset>:
 801a8fa:	4402      	add	r2, r0
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	4293      	cmp	r3, r2
 801a900:	d100      	bne.n	801a904 <memset+0xa>
 801a902:	4770      	bx	lr
 801a904:	f803 1b01 	strb.w	r1, [r3], #1
 801a908:	e7f9      	b.n	801a8fe <memset+0x4>
	...

0801a90c <_free_r>:
 801a90c:	b538      	push	{r3, r4, r5, lr}
 801a90e:	4605      	mov	r5, r0
 801a910:	2900      	cmp	r1, #0
 801a912:	d045      	beq.n	801a9a0 <_free_r+0x94>
 801a914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a918:	1f0c      	subs	r4, r1, #4
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	bfb8      	it	lt
 801a91e:	18e4      	addlt	r4, r4, r3
 801a920:	f000 f8e0 	bl	801aae4 <__malloc_lock>
 801a924:	4a1f      	ldr	r2, [pc, #124]	; (801a9a4 <_free_r+0x98>)
 801a926:	6813      	ldr	r3, [r2, #0]
 801a928:	4610      	mov	r0, r2
 801a92a:	b933      	cbnz	r3, 801a93a <_free_r+0x2e>
 801a92c:	6063      	str	r3, [r4, #4]
 801a92e:	6014      	str	r4, [r2, #0]
 801a930:	4628      	mov	r0, r5
 801a932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a936:	f000 b8d6 	b.w	801aae6 <__malloc_unlock>
 801a93a:	42a3      	cmp	r3, r4
 801a93c:	d90c      	bls.n	801a958 <_free_r+0x4c>
 801a93e:	6821      	ldr	r1, [r4, #0]
 801a940:	1862      	adds	r2, r4, r1
 801a942:	4293      	cmp	r3, r2
 801a944:	bf04      	itt	eq
 801a946:	681a      	ldreq	r2, [r3, #0]
 801a948:	685b      	ldreq	r3, [r3, #4]
 801a94a:	6063      	str	r3, [r4, #4]
 801a94c:	bf04      	itt	eq
 801a94e:	1852      	addeq	r2, r2, r1
 801a950:	6022      	streq	r2, [r4, #0]
 801a952:	6004      	str	r4, [r0, #0]
 801a954:	e7ec      	b.n	801a930 <_free_r+0x24>
 801a956:	4613      	mov	r3, r2
 801a958:	685a      	ldr	r2, [r3, #4]
 801a95a:	b10a      	cbz	r2, 801a960 <_free_r+0x54>
 801a95c:	42a2      	cmp	r2, r4
 801a95e:	d9fa      	bls.n	801a956 <_free_r+0x4a>
 801a960:	6819      	ldr	r1, [r3, #0]
 801a962:	1858      	adds	r0, r3, r1
 801a964:	42a0      	cmp	r0, r4
 801a966:	d10b      	bne.n	801a980 <_free_r+0x74>
 801a968:	6820      	ldr	r0, [r4, #0]
 801a96a:	4401      	add	r1, r0
 801a96c:	1858      	adds	r0, r3, r1
 801a96e:	4282      	cmp	r2, r0
 801a970:	6019      	str	r1, [r3, #0]
 801a972:	d1dd      	bne.n	801a930 <_free_r+0x24>
 801a974:	6810      	ldr	r0, [r2, #0]
 801a976:	6852      	ldr	r2, [r2, #4]
 801a978:	605a      	str	r2, [r3, #4]
 801a97a:	4401      	add	r1, r0
 801a97c:	6019      	str	r1, [r3, #0]
 801a97e:	e7d7      	b.n	801a930 <_free_r+0x24>
 801a980:	d902      	bls.n	801a988 <_free_r+0x7c>
 801a982:	230c      	movs	r3, #12
 801a984:	602b      	str	r3, [r5, #0]
 801a986:	e7d3      	b.n	801a930 <_free_r+0x24>
 801a988:	6820      	ldr	r0, [r4, #0]
 801a98a:	1821      	adds	r1, r4, r0
 801a98c:	428a      	cmp	r2, r1
 801a98e:	bf04      	itt	eq
 801a990:	6811      	ldreq	r1, [r2, #0]
 801a992:	6852      	ldreq	r2, [r2, #4]
 801a994:	6062      	str	r2, [r4, #4]
 801a996:	bf04      	itt	eq
 801a998:	1809      	addeq	r1, r1, r0
 801a99a:	6021      	streq	r1, [r4, #0]
 801a99c:	605c      	str	r4, [r3, #4]
 801a99e:	e7c7      	b.n	801a930 <_free_r+0x24>
 801a9a0:	bd38      	pop	{r3, r4, r5, pc}
 801a9a2:	bf00      	nop
 801a9a4:	2000887c 	.word	0x2000887c

0801a9a8 <_malloc_r>:
 801a9a8:	b570      	push	{r4, r5, r6, lr}
 801a9aa:	1ccd      	adds	r5, r1, #3
 801a9ac:	f025 0503 	bic.w	r5, r5, #3
 801a9b0:	3508      	adds	r5, #8
 801a9b2:	2d0c      	cmp	r5, #12
 801a9b4:	bf38      	it	cc
 801a9b6:	250c      	movcc	r5, #12
 801a9b8:	2d00      	cmp	r5, #0
 801a9ba:	4606      	mov	r6, r0
 801a9bc:	db01      	blt.n	801a9c2 <_malloc_r+0x1a>
 801a9be:	42a9      	cmp	r1, r5
 801a9c0:	d903      	bls.n	801a9ca <_malloc_r+0x22>
 801a9c2:	230c      	movs	r3, #12
 801a9c4:	6033      	str	r3, [r6, #0]
 801a9c6:	2000      	movs	r0, #0
 801a9c8:	bd70      	pop	{r4, r5, r6, pc}
 801a9ca:	f000 f88b 	bl	801aae4 <__malloc_lock>
 801a9ce:	4a21      	ldr	r2, [pc, #132]	; (801aa54 <_malloc_r+0xac>)
 801a9d0:	6814      	ldr	r4, [r2, #0]
 801a9d2:	4621      	mov	r1, r4
 801a9d4:	b991      	cbnz	r1, 801a9fc <_malloc_r+0x54>
 801a9d6:	4c20      	ldr	r4, [pc, #128]	; (801aa58 <_malloc_r+0xb0>)
 801a9d8:	6823      	ldr	r3, [r4, #0]
 801a9da:	b91b      	cbnz	r3, 801a9e4 <_malloc_r+0x3c>
 801a9dc:	4630      	mov	r0, r6
 801a9de:	f000 f83d 	bl	801aa5c <_sbrk_r>
 801a9e2:	6020      	str	r0, [r4, #0]
 801a9e4:	4629      	mov	r1, r5
 801a9e6:	4630      	mov	r0, r6
 801a9e8:	f000 f838 	bl	801aa5c <_sbrk_r>
 801a9ec:	1c43      	adds	r3, r0, #1
 801a9ee:	d124      	bne.n	801aa3a <_malloc_r+0x92>
 801a9f0:	230c      	movs	r3, #12
 801a9f2:	6033      	str	r3, [r6, #0]
 801a9f4:	4630      	mov	r0, r6
 801a9f6:	f000 f876 	bl	801aae6 <__malloc_unlock>
 801a9fa:	e7e4      	b.n	801a9c6 <_malloc_r+0x1e>
 801a9fc:	680b      	ldr	r3, [r1, #0]
 801a9fe:	1b5b      	subs	r3, r3, r5
 801aa00:	d418      	bmi.n	801aa34 <_malloc_r+0x8c>
 801aa02:	2b0b      	cmp	r3, #11
 801aa04:	d90f      	bls.n	801aa26 <_malloc_r+0x7e>
 801aa06:	600b      	str	r3, [r1, #0]
 801aa08:	50cd      	str	r5, [r1, r3]
 801aa0a:	18cc      	adds	r4, r1, r3
 801aa0c:	4630      	mov	r0, r6
 801aa0e:	f000 f86a 	bl	801aae6 <__malloc_unlock>
 801aa12:	f104 000b 	add.w	r0, r4, #11
 801aa16:	1d23      	adds	r3, r4, #4
 801aa18:	f020 0007 	bic.w	r0, r0, #7
 801aa1c:	1ac3      	subs	r3, r0, r3
 801aa1e:	d0d3      	beq.n	801a9c8 <_malloc_r+0x20>
 801aa20:	425a      	negs	r2, r3
 801aa22:	50e2      	str	r2, [r4, r3]
 801aa24:	e7d0      	b.n	801a9c8 <_malloc_r+0x20>
 801aa26:	428c      	cmp	r4, r1
 801aa28:	684b      	ldr	r3, [r1, #4]
 801aa2a:	bf16      	itet	ne
 801aa2c:	6063      	strne	r3, [r4, #4]
 801aa2e:	6013      	streq	r3, [r2, #0]
 801aa30:	460c      	movne	r4, r1
 801aa32:	e7eb      	b.n	801aa0c <_malloc_r+0x64>
 801aa34:	460c      	mov	r4, r1
 801aa36:	6849      	ldr	r1, [r1, #4]
 801aa38:	e7cc      	b.n	801a9d4 <_malloc_r+0x2c>
 801aa3a:	1cc4      	adds	r4, r0, #3
 801aa3c:	f024 0403 	bic.w	r4, r4, #3
 801aa40:	42a0      	cmp	r0, r4
 801aa42:	d005      	beq.n	801aa50 <_malloc_r+0xa8>
 801aa44:	1a21      	subs	r1, r4, r0
 801aa46:	4630      	mov	r0, r6
 801aa48:	f000 f808 	bl	801aa5c <_sbrk_r>
 801aa4c:	3001      	adds	r0, #1
 801aa4e:	d0cf      	beq.n	801a9f0 <_malloc_r+0x48>
 801aa50:	6025      	str	r5, [r4, #0]
 801aa52:	e7db      	b.n	801aa0c <_malloc_r+0x64>
 801aa54:	2000887c 	.word	0x2000887c
 801aa58:	20008880 	.word	0x20008880

0801aa5c <_sbrk_r>:
 801aa5c:	b538      	push	{r3, r4, r5, lr}
 801aa5e:	4c06      	ldr	r4, [pc, #24]	; (801aa78 <_sbrk_r+0x1c>)
 801aa60:	2300      	movs	r3, #0
 801aa62:	4605      	mov	r5, r0
 801aa64:	4608      	mov	r0, r1
 801aa66:	6023      	str	r3, [r4, #0]
 801aa68:	f7eb f8c6 	bl	8005bf8 <_sbrk>
 801aa6c:	1c43      	adds	r3, r0, #1
 801aa6e:	d102      	bne.n	801aa76 <_sbrk_r+0x1a>
 801aa70:	6823      	ldr	r3, [r4, #0]
 801aa72:	b103      	cbz	r3, 801aa76 <_sbrk_r+0x1a>
 801aa74:	602b      	str	r3, [r5, #0]
 801aa76:	bd38      	pop	{r3, r4, r5, pc}
 801aa78:	2001e3ac 	.word	0x2001e3ac

0801aa7c <sniprintf>:
 801aa7c:	b40c      	push	{r2, r3}
 801aa7e:	b530      	push	{r4, r5, lr}
 801aa80:	4b17      	ldr	r3, [pc, #92]	; (801aae0 <sniprintf+0x64>)
 801aa82:	1e0c      	subs	r4, r1, #0
 801aa84:	b09d      	sub	sp, #116	; 0x74
 801aa86:	681d      	ldr	r5, [r3, #0]
 801aa88:	da08      	bge.n	801aa9c <sniprintf+0x20>
 801aa8a:	238b      	movs	r3, #139	; 0x8b
 801aa8c:	602b      	str	r3, [r5, #0]
 801aa8e:	f04f 30ff 	mov.w	r0, #4294967295
 801aa92:	b01d      	add	sp, #116	; 0x74
 801aa94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801aa98:	b002      	add	sp, #8
 801aa9a:	4770      	bx	lr
 801aa9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801aaa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801aaa4:	bf14      	ite	ne
 801aaa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801aaaa:	4623      	moveq	r3, r4
 801aaac:	9304      	str	r3, [sp, #16]
 801aaae:	9307      	str	r3, [sp, #28]
 801aab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801aab4:	9002      	str	r0, [sp, #8]
 801aab6:	9006      	str	r0, [sp, #24]
 801aab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801aabc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801aabe:	ab21      	add	r3, sp, #132	; 0x84
 801aac0:	a902      	add	r1, sp, #8
 801aac2:	4628      	mov	r0, r5
 801aac4:	9301      	str	r3, [sp, #4]
 801aac6:	f000 f869 	bl	801ab9c <_svfiprintf_r>
 801aaca:	1c43      	adds	r3, r0, #1
 801aacc:	bfbc      	itt	lt
 801aace:	238b      	movlt	r3, #139	; 0x8b
 801aad0:	602b      	strlt	r3, [r5, #0]
 801aad2:	2c00      	cmp	r4, #0
 801aad4:	d0dd      	beq.n	801aa92 <sniprintf+0x16>
 801aad6:	9b02      	ldr	r3, [sp, #8]
 801aad8:	2200      	movs	r2, #0
 801aada:	701a      	strb	r2, [r3, #0]
 801aadc:	e7d9      	b.n	801aa92 <sniprintf+0x16>
 801aade:	bf00      	nop
 801aae0:	20000194 	.word	0x20000194

0801aae4 <__malloc_lock>:
 801aae4:	4770      	bx	lr

0801aae6 <__malloc_unlock>:
 801aae6:	4770      	bx	lr

0801aae8 <__ssputs_r>:
 801aae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aaec:	688e      	ldr	r6, [r1, #8]
 801aaee:	429e      	cmp	r6, r3
 801aaf0:	4682      	mov	sl, r0
 801aaf2:	460c      	mov	r4, r1
 801aaf4:	4690      	mov	r8, r2
 801aaf6:	4699      	mov	r9, r3
 801aaf8:	d837      	bhi.n	801ab6a <__ssputs_r+0x82>
 801aafa:	898a      	ldrh	r2, [r1, #12]
 801aafc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ab00:	d031      	beq.n	801ab66 <__ssputs_r+0x7e>
 801ab02:	6825      	ldr	r5, [r4, #0]
 801ab04:	6909      	ldr	r1, [r1, #16]
 801ab06:	1a6f      	subs	r7, r5, r1
 801ab08:	6965      	ldr	r5, [r4, #20]
 801ab0a:	2302      	movs	r3, #2
 801ab0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ab10:	fb95 f5f3 	sdiv	r5, r5, r3
 801ab14:	f109 0301 	add.w	r3, r9, #1
 801ab18:	443b      	add	r3, r7
 801ab1a:	429d      	cmp	r5, r3
 801ab1c:	bf38      	it	cc
 801ab1e:	461d      	movcc	r5, r3
 801ab20:	0553      	lsls	r3, r2, #21
 801ab22:	d530      	bpl.n	801ab86 <__ssputs_r+0x9e>
 801ab24:	4629      	mov	r1, r5
 801ab26:	f7ff ff3f 	bl	801a9a8 <_malloc_r>
 801ab2a:	4606      	mov	r6, r0
 801ab2c:	b950      	cbnz	r0, 801ab44 <__ssputs_r+0x5c>
 801ab2e:	230c      	movs	r3, #12
 801ab30:	f8ca 3000 	str.w	r3, [sl]
 801ab34:	89a3      	ldrh	r3, [r4, #12]
 801ab36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab3a:	81a3      	strh	r3, [r4, #12]
 801ab3c:	f04f 30ff 	mov.w	r0, #4294967295
 801ab40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab44:	463a      	mov	r2, r7
 801ab46:	6921      	ldr	r1, [r4, #16]
 801ab48:	f7ff fecc 	bl	801a8e4 <memcpy>
 801ab4c:	89a3      	ldrh	r3, [r4, #12]
 801ab4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ab52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab56:	81a3      	strh	r3, [r4, #12]
 801ab58:	6126      	str	r6, [r4, #16]
 801ab5a:	6165      	str	r5, [r4, #20]
 801ab5c:	443e      	add	r6, r7
 801ab5e:	1bed      	subs	r5, r5, r7
 801ab60:	6026      	str	r6, [r4, #0]
 801ab62:	60a5      	str	r5, [r4, #8]
 801ab64:	464e      	mov	r6, r9
 801ab66:	454e      	cmp	r6, r9
 801ab68:	d900      	bls.n	801ab6c <__ssputs_r+0x84>
 801ab6a:	464e      	mov	r6, r9
 801ab6c:	4632      	mov	r2, r6
 801ab6e:	4641      	mov	r1, r8
 801ab70:	6820      	ldr	r0, [r4, #0]
 801ab72:	f000 fa93 	bl	801b09c <memmove>
 801ab76:	68a3      	ldr	r3, [r4, #8]
 801ab78:	1b9b      	subs	r3, r3, r6
 801ab7a:	60a3      	str	r3, [r4, #8]
 801ab7c:	6823      	ldr	r3, [r4, #0]
 801ab7e:	441e      	add	r6, r3
 801ab80:	6026      	str	r6, [r4, #0]
 801ab82:	2000      	movs	r0, #0
 801ab84:	e7dc      	b.n	801ab40 <__ssputs_r+0x58>
 801ab86:	462a      	mov	r2, r5
 801ab88:	f000 faa1 	bl	801b0ce <_realloc_r>
 801ab8c:	4606      	mov	r6, r0
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	d1e2      	bne.n	801ab58 <__ssputs_r+0x70>
 801ab92:	6921      	ldr	r1, [r4, #16]
 801ab94:	4650      	mov	r0, sl
 801ab96:	f7ff feb9 	bl	801a90c <_free_r>
 801ab9a:	e7c8      	b.n	801ab2e <__ssputs_r+0x46>

0801ab9c <_svfiprintf_r>:
 801ab9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba0:	461d      	mov	r5, r3
 801aba2:	898b      	ldrh	r3, [r1, #12]
 801aba4:	061f      	lsls	r7, r3, #24
 801aba6:	b09d      	sub	sp, #116	; 0x74
 801aba8:	4680      	mov	r8, r0
 801abaa:	460c      	mov	r4, r1
 801abac:	4616      	mov	r6, r2
 801abae:	d50f      	bpl.n	801abd0 <_svfiprintf_r+0x34>
 801abb0:	690b      	ldr	r3, [r1, #16]
 801abb2:	b96b      	cbnz	r3, 801abd0 <_svfiprintf_r+0x34>
 801abb4:	2140      	movs	r1, #64	; 0x40
 801abb6:	f7ff fef7 	bl	801a9a8 <_malloc_r>
 801abba:	6020      	str	r0, [r4, #0]
 801abbc:	6120      	str	r0, [r4, #16]
 801abbe:	b928      	cbnz	r0, 801abcc <_svfiprintf_r+0x30>
 801abc0:	230c      	movs	r3, #12
 801abc2:	f8c8 3000 	str.w	r3, [r8]
 801abc6:	f04f 30ff 	mov.w	r0, #4294967295
 801abca:	e0c8      	b.n	801ad5e <_svfiprintf_r+0x1c2>
 801abcc:	2340      	movs	r3, #64	; 0x40
 801abce:	6163      	str	r3, [r4, #20]
 801abd0:	2300      	movs	r3, #0
 801abd2:	9309      	str	r3, [sp, #36]	; 0x24
 801abd4:	2320      	movs	r3, #32
 801abd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abda:	2330      	movs	r3, #48	; 0x30
 801abdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801abe0:	9503      	str	r5, [sp, #12]
 801abe2:	f04f 0b01 	mov.w	fp, #1
 801abe6:	4637      	mov	r7, r6
 801abe8:	463d      	mov	r5, r7
 801abea:	f815 3b01 	ldrb.w	r3, [r5], #1
 801abee:	b10b      	cbz	r3, 801abf4 <_svfiprintf_r+0x58>
 801abf0:	2b25      	cmp	r3, #37	; 0x25
 801abf2:	d13e      	bne.n	801ac72 <_svfiprintf_r+0xd6>
 801abf4:	ebb7 0a06 	subs.w	sl, r7, r6
 801abf8:	d00b      	beq.n	801ac12 <_svfiprintf_r+0x76>
 801abfa:	4653      	mov	r3, sl
 801abfc:	4632      	mov	r2, r6
 801abfe:	4621      	mov	r1, r4
 801ac00:	4640      	mov	r0, r8
 801ac02:	f7ff ff71 	bl	801aae8 <__ssputs_r>
 801ac06:	3001      	adds	r0, #1
 801ac08:	f000 80a4 	beq.w	801ad54 <_svfiprintf_r+0x1b8>
 801ac0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac0e:	4453      	add	r3, sl
 801ac10:	9309      	str	r3, [sp, #36]	; 0x24
 801ac12:	783b      	ldrb	r3, [r7, #0]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	f000 809d 	beq.w	801ad54 <_svfiprintf_r+0x1b8>
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	f04f 32ff 	mov.w	r2, #4294967295
 801ac20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac24:	9304      	str	r3, [sp, #16]
 801ac26:	9307      	str	r3, [sp, #28]
 801ac28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac2c:	931a      	str	r3, [sp, #104]	; 0x68
 801ac2e:	462f      	mov	r7, r5
 801ac30:	2205      	movs	r2, #5
 801ac32:	f817 1b01 	ldrb.w	r1, [r7], #1
 801ac36:	4850      	ldr	r0, [pc, #320]	; (801ad78 <_svfiprintf_r+0x1dc>)
 801ac38:	f7e5 faf2 	bl	8000220 <memchr>
 801ac3c:	9b04      	ldr	r3, [sp, #16]
 801ac3e:	b9d0      	cbnz	r0, 801ac76 <_svfiprintf_r+0xda>
 801ac40:	06d9      	lsls	r1, r3, #27
 801ac42:	bf44      	itt	mi
 801ac44:	2220      	movmi	r2, #32
 801ac46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ac4a:	071a      	lsls	r2, r3, #28
 801ac4c:	bf44      	itt	mi
 801ac4e:	222b      	movmi	r2, #43	; 0x2b
 801ac50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801ac54:	782a      	ldrb	r2, [r5, #0]
 801ac56:	2a2a      	cmp	r2, #42	; 0x2a
 801ac58:	d015      	beq.n	801ac86 <_svfiprintf_r+0xea>
 801ac5a:	9a07      	ldr	r2, [sp, #28]
 801ac5c:	462f      	mov	r7, r5
 801ac5e:	2000      	movs	r0, #0
 801ac60:	250a      	movs	r5, #10
 801ac62:	4639      	mov	r1, r7
 801ac64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac68:	3b30      	subs	r3, #48	; 0x30
 801ac6a:	2b09      	cmp	r3, #9
 801ac6c:	d94d      	bls.n	801ad0a <_svfiprintf_r+0x16e>
 801ac6e:	b1b8      	cbz	r0, 801aca0 <_svfiprintf_r+0x104>
 801ac70:	e00f      	b.n	801ac92 <_svfiprintf_r+0xf6>
 801ac72:	462f      	mov	r7, r5
 801ac74:	e7b8      	b.n	801abe8 <_svfiprintf_r+0x4c>
 801ac76:	4a40      	ldr	r2, [pc, #256]	; (801ad78 <_svfiprintf_r+0x1dc>)
 801ac78:	1a80      	subs	r0, r0, r2
 801ac7a:	fa0b f000 	lsl.w	r0, fp, r0
 801ac7e:	4318      	orrs	r0, r3
 801ac80:	9004      	str	r0, [sp, #16]
 801ac82:	463d      	mov	r5, r7
 801ac84:	e7d3      	b.n	801ac2e <_svfiprintf_r+0x92>
 801ac86:	9a03      	ldr	r2, [sp, #12]
 801ac88:	1d11      	adds	r1, r2, #4
 801ac8a:	6812      	ldr	r2, [r2, #0]
 801ac8c:	9103      	str	r1, [sp, #12]
 801ac8e:	2a00      	cmp	r2, #0
 801ac90:	db01      	blt.n	801ac96 <_svfiprintf_r+0xfa>
 801ac92:	9207      	str	r2, [sp, #28]
 801ac94:	e004      	b.n	801aca0 <_svfiprintf_r+0x104>
 801ac96:	4252      	negs	r2, r2
 801ac98:	f043 0302 	orr.w	r3, r3, #2
 801ac9c:	9207      	str	r2, [sp, #28]
 801ac9e:	9304      	str	r3, [sp, #16]
 801aca0:	783b      	ldrb	r3, [r7, #0]
 801aca2:	2b2e      	cmp	r3, #46	; 0x2e
 801aca4:	d10c      	bne.n	801acc0 <_svfiprintf_r+0x124>
 801aca6:	787b      	ldrb	r3, [r7, #1]
 801aca8:	2b2a      	cmp	r3, #42	; 0x2a
 801acaa:	d133      	bne.n	801ad14 <_svfiprintf_r+0x178>
 801acac:	9b03      	ldr	r3, [sp, #12]
 801acae:	1d1a      	adds	r2, r3, #4
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	9203      	str	r2, [sp, #12]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	bfb8      	it	lt
 801acb8:	f04f 33ff 	movlt.w	r3, #4294967295
 801acbc:	3702      	adds	r7, #2
 801acbe:	9305      	str	r3, [sp, #20]
 801acc0:	4d2e      	ldr	r5, [pc, #184]	; (801ad7c <_svfiprintf_r+0x1e0>)
 801acc2:	7839      	ldrb	r1, [r7, #0]
 801acc4:	2203      	movs	r2, #3
 801acc6:	4628      	mov	r0, r5
 801acc8:	f7e5 faaa 	bl	8000220 <memchr>
 801accc:	b138      	cbz	r0, 801acde <_svfiprintf_r+0x142>
 801acce:	2340      	movs	r3, #64	; 0x40
 801acd0:	1b40      	subs	r0, r0, r5
 801acd2:	fa03 f000 	lsl.w	r0, r3, r0
 801acd6:	9b04      	ldr	r3, [sp, #16]
 801acd8:	4303      	orrs	r3, r0
 801acda:	3701      	adds	r7, #1
 801acdc:	9304      	str	r3, [sp, #16]
 801acde:	7839      	ldrb	r1, [r7, #0]
 801ace0:	4827      	ldr	r0, [pc, #156]	; (801ad80 <_svfiprintf_r+0x1e4>)
 801ace2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ace6:	2206      	movs	r2, #6
 801ace8:	1c7e      	adds	r6, r7, #1
 801acea:	f7e5 fa99 	bl	8000220 <memchr>
 801acee:	2800      	cmp	r0, #0
 801acf0:	d038      	beq.n	801ad64 <_svfiprintf_r+0x1c8>
 801acf2:	4b24      	ldr	r3, [pc, #144]	; (801ad84 <_svfiprintf_r+0x1e8>)
 801acf4:	bb13      	cbnz	r3, 801ad3c <_svfiprintf_r+0x1a0>
 801acf6:	9b03      	ldr	r3, [sp, #12]
 801acf8:	3307      	adds	r3, #7
 801acfa:	f023 0307 	bic.w	r3, r3, #7
 801acfe:	3308      	adds	r3, #8
 801ad00:	9303      	str	r3, [sp, #12]
 801ad02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad04:	444b      	add	r3, r9
 801ad06:	9309      	str	r3, [sp, #36]	; 0x24
 801ad08:	e76d      	b.n	801abe6 <_svfiprintf_r+0x4a>
 801ad0a:	fb05 3202 	mla	r2, r5, r2, r3
 801ad0e:	2001      	movs	r0, #1
 801ad10:	460f      	mov	r7, r1
 801ad12:	e7a6      	b.n	801ac62 <_svfiprintf_r+0xc6>
 801ad14:	2300      	movs	r3, #0
 801ad16:	3701      	adds	r7, #1
 801ad18:	9305      	str	r3, [sp, #20]
 801ad1a:	4619      	mov	r1, r3
 801ad1c:	250a      	movs	r5, #10
 801ad1e:	4638      	mov	r0, r7
 801ad20:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad24:	3a30      	subs	r2, #48	; 0x30
 801ad26:	2a09      	cmp	r2, #9
 801ad28:	d903      	bls.n	801ad32 <_svfiprintf_r+0x196>
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d0c8      	beq.n	801acc0 <_svfiprintf_r+0x124>
 801ad2e:	9105      	str	r1, [sp, #20]
 801ad30:	e7c6      	b.n	801acc0 <_svfiprintf_r+0x124>
 801ad32:	fb05 2101 	mla	r1, r5, r1, r2
 801ad36:	2301      	movs	r3, #1
 801ad38:	4607      	mov	r7, r0
 801ad3a:	e7f0      	b.n	801ad1e <_svfiprintf_r+0x182>
 801ad3c:	ab03      	add	r3, sp, #12
 801ad3e:	9300      	str	r3, [sp, #0]
 801ad40:	4622      	mov	r2, r4
 801ad42:	4b11      	ldr	r3, [pc, #68]	; (801ad88 <_svfiprintf_r+0x1ec>)
 801ad44:	a904      	add	r1, sp, #16
 801ad46:	4640      	mov	r0, r8
 801ad48:	f3af 8000 	nop.w
 801ad4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ad50:	4681      	mov	r9, r0
 801ad52:	d1d6      	bne.n	801ad02 <_svfiprintf_r+0x166>
 801ad54:	89a3      	ldrh	r3, [r4, #12]
 801ad56:	065b      	lsls	r3, r3, #25
 801ad58:	f53f af35 	bmi.w	801abc6 <_svfiprintf_r+0x2a>
 801ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ad5e:	b01d      	add	sp, #116	; 0x74
 801ad60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad64:	ab03      	add	r3, sp, #12
 801ad66:	9300      	str	r3, [sp, #0]
 801ad68:	4622      	mov	r2, r4
 801ad6a:	4b07      	ldr	r3, [pc, #28]	; (801ad88 <_svfiprintf_r+0x1ec>)
 801ad6c:	a904      	add	r1, sp, #16
 801ad6e:	4640      	mov	r0, r8
 801ad70:	f000 f882 	bl	801ae78 <_printf_i>
 801ad74:	e7ea      	b.n	801ad4c <_svfiprintf_r+0x1b0>
 801ad76:	bf00      	nop
 801ad78:	0801db18 	.word	0x0801db18
 801ad7c:	0801db1e 	.word	0x0801db1e
 801ad80:	0801db22 	.word	0x0801db22
 801ad84:	00000000 	.word	0x00000000
 801ad88:	0801aae9 	.word	0x0801aae9

0801ad8c <_printf_common>:
 801ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad90:	4691      	mov	r9, r2
 801ad92:	461f      	mov	r7, r3
 801ad94:	688a      	ldr	r2, [r1, #8]
 801ad96:	690b      	ldr	r3, [r1, #16]
 801ad98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ad9c:	4293      	cmp	r3, r2
 801ad9e:	bfb8      	it	lt
 801ada0:	4613      	movlt	r3, r2
 801ada2:	f8c9 3000 	str.w	r3, [r9]
 801ada6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adaa:	4606      	mov	r6, r0
 801adac:	460c      	mov	r4, r1
 801adae:	b112      	cbz	r2, 801adb6 <_printf_common+0x2a>
 801adb0:	3301      	adds	r3, #1
 801adb2:	f8c9 3000 	str.w	r3, [r9]
 801adb6:	6823      	ldr	r3, [r4, #0]
 801adb8:	0699      	lsls	r1, r3, #26
 801adba:	bf42      	ittt	mi
 801adbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801adc0:	3302      	addmi	r3, #2
 801adc2:	f8c9 3000 	strmi.w	r3, [r9]
 801adc6:	6825      	ldr	r5, [r4, #0]
 801adc8:	f015 0506 	ands.w	r5, r5, #6
 801adcc:	d107      	bne.n	801adde <_printf_common+0x52>
 801adce:	f104 0a19 	add.w	sl, r4, #25
 801add2:	68e3      	ldr	r3, [r4, #12]
 801add4:	f8d9 2000 	ldr.w	r2, [r9]
 801add8:	1a9b      	subs	r3, r3, r2
 801adda:	42ab      	cmp	r3, r5
 801addc:	dc28      	bgt.n	801ae30 <_printf_common+0xa4>
 801adde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ade2:	6822      	ldr	r2, [r4, #0]
 801ade4:	3300      	adds	r3, #0
 801ade6:	bf18      	it	ne
 801ade8:	2301      	movne	r3, #1
 801adea:	0692      	lsls	r2, r2, #26
 801adec:	d42d      	bmi.n	801ae4a <_printf_common+0xbe>
 801adee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801adf2:	4639      	mov	r1, r7
 801adf4:	4630      	mov	r0, r6
 801adf6:	47c0      	blx	r8
 801adf8:	3001      	adds	r0, #1
 801adfa:	d020      	beq.n	801ae3e <_printf_common+0xb2>
 801adfc:	6823      	ldr	r3, [r4, #0]
 801adfe:	68e5      	ldr	r5, [r4, #12]
 801ae00:	f8d9 2000 	ldr.w	r2, [r9]
 801ae04:	f003 0306 	and.w	r3, r3, #6
 801ae08:	2b04      	cmp	r3, #4
 801ae0a:	bf08      	it	eq
 801ae0c:	1aad      	subeq	r5, r5, r2
 801ae0e:	68a3      	ldr	r3, [r4, #8]
 801ae10:	6922      	ldr	r2, [r4, #16]
 801ae12:	bf0c      	ite	eq
 801ae14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae18:	2500      	movne	r5, #0
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	bfc4      	itt	gt
 801ae1e:	1a9b      	subgt	r3, r3, r2
 801ae20:	18ed      	addgt	r5, r5, r3
 801ae22:	f04f 0900 	mov.w	r9, #0
 801ae26:	341a      	adds	r4, #26
 801ae28:	454d      	cmp	r5, r9
 801ae2a:	d11a      	bne.n	801ae62 <_printf_common+0xd6>
 801ae2c:	2000      	movs	r0, #0
 801ae2e:	e008      	b.n	801ae42 <_printf_common+0xb6>
 801ae30:	2301      	movs	r3, #1
 801ae32:	4652      	mov	r2, sl
 801ae34:	4639      	mov	r1, r7
 801ae36:	4630      	mov	r0, r6
 801ae38:	47c0      	blx	r8
 801ae3a:	3001      	adds	r0, #1
 801ae3c:	d103      	bne.n	801ae46 <_printf_common+0xba>
 801ae3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ae42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae46:	3501      	adds	r5, #1
 801ae48:	e7c3      	b.n	801add2 <_printf_common+0x46>
 801ae4a:	18e1      	adds	r1, r4, r3
 801ae4c:	1c5a      	adds	r2, r3, #1
 801ae4e:	2030      	movs	r0, #48	; 0x30
 801ae50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae54:	4422      	add	r2, r4
 801ae56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae5e:	3302      	adds	r3, #2
 801ae60:	e7c5      	b.n	801adee <_printf_common+0x62>
 801ae62:	2301      	movs	r3, #1
 801ae64:	4622      	mov	r2, r4
 801ae66:	4639      	mov	r1, r7
 801ae68:	4630      	mov	r0, r6
 801ae6a:	47c0      	blx	r8
 801ae6c:	3001      	adds	r0, #1
 801ae6e:	d0e6      	beq.n	801ae3e <_printf_common+0xb2>
 801ae70:	f109 0901 	add.w	r9, r9, #1
 801ae74:	e7d8      	b.n	801ae28 <_printf_common+0x9c>
	...

0801ae78 <_printf_i>:
 801ae78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ae7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ae80:	460c      	mov	r4, r1
 801ae82:	7e09      	ldrb	r1, [r1, #24]
 801ae84:	b085      	sub	sp, #20
 801ae86:	296e      	cmp	r1, #110	; 0x6e
 801ae88:	4617      	mov	r7, r2
 801ae8a:	4606      	mov	r6, r0
 801ae8c:	4698      	mov	r8, r3
 801ae8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ae90:	f000 80b3 	beq.w	801affa <_printf_i+0x182>
 801ae94:	d822      	bhi.n	801aedc <_printf_i+0x64>
 801ae96:	2963      	cmp	r1, #99	; 0x63
 801ae98:	d036      	beq.n	801af08 <_printf_i+0x90>
 801ae9a:	d80a      	bhi.n	801aeb2 <_printf_i+0x3a>
 801ae9c:	2900      	cmp	r1, #0
 801ae9e:	f000 80b9 	beq.w	801b014 <_printf_i+0x19c>
 801aea2:	2958      	cmp	r1, #88	; 0x58
 801aea4:	f000 8083 	beq.w	801afae <_printf_i+0x136>
 801aea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aeac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801aeb0:	e032      	b.n	801af18 <_printf_i+0xa0>
 801aeb2:	2964      	cmp	r1, #100	; 0x64
 801aeb4:	d001      	beq.n	801aeba <_printf_i+0x42>
 801aeb6:	2969      	cmp	r1, #105	; 0x69
 801aeb8:	d1f6      	bne.n	801aea8 <_printf_i+0x30>
 801aeba:	6820      	ldr	r0, [r4, #0]
 801aebc:	6813      	ldr	r3, [r2, #0]
 801aebe:	0605      	lsls	r5, r0, #24
 801aec0:	f103 0104 	add.w	r1, r3, #4
 801aec4:	d52a      	bpl.n	801af1c <_printf_i+0xa4>
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	6011      	str	r1, [r2, #0]
 801aeca:	2b00      	cmp	r3, #0
 801aecc:	da03      	bge.n	801aed6 <_printf_i+0x5e>
 801aece:	222d      	movs	r2, #45	; 0x2d
 801aed0:	425b      	negs	r3, r3
 801aed2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801aed6:	486f      	ldr	r0, [pc, #444]	; (801b094 <_printf_i+0x21c>)
 801aed8:	220a      	movs	r2, #10
 801aeda:	e039      	b.n	801af50 <_printf_i+0xd8>
 801aedc:	2973      	cmp	r1, #115	; 0x73
 801aede:	f000 809d 	beq.w	801b01c <_printf_i+0x1a4>
 801aee2:	d808      	bhi.n	801aef6 <_printf_i+0x7e>
 801aee4:	296f      	cmp	r1, #111	; 0x6f
 801aee6:	d020      	beq.n	801af2a <_printf_i+0xb2>
 801aee8:	2970      	cmp	r1, #112	; 0x70
 801aeea:	d1dd      	bne.n	801aea8 <_printf_i+0x30>
 801aeec:	6823      	ldr	r3, [r4, #0]
 801aeee:	f043 0320 	orr.w	r3, r3, #32
 801aef2:	6023      	str	r3, [r4, #0]
 801aef4:	e003      	b.n	801aefe <_printf_i+0x86>
 801aef6:	2975      	cmp	r1, #117	; 0x75
 801aef8:	d017      	beq.n	801af2a <_printf_i+0xb2>
 801aefa:	2978      	cmp	r1, #120	; 0x78
 801aefc:	d1d4      	bne.n	801aea8 <_printf_i+0x30>
 801aefe:	2378      	movs	r3, #120	; 0x78
 801af00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801af04:	4864      	ldr	r0, [pc, #400]	; (801b098 <_printf_i+0x220>)
 801af06:	e055      	b.n	801afb4 <_printf_i+0x13c>
 801af08:	6813      	ldr	r3, [r2, #0]
 801af0a:	1d19      	adds	r1, r3, #4
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	6011      	str	r1, [r2, #0]
 801af10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af18:	2301      	movs	r3, #1
 801af1a:	e08c      	b.n	801b036 <_printf_i+0x1be>
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	6011      	str	r1, [r2, #0]
 801af20:	f010 0f40 	tst.w	r0, #64	; 0x40
 801af24:	bf18      	it	ne
 801af26:	b21b      	sxthne	r3, r3
 801af28:	e7cf      	b.n	801aeca <_printf_i+0x52>
 801af2a:	6813      	ldr	r3, [r2, #0]
 801af2c:	6825      	ldr	r5, [r4, #0]
 801af2e:	1d18      	adds	r0, r3, #4
 801af30:	6010      	str	r0, [r2, #0]
 801af32:	0628      	lsls	r0, r5, #24
 801af34:	d501      	bpl.n	801af3a <_printf_i+0xc2>
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	e002      	b.n	801af40 <_printf_i+0xc8>
 801af3a:	0668      	lsls	r0, r5, #25
 801af3c:	d5fb      	bpl.n	801af36 <_printf_i+0xbe>
 801af3e:	881b      	ldrh	r3, [r3, #0]
 801af40:	4854      	ldr	r0, [pc, #336]	; (801b094 <_printf_i+0x21c>)
 801af42:	296f      	cmp	r1, #111	; 0x6f
 801af44:	bf14      	ite	ne
 801af46:	220a      	movne	r2, #10
 801af48:	2208      	moveq	r2, #8
 801af4a:	2100      	movs	r1, #0
 801af4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801af50:	6865      	ldr	r5, [r4, #4]
 801af52:	60a5      	str	r5, [r4, #8]
 801af54:	2d00      	cmp	r5, #0
 801af56:	f2c0 8095 	blt.w	801b084 <_printf_i+0x20c>
 801af5a:	6821      	ldr	r1, [r4, #0]
 801af5c:	f021 0104 	bic.w	r1, r1, #4
 801af60:	6021      	str	r1, [r4, #0]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d13d      	bne.n	801afe2 <_printf_i+0x16a>
 801af66:	2d00      	cmp	r5, #0
 801af68:	f040 808e 	bne.w	801b088 <_printf_i+0x210>
 801af6c:	4665      	mov	r5, ip
 801af6e:	2a08      	cmp	r2, #8
 801af70:	d10b      	bne.n	801af8a <_printf_i+0x112>
 801af72:	6823      	ldr	r3, [r4, #0]
 801af74:	07db      	lsls	r3, r3, #31
 801af76:	d508      	bpl.n	801af8a <_printf_i+0x112>
 801af78:	6923      	ldr	r3, [r4, #16]
 801af7a:	6862      	ldr	r2, [r4, #4]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	bfde      	ittt	le
 801af80:	2330      	movle	r3, #48	; 0x30
 801af82:	f805 3c01 	strble.w	r3, [r5, #-1]
 801af86:	f105 35ff 	addle.w	r5, r5, #4294967295
 801af8a:	ebac 0305 	sub.w	r3, ip, r5
 801af8e:	6123      	str	r3, [r4, #16]
 801af90:	f8cd 8000 	str.w	r8, [sp]
 801af94:	463b      	mov	r3, r7
 801af96:	aa03      	add	r2, sp, #12
 801af98:	4621      	mov	r1, r4
 801af9a:	4630      	mov	r0, r6
 801af9c:	f7ff fef6 	bl	801ad8c <_printf_common>
 801afa0:	3001      	adds	r0, #1
 801afa2:	d14d      	bne.n	801b040 <_printf_i+0x1c8>
 801afa4:	f04f 30ff 	mov.w	r0, #4294967295
 801afa8:	b005      	add	sp, #20
 801afaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801afae:	4839      	ldr	r0, [pc, #228]	; (801b094 <_printf_i+0x21c>)
 801afb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801afb4:	6813      	ldr	r3, [r2, #0]
 801afb6:	6821      	ldr	r1, [r4, #0]
 801afb8:	1d1d      	adds	r5, r3, #4
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	6015      	str	r5, [r2, #0]
 801afbe:	060a      	lsls	r2, r1, #24
 801afc0:	d50b      	bpl.n	801afda <_printf_i+0x162>
 801afc2:	07ca      	lsls	r2, r1, #31
 801afc4:	bf44      	itt	mi
 801afc6:	f041 0120 	orrmi.w	r1, r1, #32
 801afca:	6021      	strmi	r1, [r4, #0]
 801afcc:	b91b      	cbnz	r3, 801afd6 <_printf_i+0x15e>
 801afce:	6822      	ldr	r2, [r4, #0]
 801afd0:	f022 0220 	bic.w	r2, r2, #32
 801afd4:	6022      	str	r2, [r4, #0]
 801afd6:	2210      	movs	r2, #16
 801afd8:	e7b7      	b.n	801af4a <_printf_i+0xd2>
 801afda:	064d      	lsls	r5, r1, #25
 801afdc:	bf48      	it	mi
 801afde:	b29b      	uxthmi	r3, r3
 801afe0:	e7ef      	b.n	801afc2 <_printf_i+0x14a>
 801afe2:	4665      	mov	r5, ip
 801afe4:	fbb3 f1f2 	udiv	r1, r3, r2
 801afe8:	fb02 3311 	mls	r3, r2, r1, r3
 801afec:	5cc3      	ldrb	r3, [r0, r3]
 801afee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801aff2:	460b      	mov	r3, r1
 801aff4:	2900      	cmp	r1, #0
 801aff6:	d1f5      	bne.n	801afe4 <_printf_i+0x16c>
 801aff8:	e7b9      	b.n	801af6e <_printf_i+0xf6>
 801affa:	6813      	ldr	r3, [r2, #0]
 801affc:	6825      	ldr	r5, [r4, #0]
 801affe:	6961      	ldr	r1, [r4, #20]
 801b000:	1d18      	adds	r0, r3, #4
 801b002:	6010      	str	r0, [r2, #0]
 801b004:	0628      	lsls	r0, r5, #24
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	d501      	bpl.n	801b00e <_printf_i+0x196>
 801b00a:	6019      	str	r1, [r3, #0]
 801b00c:	e002      	b.n	801b014 <_printf_i+0x19c>
 801b00e:	066a      	lsls	r2, r5, #25
 801b010:	d5fb      	bpl.n	801b00a <_printf_i+0x192>
 801b012:	8019      	strh	r1, [r3, #0]
 801b014:	2300      	movs	r3, #0
 801b016:	6123      	str	r3, [r4, #16]
 801b018:	4665      	mov	r5, ip
 801b01a:	e7b9      	b.n	801af90 <_printf_i+0x118>
 801b01c:	6813      	ldr	r3, [r2, #0]
 801b01e:	1d19      	adds	r1, r3, #4
 801b020:	6011      	str	r1, [r2, #0]
 801b022:	681d      	ldr	r5, [r3, #0]
 801b024:	6862      	ldr	r2, [r4, #4]
 801b026:	2100      	movs	r1, #0
 801b028:	4628      	mov	r0, r5
 801b02a:	f7e5 f8f9 	bl	8000220 <memchr>
 801b02e:	b108      	cbz	r0, 801b034 <_printf_i+0x1bc>
 801b030:	1b40      	subs	r0, r0, r5
 801b032:	6060      	str	r0, [r4, #4]
 801b034:	6863      	ldr	r3, [r4, #4]
 801b036:	6123      	str	r3, [r4, #16]
 801b038:	2300      	movs	r3, #0
 801b03a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b03e:	e7a7      	b.n	801af90 <_printf_i+0x118>
 801b040:	6923      	ldr	r3, [r4, #16]
 801b042:	462a      	mov	r2, r5
 801b044:	4639      	mov	r1, r7
 801b046:	4630      	mov	r0, r6
 801b048:	47c0      	blx	r8
 801b04a:	3001      	adds	r0, #1
 801b04c:	d0aa      	beq.n	801afa4 <_printf_i+0x12c>
 801b04e:	6823      	ldr	r3, [r4, #0]
 801b050:	079b      	lsls	r3, r3, #30
 801b052:	d413      	bmi.n	801b07c <_printf_i+0x204>
 801b054:	68e0      	ldr	r0, [r4, #12]
 801b056:	9b03      	ldr	r3, [sp, #12]
 801b058:	4298      	cmp	r0, r3
 801b05a:	bfb8      	it	lt
 801b05c:	4618      	movlt	r0, r3
 801b05e:	e7a3      	b.n	801afa8 <_printf_i+0x130>
 801b060:	2301      	movs	r3, #1
 801b062:	464a      	mov	r2, r9
 801b064:	4639      	mov	r1, r7
 801b066:	4630      	mov	r0, r6
 801b068:	47c0      	blx	r8
 801b06a:	3001      	adds	r0, #1
 801b06c:	d09a      	beq.n	801afa4 <_printf_i+0x12c>
 801b06e:	3501      	adds	r5, #1
 801b070:	68e3      	ldr	r3, [r4, #12]
 801b072:	9a03      	ldr	r2, [sp, #12]
 801b074:	1a9b      	subs	r3, r3, r2
 801b076:	42ab      	cmp	r3, r5
 801b078:	dcf2      	bgt.n	801b060 <_printf_i+0x1e8>
 801b07a:	e7eb      	b.n	801b054 <_printf_i+0x1dc>
 801b07c:	2500      	movs	r5, #0
 801b07e:	f104 0919 	add.w	r9, r4, #25
 801b082:	e7f5      	b.n	801b070 <_printf_i+0x1f8>
 801b084:	2b00      	cmp	r3, #0
 801b086:	d1ac      	bne.n	801afe2 <_printf_i+0x16a>
 801b088:	7803      	ldrb	r3, [r0, #0]
 801b08a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b08e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b092:	e76c      	b.n	801af6e <_printf_i+0xf6>
 801b094:	0801db29 	.word	0x0801db29
 801b098:	0801db3a 	.word	0x0801db3a

0801b09c <memmove>:
 801b09c:	4288      	cmp	r0, r1
 801b09e:	b510      	push	{r4, lr}
 801b0a0:	eb01 0302 	add.w	r3, r1, r2
 801b0a4:	d807      	bhi.n	801b0b6 <memmove+0x1a>
 801b0a6:	1e42      	subs	r2, r0, #1
 801b0a8:	4299      	cmp	r1, r3
 801b0aa:	d00a      	beq.n	801b0c2 <memmove+0x26>
 801b0ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b0b0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801b0b4:	e7f8      	b.n	801b0a8 <memmove+0xc>
 801b0b6:	4283      	cmp	r3, r0
 801b0b8:	d9f5      	bls.n	801b0a6 <memmove+0xa>
 801b0ba:	1881      	adds	r1, r0, r2
 801b0bc:	1ad2      	subs	r2, r2, r3
 801b0be:	42d3      	cmn	r3, r2
 801b0c0:	d100      	bne.n	801b0c4 <memmove+0x28>
 801b0c2:	bd10      	pop	{r4, pc}
 801b0c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b0c8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801b0cc:	e7f7      	b.n	801b0be <memmove+0x22>

0801b0ce <_realloc_r>:
 801b0ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0d0:	4607      	mov	r7, r0
 801b0d2:	4614      	mov	r4, r2
 801b0d4:	460e      	mov	r6, r1
 801b0d6:	b921      	cbnz	r1, 801b0e2 <_realloc_r+0x14>
 801b0d8:	4611      	mov	r1, r2
 801b0da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b0de:	f7ff bc63 	b.w	801a9a8 <_malloc_r>
 801b0e2:	b922      	cbnz	r2, 801b0ee <_realloc_r+0x20>
 801b0e4:	f7ff fc12 	bl	801a90c <_free_r>
 801b0e8:	4625      	mov	r5, r4
 801b0ea:	4628      	mov	r0, r5
 801b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0ee:	f000 f814 	bl	801b11a <_malloc_usable_size_r>
 801b0f2:	42a0      	cmp	r0, r4
 801b0f4:	d20f      	bcs.n	801b116 <_realloc_r+0x48>
 801b0f6:	4621      	mov	r1, r4
 801b0f8:	4638      	mov	r0, r7
 801b0fa:	f7ff fc55 	bl	801a9a8 <_malloc_r>
 801b0fe:	4605      	mov	r5, r0
 801b100:	2800      	cmp	r0, #0
 801b102:	d0f2      	beq.n	801b0ea <_realloc_r+0x1c>
 801b104:	4631      	mov	r1, r6
 801b106:	4622      	mov	r2, r4
 801b108:	f7ff fbec 	bl	801a8e4 <memcpy>
 801b10c:	4631      	mov	r1, r6
 801b10e:	4638      	mov	r0, r7
 801b110:	f7ff fbfc 	bl	801a90c <_free_r>
 801b114:	e7e9      	b.n	801b0ea <_realloc_r+0x1c>
 801b116:	4635      	mov	r5, r6
 801b118:	e7e7      	b.n	801b0ea <_realloc_r+0x1c>

0801b11a <_malloc_usable_size_r>:
 801b11a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b11e:	1f18      	subs	r0, r3, #4
 801b120:	2b00      	cmp	r3, #0
 801b122:	bfbc      	itt	lt
 801b124:	580b      	ldrlt	r3, [r1, r0]
 801b126:	18c0      	addlt	r0, r0, r3
 801b128:	4770      	bx	lr

0801b12a <fmaxf>:
 801b12a:	b508      	push	{r3, lr}
 801b12c:	ed2d 8b02 	vpush	{d8}
 801b130:	eeb0 8a40 	vmov.f32	s16, s0
 801b134:	eef0 8a60 	vmov.f32	s17, s1
 801b138:	f000 f82e 	bl	801b198 <__fpclassifyf>
 801b13c:	b148      	cbz	r0, 801b152 <fmaxf+0x28>
 801b13e:	eeb0 0a68 	vmov.f32	s0, s17
 801b142:	f000 f829 	bl	801b198 <__fpclassifyf>
 801b146:	b130      	cbz	r0, 801b156 <fmaxf+0x2c>
 801b148:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b150:	dc01      	bgt.n	801b156 <fmaxf+0x2c>
 801b152:	eeb0 8a68 	vmov.f32	s16, s17
 801b156:	eeb0 0a48 	vmov.f32	s0, s16
 801b15a:	ecbd 8b02 	vpop	{d8}
 801b15e:	bd08      	pop	{r3, pc}

0801b160 <fminf>:
 801b160:	b508      	push	{r3, lr}
 801b162:	ed2d 8b02 	vpush	{d8}
 801b166:	eeb0 8a40 	vmov.f32	s16, s0
 801b16a:	eef0 8a60 	vmov.f32	s17, s1
 801b16e:	f000 f813 	bl	801b198 <__fpclassifyf>
 801b172:	b148      	cbz	r0, 801b188 <fminf+0x28>
 801b174:	eeb0 0a68 	vmov.f32	s0, s17
 801b178:	f000 f80e 	bl	801b198 <__fpclassifyf>
 801b17c:	b130      	cbz	r0, 801b18c <fminf+0x2c>
 801b17e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b186:	d401      	bmi.n	801b18c <fminf+0x2c>
 801b188:	eeb0 8a68 	vmov.f32	s16, s17
 801b18c:	eeb0 0a48 	vmov.f32	s0, s16
 801b190:	ecbd 8b02 	vpop	{d8}
 801b194:	bd08      	pop	{r3, pc}
	...

0801b198 <__fpclassifyf>:
 801b198:	ee10 3a10 	vmov	r3, s0
 801b19c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801b1a0:	d00d      	beq.n	801b1be <__fpclassifyf+0x26>
 801b1a2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801b1a6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801b1aa:	d30a      	bcc.n	801b1c2 <__fpclassifyf+0x2a>
 801b1ac:	4b07      	ldr	r3, [pc, #28]	; (801b1cc <__fpclassifyf+0x34>)
 801b1ae:	1e42      	subs	r2, r0, #1
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	d908      	bls.n	801b1c6 <__fpclassifyf+0x2e>
 801b1b4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801b1b8:	4258      	negs	r0, r3
 801b1ba:	4158      	adcs	r0, r3
 801b1bc:	4770      	bx	lr
 801b1be:	2002      	movs	r0, #2
 801b1c0:	4770      	bx	lr
 801b1c2:	2004      	movs	r0, #4
 801b1c4:	4770      	bx	lr
 801b1c6:	2003      	movs	r0, #3
 801b1c8:	4770      	bx	lr
 801b1ca:	bf00      	nop
 801b1cc:	007ffffe 	.word	0x007ffffe

0801b1d0 <pow>:
 801b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d4:	ed2d 8b04 	vpush	{d8-d9}
 801b1d8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b4ac <pow+0x2dc>
 801b1dc:	b08d      	sub	sp, #52	; 0x34
 801b1de:	ec57 6b10 	vmov	r6, r7, d0
 801b1e2:	ec55 4b11 	vmov	r4, r5, d1
 801b1e6:	f000 fb73 	bl	801b8d0 <__ieee754_pow>
 801b1ea:	f999 3000 	ldrsb.w	r3, [r9]
 801b1ee:	9300      	str	r3, [sp, #0]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	eeb0 8a40 	vmov.f32	s16, s0
 801b1f6:	eef0 8a60 	vmov.f32	s17, s1
 801b1fa:	46c8      	mov	r8, r9
 801b1fc:	d05f      	beq.n	801b2be <pow+0xee>
 801b1fe:	4622      	mov	r2, r4
 801b200:	462b      	mov	r3, r5
 801b202:	4620      	mov	r0, r4
 801b204:	4629      	mov	r1, r5
 801b206:	f7e5 fcb1 	bl	8000b6c <__aeabi_dcmpun>
 801b20a:	4683      	mov	fp, r0
 801b20c:	2800      	cmp	r0, #0
 801b20e:	d156      	bne.n	801b2be <pow+0xee>
 801b210:	4632      	mov	r2, r6
 801b212:	463b      	mov	r3, r7
 801b214:	4630      	mov	r0, r6
 801b216:	4639      	mov	r1, r7
 801b218:	f7e5 fca8 	bl	8000b6c <__aeabi_dcmpun>
 801b21c:	9001      	str	r0, [sp, #4]
 801b21e:	b1e8      	cbz	r0, 801b25c <pow+0x8c>
 801b220:	2200      	movs	r2, #0
 801b222:	2300      	movs	r3, #0
 801b224:	4620      	mov	r0, r4
 801b226:	4629      	mov	r1, r5
 801b228:	f7e5 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 801b22c:	2800      	cmp	r0, #0
 801b22e:	d046      	beq.n	801b2be <pow+0xee>
 801b230:	2301      	movs	r3, #1
 801b232:	9302      	str	r3, [sp, #8]
 801b234:	4b96      	ldr	r3, [pc, #600]	; (801b490 <pow+0x2c0>)
 801b236:	9303      	str	r3, [sp, #12]
 801b238:	4b96      	ldr	r3, [pc, #600]	; (801b494 <pow+0x2c4>)
 801b23a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b23e:	2200      	movs	r2, #0
 801b240:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b244:	9b00      	ldr	r3, [sp, #0]
 801b246:	2b02      	cmp	r3, #2
 801b248:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b24c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b250:	d033      	beq.n	801b2ba <pow+0xea>
 801b252:	a802      	add	r0, sp, #8
 801b254:	f001 fbce 	bl	801c9f4 <matherr>
 801b258:	bb48      	cbnz	r0, 801b2ae <pow+0xde>
 801b25a:	e05d      	b.n	801b318 <pow+0x148>
 801b25c:	f04f 0a00 	mov.w	sl, #0
 801b260:	f04f 0b00 	mov.w	fp, #0
 801b264:	4652      	mov	r2, sl
 801b266:	465b      	mov	r3, fp
 801b268:	4630      	mov	r0, r6
 801b26a:	4639      	mov	r1, r7
 801b26c:	f7e5 fc4c 	bl	8000b08 <__aeabi_dcmpeq>
 801b270:	ec4b ab19 	vmov	d9, sl, fp
 801b274:	2800      	cmp	r0, #0
 801b276:	d054      	beq.n	801b322 <pow+0x152>
 801b278:	4652      	mov	r2, sl
 801b27a:	465b      	mov	r3, fp
 801b27c:	4620      	mov	r0, r4
 801b27e:	4629      	mov	r1, r5
 801b280:	f7e5 fc42 	bl	8000b08 <__aeabi_dcmpeq>
 801b284:	4680      	mov	r8, r0
 801b286:	b318      	cbz	r0, 801b2d0 <pow+0x100>
 801b288:	2301      	movs	r3, #1
 801b28a:	9302      	str	r3, [sp, #8]
 801b28c:	4b80      	ldr	r3, [pc, #512]	; (801b490 <pow+0x2c0>)
 801b28e:	9303      	str	r3, [sp, #12]
 801b290:	9b01      	ldr	r3, [sp, #4]
 801b292:	930a      	str	r3, [sp, #40]	; 0x28
 801b294:	9b00      	ldr	r3, [sp, #0]
 801b296:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b29a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b29e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d0d5      	beq.n	801b252 <pow+0x82>
 801b2a6:	4b7b      	ldr	r3, [pc, #492]	; (801b494 <pow+0x2c4>)
 801b2a8:	2200      	movs	r2, #0
 801b2aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2b0:	b11b      	cbz	r3, 801b2ba <pow+0xea>
 801b2b2:	f7ff fadd 	bl	801a870 <__errno>
 801b2b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2b8:	6003      	str	r3, [r0, #0]
 801b2ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b2be:	eeb0 0a48 	vmov.f32	s0, s16
 801b2c2:	eef0 0a68 	vmov.f32	s1, s17
 801b2c6:	b00d      	add	sp, #52	; 0x34
 801b2c8:	ecbd 8b04 	vpop	{d8-d9}
 801b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2d0:	ec45 4b10 	vmov	d0, r4, r5
 801b2d4:	f001 fb86 	bl	801c9e4 <finite>
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	d0f0      	beq.n	801b2be <pow+0xee>
 801b2dc:	4652      	mov	r2, sl
 801b2de:	465b      	mov	r3, fp
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	4629      	mov	r1, r5
 801b2e4:	f7e5 fc1a 	bl	8000b1c <__aeabi_dcmplt>
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	d0e8      	beq.n	801b2be <pow+0xee>
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	9302      	str	r3, [sp, #8]
 801b2f0:	4b67      	ldr	r3, [pc, #412]	; (801b490 <pow+0x2c0>)
 801b2f2:	9303      	str	r3, [sp, #12]
 801b2f4:	f999 3000 	ldrsb.w	r3, [r9]
 801b2f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b2fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b300:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b304:	b913      	cbnz	r3, 801b30c <pow+0x13c>
 801b306:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b30a:	e7a2      	b.n	801b252 <pow+0x82>
 801b30c:	4962      	ldr	r1, [pc, #392]	; (801b498 <pow+0x2c8>)
 801b30e:	2000      	movs	r0, #0
 801b310:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b314:	2b02      	cmp	r3, #2
 801b316:	d19c      	bne.n	801b252 <pow+0x82>
 801b318:	f7ff faaa 	bl	801a870 <__errno>
 801b31c:	2321      	movs	r3, #33	; 0x21
 801b31e:	6003      	str	r3, [r0, #0]
 801b320:	e7c5      	b.n	801b2ae <pow+0xde>
 801b322:	eeb0 0a48 	vmov.f32	s0, s16
 801b326:	eef0 0a68 	vmov.f32	s1, s17
 801b32a:	f001 fb5b 	bl	801c9e4 <finite>
 801b32e:	9000      	str	r0, [sp, #0]
 801b330:	2800      	cmp	r0, #0
 801b332:	f040 8081 	bne.w	801b438 <pow+0x268>
 801b336:	ec47 6b10 	vmov	d0, r6, r7
 801b33a:	f001 fb53 	bl	801c9e4 <finite>
 801b33e:	2800      	cmp	r0, #0
 801b340:	d07a      	beq.n	801b438 <pow+0x268>
 801b342:	ec45 4b10 	vmov	d0, r4, r5
 801b346:	f001 fb4d 	bl	801c9e4 <finite>
 801b34a:	2800      	cmp	r0, #0
 801b34c:	d074      	beq.n	801b438 <pow+0x268>
 801b34e:	ec53 2b18 	vmov	r2, r3, d8
 801b352:	ee18 0a10 	vmov	r0, s16
 801b356:	4619      	mov	r1, r3
 801b358:	f7e5 fc08 	bl	8000b6c <__aeabi_dcmpun>
 801b35c:	f999 9000 	ldrsb.w	r9, [r9]
 801b360:	4b4b      	ldr	r3, [pc, #300]	; (801b490 <pow+0x2c0>)
 801b362:	b1b0      	cbz	r0, 801b392 <pow+0x1c2>
 801b364:	2201      	movs	r2, #1
 801b366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b36a:	9b00      	ldr	r3, [sp, #0]
 801b36c:	930a      	str	r3, [sp, #40]	; 0x28
 801b36e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b372:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b376:	f1b9 0f00 	cmp.w	r9, #0
 801b37a:	d0c4      	beq.n	801b306 <pow+0x136>
 801b37c:	4652      	mov	r2, sl
 801b37e:	465b      	mov	r3, fp
 801b380:	4650      	mov	r0, sl
 801b382:	4659      	mov	r1, fp
 801b384:	f7e5 fa82 	bl	800088c <__aeabi_ddiv>
 801b388:	f1b9 0f02 	cmp.w	r9, #2
 801b38c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b390:	e7c1      	b.n	801b316 <pow+0x146>
 801b392:	2203      	movs	r2, #3
 801b394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b398:	900a      	str	r0, [sp, #40]	; 0x28
 801b39a:	4629      	mov	r1, r5
 801b39c:	4620      	mov	r0, r4
 801b39e:	2200      	movs	r2, #0
 801b3a0:	4b3e      	ldr	r3, [pc, #248]	; (801b49c <pow+0x2cc>)
 801b3a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b3a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b3aa:	f7e5 f945 	bl	8000638 <__aeabi_dmul>
 801b3ae:	4604      	mov	r4, r0
 801b3b0:	460d      	mov	r5, r1
 801b3b2:	f1b9 0f00 	cmp.w	r9, #0
 801b3b6:	d124      	bne.n	801b402 <pow+0x232>
 801b3b8:	4b39      	ldr	r3, [pc, #228]	; (801b4a0 <pow+0x2d0>)
 801b3ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b3be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b3c2:	4630      	mov	r0, r6
 801b3c4:	4652      	mov	r2, sl
 801b3c6:	465b      	mov	r3, fp
 801b3c8:	4639      	mov	r1, r7
 801b3ca:	f7e5 fba7 	bl	8000b1c <__aeabi_dcmplt>
 801b3ce:	2800      	cmp	r0, #0
 801b3d0:	d056      	beq.n	801b480 <pow+0x2b0>
 801b3d2:	ec45 4b10 	vmov	d0, r4, r5
 801b3d6:	f001 fb17 	bl	801ca08 <rint>
 801b3da:	4622      	mov	r2, r4
 801b3dc:	462b      	mov	r3, r5
 801b3de:	ec51 0b10 	vmov	r0, r1, d0
 801b3e2:	f7e5 fb91 	bl	8000b08 <__aeabi_dcmpeq>
 801b3e6:	b920      	cbnz	r0, 801b3f2 <pow+0x222>
 801b3e8:	4b2e      	ldr	r3, [pc, #184]	; (801b4a4 <pow+0x2d4>)
 801b3ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b3ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b3f2:	f998 3000 	ldrsb.w	r3, [r8]
 801b3f6:	2b02      	cmp	r3, #2
 801b3f8:	d142      	bne.n	801b480 <pow+0x2b0>
 801b3fa:	f7ff fa39 	bl	801a870 <__errno>
 801b3fe:	2322      	movs	r3, #34	; 0x22
 801b400:	e78d      	b.n	801b31e <pow+0x14e>
 801b402:	4b29      	ldr	r3, [pc, #164]	; (801b4a8 <pow+0x2d8>)
 801b404:	2200      	movs	r2, #0
 801b406:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b40a:	4630      	mov	r0, r6
 801b40c:	4652      	mov	r2, sl
 801b40e:	465b      	mov	r3, fp
 801b410:	4639      	mov	r1, r7
 801b412:	f7e5 fb83 	bl	8000b1c <__aeabi_dcmplt>
 801b416:	2800      	cmp	r0, #0
 801b418:	d0eb      	beq.n	801b3f2 <pow+0x222>
 801b41a:	ec45 4b10 	vmov	d0, r4, r5
 801b41e:	f001 faf3 	bl	801ca08 <rint>
 801b422:	4622      	mov	r2, r4
 801b424:	462b      	mov	r3, r5
 801b426:	ec51 0b10 	vmov	r0, r1, d0
 801b42a:	f7e5 fb6d 	bl	8000b08 <__aeabi_dcmpeq>
 801b42e:	2800      	cmp	r0, #0
 801b430:	d1df      	bne.n	801b3f2 <pow+0x222>
 801b432:	2200      	movs	r2, #0
 801b434:	4b18      	ldr	r3, [pc, #96]	; (801b498 <pow+0x2c8>)
 801b436:	e7da      	b.n	801b3ee <pow+0x21e>
 801b438:	2200      	movs	r2, #0
 801b43a:	2300      	movs	r3, #0
 801b43c:	ec51 0b18 	vmov	r0, r1, d8
 801b440:	f7e5 fb62 	bl	8000b08 <__aeabi_dcmpeq>
 801b444:	2800      	cmp	r0, #0
 801b446:	f43f af3a 	beq.w	801b2be <pow+0xee>
 801b44a:	ec47 6b10 	vmov	d0, r6, r7
 801b44e:	f001 fac9 	bl	801c9e4 <finite>
 801b452:	2800      	cmp	r0, #0
 801b454:	f43f af33 	beq.w	801b2be <pow+0xee>
 801b458:	ec45 4b10 	vmov	d0, r4, r5
 801b45c:	f001 fac2 	bl	801c9e4 <finite>
 801b460:	2800      	cmp	r0, #0
 801b462:	f43f af2c 	beq.w	801b2be <pow+0xee>
 801b466:	2304      	movs	r3, #4
 801b468:	9302      	str	r3, [sp, #8]
 801b46a:	4b09      	ldr	r3, [pc, #36]	; (801b490 <pow+0x2c0>)
 801b46c:	9303      	str	r3, [sp, #12]
 801b46e:	2300      	movs	r3, #0
 801b470:	930a      	str	r3, [sp, #40]	; 0x28
 801b472:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b476:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b47a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b47e:	e7b8      	b.n	801b3f2 <pow+0x222>
 801b480:	a802      	add	r0, sp, #8
 801b482:	f001 fab7 	bl	801c9f4 <matherr>
 801b486:	2800      	cmp	r0, #0
 801b488:	f47f af11 	bne.w	801b2ae <pow+0xde>
 801b48c:	e7b5      	b.n	801b3fa <pow+0x22a>
 801b48e:	bf00      	nop
 801b490:	0801dbac 	.word	0x0801dbac
 801b494:	3ff00000 	.word	0x3ff00000
 801b498:	fff00000 	.word	0xfff00000
 801b49c:	3fe00000 	.word	0x3fe00000
 801b4a0:	47efffff 	.word	0x47efffff
 801b4a4:	c7efffff 	.word	0xc7efffff
 801b4a8:	7ff00000 	.word	0x7ff00000
 801b4ac:	200001f8 	.word	0x200001f8

0801b4b0 <sqrt>:
 801b4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b4b4:	ed2d 8b02 	vpush	{d8}
 801b4b8:	b08b      	sub	sp, #44	; 0x2c
 801b4ba:	ec55 4b10 	vmov	r4, r5, d0
 801b4be:	f000 ff15 	bl	801c2ec <__ieee754_sqrt>
 801b4c2:	4b26      	ldr	r3, [pc, #152]	; (801b55c <sqrt+0xac>)
 801b4c4:	eeb0 8a40 	vmov.f32	s16, s0
 801b4c8:	eef0 8a60 	vmov.f32	s17, s1
 801b4cc:	f993 6000 	ldrsb.w	r6, [r3]
 801b4d0:	1c73      	adds	r3, r6, #1
 801b4d2:	d02a      	beq.n	801b52a <sqrt+0x7a>
 801b4d4:	4622      	mov	r2, r4
 801b4d6:	462b      	mov	r3, r5
 801b4d8:	4620      	mov	r0, r4
 801b4da:	4629      	mov	r1, r5
 801b4dc:	f7e5 fb46 	bl	8000b6c <__aeabi_dcmpun>
 801b4e0:	4607      	mov	r7, r0
 801b4e2:	bb10      	cbnz	r0, 801b52a <sqrt+0x7a>
 801b4e4:	f04f 0800 	mov.w	r8, #0
 801b4e8:	f04f 0900 	mov.w	r9, #0
 801b4ec:	4642      	mov	r2, r8
 801b4ee:	464b      	mov	r3, r9
 801b4f0:	4620      	mov	r0, r4
 801b4f2:	4629      	mov	r1, r5
 801b4f4:	f7e5 fb12 	bl	8000b1c <__aeabi_dcmplt>
 801b4f8:	b1b8      	cbz	r0, 801b52a <sqrt+0x7a>
 801b4fa:	2301      	movs	r3, #1
 801b4fc:	9300      	str	r3, [sp, #0]
 801b4fe:	4b18      	ldr	r3, [pc, #96]	; (801b560 <sqrt+0xb0>)
 801b500:	9301      	str	r3, [sp, #4]
 801b502:	9708      	str	r7, [sp, #32]
 801b504:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b508:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b50c:	b9b6      	cbnz	r6, 801b53c <sqrt+0x8c>
 801b50e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801b512:	4668      	mov	r0, sp
 801b514:	f001 fa6e 	bl	801c9f4 <matherr>
 801b518:	b1d0      	cbz	r0, 801b550 <sqrt+0xa0>
 801b51a:	9b08      	ldr	r3, [sp, #32]
 801b51c:	b11b      	cbz	r3, 801b526 <sqrt+0x76>
 801b51e:	f7ff f9a7 	bl	801a870 <__errno>
 801b522:	9b08      	ldr	r3, [sp, #32]
 801b524:	6003      	str	r3, [r0, #0]
 801b526:	ed9d 8b06 	vldr	d8, [sp, #24]
 801b52a:	eeb0 0a48 	vmov.f32	s0, s16
 801b52e:	eef0 0a68 	vmov.f32	s1, s17
 801b532:	b00b      	add	sp, #44	; 0x2c
 801b534:	ecbd 8b02 	vpop	{d8}
 801b538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b53c:	4642      	mov	r2, r8
 801b53e:	464b      	mov	r3, r9
 801b540:	4640      	mov	r0, r8
 801b542:	4649      	mov	r1, r9
 801b544:	f7e5 f9a2 	bl	800088c <__aeabi_ddiv>
 801b548:	2e02      	cmp	r6, #2
 801b54a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b54e:	d1e0      	bne.n	801b512 <sqrt+0x62>
 801b550:	f7ff f98e 	bl	801a870 <__errno>
 801b554:	2321      	movs	r3, #33	; 0x21
 801b556:	6003      	str	r3, [r0, #0]
 801b558:	e7df      	b.n	801b51a <sqrt+0x6a>
 801b55a:	bf00      	nop
 801b55c:	200001f8 	.word	0x200001f8
 801b560:	0801dbb0 	.word	0x0801dbb0

0801b564 <powf>:
 801b564:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801b568:	ed2d 8b04 	vpush	{d8-d9}
 801b56c:	4ca7      	ldr	r4, [pc, #668]	; (801b80c <powf+0x2a8>)
 801b56e:	b08a      	sub	sp, #40	; 0x28
 801b570:	eef0 8a40 	vmov.f32	s17, s0
 801b574:	eeb0 8a60 	vmov.f32	s16, s1
 801b578:	f000 ff68 	bl	801c44c <__ieee754_powf>
 801b57c:	f994 5000 	ldrsb.w	r5, [r4]
 801b580:	1c6b      	adds	r3, r5, #1
 801b582:	eeb0 9a40 	vmov.f32	s18, s0
 801b586:	4626      	mov	r6, r4
 801b588:	d05f      	beq.n	801b64a <powf+0xe6>
 801b58a:	eeb4 8a48 	vcmp.f32	s16, s16
 801b58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b592:	d65a      	bvs.n	801b64a <powf+0xe6>
 801b594:	eef4 8a68 	vcmp.f32	s17, s17
 801b598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59c:	d721      	bvc.n	801b5e2 <powf+0x7e>
 801b59e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5a6:	d150      	bne.n	801b64a <powf+0xe6>
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	9300      	str	r3, [sp, #0]
 801b5ac:	4b98      	ldr	r3, [pc, #608]	; (801b810 <powf+0x2ac>)
 801b5ae:	9301      	str	r3, [sp, #4]
 801b5b0:	ee18 0a90 	vmov	r0, s17
 801b5b4:	2300      	movs	r3, #0
 801b5b6:	9308      	str	r3, [sp, #32]
 801b5b8:	f7e4 ffe6 	bl	8000588 <__aeabi_f2d>
 801b5bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5c0:	ee18 0a10 	vmov	r0, s16
 801b5c4:	f7e4 ffe0 	bl	8000588 <__aeabi_f2d>
 801b5c8:	4b92      	ldr	r3, [pc, #584]	; (801b814 <powf+0x2b0>)
 801b5ca:	2200      	movs	r2, #0
 801b5cc:	2d02      	cmp	r5, #2
 801b5ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b5d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b5d6:	d032      	beq.n	801b63e <powf+0xda>
 801b5d8:	4668      	mov	r0, sp
 801b5da:	f001 fa0b 	bl	801c9f4 <matherr>
 801b5de:	bb40      	cbnz	r0, 801b632 <powf+0xce>
 801b5e0:	e065      	b.n	801b6ae <powf+0x14a>
 801b5e2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801b818 <powf+0x2b4>
 801b5e6:	eef4 8a69 	vcmp.f32	s17, s19
 801b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5ee:	d163      	bne.n	801b6b8 <powf+0x154>
 801b5f0:	eeb4 8a69 	vcmp.f32	s16, s19
 801b5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5f8:	d12e      	bne.n	801b658 <powf+0xf4>
 801b5fa:	2301      	movs	r3, #1
 801b5fc:	9300      	str	r3, [sp, #0]
 801b5fe:	4b84      	ldr	r3, [pc, #528]	; (801b810 <powf+0x2ac>)
 801b600:	9301      	str	r3, [sp, #4]
 801b602:	ee18 0a90 	vmov	r0, s17
 801b606:	2300      	movs	r3, #0
 801b608:	9308      	str	r3, [sp, #32]
 801b60a:	f7e4 ffbd 	bl	8000588 <__aeabi_f2d>
 801b60e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b612:	ee18 0a10 	vmov	r0, s16
 801b616:	f7e4 ffb7 	bl	8000588 <__aeabi_f2d>
 801b61a:	2200      	movs	r2, #0
 801b61c:	2300      	movs	r3, #0
 801b61e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b626:	2d00      	cmp	r5, #0
 801b628:	d0d6      	beq.n	801b5d8 <powf+0x74>
 801b62a:	4b7a      	ldr	r3, [pc, #488]	; (801b814 <powf+0x2b0>)
 801b62c:	2200      	movs	r2, #0
 801b62e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b632:	9b08      	ldr	r3, [sp, #32]
 801b634:	b11b      	cbz	r3, 801b63e <powf+0xda>
 801b636:	f7ff f91b 	bl	801a870 <__errno>
 801b63a:	9b08      	ldr	r3, [sp, #32]
 801b63c:	6003      	str	r3, [r0, #0]
 801b63e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b642:	f7e5 fac9 	bl	8000bd8 <__aeabi_d2f>
 801b646:	ee09 0a10 	vmov	s18, r0
 801b64a:	eeb0 0a49 	vmov.f32	s0, s18
 801b64e:	b00a      	add	sp, #40	; 0x28
 801b650:	ecbd 8b04 	vpop	{d8-d9}
 801b654:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801b658:	eeb0 0a48 	vmov.f32	s0, s16
 801b65c:	f001 fad5 	bl	801cc0a <finitef>
 801b660:	2800      	cmp	r0, #0
 801b662:	d0f2      	beq.n	801b64a <powf+0xe6>
 801b664:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b66c:	d5ed      	bpl.n	801b64a <powf+0xe6>
 801b66e:	2301      	movs	r3, #1
 801b670:	9300      	str	r3, [sp, #0]
 801b672:	4b67      	ldr	r3, [pc, #412]	; (801b810 <powf+0x2ac>)
 801b674:	9301      	str	r3, [sp, #4]
 801b676:	ee18 0a90 	vmov	r0, s17
 801b67a:	2300      	movs	r3, #0
 801b67c:	9308      	str	r3, [sp, #32]
 801b67e:	f7e4 ff83 	bl	8000588 <__aeabi_f2d>
 801b682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b686:	ee18 0a10 	vmov	r0, s16
 801b68a:	f7e4 ff7d 	bl	8000588 <__aeabi_f2d>
 801b68e:	f994 3000 	ldrsb.w	r3, [r4]
 801b692:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b696:	b923      	cbnz	r3, 801b6a2 <powf+0x13e>
 801b698:	2200      	movs	r2, #0
 801b69a:	2300      	movs	r3, #0
 801b69c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b6a0:	e79a      	b.n	801b5d8 <powf+0x74>
 801b6a2:	495e      	ldr	r1, [pc, #376]	; (801b81c <powf+0x2b8>)
 801b6a4:	2000      	movs	r0, #0
 801b6a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b6aa:	2b02      	cmp	r3, #2
 801b6ac:	d194      	bne.n	801b5d8 <powf+0x74>
 801b6ae:	f7ff f8df 	bl	801a870 <__errno>
 801b6b2:	2321      	movs	r3, #33	; 0x21
 801b6b4:	6003      	str	r3, [r0, #0]
 801b6b6:	e7bc      	b.n	801b632 <powf+0xce>
 801b6b8:	f001 faa7 	bl	801cc0a <finitef>
 801b6bc:	4605      	mov	r5, r0
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	d173      	bne.n	801b7aa <powf+0x246>
 801b6c2:	eeb0 0a68 	vmov.f32	s0, s17
 801b6c6:	f001 faa0 	bl	801cc0a <finitef>
 801b6ca:	2800      	cmp	r0, #0
 801b6cc:	d06d      	beq.n	801b7aa <powf+0x246>
 801b6ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b6d2:	f001 fa9a 	bl	801cc0a <finitef>
 801b6d6:	2800      	cmp	r0, #0
 801b6d8:	d067      	beq.n	801b7aa <powf+0x246>
 801b6da:	ee18 0a90 	vmov	r0, s17
 801b6de:	f7e4 ff53 	bl	8000588 <__aeabi_f2d>
 801b6e2:	4680      	mov	r8, r0
 801b6e4:	ee18 0a10 	vmov	r0, s16
 801b6e8:	4689      	mov	r9, r1
 801b6ea:	f7e4 ff4d 	bl	8000588 <__aeabi_f2d>
 801b6ee:	eeb4 9a49 	vcmp.f32	s18, s18
 801b6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6f6:	f994 4000 	ldrsb.w	r4, [r4]
 801b6fa:	4b45      	ldr	r3, [pc, #276]	; (801b810 <powf+0x2ac>)
 801b6fc:	d713      	bvc.n	801b726 <powf+0x1c2>
 801b6fe:	2201      	movs	r2, #1
 801b700:	e9cd 2300 	strd	r2, r3, [sp]
 801b704:	9508      	str	r5, [sp, #32]
 801b706:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b70a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b70e:	2c00      	cmp	r4, #0
 801b710:	d0c2      	beq.n	801b698 <powf+0x134>
 801b712:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801b716:	ee17 0a90 	vmov	r0, s15
 801b71a:	f7e4 ff35 	bl	8000588 <__aeabi_f2d>
 801b71e:	2c02      	cmp	r4, #2
 801b720:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b724:	e7c2      	b.n	801b6ac <powf+0x148>
 801b726:	2203      	movs	r2, #3
 801b728:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b72c:	e9cd 2300 	strd	r2, r3, [sp]
 801b730:	9508      	str	r5, [sp, #32]
 801b732:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b73a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b73e:	b9fc      	cbnz	r4, 801b780 <powf+0x21c>
 801b740:	4b37      	ldr	r3, [pc, #220]	; (801b820 <powf+0x2bc>)
 801b742:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b746:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b74e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b752:	d553      	bpl.n	801b7fc <powf+0x298>
 801b754:	eeb0 0a48 	vmov.f32	s0, s16
 801b758:	f001 fa68 	bl	801cc2c <rintf>
 801b75c:	eeb4 0a48 	vcmp.f32	s0, s16
 801b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b764:	d004      	beq.n	801b770 <powf+0x20c>
 801b766:	4b2f      	ldr	r3, [pc, #188]	; (801b824 <powf+0x2c0>)
 801b768:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b76c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b770:	f996 3000 	ldrsb.w	r3, [r6]
 801b774:	2b02      	cmp	r3, #2
 801b776:	d141      	bne.n	801b7fc <powf+0x298>
 801b778:	f7ff f87a 	bl	801a870 <__errno>
 801b77c:	2322      	movs	r3, #34	; 0x22
 801b77e:	e799      	b.n	801b6b4 <powf+0x150>
 801b780:	4b29      	ldr	r3, [pc, #164]	; (801b828 <powf+0x2c4>)
 801b782:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b786:	2200      	movs	r2, #0
 801b788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b78c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b790:	d5ee      	bpl.n	801b770 <powf+0x20c>
 801b792:	eeb0 0a48 	vmov.f32	s0, s16
 801b796:	f001 fa49 	bl	801cc2c <rintf>
 801b79a:	eeb4 0a48 	vcmp.f32	s0, s16
 801b79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a2:	d0e5      	beq.n	801b770 <powf+0x20c>
 801b7a4:	2200      	movs	r2, #0
 801b7a6:	4b1d      	ldr	r3, [pc, #116]	; (801b81c <powf+0x2b8>)
 801b7a8:	e7e0      	b.n	801b76c <powf+0x208>
 801b7aa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7b2:	f47f af4a 	bne.w	801b64a <powf+0xe6>
 801b7b6:	eeb0 0a68 	vmov.f32	s0, s17
 801b7ba:	f001 fa26 	bl	801cc0a <finitef>
 801b7be:	2800      	cmp	r0, #0
 801b7c0:	f43f af43 	beq.w	801b64a <powf+0xe6>
 801b7c4:	eeb0 0a48 	vmov.f32	s0, s16
 801b7c8:	f001 fa1f 	bl	801cc0a <finitef>
 801b7cc:	2800      	cmp	r0, #0
 801b7ce:	f43f af3c 	beq.w	801b64a <powf+0xe6>
 801b7d2:	2304      	movs	r3, #4
 801b7d4:	9300      	str	r3, [sp, #0]
 801b7d6:	4b0e      	ldr	r3, [pc, #56]	; (801b810 <powf+0x2ac>)
 801b7d8:	9301      	str	r3, [sp, #4]
 801b7da:	ee18 0a90 	vmov	r0, s17
 801b7de:	2300      	movs	r3, #0
 801b7e0:	9308      	str	r3, [sp, #32]
 801b7e2:	f7e4 fed1 	bl	8000588 <__aeabi_f2d>
 801b7e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7ea:	ee18 0a10 	vmov	r0, s16
 801b7ee:	f7e4 fecb 	bl	8000588 <__aeabi_f2d>
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b7f8:	2300      	movs	r3, #0
 801b7fa:	e7b7      	b.n	801b76c <powf+0x208>
 801b7fc:	4668      	mov	r0, sp
 801b7fe:	f001 f8f9 	bl	801c9f4 <matherr>
 801b802:	2800      	cmp	r0, #0
 801b804:	f47f af15 	bne.w	801b632 <powf+0xce>
 801b808:	e7b6      	b.n	801b778 <powf+0x214>
 801b80a:	bf00      	nop
 801b80c:	200001f8 	.word	0x200001f8
 801b810:	0801dbb5 	.word	0x0801dbb5
 801b814:	3ff00000 	.word	0x3ff00000
 801b818:	00000000 	.word	0x00000000
 801b81c:	fff00000 	.word	0xfff00000
 801b820:	47efffff 	.word	0x47efffff
 801b824:	c7efffff 	.word	0xc7efffff
 801b828:	7ff00000 	.word	0x7ff00000

0801b82c <sqrtf>:
 801b82c:	b510      	push	{r4, lr}
 801b82e:	ed2d 8b02 	vpush	{d8}
 801b832:	b08a      	sub	sp, #40	; 0x28
 801b834:	eeb0 8a40 	vmov.f32	s16, s0
 801b838:	f001 f8c8 	bl	801c9cc <__ieee754_sqrtf>
 801b83c:	4b21      	ldr	r3, [pc, #132]	; (801b8c4 <sqrtf+0x98>)
 801b83e:	f993 4000 	ldrsb.w	r4, [r3]
 801b842:	1c63      	adds	r3, r4, #1
 801b844:	d02c      	beq.n	801b8a0 <sqrtf+0x74>
 801b846:	eeb4 8a48 	vcmp.f32	s16, s16
 801b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b84e:	d627      	bvs.n	801b8a0 <sqrtf+0x74>
 801b850:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b858:	d522      	bpl.n	801b8a0 <sqrtf+0x74>
 801b85a:	2301      	movs	r3, #1
 801b85c:	9300      	str	r3, [sp, #0]
 801b85e:	4b1a      	ldr	r3, [pc, #104]	; (801b8c8 <sqrtf+0x9c>)
 801b860:	9301      	str	r3, [sp, #4]
 801b862:	ee18 0a10 	vmov	r0, s16
 801b866:	2300      	movs	r3, #0
 801b868:	9308      	str	r3, [sp, #32]
 801b86a:	f7e4 fe8d 	bl	8000588 <__aeabi_f2d>
 801b86e:	2200      	movs	r2, #0
 801b870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b874:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b878:	2300      	movs	r3, #0
 801b87a:	b9ac      	cbnz	r4, 801b8a8 <sqrtf+0x7c>
 801b87c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b880:	4668      	mov	r0, sp
 801b882:	f001 f8b7 	bl	801c9f4 <matherr>
 801b886:	b1b8      	cbz	r0, 801b8b8 <sqrtf+0x8c>
 801b888:	9b08      	ldr	r3, [sp, #32]
 801b88a:	b11b      	cbz	r3, 801b894 <sqrtf+0x68>
 801b88c:	f7fe fff0 	bl	801a870 <__errno>
 801b890:	9b08      	ldr	r3, [sp, #32]
 801b892:	6003      	str	r3, [r0, #0]
 801b894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b898:	f7e5 f99e 	bl	8000bd8 <__aeabi_d2f>
 801b89c:	ee00 0a10 	vmov	s0, r0
 801b8a0:	b00a      	add	sp, #40	; 0x28
 801b8a2:	ecbd 8b02 	vpop	{d8}
 801b8a6:	bd10      	pop	{r4, pc}
 801b8a8:	4610      	mov	r0, r2
 801b8aa:	4619      	mov	r1, r3
 801b8ac:	f7e4 ffee 	bl	800088c <__aeabi_ddiv>
 801b8b0:	2c02      	cmp	r4, #2
 801b8b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b8b6:	d1e3      	bne.n	801b880 <sqrtf+0x54>
 801b8b8:	f7fe ffda 	bl	801a870 <__errno>
 801b8bc:	2321      	movs	r3, #33	; 0x21
 801b8be:	6003      	str	r3, [r0, #0]
 801b8c0:	e7e2      	b.n	801b888 <sqrtf+0x5c>
 801b8c2:	bf00      	nop
 801b8c4:	200001f8 	.word	0x200001f8
 801b8c8:	0801dbba 	.word	0x0801dbba
 801b8cc:	00000000 	.word	0x00000000

0801b8d0 <__ieee754_pow>:
 801b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8d4:	b091      	sub	sp, #68	; 0x44
 801b8d6:	ed8d 1b00 	vstr	d1, [sp]
 801b8da:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b8de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b8e2:	ea58 0302 	orrs.w	r3, r8, r2
 801b8e6:	ec57 6b10 	vmov	r6, r7, d0
 801b8ea:	f000 84be 	beq.w	801c26a <__ieee754_pow+0x99a>
 801b8ee:	4b7a      	ldr	r3, [pc, #488]	; (801bad8 <__ieee754_pow+0x208>)
 801b8f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b8f4:	429c      	cmp	r4, r3
 801b8f6:	463d      	mov	r5, r7
 801b8f8:	ee10 aa10 	vmov	sl, s0
 801b8fc:	dc09      	bgt.n	801b912 <__ieee754_pow+0x42>
 801b8fe:	d103      	bne.n	801b908 <__ieee754_pow+0x38>
 801b900:	b93e      	cbnz	r6, 801b912 <__ieee754_pow+0x42>
 801b902:	45a0      	cmp	r8, r4
 801b904:	dc0d      	bgt.n	801b922 <__ieee754_pow+0x52>
 801b906:	e001      	b.n	801b90c <__ieee754_pow+0x3c>
 801b908:	4598      	cmp	r8, r3
 801b90a:	dc02      	bgt.n	801b912 <__ieee754_pow+0x42>
 801b90c:	4598      	cmp	r8, r3
 801b90e:	d10e      	bne.n	801b92e <__ieee754_pow+0x5e>
 801b910:	b16a      	cbz	r2, 801b92e <__ieee754_pow+0x5e>
 801b912:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b916:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b91a:	ea54 030a 	orrs.w	r3, r4, sl
 801b91e:	f000 84a4 	beq.w	801c26a <__ieee754_pow+0x99a>
 801b922:	486e      	ldr	r0, [pc, #440]	; (801badc <__ieee754_pow+0x20c>)
 801b924:	b011      	add	sp, #68	; 0x44
 801b926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b92a:	f001 b865 	b.w	801c9f8 <nan>
 801b92e:	2d00      	cmp	r5, #0
 801b930:	da53      	bge.n	801b9da <__ieee754_pow+0x10a>
 801b932:	4b6b      	ldr	r3, [pc, #428]	; (801bae0 <__ieee754_pow+0x210>)
 801b934:	4598      	cmp	r8, r3
 801b936:	dc4d      	bgt.n	801b9d4 <__ieee754_pow+0x104>
 801b938:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b93c:	4598      	cmp	r8, r3
 801b93e:	dd4c      	ble.n	801b9da <__ieee754_pow+0x10a>
 801b940:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b944:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b948:	2b14      	cmp	r3, #20
 801b94a:	dd26      	ble.n	801b99a <__ieee754_pow+0xca>
 801b94c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b950:	fa22 f103 	lsr.w	r1, r2, r3
 801b954:	fa01 f303 	lsl.w	r3, r1, r3
 801b958:	4293      	cmp	r3, r2
 801b95a:	d13e      	bne.n	801b9da <__ieee754_pow+0x10a>
 801b95c:	f001 0101 	and.w	r1, r1, #1
 801b960:	f1c1 0b02 	rsb	fp, r1, #2
 801b964:	2a00      	cmp	r2, #0
 801b966:	d15b      	bne.n	801ba20 <__ieee754_pow+0x150>
 801b968:	4b5b      	ldr	r3, [pc, #364]	; (801bad8 <__ieee754_pow+0x208>)
 801b96a:	4598      	cmp	r8, r3
 801b96c:	d124      	bne.n	801b9b8 <__ieee754_pow+0xe8>
 801b96e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b972:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b976:	ea53 030a 	orrs.w	r3, r3, sl
 801b97a:	f000 8476 	beq.w	801c26a <__ieee754_pow+0x99a>
 801b97e:	4b59      	ldr	r3, [pc, #356]	; (801bae4 <__ieee754_pow+0x214>)
 801b980:	429c      	cmp	r4, r3
 801b982:	dd2d      	ble.n	801b9e0 <__ieee754_pow+0x110>
 801b984:	f1b9 0f00 	cmp.w	r9, #0
 801b988:	f280 8473 	bge.w	801c272 <__ieee754_pow+0x9a2>
 801b98c:	2000      	movs	r0, #0
 801b98e:	2100      	movs	r1, #0
 801b990:	ec41 0b10 	vmov	d0, r0, r1
 801b994:	b011      	add	sp, #68	; 0x44
 801b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b99a:	2a00      	cmp	r2, #0
 801b99c:	d13e      	bne.n	801ba1c <__ieee754_pow+0x14c>
 801b99e:	f1c3 0314 	rsb	r3, r3, #20
 801b9a2:	fa48 f103 	asr.w	r1, r8, r3
 801b9a6:	fa01 f303 	lsl.w	r3, r1, r3
 801b9aa:	4543      	cmp	r3, r8
 801b9ac:	f040 8469 	bne.w	801c282 <__ieee754_pow+0x9b2>
 801b9b0:	f001 0101 	and.w	r1, r1, #1
 801b9b4:	f1c1 0b02 	rsb	fp, r1, #2
 801b9b8:	4b4b      	ldr	r3, [pc, #300]	; (801bae8 <__ieee754_pow+0x218>)
 801b9ba:	4598      	cmp	r8, r3
 801b9bc:	d118      	bne.n	801b9f0 <__ieee754_pow+0x120>
 801b9be:	f1b9 0f00 	cmp.w	r9, #0
 801b9c2:	f280 845a 	bge.w	801c27a <__ieee754_pow+0x9aa>
 801b9c6:	4948      	ldr	r1, [pc, #288]	; (801bae8 <__ieee754_pow+0x218>)
 801b9c8:	4632      	mov	r2, r6
 801b9ca:	463b      	mov	r3, r7
 801b9cc:	2000      	movs	r0, #0
 801b9ce:	f7e4 ff5d 	bl	800088c <__aeabi_ddiv>
 801b9d2:	e7dd      	b.n	801b990 <__ieee754_pow+0xc0>
 801b9d4:	f04f 0b02 	mov.w	fp, #2
 801b9d8:	e7c4      	b.n	801b964 <__ieee754_pow+0x94>
 801b9da:	f04f 0b00 	mov.w	fp, #0
 801b9de:	e7c1      	b.n	801b964 <__ieee754_pow+0x94>
 801b9e0:	f1b9 0f00 	cmp.w	r9, #0
 801b9e4:	dad2      	bge.n	801b98c <__ieee754_pow+0xbc>
 801b9e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b9ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b9ee:	e7cf      	b.n	801b990 <__ieee754_pow+0xc0>
 801b9f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b9f4:	d106      	bne.n	801ba04 <__ieee754_pow+0x134>
 801b9f6:	4632      	mov	r2, r6
 801b9f8:	463b      	mov	r3, r7
 801b9fa:	4610      	mov	r0, r2
 801b9fc:	4619      	mov	r1, r3
 801b9fe:	f7e4 fe1b 	bl	8000638 <__aeabi_dmul>
 801ba02:	e7c5      	b.n	801b990 <__ieee754_pow+0xc0>
 801ba04:	4b39      	ldr	r3, [pc, #228]	; (801baec <__ieee754_pow+0x21c>)
 801ba06:	4599      	cmp	r9, r3
 801ba08:	d10a      	bne.n	801ba20 <__ieee754_pow+0x150>
 801ba0a:	2d00      	cmp	r5, #0
 801ba0c:	db08      	blt.n	801ba20 <__ieee754_pow+0x150>
 801ba0e:	ec47 6b10 	vmov	d0, r6, r7
 801ba12:	b011      	add	sp, #68	; 0x44
 801ba14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba18:	f000 bc68 	b.w	801c2ec <__ieee754_sqrt>
 801ba1c:	f04f 0b00 	mov.w	fp, #0
 801ba20:	ec47 6b10 	vmov	d0, r6, r7
 801ba24:	f000 ffd5 	bl	801c9d2 <fabs>
 801ba28:	ec51 0b10 	vmov	r0, r1, d0
 801ba2c:	f1ba 0f00 	cmp.w	sl, #0
 801ba30:	d127      	bne.n	801ba82 <__ieee754_pow+0x1b2>
 801ba32:	b124      	cbz	r4, 801ba3e <__ieee754_pow+0x16e>
 801ba34:	4b2c      	ldr	r3, [pc, #176]	; (801bae8 <__ieee754_pow+0x218>)
 801ba36:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ba3a:	429a      	cmp	r2, r3
 801ba3c:	d121      	bne.n	801ba82 <__ieee754_pow+0x1b2>
 801ba3e:	f1b9 0f00 	cmp.w	r9, #0
 801ba42:	da05      	bge.n	801ba50 <__ieee754_pow+0x180>
 801ba44:	4602      	mov	r2, r0
 801ba46:	460b      	mov	r3, r1
 801ba48:	2000      	movs	r0, #0
 801ba4a:	4927      	ldr	r1, [pc, #156]	; (801bae8 <__ieee754_pow+0x218>)
 801ba4c:	f7e4 ff1e 	bl	800088c <__aeabi_ddiv>
 801ba50:	2d00      	cmp	r5, #0
 801ba52:	da9d      	bge.n	801b990 <__ieee754_pow+0xc0>
 801ba54:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ba58:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ba5c:	ea54 030b 	orrs.w	r3, r4, fp
 801ba60:	d108      	bne.n	801ba74 <__ieee754_pow+0x1a4>
 801ba62:	4602      	mov	r2, r0
 801ba64:	460b      	mov	r3, r1
 801ba66:	4610      	mov	r0, r2
 801ba68:	4619      	mov	r1, r3
 801ba6a:	f7e4 fc2d 	bl	80002c8 <__aeabi_dsub>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	460b      	mov	r3, r1
 801ba72:	e7ac      	b.n	801b9ce <__ieee754_pow+0xfe>
 801ba74:	f1bb 0f01 	cmp.w	fp, #1
 801ba78:	d18a      	bne.n	801b990 <__ieee754_pow+0xc0>
 801ba7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ba7e:	4619      	mov	r1, r3
 801ba80:	e786      	b.n	801b990 <__ieee754_pow+0xc0>
 801ba82:	0fed      	lsrs	r5, r5, #31
 801ba84:	1e6b      	subs	r3, r5, #1
 801ba86:	930d      	str	r3, [sp, #52]	; 0x34
 801ba88:	ea5b 0303 	orrs.w	r3, fp, r3
 801ba8c:	d102      	bne.n	801ba94 <__ieee754_pow+0x1c4>
 801ba8e:	4632      	mov	r2, r6
 801ba90:	463b      	mov	r3, r7
 801ba92:	e7e8      	b.n	801ba66 <__ieee754_pow+0x196>
 801ba94:	4b16      	ldr	r3, [pc, #88]	; (801baf0 <__ieee754_pow+0x220>)
 801ba96:	4598      	cmp	r8, r3
 801ba98:	f340 80fe 	ble.w	801bc98 <__ieee754_pow+0x3c8>
 801ba9c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801baa0:	4598      	cmp	r8, r3
 801baa2:	dd0a      	ble.n	801baba <__ieee754_pow+0x1ea>
 801baa4:	4b0f      	ldr	r3, [pc, #60]	; (801bae4 <__ieee754_pow+0x214>)
 801baa6:	429c      	cmp	r4, r3
 801baa8:	dc0d      	bgt.n	801bac6 <__ieee754_pow+0x1f6>
 801baaa:	f1b9 0f00 	cmp.w	r9, #0
 801baae:	f6bf af6d 	bge.w	801b98c <__ieee754_pow+0xbc>
 801bab2:	a307      	add	r3, pc, #28	; (adr r3, 801bad0 <__ieee754_pow+0x200>)
 801bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab8:	e79f      	b.n	801b9fa <__ieee754_pow+0x12a>
 801baba:	4b0e      	ldr	r3, [pc, #56]	; (801baf4 <__ieee754_pow+0x224>)
 801babc:	429c      	cmp	r4, r3
 801babe:	ddf4      	ble.n	801baaa <__ieee754_pow+0x1da>
 801bac0:	4b09      	ldr	r3, [pc, #36]	; (801bae8 <__ieee754_pow+0x218>)
 801bac2:	429c      	cmp	r4, r3
 801bac4:	dd18      	ble.n	801baf8 <__ieee754_pow+0x228>
 801bac6:	f1b9 0f00 	cmp.w	r9, #0
 801baca:	dcf2      	bgt.n	801bab2 <__ieee754_pow+0x1e2>
 801bacc:	e75e      	b.n	801b98c <__ieee754_pow+0xbc>
 801bace:	bf00      	nop
 801bad0:	8800759c 	.word	0x8800759c
 801bad4:	7e37e43c 	.word	0x7e37e43c
 801bad8:	7ff00000 	.word	0x7ff00000
 801badc:	0801db1d 	.word	0x0801db1d
 801bae0:	433fffff 	.word	0x433fffff
 801bae4:	3fefffff 	.word	0x3fefffff
 801bae8:	3ff00000 	.word	0x3ff00000
 801baec:	3fe00000 	.word	0x3fe00000
 801baf0:	41e00000 	.word	0x41e00000
 801baf4:	3feffffe 	.word	0x3feffffe
 801baf8:	2200      	movs	r2, #0
 801bafa:	4b63      	ldr	r3, [pc, #396]	; (801bc88 <__ieee754_pow+0x3b8>)
 801bafc:	f7e4 fbe4 	bl	80002c8 <__aeabi_dsub>
 801bb00:	a355      	add	r3, pc, #340	; (adr r3, 801bc58 <__ieee754_pow+0x388>)
 801bb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb06:	4604      	mov	r4, r0
 801bb08:	460d      	mov	r5, r1
 801bb0a:	f7e4 fd95 	bl	8000638 <__aeabi_dmul>
 801bb0e:	a354      	add	r3, pc, #336	; (adr r3, 801bc60 <__ieee754_pow+0x390>)
 801bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb14:	4606      	mov	r6, r0
 801bb16:	460f      	mov	r7, r1
 801bb18:	4620      	mov	r0, r4
 801bb1a:	4629      	mov	r1, r5
 801bb1c:	f7e4 fd8c 	bl	8000638 <__aeabi_dmul>
 801bb20:	2200      	movs	r2, #0
 801bb22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb26:	4b59      	ldr	r3, [pc, #356]	; (801bc8c <__ieee754_pow+0x3bc>)
 801bb28:	4620      	mov	r0, r4
 801bb2a:	4629      	mov	r1, r5
 801bb2c:	f7e4 fd84 	bl	8000638 <__aeabi_dmul>
 801bb30:	4602      	mov	r2, r0
 801bb32:	460b      	mov	r3, r1
 801bb34:	a14c      	add	r1, pc, #304	; (adr r1, 801bc68 <__ieee754_pow+0x398>)
 801bb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bb3a:	f7e4 fbc5 	bl	80002c8 <__aeabi_dsub>
 801bb3e:	4622      	mov	r2, r4
 801bb40:	462b      	mov	r3, r5
 801bb42:	f7e4 fd79 	bl	8000638 <__aeabi_dmul>
 801bb46:	4602      	mov	r2, r0
 801bb48:	460b      	mov	r3, r1
 801bb4a:	2000      	movs	r0, #0
 801bb4c:	4950      	ldr	r1, [pc, #320]	; (801bc90 <__ieee754_pow+0x3c0>)
 801bb4e:	f7e4 fbbb 	bl	80002c8 <__aeabi_dsub>
 801bb52:	4622      	mov	r2, r4
 801bb54:	462b      	mov	r3, r5
 801bb56:	4680      	mov	r8, r0
 801bb58:	4689      	mov	r9, r1
 801bb5a:	4620      	mov	r0, r4
 801bb5c:	4629      	mov	r1, r5
 801bb5e:	f7e4 fd6b 	bl	8000638 <__aeabi_dmul>
 801bb62:	4602      	mov	r2, r0
 801bb64:	460b      	mov	r3, r1
 801bb66:	4640      	mov	r0, r8
 801bb68:	4649      	mov	r1, r9
 801bb6a:	f7e4 fd65 	bl	8000638 <__aeabi_dmul>
 801bb6e:	a340      	add	r3, pc, #256	; (adr r3, 801bc70 <__ieee754_pow+0x3a0>)
 801bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb74:	f7e4 fd60 	bl	8000638 <__aeabi_dmul>
 801bb78:	4602      	mov	r2, r0
 801bb7a:	460b      	mov	r3, r1
 801bb7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb80:	f7e4 fba2 	bl	80002c8 <__aeabi_dsub>
 801bb84:	4602      	mov	r2, r0
 801bb86:	460b      	mov	r3, r1
 801bb88:	4604      	mov	r4, r0
 801bb8a:	460d      	mov	r5, r1
 801bb8c:	4630      	mov	r0, r6
 801bb8e:	4639      	mov	r1, r7
 801bb90:	f7e4 fb9c 	bl	80002cc <__adddf3>
 801bb94:	2000      	movs	r0, #0
 801bb96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb9a:	4632      	mov	r2, r6
 801bb9c:	463b      	mov	r3, r7
 801bb9e:	f7e4 fb93 	bl	80002c8 <__aeabi_dsub>
 801bba2:	4602      	mov	r2, r0
 801bba4:	460b      	mov	r3, r1
 801bba6:	4620      	mov	r0, r4
 801bba8:	4629      	mov	r1, r5
 801bbaa:	f7e4 fb8d 	bl	80002c8 <__aeabi_dsub>
 801bbae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801bbb0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801bbb4:	4313      	orrs	r3, r2
 801bbb6:	4606      	mov	r6, r0
 801bbb8:	460f      	mov	r7, r1
 801bbba:	f040 81eb 	bne.w	801bf94 <__ieee754_pow+0x6c4>
 801bbbe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bc78 <__ieee754_pow+0x3a8>
 801bbc2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801bbc6:	2400      	movs	r4, #0
 801bbc8:	4622      	mov	r2, r4
 801bbca:	462b      	mov	r3, r5
 801bbcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bbd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bbd4:	f7e4 fb78 	bl	80002c8 <__aeabi_dsub>
 801bbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbdc:	f7e4 fd2c 	bl	8000638 <__aeabi_dmul>
 801bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bbe4:	4680      	mov	r8, r0
 801bbe6:	4689      	mov	r9, r1
 801bbe8:	4630      	mov	r0, r6
 801bbea:	4639      	mov	r1, r7
 801bbec:	f7e4 fd24 	bl	8000638 <__aeabi_dmul>
 801bbf0:	4602      	mov	r2, r0
 801bbf2:	460b      	mov	r3, r1
 801bbf4:	4640      	mov	r0, r8
 801bbf6:	4649      	mov	r1, r9
 801bbf8:	f7e4 fb68 	bl	80002cc <__adddf3>
 801bbfc:	4622      	mov	r2, r4
 801bbfe:	462b      	mov	r3, r5
 801bc00:	4680      	mov	r8, r0
 801bc02:	4689      	mov	r9, r1
 801bc04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc08:	f7e4 fd16 	bl	8000638 <__aeabi_dmul>
 801bc0c:	460b      	mov	r3, r1
 801bc0e:	4604      	mov	r4, r0
 801bc10:	460d      	mov	r5, r1
 801bc12:	4602      	mov	r2, r0
 801bc14:	4649      	mov	r1, r9
 801bc16:	4640      	mov	r0, r8
 801bc18:	e9cd 4500 	strd	r4, r5, [sp]
 801bc1c:	f7e4 fb56 	bl	80002cc <__adddf3>
 801bc20:	4b1c      	ldr	r3, [pc, #112]	; (801bc94 <__ieee754_pow+0x3c4>)
 801bc22:	4299      	cmp	r1, r3
 801bc24:	4606      	mov	r6, r0
 801bc26:	460f      	mov	r7, r1
 801bc28:	468b      	mov	fp, r1
 801bc2a:	f340 82f7 	ble.w	801c21c <__ieee754_pow+0x94c>
 801bc2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801bc32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801bc36:	4303      	orrs	r3, r0
 801bc38:	f000 81ea 	beq.w	801c010 <__ieee754_pow+0x740>
 801bc3c:	a310      	add	r3, pc, #64	; (adr r3, 801bc80 <__ieee754_pow+0x3b0>)
 801bc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc46:	f7e4 fcf7 	bl	8000638 <__aeabi_dmul>
 801bc4a:	a30d      	add	r3, pc, #52	; (adr r3, 801bc80 <__ieee754_pow+0x3b0>)
 801bc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc50:	e6d5      	b.n	801b9fe <__ieee754_pow+0x12e>
 801bc52:	bf00      	nop
 801bc54:	f3af 8000 	nop.w
 801bc58:	60000000 	.word	0x60000000
 801bc5c:	3ff71547 	.word	0x3ff71547
 801bc60:	f85ddf44 	.word	0xf85ddf44
 801bc64:	3e54ae0b 	.word	0x3e54ae0b
 801bc68:	55555555 	.word	0x55555555
 801bc6c:	3fd55555 	.word	0x3fd55555
 801bc70:	652b82fe 	.word	0x652b82fe
 801bc74:	3ff71547 	.word	0x3ff71547
 801bc78:	00000000 	.word	0x00000000
 801bc7c:	bff00000 	.word	0xbff00000
 801bc80:	8800759c 	.word	0x8800759c
 801bc84:	7e37e43c 	.word	0x7e37e43c
 801bc88:	3ff00000 	.word	0x3ff00000
 801bc8c:	3fd00000 	.word	0x3fd00000
 801bc90:	3fe00000 	.word	0x3fe00000
 801bc94:	408fffff 	.word	0x408fffff
 801bc98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bc9c:	f04f 0200 	mov.w	r2, #0
 801bca0:	da05      	bge.n	801bcae <__ieee754_pow+0x3de>
 801bca2:	4bd3      	ldr	r3, [pc, #844]	; (801bff0 <__ieee754_pow+0x720>)
 801bca4:	f7e4 fcc8 	bl	8000638 <__aeabi_dmul>
 801bca8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801bcac:	460c      	mov	r4, r1
 801bcae:	1523      	asrs	r3, r4, #20
 801bcb0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bcb4:	4413      	add	r3, r2
 801bcb6:	9309      	str	r3, [sp, #36]	; 0x24
 801bcb8:	4bce      	ldr	r3, [pc, #824]	; (801bff4 <__ieee754_pow+0x724>)
 801bcba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801bcbe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bcc2:	429c      	cmp	r4, r3
 801bcc4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bcc8:	dd08      	ble.n	801bcdc <__ieee754_pow+0x40c>
 801bcca:	4bcb      	ldr	r3, [pc, #812]	; (801bff8 <__ieee754_pow+0x728>)
 801bccc:	429c      	cmp	r4, r3
 801bcce:	f340 815e 	ble.w	801bf8e <__ieee754_pow+0x6be>
 801bcd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcd4:	3301      	adds	r3, #1
 801bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 801bcd8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801bcdc:	f04f 0a00 	mov.w	sl, #0
 801bce0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bce4:	930c      	str	r3, [sp, #48]	; 0x30
 801bce6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bce8:	4bc4      	ldr	r3, [pc, #784]	; (801bffc <__ieee754_pow+0x72c>)
 801bcea:	4413      	add	r3, r2
 801bcec:	ed93 7b00 	vldr	d7, [r3]
 801bcf0:	4629      	mov	r1, r5
 801bcf2:	ec53 2b17 	vmov	r2, r3, d7
 801bcf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bcfa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bcfe:	f7e4 fae3 	bl	80002c8 <__aeabi_dsub>
 801bd02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bd06:	4606      	mov	r6, r0
 801bd08:	460f      	mov	r7, r1
 801bd0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd0e:	f7e4 fadd 	bl	80002cc <__adddf3>
 801bd12:	4602      	mov	r2, r0
 801bd14:	460b      	mov	r3, r1
 801bd16:	2000      	movs	r0, #0
 801bd18:	49b9      	ldr	r1, [pc, #740]	; (801c000 <__ieee754_pow+0x730>)
 801bd1a:	f7e4 fdb7 	bl	800088c <__aeabi_ddiv>
 801bd1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bd22:	4602      	mov	r2, r0
 801bd24:	460b      	mov	r3, r1
 801bd26:	4630      	mov	r0, r6
 801bd28:	4639      	mov	r1, r7
 801bd2a:	f7e4 fc85 	bl	8000638 <__aeabi_dmul>
 801bd2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bd36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	9302      	str	r3, [sp, #8]
 801bd3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bd42:	106d      	asrs	r5, r5, #1
 801bd44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bd48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bd4c:	2200      	movs	r2, #0
 801bd4e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bd52:	4640      	mov	r0, r8
 801bd54:	4649      	mov	r1, r9
 801bd56:	4614      	mov	r4, r2
 801bd58:	461d      	mov	r5, r3
 801bd5a:	f7e4 fc6d 	bl	8000638 <__aeabi_dmul>
 801bd5e:	4602      	mov	r2, r0
 801bd60:	460b      	mov	r3, r1
 801bd62:	4630      	mov	r0, r6
 801bd64:	4639      	mov	r1, r7
 801bd66:	f7e4 faaf 	bl	80002c8 <__aeabi_dsub>
 801bd6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bd6e:	4606      	mov	r6, r0
 801bd70:	460f      	mov	r7, r1
 801bd72:	4620      	mov	r0, r4
 801bd74:	4629      	mov	r1, r5
 801bd76:	f7e4 faa7 	bl	80002c8 <__aeabi_dsub>
 801bd7a:	4602      	mov	r2, r0
 801bd7c:	460b      	mov	r3, r1
 801bd7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bd82:	f7e4 faa1 	bl	80002c8 <__aeabi_dsub>
 801bd86:	4642      	mov	r2, r8
 801bd88:	464b      	mov	r3, r9
 801bd8a:	f7e4 fc55 	bl	8000638 <__aeabi_dmul>
 801bd8e:	4602      	mov	r2, r0
 801bd90:	460b      	mov	r3, r1
 801bd92:	4630      	mov	r0, r6
 801bd94:	4639      	mov	r1, r7
 801bd96:	f7e4 fa97 	bl	80002c8 <__aeabi_dsub>
 801bd9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bd9e:	f7e4 fc4b 	bl	8000638 <__aeabi_dmul>
 801bda2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bda6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bdaa:	4610      	mov	r0, r2
 801bdac:	4619      	mov	r1, r3
 801bdae:	f7e4 fc43 	bl	8000638 <__aeabi_dmul>
 801bdb2:	a37b      	add	r3, pc, #492	; (adr r3, 801bfa0 <__ieee754_pow+0x6d0>)
 801bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb8:	4604      	mov	r4, r0
 801bdba:	460d      	mov	r5, r1
 801bdbc:	f7e4 fc3c 	bl	8000638 <__aeabi_dmul>
 801bdc0:	a379      	add	r3, pc, #484	; (adr r3, 801bfa8 <__ieee754_pow+0x6d8>)
 801bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc6:	f7e4 fa81 	bl	80002cc <__adddf3>
 801bdca:	4622      	mov	r2, r4
 801bdcc:	462b      	mov	r3, r5
 801bdce:	f7e4 fc33 	bl	8000638 <__aeabi_dmul>
 801bdd2:	a377      	add	r3, pc, #476	; (adr r3, 801bfb0 <__ieee754_pow+0x6e0>)
 801bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdd8:	f7e4 fa78 	bl	80002cc <__adddf3>
 801bddc:	4622      	mov	r2, r4
 801bdde:	462b      	mov	r3, r5
 801bde0:	f7e4 fc2a 	bl	8000638 <__aeabi_dmul>
 801bde4:	a374      	add	r3, pc, #464	; (adr r3, 801bfb8 <__ieee754_pow+0x6e8>)
 801bde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdea:	f7e4 fa6f 	bl	80002cc <__adddf3>
 801bdee:	4622      	mov	r2, r4
 801bdf0:	462b      	mov	r3, r5
 801bdf2:	f7e4 fc21 	bl	8000638 <__aeabi_dmul>
 801bdf6:	a372      	add	r3, pc, #456	; (adr r3, 801bfc0 <__ieee754_pow+0x6f0>)
 801bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfc:	f7e4 fa66 	bl	80002cc <__adddf3>
 801be00:	4622      	mov	r2, r4
 801be02:	462b      	mov	r3, r5
 801be04:	f7e4 fc18 	bl	8000638 <__aeabi_dmul>
 801be08:	a36f      	add	r3, pc, #444	; (adr r3, 801bfc8 <__ieee754_pow+0x6f8>)
 801be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be0e:	f7e4 fa5d 	bl	80002cc <__adddf3>
 801be12:	4622      	mov	r2, r4
 801be14:	4606      	mov	r6, r0
 801be16:	460f      	mov	r7, r1
 801be18:	462b      	mov	r3, r5
 801be1a:	4620      	mov	r0, r4
 801be1c:	4629      	mov	r1, r5
 801be1e:	f7e4 fc0b 	bl	8000638 <__aeabi_dmul>
 801be22:	4602      	mov	r2, r0
 801be24:	460b      	mov	r3, r1
 801be26:	4630      	mov	r0, r6
 801be28:	4639      	mov	r1, r7
 801be2a:	f7e4 fc05 	bl	8000638 <__aeabi_dmul>
 801be2e:	4642      	mov	r2, r8
 801be30:	4604      	mov	r4, r0
 801be32:	460d      	mov	r5, r1
 801be34:	464b      	mov	r3, r9
 801be36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be3a:	f7e4 fa47 	bl	80002cc <__adddf3>
 801be3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801be42:	f7e4 fbf9 	bl	8000638 <__aeabi_dmul>
 801be46:	4622      	mov	r2, r4
 801be48:	462b      	mov	r3, r5
 801be4a:	f7e4 fa3f 	bl	80002cc <__adddf3>
 801be4e:	4642      	mov	r2, r8
 801be50:	4606      	mov	r6, r0
 801be52:	460f      	mov	r7, r1
 801be54:	464b      	mov	r3, r9
 801be56:	4640      	mov	r0, r8
 801be58:	4649      	mov	r1, r9
 801be5a:	f7e4 fbed 	bl	8000638 <__aeabi_dmul>
 801be5e:	2200      	movs	r2, #0
 801be60:	4b68      	ldr	r3, [pc, #416]	; (801c004 <__ieee754_pow+0x734>)
 801be62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801be66:	f7e4 fa31 	bl	80002cc <__adddf3>
 801be6a:	4632      	mov	r2, r6
 801be6c:	463b      	mov	r3, r7
 801be6e:	f7e4 fa2d 	bl	80002cc <__adddf3>
 801be72:	9802      	ldr	r0, [sp, #8]
 801be74:	460d      	mov	r5, r1
 801be76:	4604      	mov	r4, r0
 801be78:	4602      	mov	r2, r0
 801be7a:	460b      	mov	r3, r1
 801be7c:	4640      	mov	r0, r8
 801be7e:	4649      	mov	r1, r9
 801be80:	f7e4 fbda 	bl	8000638 <__aeabi_dmul>
 801be84:	2200      	movs	r2, #0
 801be86:	4680      	mov	r8, r0
 801be88:	4689      	mov	r9, r1
 801be8a:	4b5e      	ldr	r3, [pc, #376]	; (801c004 <__ieee754_pow+0x734>)
 801be8c:	4620      	mov	r0, r4
 801be8e:	4629      	mov	r1, r5
 801be90:	f7e4 fa1a 	bl	80002c8 <__aeabi_dsub>
 801be94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be98:	f7e4 fa16 	bl	80002c8 <__aeabi_dsub>
 801be9c:	4602      	mov	r2, r0
 801be9e:	460b      	mov	r3, r1
 801bea0:	4630      	mov	r0, r6
 801bea2:	4639      	mov	r1, r7
 801bea4:	f7e4 fa10 	bl	80002c8 <__aeabi_dsub>
 801bea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801beac:	f7e4 fbc4 	bl	8000638 <__aeabi_dmul>
 801beb0:	4622      	mov	r2, r4
 801beb2:	4606      	mov	r6, r0
 801beb4:	460f      	mov	r7, r1
 801beb6:	462b      	mov	r3, r5
 801beb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bebc:	f7e4 fbbc 	bl	8000638 <__aeabi_dmul>
 801bec0:	4602      	mov	r2, r0
 801bec2:	460b      	mov	r3, r1
 801bec4:	4630      	mov	r0, r6
 801bec6:	4639      	mov	r1, r7
 801bec8:	f7e4 fa00 	bl	80002cc <__adddf3>
 801becc:	4606      	mov	r6, r0
 801bece:	460f      	mov	r7, r1
 801bed0:	4602      	mov	r2, r0
 801bed2:	460b      	mov	r3, r1
 801bed4:	4640      	mov	r0, r8
 801bed6:	4649      	mov	r1, r9
 801bed8:	f7e4 f9f8 	bl	80002cc <__adddf3>
 801bedc:	9802      	ldr	r0, [sp, #8]
 801bede:	a33c      	add	r3, pc, #240	; (adr r3, 801bfd0 <__ieee754_pow+0x700>)
 801bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee4:	4604      	mov	r4, r0
 801bee6:	460d      	mov	r5, r1
 801bee8:	f7e4 fba6 	bl	8000638 <__aeabi_dmul>
 801beec:	4642      	mov	r2, r8
 801beee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bef2:	464b      	mov	r3, r9
 801bef4:	4620      	mov	r0, r4
 801bef6:	4629      	mov	r1, r5
 801bef8:	f7e4 f9e6 	bl	80002c8 <__aeabi_dsub>
 801befc:	4602      	mov	r2, r0
 801befe:	460b      	mov	r3, r1
 801bf00:	4630      	mov	r0, r6
 801bf02:	4639      	mov	r1, r7
 801bf04:	f7e4 f9e0 	bl	80002c8 <__aeabi_dsub>
 801bf08:	a333      	add	r3, pc, #204	; (adr r3, 801bfd8 <__ieee754_pow+0x708>)
 801bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf0e:	f7e4 fb93 	bl	8000638 <__aeabi_dmul>
 801bf12:	a333      	add	r3, pc, #204	; (adr r3, 801bfe0 <__ieee754_pow+0x710>)
 801bf14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf18:	4606      	mov	r6, r0
 801bf1a:	460f      	mov	r7, r1
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	4629      	mov	r1, r5
 801bf20:	f7e4 fb8a 	bl	8000638 <__aeabi_dmul>
 801bf24:	4602      	mov	r2, r0
 801bf26:	460b      	mov	r3, r1
 801bf28:	4630      	mov	r0, r6
 801bf2a:	4639      	mov	r1, r7
 801bf2c:	f7e4 f9ce 	bl	80002cc <__adddf3>
 801bf30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bf32:	4b35      	ldr	r3, [pc, #212]	; (801c008 <__ieee754_pow+0x738>)
 801bf34:	4413      	add	r3, r2
 801bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf3a:	f7e4 f9c7 	bl	80002cc <__adddf3>
 801bf3e:	4604      	mov	r4, r0
 801bf40:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf42:	460d      	mov	r5, r1
 801bf44:	f7e4 fb0e 	bl	8000564 <__aeabi_i2d>
 801bf48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bf4a:	4b30      	ldr	r3, [pc, #192]	; (801c00c <__ieee754_pow+0x73c>)
 801bf4c:	4413      	add	r3, r2
 801bf4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bf52:	4606      	mov	r6, r0
 801bf54:	460f      	mov	r7, r1
 801bf56:	4622      	mov	r2, r4
 801bf58:	462b      	mov	r3, r5
 801bf5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bf5e:	f7e4 f9b5 	bl	80002cc <__adddf3>
 801bf62:	4642      	mov	r2, r8
 801bf64:	464b      	mov	r3, r9
 801bf66:	f7e4 f9b1 	bl	80002cc <__adddf3>
 801bf6a:	4632      	mov	r2, r6
 801bf6c:	463b      	mov	r3, r7
 801bf6e:	f7e4 f9ad 	bl	80002cc <__adddf3>
 801bf72:	9802      	ldr	r0, [sp, #8]
 801bf74:	4632      	mov	r2, r6
 801bf76:	463b      	mov	r3, r7
 801bf78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bf7c:	f7e4 f9a4 	bl	80002c8 <__aeabi_dsub>
 801bf80:	4642      	mov	r2, r8
 801bf82:	464b      	mov	r3, r9
 801bf84:	f7e4 f9a0 	bl	80002c8 <__aeabi_dsub>
 801bf88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bf8c:	e607      	b.n	801bb9e <__ieee754_pow+0x2ce>
 801bf8e:	f04f 0a01 	mov.w	sl, #1
 801bf92:	e6a5      	b.n	801bce0 <__ieee754_pow+0x410>
 801bf94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bfe8 <__ieee754_pow+0x718>
 801bf98:	e613      	b.n	801bbc2 <__ieee754_pow+0x2f2>
 801bf9a:	bf00      	nop
 801bf9c:	f3af 8000 	nop.w
 801bfa0:	4a454eef 	.word	0x4a454eef
 801bfa4:	3fca7e28 	.word	0x3fca7e28
 801bfa8:	93c9db65 	.word	0x93c9db65
 801bfac:	3fcd864a 	.word	0x3fcd864a
 801bfb0:	a91d4101 	.word	0xa91d4101
 801bfb4:	3fd17460 	.word	0x3fd17460
 801bfb8:	518f264d 	.word	0x518f264d
 801bfbc:	3fd55555 	.word	0x3fd55555
 801bfc0:	db6fabff 	.word	0xdb6fabff
 801bfc4:	3fdb6db6 	.word	0x3fdb6db6
 801bfc8:	33333303 	.word	0x33333303
 801bfcc:	3fe33333 	.word	0x3fe33333
 801bfd0:	e0000000 	.word	0xe0000000
 801bfd4:	3feec709 	.word	0x3feec709
 801bfd8:	dc3a03fd 	.word	0xdc3a03fd
 801bfdc:	3feec709 	.word	0x3feec709
 801bfe0:	145b01f5 	.word	0x145b01f5
 801bfe4:	be3e2fe0 	.word	0xbe3e2fe0
 801bfe8:	00000000 	.word	0x00000000
 801bfec:	3ff00000 	.word	0x3ff00000
 801bff0:	43400000 	.word	0x43400000
 801bff4:	0003988e 	.word	0x0003988e
 801bff8:	000bb679 	.word	0x000bb679
 801bffc:	0801dbc0 	.word	0x0801dbc0
 801c000:	3ff00000 	.word	0x3ff00000
 801c004:	40080000 	.word	0x40080000
 801c008:	0801dbe0 	.word	0x0801dbe0
 801c00c:	0801dbd0 	.word	0x0801dbd0
 801c010:	a3b4      	add	r3, pc, #720	; (adr r3, 801c2e4 <__ieee754_pow+0xa14>)
 801c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c016:	4640      	mov	r0, r8
 801c018:	4649      	mov	r1, r9
 801c01a:	f7e4 f957 	bl	80002cc <__adddf3>
 801c01e:	4622      	mov	r2, r4
 801c020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801c024:	462b      	mov	r3, r5
 801c026:	4630      	mov	r0, r6
 801c028:	4639      	mov	r1, r7
 801c02a:	f7e4 f94d 	bl	80002c8 <__aeabi_dsub>
 801c02e:	4602      	mov	r2, r0
 801c030:	460b      	mov	r3, r1
 801c032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801c036:	f7e4 fd8f 	bl	8000b58 <__aeabi_dcmpgt>
 801c03a:	2800      	cmp	r0, #0
 801c03c:	f47f adfe 	bne.w	801bc3c <__ieee754_pow+0x36c>
 801c040:	4aa3      	ldr	r2, [pc, #652]	; (801c2d0 <__ieee754_pow+0xa00>)
 801c042:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c046:	4293      	cmp	r3, r2
 801c048:	f340 810a 	ble.w	801c260 <__ieee754_pow+0x990>
 801c04c:	151b      	asrs	r3, r3, #20
 801c04e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801c052:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801c056:	fa4a f303 	asr.w	r3, sl, r3
 801c05a:	445b      	add	r3, fp
 801c05c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801c060:	4e9c      	ldr	r6, [pc, #624]	; (801c2d4 <__ieee754_pow+0xa04>)
 801c062:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801c066:	4116      	asrs	r6, r2
 801c068:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801c06c:	2000      	movs	r0, #0
 801c06e:	ea23 0106 	bic.w	r1, r3, r6
 801c072:	f1c2 0214 	rsb	r2, r2, #20
 801c076:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801c07a:	fa4a fa02 	asr.w	sl, sl, r2
 801c07e:	f1bb 0f00 	cmp.w	fp, #0
 801c082:	4602      	mov	r2, r0
 801c084:	460b      	mov	r3, r1
 801c086:	4620      	mov	r0, r4
 801c088:	4629      	mov	r1, r5
 801c08a:	bfb8      	it	lt
 801c08c:	f1ca 0a00 	rsblt	sl, sl, #0
 801c090:	f7e4 f91a 	bl	80002c8 <__aeabi_dsub>
 801c094:	e9cd 0100 	strd	r0, r1, [sp]
 801c098:	4642      	mov	r2, r8
 801c09a:	464b      	mov	r3, r9
 801c09c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c0a0:	f7e4 f914 	bl	80002cc <__adddf3>
 801c0a4:	2000      	movs	r0, #0
 801c0a6:	a378      	add	r3, pc, #480	; (adr r3, 801c288 <__ieee754_pow+0x9b8>)
 801c0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ac:	4604      	mov	r4, r0
 801c0ae:	460d      	mov	r5, r1
 801c0b0:	f7e4 fac2 	bl	8000638 <__aeabi_dmul>
 801c0b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c0b8:	4606      	mov	r6, r0
 801c0ba:	460f      	mov	r7, r1
 801c0bc:	4620      	mov	r0, r4
 801c0be:	4629      	mov	r1, r5
 801c0c0:	f7e4 f902 	bl	80002c8 <__aeabi_dsub>
 801c0c4:	4602      	mov	r2, r0
 801c0c6:	460b      	mov	r3, r1
 801c0c8:	4640      	mov	r0, r8
 801c0ca:	4649      	mov	r1, r9
 801c0cc:	f7e4 f8fc 	bl	80002c8 <__aeabi_dsub>
 801c0d0:	a36f      	add	r3, pc, #444	; (adr r3, 801c290 <__ieee754_pow+0x9c0>)
 801c0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0d6:	f7e4 faaf 	bl	8000638 <__aeabi_dmul>
 801c0da:	a36f      	add	r3, pc, #444	; (adr r3, 801c298 <__ieee754_pow+0x9c8>)
 801c0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0e0:	4680      	mov	r8, r0
 801c0e2:	4689      	mov	r9, r1
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	4629      	mov	r1, r5
 801c0e8:	f7e4 faa6 	bl	8000638 <__aeabi_dmul>
 801c0ec:	4602      	mov	r2, r0
 801c0ee:	460b      	mov	r3, r1
 801c0f0:	4640      	mov	r0, r8
 801c0f2:	4649      	mov	r1, r9
 801c0f4:	f7e4 f8ea 	bl	80002cc <__adddf3>
 801c0f8:	4604      	mov	r4, r0
 801c0fa:	460d      	mov	r5, r1
 801c0fc:	4602      	mov	r2, r0
 801c0fe:	460b      	mov	r3, r1
 801c100:	4630      	mov	r0, r6
 801c102:	4639      	mov	r1, r7
 801c104:	f7e4 f8e2 	bl	80002cc <__adddf3>
 801c108:	4632      	mov	r2, r6
 801c10a:	463b      	mov	r3, r7
 801c10c:	4680      	mov	r8, r0
 801c10e:	4689      	mov	r9, r1
 801c110:	f7e4 f8da 	bl	80002c8 <__aeabi_dsub>
 801c114:	4602      	mov	r2, r0
 801c116:	460b      	mov	r3, r1
 801c118:	4620      	mov	r0, r4
 801c11a:	4629      	mov	r1, r5
 801c11c:	f7e4 f8d4 	bl	80002c8 <__aeabi_dsub>
 801c120:	4642      	mov	r2, r8
 801c122:	4606      	mov	r6, r0
 801c124:	460f      	mov	r7, r1
 801c126:	464b      	mov	r3, r9
 801c128:	4640      	mov	r0, r8
 801c12a:	4649      	mov	r1, r9
 801c12c:	f7e4 fa84 	bl	8000638 <__aeabi_dmul>
 801c130:	a35b      	add	r3, pc, #364	; (adr r3, 801c2a0 <__ieee754_pow+0x9d0>)
 801c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c136:	4604      	mov	r4, r0
 801c138:	460d      	mov	r5, r1
 801c13a:	f7e4 fa7d 	bl	8000638 <__aeabi_dmul>
 801c13e:	a35a      	add	r3, pc, #360	; (adr r3, 801c2a8 <__ieee754_pow+0x9d8>)
 801c140:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c144:	f7e4 f8c0 	bl	80002c8 <__aeabi_dsub>
 801c148:	4622      	mov	r2, r4
 801c14a:	462b      	mov	r3, r5
 801c14c:	f7e4 fa74 	bl	8000638 <__aeabi_dmul>
 801c150:	a357      	add	r3, pc, #348	; (adr r3, 801c2b0 <__ieee754_pow+0x9e0>)
 801c152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c156:	f7e4 f8b9 	bl	80002cc <__adddf3>
 801c15a:	4622      	mov	r2, r4
 801c15c:	462b      	mov	r3, r5
 801c15e:	f7e4 fa6b 	bl	8000638 <__aeabi_dmul>
 801c162:	a355      	add	r3, pc, #340	; (adr r3, 801c2b8 <__ieee754_pow+0x9e8>)
 801c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c168:	f7e4 f8ae 	bl	80002c8 <__aeabi_dsub>
 801c16c:	4622      	mov	r2, r4
 801c16e:	462b      	mov	r3, r5
 801c170:	f7e4 fa62 	bl	8000638 <__aeabi_dmul>
 801c174:	a352      	add	r3, pc, #328	; (adr r3, 801c2c0 <__ieee754_pow+0x9f0>)
 801c176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c17a:	f7e4 f8a7 	bl	80002cc <__adddf3>
 801c17e:	4622      	mov	r2, r4
 801c180:	462b      	mov	r3, r5
 801c182:	f7e4 fa59 	bl	8000638 <__aeabi_dmul>
 801c186:	4602      	mov	r2, r0
 801c188:	460b      	mov	r3, r1
 801c18a:	4640      	mov	r0, r8
 801c18c:	4649      	mov	r1, r9
 801c18e:	f7e4 f89b 	bl	80002c8 <__aeabi_dsub>
 801c192:	4604      	mov	r4, r0
 801c194:	460d      	mov	r5, r1
 801c196:	4602      	mov	r2, r0
 801c198:	460b      	mov	r3, r1
 801c19a:	4640      	mov	r0, r8
 801c19c:	4649      	mov	r1, r9
 801c19e:	f7e4 fa4b 	bl	8000638 <__aeabi_dmul>
 801c1a2:	2200      	movs	r2, #0
 801c1a4:	e9cd 0100 	strd	r0, r1, [sp]
 801c1a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	4629      	mov	r1, r5
 801c1b0:	f7e4 f88a 	bl	80002c8 <__aeabi_dsub>
 801c1b4:	4602      	mov	r2, r0
 801c1b6:	460b      	mov	r3, r1
 801c1b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c1bc:	f7e4 fb66 	bl	800088c <__aeabi_ddiv>
 801c1c0:	4632      	mov	r2, r6
 801c1c2:	4604      	mov	r4, r0
 801c1c4:	460d      	mov	r5, r1
 801c1c6:	463b      	mov	r3, r7
 801c1c8:	4640      	mov	r0, r8
 801c1ca:	4649      	mov	r1, r9
 801c1cc:	f7e4 fa34 	bl	8000638 <__aeabi_dmul>
 801c1d0:	4632      	mov	r2, r6
 801c1d2:	463b      	mov	r3, r7
 801c1d4:	f7e4 f87a 	bl	80002cc <__adddf3>
 801c1d8:	4602      	mov	r2, r0
 801c1da:	460b      	mov	r3, r1
 801c1dc:	4620      	mov	r0, r4
 801c1de:	4629      	mov	r1, r5
 801c1e0:	f7e4 f872 	bl	80002c8 <__aeabi_dsub>
 801c1e4:	4642      	mov	r2, r8
 801c1e6:	464b      	mov	r3, r9
 801c1e8:	f7e4 f86e 	bl	80002c8 <__aeabi_dsub>
 801c1ec:	4602      	mov	r2, r0
 801c1ee:	460b      	mov	r3, r1
 801c1f0:	2000      	movs	r0, #0
 801c1f2:	4939      	ldr	r1, [pc, #228]	; (801c2d8 <__ieee754_pow+0xa08>)
 801c1f4:	f7e4 f868 	bl	80002c8 <__aeabi_dsub>
 801c1f8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801c1fc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c200:	4602      	mov	r2, r0
 801c202:	460b      	mov	r3, r1
 801c204:	da2f      	bge.n	801c266 <__ieee754_pow+0x996>
 801c206:	4650      	mov	r0, sl
 801c208:	ec43 2b10 	vmov	d0, r2, r3
 801c20c:	f000 fc80 	bl	801cb10 <scalbn>
 801c210:	ec51 0b10 	vmov	r0, r1, d0
 801c214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c218:	f7ff bbf1 	b.w	801b9fe <__ieee754_pow+0x12e>
 801c21c:	4b2f      	ldr	r3, [pc, #188]	; (801c2dc <__ieee754_pow+0xa0c>)
 801c21e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c222:	429e      	cmp	r6, r3
 801c224:	f77f af0c 	ble.w	801c040 <__ieee754_pow+0x770>
 801c228:	4b2d      	ldr	r3, [pc, #180]	; (801c2e0 <__ieee754_pow+0xa10>)
 801c22a:	440b      	add	r3, r1
 801c22c:	4303      	orrs	r3, r0
 801c22e:	d00b      	beq.n	801c248 <__ieee754_pow+0x978>
 801c230:	a325      	add	r3, pc, #148	; (adr r3, 801c2c8 <__ieee754_pow+0x9f8>)
 801c232:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c23a:	f7e4 f9fd 	bl	8000638 <__aeabi_dmul>
 801c23e:	a322      	add	r3, pc, #136	; (adr r3, 801c2c8 <__ieee754_pow+0x9f8>)
 801c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c244:	f7ff bbdb 	b.w	801b9fe <__ieee754_pow+0x12e>
 801c248:	4622      	mov	r2, r4
 801c24a:	462b      	mov	r3, r5
 801c24c:	f7e4 f83c 	bl	80002c8 <__aeabi_dsub>
 801c250:	4642      	mov	r2, r8
 801c252:	464b      	mov	r3, r9
 801c254:	f7e4 fc76 	bl	8000b44 <__aeabi_dcmpge>
 801c258:	2800      	cmp	r0, #0
 801c25a:	f43f aef1 	beq.w	801c040 <__ieee754_pow+0x770>
 801c25e:	e7e7      	b.n	801c230 <__ieee754_pow+0x960>
 801c260:	f04f 0a00 	mov.w	sl, #0
 801c264:	e718      	b.n	801c098 <__ieee754_pow+0x7c8>
 801c266:	4621      	mov	r1, r4
 801c268:	e7d4      	b.n	801c214 <__ieee754_pow+0x944>
 801c26a:	2000      	movs	r0, #0
 801c26c:	491a      	ldr	r1, [pc, #104]	; (801c2d8 <__ieee754_pow+0xa08>)
 801c26e:	f7ff bb8f 	b.w	801b990 <__ieee754_pow+0xc0>
 801c272:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c276:	f7ff bb8b 	b.w	801b990 <__ieee754_pow+0xc0>
 801c27a:	4630      	mov	r0, r6
 801c27c:	4639      	mov	r1, r7
 801c27e:	f7ff bb87 	b.w	801b990 <__ieee754_pow+0xc0>
 801c282:	4693      	mov	fp, r2
 801c284:	f7ff bb98 	b.w	801b9b8 <__ieee754_pow+0xe8>
 801c288:	00000000 	.word	0x00000000
 801c28c:	3fe62e43 	.word	0x3fe62e43
 801c290:	fefa39ef 	.word	0xfefa39ef
 801c294:	3fe62e42 	.word	0x3fe62e42
 801c298:	0ca86c39 	.word	0x0ca86c39
 801c29c:	be205c61 	.word	0xbe205c61
 801c2a0:	72bea4d0 	.word	0x72bea4d0
 801c2a4:	3e663769 	.word	0x3e663769
 801c2a8:	c5d26bf1 	.word	0xc5d26bf1
 801c2ac:	3ebbbd41 	.word	0x3ebbbd41
 801c2b0:	af25de2c 	.word	0xaf25de2c
 801c2b4:	3f11566a 	.word	0x3f11566a
 801c2b8:	16bebd93 	.word	0x16bebd93
 801c2bc:	3f66c16c 	.word	0x3f66c16c
 801c2c0:	5555553e 	.word	0x5555553e
 801c2c4:	3fc55555 	.word	0x3fc55555
 801c2c8:	c2f8f359 	.word	0xc2f8f359
 801c2cc:	01a56e1f 	.word	0x01a56e1f
 801c2d0:	3fe00000 	.word	0x3fe00000
 801c2d4:	000fffff 	.word	0x000fffff
 801c2d8:	3ff00000 	.word	0x3ff00000
 801c2dc:	4090cbff 	.word	0x4090cbff
 801c2e0:	3f6f3400 	.word	0x3f6f3400
 801c2e4:	652b82fe 	.word	0x652b82fe
 801c2e8:	3c971547 	.word	0x3c971547

0801c2ec <__ieee754_sqrt>:
 801c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2f0:	4955      	ldr	r1, [pc, #340]	; (801c448 <__ieee754_sqrt+0x15c>)
 801c2f2:	ec55 4b10 	vmov	r4, r5, d0
 801c2f6:	43a9      	bics	r1, r5
 801c2f8:	462b      	mov	r3, r5
 801c2fa:	462a      	mov	r2, r5
 801c2fc:	d112      	bne.n	801c324 <__ieee754_sqrt+0x38>
 801c2fe:	ee10 2a10 	vmov	r2, s0
 801c302:	ee10 0a10 	vmov	r0, s0
 801c306:	4629      	mov	r1, r5
 801c308:	f7e4 f996 	bl	8000638 <__aeabi_dmul>
 801c30c:	4602      	mov	r2, r0
 801c30e:	460b      	mov	r3, r1
 801c310:	4620      	mov	r0, r4
 801c312:	4629      	mov	r1, r5
 801c314:	f7e3 ffda 	bl	80002cc <__adddf3>
 801c318:	4604      	mov	r4, r0
 801c31a:	460d      	mov	r5, r1
 801c31c:	ec45 4b10 	vmov	d0, r4, r5
 801c320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c324:	2d00      	cmp	r5, #0
 801c326:	ee10 0a10 	vmov	r0, s0
 801c32a:	4621      	mov	r1, r4
 801c32c:	dc0f      	bgt.n	801c34e <__ieee754_sqrt+0x62>
 801c32e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c332:	4330      	orrs	r0, r6
 801c334:	d0f2      	beq.n	801c31c <__ieee754_sqrt+0x30>
 801c336:	b155      	cbz	r5, 801c34e <__ieee754_sqrt+0x62>
 801c338:	ee10 2a10 	vmov	r2, s0
 801c33c:	4620      	mov	r0, r4
 801c33e:	4629      	mov	r1, r5
 801c340:	f7e3 ffc2 	bl	80002c8 <__aeabi_dsub>
 801c344:	4602      	mov	r2, r0
 801c346:	460b      	mov	r3, r1
 801c348:	f7e4 faa0 	bl	800088c <__aeabi_ddiv>
 801c34c:	e7e4      	b.n	801c318 <__ieee754_sqrt+0x2c>
 801c34e:	151b      	asrs	r3, r3, #20
 801c350:	d073      	beq.n	801c43a <__ieee754_sqrt+0x14e>
 801c352:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c356:	07dd      	lsls	r5, r3, #31
 801c358:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c35c:	bf48      	it	mi
 801c35e:	0fc8      	lsrmi	r0, r1, #31
 801c360:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c364:	bf44      	itt	mi
 801c366:	0049      	lslmi	r1, r1, #1
 801c368:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c36c:	2500      	movs	r5, #0
 801c36e:	1058      	asrs	r0, r3, #1
 801c370:	0fcb      	lsrs	r3, r1, #31
 801c372:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c376:	0049      	lsls	r1, r1, #1
 801c378:	2316      	movs	r3, #22
 801c37a:	462c      	mov	r4, r5
 801c37c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c380:	19a7      	adds	r7, r4, r6
 801c382:	4297      	cmp	r7, r2
 801c384:	bfde      	ittt	le
 801c386:	19bc      	addle	r4, r7, r6
 801c388:	1bd2      	suble	r2, r2, r7
 801c38a:	19ad      	addle	r5, r5, r6
 801c38c:	0fcf      	lsrs	r7, r1, #31
 801c38e:	3b01      	subs	r3, #1
 801c390:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c394:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c398:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c39c:	d1f0      	bne.n	801c380 <__ieee754_sqrt+0x94>
 801c39e:	f04f 0c20 	mov.w	ip, #32
 801c3a2:	469e      	mov	lr, r3
 801c3a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c3a8:	42a2      	cmp	r2, r4
 801c3aa:	eb06 070e 	add.w	r7, r6, lr
 801c3ae:	dc02      	bgt.n	801c3b6 <__ieee754_sqrt+0xca>
 801c3b0:	d112      	bne.n	801c3d8 <__ieee754_sqrt+0xec>
 801c3b2:	428f      	cmp	r7, r1
 801c3b4:	d810      	bhi.n	801c3d8 <__ieee754_sqrt+0xec>
 801c3b6:	2f00      	cmp	r7, #0
 801c3b8:	eb07 0e06 	add.w	lr, r7, r6
 801c3bc:	da42      	bge.n	801c444 <__ieee754_sqrt+0x158>
 801c3be:	f1be 0f00 	cmp.w	lr, #0
 801c3c2:	db3f      	blt.n	801c444 <__ieee754_sqrt+0x158>
 801c3c4:	f104 0801 	add.w	r8, r4, #1
 801c3c8:	1b12      	subs	r2, r2, r4
 801c3ca:	428f      	cmp	r7, r1
 801c3cc:	bf88      	it	hi
 801c3ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c3d2:	1bc9      	subs	r1, r1, r7
 801c3d4:	4433      	add	r3, r6
 801c3d6:	4644      	mov	r4, r8
 801c3d8:	0052      	lsls	r2, r2, #1
 801c3da:	f1bc 0c01 	subs.w	ip, ip, #1
 801c3de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c3e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c3e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c3ea:	d1dd      	bne.n	801c3a8 <__ieee754_sqrt+0xbc>
 801c3ec:	430a      	orrs	r2, r1
 801c3ee:	d006      	beq.n	801c3fe <__ieee754_sqrt+0x112>
 801c3f0:	1c5c      	adds	r4, r3, #1
 801c3f2:	bf13      	iteet	ne
 801c3f4:	3301      	addne	r3, #1
 801c3f6:	3501      	addeq	r5, #1
 801c3f8:	4663      	moveq	r3, ip
 801c3fa:	f023 0301 	bicne.w	r3, r3, #1
 801c3fe:	106a      	asrs	r2, r5, #1
 801c400:	085b      	lsrs	r3, r3, #1
 801c402:	07e9      	lsls	r1, r5, #31
 801c404:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c408:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c40c:	bf48      	it	mi
 801c40e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c412:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c416:	461c      	mov	r4, r3
 801c418:	e780      	b.n	801c31c <__ieee754_sqrt+0x30>
 801c41a:	0aca      	lsrs	r2, r1, #11
 801c41c:	3815      	subs	r0, #21
 801c41e:	0549      	lsls	r1, r1, #21
 801c420:	2a00      	cmp	r2, #0
 801c422:	d0fa      	beq.n	801c41a <__ieee754_sqrt+0x12e>
 801c424:	02d6      	lsls	r6, r2, #11
 801c426:	d50a      	bpl.n	801c43e <__ieee754_sqrt+0x152>
 801c428:	f1c3 0420 	rsb	r4, r3, #32
 801c42c:	fa21 f404 	lsr.w	r4, r1, r4
 801c430:	1e5d      	subs	r5, r3, #1
 801c432:	4099      	lsls	r1, r3
 801c434:	4322      	orrs	r2, r4
 801c436:	1b43      	subs	r3, r0, r5
 801c438:	e78b      	b.n	801c352 <__ieee754_sqrt+0x66>
 801c43a:	4618      	mov	r0, r3
 801c43c:	e7f0      	b.n	801c420 <__ieee754_sqrt+0x134>
 801c43e:	0052      	lsls	r2, r2, #1
 801c440:	3301      	adds	r3, #1
 801c442:	e7ef      	b.n	801c424 <__ieee754_sqrt+0x138>
 801c444:	46a0      	mov	r8, r4
 801c446:	e7bf      	b.n	801c3c8 <__ieee754_sqrt+0xdc>
 801c448:	7ff00000 	.word	0x7ff00000

0801c44c <__ieee754_powf>:
 801c44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c450:	ee10 5a90 	vmov	r5, s1
 801c454:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801c458:	ed2d 8b02 	vpush	{d8}
 801c45c:	eeb0 8a40 	vmov.f32	s16, s0
 801c460:	eef0 8a60 	vmov.f32	s17, s1
 801c464:	f000 8293 	beq.w	801c98e <__ieee754_powf+0x542>
 801c468:	ee10 8a10 	vmov	r8, s0
 801c46c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801c470:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c474:	dc06      	bgt.n	801c484 <__ieee754_powf+0x38>
 801c476:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c47a:	dd0a      	ble.n	801c492 <__ieee754_powf+0x46>
 801c47c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c480:	f000 8285 	beq.w	801c98e <__ieee754_powf+0x542>
 801c484:	ecbd 8b02 	vpop	{d8}
 801c488:	48d9      	ldr	r0, [pc, #868]	; (801c7f0 <__ieee754_powf+0x3a4>)
 801c48a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c48e:	f000 bbc7 	b.w	801cc20 <nanf>
 801c492:	f1b8 0f00 	cmp.w	r8, #0
 801c496:	da1d      	bge.n	801c4d4 <__ieee754_powf+0x88>
 801c498:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801c49c:	da2c      	bge.n	801c4f8 <__ieee754_powf+0xac>
 801c49e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c4a2:	db30      	blt.n	801c506 <__ieee754_powf+0xba>
 801c4a4:	15fb      	asrs	r3, r7, #23
 801c4a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801c4aa:	fa47 f603 	asr.w	r6, r7, r3
 801c4ae:	fa06 f303 	lsl.w	r3, r6, r3
 801c4b2:	42bb      	cmp	r3, r7
 801c4b4:	d127      	bne.n	801c506 <__ieee754_powf+0xba>
 801c4b6:	f006 0601 	and.w	r6, r6, #1
 801c4ba:	f1c6 0602 	rsb	r6, r6, #2
 801c4be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c4c2:	d122      	bne.n	801c50a <__ieee754_powf+0xbe>
 801c4c4:	2d00      	cmp	r5, #0
 801c4c6:	f280 8268 	bge.w	801c99a <__ieee754_powf+0x54e>
 801c4ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c4ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c4d2:	e00d      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c4d4:	2600      	movs	r6, #0
 801c4d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c4da:	d1f0      	bne.n	801c4be <__ieee754_powf+0x72>
 801c4dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c4e0:	f000 8255 	beq.w	801c98e <__ieee754_powf+0x542>
 801c4e4:	dd0a      	ble.n	801c4fc <__ieee754_powf+0xb0>
 801c4e6:	2d00      	cmp	r5, #0
 801c4e8:	f280 8254 	bge.w	801c994 <__ieee754_powf+0x548>
 801c4ec:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801c7f4 <__ieee754_powf+0x3a8>
 801c4f0:	ecbd 8b02 	vpop	{d8}
 801c4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c4f8:	2602      	movs	r6, #2
 801c4fa:	e7ec      	b.n	801c4d6 <__ieee754_powf+0x8a>
 801c4fc:	2d00      	cmp	r5, #0
 801c4fe:	daf5      	bge.n	801c4ec <__ieee754_powf+0xa0>
 801c500:	eeb1 0a68 	vneg.f32	s0, s17
 801c504:	e7f4      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c506:	2600      	movs	r6, #0
 801c508:	e7d9      	b.n	801c4be <__ieee754_powf+0x72>
 801c50a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801c50e:	d102      	bne.n	801c516 <__ieee754_powf+0xca>
 801c510:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c514:	e7ec      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c516:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801c51a:	eeb0 0a48 	vmov.f32	s0, s16
 801c51e:	d108      	bne.n	801c532 <__ieee754_powf+0xe6>
 801c520:	f1b8 0f00 	cmp.w	r8, #0
 801c524:	db05      	blt.n	801c532 <__ieee754_powf+0xe6>
 801c526:	ecbd 8b02 	vpop	{d8}
 801c52a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c52e:	f000 ba4d 	b.w	801c9cc <__ieee754_sqrtf>
 801c532:	f000 fb63 	bl	801cbfc <fabsf>
 801c536:	b124      	cbz	r4, 801c542 <__ieee754_powf+0xf6>
 801c538:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801c53c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801c540:	d117      	bne.n	801c572 <__ieee754_powf+0x126>
 801c542:	2d00      	cmp	r5, #0
 801c544:	bfbc      	itt	lt
 801c546:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801c54a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c54e:	f1b8 0f00 	cmp.w	r8, #0
 801c552:	dacd      	bge.n	801c4f0 <__ieee754_powf+0xa4>
 801c554:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801c558:	ea54 0306 	orrs.w	r3, r4, r6
 801c55c:	d104      	bne.n	801c568 <__ieee754_powf+0x11c>
 801c55e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c562:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c566:	e7c3      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c568:	2e01      	cmp	r6, #1
 801c56a:	d1c1      	bne.n	801c4f0 <__ieee754_powf+0xa4>
 801c56c:	eeb1 0a40 	vneg.f32	s0, s0
 801c570:	e7be      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c572:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801c576:	3801      	subs	r0, #1
 801c578:	ea56 0300 	orrs.w	r3, r6, r0
 801c57c:	d104      	bne.n	801c588 <__ieee754_powf+0x13c>
 801c57e:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c582:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c586:	e7b3      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c588:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801c58c:	dd6d      	ble.n	801c66a <__ieee754_powf+0x21e>
 801c58e:	4b9a      	ldr	r3, [pc, #616]	; (801c7f8 <__ieee754_powf+0x3ac>)
 801c590:	429c      	cmp	r4, r3
 801c592:	dc06      	bgt.n	801c5a2 <__ieee754_powf+0x156>
 801c594:	2d00      	cmp	r5, #0
 801c596:	daa9      	bge.n	801c4ec <__ieee754_powf+0xa0>
 801c598:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801c7fc <__ieee754_powf+0x3b0>
 801c59c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801c5a0:	e7a6      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c5a2:	4b97      	ldr	r3, [pc, #604]	; (801c800 <__ieee754_powf+0x3b4>)
 801c5a4:	429c      	cmp	r4, r3
 801c5a6:	dd02      	ble.n	801c5ae <__ieee754_powf+0x162>
 801c5a8:	2d00      	cmp	r5, #0
 801c5aa:	dcf5      	bgt.n	801c598 <__ieee754_powf+0x14c>
 801c5ac:	e79e      	b.n	801c4ec <__ieee754_powf+0xa0>
 801c5ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c5b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c5b6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801c804 <__ieee754_powf+0x3b8>
 801c5ba:	eef1 6a40 	vneg.f32	s13, s0
 801c5be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801c5c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c5c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c5ca:	eee7 7a40 	vfms.f32	s15, s14, s0
 801c5ce:	ee60 0a00 	vmul.f32	s1, s0, s0
 801c5d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801c808 <__ieee754_powf+0x3bc>
 801c5d6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c5da:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801c80c <__ieee754_powf+0x3c0>
 801c5de:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801c5e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c5e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801c810 <__ieee754_powf+0x3c4>
 801c5ea:	eeb0 6a67 	vmov.f32	s12, s15
 801c5ee:	eea0 6a07 	vfma.f32	s12, s0, s14
 801c5f2:	ee16 3a10 	vmov	r3, s12
 801c5f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c5fa:	f023 030f 	bic.w	r3, r3, #15
 801c5fe:	ee00 3a90 	vmov	s1, r3
 801c602:	eee6 0a87 	vfma.f32	s1, s13, s14
 801c606:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c60a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801c60e:	f025 050f 	bic.w	r5, r5, #15
 801c612:	ee07 5a10 	vmov	s14, r5
 801c616:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c61a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801c61e:	ee07 3a90 	vmov	s15, r3
 801c622:	eee7 0a27 	vfma.f32	s1, s14, s15
 801c626:	3e01      	subs	r6, #1
 801c628:	ea56 0200 	orrs.w	r2, r6, r0
 801c62c:	ee07 5a10 	vmov	s14, r5
 801c630:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c634:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801c638:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c63c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c640:	ee17 4a10 	vmov	r4, s14
 801c644:	bf08      	it	eq
 801c646:	eeb0 8a40 	vmoveq.f32	s16, s0
 801c64a:	2c00      	cmp	r4, #0
 801c64c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c650:	f340 8184 	ble.w	801c95c <__ieee754_powf+0x510>
 801c654:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801c658:	f340 80fc 	ble.w	801c854 <__ieee754_powf+0x408>
 801c65c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801c7fc <__ieee754_powf+0x3b0>
 801c660:	ee28 0a27 	vmul.f32	s0, s16, s15
 801c664:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c668:	e742      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c66a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801c66e:	bfbf      	itttt	lt
 801c670:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801c814 <__ieee754_powf+0x3c8>
 801c674:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c678:	f06f 0217 	mvnlt.w	r2, #23
 801c67c:	ee17 4a90 	vmovlt	r4, s15
 801c680:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801c684:	bfa8      	it	ge
 801c686:	2200      	movge	r2, #0
 801c688:	3b7f      	subs	r3, #127	; 0x7f
 801c68a:	4413      	add	r3, r2
 801c68c:	4a62      	ldr	r2, [pc, #392]	; (801c818 <__ieee754_powf+0x3cc>)
 801c68e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801c692:	4294      	cmp	r4, r2
 801c694:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801c698:	dd06      	ble.n	801c6a8 <__ieee754_powf+0x25c>
 801c69a:	4a60      	ldr	r2, [pc, #384]	; (801c81c <__ieee754_powf+0x3d0>)
 801c69c:	4294      	cmp	r4, r2
 801c69e:	f340 80a5 	ble.w	801c7ec <__ieee754_powf+0x3a0>
 801c6a2:	3301      	adds	r3, #1
 801c6a4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801c6a8:	2400      	movs	r4, #0
 801c6aa:	4a5d      	ldr	r2, [pc, #372]	; (801c820 <__ieee754_powf+0x3d4>)
 801c6ac:	00a7      	lsls	r7, r4, #2
 801c6ae:	443a      	add	r2, r7
 801c6b0:	ee07 1a90 	vmov	s15, r1
 801c6b4:	ed92 7a00 	vldr	s14, [r2]
 801c6b8:	4a5a      	ldr	r2, [pc, #360]	; (801c824 <__ieee754_powf+0x3d8>)
 801c6ba:	ee37 6a27 	vadd.f32	s12, s14, s15
 801c6be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801c6c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c6c6:	1049      	asrs	r1, r1, #1
 801c6c8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801c6cc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801c6d0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801c6d4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801c6d8:	ee06 1a10 	vmov	s12, r1
 801c6dc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801c6e0:	ee14 ca90 	vmov	ip, s9
 801c6e4:	ea02 0c0c 	and.w	ip, r2, ip
 801c6e8:	ee05 ca10 	vmov	s10, ip
 801c6ec:	eeb1 4a45 	vneg.f32	s8, s10
 801c6f0:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c6f4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c6f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801c828 <__ieee754_powf+0x3dc>
 801c6fc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801c700:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801c704:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c708:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801c70c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801c710:	eddf 5a46 	vldr	s11, [pc, #280]	; 801c82c <__ieee754_powf+0x3e0>
 801c714:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801c718:	eddf 5a45 	vldr	s11, [pc, #276]	; 801c830 <__ieee754_powf+0x3e4>
 801c71c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c720:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c804 <__ieee754_powf+0x3b8>
 801c724:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c728:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c834 <__ieee754_powf+0x3e8>
 801c72c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c730:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c838 <__ieee754_powf+0x3ec>
 801c734:	ee75 6a24 	vadd.f32	s13, s10, s9
 801c738:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c73c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c740:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801c744:	eef0 7a65 	vmov.f32	s15, s11
 801c748:	eee3 6a87 	vfma.f32	s13, s7, s14
 801c74c:	eee5 7a05 	vfma.f32	s15, s10, s10
 801c750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c754:	ee17 1a90 	vmov	r1, s15
 801c758:	4011      	ands	r1, r2
 801c75a:	ee07 1a90 	vmov	s15, r1
 801c75e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801c762:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c83c <__ieee754_powf+0x3f0>
 801c766:	eea4 7a05 	vfma.f32	s14, s8, s10
 801c76a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c76e:	ee27 7a24 	vmul.f32	s14, s14, s9
 801c772:	eea7 7a86 	vfma.f32	s14, s15, s12
 801c776:	eeb0 6a47 	vmov.f32	s12, s14
 801c77a:	eea5 6a27 	vfma.f32	s12, s10, s15
 801c77e:	ee16 1a10 	vmov	r1, s12
 801c782:	4011      	ands	r1, r2
 801c784:	ee06 1a90 	vmov	s13, r1
 801c788:	eee4 6a27 	vfma.f32	s13, s8, s15
 801c78c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801c840 <__ieee754_powf+0x3f4>
 801c790:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c794:	ee06 1a10 	vmov	s12, r1
 801c798:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c79c:	eddf 7a29 	vldr	s15, [pc, #164]	; 801c844 <__ieee754_powf+0x3f8>
 801c7a0:	4929      	ldr	r1, [pc, #164]	; (801c848 <__ieee754_powf+0x3fc>)
 801c7a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c7a6:	4439      	add	r1, r7
 801c7a8:	edd1 7a00 	vldr	s15, [r1]
 801c7ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c7b0:	ee07 3a90 	vmov	s15, r3
 801c7b4:	eef0 0a47 	vmov.f32	s1, s14
 801c7b8:	4b24      	ldr	r3, [pc, #144]	; (801c84c <__ieee754_powf+0x400>)
 801c7ba:	eee6 0a25 	vfma.f32	s1, s12, s11
 801c7be:	443b      	add	r3, r7
 801c7c0:	ed93 5a00 	vldr	s10, [r3]
 801c7c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c7c8:	ee70 0a85 	vadd.f32	s1, s1, s10
 801c7cc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801c7d0:	ee17 3a90 	vmov	r3, s15
 801c7d4:	4013      	ands	r3, r2
 801c7d6:	ee07 3a90 	vmov	s15, r3
 801c7da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c7de:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801c7e2:	eee6 7a65 	vfms.f32	s15, s12, s11
 801c7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c7ea:	e70e      	b.n	801c60a <__ieee754_powf+0x1be>
 801c7ec:	2401      	movs	r4, #1
 801c7ee:	e75c      	b.n	801c6aa <__ieee754_powf+0x25e>
 801c7f0:	0801db1d 	.word	0x0801db1d
 801c7f4:	00000000 	.word	0x00000000
 801c7f8:	3f7ffff7 	.word	0x3f7ffff7
 801c7fc:	7149f2ca 	.word	0x7149f2ca
 801c800:	3f800007 	.word	0x3f800007
 801c804:	3eaaaaab 	.word	0x3eaaaaab
 801c808:	36eca570 	.word	0x36eca570
 801c80c:	3fb8aa3b 	.word	0x3fb8aa3b
 801c810:	3fb8aa00 	.word	0x3fb8aa00
 801c814:	4b800000 	.word	0x4b800000
 801c818:	001cc471 	.word	0x001cc471
 801c81c:	005db3d6 	.word	0x005db3d6
 801c820:	0801dbf0 	.word	0x0801dbf0
 801c824:	fffff000 	.word	0xfffff000
 801c828:	3e6c3255 	.word	0x3e6c3255
 801c82c:	3e53f142 	.word	0x3e53f142
 801c830:	3e8ba305 	.word	0x3e8ba305
 801c834:	3edb6db7 	.word	0x3edb6db7
 801c838:	3f19999a 	.word	0x3f19999a
 801c83c:	3f763800 	.word	0x3f763800
 801c840:	3f76384f 	.word	0x3f76384f
 801c844:	369dc3a0 	.word	0x369dc3a0
 801c848:	0801dc00 	.word	0x0801dc00
 801c84c:	0801dbf8 	.word	0x0801dbf8
 801c850:	3338aa3c 	.word	0x3338aa3c
 801c854:	f040 8092 	bne.w	801c97c <__ieee754_powf+0x530>
 801c858:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801c850 <__ieee754_powf+0x404>
 801c85c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c860:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c864:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c86c:	f73f aef6 	bgt.w	801c65c <__ieee754_powf+0x210>
 801c870:	15db      	asrs	r3, r3, #23
 801c872:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801c876:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801c87a:	4103      	asrs	r3, r0
 801c87c:	4423      	add	r3, r4
 801c87e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c882:	4947      	ldr	r1, [pc, #284]	; (801c9a0 <__ieee754_powf+0x554>)
 801c884:	3a7f      	subs	r2, #127	; 0x7f
 801c886:	4111      	asrs	r1, r2
 801c888:	ea23 0101 	bic.w	r1, r3, r1
 801c88c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801c890:	ee07 1a10 	vmov	s14, r1
 801c894:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801c898:	f1c2 0217 	rsb	r2, r2, #23
 801c89c:	4110      	asrs	r0, r2
 801c89e:	2c00      	cmp	r4, #0
 801c8a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c8a4:	bfb8      	it	lt
 801c8a6:	4240      	neglt	r0, r0
 801c8a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c8ac:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c9a4 <__ieee754_powf+0x558>
 801c8b0:	ee17 3a10 	vmov	r3, s14
 801c8b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c8b8:	f023 030f 	bic.w	r3, r3, #15
 801c8bc:	ee07 3a10 	vmov	s14, r3
 801c8c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c8c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c8c8:	eddf 7a37 	vldr	s15, [pc, #220]	; 801c9a8 <__ieee754_powf+0x55c>
 801c8cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c8d0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801c8d4:	eddf 6a35 	vldr	s13, [pc, #212]	; 801c9ac <__ieee754_powf+0x560>
 801c8d8:	eeb0 0a67 	vmov.f32	s0, s15
 801c8dc:	eea7 0a26 	vfma.f32	s0, s14, s13
 801c8e0:	eeb0 6a40 	vmov.f32	s12, s0
 801c8e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 801c8e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c8ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c8f0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801c9b0 <__ieee754_powf+0x564>
 801c8f4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801c9b4 <__ieee754_powf+0x568>
 801c8f8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801c8fc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801c9b8 <__ieee754_powf+0x56c>
 801c900:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c904:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801c9bc <__ieee754_powf+0x570>
 801c908:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c90c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801c9c0 <__ieee754_powf+0x574>
 801c910:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c914:	eeb0 6a40 	vmov.f32	s12, s0
 801c918:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c91c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c920:	eeb0 7a46 	vmov.f32	s14, s12
 801c924:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c928:	ee20 6a06 	vmul.f32	s12, s0, s12
 801c92c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801c930:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c934:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c938:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c93c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c940:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c944:	ee10 3a10 	vmov	r3, s0
 801c948:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c94c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c950:	da1a      	bge.n	801c988 <__ieee754_powf+0x53c>
 801c952:	f000 f9c5 	bl	801cce0 <scalbnf>
 801c956:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c95a:	e5c9      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c95c:	4a19      	ldr	r2, [pc, #100]	; (801c9c4 <__ieee754_powf+0x578>)
 801c95e:	4293      	cmp	r3, r2
 801c960:	dd02      	ble.n	801c968 <__ieee754_powf+0x51c>
 801c962:	eddf 7a19 	vldr	s15, [pc, #100]	; 801c9c8 <__ieee754_powf+0x57c>
 801c966:	e67b      	b.n	801c660 <__ieee754_powf+0x214>
 801c968:	d108      	bne.n	801c97c <__ieee754_powf+0x530>
 801c96a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c96e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c976:	f6ff af7b 	blt.w	801c870 <__ieee754_powf+0x424>
 801c97a:	e7f2      	b.n	801c962 <__ieee754_powf+0x516>
 801c97c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801c980:	f73f af76 	bgt.w	801c870 <__ieee754_powf+0x424>
 801c984:	2000      	movs	r0, #0
 801c986:	e78f      	b.n	801c8a8 <__ieee754_powf+0x45c>
 801c988:	ee00 3a10 	vmov	s0, r3
 801c98c:	e7e3      	b.n	801c956 <__ieee754_powf+0x50a>
 801c98e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c992:	e5ad      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c994:	eeb0 0a68 	vmov.f32	s0, s17
 801c998:	e5aa      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c99a:	eeb0 0a48 	vmov.f32	s0, s16
 801c99e:	e5a7      	b.n	801c4f0 <__ieee754_powf+0xa4>
 801c9a0:	007fffff 	.word	0x007fffff
 801c9a4:	3f317218 	.word	0x3f317218
 801c9a8:	35bfbe8c 	.word	0x35bfbe8c
 801c9ac:	3f317200 	.word	0x3f317200
 801c9b0:	3331bb4c 	.word	0x3331bb4c
 801c9b4:	b5ddea0e 	.word	0xb5ddea0e
 801c9b8:	388ab355 	.word	0x388ab355
 801c9bc:	bb360b61 	.word	0xbb360b61
 801c9c0:	3e2aaaab 	.word	0x3e2aaaab
 801c9c4:	43160000 	.word	0x43160000
 801c9c8:	0da24260 	.word	0x0da24260

0801c9cc <__ieee754_sqrtf>:
 801c9cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c9d0:	4770      	bx	lr

0801c9d2 <fabs>:
 801c9d2:	ec51 0b10 	vmov	r0, r1, d0
 801c9d6:	ee10 2a10 	vmov	r2, s0
 801c9da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c9de:	ec43 2b10 	vmov	d0, r2, r3
 801c9e2:	4770      	bx	lr

0801c9e4 <finite>:
 801c9e4:	ee10 3a90 	vmov	r3, s1
 801c9e8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801c9ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c9f0:	0fc0      	lsrs	r0, r0, #31
 801c9f2:	4770      	bx	lr

0801c9f4 <matherr>:
 801c9f4:	2000      	movs	r0, #0
 801c9f6:	4770      	bx	lr

0801c9f8 <nan>:
 801c9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ca00 <nan+0x8>
 801c9fc:	4770      	bx	lr
 801c9fe:	bf00      	nop
 801ca00:	00000000 	.word	0x00000000
 801ca04:	7ff80000 	.word	0x7ff80000

0801ca08 <rint>:
 801ca08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca0a:	ec51 0b10 	vmov	r0, r1, d0
 801ca0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ca12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ca16:	2e13      	cmp	r6, #19
 801ca18:	460b      	mov	r3, r1
 801ca1a:	ee10 4a10 	vmov	r4, s0
 801ca1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ca22:	dc56      	bgt.n	801cad2 <rint+0xca>
 801ca24:	2e00      	cmp	r6, #0
 801ca26:	da2b      	bge.n	801ca80 <rint+0x78>
 801ca28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801ca2c:	4302      	orrs	r2, r0
 801ca2e:	d023      	beq.n	801ca78 <rint+0x70>
 801ca30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801ca34:	4302      	orrs	r2, r0
 801ca36:	4254      	negs	r4, r2
 801ca38:	4314      	orrs	r4, r2
 801ca3a:	0c4b      	lsrs	r3, r1, #17
 801ca3c:	0b24      	lsrs	r4, r4, #12
 801ca3e:	045b      	lsls	r3, r3, #17
 801ca40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801ca44:	ea44 0103 	orr.w	r1, r4, r3
 801ca48:	460b      	mov	r3, r1
 801ca4a:	492f      	ldr	r1, [pc, #188]	; (801cb08 <rint+0x100>)
 801ca4c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801ca50:	e9d1 6700 	ldrd	r6, r7, [r1]
 801ca54:	4602      	mov	r2, r0
 801ca56:	4639      	mov	r1, r7
 801ca58:	4630      	mov	r0, r6
 801ca5a:	f7e3 fc37 	bl	80002cc <__adddf3>
 801ca5e:	e9cd 0100 	strd	r0, r1, [sp]
 801ca62:	463b      	mov	r3, r7
 801ca64:	4632      	mov	r2, r6
 801ca66:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ca6a:	f7e3 fc2d 	bl	80002c8 <__aeabi_dsub>
 801ca6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ca72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ca76:	4639      	mov	r1, r7
 801ca78:	ec41 0b10 	vmov	d0, r0, r1
 801ca7c:	b003      	add	sp, #12
 801ca7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca80:	4a22      	ldr	r2, [pc, #136]	; (801cb0c <rint+0x104>)
 801ca82:	4132      	asrs	r2, r6
 801ca84:	ea01 0702 	and.w	r7, r1, r2
 801ca88:	4307      	orrs	r7, r0
 801ca8a:	d0f5      	beq.n	801ca78 <rint+0x70>
 801ca8c:	0852      	lsrs	r2, r2, #1
 801ca8e:	4011      	ands	r1, r2
 801ca90:	430c      	orrs	r4, r1
 801ca92:	d00b      	beq.n	801caac <rint+0xa4>
 801ca94:	ea23 0202 	bic.w	r2, r3, r2
 801ca98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ca9c:	2e13      	cmp	r6, #19
 801ca9e:	fa43 f306 	asr.w	r3, r3, r6
 801caa2:	bf0c      	ite	eq
 801caa4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801caa8:	2400      	movne	r4, #0
 801caaa:	4313      	orrs	r3, r2
 801caac:	4916      	ldr	r1, [pc, #88]	; (801cb08 <rint+0x100>)
 801caae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801cab2:	4622      	mov	r2, r4
 801cab4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801cab8:	4620      	mov	r0, r4
 801caba:	4629      	mov	r1, r5
 801cabc:	f7e3 fc06 	bl	80002cc <__adddf3>
 801cac0:	e9cd 0100 	strd	r0, r1, [sp]
 801cac4:	4622      	mov	r2, r4
 801cac6:	462b      	mov	r3, r5
 801cac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cacc:	f7e3 fbfc 	bl	80002c8 <__aeabi_dsub>
 801cad0:	e7d2      	b.n	801ca78 <rint+0x70>
 801cad2:	2e33      	cmp	r6, #51	; 0x33
 801cad4:	dd07      	ble.n	801cae6 <rint+0xde>
 801cad6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801cada:	d1cd      	bne.n	801ca78 <rint+0x70>
 801cadc:	ee10 2a10 	vmov	r2, s0
 801cae0:	f7e3 fbf4 	bl	80002cc <__adddf3>
 801cae4:	e7c8      	b.n	801ca78 <rint+0x70>
 801cae6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801caea:	f04f 32ff 	mov.w	r2, #4294967295
 801caee:	40f2      	lsrs	r2, r6
 801caf0:	4210      	tst	r0, r2
 801caf2:	d0c1      	beq.n	801ca78 <rint+0x70>
 801caf4:	0852      	lsrs	r2, r2, #1
 801caf6:	4210      	tst	r0, r2
 801caf8:	bf1f      	itttt	ne
 801cafa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801cafe:	ea20 0202 	bicne.w	r2, r0, r2
 801cb02:	4134      	asrne	r4, r6
 801cb04:	4314      	orrne	r4, r2
 801cb06:	e7d1      	b.n	801caac <rint+0xa4>
 801cb08:	0801dc08 	.word	0x0801dc08
 801cb0c:	000fffff 	.word	0x000fffff

0801cb10 <scalbn>:
 801cb10:	b570      	push	{r4, r5, r6, lr}
 801cb12:	ec55 4b10 	vmov	r4, r5, d0
 801cb16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801cb1a:	4606      	mov	r6, r0
 801cb1c:	462b      	mov	r3, r5
 801cb1e:	b9aa      	cbnz	r2, 801cb4c <scalbn+0x3c>
 801cb20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801cb24:	4323      	orrs	r3, r4
 801cb26:	d03b      	beq.n	801cba0 <scalbn+0x90>
 801cb28:	4b31      	ldr	r3, [pc, #196]	; (801cbf0 <scalbn+0xe0>)
 801cb2a:	4629      	mov	r1, r5
 801cb2c:	2200      	movs	r2, #0
 801cb2e:	ee10 0a10 	vmov	r0, s0
 801cb32:	f7e3 fd81 	bl	8000638 <__aeabi_dmul>
 801cb36:	4b2f      	ldr	r3, [pc, #188]	; (801cbf4 <scalbn+0xe4>)
 801cb38:	429e      	cmp	r6, r3
 801cb3a:	4604      	mov	r4, r0
 801cb3c:	460d      	mov	r5, r1
 801cb3e:	da12      	bge.n	801cb66 <scalbn+0x56>
 801cb40:	a327      	add	r3, pc, #156	; (adr r3, 801cbe0 <scalbn+0xd0>)
 801cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb46:	f7e3 fd77 	bl	8000638 <__aeabi_dmul>
 801cb4a:	e009      	b.n	801cb60 <scalbn+0x50>
 801cb4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801cb50:	428a      	cmp	r2, r1
 801cb52:	d10c      	bne.n	801cb6e <scalbn+0x5e>
 801cb54:	ee10 2a10 	vmov	r2, s0
 801cb58:	4620      	mov	r0, r4
 801cb5a:	4629      	mov	r1, r5
 801cb5c:	f7e3 fbb6 	bl	80002cc <__adddf3>
 801cb60:	4604      	mov	r4, r0
 801cb62:	460d      	mov	r5, r1
 801cb64:	e01c      	b.n	801cba0 <scalbn+0x90>
 801cb66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801cb6a:	460b      	mov	r3, r1
 801cb6c:	3a36      	subs	r2, #54	; 0x36
 801cb6e:	4432      	add	r2, r6
 801cb70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801cb74:	428a      	cmp	r2, r1
 801cb76:	dd0b      	ble.n	801cb90 <scalbn+0x80>
 801cb78:	ec45 4b11 	vmov	d1, r4, r5
 801cb7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801cbe8 <scalbn+0xd8>
 801cb80:	f000 f90e 	bl	801cda0 <copysign>
 801cb84:	a318      	add	r3, pc, #96	; (adr r3, 801cbe8 <scalbn+0xd8>)
 801cb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb8a:	ec51 0b10 	vmov	r0, r1, d0
 801cb8e:	e7da      	b.n	801cb46 <scalbn+0x36>
 801cb90:	2a00      	cmp	r2, #0
 801cb92:	dd08      	ble.n	801cba6 <scalbn+0x96>
 801cb94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cb98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cb9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cba0:	ec45 4b10 	vmov	d0, r4, r5
 801cba4:	bd70      	pop	{r4, r5, r6, pc}
 801cba6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801cbaa:	da0d      	bge.n	801cbc8 <scalbn+0xb8>
 801cbac:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cbb0:	429e      	cmp	r6, r3
 801cbb2:	ec45 4b11 	vmov	d1, r4, r5
 801cbb6:	dce1      	bgt.n	801cb7c <scalbn+0x6c>
 801cbb8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801cbe0 <scalbn+0xd0>
 801cbbc:	f000 f8f0 	bl	801cda0 <copysign>
 801cbc0:	a307      	add	r3, pc, #28	; (adr r3, 801cbe0 <scalbn+0xd0>)
 801cbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbc6:	e7e0      	b.n	801cb8a <scalbn+0x7a>
 801cbc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801cbcc:	3236      	adds	r2, #54	; 0x36
 801cbce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801cbd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	4629      	mov	r1, r5
 801cbda:	2200      	movs	r2, #0
 801cbdc:	4b06      	ldr	r3, [pc, #24]	; (801cbf8 <scalbn+0xe8>)
 801cbde:	e7b2      	b.n	801cb46 <scalbn+0x36>
 801cbe0:	c2f8f359 	.word	0xc2f8f359
 801cbe4:	01a56e1f 	.word	0x01a56e1f
 801cbe8:	8800759c 	.word	0x8800759c
 801cbec:	7e37e43c 	.word	0x7e37e43c
 801cbf0:	43500000 	.word	0x43500000
 801cbf4:	ffff3cb0 	.word	0xffff3cb0
 801cbf8:	3c900000 	.word	0x3c900000

0801cbfc <fabsf>:
 801cbfc:	ee10 3a10 	vmov	r3, s0
 801cc00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cc04:	ee00 3a10 	vmov	s0, r3
 801cc08:	4770      	bx	lr

0801cc0a <finitef>:
 801cc0a:	ee10 3a10 	vmov	r3, s0
 801cc0e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801cc12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801cc16:	bfac      	ite	ge
 801cc18:	2000      	movge	r0, #0
 801cc1a:	2001      	movlt	r0, #1
 801cc1c:	4770      	bx	lr
	...

0801cc20 <nanf>:
 801cc20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801cc28 <nanf+0x8>
 801cc24:	4770      	bx	lr
 801cc26:	bf00      	nop
 801cc28:	7fc00000 	.word	0x7fc00000

0801cc2c <rintf>:
 801cc2c:	b513      	push	{r0, r1, r4, lr}
 801cc2e:	ee10 1a10 	vmov	r1, s0
 801cc32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cc36:	0ddc      	lsrs	r4, r3, #23
 801cc38:	3c7f      	subs	r4, #127	; 0x7f
 801cc3a:	2c16      	cmp	r4, #22
 801cc3c:	dc46      	bgt.n	801cccc <rintf+0xa0>
 801cc3e:	b32b      	cbz	r3, 801cc8c <rintf+0x60>
 801cc40:	2c00      	cmp	r4, #0
 801cc42:	ee10 2a10 	vmov	r2, s0
 801cc46:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801cc4a:	da21      	bge.n	801cc90 <rintf+0x64>
 801cc4c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801cc50:	425b      	negs	r3, r3
 801cc52:	4a21      	ldr	r2, [pc, #132]	; (801ccd8 <rintf+0xac>)
 801cc54:	0a5b      	lsrs	r3, r3, #9
 801cc56:	0d09      	lsrs	r1, r1, #20
 801cc58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801cc5c:	0509      	lsls	r1, r1, #20
 801cc5e:	430b      	orrs	r3, r1
 801cc60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801cc64:	ee07 3a90 	vmov	s15, r3
 801cc68:	edd2 6a00 	vldr	s13, [r2]
 801cc6c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801cc70:	ed8d 7a01 	vstr	s14, [sp, #4]
 801cc74:	eddd 7a01 	vldr	s15, [sp, #4]
 801cc78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801cc7c:	ee17 3a90 	vmov	r3, s15
 801cc80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cc84:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801cc88:	ee00 3a10 	vmov	s0, r3
 801cc8c:	b002      	add	sp, #8
 801cc8e:	bd10      	pop	{r4, pc}
 801cc90:	4b12      	ldr	r3, [pc, #72]	; (801ccdc <rintf+0xb0>)
 801cc92:	4123      	asrs	r3, r4
 801cc94:	4219      	tst	r1, r3
 801cc96:	d0f9      	beq.n	801cc8c <rintf+0x60>
 801cc98:	085b      	lsrs	r3, r3, #1
 801cc9a:	4219      	tst	r1, r3
 801cc9c:	d006      	beq.n	801ccac <rintf+0x80>
 801cc9e:	ea21 0203 	bic.w	r2, r1, r3
 801cca2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801cca6:	fa43 f404 	asr.w	r4, r3, r4
 801ccaa:	4322      	orrs	r2, r4
 801ccac:	4b0a      	ldr	r3, [pc, #40]	; (801ccd8 <rintf+0xac>)
 801ccae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ccb2:	ed90 7a00 	vldr	s14, [r0]
 801ccb6:	ee07 2a90 	vmov	s15, r2
 801ccba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ccbe:	edcd 7a01 	vstr	s15, [sp, #4]
 801ccc2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ccc6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ccca:	e7df      	b.n	801cc8c <rintf+0x60>
 801cccc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ccd0:	d3dc      	bcc.n	801cc8c <rintf+0x60>
 801ccd2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ccd6:	e7d9      	b.n	801cc8c <rintf+0x60>
 801ccd8:	0801dc18 	.word	0x0801dc18
 801ccdc:	007fffff 	.word	0x007fffff

0801cce0 <scalbnf>:
 801cce0:	b508      	push	{r3, lr}
 801cce2:	ee10 2a10 	vmov	r2, s0
 801cce6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801ccea:	ed2d 8b02 	vpush	{d8}
 801ccee:	eef0 0a40 	vmov.f32	s1, s0
 801ccf2:	d004      	beq.n	801ccfe <scalbnf+0x1e>
 801ccf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ccf8:	d306      	bcc.n	801cd08 <scalbnf+0x28>
 801ccfa:	ee70 0a00 	vadd.f32	s1, s0, s0
 801ccfe:	ecbd 8b02 	vpop	{d8}
 801cd02:	eeb0 0a60 	vmov.f32	s0, s1
 801cd06:	bd08      	pop	{r3, pc}
 801cd08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cd0c:	d21c      	bcs.n	801cd48 <scalbnf+0x68>
 801cd0e:	4b1f      	ldr	r3, [pc, #124]	; (801cd8c <scalbnf+0xac>)
 801cd10:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801cd90 <scalbnf+0xb0>
 801cd14:	4298      	cmp	r0, r3
 801cd16:	ee60 0a27 	vmul.f32	s1, s0, s15
 801cd1a:	db10      	blt.n	801cd3e <scalbnf+0x5e>
 801cd1c:	ee10 2a90 	vmov	r2, s1
 801cd20:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801cd24:	3b19      	subs	r3, #25
 801cd26:	4403      	add	r3, r0
 801cd28:	2bfe      	cmp	r3, #254	; 0xfe
 801cd2a:	dd0f      	ble.n	801cd4c <scalbnf+0x6c>
 801cd2c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801cd94 <scalbnf+0xb4>
 801cd30:	eeb0 0a48 	vmov.f32	s0, s16
 801cd34:	f000 f843 	bl	801cdbe <copysignf>
 801cd38:	ee60 0a08 	vmul.f32	s1, s0, s16
 801cd3c:	e7df      	b.n	801ccfe <scalbnf+0x1e>
 801cd3e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801cd98 <scalbnf+0xb8>
 801cd42:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801cd46:	e7da      	b.n	801ccfe <scalbnf+0x1e>
 801cd48:	0ddb      	lsrs	r3, r3, #23
 801cd4a:	e7ec      	b.n	801cd26 <scalbnf+0x46>
 801cd4c:	2b00      	cmp	r3, #0
 801cd4e:	dd06      	ble.n	801cd5e <scalbnf+0x7e>
 801cd50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cd54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cd58:	ee00 3a90 	vmov	s1, r3
 801cd5c:	e7cf      	b.n	801ccfe <scalbnf+0x1e>
 801cd5e:	f113 0f16 	cmn.w	r3, #22
 801cd62:	da06      	bge.n	801cd72 <scalbnf+0x92>
 801cd64:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cd68:	4298      	cmp	r0, r3
 801cd6a:	dcdf      	bgt.n	801cd2c <scalbnf+0x4c>
 801cd6c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801cd98 <scalbnf+0xb8>
 801cd70:	e7de      	b.n	801cd30 <scalbnf+0x50>
 801cd72:	3319      	adds	r3, #25
 801cd74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cd78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cd7c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801cd9c <scalbnf+0xbc>
 801cd80:	ee07 3a10 	vmov	s14, r3
 801cd84:	ee67 0a27 	vmul.f32	s1, s14, s15
 801cd88:	e7b9      	b.n	801ccfe <scalbnf+0x1e>
 801cd8a:	bf00      	nop
 801cd8c:	ffff3cb0 	.word	0xffff3cb0
 801cd90:	4c000000 	.word	0x4c000000
 801cd94:	7149f2ca 	.word	0x7149f2ca
 801cd98:	0da24260 	.word	0x0da24260
 801cd9c:	33000000 	.word	0x33000000

0801cda0 <copysign>:
 801cda0:	ec51 0b10 	vmov	r0, r1, d0
 801cda4:	ee11 0a90 	vmov	r0, s3
 801cda8:	ee10 2a10 	vmov	r2, s0
 801cdac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cdb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801cdb4:	ea41 0300 	orr.w	r3, r1, r0
 801cdb8:	ec43 2b10 	vmov	d0, r2, r3
 801cdbc:	4770      	bx	lr

0801cdbe <copysignf>:
 801cdbe:	ee10 3a10 	vmov	r3, s0
 801cdc2:	ee10 2a90 	vmov	r2, s1
 801cdc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cdca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801cdce:	4313      	orrs	r3, r2
 801cdd0:	ee00 3a10 	vmov	s0, r3
 801cdd4:	4770      	bx	lr
	...

0801cdd8 <_init>:
 801cdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdda:	bf00      	nop
 801cddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdde:	bc08      	pop	{r3}
 801cde0:	469e      	mov	lr, r3
 801cde2:	4770      	bx	lr

0801cde4 <_fini>:
 801cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cde6:	bf00      	nop
 801cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdea:	bc08      	pop	{r3}
 801cdec:	469e      	mov	lr, r3
 801cdee:	4770      	bx	lr
