
mb_working_airbrakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019f00  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d48  0801a0d0  0801a0d0  0002a0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae18  0801ae18  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae18  0801ae18  0002ae18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae20  0801ae20  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae20  0801ae20  0002ae20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae24  0801ae24  0002ae24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801ae28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00028d44  200001fc  0801b024  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20028f40  0801b024  00038f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043807  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000081d3  00000000  00000000  00073a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002878  00000000  00000000  0007bc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024d8  00000000  00000000  0007e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000325ae  00000000  00000000  00080958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c141  00000000  00000000  000b2f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001052f3  00000000  00000000  000df047  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e433a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b228  00000000  00000000  001e43b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a0b8 	.word	0x0801a0b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801a0b8 	.word	0x0801a0b8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b972 	b.w	8000f34 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	4604      	mov	r4, r0
 8000c70:	4688      	mov	r8, r1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d14b      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c76:	428a      	cmp	r2, r1
 8000c78:	4615      	mov	r5, r2
 8000c7a:	d967      	bls.n	8000d4c <__udivmoddi4+0xe4>
 8000c7c:	fab2 f282 	clz	r2, r2
 8000c80:	b14a      	cbz	r2, 8000c96 <__udivmoddi4+0x2e>
 8000c82:	f1c2 0720 	rsb	r7, r2, #32
 8000c86:	fa01 f302 	lsl.w	r3, r1, r2
 8000c8a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c8e:	4095      	lsls	r5, r2
 8000c90:	ea47 0803 	orr.w	r8, r7, r3
 8000c94:	4094      	lsls	r4, r2
 8000c96:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c9a:	0c23      	lsrs	r3, r4, #16
 8000c9c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ca0:	fa1f fc85 	uxth.w	ip, r5
 8000ca4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ca8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cac:	fb07 f10c 	mul.w	r1, r7, ip
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x60>
 8000cb4:	18eb      	adds	r3, r5, r3
 8000cb6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cba:	f080 811b 	bcs.w	8000ef4 <__udivmoddi4+0x28c>
 8000cbe:	4299      	cmp	r1, r3
 8000cc0:	f240 8118 	bls.w	8000ef4 <__udivmoddi4+0x28c>
 8000cc4:	3f02      	subs	r7, #2
 8000cc6:	442b      	add	r3, r5
 8000cc8:	1a5b      	subs	r3, r3, r1
 8000cca:	b2a4      	uxth	r4, r4
 8000ccc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cdc:	45a4      	cmp	ip, r4
 8000cde:	d909      	bls.n	8000cf4 <__udivmoddi4+0x8c>
 8000ce0:	192c      	adds	r4, r5, r4
 8000ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ce6:	f080 8107 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	f240 8104 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	442c      	add	r4, r5
 8000cf4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cf8:	eba4 040c 	sub.w	r4, r4, ip
 8000cfc:	2700      	movs	r7, #0
 8000cfe:	b11e      	cbz	r6, 8000d08 <__udivmoddi4+0xa0>
 8000d00:	40d4      	lsrs	r4, r2
 8000d02:	2300      	movs	r3, #0
 8000d04:	e9c6 4300 	strd	r4, r3, [r6]
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0xbe>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80eb 	beq.w	8000eee <__udivmoddi4+0x286>
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d1e:	4638      	mov	r0, r7
 8000d20:	4639      	mov	r1, r7
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	fab3 f783 	clz	r7, r3
 8000d2a:	2f00      	cmp	r7, #0
 8000d2c:	d147      	bne.n	8000dbe <__udivmoddi4+0x156>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d302      	bcc.n	8000d38 <__udivmoddi4+0xd0>
 8000d32:	4282      	cmp	r2, r0
 8000d34:	f200 80fa 	bhi.w	8000f2c <__udivmoddi4+0x2c4>
 8000d38:	1a84      	subs	r4, r0, r2
 8000d3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d3e:	2001      	movs	r0, #1
 8000d40:	4698      	mov	r8, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d0e0      	beq.n	8000d08 <__udivmoddi4+0xa0>
 8000d46:	e9c6 4800 	strd	r4, r8, [r6]
 8000d4a:	e7dd      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000d4c:	b902      	cbnz	r2, 8000d50 <__udivmoddi4+0xe8>
 8000d4e:	deff      	udf	#255	; 0xff
 8000d50:	fab2 f282 	clz	r2, r2
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f040 808f 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d5a:	1b49      	subs	r1, r1, r5
 8000d5c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d60:	fa1f f885 	uxth.w	r8, r5
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d6a:	0c23      	lsrs	r3, r4, #16
 8000d6c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d74:	fb08 f10c 	mul.w	r1, r8, ip
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7c:	18eb      	adds	r3, r5, r3
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4299      	cmp	r1, r3
 8000d86:	f200 80cd 	bhi.w	8000f24 <__udivmoddi4+0x2bc>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d98:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x14c>
 8000da4:	192c      	adds	r4, r5, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x14a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80b6 	bhi.w	8000f1e <__udivmoddi4+0x2b6>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e79f      	b.n	8000cfe <__udivmoddi4+0x96>
 8000dbe:	f1c7 0c20 	rsb	ip, r7, #32
 8000dc2:	40bb      	lsls	r3, r7
 8000dc4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dc8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dcc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dd0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dd4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dd8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ddc:	4325      	orrs	r5, r4
 8000dde:	fbb3 f9f8 	udiv	r9, r3, r8
 8000de2:	0c2c      	lsrs	r4, r5, #16
 8000de4:	fb08 3319 	mls	r3, r8, r9, r3
 8000de8:	fa1f fa8e 	uxth.w	sl, lr
 8000dec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000df0:	fb09 f40a 	mul.w	r4, r9, sl
 8000df4:	429c      	cmp	r4, r3
 8000df6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dfa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1e 0303 	adds.w	r3, lr, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	f080 8087 	bcs.w	8000f1a <__udivmoddi4+0x2b2>
 8000e0c:	429c      	cmp	r4, r3
 8000e0e:	f240 8084 	bls.w	8000f1a <__udivmoddi4+0x2b2>
 8000e12:	f1a9 0902 	sub.w	r9, r9, #2
 8000e16:	4473      	add	r3, lr
 8000e18:	1b1b      	subs	r3, r3, r4
 8000e1a:	b2ad      	uxth	r5, r5
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3310 	mls	r3, r8, r0, r3
 8000e24:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e28:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e2c:	45a2      	cmp	sl, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1e 0404 	adds.w	r4, lr, r4
 8000e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e38:	d26b      	bcs.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3a:	45a2      	cmp	sl, r4
 8000e3c:	d969      	bls.n	8000f12 <__udivmoddi4+0x2aa>
 8000e3e:	3802      	subs	r0, #2
 8000e40:	4474      	add	r4, lr
 8000e42:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	eba4 040a 	sub.w	r4, r4, sl
 8000e4e:	454c      	cmp	r4, r9
 8000e50:	46c2      	mov	sl, r8
 8000e52:	464b      	mov	r3, r9
 8000e54:	d354      	bcc.n	8000f00 <__udivmoddi4+0x298>
 8000e56:	d051      	beq.n	8000efc <__udivmoddi4+0x294>
 8000e58:	2e00      	cmp	r6, #0
 8000e5a:	d069      	beq.n	8000f30 <__udivmoddi4+0x2c8>
 8000e5c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e60:	eb64 0403 	sbc.w	r4, r4, r3
 8000e64:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e68:	40fd      	lsrs	r5, r7
 8000e6a:	40fc      	lsrs	r4, r7
 8000e6c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e70:	e9c6 5400 	strd	r5, r4, [r6]
 8000e74:	2700      	movs	r7, #0
 8000e76:	e747      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e80:	4095      	lsls	r5, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	fa21 f303 	lsr.w	r3, r1, r3
 8000e8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e8e:	4338      	orrs	r0, r7
 8000e90:	0c01      	lsrs	r1, r0, #16
 8000e92:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e96:	fa1f f885 	uxth.w	r8, r5
 8000e9a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e9e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea2:	fb07 f308 	mul.w	r3, r7, r8
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eac:	d907      	bls.n	8000ebe <__udivmoddi4+0x256>
 8000eae:	1869      	adds	r1, r5, r1
 8000eb0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000eb4:	d22f      	bcs.n	8000f16 <__udivmoddi4+0x2ae>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d92d      	bls.n	8000f16 <__udivmoddi4+0x2ae>
 8000eba:	3f02      	subs	r7, #2
 8000ebc:	4429      	add	r1, r5
 8000ebe:	1acb      	subs	r3, r1, r3
 8000ec0:	b281      	uxth	r1, r0
 8000ec2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ece:	fb00 f308 	mul.w	r3, r0, r8
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x27e>
 8000ed6:	1869      	adds	r1, r5, r1
 8000ed8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000edc:	d217      	bcs.n	8000f0e <__udivmoddi4+0x2a6>
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	d915      	bls.n	8000f0e <__udivmoddi4+0x2a6>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4429      	add	r1, r5
 8000ee6:	1ac9      	subs	r1, r1, r3
 8000ee8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eec:	e73b      	b.n	8000d66 <__udivmoddi4+0xfe>
 8000eee:	4637      	mov	r7, r6
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	e709      	b.n	8000d08 <__udivmoddi4+0xa0>
 8000ef4:	4607      	mov	r7, r0
 8000ef6:	e6e7      	b.n	8000cc8 <__udivmoddi4+0x60>
 8000ef8:	4618      	mov	r0, r3
 8000efa:	e6fb      	b.n	8000cf4 <__udivmoddi4+0x8c>
 8000efc:	4541      	cmp	r1, r8
 8000efe:	d2ab      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f00:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f04:	eb69 020e 	sbc.w	r2, r9, lr
 8000f08:	3801      	subs	r0, #1
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	e7a4      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f0e:	4660      	mov	r0, ip
 8000f10:	e7e9      	b.n	8000ee6 <__udivmoddi4+0x27e>
 8000f12:	4618      	mov	r0, r3
 8000f14:	e795      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f16:	4667      	mov	r7, ip
 8000f18:	e7d1      	b.n	8000ebe <__udivmoddi4+0x256>
 8000f1a:	4681      	mov	r9, r0
 8000f1c:	e77c      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	442c      	add	r4, r5
 8000f22:	e747      	b.n	8000db4 <__udivmoddi4+0x14c>
 8000f24:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f28:	442b      	add	r3, r5
 8000f2a:	e72f      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	e708      	b.n	8000d42 <__udivmoddi4+0xda>
 8000f30:	4637      	mov	r7, r6
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0xa0>

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	70fb      	strb	r3, [r7, #3]
  uint16_t shifter, c;
  uint16_t carry;
  uint16_t crc = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	827b      	strh	r3, [r7, #18]

  for (int i = 0; i < len + 2; i += 2) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e03c      	b.n	8000fc8 <calculateCRC+0x90>
    shifter = 0x8000;
 8000f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f52:	82fb      	strh	r3, [r7, #22]
    if (i == len) {
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d102      	bne.n	8000f62 <calculateCRC+0x2a>
      c = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
 8000f60:	e00e      	b.n	8000f80 <calculateCRC+0x48>
    } else {
      c = data[i+1] << 8 | data[i];
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	b21a      	sxth	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	440b      	add	r3, r1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	82bb      	strh	r3, [r7, #20]
    }
    do {
      carry = crc & 0x8000;
 8000f80:	8a7b      	ldrh	r3, [r7, #18]
 8000f82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000f86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f8a:	817b      	strh	r3, [r7, #10]
      crc <<= 1;
 8000f8c:	8a7b      	ldrh	r3, [r7, #18]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	827b      	strh	r3, [r7, #18]
      if(c & shifter) crc++;
 8000f92:	8aba      	ldrh	r2, [r7, #20]
 8000f94:	8afb      	ldrh	r3, [r7, #22]
 8000f96:	4013      	ands	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <calculateCRC+0x6c>
 8000f9e:	8a7b      	ldrh	r3, [r7, #18]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	827b      	strh	r3, [r7, #18]
      if(carry) crc ^= 0x1021;
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <calculateCRC+0x7e>
 8000faa:	8a7b      	ldrh	r3, [r7, #18]
 8000fac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	827b      	strh	r3, [r7, #18]
      shifter >>= 1;
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	82fb      	strh	r3, [r7, #22]
    } while(shifter);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1de      	bne.n	8000f80 <calculateCRC+0x48>
  for (int i = 0; i < len + 2; i += 2) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	78fb      	ldrb	r3, [r7, #3]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbbd      	blt.n	8000f4e <calculateCRC+0x16>
  }
  return crc;
 8000fd2:	8a7b      	ldrh	r3, [r7, #18]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <EnableMotor>:

osStatus_t EnableMotor(){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 8000fec:	2360      	movs	r3, #96	; 0x60
 8000fee:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001004:	2300      	movs	r3, #0
 8001006:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800100a:	2306      	movs	r3, #6
 800100c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001010:	f107 0218 	add.w	r2, r7, #24
 8001014:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001018:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f957 	bl	80012d0 <WriteCommand>
 8001022:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800102a:	2340      	movs	r3, #64	; 0x40
 800102c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001042:	230f      	movs	r3, #15
 8001044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001048:	f107 0218 	add.w	r2, r7, #24
 800104c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f93b 	bl	80012d0 <WriteCommand>
 800105a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800105c:	2360      	movs	r3, #96	; 0x60
 800105e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 8001062:	2341      	movs	r3, #65	; 0x41
 8001064:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 8001068:	1d3a      	adds	r2, r7, #4
 800106a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f9b1 	bl	80013d8 <ReadCommand>
 8001076:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	2b37      	cmp	r3, #55	; 0x37
 800107c:	d104      	bne.n	8001088 <EnableMotor+0xa8>
 800107e:	7b7b      	ldrb	r3, [r7, #13]
 8001080:	2b04      	cmp	r3, #4
 8001082:	d101      	bne.n	8001088 <EnableMotor+0xa8>
		status = osOK;
 8001084:	2300      	movs	r3, #0
 8001086:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 8001088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800108a:	4618      	mov	r0, r3
 800108c:	3738      	adds	r7, #56	; 0x38
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 8001092:	b580      	push	{r7, lr}
 8001094:	b08a      	sub	sp, #40	; 0x28
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800109c:	f04f 33ff 	mov.w	r3, #4294967295
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010a2:	2360      	movs	r3, #96	; 0x60
 80010a4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010a8:	2360      	movs	r3, #96	; 0x60
 80010aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	f107 011c 	add.w	r1, r7, #28
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f900 	bl	80012d0 <WriteCommand>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 80010f0:	237a      	movs	r3, #122	; 0x7a
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0e1b      	lsrs	r3, r3, #24
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	141b      	asrs	r3, r3, #16
 8001102:	b2db      	uxtb	r3, r3
 8001104:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	121b      	asrs	r3, r3, #8
 800110a:	b2db      	uxtb	r3, r3
 800110c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	f107 011c 	add.w	r1, r7, #28
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f8d5 	bl	80012d0 <WriteCommand>
 8001126:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800112e:	2340      	movs	r3, #64	; 0x40
 8001130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001140:	233f      	movs	r3, #63	; 0x3f
 8001142:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001144:	f107 0208 	add.w	r2, r7, #8
 8001148:	f107 011c 	add.w	r1, r7, #28
 800114c:	f107 0320 	add.w	r3, r7, #32
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f8bd 	bl	80012d0 <WriteCommand>
 8001156:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800115e:	2340      	movs	r3, #64	; 0x40
 8001160:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001164:	2300      	movs	r3, #0
 8001166:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001168:	2300      	movs	r3, #0
 800116a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800116c:	2300      	movs	r3, #0
 800116e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 8001170:	230f      	movs	r3, #15
 8001172:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 8001174:	f107 0208 	add.w	r2, r7, #8
 8001178:	f107 011c 	add.w	r1, r7, #28
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 f8a5 	bl	80012d0 <WriteCommand>
 8001186:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800118a:	4618      	mov	r0, r3
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001192:	b580      	push	{r7, lr}
 8001194:	b08c      	sub	sp, #48	; 0x30
 8001196:	af00      	add	r7, sp, #0
 8001198:	60f8      	str	r0, [r7, #12]
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800119e:	f04f 33ff 	mov.w	r3, #4294967295
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011aa:	2381      	movs	r3, #129	; 0x81
 80011ac:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	0e1b      	lsrs	r3, r3, #24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	141b      	asrs	r3, r3, #16
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80011d6:	f107 0210 	add.w	r2, r7, #16
 80011da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f874 	bl	80012d0 <WriteCommand>
 80011e8:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80011ea:	2360      	movs	r3, #96	; 0x60
 80011ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 80011f0:	2383      	movs	r3, #131	; 0x83
 80011f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	0e1b      	lsrs	r3, r3, #24
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	141b      	asrs	r3, r3, #16
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800121c:	f107 0210 	add.w	r2, r7, #16
 8001220:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f000 f851 	bl	80012d0 <WriteCommand>
 800122e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001230:	2360      	movs	r3, #96	; 0x60
 8001232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001236:	2384      	movs	r3, #132	; 0x84
 8001238:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	0e1b      	lsrs	r3, r3, #24
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	141b      	asrs	r3, r3, #16
 800124a:	b2db      	uxtb	r3, r3
 800124c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	121b      	asrs	r3, r3, #8
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001262:	f107 0210 	add.w	r2, r7, #16
 8001266:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f82e 	bl	80012d0 <WriteCommand>
 8001274:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 8001276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001278:	4618      	mov	r0, r3
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800128e:	2360      	movs	r3, #96	; 0x60
 8001290:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001294:	2364      	movs	r3, #100	; 0x64
 8001296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	f107 0320 	add.w	r3, r7, #32
 80012a2:	4611      	mov	r1, r2
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f897 	bl	80013d8 <ReadCommand>
 80012aa:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[6] +
 80012ac:	7cbb      	ldrb	r3, [r7, #18]
 80012ae:	461a      	mov	r2, r3
			(rx_buffer_read[7] << 8) +
 80012b0:	7cfb      	ldrb	r3, [r7, #19]
 80012b2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[6] +
 80012b4:	441a      	add	r2, r3
			(rx_buffer_read[8] << 16) +
 80012b6:	7d3b      	ldrb	r3, [r7, #20]
 80012b8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[7] << 8) +
 80012ba:	441a      	add	r2, r3
			(rx_buffer_read[9] << 24);
 80012bc:	7d7b      	ldrb	r3, [r7, #21]
 80012be:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[8] << 16) +
 80012c0:	441a      	add	r2, r3
	*position = rx_buffer_read[6] +
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	601a      	str	r2, [r3, #0]

	return status;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3728      	adds	r7, #40	; 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t byte_stream_write[14] = { 0 };
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	819a      	strh	r2, [r3, #12]

	byte_stream_write[0] = 0x90;			// DLE
 80012f0:	2390      	movs	r3, #144	; 0x90
 80012f2:	773b      	strb	r3, [r7, #28]
	byte_stream_write[1] = 0x02;			// STX
 80012f4:	2302      	movs	r3, #2
 80012f6:	777b      	strb	r3, [r7, #29]
	byte_stream_write[2] = 0x68;			// Write Object
 80012f8:	2368      	movs	r3, #104	; 0x68
 80012fa:	77bb      	strb	r3, [r7, #30]
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 80012fc:	2304      	movs	r3, #4
 80012fe:	77fb      	strb	r3, [r7, #31]
	byte_stream_write[4] = 0x01;			// Node ID
 8001300:	2301      	movs	r3, #1
 8001302:	f887 3020 	strb.w	r3, [r7, #32]
	byte_stream_write[5] = command[1];		// Index Low Byte
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	785b      	ldrb	r3, [r3, #1]
 800130a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	byte_stream_write[6] = command[0];		// Index High byte
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	byte_stream_write[7] = 0x00;			// Subindex of object
 8001316:	2300      	movs	r3, #0
 8001318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	byte_stream_write[8] = data[3];			// Data - low byte
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	byte_stream_write[9] = data[2];			// Data
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	789b      	ldrb	r3, [r3, #2]
 8001328:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	byte_stream_write[10] = data[1];		// Data
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	785b      	ldrb	r3, [r3, #1]
 8001330:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	byte_stream_write[11] = data[0];		// Data - high byte
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	f107 021e 	add.w	r2, r7, #30
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	6851      	ldr	r1, [r2, #4]
 8001354:	c303      	stmia	r3!, {r0, r1}
 8001356:	8912      	ldrh	r2, [r2, #8]
 8001358:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 800135a:	2300      	movs	r3, #0
 800135c:	857b      	strh	r3, [r7, #42]	; 0x2a
	crc_calc = calculateCRC(crc_data_array, 10);
 800135e:	f107 0310 	add.w	r3, r7, #16
 8001362:	210a      	movs	r1, #10
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fde7 	bl	8000f38 <calculateCRC>
 800136a:	4603      	mov	r3, r0
 800136c:	857b      	strh	r3, [r7, #42]	; 0x2a

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800136e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001376:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	b29b      	uxth	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29


	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 10);
 8001382:	f107 011c 	add.w	r1, r7, #28
 8001386:	230a      	movs	r3, #10
 8001388:	220e      	movs	r2, #14
 800138a:	4812      	ldr	r0, [pc, #72]	; (80013d4 <WriteCommand+0x104>)
 800138c:	f00a f80a 	bl	800b3a4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart4, rx_buffer, 20, 10);
 8001390:	230a      	movs	r3, #10
 8001392:	2214      	movs	r2, #20
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	480f      	ldr	r0, [pc, #60]	; (80013d4 <WriteCommand+0x104>)
 8001398:	f00a f895 	bl	800b4c6 <HAL_UART_Receive>

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3307      	adds	r3, #7
 80013a0:	781a      	ldrb	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3306      	adds	r3, #6
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3305      	adds	r3, #5
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3304      	adds	r3, #4
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <WriteCommand+0xf8>
		status = osOK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	return status;
 80013c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3730      	adds	r7, #48	; 0x30
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2001cc18 	.word	0x2001cc18

080013d8 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	61fb      	str	r3, [r7, #28]

	uint8_t byte_stream_read[10];

	byte_stream_read[0] = 0x90;				// DLE
 80013e8:	2390      	movs	r3, #144	; 0x90
 80013ea:	743b      	strb	r3, [r7, #16]
	byte_stream_read[1] = 0x02;				// STX
 80013ec:	2302      	movs	r3, #2
 80013ee:	747b      	strb	r3, [r7, #17]
	byte_stream_read[2] = 0x60;				// Read Object
 80013f0:	2360      	movs	r3, #96	; 0x60
 80013f2:	74bb      	strb	r3, [r7, #18]
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80013f4:	2302      	movs	r3, #2
 80013f6:	74fb      	strb	r3, [r7, #19]
	byte_stream_read[4] = 0x01;				// Node ID
 80013f8:	2301      	movs	r3, #1
 80013fa:	753b      	strb	r3, [r7, #20]
	byte_stream_read[5] = command[1];		// Index Low Byte
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	785b      	ldrb	r3, [r3, #1]
 8001400:	757b      	strb	r3, [r7, #21]
	byte_stream_read[6] = command[0];		// Index High byte
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	75bb      	strb	r3, [r7, #22]
	byte_stream_read[7] = 0x00;				// Subindex of object
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	6810      	ldr	r0, [r2, #0]
 8001420:	6018      	str	r0, [r3, #0]
 8001422:	8892      	ldrh	r2, [r2, #4]
 8001424:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	837b      	strh	r3, [r7, #26]
	crc_calc = calculateCRC(crc_data_array, 6);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	2106      	movs	r1, #6
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fd81 	bl	8000f38 <calculateCRC>
 8001436:	4603      	mov	r3, r0
 8001438:	837b      	strh	r3, [r7, #26]

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 800143a:	8b7b      	ldrh	r3, [r7, #26]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	763b      	strb	r3, [r7, #24]
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001440:	8b7b      	ldrh	r3, [r7, #26]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	b2db      	uxtb	r3, r3
 8001448:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 800144a:	f107 0110 	add.w	r1, r7, #16
 800144e:	230a      	movs	r3, #10
 8001450:	220a      	movs	r2, #10
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <ReadCommand+0xc4>)
 8001454:	f009 ffa6 	bl	800b3a4 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart4, rx_buffer, 20, 10);
 8001458:	230a      	movs	r3, #10
 800145a:	2214      	movs	r2, #20
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	480f      	ldr	r0, [pc, #60]	; (800149c <ReadCommand+0xc4>)
 8001460:	f00a f831 	bl	800b4c6 <HAL_UART_Receive>

	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	3307      	adds	r3, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3306      	adds	r3, #6
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	3305      	adds	r3, #5
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	b2da      	uxtb	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	3304      	adds	r3, #4
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	4313      	orrs	r3, r2
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <ReadCommand+0xb8>
		status = osOK;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
	}
	return status;
 8001490:	69fb      	ldr	r3, [r7, #28]

}
 8001492:	4618      	mov	r0, r3
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2001cc18 	.word	0x2001cc18

080014a0 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 80014ac:	4a27      	ldr	r2, [pc, #156]	; (800154c <init_coeff+0xac>)
 80014ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80014b2:	4611      	mov	r1, r2
 80014b4:	22f8      	movs	r2, #248	; 0xf8
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 fb84 	bl	8017bc4 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 80014bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <init_coeff+0xb0>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	4611      	mov	r1, r2
 80014c6:	23f8      	movs	r3, #248	; 0xf8
 80014c8:	461a      	mov	r2, r3
 80014ca:	f016 fb7b 	bl	8017bc4 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 80014ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <init_coeff+0xb4>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	4611      	mov	r1, r2
 80014d8:	23f8      	movs	r3, #248	; 0xf8
 80014da:	461a      	mov	r2, r3
 80014dc:	f016 fb72 	bl	8017bc4 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	4a1c      	ldr	r2, [pc, #112]	; (8001558 <init_coeff+0xb8>)
 80014e6:	4618      	mov	r0, r3
 80014e8:	4611      	mov	r1, r2
 80014ea:	23f8      	movs	r3, #248	; 0xf8
 80014ec:	461a      	mov	r2, r3
 80014ee:	f016 fb69 	bl	8017bc4 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3340      	adds	r3, #64	; 0x40
 80014f8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80014fc:	22f8      	movs	r2, #248	; 0xf8
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fb60 	bl	8017bc4 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800150c:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001510:	22f8      	movs	r2, #248	; 0xf8
 8001512:	4618      	mov	r0, r3
 8001514:	f016 fb56 	bl	8017bc4 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001520:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001524:	22f8      	movs	r2, #248	; 0xf8
 8001526:	4618      	mov	r0, r3
 8001528:	f016 fb4c 	bl	8017bc4 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001534:	f107 0108 	add.w	r1, r7, #8
 8001538:	22f8      	movs	r2, #248	; 0xf8
 800153a:	4618      	mov	r0, r3
 800153c:	f016 fb42 	bl	8017bc4 <memcpy>
}
 8001540:	bf00      	nop
 8001542:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0801a0d0 	.word	0x0801a0d0
 8001550:	0801a1c8 	.word	0x0801a1c8
 8001554:	0801a2c0 	.word	0x0801a2c0
 8001558:	0801a3b8 	.word	0x0801a3b8
 800155c:	00000000 	.word	0x00000000

08001560 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	ed2d 8b02 	vpush	{d8}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
 800156e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	f040 80cd 	bne.w	8001714 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 800157e:	2b01      	cmp	r3, #1
 8001580:	d004      	beq.n	800158c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b02      	cmp	r3, #2
 8001588:	f040 80c4 	bne.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe fff9 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001596:	a36c      	add	r3, pc, #432	; (adr r3, 8001748 <compute_control_input+0x1e8>)
 8001598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159c:	f7ff fabe 	bl	8000b1c <__aeabi_dcmplt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80b6 	beq.w	8001714 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80015ae:	f083 0301 	eor.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ad 	beq.w	8001714 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f913 	bl	80017e6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fa15 	bl	80019f0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80015cc:	461d      	mov	r5, r3
 80015ce:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffd6 	bl	8000588 <__aeabi_f2d>
 80015dc:	4603      	mov	r3, r0
 80015de:	460c      	mov	r4, r1
 80015e0:	461a      	mov	r2, r3
 80015e2:	4623      	mov	r3, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	4631      	mov	r1, r6
 80015e8:	f7ff f826 	bl	8000638 <__aeabi_dmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	460c      	mov	r4, r1
 80015f0:	4698      	mov	r8, r3
 80015f2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ffc2 	bl	8000588 <__aeabi_f2d>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7ff f814 	bl	8000638 <__aeabi_dmul>
 8001610:	4603      	mov	r3, r0
 8001612:	460c      	mov	r4, r1
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	4640      	mov	r0, r8
 800161a:	4649      	mov	r1, r9
 800161c:	f7fe fe54 	bl	80002c8 <__aeabi_dsub>
 8001620:	4603      	mov	r3, r0
 8001622:	460c      	mov	r4, r1
 8001624:	4698      	mov	r8, r3
 8001626:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffa8 	bl	8000588 <__aeabi_f2d>
 8001638:	a345      	add	r3, pc, #276	; (adr r3, 8001750 <compute_control_input+0x1f0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7fe fe43 	bl	80002c8 <__aeabi_dsub>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fff5 	bl	8000638 <__aeabi_dmul>
 800164e:	4603      	mov	r3, r0
 8001650:	460c      	mov	r4, r1
 8001652:	461a      	mov	r2, r3
 8001654:	4623      	mov	r3, r4
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe35 	bl	80002c8 <__aeabi_dsub>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	4625      	mov	r5, r4
 8001664:	461c      	mov	r4, r3
                + control_data->control_input);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	4620      	mov	r0, r4
 8001676:	4629      	mov	r1, r5
 8001678:	f7fe fe28 	bl	80002cc <__adddf3>
 800167c:	4603      	mov	r3, r0
 800167e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001680:	4618      	mov	r0, r3
 8001682:	4621      	mov	r1, r4
 8001684:	f7ff fa88 	bl	8000b98 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	f016 fed0 	bl	8018440 <fminf>
 80016a0:	eef0 7a40 	vmov.f32	s15, s0
 80016a4:	eef0 0a67 	vmov.f32	s1, s15
 80016a8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001740 <compute_control_input+0x1e0>
 80016ac:	f016 fead 	bl	801840a <fmaxf>
 80016b0:	eef0 7a40 	vmov.f32	s15, s0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f944 	bl	8001948 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	ed93 8a06 	vldr	s16, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001744 <compute_control_input+0x1e4>
 80016d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 80016da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	ed93 7a07 	vldr	s14, [r3, #28]
 80016e4:	eef0 0a47 	vmov.f32	s1, s14
 80016e8:	eeb0 0a67 	vmov.f32	s0, s15
 80016ec:	f016 fea8 	bl	8018440 <fminf>
 80016f0:	eef0 7a40 	vmov.f32	s15, s0
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	eeb0 0a48 	vmov.f32	s0, s16
 80016fc:	f016 fe85 	bl	801840a <fmaxf>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f993 	bl	8001a38 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001712:	e00d      	b.n	8001730 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f81f 	bl	8001758 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f85e 	bl	80017e6 <evaluate_polyfit>
            compute_reference_error(control_data);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f960 	bl	80019f0 <compute_reference_error>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	ecbd 8b02 	vpop	{d8}
 800173a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173e:	bf00      	nop
 8001740:	00000000 	.word	0x00000000
 8001744:	3c23d70a 	.word	0x3c23d70a
 8001748:	9999999a 	.word	0x9999999a
 800174c:	3fe19999 	.word	0x3fe19999
 8001750:	e41d1d5e 	.word	0xe41d1d5e
 8001754:	3fdfc917 	.word	0x3fdfc917

08001758 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffe3 	bl	8001758 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fe75 	bl	80014a0 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	e00d      	b.n	80017d8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3305      	adds	r3, #5
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	441a      	add	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	ddee      	ble.n	80017bc <control_data_init+0x38>
    }
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd90      	pop	{r4, r7, pc}

080017e6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 80017e6:	b5b0      	push	{r4, r5, r7, lr}
 80017e8:	b08a      	sub	sp, #40	; 0x28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 80017fa:	2300      	movs	r3, #0
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
 80017fe:	e00d      	b.n	800181c <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3305      	adds	r3, #5
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	441a      	add	r2, r3
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	2b02      	cmp	r3, #2
 8001820:	ddee      	ble.n	8001800 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e07b      	b.n	800192c <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fea5 	bl	8000588 <__aeabi_f2d>
 800183e:	4604      	mov	r4, r0
 8001840:	460d      	mov	r5, r1
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f1c3 031e 	rsb	r3, r3, #30
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe8b 	bl	8000564 <__aeabi_i2d>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	ec43 2b11 	vmov	d1, r2, r3
 8001856:	ec45 4b10 	vmov	d0, r4, r5
 800185a:	f016 fe29 	bl	80184b0 <pow>
 800185e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3308      	adds	r3, #8
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	4413      	add	r3, r2
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4620      	mov	r0, r4
 8001884:	4629      	mov	r1, r5
 8001886:	f7fe fd21 	bl	80002cc <__adddf3>
 800188a:	4603      	mov	r3, r0
 800188c:	460c      	mov	r4, r1
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3327      	adds	r3, #39	; 0x27
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	4413      	add	r3, r2
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018ac:	f7fe fec4 	bl	8000638 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fd08 	bl	80002cc <__adddf3>
 80018bc:	4603      	mov	r3, r0
 80018be:	460c      	mov	r4, r1
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3346      	adds	r3, #70	; 0x46
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4413      	add	r3, r2
 80018d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018de:	f7fe feab 	bl	8000638 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4620      	mov	r0, r4
 80018e8:	4629      	mov	r1, r5
 80018ea:	f7fe fcef 	bl	80002cc <__adddf3>
 80018ee:	4603      	mov	r3, r0
 80018f0:	460c      	mov	r4, r1
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3365      	adds	r3, #101	; 0x65
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4413      	add	r3, r2
 8001902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800190a:	f7fe fe95 	bl	8000638 <__aeabi_dmul>
 800190e:	4603      	mov	r3, r0
 8001910:	460c      	mov	r4, r1
 8001912:	461a      	mov	r2, r3
 8001914:	4623      	mov	r3, r4
 8001916:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800191a:	f7fe fcd7 	bl	80002cc <__adddf3>
 800191e:	4603      	mov	r3, r0
 8001920:	460c      	mov	r4, r1
 8001922:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	3301      	adds	r3, #1
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2b1e      	cmp	r3, #30
 8001930:	dd80      	ble.n	8001834 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001932:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001936:	f7ff f92f 	bl	8000b98 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	615a      	str	r2, [r3, #20]
}
 8001940:	bf00      	nop
 8001942:	3728      	adds	r7, #40	; 0x28
 8001944:	46bd      	mov	sp, r7
 8001946:	bdb0      	pop	{r4, r5, r7, pc}

08001948 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fe17 	bl	8000588 <__aeabi_f2d>
 800195a:	4603      	mov	r3, r0
 800195c:	460c      	mov	r4, r1
 800195e:	461a      	mov	r2, r3
 8001960:	4623      	mov	r3, r4
 8001962:	a11f      	add	r1, pc, #124	; (adr r1, 80019e0 <compute_antiwindup_boundaries+0x98>)
 8001964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001968:	f7fe fcae 	bl	80002c8 <__aeabi_dsub>
 800196c:	4603      	mov	r3, r0
 800196e:	460c      	mov	r4, r1
 8001970:	4618      	mov	r0, r3
 8001972:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001974:	a31c      	add	r3, pc, #112	; (adr r3, 80019e8 <compute_antiwindup_boundaries+0xa0>)
 8001976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4603      	mov	r3, r0
 8001980:	460c      	mov	r4, r1
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f907 	bl	8000b98 <__aeabi_d2f>
 800198a:	4603      	mov	r3, r0
 800198c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001990:	ee00 3a10 	vmov	s0, r3
 8001994:	f016 fd39 	bl	801840a <fmaxf>
 8001998:	eef0 7a40 	vmov.f32	s15, s0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdee 	bl	8000588 <__aeabi_f2d>
 80019ac:	a30c      	add	r3, pc, #48	; (adr r3, 80019e0 <compute_antiwindup_boundaries+0x98>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7ff f8d1 	bl	8000b58 <__aeabi_dcmpgt>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019ca:	eef1 7a67 	vneg.f32	s15, s15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	f3af 8000 	nop.w
 80019e0:	7417f6de 	.word	0x7417f6de
 80019e4:	4095dc93 	.word	0x4095dc93
 80019e8:	47ae147b 	.word	0x47ae147b
 80019ec:	3f747ae1 	.word	0x3f747ae1

080019f0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80019fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d504      	bpl.n	8001a12 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691a      	ldr	r2, [r3, #16]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 8001a10:	e00a      	b.n	8001a28 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	0000      	movs	r0, r0
	...

08001a38 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fd9e 	bl	8000588 <__aeabi_f2d>
 8001a4c:	a30c      	add	r3, pc, #48	; (adr r3, 8001a80 <check_apogee_approach_phase+0x48>)
 8001a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a52:	f7ff f863 	bl	8000b1c <__aeabi_dcmplt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	8c1b      	ldrh	r3, [r3, #32]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	8c1b      	ldrh	r3, [r3, #32]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d903      	bls.n	8001a78 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	9999999a 	.word	0x9999999a
 8001a84:	3fb99999 	.word	0x3fb99999

08001a88 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, TEMPERATURE_REFERENCE, PRESSURE_REFERENCE);
 8001a90:	eddf 0a07 	vldr	s1, [pc, #28]	; 8001ab0 <init_env+0x28>
 8001a94:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f80d 	bl	8001ab8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8001a9e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f82c 	bl	8001b00 <update_env>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	47c5e680 	.word	0x47c5e680
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ac4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7fe fd5d 	bl	8000588 <__aeabi_f2d>
 8001ace:	a30a      	add	r3, pc, #40	; (adr r3, 8001af8 <calibrate_env+0x40>)
 8001ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad4:	f7fe fbfa 	bl	80002cc <__adddf3>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	460c      	mov	r4, r1
 8001adc:	4618      	mov	r0, r3
 8001ade:	4621      	mov	r1, r4
 8001ae0:	f7ff f85a 	bl	8000b98 <__aeabi_d2f>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	66666666 	.word	0x66666666
 8001afc:	40711266 	.word	0x40711266

08001b00 <update_env>:

void update_env(env_t *env, float T) {
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8001b0c:	6838      	ldr	r0, [r7, #0]
 8001b0e:	f7fe fd3b 	bl	8000588 <__aeabi_f2d>
 8001b12:	a317      	add	r3, pc, #92	; (adr r3, 8001b70 <update_env+0x70>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fbd8 	bl	80002cc <__adddf3>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	460c      	mov	r4, r1
 8001b20:	4618      	mov	r0, r3
 8001b22:	4621      	mov	r1, r4
 8001b24:	f7ff f838 	bl	8000b98 <__aeabi_d2f>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fd28 	bl	8000588 <__aeabi_f2d>
 8001b38:	a30f      	add	r3, pc, #60	; (adr r3, 8001b78 <update_env+0x78>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fd7b 	bl	8000638 <__aeabi_dmul>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	f7ff f825 	bl	8000b98 <__aeabi_d2f>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001b54:	ee00 3a10 	vmov	s0, r3
 8001b58:	f016 fe74 	bl	8018844 <powf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd90      	pop	{r4, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	66666666 	.word	0x66666666
 8001b74:	40711266 	.word	0x40711266
 8001b78:	8c1557b7 	.word	0x8c1557b7
 8001b7c:	40791e2f 	.word	0x40791e2f

08001b80 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8001b8c:	edd7 7a00 	vldr	s15, [r7]
 8001b90:	eef0 6ae7 	vabs.f32	s13, s15
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b9e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	ee07 3a90 	vmov	s15, r3
}
 8001ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8001bb8:	b5b0      	push	{r4, r5, r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e043      	b.n	8001c54 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fcd3 	bl	8000588 <__aeabi_f2d>
 8001be2:	a322      	add	r3, pc, #136	; (adr r3, 8001c6c <pressure2altitudeAGL+0xb4>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fe50 	bl	800088c <__aeabi_ddiv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4625      	mov	r5, r4
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	ed93 7a00 	vldr	s14, [r3]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c0a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001c68 <pressure2altitudeAGL+0xb0>
 8001c0e:	eeb0 0a66 	vmov.f32	s0, s13
 8001c12:	f016 fe17 	bl	8018844 <powf>
 8001c16:	eeb0 7a40 	vmov.f32	s14, s0
 8001c1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c22:	ee17 0a90 	vmov	r0, s15
 8001c26:	f7fe fcaf 	bl	8000588 <__aeabi_f2d>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4620      	mov	r0, r4
 8001c30:	4629      	mov	r1, r5
 8001c32:	f7fe fd01 	bl	8000638 <__aeabi_dmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c44:	18d4      	adds	r4, r2, r3
 8001c46:	f7fe ffa7 	bl	8000b98 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbb7      	blt.n	8001bcc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8001c5c:	bf00      	nop
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bdb0      	pop	{r4, r5, r7, pc}
 8001c64:	f3af 8000 	nop.w
 8001c68:	3e42c4dc 	.word	0x3e42c4dc
 8001c6c:	76c8b439 	.word	0x76c8b439
 8001c70:	3f7a9fbe 	.word	0x3f7a9fbe
 8001c74:	00000000 	.word	0x00000000

08001c78 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	ed2d 8b02 	vpush	{d8}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e047      	b.n	8001d20 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d03e      	beq.n	8001d1a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	ed93 8a00 	vldr	s16, [r3]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc6b 	bl	8000588 <__aeabi_f2d>
 8001cb2:	a323      	add	r3, pc, #140	; (adr r3, 8001d40 <altitudeAGL2pressure+0xc8>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4625      	mov	r5, r4
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fc5d 	bl	8000588 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	4629      	mov	r1, r5
 8001cd6:	f7fe fdd9 	bl	800088c <__aeabi_ddiv>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	460c      	mov	r4, r1
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f04f 0000 	mov.w	r0, #0
 8001ce6:	4914      	ldr	r1, [pc, #80]	; (8001d38 <altitudeAGL2pressure+0xc0>)
 8001ce8:	f7fe faee 	bl	80002c8 <__aeabi_dsub>
 8001cec:	4603      	mov	r3, r0
 8001cee:	460c      	mov	r4, r1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f7fe ff50 	bl	8000b98 <__aeabi_d2f>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001d3c <altitudeAGL2pressure+0xc4>
 8001cfe:	ee00 3a10 	vmov	s0, r3
 8001d02:	f016 fd9f 	bl	8018844 <powf>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d10:	4413      	add	r3, r2
 8001d12:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d16:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbb3      	blt.n	8001c90 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8001d28:	bf00      	nop
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	ecbd 8b02 	vpop	{d8}
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	f3af 8000 	nop.w
 8001d38:	3ff00000 	.word	0x3ff00000
 8001d3c:	40a83d87 	.word	0x40a83d87
 8001d40:	76c8b439 	.word	0x76c8b439
 8001d44:	3f7a9fbe 	.word	0x3f7a9fbe

08001d48 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8001d48:	b5b0      	push	{r4, r5, r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fc15 	bl	8000588 <__aeabi_f2d>
 8001d5e:	a323      	add	r3, pc, #140	; (adr r3, 8001dec <altitude_gradient+0xa4>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc68 	bl	8000638 <__aeabi_dmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	460c      	mov	r4, r1
 8001d6c:	4625      	mov	r5, r4
 8001d6e:	461c      	mov	r4, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe fc07 	bl	8000588 <__aeabi_f2d>
 8001d7a:	a31e      	add	r3, pc, #120	; (adr r3, 8001df4 <altitude_gradient+0xac>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f7fe fc5a 	bl	8000638 <__aeabi_dmul>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4629      	mov	r1, r5
 8001d8c:	f7fe fd7e 	bl	800088c <__aeabi_ddiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	460c      	mov	r4, r1
 8001d94:	4625      	mov	r5, r4
 8001d96:	461c      	mov	r4, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ed97 7a00 	vldr	s14, [r7]
 8001da2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001da6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001de8 <altitude_gradient+0xa0>
 8001daa:	eeb0 0a66 	vmov.f32	s0, s13
 8001dae:	f016 fd49 	bl	8018844 <powf>
 8001db2:	ee10 3a10 	vmov	r3, s0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fc38 	bl	8000638 <__aeabi_dmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	460c      	mov	r4, r1
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4621      	mov	r1, r4
 8001dd0:	f7fe fee2 	bl	8000b98 <__aeabi_d2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	ee07 3a90 	vmov	s15, r3
}
 8001dde:	eeb0 0a67 	vmov.f32	s0, s15
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bdb0      	pop	{r4, r5, r7, pc}
 8001de8:	bf4f4ec9 	.word	0xbf4f4ec9
 8001dec:	640f3ea7 	.word	0x640f3ea7
 8001df0:	c071f0fd 	.word	0xc071f0fd
 8001df4:	51eb851f 	.word	0x51eb851f
 8001df8:	40239eb8 	.word	0x40239eb8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	f200 80a6 	bhi.w	8001f64 <detect_flight_phase+0x164>
 8001e18:	a201      	add	r2, pc, #4	; (adr r2, 8001e20 <detect_flight_phase+0x20>)
 8001e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1e:	bf00      	nop
 8001e20:	08001e35 	.word	0x08001e35
 8001e24:	08001f65 	.word	0x08001f65
 8001e28:	08001e83 	.word	0x08001e83
 8001e2c:	08001ecd 	.word	0x08001ecd
 8001e30:	08001f17 	.word	0x08001f17
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e40:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002000 <detect_flight_phase+0x200>
 8001e44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e48:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dc00      	bgt.n	8001e58 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001e56:	e087      	b.n	8001f68 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b25a      	sxtb	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	dd79      	ble.n	8001f68 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	721a      	strb	r2, [r3, #8]
        break;
 8001e80:	e072      	b.n	8001f68 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002000 <detect_flight_phase+0x200>
 8001e92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d400      	bmi.n	8001ea2 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001ea0:	e064      	b.n	8001f6c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	b25a      	sxtb	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	dd56      	ble.n	8001f6c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	721a      	strb	r2, [r3, #8]
        break;
 8001eca:	e04f      	b.n	8001f6c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed8:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002000 <detect_flight_phase+0x200>
 8001edc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d400      	bmi.n	8001eec <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001eea:	e041      	b.n	8001f70 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b25a      	sxtb	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	dd33      	ble.n	8001f70 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2205      	movs	r2, #5
 8001f0c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	721a      	strb	r2, [r3, #8]
        break;
 8001f14:	e02c      	b.n	8001f70 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002000 <detect_flight_phase+0x200>
 8001f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f2a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	d400      	bmi.n	8001f3a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8001f38:	e01c      	b.n	8001f74 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	b25a      	sxtb	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	dd0e      	ble.n	8001f74 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2206      	movs	r2, #6
 8001f5a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	721a      	strb	r2, [r3, #8]
        break;
 8001f62:	e007      	b.n	8001f74 <detect_flight_phase+0x174>

        default:
        break;
 8001f64:	bf00      	nop
 8001f66:	e006      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f68:	bf00      	nop
 8001f6a:	e004      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e002      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <detect_flight_phase+0x176>
        break;
 8001f74:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002000 <detect_flight_phase+0x200>
 8001f86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f8a:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fdf6 	bl	8001b80 <mach_number>
 8001f94:	eef0 7a40 	vmov.f32	s15, s0
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe faf0 	bl	8000588 <__aeabi_f2d>
 8001fa8:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <detect_flight_phase+0x1f0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fdc9 	bl	8000b44 <__aeabi_dcmpge>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2203      	movs	r2, #3
 8001fbc:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8001fbe:	e013      	b.n	8001fe8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fadf 	bl	8000588 <__aeabi_f2d>
 8001fca:	a30b      	add	r3, pc, #44	; (adr r3, 8001ff8 <detect_flight_phase+0x1f8>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fdb8 	bl	8000b44 <__aeabi_dcmpge>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2202      	movs	r2, #2
 8001fde:	705a      	strb	r2, [r3, #1]
}
 8001fe0:	e002      	b.n	8001fe8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	cccccccd 	.word	0xcccccccd
 8001ff4:	3ff4cccc 	.word	0x3ff4cccc
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fe99999 	.word	0x3fe99999
 8002000:	447a0000 	.word	0x447a0000

08002004 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002034:	b5b0      	push	{r4, r5, r7, lr}
 8002036:	b0b0      	sub	sp, #192	; 0xc0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800203c:	4b45      	ldr	r3, [pc, #276]	; (8002154 <reset_kf_state+0x120>)
 800203e:	f107 040c 	add.w	r4, r7, #12
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002050:	4a41      	ldr	r2, [pc, #260]	; (8002158 <reset_kf_state+0x124>)
 8002052:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002056:	ca07      	ldmia	r2, {r0, r1, r2}
 8002058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800205c:	4a3e      	ldr	r2, [pc, #248]	; (8002158 <reset_kf_state+0x124>)
 800205e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002062:	ca07      	ldmia	r2, {r0, r1, r2}
 8002064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f107 010c 	add.w	r1, r7, #12
 800206e:	2224      	movs	r2, #36	; 0x24
 8002070:	4618      	mov	r0, r3
 8002072:	f015 fda7 	bl	8017bc4 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3348      	adds	r3, #72	; 0x48
 800207a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800207e:	220c      	movs	r2, #12
 8002080:	4618      	mov	r0, r3
 8002082:	f015 fd9f 	bl	8017bc4 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3354      	adds	r3, #84	; 0x54
 800208a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800208e:	220c      	movs	r2, #12
 8002090:	4618      	mov	r0, r3
 8002092:	f015 fd97 	bl	8017bc4 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800209e:	f04f 0300 	mov.w	r3, #0
 80020a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <reset_kf_state+0x128>)
 80020b0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80020b4:	461d      	mov	r5, r3
 80020b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020be:	682b      	ldr	r3, [r5, #0]
 80020c0:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80020c8:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80020cc:	220c      	movs	r2, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f015 fd78 	bl	8017bc4 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80020da:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	4618      	mov	r0, r3
 80020e2:	f015 fd6f 	bl	8017bc4 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	33b4      	adds	r3, #180	; 0xb4
 80020ea:	2204      	movs	r2, #4
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f015 fd73 	bl	8017bda <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	33b8      	adds	r3, #184	; 0xb8
 80020f8:	2224      	movs	r2, #36	; 0x24
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f015 fd6c 	bl	8017bda <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002108:	220c      	movs	r2, #12
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f015 fd64 	bl	8017bda <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002118:	2203      	movs	r2, #3
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f015 fd5c 	bl	8017bda <memset>
    kf_state->num_z_active = 0;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3324      	adds	r3, #36	; 0x24
 8002130:	2103      	movs	r1, #3
 8002132:	2003      	movs	r0, #3
 8002134:	f000 fd48 	bl	8002bc8 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	2101      	movs	r1, #1
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fd3f 	bl	8002bc8 <transpose>
}
 800214a:	bf00      	nop
 800214c:	37c0      	adds	r7, #192	; 0xc0
 800214e:	46bd      	mov	sp, r7
 8002150:	bdb0      	pop	{r4, r5, r7, pc}
 8002152:	bf00      	nop
 8002154:	0801a4b0 	.word	0x0801a4b0
 8002158:	0801a4d4 	.word	0x0801a4d4
 800215c:	0801a4e0 	.word	0x0801a4e0

08002160 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af04      	add	r7, sp, #16
 8002166:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002176:	2201      	movs	r2, #1
 8002178:	9201      	str	r2, [sp, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	2103      	movs	r1, #3
 8002182:	2003      	movs	r0, #3
 8002184:	f000 ff4a 	bl	800301c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800219a:	2200      	movs	r2, #0
 800219c:	9201      	str	r2, [sp, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	4603      	mov	r3, r0
 80021a2:	460a      	mov	r2, r1
 80021a4:	2101      	movs	r1, #1
 80021a6:	2003      	movs	r0, #3
 80021a8:	f000 ff38 	bl	800301c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80021ba:	2101      	movs	r1, #1
 80021bc:	9102      	str	r1, [sp, #8]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4603      	mov	r3, r0
 80021c4:	2203      	movs	r2, #3
 80021c6:	2103      	movs	r1, #3
 80021c8:	2003      	movs	r0, #3
 80021ca:	f000 fe8d 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	33b4      	adds	r3, #180	; 0xb4
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80021de:	2101      	movs	r1, #1
 80021e0:	9102      	str	r1, [sp, #8]
 80021e2:	9201      	str	r2, [sp, #4]
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4603      	mov	r3, r0
 80021e8:	2201      	movs	r2, #1
 80021ea:	2101      	movs	r1, #1
 80021ec:	2003      	movs	r0, #3
 80021ee:	f000 fe7b 	bl	8002ee8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002202:	2101      	movs	r1, #1
 8002204:	9102      	str	r1, [sp, #8]
 8002206:	9201      	str	r2, [sp, #4]
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4603      	mov	r3, r0
 800220c:	2203      	movs	r2, #3
 800220e:	2103      	movs	r1, #3
 8002210:	2003      	movs	r0, #3
 8002212:	f000 fe69 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f503 700e 	add.w	r0, r3, #568	; 0x238
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002226:	2100      	movs	r1, #0
 8002228:	9102      	str	r1, [sp, #8]
 800222a:	9201      	str	r2, [sp, #4]
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	4603      	mov	r3, r0
 8002230:	2203      	movs	r2, #3
 8002232:	2101      	movs	r1, #1
 8002234:	2003      	movs	r0, #3
 8002236:	f000 fe57 	bl	8002ee8 <matmul>
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	336c      	adds	r3, #108	; 0x6c
 800224e:	2224      	movs	r2, #36	; 0x24
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f015 fcc1 	bl	8017bda <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002258:	2300      	movs	r3, #0
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e01e      	b.n	800229c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4613      	mov	r3, r2
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	336c      	adds	r3, #108	; 0x6c
 800227e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	33b8      	adds	r3, #184	; 0xb8
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3301      	adds	r3, #1
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	dddd      	ble.n	800225e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3390      	adds	r3, #144	; 0x90
 80022ac:	2103      	movs	r1, #3
 80022ae:	2003      	movs	r0, #3
 80022b0:	f000 fc8a 	bl	8002bc8 <transpose>
}
 80022b4:	bf00      	nop
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022d6:	2201      	movs	r2, #1
 80022d8:	9201      	str	r2, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4603      	mov	r3, r0
 80022de:	460a      	mov	r2, r1
 80022e0:	2103      	movs	r1, #3
 80022e2:	2003      	movs	r0, #3
 80022e4:	f000 fe9a 	bl	800301c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80022fa:	2003      	movs	r0, #3
 80022fc:	f000 fce3 	bl	8002cc6 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 8002312:	2101      	movs	r1, #1
 8002314:	9102      	str	r1, [sp, #8]
 8002316:	9201      	str	r2, [sp, #4]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4603      	mov	r3, r0
 800231c:	2203      	movs	r2, #3
 800231e:	2103      	movs	r1, #3
 8002320:	2003      	movs	r0, #3
 8002322:	f000 fde1 	bl	8002ee8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 7011 	add.w	r0, r3, #580	; 0x244
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3390      	adds	r3, #144	; 0x90
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002336:	2101      	movs	r1, #1
 8002338:	9102      	str	r1, [sp, #8]
 800233a:	9201      	str	r2, [sp, #4]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	4603      	mov	r3, r0
 8002340:	2203      	movs	r2, #3
 8002342:	2103      	movs	r1, #3
 8002344:	2003      	movs	r0, #3
 8002346:	f000 fdcf 	bl	8002ee8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	460b      	mov	r3, r1
 8002360:	2103      	movs	r1, #3
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fcda 	bl	8002d1c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f015 fc31 	bl	8017bda <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002384:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002494 <kf_update+0x1d8>
 8002388:	461a      	mov	r2, r3
 800238a:	2003      	movs	r0, #3
 800238c:	f001 f812 	bl	80033b4 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3390      	adds	r3, #144	; 0x90
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80023a0:	2101      	movs	r1, #1
 80023a2:	9102      	str	r1, [sp, #8]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	2203      	movs	r2, #3
 80023ac:	2103      	movs	r1, #3
 80023ae:	2003      	movs	r0, #3
 80023b0:	f000 fd9a 	bl	8002ee8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 80023c6:	2101      	movs	r1, #1
 80023c8:	9102      	str	r1, [sp, #8]
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	4603      	mov	r3, r0
 80023d0:	2203      	movs	r2, #3
 80023d2:	2103      	movs	r1, #3
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 fd87 	bl	8002ee8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80023ec:	2201      	movs	r2, #1
 80023ee:	9201      	str	r2, [sp, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4603      	mov	r3, r0
 80023f4:	460a      	mov	r2, r1
 80023f6:	2103      	movs	r1, #3
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fe0f 	bl	800301c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 7282 	add.w	r2, r3, #260	; 0x104
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002410:	2003      	movs	r0, #3
 8002412:	f000 fc2d 	bl	8002c70 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800241c:	4619      	mov	r1, r3
 800241e:	2003      	movs	r0, #3
 8002420:	f000 fb86 	bl	8002b30 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	336c      	adds	r3, #108	; 0x6c
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002434:	2101      	movs	r1, #1
 8002436:	9102      	str	r1, [sp, #8]
 8002438:	9201      	str	r2, [sp, #4]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4603      	mov	r3, r0
 800243e:	2203      	movs	r2, #3
 8002440:	2103      	movs	r1, #3
 8002442:	2003      	movs	r0, #3
 8002444:	f000 fd50 	bl	8002ee8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	460b      	mov	r3, r1
 800245e:	2103      	movs	r1, #3
 8002460:	2003      	movs	r0, #3
 8002462:	f000 fcce 	bl	8002e02 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002478:	2101      	movs	r1, #1
 800247a:	9102      	str	r1, [sp, #8]
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4603      	mov	r3, r0
 8002482:	2203      	movs	r2, #3
 8002484:	2103      	movs	r1, #3
 8002486:	2003      	movs	r0, #3
 8002488:	f000 fd2e 	bl	8002ee8 <matmul>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	38d1b717 	.word	0x38d1b717

08002498 <update_state_est_data>:
#include "Sim_Con/state_est.h"
#include "Sim_Con/state_est_settings.h"

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 80024a8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002530 <update_state_est_data+0x98>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024b4:	ee17 2a90 	vmov	r2, s15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024c2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002530 <update_state_est_data+0x98>
 80024c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ce:	ee17 2a90 	vmov	r2, s15
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 80024dc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002530 <update_state_est_data+0x98>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 80024f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002530 <update_state_est_data+0x98>
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002502:	ee17 2a90 	vmov	r2, s15
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002510:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002530 <update_state_est_data+0x98>
 8002514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 2a90 	vmov	r2, s15
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	447a0000 	.word	0x447a0000
 8002534:	00000000 	.word	0x00000000

08002538 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b095      	sub	sp, #84	; 0x54
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002546:	2300      	movs	r3, #0
 8002548:	647b      	str	r3, [r7, #68]	; 0x44
 800254a:	e09a      	b.n	8002682 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3308      	adds	r3, #8
 800255c:	6819      	ldr	r1, [r3, #0]
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4403      	add	r3, r0
 800256c:	3308      	adds	r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4299      	cmp	r1, r3
 8002572:	d92b      	bls.n	80025cc <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002578:	4613      	mov	r3, r2
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	3362      	adds	r3, #98	; 0x62
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002594:	4413      	add	r3, r2
 8002596:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025a2:	4613      	mov	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	3304      	adds	r3, #4
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80025b8:	440b      	add	r3, r1
 80025ba:	3b20      	subs	r3, #32
 80025bc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 80025be:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80025c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025c4:	4413      	add	r3, r2
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e01d      	b.n	8002608 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025d0:	3362      	adds	r3, #98	; 0x62
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	4413      	add	r3, r2
 80025e2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 80025ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80025f2:	4413      	add	r3, r2
 80025f4:	3b20      	subs	r3, #32
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80025fc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002602:	4413      	add	r3, r2
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002608:	6879      	ldr	r1, [r7, #4]
 800260a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	1a9b      	subs	r3, r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	333c      	adds	r3, #60	; 0x3c
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4299      	cmp	r1, r3
 800262e:	d916      	bls.n	800265e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	3330      	adds	r3, #48	; 0x30
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800264a:	440b      	add	r3, r1
 800264c:	3b30      	subs	r3, #48	; 0x30
 800264e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002650:	f107 0214 	add.w	r2, r7, #20
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	4413      	add	r3, r2
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e00e      	b.n	800267c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002666:	4413      	add	r3, r2
 8002668:	3b30      	subs	r3, #48	; 0x30
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002670:	f107 0214 	add.w	r2, r7, #20
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	4413      	add	r3, r2
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	3301      	adds	r3, #1
 8002680:	647b      	str	r3, [r7, #68]	; 0x44
 8002682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002684:	2b02      	cmp	r3, #2
 8002686:	f77f af61 	ble.w	800254c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002696:	461a      	mov	r2, r3
 8002698:	2003      	movs	r0, #3
 800269a:	f000 f975 	bl	8002988 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 800269e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	4619      	mov	r1, r3
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f96d 	bl	8002988 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80026ae:	f107 0214 	add.w	r2, r7, #20
 80026b2:	f107 0318 	add.w	r3, r7, #24
 80026b6:	4619      	mov	r1, r3
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f965 	bl	8002988 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    kf_state->u[0] = 0;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    int32_t num_acc_x_meas_active = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	643b      	str	r3, [r7, #64]	; 0x40
    int32_t num_temp_meas_active = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80026de:	2300      	movs	r3, #0
 80026e0:	637b      	str	r3, [r7, #52]	; 0x34
 80026e2:	e049      	b.n	8002778 <process_measurements+0x240>
        if (kf_state->z_active[i]){
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <process_measurements+0x1ca>
            kf_state->num_z_active += 1;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002702:	f107 0214 	add.w	r2, r7, #20
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	4413      	add	r3, r2
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d012      	beq.n	8002736 <process_measurements+0x1fe>
            kf_state->u[0] += acc_x_meas[i];
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	ed93 7a40 	vldr	s14, [r3, #256]	; 0x100
 8002716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800271e:	4413      	add	r3, r2
 8002720:	3b30      	subs	r3, #48	; 0x30
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
            num_acc_x_meas_active += 1;
 8002730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002732:	3301      	adds	r3, #1
 8002734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (temp_meas[i]) {
 8002736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800273e:	4413      	add	r3, r2
 8002740:	3b20      	subs	r3, #32
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800274a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800274e:	d010      	beq.n	8002772 <process_measurements+0x23a>
            temp_meas_mean += temp_meas[i];
 8002750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002758:	4413      	add	r3, r2
 800275a:	3b20      	subs	r3, #32
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            num_temp_meas_active += 1;
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	3301      	adds	r3, #1
 8002770:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3301      	adds	r3, #1
 8002776:	637b      	str	r3, [r7, #52]	; 0x34
 8002778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277a:	2b02      	cmp	r3, #2
 800277c:	ddb2      	ble.n	80026e4 <process_measurements+0x1ac>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	460b      	mov	r3, r1
 8002794:	2103      	movs	r1, #3
 8002796:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002798:	f7ff fa0e 	bl	8001bb8 <pressure2altitudeAGL>

    if (num_acc_x_meas_active > 0){
 800279c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dd21      	ble.n	80027e6 <process_measurements+0x2ae>
        kf_state->u[0] /= num_acc_x_meas_active;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	edd3 6a40 	vldr	s13, [r3, #256]	; 0x100
 80027a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	edc3 7a40 	vstr	s15, [r3, #256]	; 0x100
        /* gravity compensation for accelerometer */
        kf_state->u[0] -= GRAVITATION;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fee0 	bl	8000588 <__aeabi_f2d>
 80027c8:	a313      	add	r3, pc, #76	; (adr r3, 8002818 <process_measurements+0x2e0>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fd7b 	bl	80002c8 <__aeabi_dsub>
 80027d2:	4603      	mov	r3, r0
 80027d4:	460c      	mov	r4, r1
 80027d6:	4618      	mov	r0, r3
 80027d8:	4621      	mov	r1, r4
 80027da:	f7fe f9dd 	bl	8000b98 <__aeabi_d2f>
 80027de:	4602      	mov	r2, r0
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }
    if (num_temp_meas_active > 0){
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dd0f      	ble.n	800280c <process_measurements+0x2d4>
        temp_meas_mean /= num_temp_meas_active;
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80027fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027fe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        update_env(env, temp_meas_mean);
 8002802:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 8002806:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002808:	f7ff f97a 	bl	8001b00 <update_env>
    }
} 
 800280c:	bf00      	nop
 800280e:	374c      	adds	r7, #76	; 0x4c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	f3af 8000 	nop.w
 8002818:	51eb851f 	.word	0x51eb851f
 800281c:	40239eb8 	.word	0x40239eb8

08002820 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b091      	sub	sp, #68	; 0x44
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	3b01      	subs	r3, #1
 8002834:	2b05      	cmp	r3, #5
 8002836:	d823      	bhi.n	8002880 <select_noise_models+0x60>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <select_noise_models+0x20>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002859 	.word	0x08002859
 8002844:	08002859 	.word	0x08002859
 8002848:	08002863 	.word	0x08002863
 800284c:	0800286d 	.word	0x0800286d
 8002850:	08002877 	.word	0x08002877
 8002854:	08002859 	.word	0x08002859
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <select_noise_models+0x148>)
 800285a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 800285c:	4b43      	ldr	r3, [pc, #268]	; (800296c <select_noise_models+0x14c>)
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002860:	e00e      	b.n	8002880 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002862:	4b43      	ldr	r3, [pc, #268]	; (8002970 <select_noise_models+0x150>)
 8002864:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002866:	4b43      	ldr	r3, [pc, #268]	; (8002974 <select_noise_models+0x154>)
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800286a:	e009      	b.n	8002880 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 800286c:	4b42      	ldr	r3, [pc, #264]	; (8002978 <select_noise_models+0x158>)
 800286e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002870:	4b42      	ldr	r3, [pc, #264]	; (800297c <select_noise_models+0x15c>)
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002874:	e004      	b.n	8002880 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002876:	4b42      	ldr	r3, [pc, #264]	; (8002980 <select_noise_models+0x160>)
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <select_noise_models+0x164>)
 800287c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800287e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002884:	e01b      	b.n	80028be <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002886:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002888:	f7fd fe7e 	bl	8000588 <__aeabi_f2d>
 800288c:	4603      	mov	r3, r0
 800288e:	460c      	mov	r4, r1
 8002890:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002960 <select_noise_models+0x140>
 8002894:	ec44 3b10 	vmov	d0, r3, r4
 8002898:	f015 fe0a 	bl	80184b0 <pow>
 800289c:	ec54 3b10 	vmov	r3, r4, d0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4621      	mov	r1, r4
 80028a4:	f7fe f978 	bl	8000b98 <__aeabi_d2f>
 80028a8:	4601      	mov	r1, r0
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	3316      	adds	r3, #22
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4413      	add	r3, r2
 80028b4:	3304      	adds	r3, #4
 80028b6:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	3301      	adds	r3, #1
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	dde0      	ble.n	8002886 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80028ca:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 80028cc:	2301      	movs	r3, #1
 80028ce:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 80028d0:	f107 0114 	add.w	r1, r7, #20
 80028d4:	f107 0218 	add.w	r2, r7, #24
 80028d8:	f107 031c 	add.w	r3, r7, #28
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	2101      	movs	r1, #1
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f9c8 	bl	8001c78 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 80028e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff fa29 	bl	8001d48 <altitude_gradient>
 80028f6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80028fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80028fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002906:	eef0 7ae7 	vabs.f32	s15, s15
 800290a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800290e:	2300      	movs	r3, #0
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
 8002912:	e01a      	b.n	800294a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002914:	6a38      	ldr	r0, [r7, #32]
 8002916:	f7fd fe37 	bl	8000588 <__aeabi_f2d>
 800291a:	4603      	mov	r3, r0
 800291c:	460c      	mov	r4, r1
 800291e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002960 <select_noise_models+0x140>
 8002922:	ec44 3b10 	vmov	d0, r3, r4
 8002926:	f015 fdc3 	bl	80184b0 <pow>
 800292a:	ec54 3b10 	vmov	r3, r4, d0
 800292e:	4618      	mov	r0, r3
 8002930:	4621      	mov	r1, r4
 8002932:	f7fe f931 	bl	8000b98 <__aeabi_d2f>
 8002936:	4601      	mov	r1, r0
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	33b8      	adds	r3, #184	; 0xb8
 8002942:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002946:	3301      	adds	r3, #1
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	2b02      	cmp	r3, #2
 800294e:	dde1      	ble.n	8002914 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002954:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002958:	bf00      	nop
 800295a:	373c      	adds	r7, #60	; 0x3c
 800295c:	46bd      	mov	sp, r7
 800295e:	bd90      	pop	{r4, r7, pc}
 8002960:	00000000 	.word	0x00000000
 8002964:	40000000 	.word	0x40000000
 8002968:	3c97e316 	.word	0x3c97e316
 800296c:	3fef3b64 	.word	0x3fef3b64
 8002970:	3fa01965 	.word	0x3fa01965
 8002974:	41500000 	.word	0x41500000
 8002978:	3f1e3737 	.word	0x3f1e3737
 800297c:	40ec28f6 	.word	0x40ec28f6
 8002980:	3ffa41cc 	.word	0x3ffa41cc
 8002984:	40795810 	.word	0x40795810

08002988 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	b08b      	sub	sp, #44	; 0x2c
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int32_t num_active = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	e017      	b.n	80029d4 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00e      	beq.n	80029ce <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	3301      	adds	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	4413      	add	r3, r2
 80029be:	edd3 7a00 	vldr	s15, [r3]
 80029c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fa      	ldr	r2, [r7, #28]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	dbe3      	blt.n	80029a4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dd0a      	ble.n	80029f8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	ee07 3a90 	vmov	s15, r3
 80029e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ec:	edd7 6a08 	vldr	s13, [r7, #32]
 80029f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e033      	b.n	8002a6c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d02a      	beq.n	8002a66 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	4413      	add	r3, r2
 8002a18:	ed93 7a00 	vldr	s14, [r3]
 8002a1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fdae 	bl	8000588 <__aeabi_f2d>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8002b28 <sensor_elimination_by_stdev+0x1a0>
 8002a34:	ec44 3b10 	vmov	d0, r3, r4
 8002a38:	f015 fd3a 	bl	80184b0 <pow>
 8002a3c:	ec56 5b10 	vmov	r5, r6, d0
 8002a40:	69b8      	ldr	r0, [r7, #24]
 8002a42:	f7fd fda1 	bl	8000588 <__aeabi_f2d>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4623      	mov	r3, r4
 8002a4e:	4628      	mov	r0, r5
 8002a50:	4631      	mov	r1, r6
 8002a52:	f7fd fc3b 	bl	80002cc <__adddf3>
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	f7fe f89b 	bl	8000b98 <__aeabi_d2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	dbc7      	blt.n	8002a04 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	dd1a      	ble.n	8002ab0 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a84:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a8c:	ee16 0a90 	vmov	r0, s13
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	ec44 3b10 	vmov	d0, r3, r4
 8002a9c:	f015 fe78 	bl	8018790 <sqrt>
 8002aa0:	ec54 3b10 	vmov	r3, r4, d0
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	f7fe f876 	bl	8000b98 <__aeabi_d2f>
 8002aac:	4603      	mov	r3, r0
 8002aae:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	e02f      	b.n	8002b16 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d026      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	ed93 7a00 	vldr	s14, [r3]
 8002ace:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad6:	eef0 7ae7 	vabs.f32	s15, s15
 8002ada:	ee17 0a90 	vmov	r0, s15
 8002ade:	f7fd fd53 	bl	8000588 <__aeabi_f2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	69b8      	ldr	r0, [r7, #24]
 8002ae8:	f7fd fd4e 	bl	8000588 <__aeabi_f2d>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f7fd fbec 	bl	80002cc <__adddf3>
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4620      	mov	r0, r4
 8002afa:	4629      	mov	r1, r5
 8002afc:	f7fe f82c 	bl	8000b58 <__aeabi_dcmpgt>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	3301      	adds	r3, #1
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	dbcb      	blt.n	8002ab6 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8002b1e:	bf00      	nop
 8002b20:	372c      	adds	r7, #44	; 0x2c
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b26:	bf00      	nop
 8002b28:	00000000 	.word	0x00000000
 8002b2c:	40000000 	.word	0x40000000

08002b30 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8002b30:	b490      	push	{r4, r7}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	1e43      	subs	r3, r0, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	4603      	mov	r3, r0
 8002b42:	4619      	mov	r1, r3
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	f04f 0400 	mov.w	r4, #0
 8002b50:	0154      	lsls	r4, r2, #5
 8002b52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b56:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	e02b      	b.n	8002bb6 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e021      	b.n	8002ba8 <eye+0x78>
            if (i == j){
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10d      	bne.n	8002b88 <eye+0x58>
				A[i][j] = 1;
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	fb03 f302 	mul.w	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	441a      	add	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <eye+0x72>
			} else {
				A[i][j] = 0;
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	fb03 f302 	mul.w	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	441a      	add	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	dbd9      	blt.n	8002b64 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	dbcf      	blt.n	8002b5e <eye+0x2e>
			}
        }
    }
}
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc90      	pop	{r4, r7}
 8002bc6:	4770      	bx	lr

08002bc8 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8002bc8:	b4b0      	push	{r4, r5, r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	68b8      	ldr	r0, [r7, #8]
 8002bd8:	1e43      	subs	r3, r0, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4619      	mov	r1, r3
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	0154      	lsls	r4, r2, #5
 8002bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bf2:	014b      	lsls	r3, r1, #5
 8002bf4:	68fd      	ldr	r5, [r7, #12]
 8002bf6:	1e6b      	subs	r3, r5, #1
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	462b      	mov	r3, r5
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f04f 0400 	mov.w	r4, #0
 8002c0a:	0154      	lsls	r4, r2, #5
 8002c0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c10:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
 8002c16:	e022      	b.n	8002c5e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	e018      	b.n	8002c50 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8002c1e:	4602      	mov	r2, r0
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	fb03 f302 	mul.w	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fb03 f301 	mul.w	r3, r3, r1
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4419      	add	r1, r3
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fa      	ldr	r2, [r7, #28]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	dbe2      	blt.n	8002c1e <transpose+0x56>
	for(int i = 0; i < m; i++){
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	dbd8      	blt.n	8002c18 <transpose+0x50>
		}
	}
}
 8002c66:	bf00      	nop
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bcb0      	pop	{r4, r5, r7}
 8002c6e:	4770      	bx	lr

08002c70 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	e016      	b.n	8002cb2 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3301      	adds	r3, #1
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	dbe4      	blt.n	8002c84 <vecadd+0x14>
	}
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8002cc6:	b480      	push	{r7}
 8002cc8:	b087      	sub	sp, #28
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e016      	b.n	8002d08 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	ed93 7a00 	vldr	s14, [r3]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4413      	add	r3, r2
 8002cee:	edd3 7a00 	vldr	s15, [r3]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cfe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbe4      	blt.n	8002cda <vecsub+0x14>
	}
}
 8002d10:	bf00      	nop
 8002d12:	371c      	adds	r7, #28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002d1c:	b4f0      	push	{r4, r5, r6, r7}
 8002d1e:	b08a      	sub	sp, #40	; 0x28
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	68b8      	ldr	r0, [r7, #8]
 8002d2c:	1e43      	subs	r3, r0, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	0154      	lsls	r4, r2, #5
 8002d42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d46:	014b      	lsls	r3, r1, #5
 8002d48:	68bd      	ldr	r5, [r7, #8]
 8002d4a:	1e6b      	subs	r3, r5, #1
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	462b      	mov	r3, r5
 8002d50:	4619      	mov	r1, r3
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0154      	lsls	r4, r2, #5
 8002d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d64:	014b      	lsls	r3, r1, #5
 8002d66:	68be      	ldr	r6, [r7, #8]
 8002d68:	1e73      	subs	r3, r6, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4633      	mov	r3, r6
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	0154      	lsls	r4, r2, #5
 8002d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d82:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002d84:	2300      	movs	r3, #0
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e032      	b.n	8002df0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	623b      	str	r3, [r7, #32]
 8002d8e:	e028      	b.n	8002de2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8002d90:	4602      	mov	r2, r0
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fb03 f302 	mul.w	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	ed93 7a00 	vldr	s14, [r3]
 8002da8:	462a      	mov	r2, r5
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	fb03 f302 	mul.w	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	441a      	add	r2, r3
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	edd3 7a00 	vldr	s15, [r3]
 8002dc0:	4632      	mov	r2, r6
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fb03 f302 	mul.w	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dcc:	441a      	add	r2, r3
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	3301      	adds	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
 8002de2:	6a3a      	ldr	r2, [r7, #32]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	dbd2      	blt.n	8002d90 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3301      	adds	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbc8      	blt.n	8002d8a <matadd+0x6e>
        }
    }
}
 8002df8:	bf00      	nop
 8002dfa:	3728      	adds	r7, #40	; 0x28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8002e00:	4770      	bx	lr

08002e02 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8002e02:	b4f0      	push	{r4, r5, r6, r7}
 8002e04:	b08a      	sub	sp, #40	; 0x28
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	68b8      	ldr	r0, [r7, #8]
 8002e12:	1e43      	subs	r3, r0, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	4603      	mov	r3, r0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0154      	lsls	r4, r2, #5
 8002e28:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e2c:	014b      	lsls	r3, r1, #5
 8002e2e:	68bd      	ldr	r5, [r7, #8]
 8002e30:	1e6b      	subs	r3, r5, #1
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	462b      	mov	r3, r5
 8002e36:	4619      	mov	r1, r3
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	68be      	ldr	r6, [r7, #8]
 8002e4e:	1e73      	subs	r3, r6, #1
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	4633      	mov	r3, r6
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	f04f 0400 	mov.w	r4, #0
 8002e62:	0154      	lsls	r4, r2, #5
 8002e64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e68:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e032      	b.n	8002ed6 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8002e70:	2300      	movs	r3, #0
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e028      	b.n	8002ec8 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8002e76:	4602      	mov	r2, r0
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	fb03 f302 	mul.w	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	441a      	add	r2, r3
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	ed93 7a00 	vldr	s14, [r3]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	fb03 f302 	mul.w	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	4632      	mov	r2, r6
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	fb03 f302 	mul.w	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002eb2:	441a      	add	r2, r3
 8002eb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbd2      	blt.n	8002e76 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbc8      	blt.n	8002e70 <matsub+0x6e>
        }
    }
}
 8002ede:	bf00      	nop
 8002ee0:	3728      	adds	r7, #40	; 0x28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bcf0      	pop	{r4, r5, r6, r7}
 8002ee6:	4770      	bx	lr

08002ee8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08d      	sub	sp, #52	; 0x34
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6178      	str	r0, [r7, #20]
 8002ef0:	6139      	str	r1, [r7, #16]
 8002ef2:	60fa      	str	r2, [r7, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	693e      	ldr	r6, [r7, #16]
 8002ef8:	1e73      	subs	r3, r6, #1
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	4633      	mov	r3, r6
 8002efe:	4619      	mov	r1, r3
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	f04f 0400 	mov.w	r4, #0
 8002f0c:	0154      	lsls	r4, r2, #5
 8002f0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f12:	014b      	lsls	r3, r1, #5
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	f04f 0300 	mov.w	r3, #0
 8002f2a:	f04f 0400 	mov.w	r4, #0
 8002f2e:	0154      	lsls	r4, r2, #5
 8002f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f34:	014b      	lsls	r3, r1, #5
 8002f36:	68fd      	ldr	r5, [r7, #12]
 8002f38:	1e6b      	subs	r3, r5, #1
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	462b      	mov	r3, r5
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	f04f 0400 	mov.w	r4, #0
 8002f4c:	0154      	lsls	r4, r2, #5
 8002f4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f52:	014b      	lsls	r3, r1, #5
	if (reset) {
 8002f54:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	461a      	mov	r2, r3
 8002f68:	2100      	movs	r1, #0
 8002f6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002f6c:	f014 fe35 	bl	8017bda <memset>
	}
	for(int i = 0; i < m; i++){
 8002f70:	2300      	movs	r3, #0
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e04a      	b.n	800300c <matmul+0x124>
        for(int j = 0; j < o; j++){
 8002f76:	2300      	movs	r3, #0
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f7a:	e040      	b.n	8002ffe <matmul+0x116>
            for(int k = 0; k < n; k++){
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f80:	e036      	b.n	8002ff0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8002f82:	4632      	mov	r2, r6
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	fb03 f302 	mul.w	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	441a      	add	r2, r3
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	ed93 7a00 	vldr	s14, [r3]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	fb03 f302 	mul.w	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fa6:	441a      	add	r2, r3
 8002fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	fb03 f302 	mul.w	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fc2:	441a      	add	r2, r3
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	462a      	mov	r2, r5
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	fb03 f302 	mul.w	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fda:	441a      	add	r2, r3
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8002fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fec:	3301      	adds	r3, #1
 8002fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbc4      	blt.n	8002f82 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	429a      	cmp	r2, r3
 8003004:	dbba      	blt.n	8002f7c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	dbb0      	blt.n	8002f76 <matmul+0x8e>
            }
        }
    }
}
 8003014:	bf00      	nop
 8003016:	3734      	adds	r7, #52	; 0x34
 8003018:	46bd      	mov	sp, r7
 800301a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800301c:	b5b0      	push	{r4, r5, r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	68bd      	ldr	r5, [r7, #8]
 800302c:	1e6b      	subs	r3, r5, #1
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	462b      	mov	r3, r5
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	0154      	lsls	r4, r2, #5
 8003042:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003046:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003048:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	461a      	mov	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800305a:	f014 fdbe 	bl	8017bda <memset>
	}
	for(int i = 0; i < m; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e02e      	b.n	80030c2 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e024      	b.n	80030b4 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800306a:	462a      	mov	r2, r5
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fb03 f302 	mul.w	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	441a      	add	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	ed93 7a00 	vldr	s14, [r3]
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030a4:	4413      	add	r3, r2
 80030a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030aa:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3301      	adds	r3, #1
 80030b2:	61fb      	str	r3, [r7, #28]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbd6      	blt.n	800306a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	dbcc      	blt.n	8003064 <matvecprod+0x48>
        }
    }
}
 80030ca:	bf00      	nop
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}

080030d2 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80030d2:	b480      	push	{r7}
 80030d4:	b08b      	sub	sp, #44	; 0x2c
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e01d      	b.n	8003122 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	edd3 7a00 	vldr	s15, [r3]
 80030ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d102      	bne.n	80030fc <lower_triangular_inverse+0x2a>
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	e076      	b.n	80031ea <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ed93 7a00 	vldr	s14, [r3]
 8003102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3301      	adds	r3, #1
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4413      	add	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbdd      	blt.n	80030e6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 800312a:	2301      	movs	r3, #1
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4413      	add	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e052      	b.n	80031e0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e041      	b.n	80031c8 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e01b      	b.n	800318c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003170:	ed97 7a03 	vldr	s14, [r7, #12]
 8003174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003178:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	3301      	adds	r3, #1
 8003180:	61fb      	str	r3, [r7, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	429a      	cmp	r2, r3
 8003192:	dbdf      	blt.n	8003154 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	eeb1 7a67 	vneg.f32	s14, s15
 80031a4:	6a3b      	ldr	r3, [r7, #32]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4413      	add	r3, r2
 80031ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80031b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b4:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	3301      	adds	r3, #1
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbb9      	blt.n	8003144 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	3301      	adds	r3, #1
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4413      	add	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	dba8      	blt.n	800313a <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	372c      	adds	r7, #44	; 0x2c
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80031f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031fc:	b08b      	sub	sp, #44	; 0x2c
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
 8003206:	68fe      	ldr	r6, [r7, #12]
 8003208:	1e73      	subs	r3, r6, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	4633      	mov	r3, r6
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f04f 0400 	mov.w	r4, #0
 800321c:	0154      	lsls	r4, r2, #5
 800321e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003222:	014b      	lsls	r3, r1, #5
 8003224:	68fd      	ldr	r5, [r7, #12]
 8003226:	1e6b      	subs	r3, r5, #1
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	462b      	mov	r3, r5
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	f04f 0400 	mov.w	r4, #0
 800323a:	0154      	lsls	r4, r2, #5
 800323c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003240:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	fb02 f303 	mul.w	r3, r2, r3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	461a      	mov	r2, r3
 800324e:	2100      	movs	r1, #0
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f014 fcc2 	bl	8017bda <memset>
    for (int i = 0; i < n; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
 800325a:	e09f      	b.n	800339c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	e093      	b.n	800338a <cholesky+0x192>
            float s = 0;
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
 800326c:	e022      	b.n	80032b4 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800326e:	462a      	mov	r2, r5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	fb03 f302 	mul.w	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	441a      	add	r2, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	462a      	mov	r2, r5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	fb03 f302 	mul.w	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	441a      	add	r2, r3
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a2:	ed97 7a08 	vldr	s14, [r7, #32]
 80032a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032aa:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	3301      	adds	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
 80032b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	dbd8      	blt.n	800326e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d116      	bne.n	80032f2 <cholesky+0xfa>
 80032c4:	4632      	mov	r2, r6
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	fb03 f302 	mul.w	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	441a      	add	r2, r3
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	ed93 7a00 	vldr	s14, [r3]
 80032dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80032e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e4:	eeb0 0a67 	vmov.f32	s0, s15
 80032e8:	f015 fc10 	bl	8018b0c <sqrtf>
 80032ec:	ee10 1a10 	vmov	r1, s0
 80032f0:	e03d      	b.n	800336e <cholesky+0x176>
 80032f2:	462a      	mov	r2, r5
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	fb03 f302 	mul.w	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	441a      	add	r2, r3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f93d 	bl	8000588 <__aeabi_f2d>
 800330e:	4603      	mov	r3, r0
 8003310:	460c      	mov	r4, r1
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	f04f 0000 	mov.w	r0, #0
 800331a:	4925      	ldr	r1, [pc, #148]	; (80033b0 <cholesky+0x1b8>)
 800331c:	f7fd fab6 	bl	800088c <__aeabi_ddiv>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	4698      	mov	r8, r3
 8003326:	46a1      	mov	r9, r4
 8003328:	4632      	mov	r2, r6
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fb03 f302 	mul.w	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	441a      	add	r2, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	edd7 7a08 	vldr	s15, [r7, #32]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ee17 0a90 	vmov	r0, s15
 800334c:	f7fd f91c 	bl	8000588 <__aeabi_f2d>
 8003350:	4603      	mov	r3, r0
 8003352:	460c      	mov	r4, r1
 8003354:	461a      	mov	r2, r3
 8003356:	4623      	mov	r3, r4
 8003358:	4640      	mov	r0, r8
 800335a:	4649      	mov	r1, r9
 800335c:	f7fd f96c 	bl	8000638 <__aeabi_dmul>
 8003360:	4603      	mov	r3, r0
 8003362:	460c      	mov	r4, r1
 8003364:	4618      	mov	r0, r3
 8003366:	4621      	mov	r1, r4
 8003368:	f7fd fc16 	bl	8000b98 <__aeabi_d2f>
 800336c:	4601      	mov	r1, r0
 800336e:	462a      	mov	r2, r5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fb03 f302 	mul.w	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	441a      	add	r2, r3
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3301      	adds	r3, #1
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	429a      	cmp	r2, r3
 8003392:	f6ff af66 	blt.w	8003262 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	f6ff af5b 	blt.w	800325c <cholesky+0x64>
        }
}
 80033a6:	bf00      	nop
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b0:	3ff00000 	.word	0x3ff00000

080033b4 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80033b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b8:	b090      	sub	sp, #64	; 0x40
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	607a      	str	r2, [r7, #4]
 80033c2:	ed87 0a00 	vstr	s0, [r7]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1e5a      	subs	r2, r3, #1
 80033ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80033cc:	4619      	mov	r1, r3
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	f04f 0400 	mov.w	r4, #0
 80033da:	0154      	lsls	r4, r2, #5
 80033dc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e0:	014b      	lsls	r3, r1, #5
 80033e2:	68fd      	ldr	r5, [r7, #12]
 80033e4:	1e6b      	subs	r3, r5, #1
 80033e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033e8:	462b      	mov	r3, r5
 80033ea:	4619      	mov	r1, r3
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	f04f 0400 	mov.w	r4, #0
 80033f8:	0154      	lsls	r4, r2, #5
 80033fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033fe:	014b      	lsls	r3, r1, #5
 8003400:	466b      	mov	r3, sp
 8003402:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	68fe      	ldr	r6, [r7, #12]
 8003408:	1e43      	subs	r3, r0, #1
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	4603      	mov	r3, r0
 800340e:	4619      	mov	r1, r3
 8003410:	f04f 0200 	mov.w	r2, #0
 8003414:	f04f 0300 	mov.w	r3, #0
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	0154      	lsls	r4, r2, #5
 800341e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003422:	014b      	lsls	r3, r1, #5
 8003424:	4603      	mov	r3, r0
 8003426:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800342a:	1e73      	subs	r3, r6, #1
 800342c:	623b      	str	r3, [r7, #32]
 800342e:	4603      	mov	r3, r0
 8003430:	4619      	mov	r1, r3
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	4633      	mov	r3, r6
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	fb03 fe02 	mul.w	lr, r3, r2
 8003440:	fb01 fc04 	mul.w	ip, r1, r4
 8003444:	44f4      	add	ip, lr
 8003446:	fba1 3403 	umull	r3, r4, r1, r3
 800344a:	eb0c 0204 	add.w	r2, ip, r4
 800344e:	4614      	mov	r4, r2
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	0162      	lsls	r2, r4, #5
 800345a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	4603      	mov	r3, r0
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	4633      	mov	r3, r6
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	fb03 fe02 	mul.w	lr, r3, r2
 8003472:	fb01 fc04 	mul.w	ip, r1, r4
 8003476:	44f4      	add	ip, lr
 8003478:	fba1 3403 	umull	r3, r4, r1, r3
 800347c:	eb0c 0204 	add.w	r2, ip, r4
 8003480:	4614      	mov	r4, r2
 8003482:	f04f 0100 	mov.w	r1, #0
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	0162      	lsls	r2, r4, #5
 800348c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003490:	0159      	lsls	r1, r3, #5
 8003492:	4603      	mov	r3, r0
 8003494:	4632      	mov	r2, r6
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	3303      	adds	r3, #3
 800349e:	3307      	adds	r3, #7
 80034a0:	08db      	lsrs	r3, r3, #3
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	ebad 0d03 	sub.w	sp, sp, r3
 80034a8:	466b      	mov	r3, sp
 80034aa:	3303      	adds	r3, #3
 80034ac:	089b      	lsrs	r3, r3, #2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	461a      	mov	r2, r3
 80034c0:	68b9      	ldr	r1, [r7, #8]
 80034c2:	f014 fb7f 	bl	8017bc4 <memcpy>
    for (int i = 0; i < n; i++) {
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ca:	e022      	b.n	8003512 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 80034cc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034d4:	fb01 f103 	mul.w	r1, r1, r3
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	440b      	add	r3, r1
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 6a00 	vldr	s13, [r7]
 80034e8:	edd7 7a00 	vldr	s15, [r7]
 80034ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80034f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	fb01 f103 	mul.w	r1, r1, r3
 8003500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003502:	440b      	add	r3, r1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	3301      	adds	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
 8003512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	429a      	cmp	r2, r3
 8003518:	dbd8      	blt.n	80034cc <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	68fe      	ldr	r6, [r7, #12]
 800351e:	466b      	mov	r3, sp
 8003520:	469a      	mov	sl, r3
 8003522:	1e43      	subs	r3, r0, #1
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	4603      	mov	r3, r0
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	0154      	lsls	r4, r2, #5
 8003538:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353c:	014b      	lsls	r3, r1, #5
 800353e:	4603      	mov	r3, r0
 8003540:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003544:	1e73      	subs	r3, r6, #1
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	4603      	mov	r3, r0
 800354a:	4619      	mov	r1, r3
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	4633      	mov	r3, r6
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	fb03 fe02 	mul.w	lr, r3, r2
 800355a:	fb01 fc04 	mul.w	ip, r1, r4
 800355e:	44f4      	add	ip, lr
 8003560:	fba1 3403 	umull	r3, r4, r1, r3
 8003564:	eb0c 0204 	add.w	r2, ip, r4
 8003568:	4614      	mov	r4, r2
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	0162      	lsls	r2, r4, #5
 8003574:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003578:	0159      	lsls	r1, r3, #5
 800357a:	4603      	mov	r3, r0
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	4633      	mov	r3, r6
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	fb03 fe02 	mul.w	lr, r3, r2
 800358c:	fb01 fc04 	mul.w	ip, r1, r4
 8003590:	44f4      	add	ip, lr
 8003592:	fba1 3403 	umull	r3, r4, r1, r3
 8003596:	eb0c 0204 	add.w	r2, ip, r4
 800359a:	4614      	mov	r4, r2
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	0162      	lsls	r2, r4, #5
 80035a6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	4603      	mov	r3, r0
 80035ae:	4632      	mov	r2, r6
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3303      	adds	r3, #3
 80035b8:	3307      	adds	r3, #7
 80035ba:	08db      	lsrs	r3, r3, #3
 80035bc:	00db      	lsls	r3, r3, #3
 80035be:	ebad 0d03 	sub.w	sp, sp, r3
 80035c2:	466b      	mov	r3, sp
 80035c4:	3303      	adds	r3, #3
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7ff fe10 	bl	80031f8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4619      	mov	r1, r3
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fd78 	bl	80030d2 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f014 faf2 	bl	8017bda <memset>
    for(int i = 0; i < n; i++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fa:	e04e      	b.n	800369a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003600:	e044      	b.n	800368c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	4293      	cmp	r3, r2
 8003608:	bfb8      	it	lt
 800360a:	4613      	movlt	r3, r2
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
 800360e:	e036      	b.n	800367e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003610:	462a      	mov	r2, r5
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	fb03 f302 	mul.w	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	441a      	add	r2, r3
 800361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	ed93 7a00 	vldr	s14, [r3]
 8003628:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003630:	fb01 f103 	mul.w	r1, r1, r3
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	440b      	add	r3, r1
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	edd3 6a00 	vldr	s13, [r3]
 8003640:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003648:	fb01 f103 	mul.w	r1, r1, r3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	440b      	add	r3, r1
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	edd3 7a00 	vldr	s15, [r3]
 8003658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800365c:	462a      	mov	r2, r5
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	fb03 f302 	mul.w	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	441a      	add	r2, r3
 800366a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	3301      	adds	r3, #1
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
 800367e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	dbc4      	blt.n	8003610 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3301      	adds	r3, #1
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbb6      	blt.n	8003602 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	3301      	adds	r3, #1
 8003698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	429a      	cmp	r2, r3
 80036a0:	dbac      	blt.n	80035fc <cholesky_inverse+0x248>
 80036a2:	46d5      	mov	sp, sl
 80036a4:	46cd      	mov	sp, r9
            }
        }
    }
}
 80036a6:	bf00      	nop
 80036a8:	3740      	adds	r7, #64	; 0x40
 80036aa:	46bd      	mov	sp, r7
 80036ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080036b0 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	210a      	movs	r1, #10
 80036c2:	4618      	mov	r0, r3
 80036c4:	f00f ff62 	bl	801358c <osMutexAcquire>
 80036c8:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d104      	bne.n	80036da <AcquireMutex+0x2a>
		custom_mutex->counter++;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	605a      	str	r2, [r3, #4]
	}

	return status;
 80036da:	68fb      	ldr	r3, [r7, #12]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f00f ffa9 	bl	8013648 <osMutexRelease>
 80036f6:	4603      	mov	r3, r0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex, const void* global_data, const void* local_data, int32_t size){
 8003700:	b580      	push	{r7, lr}
 8003702:	b0a0      	sub	sp, #128	; 0x80
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
 800370c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 800370e:	f107 0310 	add.w	r3, r7, #16
 8003712:	2264      	movs	r2, #100	; 0x64
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f014 fa5f 	bl	8017bda <memset>
	uint32_t counter = custom_mutex->counter;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003728:	2300      	movs	r3, #0
 800372a:	677b      	str	r3, [r7, #116]	; 0x74
 800372c:	e01b      	b.n	8003766 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	f107 0310 	add.w	r3, r7, #16
 8003734:	68b9      	ldr	r1, [r7, #8]
 8003736:	4618      	mov	r0, r3
 8003738:	f014 fa44 	bl	8017bc4 <memcpy>
		if(custom_mutex->counter == counter){
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003742:	429a      	cmp	r2, r3
 8003744:	d109      	bne.n	800375a <ReadMutex+0x5a>
			memcpy(local_data, &buffer[0], size);
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f014 fa38 	bl	8017bc4 <memcpy>
			status = osOK;
 8003754:	2300      	movs	r3, #0
 8003756:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003758:	e008      	b.n	800376c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003760:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003762:	3301      	adds	r3, #1
 8003764:	677b      	str	r3, [r7, #116]	; 0x74
 8003766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003768:	2b04      	cmp	r3, #4
 800376a:	dde0      	ble.n	800372e <ReadMutex+0x2e>
	}
	return status;
 800376c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 800376e:	4618      	mov	r0, r3
 8003770:	3780      	adds	r7, #128	; 0x80
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b08d      	sub	sp, #52	; 0x34
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003786:	f107 031c 	add.w	r3, r7, #28
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 800379c:	f04f 33ff 	mov.w	r3, #4294967295
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 5; i < 5; i++){
 80037a8:	2305      	movs	r3, #5
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
 80037ac:	e07b      	b.n	80038a6 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	ee07 3a90 	vmov	s15, r3
 80037b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ba:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80037ca:	ee07 3a90 	vmov	s15, r3
 80037ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037d2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80038c0 <ReadMutexStateEst+0x148>
 80037d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037da:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f0:	eddf 6a34 	vldr	s13, [pc, #208]	; 80038c4 <ReadMutexStateEst+0x14c>
 80037f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003802:	429a      	cmp	r2, r3
 8003804:	d149      	bne.n	800389a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003808:	1e5a      	subs	r2, r3, #1
 800380a:	6939      	ldr	r1, [r7, #16]
 800380c:	6838      	ldr	r0, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4413      	add	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4403      	add	r3, r0
 8003818:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 800381a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	6838      	ldr	r0, [r7, #0]
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4403      	add	r3, r0
 800382c:	3304      	adds	r3, #4
 800382e:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	69f9      	ldr	r1, [r7, #28]
 8003836:	6838      	ldr	r0, [r7, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4403      	add	r3, r0
 8003842:	3308      	adds	r3, #8
 8003844:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fc fe9d 	bl	8000588 <__aeabi_f2d>
 800384e:	a31a      	add	r3, pc, #104	; (adr r3, 80038b8 <ReadMutexStateEst+0x140>)
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f7fc fef0 	bl	8000638 <__aeabi_dmul>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	4619      	mov	r1, r3
 800385e:	4622      	mov	r2, r4
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	1e5c      	subs	r4, r3, #1
 8003864:	4608      	mov	r0, r1
 8003866:	4611      	mov	r1, r2
 8003868:	f7fd f996 	bl	8000b98 <__aeabi_d2f>
 800386c:	4601      	mov	r1, r0
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	4623      	mov	r3, r4
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	1b1b      	subs	r3, r3, r4
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	3330      	adds	r3, #48	; 0x30
 800387c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	6a39      	ldr	r1, [r7, #32]
 8003884:	6838      	ldr	r0, [r7, #0]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	333c      	adds	r3, #60	; 0x3c
 8003892:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003894:	2300      	movs	r3, #0
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003898:	e008      	b.n	80038ac <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 5; i < 5; i++){
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	3301      	adds	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	dd80      	ble.n	80037ae <ReadMutexStateEst+0x36>
	}


	return status;
 80038ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3734      	adds	r7, #52	; 0x34
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	51eb851f 	.word	0x51eb851f
 80038bc:	40239eb8 	.word	0x40239eb8
 80038c0:	44800000 	.word	0x44800000
 80038c4:	42c80000 	.word	0x42c80000

080038c8 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 80038c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ca:	b0b3      	sub	sp, #204	; 0xcc
 80038cc:	af06      	add	r7, sp, #24
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	460b      	mov	r3, r1
 80038d4:	72fb      	strb	r3, [r7, #11]
 80038d6:	4613      	mov	r3, r2
 80038d8:	72bb      	strb	r3, [r7, #10]
	log_entry_t log_entry = { 0 };
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	2296      	movs	r2, #150	; 0x96
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f014 f979 	bl	8017bda <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 80038e8:	7afb      	ldrb	r3, [r7, #11]
 80038ea:	7aba      	ldrb	r2, [r7, #10]
 80038ec:	f107 0010 	add.w	r0, r7, #16
 80038f0:	9202      	str	r2, [sp, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2301      	movs	r3, #1
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a41      	ldr	r2, [pc, #260]	; (8003a00 <logSensor+0x138>)
 80038fc:	2196      	movs	r1, #150	; 0x96
 80038fe:	f014 fa2d 	bl	8017d5c <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003902:	7abb      	ldrb	r3, [r7, #10]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <logSensor+0x46>
 8003908:	2b02      	cmp	r3, #2
 800390a:	d01d      	beq.n	8003948 <logSensor+0x80>
 800390c:	e055      	b.n	80039ba <logSensor+0xf2>
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fc79 	bl	8000210 <strlen>
 800391e:	4602      	mov	r2, r0
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	1898      	adds	r0, r3, r2
 8003926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003936:	6892      	ldr	r2, [r2, #8]
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <logSensor+0x13c>)
 8003940:	2196      	movs	r1, #150	; 0x96
 8003942:	f014 fa0b 	bl	8017d5c <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003946:	e04e      	b.n	80039e6 <logSensor+0x11e>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		snprintf(log_entry.str + strlen(log_entry.str),
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	4618      	mov	r0, r3
 8003954:	f7fc fc5c 	bl	8000210 <strlen>
 8003958:	4602      	mov	r2, r0
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003964:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003968:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800396a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800396e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003972:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003974:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003978:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 800397c:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800397e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003982:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003986:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800398c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003990:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003996:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 800399a:	461e      	mov	r6, r3
 800399c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	9604      	str	r6, [sp, #16]
 80039a6:	9503      	str	r5, [sp, #12]
 80039a8:	9402      	str	r4, [sp, #8]
 80039aa:	9101      	str	r1, [sp, #4]
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	4663      	mov	r3, ip
 80039b0:	4a15      	ldr	r2, [pc, #84]	; (8003a08 <logSensor+0x140>)
 80039b2:	2196      	movs	r1, #150	; 0x96
 80039b4:	f014 f9d2 	bl	8017d5c <sniprintf>
	}
		break;
 80039b8:	e015      	b.n	80039e6 <logSensor+0x11e>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc26 	bl	8000210 <strlen>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f107 0310 	add.w	r3, r7, #16
 80039ca:	4413      	add	r3, r2
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <logSensor+0x144>)
 80039ce:	461d      	mov	r5, r3
 80039d0:	4614      	mov	r4, r2
 80039d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d4:	6028      	str	r0, [r5, #0]
 80039d6:	6069      	str	r1, [r5, #4]
 80039d8:	60aa      	str	r2, [r5, #8]
 80039da:	60eb      	str	r3, [r5, #12]
 80039dc:	6820      	ldr	r0, [r4, #0]
 80039de:	6128      	str	r0, [r5, #16]
 80039e0:	7923      	ldrb	r3, [r4, #4]
 80039e2:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80039e4:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <logSensor+0x148>)
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	f107 0110 	add.w	r1, r7, #16
 80039ee:	2300      	movs	r3, #0
 80039f0:	2200      	movs	r2, #0
 80039f2:	f010 f891 	bl	8013b18 <osMessageQueuePut>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	37b4      	adds	r7, #180	; 0xb4
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a00:	0801a504 	.word	0x0801a504
 8003a04:	0801a514 	.word	0x0801a514
 8003a08:	0801a524 	.word	0x0801a524
 8003a0c:	0801a544 	.word	0x0801a544
 8003a10:	2001ccfc 	.word	0x2001ccfc

08003a14 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0ac      	sub	sp, #176	; 0xb0
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4638      	mov	r0, r7
 8003a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a22:	f107 0310 	add.w	r3, r7, #16
 8003a26:	2296      	movs	r2, #150	; 0x96
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f014 f8d5 	bl	8017bda <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 8003a30:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8003a32:	f107 0010 	add.w	r0, r7, #16
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <logRocketState+0x4c>)
 8003a40:	2196      	movs	r1, #150	; 0x96
 8003a42:	f014 f98b 	bl	8017d5c <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003a46:	4b07      	ldr	r3, [pc, #28]	; (8003a64 <logRocketState+0x50>)
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	f107 0110 	add.w	r1, r7, #16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2200      	movs	r2, #0
 8003a52:	f010 f861 	bl	8013b18 <osMessageQueuePut>
 8003a56:	4603      	mov	r3, r0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	37a8      	adds	r7, #168	; 0xa8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	0801a55c 	.word	0x0801a55c
 8003a64:	2001ccfc 	.word	0x2001ccfc

08003a68 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8003a68:	b084      	sub	sp, #16
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b0ac      	sub	sp, #176	; 0xb0
 8003a6e:	af04      	add	r7, sp, #16
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	2296      	movs	r2, #150	; 0x96
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f014 f8a9 	bl	8017bda <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, ESTIMATOR_VAR,
 8003a88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003a8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a90:	f107 0008 	add.w	r0, r7, #8
 8003a94:	9202      	str	r2, [sp, #8]
 8003a96:	9301      	str	r3, [sp, #4]
 8003a98:	2303      	movs	r3, #3
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <logEstimatorVar+0x60>)
 8003aa0:	2196      	movs	r1, #150	; 0x96
 8003aa2:	f014 f95b 	bl	8017d5c <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <logEstimatorVar+0x64>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0108 	add.w	r1, r7, #8
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f010 f831 	bl	8013b18 <osMessageQueuePut>
 8003ab6:	4603      	mov	r3, r0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	37a0      	adds	r7, #160	; 0xa0
 8003abc:	46bd      	mov	sp, r7
 8003abe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ac2:	b004      	add	sp, #16
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	0801a568 	.word	0x0801a568
 8003acc:	2001ccfc 	.word	0x2001ccfc

08003ad0 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b0ae      	sub	sp, #184	; 0xb8
 8003ad4:	af04      	add	r7, sp, #16
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	2296      	movs	r2, #150	; 0x96
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f014 f877 	bl	8017bda <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8003aec:	f107 0010 	add.w	r0, r7, #16
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2304      	movs	r3, #4
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a08      	ldr	r2, [pc, #32]	; (8003b24 <logControllerOutput+0x54>)
 8003b04:	2196      	movs	r1, #150	; 0x96
 8003b06:	f014 f929 	bl	8017d5c <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <logControllerOutput+0x58>)
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	f107 0110 	add.w	r1, r7, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	2200      	movs	r2, #0
 8003b16:	f00f ffff 	bl	8013b18 <osMessageQueuePut>
 8003b1a:	4603      	mov	r3, r0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	37a8      	adds	r7, #168	; 0xa8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	0801a578 	.word	0x0801a578
 8003b28:	2001ccfc 	.word	0x2001ccfc

08003b2c <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0ae      	sub	sp, #184	; 0xb8
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8003b38:	f107 0310 	add.w	r3, r7, #16
 8003b3c:	2296      	movs	r2, #150	; 0x96
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f014 f84a 	bl	8017bda <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 8003b46:	f107 0010 	add.w	r0, r7, #16
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	9302      	str	r3, [sp, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	9301      	str	r3, [sp, #4]
 8003b52:	2305      	movs	r3, #5
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <logMotor+0x50>)
 8003b5a:	2196      	movs	r1, #150	; 0x96
 8003b5c:	f014 f8fe 	bl	8017d5c <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <logMotor+0x54>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	f107 0110 	add.w	r1, r7, #16
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f00f ffd4 	bl	8013b18 <osMessageQueuePut>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	37a8      	adds	r7, #168	; 0xa8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	0801a568 	.word	0x0801a568
 8003b80:	2001ccfc 	.word	0x2001ccfc

08003b84 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8003b84:	b40f      	push	{r0, r1, r2, r3}
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8003b90:	79fb      	ldrb	r3, [r7, #7]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	b004      	add	sp, #16
 8003b9e:	4770      	bx	lr

08003ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ba0:	b590      	push	{r4, r7, lr}
 8003ba2:	b0a5      	sub	sp, #148	; 0x94
 8003ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ba6:	f001 ff0c 	bl	80059c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003baa:	f000 f98b 	bl	8003ec4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8003bae:	4b8b      	ldr	r3, [pc, #556]	; (8003ddc <main+0x23c>)
 8003bb0:	4a8b      	ldr	r2, [pc, #556]	; (8003de0 <main+0x240>)
 8003bb2:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8003bb4:	4b89      	ldr	r3, [pc, #548]	; (8003ddc <main+0x23c>)
 8003bb6:	4a8b      	ldr	r2, [pc, #556]	; (8003de4 <main+0x244>)
 8003bb8:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8003bba:	488b      	ldr	r0, [pc, #556]	; (8003de8 <main+0x248>)
 8003bbc:	f7fd ff64 	bl	8001a88 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8003bc0:	488a      	ldr	r0, [pc, #552]	; (8003dec <main+0x24c>)
 8003bc2:	f7fe fa1f 	bl	8002004 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc6:	f000 fb67 	bl	8004298 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bca:	f000 fb3f 	bl	800424c <MX_DMA_Init>
  MX_SPI3_Init();
 8003bce:	f000 fa9d 	bl	800410c <MX_SPI3_Init>
  MX_SPI1_Init();
 8003bd2:	f000 fa2b 	bl	800402c <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8003bd6:	f000 fa09 	bl	8003fec <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8003bda:	f000 fa5f 	bl	800409c <MX_SPI2_Init>
  MX_FATFS_Init();
 8003bde:	f00a fca7 	bl	800e530 <MX_FATFS_Init>
  MX_UART7_Init();
 8003be2:	f000 fafb 	bl	80041dc <MX_UART7_Init>
  MX_UART4_Init();
 8003be6:	f000 fac9 	bl	800417c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 8003bea:	f013 fa57 	bl	801709c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003bee:	f00f fa61 	bl	80130b4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	; (8003df0 <main+0x250>)
 8003bf4:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8003bf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8003bfe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003c02:	4618      	mov	r0, r3
 8003c04:	f00f fc28 	bl	8013458 <osMutexNew>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b7a      	ldr	r3, [pc, #488]	; (8003df4 <main+0x254>)
 8003c0c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <main+0x258>)
 8003c10:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8003c14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 8003c1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00f fc1a 	bl	8013458 <osMutexNew>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b75      	ldr	r3, [pc, #468]	; (8003dfc <main+0x25c>)
 8003c28:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 8003c2a:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <main+0x260>)
 8003c2c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8003c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8003c36:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f00f fc0c 	bl	8013458 <osMutexNew>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b70      	ldr	r3, [pc, #448]	; (8003e04 <main+0x264>)
 8003c44:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <main+0x268>)
 8003c48:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8003c4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8003c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f00f fbfe 	bl	8013458 <osMutexNew>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b6b      	ldr	r3, [pc, #428]	; (8003e0c <main+0x26c>)
 8003c60:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8003c62:	4b6b      	ldr	r3, [pc, #428]	; (8003e10 <main+0x270>)
 8003c64:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8003c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 8003c6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f00f fbf0 	bl	8013458 <osMutexNew>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <main+0x274>)
 8003c7c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 8003c7e:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <main+0x278>)
 8003c80:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8003c84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8003c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00f fbe2 	bl	8013458 <osMutexNew>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <main+0x27c>)
 8003c98:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8003c9a:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <main+0x280>)
 8003c9c:	f107 0420 	add.w	r4, r7, #32
 8003ca0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8003ca6:	f107 0320 	add.w	r3, r7, #32
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00f fbd4 	bl	8013458 <osMutexNew>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <main+0x284>)
 8003cb4:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8003cb6:	4b5c      	ldr	r3, [pc, #368]	; (8003e28 <main+0x288>)
 8003cb8:	f107 0410 	add.w	r4, r7, #16
 8003cbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f00f fbc6 	bl	8013458 <osMutexNew>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <main+0x28c>)
 8003cd0:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <main+0x290>)
 8003cd4:	463c      	mov	r4, r7
 8003cd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f00f fbba 	bl	8013458 <osMutexNew>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <main+0x294>)
 8003ce8:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 8003cea:	4b42      	ldr	r3, [pc, #264]	; (8003df4 <main+0x254>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <main+0x298>)
 8003cf0:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 8003cf2:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <main+0x25c>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a51      	ldr	r2, [pc, #324]	; (8003e3c <main+0x29c>)
 8003cf8:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8003cfa:	4b42      	ldr	r3, [pc, #264]	; (8003e04 <main+0x264>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a50      	ldr	r2, [pc, #320]	; (8003e40 <main+0x2a0>)
 8003d00:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <main+0x284>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a4f      	ldr	r2, [pc, #316]	; (8003e44 <main+0x2a4>)
 8003d08:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8003d0a:	4b44      	ldr	r3, [pc, #272]	; (8003e1c <main+0x27c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <main+0x2a8>)
 8003d10:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <main+0x274>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a4d      	ldr	r2, [pc, #308]	; (8003e4c <main+0x2ac>)
 8003d18:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <main+0x26c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a4c      	ldr	r2, [pc, #304]	; (8003e50 <main+0x2b0>)
 8003d20:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 8003d22:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <main+0x28c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4b      	ldr	r2, [pc, #300]	; (8003e54 <main+0x2b4>)
 8003d28:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8003d2a:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <main+0x294>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	; (8003e58 <main+0x2b8>)
 8003d30:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 8003d32:	4b2e      	ldr	r3, [pc, #184]	; (8003dec <main+0x24c>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8003d38:	4b2c      	ldr	r3, [pc, #176]	; (8003dec <main+0x24c>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <main+0x2bc>)
 8003d40:	229b      	movs	r2, #155	; 0x9b
 8003d42:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2196      	movs	r1, #150	; 0x96
 8003d48:	2080      	movs	r0, #128	; 0x80
 8003d4a:	f00f fe5f 	bl	8013a0c <osMessageQueueNew>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <main+0x2c0>)
 8003d52:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003d54:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <main+0x2c4>)
 8003d56:	2100      	movs	r1, #0
 8003d58:	4843      	ldr	r0, [pc, #268]	; (8003e68 <main+0x2c8>)
 8003d5a:	f00f fa69 	bl	8013230 <osThreadNew>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <main+0x2cc>)
 8003d62:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <main+0x2d0>)
 8003d66:	2100      	movs	r1, #0
 8003d68:	4842      	ldr	r0, [pc, #264]	; (8003e74 <main+0x2d4>)
 8003d6a:	f00f fa61 	bl	8013230 <osThreadNew>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	4b41      	ldr	r3, [pc, #260]	; (8003e78 <main+0x2d8>)
 8003d72:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 8003d74:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <main+0x2dc>)
 8003d76:	2100      	movs	r1, #0
 8003d78:	4841      	ldr	r0, [pc, #260]	; (8003e80 <main+0x2e0>)
 8003d7a:	f00f fa59 	bl	8013230 <osThreadNew>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b40      	ldr	r3, [pc, #256]	; (8003e84 <main+0x2e4>)
 8003d82:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <main+0x2e8>)
 8003d86:	2100      	movs	r1, #0
 8003d88:	4840      	ldr	r0, [pc, #256]	; (8003e8c <main+0x2ec>)
 8003d8a:	f00f fa51 	bl	8013230 <osThreadNew>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	4b3f      	ldr	r3, [pc, #252]	; (8003e90 <main+0x2f0>)
 8003d92:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 8003d94:	4a3f      	ldr	r2, [pc, #252]	; (8003e94 <main+0x2f4>)
 8003d96:	2100      	movs	r1, #0
 8003d98:	483f      	ldr	r0, [pc, #252]	; (8003e98 <main+0x2f8>)
 8003d9a:	f00f fa49 	bl	8013230 <osThreadNew>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b3e      	ldr	r3, [pc, #248]	; (8003e9c <main+0x2fc>)
 8003da2:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 8003da4:	4a3e      	ldr	r2, [pc, #248]	; (8003ea0 <main+0x300>)
 8003da6:	2100      	movs	r1, #0
 8003da8:	483e      	ldr	r0, [pc, #248]	; (8003ea4 <main+0x304>)
 8003daa:	f00f fa41 	bl	8013230 <osThreadNew>
 8003dae:	4602      	mov	r2, r0
 8003db0:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <main+0x308>)
 8003db2:	601a      	str	r2, [r3, #0]

  /* creation of tas_fsm */
  tas_fsmHandle = osThreadNew(vTaskFSM, NULL, &tas_fsm_attributes);
 8003db4:	4a3d      	ldr	r2, [pc, #244]	; (8003eac <main+0x30c>)
 8003db6:	2100      	movs	r1, #0
 8003db8:	483d      	ldr	r0, [pc, #244]	; (8003eb0 <main+0x310>)
 8003dba:	f00f fa39 	bl	8013230 <osThreadNew>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b3c      	ldr	r3, [pc, #240]	; (8003eb4 <main+0x314>)
 8003dc2:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <main+0x318>)
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	483c      	ldr	r0, [pc, #240]	; (8003ebc <main+0x31c>)
 8003dca:	f00f fa31 	bl	8013230 <osThreadNew>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	4b3b      	ldr	r3, [pc, #236]	; (8003ec0 <main+0x320>)
 8003dd2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dd4:	f00f f9c4 	bl	8013160 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <main+0x238>
 8003dda:	bf00      	nop
 8003ddc:	e0042000 	.word	0xe0042000
 8003de0:	07e01bff 	.word	0x07e01bff
 8003de4:	00070003 	.word	0x00070003
 8003de8:	200002ac 	.word	0x200002ac
 8003dec:	200002bc 	.word	0x200002bc
 8003df0:	0801a618 	.word	0x0801a618
 8003df4:	20010aec 	.word	0x20010aec
 8003df8:	0801a638 	.word	0x0801a638
 8003dfc:	2001ed00 	.word	0x2001ed00
 8003e00:	0801a658 	.word	0x0801a658
 8003e04:	20008b60 	.word	0x20008b60
 8003e08:	0801a680 	.word	0x0801a680
 8003e0c:	20010ad8 	.word	0x20010ad8
 8003e10:	0801a6a8 	.word	0x0801a6a8
 8003e14:	20026cf8 	.word	0x20026cf8
 8003e18:	0801a6c8 	.word	0x0801a6c8
 8003e1c:	20010ae8 	.word	0x20010ae8
 8003e20:	0801a6f0 	.word	0x0801a6f0
 8003e24:	20010adc 	.word	0x20010adc
 8003e28:	0801a714 	.word	0x0801a714
 8003e2c:	20008b5c 	.word	0x20008b5c
 8003e30:	0801a738 	.word	0x0801a738
 8003e34:	20008b64 	.word	0x20008b64
 8003e38:	20010a70 	.word	0x20010a70
 8003e3c:	20026d00 	.word	0x20026d00
 8003e40:	20010ae0 	.word	0x20010ae0
 8003e44:	20008b70 	.word	0x20008b70
 8003e48:	20008984 	.word	0x20008984
 8003e4c:	20010a60 	.word	0x20010a60
 8003e50:	20010af0 	.word	0x20010af0
 8003e54:	20008ad0 	.word	0x20008ad0
 8003e58:	20008b68 	.word	0x20008b68
 8003e5c:	20014b54 	.word	0x20014b54
 8003e60:	2001ccfc 	.word	0x2001ccfc
 8003e64:	0801ab34 	.word	0x0801ab34
 8003e68:	08004375 	.word	0x08004375
 8003e6c:	20008980 	.word	0x20008980
 8003e70:	0801ab58 	.word	0x0801ab58
 8003e74:	080054f1 	.word	0x080054f1
 8003e78:	20010a6c 	.word	0x20010a6c
 8003e7c:	0801ab7c 	.word	0x0801ab7c
 8003e80:	08004b35 	.word	0x08004b35
 8003e84:	20026cfc 	.word	0x20026cfc
 8003e88:	0801aba0 	.word	0x0801aba0
 8003e8c:	080052b1 	.word	0x080052b1
 8003e90:	20008b78 	.word	0x20008b78
 8003e94:	0801abc4 	.word	0x0801abc4
 8003e98:	08004f1d 	.word	0x08004f1d
 8003e9c:	20008a70 	.word	0x20008a70
 8003ea0:	0801abe8 	.word	0x0801abe8
 8003ea4:	08004d7d 	.word	0x08004d7d
 8003ea8:	20010a68 	.word	0x20010a68
 8003eac:	0801ac0c 	.word	0x0801ac0c
 8003eb0:	08004c9d 	.word	0x08004c9d
 8003eb4:	20010a78 	.word	0x20010a78
 8003eb8:	0801ac30 	.word	0x0801ac30
 8003ebc:	080057a5 	.word	0x080057a5
 8003ec0:	2001ac14 	.word	0x2001ac14

08003ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b0b4      	sub	sp, #208	; 0xd0
 8003ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003eca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ece:	2230      	movs	r2, #48	; 0x30
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f013 fe81 	bl	8017bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ee8:	f107 0308 	add.w	r3, r7, #8
 8003eec:	2284      	movs	r2, #132	; 0x84
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f013 fe72 	bl	8017bda <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	4b3a      	ldr	r3, [pc, #232]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a39      	ldr	r2, [pc, #228]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
 8003f02:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <SystemClock_Config+0x11c>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f16:	4a33      	ldr	r2, [pc, #204]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <SystemClock_Config+0x120>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003f46:	2304      	movs	r3, #4
 8003f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003f4c:	23a8      	movs	r3, #168	; 0xa8
 8003f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f52:	2302      	movs	r3, #2
 8003f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003f58:	2307      	movs	r3, #7
 8003f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f003 fd9e 	bl	8007aa4 <HAL_RCC_OscConfig>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003f6e:	f000 fa1d 	bl	80043ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f72:	230f      	movs	r3, #15
 8003f74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003f94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f98:	2105      	movs	r1, #5
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f004 f826 	bl	8007fec <HAL_RCC_ClockConfig>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003fa6:	f000 fa01 	bl	80043ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART7
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <SystemClock_Config+0x124>)
 8003fac:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc2:	f107 0308 	add.w	r3, r7, #8
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f004 fa3a 	bl	8008440 <HAL_RCCEx_PeriphCLKConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8003fd2:	f000 f9eb 	bl	80043ac <Error_Handler>
  }
}
 8003fd6:	bf00      	nop
 8003fd8:	37d0      	adds	r7, #208	; 0xd0
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	00a01200 	.word	0x00a01200

08003fec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <MX_SDMMC1_SD_Init+0x3c>)
 8003ff4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004004:	2200      	movs	r2, #0
 8004006:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <MX_SDMMC1_SD_Init+0x38>)
 8004016:	2200      	movs	r2, #0
 8004018:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800401a:	bf00      	nop
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	20008ad8 	.word	0x20008ad8
 8004028:	40012c00 	.word	0x40012c00

0800402c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004030:	4b18      	ldr	r3, [pc, #96]	; (8004094 <MX_SPI1_Init+0x68>)
 8004032:	4a19      	ldr	r2, [pc, #100]	; (8004098 <MX_SPI1_Init+0x6c>)
 8004034:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <MX_SPI1_Init+0x68>)
 8004038:	2200      	movs	r2, #0
 800403a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800403c:	4b15      	ldr	r3, [pc, #84]	; (8004094 <MX_SPI1_Init+0x68>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004042:	4b14      	ldr	r3, [pc, #80]	; (8004094 <MX_SPI1_Init+0x68>)
 8004044:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004048:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <MX_SPI1_Init+0x68>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004050:	4b10      	ldr	r3, [pc, #64]	; (8004094 <MX_SPI1_Init+0x68>)
 8004052:	2200      	movs	r2, #0
 8004054:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <MX_SPI1_Init+0x68>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <MX_SPI1_Init+0x68>)
 800405e:	2200      	movs	r2, #0
 8004060:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_SPI1_Init+0x68>)
 8004064:	2200      	movs	r2, #0
 8004066:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <MX_SPI1_Init+0x68>)
 800406a:	2200      	movs	r2, #0
 800406c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_SPI1_Init+0x68>)
 8004070:	2207      	movs	r2, #7
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <MX_SPI1_Init+0x68>)
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_SPI1_Init+0x68>)
 800407c:	2200      	movs	r2, #0
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <MX_SPI1_Init+0x68>)
 8004082:	f006 f889 	bl	800a198 <HAL_SPI_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800408c:	f000 f98e 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	2001cc98 	.word	0x2001cc98
 8004098:	40013000 	.word	0x40013000

0800409c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <MX_SPI2_Init+0x68>)
 80040a2:	4a19      	ldr	r2, [pc, #100]	; (8004108 <MX_SPI2_Init+0x6c>)
 80040a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <MX_SPI2_Init+0x68>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <MX_SPI2_Init+0x68>)
 80040b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80040b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <MX_SPI2_Init+0x68>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <MX_SPI2_Init+0x68>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <MX_SPI2_Init+0x68>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040cc:	4b0d      	ldr	r3, [pc, #52]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040d2:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <MX_SPI2_Init+0x68>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <MX_SPI2_Init+0x68>)
 80040da:	2200      	movs	r2, #0
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <MX_SPI2_Init+0x68>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <MX_SPI2_Init+0x68>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <MX_SPI2_Init+0x68>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f0:	4804      	ldr	r0, [pc, #16]	; (8004104 <MX_SPI2_Init+0x68>)
 80040f2:	f006 f851 	bl	800a198 <HAL_SPI_Init>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_SPI2_Init+0x64>
  {
    Error_Handler();
 80040fc:	f000 f956 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	2000898c 	.word	0x2000898c
 8004108:	40003800 	.word	0x40003800

0800410c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <MX_SPI3_Init+0x68>)
 8004112:	4a19      	ldr	r2, [pc, #100]	; (8004178 <MX_SPI3_Init+0x6c>)
 8004114:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004116:	4b17      	ldr	r3, [pc, #92]	; (8004174 <MX_SPI3_Init+0x68>)
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800411c:	4b15      	ldr	r3, [pc, #84]	; (8004174 <MX_SPI3_Init+0x68>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <MX_SPI3_Init+0x68>)
 8004124:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004128:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <MX_SPI3_Init+0x68>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004130:	4b10      	ldr	r3, [pc, #64]	; (8004174 <MX_SPI3_Init+0x68>)
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <MX_SPI3_Init+0x68>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800413c:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <MX_SPI3_Init+0x68>)
 800413e:	2200      	movs	r2, #0
 8004140:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <MX_SPI3_Init+0x68>)
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <MX_SPI3_Init+0x68>)
 800414a:	2200      	movs	r2, #0
 800414c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800414e:	4b09      	ldr	r3, [pc, #36]	; (8004174 <MX_SPI3_Init+0x68>)
 8004150:	2207      	movs	r2, #7
 8004152:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <MX_SPI3_Init+0x68>)
 8004156:	2200      	movs	r2, #0
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <MX_SPI3_Init+0x68>)
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004160:	4804      	ldr	r0, [pc, #16]	; (8004174 <MX_SPI3_Init+0x68>)
 8004162:	f006 f819 	bl	800a198 <HAL_SPI_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 800416c:	f000 f91e 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004170:	bf00      	nop
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200109fc 	.word	0x200109fc
 8004178:	40003c00 	.word	0x40003c00

0800417c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <MX_UART4_Init+0x58>)
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <MX_UART4_Init+0x5c>)
 8004184:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004186:	4b13      	ldr	r3, [pc, #76]	; (80041d4 <MX_UART4_Init+0x58>)
 8004188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800418c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <MX_UART4_Init+0x58>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <MX_UART4_Init+0x58>)
 8004196:	2200      	movs	r2, #0
 8004198:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800419a:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <MX_UART4_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <MX_UART4_Init+0x58>)
 80041a2:	220c      	movs	r2, #12
 80041a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	; (80041d4 <MX_UART4_Init+0x58>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <MX_UART4_Init+0x58>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041b2:	4b08      	ldr	r3, [pc, #32]	; (80041d4 <MX_UART4_Init+0x58>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041b8:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <MX_UART4_Init+0x58>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80041be:	4805      	ldr	r0, [pc, #20]	; (80041d4 <MX_UART4_Init+0x58>)
 80041c0:	f007 f8a2 	bl	800b308 <HAL_UART_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80041ca:	f000 f8ef 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2001cc18 	.word	0x2001cc18
 80041d8:	40004c00 	.word	0x40004c00

080041dc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80041e0:	4b18      	ldr	r3, [pc, #96]	; (8004244 <MX_UART7_Init+0x68>)
 80041e2:	4a19      	ldr	r2, [pc, #100]	; (8004248 <MX_UART7_Init+0x6c>)
 80041e4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80041e6:	4b17      	ldr	r3, [pc, #92]	; (8004244 <MX_UART7_Init+0x68>)
 80041e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041ec:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80041ee:	4b15      	ldr	r3, [pc, #84]	; (8004244 <MX_UART7_Init+0x68>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <MX_UART7_Init+0x68>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80041fa:	4b12      	ldr	r3, [pc, #72]	; (8004244 <MX_UART7_Init+0x68>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004200:	4b10      	ldr	r3, [pc, #64]	; (8004244 <MX_UART7_Init+0x68>)
 8004202:	220c      	movs	r2, #12
 8004204:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <MX_UART7_Init+0x68>)
 8004208:	2200      	movs	r2, #0
 800420a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800420c:	4b0d      	ldr	r3, [pc, #52]	; (8004244 <MX_UART7_Init+0x68>)
 800420e:	2200      	movs	r2, #0
 8004210:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004212:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <MX_UART7_Init+0x68>)
 8004214:	2200      	movs	r2, #0
 8004216:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <MX_UART7_Init+0x68>)
 800421a:	2230      	movs	r2, #48	; 0x30
 800421c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <MX_UART7_Init+0x68>)
 8004220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004224:	639a      	str	r2, [r3, #56]	; 0x38
  huart7.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <MX_UART7_Init+0x68>)
 8004228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800422e:	4805      	ldr	r0, [pc, #20]	; (8004244 <MX_UART7_Init+0x68>)
 8004230:	f007 f86a 	bl	800b308 <HAL_UART_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_UART7_Init+0x62>
  {
    Error_Handler();
 800423a:	f000 f8b7 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	200089f0 	.word	0x200089f0
 8004248:	40007800 	.word	0x40007800

0800424c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <MX_DMA_Init+0x48>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <MX_DMA_Init+0x48>)
 8004258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800425c:	6313      	str	r3, [r2, #48]	; 0x30
 800425e:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <MX_DMA_Init+0x48>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004266:	607b      	str	r3, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2105      	movs	r1, #5
 800426e:	203b      	movs	r0, #59	; 0x3b
 8004270:	f001 fcae 	bl	8005bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004274:	203b      	movs	r0, #59	; 0x3b
 8004276:	f001 fcc7 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800427a:	2200      	movs	r2, #0
 800427c:	2105      	movs	r1, #5
 800427e:	2045      	movs	r0, #69	; 0x45
 8004280:	f001 fca6 	bl	8005bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004284:	2045      	movs	r0, #69	; 0x45
 8004286:	f001 fcbf 	bl	8005c08 <HAL_NVIC_EnableIRQ>

}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023800 	.word	0x40023800

08004298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429e:	f107 031c 	add.w	r3, r7, #28
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	609a      	str	r2, [r3, #8]
 80042aa:	60da      	str	r2, [r3, #12]
 80042ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ae:	4b2f      	ldr	r3, [pc, #188]	; (800436c <MX_GPIO_Init+0xd4>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	4a2e      	ldr	r2, [pc, #184]	; (800436c <MX_GPIO_Init+0xd4>)
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ba:	4b2c      	ldr	r3, [pc, #176]	; (800436c <MX_GPIO_Init+0xd4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	61bb      	str	r3, [r7, #24]
 80042c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <MX_GPIO_Init+0xd4>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	4a28      	ldr	r2, [pc, #160]	; (800436c <MX_GPIO_Init+0xd4>)
 80042cc:	f043 0304 	orr.w	r3, r3, #4
 80042d0:	6313      	str	r3, [r2, #48]	; 0x30
 80042d2:	4b26      	ldr	r3, [pc, #152]	; (800436c <MX_GPIO_Init+0xd4>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	4b23      	ldr	r3, [pc, #140]	; (800436c <MX_GPIO_Init+0xd4>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	4a22      	ldr	r2, [pc, #136]	; (800436c <MX_GPIO_Init+0xd4>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6313      	str	r3, [r2, #48]	; 0x30
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <MX_GPIO_Init+0xd4>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <MX_GPIO_Init+0xd4>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	4a1c      	ldr	r2, [pc, #112]	; (800436c <MX_GPIO_Init+0xd4>)
 80042fc:	f043 0302 	orr.w	r3, r3, #2
 8004300:	6313      	str	r3, [r2, #48]	; 0x30
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <MX_GPIO_Init+0xd4>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <MX_GPIO_Init+0xd4>)
 8004310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004312:	4a16      	ldr	r2, [pc, #88]	; (800436c <MX_GPIO_Init+0xd4>)
 8004314:	f043 0310 	orr.w	r3, r3, #16
 8004318:	6313      	str	r3, [r2, #48]	; 0x30
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <MX_GPIO_Init+0xd4>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004326:	4b11      	ldr	r3, [pc, #68]	; (800436c <MX_GPIO_Init+0xd4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	4a10      	ldr	r2, [pc, #64]	; (800436c <MX_GPIO_Init+0xd4>)
 800432c:	f043 0308 	orr.w	r3, r3, #8
 8004330:	6313      	str	r3, [r2, #48]	; 0x30
 8004332:	4b0e      	ldr	r3, [pc, #56]	; (800436c <MX_GPIO_Init+0xd4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800433e:	2200      	movs	r2, #0
 8004340:	2108      	movs	r1, #8
 8004342:	480b      	ldr	r0, [pc, #44]	; (8004370 <MX_GPIO_Init+0xd8>)
 8004344:	f002 f9bc 	bl	80066c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004348:	2308      	movs	r3, #8
 800434a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800434c:	2301      	movs	r3, #1
 800434e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004350:	2300      	movs	r3, #0
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004354:	2300      	movs	r3, #0
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004358:	f107 031c 	add.w	r3, r7, #28
 800435c:	4619      	mov	r1, r3
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <MX_GPIO_Init+0xd8>)
 8004360:	f002 f804 	bl	800636c <HAL_GPIO_Init>

}
 8004364:	bf00      	nop
 8004366:	3730      	adds	r7, #48	; 0x30
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	40020800 	.word	0x40020800

08004374 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800437c:	f012 fe8e 	bl	801709c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004380:	2001      	movs	r0, #1
 8004382:	f00e fffb 	bl	801337c <osDelay>
 8004386:	e7fb      	b.n	8004380 <StartDefaultTask+0xc>

08004388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a04      	ldr	r2, [pc, #16]	; (80043a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800439a:	f001 fb1f 	bl	80059dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000

080043ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_MspInit+0x4c>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	4a10      	ldr	r2, [pc, #64]	; (8004408 <HAL_MspInit+0x4c>)
 80043c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043cc:	6413      	str	r3, [r2, #64]	; 0x40
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <HAL_MspInit+0x4c>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043da:	4b0b      	ldr	r3, [pc, #44]	; (8004408 <HAL_MspInit+0x4c>)
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	4a0a      	ldr	r2, [pc, #40]	; (8004408 <HAL_MspInit+0x4c>)
 80043e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043e4:	6453      	str	r3, [r2, #68]	; 0x44
 80043e6:	4b08      	ldr	r3, [pc, #32]	; (8004408 <HAL_MspInit+0x4c>)
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	210f      	movs	r1, #15
 80043f6:	f06f 0001 	mvn.w	r0, #1
 80043fa:	f001 fbe9 	bl	8005bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800

0800440c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a65      	ldr	r2, [pc, #404]	; (80045c0 <HAL_SD_MspInit+0x1b4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	f040 80c3 	bne.w	80045b6 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	4a63      	ldr	r2, [pc, #396]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004436:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800443a:	6453      	str	r3, [r2, #68]	; 0x44
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004448:	4b5e      	ldr	r3, [pc, #376]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	4a5d      	ldr	r2, [pc, #372]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	6313      	str	r3, [r2, #48]	; 0x30
 8004454:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004460:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	4a57      	ldr	r2, [pc, #348]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 8004466:	f043 0308 	orr.w	r3, r3, #8
 800446a:	6313      	str	r3, [r2, #48]	; 0x30
 800446c:	4b55      	ldr	r3, [pc, #340]	; (80045c4 <HAL_SD_MspInit+0x1b8>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8004478:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800447c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447e:	2302      	movs	r3, #2
 8004480:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	2300      	movs	r3, #0
 8004484:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800448a:	230c      	movs	r3, #12
 800448c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448e:	f107 0314 	add.w	r3, r7, #20
 8004492:	4619      	mov	r1, r3
 8004494:	484c      	ldr	r0, [pc, #304]	; (80045c8 <HAL_SD_MspInit+0x1bc>)
 8004496:	f001 ff69 	bl	800636c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800449a:	2304      	movs	r3, #4
 800449c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	2302      	movs	r3, #2
 80044a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a6:	2303      	movs	r3, #3
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80044aa:	230c      	movs	r3, #12
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	4619      	mov	r1, r3
 80044b4:	4845      	ldr	r0, [pc, #276]	; (80045cc <HAL_SD_MspInit+0x1c0>)
 80044b6:	f001 ff59 	bl	800636c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044bc:	4a45      	ldr	r2, [pc, #276]	; (80045d4 <HAL_SD_MspInit+0x1c8>)
 80044be:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80044c0:	4b43      	ldr	r3, [pc, #268]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044c6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c8:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ce:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d4:	4b3e      	ldr	r3, [pc, #248]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044da:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80044dc:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044e2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80044e4:	4b3a      	ldr	r3, [pc, #232]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ea:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80044ec:	4b38      	ldr	r3, [pc, #224]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044ee:	2220      	movs	r2, #32
 80044f0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044f2:	4b37      	ldr	r3, [pc, #220]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80044f8:	4b35      	ldr	r3, [pc, #212]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 80044fa:	2204      	movs	r2, #4
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044fe:	4b34      	ldr	r3, [pc, #208]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004500:	2203      	movs	r2, #3
 8004502:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004506:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800450c:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 800450e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004514:	482e      	ldr	r0, [pc, #184]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004516:	f001 fb85 	bl	8005c24 <HAL_DMA_Init>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8004520:	f7ff ff44 	bl	80043ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 8004528:	641a      	str	r2, [r3, #64]	; 0x40
 800452a:	4a29      	ldr	r2, [pc, #164]	; (80045d0 <HAL_SD_MspInit+0x1c4>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_SD_MspInit+0x1d0>)
 8004534:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004536:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004538:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800453c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800453e:	4b26      	ldr	r3, [pc, #152]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004540:	2240      	movs	r2, #64	; 0x40
 8004542:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004544:	4b24      	ldr	r3, [pc, #144]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800454c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004550:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004558:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800455a:	4b1f      	ldr	r3, [pc, #124]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800455c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004560:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004562:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004568:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800456a:	2200      	movs	r2, #0
 800456c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800456e:	4b1a      	ldr	r3, [pc, #104]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004570:	2204      	movs	r2, #4
 8004572:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004576:	2203      	movs	r2, #3
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800457c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 8004584:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004588:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800458a:	4813      	ldr	r0, [pc, #76]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800458c:	f001 fb4a 	bl	8005c24 <HAL_DMA_Init>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8004596:	f7ff ff09 	bl	80043ac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c
 80045a0:	4a0d      	ldr	r2, [pc, #52]	; (80045d8 <HAL_SD_MspInit+0x1cc>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80045a6:	2200      	movs	r2, #0
 80045a8:	2105      	movs	r1, #5
 80045aa:	2031      	movs	r0, #49	; 0x31
 80045ac:	f001 fb10 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80045b0:	2031      	movs	r0, #49	; 0x31
 80045b2:	f001 fb29 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80045b6:	bf00      	nop
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40020800 	.word	0x40020800
 80045cc:	40020c00 	.word	0x40020c00
 80045d0:	20014bb4 	.word	0x20014bb4
 80045d4:	40026458 	.word	0x40026458
 80045d8:	20026c3c 	.word	0x20026c3c
 80045dc:	400264a0 	.word	0x400264a0

080045e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08e      	sub	sp, #56	; 0x38
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	609a      	str	r2, [r3, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a68      	ldr	r2, [pc, #416]	; (80047a0 <HAL_SPI_MspInit+0x1c0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d131      	bne.n	8004666 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004602:	4b68      	ldr	r3, [pc, #416]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4a67      	ldr	r2, [pc, #412]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800460c:	6453      	str	r3, [r2, #68]	; 0x44
 800460e:	4b65      	ldr	r3, [pc, #404]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800461a:	4b62      	ldr	r3, [pc, #392]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a61      	ldr	r2, [pc, #388]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	61fb      	str	r3, [r7, #28]
 8004630:	69fb      	ldr	r3, [r7, #28]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8004632:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8004636:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004638:	2302      	movs	r3, #2
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004640:	2303      	movs	r3, #3
 8004642:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004644:	2305      	movs	r3, #5
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800464c:	4619      	mov	r1, r3
 800464e:	4856      	ldr	r0, [pc, #344]	; (80047a8 <HAL_SPI_MspInit+0x1c8>)
 8004650:	f001 fe8c 	bl	800636c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004654:	2200      	movs	r2, #0
 8004656:	2105      	movs	r1, #5
 8004658:	2023      	movs	r0, #35	; 0x23
 800465a:	f001 fab9 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800465e:	2023      	movs	r0, #35	; 0x23
 8004660:	f001 fad2 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004664:	e097      	b.n	8004796 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a50      	ldr	r2, [pc, #320]	; (80047ac <HAL_SPI_MspInit+0x1cc>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d131      	bne.n	80046d4 <HAL_SPI_MspInit+0xf4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004670:	4b4c      	ldr	r3, [pc, #304]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	4a4b      	ldr	r2, [pc, #300]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800467a:	6413      	str	r3, [r2, #64]	; 0x40
 800467c:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004688:	4b46      	ldr	r3, [pc, #280]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	4a45      	ldr	r2, [pc, #276]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800468e:	f043 0302 	orr.w	r3, r3, #2
 8004692:	6313      	str	r3, [r2, #48]	; 0x30
 8004694:	4b43      	ldr	r3, [pc, #268]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80046a0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	2302      	movs	r3, #2
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ae:	2303      	movs	r3, #3
 80046b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80046b2:	2305      	movs	r3, #5
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ba:	4619      	mov	r1, r3
 80046bc:	483c      	ldr	r0, [pc, #240]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 80046be:	f001 fe55 	bl	800636c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80046c2:	2200      	movs	r2, #0
 80046c4:	2105      	movs	r1, #5
 80046c6:	2024      	movs	r0, #36	; 0x24
 80046c8:	f001 fa82 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046cc:	2024      	movs	r0, #36	; 0x24
 80046ce:	f001 fa9b 	bl	8005c08 <HAL_NVIC_EnableIRQ>
}
 80046d2:	e060      	b.n	8004796 <HAL_SPI_MspInit+0x1b6>
  else if(hspi->Instance==SPI3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a36      	ldr	r2, [pc, #216]	; (80047b4 <HAL_SPI_MspInit+0x1d4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d15b      	bne.n	8004796 <HAL_SPI_MspInit+0x1b6>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046de:	4b31      	ldr	r3, [pc, #196]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046f6:	4b2b      	ldr	r3, [pc, #172]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fa:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6313      	str	r3, [r2, #48]	; 0x30
 8004702:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800470e:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	4a24      	ldr	r2, [pc, #144]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	6313      	str	r3, [r2, #48]	; 0x30
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_SPI_MspInit+0x1c4>)
 800471c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004726:	2310      	movs	r3, #16
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472a:	2302      	movs	r3, #2
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800472e:	2300      	movs	r3, #0
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004732:	2303      	movs	r3, #3
 8004734:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004736:	2306      	movs	r3, #6
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800473e:	4619      	mov	r1, r3
 8004740:	4819      	ldr	r0, [pc, #100]	; (80047a8 <HAL_SPI_MspInit+0x1c8>)
 8004742:	f001 fe13 	bl	800636c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004746:	2304      	movs	r3, #4
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004752:	2303      	movs	r3, #3
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004756:	2307      	movs	r3, #7
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800475a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800475e:	4619      	mov	r1, r3
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 8004762:	f001 fe03 	bl	800636c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004766:	2318      	movs	r3, #24
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004772:	2303      	movs	r3, #3
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004776:	2306      	movs	r3, #6
 8004778:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800477e:	4619      	mov	r1, r3
 8004780:	480b      	ldr	r0, [pc, #44]	; (80047b0 <HAL_SPI_MspInit+0x1d0>)
 8004782:	f001 fdf3 	bl	800636c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8004786:	2200      	movs	r2, #0
 8004788:	2105      	movs	r1, #5
 800478a:	2033      	movs	r0, #51	; 0x33
 800478c:	f001 fa20 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004790:	2033      	movs	r0, #51	; 0x33
 8004792:	f001 fa39 	bl	8005c08 <HAL_NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3738      	adds	r7, #56	; 0x38
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40013000 	.word	0x40013000
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40020000 	.word	0x40020000
 80047ac:	40003800 	.word	0x40003800
 80047b0:	40020400 	.word	0x40020400
 80047b4:	40003c00 	.word	0x40003c00

080047b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08c      	sub	sp, #48	; 0x30
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047c0:	f107 031c 	add.w	r3, r7, #28
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a36      	ldr	r2, [pc, #216]	; (80048b0 <HAL_UART_MspInit+0xf8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d130      	bne.n	800483c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b33      	ldr	r3, [pc, #204]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f2:	4b30      	ldr	r3, [pc, #192]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	4a2f      	ldr	r2, [pc, #188]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	6313      	str	r3, [r2, #48]	; 0x30
 80047fe:	4b2d      	ldr	r3, [pc, #180]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800480a:	2303      	movs	r3, #3
 800480c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480e:	2302      	movs	r3, #2
 8004810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004816:	2303      	movs	r3, #3
 8004818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800481a:	2308      	movs	r3, #8
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	4824      	ldr	r0, [pc, #144]	; (80048b8 <HAL_UART_MspInit+0x100>)
 8004826:	f001 fda1 	bl	800636c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2105      	movs	r1, #5
 800482e:	2034      	movs	r0, #52	; 0x34
 8004830:	f001 f9ce 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8004834:	2034      	movs	r0, #52	; 0x34
 8004836:	f001 f9e7 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800483a:	e035      	b.n	80048a8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==UART7)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a1e      	ldr	r2, [pc, #120]	; (80048bc <HAL_UART_MspInit+0x104>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d130      	bne.n	80048a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_UART7_CLK_ENABLE();
 8004846:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a1a      	ldr	r2, [pc, #104]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 800484c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 8004864:	f043 0310 	orr.w	r3, r3, #16
 8004868:	6313      	str	r3, [r2, #48]	; 0x30
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <HAL_UART_MspInit+0xfc>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004876:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800487a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487c:	2302      	movs	r3, #2
 800487e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004880:	2300      	movs	r3, #0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004884:	2303      	movs	r3, #3
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004888:	2308      	movs	r3, #8
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800488c:	f107 031c 	add.w	r3, r7, #28
 8004890:	4619      	mov	r1, r3
 8004892:	480b      	ldr	r0, [pc, #44]	; (80048c0 <HAL_UART_MspInit+0x108>)
 8004894:	f001 fd6a 	bl	800636c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	2105      	movs	r1, #5
 800489c:	2052      	movs	r0, #82	; 0x52
 800489e:	f001 f997 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80048a2:	2052      	movs	r0, #82	; 0x52
 80048a4:	f001 f9b0 	bl	8005c08 <HAL_NVIC_EnableIRQ>
}
 80048a8:	bf00      	nop
 80048aa:	3730      	adds	r7, #48	; 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40004c00 	.word	0x40004c00
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40020000 	.word	0x40020000
 80048bc:	40007800 	.word	0x40007800
 80048c0:	40021000 	.word	0x40021000

080048c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	; 0x30
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80048d4:	2200      	movs	r2, #0
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	2019      	movs	r0, #25
 80048da:	f001 f979 	bl	8005bd0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80048de:	2019      	movs	r0, #25
 80048e0:	f001 f992 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80048e4:	4b1f      	ldr	r3, [pc, #124]	; (8004964 <HAL_InitTick+0xa0>)
 80048e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e8:	4a1e      	ldr	r2, [pc, #120]	; (8004964 <HAL_InitTick+0xa0>)
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6453      	str	r3, [r2, #68]	; 0x44
 80048f0:	4b1c      	ldr	r3, [pc, #112]	; (8004964 <HAL_InitTick+0xa0>)
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80048fc:	f107 0210 	add.w	r2, r7, #16
 8004900:	f107 0314 	add.w	r3, r7, #20
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f003 fd68 	bl	80083dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800490c:	f003 fd52 	bl	80083b4 <HAL_RCC_GetPCLK2Freq>
 8004910:	4603      	mov	r3, r0
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	4a13      	ldr	r2, [pc, #76]	; (8004968 <HAL_InitTick+0xa4>)
 800491a:	fba2 2303 	umull	r2, r3, r2, r3
 800491e:	0c9b      	lsrs	r3, r3, #18
 8004920:	3b01      	subs	r3, #1
 8004922:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004924:	4b11      	ldr	r3, [pc, #68]	; (800496c <HAL_InitTick+0xa8>)
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <HAL_InitTick+0xac>)
 8004928:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800492a:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_InitTick+0xa8>)
 800492c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004930:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004932:	4a0e      	ldr	r2, [pc, #56]	; (800496c <HAL_InitTick+0xa8>)
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004938:	4b0c      	ldr	r3, [pc, #48]	; (800496c <HAL_InitTick+0xa8>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_InitTick+0xa8>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004944:	4809      	ldr	r0, [pc, #36]	; (800496c <HAL_InitTick+0xa8>)
 8004946:	f006 fa7a 	bl	800ae3e <HAL_TIM_Base_Init>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d104      	bne.n	800495a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004950:	4806      	ldr	r0, [pc, #24]	; (800496c <HAL_InitTick+0xa8>)
 8004952:	f006 faa9 	bl	800aea8 <HAL_TIM_Base_Start_IT>
 8004956:	4603      	mov	r3, r0
 8004958:	e000      	b.n	800495c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	3730      	adds	r7, #48	; 0x30
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	431bde83 	.word	0x431bde83
 800496c:	20026d08 	.word	0x20026d08
 8004970:	40010000 	.word	0x40010000

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004986:	e7fe      	b.n	8004986 <HardFault_Handler+0x4>

08004988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498c:	e7fe      	b.n	800498c <MemManage_Handler+0x4>

0800498e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004992:	e7fe      	b.n	8004992 <BusFault_Handler+0x4>

08004994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004998:	e7fe      	b.n	8004998 <UsageFault_Handler+0x4>

0800499a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80049ae:	f006 faa5 	bl	800aefc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20026d08 	.word	0x20026d08

080049bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <SPI1_IRQHandler+0x10>)
 80049c2:	f005 fdd3 	bl	800a56c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	2001cc98 	.word	0x2001cc98

080049d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <SPI2_IRQHandler+0x10>)
 80049d6:	f005 fdc9 	bl	800a56c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	2000898c 	.word	0x2000898c

080049e4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <SDMMC1_IRQHandler+0x10>)
 80049ea:	f004 fb51 	bl	8009090 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20008ad8 	.word	0x20008ad8

080049f8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80049fc:	4802      	ldr	r0, [pc, #8]	; (8004a08 <SPI3_IRQHandler+0x10>)
 80049fe:	f005 fdb5 	bl	800a56c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200109fc 	.word	0x200109fc

08004a0c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004a10:	4802      	ldr	r0, [pc, #8]	; (8004a1c <UART4_IRQHandler+0x10>)
 8004a12:	f006 fec7 	bl	800b7a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	2001cc18 	.word	0x2001cc18

08004a20 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004a24:	4802      	ldr	r0, [pc, #8]	; (8004a30 <DMA2_Stream3_IRQHandler+0x10>)
 8004a26:	f001 fa2d 	bl	8005e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20014bb4 	.word	0x20014bb4

08004a34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a38:	4802      	ldr	r0, [pc, #8]	; (8004a44 <OTG_FS_IRQHandler+0x10>)
 8004a3a:	f001 ffba 	bl	80069b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20028b38 	.word	0x20028b38

08004a48 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <DMA2_Stream6_IRQHandler+0x10>)
 8004a4e:	f001 fa19 	bl	8005e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20026c3c 	.word	0x20026c3c

08004a5c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <UART7_IRQHandler+0x10>)
 8004a62:	f006 fe9f 	bl	800b7a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200089f0 	.word	0x200089f0

08004a70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a78:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <_sbrk+0x50>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <_sbrk+0x16>
		heap_end = &end;
 8004a80:	4b0f      	ldr	r3, [pc, #60]	; (8004ac0 <_sbrk+0x50>)
 8004a82:	4a10      	ldr	r2, [pc, #64]	; (8004ac4 <_sbrk+0x54>)
 8004a84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <_sbrk+0x50>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <_sbrk+0x50>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	466a      	mov	r2, sp
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d907      	bls.n	8004aaa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a9a:	f013 f859 	bl	8017b50 <__errno>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa8:	e006      	b.n	8004ab8 <_sbrk+0x48>
	}

	heap_end += incr;
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <_sbrk+0x50>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4a03      	ldr	r2, [pc, #12]	; (8004ac0 <_sbrk+0x50>)
 8004ab4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200003c8 	.word	0x200003c8
 8004ac4:	20028f40 	.word	0x20028f40

08004ac8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <SystemInit+0x5c>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <SystemInit+0x5c>)
 8004ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004adc:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <SystemInit+0x60>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a11      	ldr	r2, [pc, #68]	; (8004b28 <SystemInit+0x60>)
 8004ae2:	f043 0301 	orr.w	r3, r3, #1
 8004ae6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ae8:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <SystemInit+0x60>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004aee:	4b0e      	ldr	r3, [pc, #56]	; (8004b28 <SystemInit+0x60>)
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	490d      	ldr	r1, [pc, #52]	; (8004b28 <SystemInit+0x60>)
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <SystemInit+0x64>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004afa:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <SystemInit+0x60>)
 8004afc:	4a0c      	ldr	r2, [pc, #48]	; (8004b30 <SystemInit+0x68>)
 8004afe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b00:	4b09      	ldr	r3, [pc, #36]	; (8004b28 <SystemInit+0x60>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a08      	ldr	r2, [pc, #32]	; (8004b28 <SystemInit+0x60>)
 8004b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b0c:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <SystemInit+0x60>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <SystemInit+0x5c>)
 8004b14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b18:	609a      	str	r2, [r3, #8]
#endif
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000ed00 	.word	0xe000ed00
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	fef6ffff 	.word	0xfef6ffff
 8004b30:	24003010 	.word	0x24003010

08004b34 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8004b34:	b580      	push	{r7, lr}
 8004b36:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	1d3b      	adds	r3, r7, #4
 8004b3e:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 8004b40:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	4618      	mov	r0, r3
 8004b52:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004b56:	461a      	mov	r2, r3
 8004b58:	2100      	movs	r1, #0
 8004b5a:	f013 f83e 	bl	8017bda <memset>
    control_data_init(&control_data);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc fe0e 	bl	8001784 <control_data_init>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004b68:	f00e fb30 	bl	80131cc <osKernelGetTickCount>
 8004b6c:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8004b70:	f00e fb54 	bl	801321c <osKernelGetTickFreq>
 8004b74:	4602      	mov	r2, r0
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <vTaskController+0x148>)
 8004b78:	fba3 2302 	umull	r2, r3, r3, r2
 8004b7c:	095b      	lsrs	r3, r3, #5
 8004b7e:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004b82:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8004b86:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 8004b90:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8004b94:	233c      	movs	r3, #60	; 0x3c
 8004b96:	493a      	ldr	r1, [pc, #232]	; (8004c80 <vTaskController+0x14c>)
 8004b98:	483a      	ldr	r0, [pc, #232]	; (8004c84 <vTaskController+0x150>)
 8004b9a:	f7fe fdb1 	bl	8003700 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 8004b9e:	4b38      	ldr	r3, [pc, #224]	; (8004c80 <vTaskController+0x14c>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004baa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004c88 <vTaskController+0x154>
 8004bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8004bba:	4b31      	ldr	r3, [pc, #196]	; (8004c80 <vTaskController+0x14c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bc6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004c88 <vTaskController+0x154>
 8004bca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8004bd6:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004bda:	233c      	movs	r3, #60	; 0x3c
 8004bdc:	492b      	ldr	r1, [pc, #172]	; (8004c8c <vTaskController+0x158>)
 8004bde:	482c      	ldr	r0, [pc, #176]	; (8004c90 <vTaskController+0x15c>)
 8004be0:	f7fe fd8e 	bl	8003700 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8004be4:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4611      	mov	r1, r2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc fcb6 	bl	8001560 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8004bf4:	4827      	ldr	r0, [pc, #156]	; (8004c94 <vTaskController+0x160>)
 8004bf6:	f7fe fd5b 	bl	80036b0 <AcquireMutex>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d110      	bne.n	8004c22 <vTaskController+0xee>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004c88 <vTaskController+0x154>
 8004c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c14:	ee17 2a90 	vmov	r2, s15
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <vTaskController+0x164>)
 8004c1a:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8004c1c:	481d      	ldr	r0, [pc, #116]	; (8004c94 <vTaskController+0x160>)
 8004c1e:	f7fe fd61 	bl	80036e4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8004c22:	f00e fad3 	bl	80131cc <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004c88 <vTaskController+0x154>
 8004c32:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c36:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 8004c3a:	f107 0308 	add.w	r3, r7, #8
 8004c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c42:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004c88 <vTaskController+0x154>
 8004c46:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c4a:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 8004c4e:	f107 0308 	add.w	r3, r7, #8
 8004c52:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c56:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004c88 <vTaskController+0x154>
 8004c5a:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8004c5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c62:	ee17 3a90 	vmov	r3, s15
 8004c66:	ee16 2a10 	vmov	r2, s12
 8004c6a:	ee16 1a90 	vmov	r1, s13
 8004c6e:	f7fe ff2f 	bl	8003ad0 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8004c72:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8004c76:	f00e fbaf 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 8004c7a:	e782      	b.n	8004b82 <vTaskController+0x4e>
 8004c7c:	51eb851f 	.word	0x51eb851f
 8004c80:	2000026c 	.word	0x2000026c
 8004c84:	20010af0 	.word	0x20010af0
 8004c88:	447a0000 	.word	0x447a0000
 8004c8c:	200002bc 	.word	0x200002bc
 8004c90:	20008984 	.word	0x20008984
 8004c94:	20010a60 	.word	0x20010a60
 8004c98:	200002a8 	.word	0x200002a8

08004c9c <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8004c9c:	b590      	push	{r4, r7, lr}
 8004c9e:	b09f      	sub	sp, #124	; 0x7c
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004ca4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8004cb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd f9a5 	bl	8002004 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8004cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cbe:	223c      	movs	r2, #60	; 0x3c
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f012 ff89 	bl	8017bda <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8004cc8:	f107 0308 	add.w	r3, r7, #8
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fc fedb 	bl	8001a88 <init_env>
	init_env(&environment);
 8004cd2:	f107 0318 	add.w	r3, r7, #24
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fc fed6 	bl	8001a88 <init_env>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004cdc:	f00e fa76 	bl	80131cc <osKernelGetTickCount>
 8004ce0:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8004ce2:	f00e fa9b 	bl	801321c <osKernelGetTickFreq>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <vTaskFSM+0xc4>)
 8004cea:	fba3 2302 	umull	r2, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8004cf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf6:	4413      	add	r3, r2
 8004cf8:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8004cfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004cfe:	233c      	movs	r3, #60	; 0x3c
 8004d00:	4918      	ldr	r1, [pc, #96]	; (8004d64 <vTaskFSM+0xc8>)
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <vTaskFSM+0xcc>)
 8004d04:	f7fe fcfc 	bl	8003700 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8004d08:	f107 0218 	add.w	r2, r7, #24
 8004d0c:	2310      	movs	r3, #16
 8004d0e:	4917      	ldr	r1, [pc, #92]	; (8004d6c <vTaskFSM+0xd0>)
 8004d10:	4817      	ldr	r0, [pc, #92]	; (8004d70 <vTaskFSM+0xd4>)
 8004d12:	f7fe fcf5 	bl	8003700 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8004d16:	f107 0218 	add.w	r2, r7, #24
 8004d1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004d1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fd f86c 	bl	8001e00 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8004d28:	4812      	ldr	r0, [pc, #72]	; (8004d74 <vTaskFSM+0xd8>)
 8004d2a:	f7fe fcc1 	bl	80036b0 <AcquireMutex>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10a      	bne.n	8004d4a <vTaskFSM+0xae>
			global_flight_phase_detection = flight_phase_detection;
 8004d34:	4b10      	ldr	r3, [pc, #64]	; (8004d78 <vTaskFSM+0xdc>)
 8004d36:	461c      	mov	r4, r3
 8004d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8004d44:	480b      	ldr	r0, [pc, #44]	; (8004d74 <vTaskFSM+0xd8>)
 8004d46:	f7fe fccd 	bl	80036e4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8004d4a:	f00e fa3f 	bl	80131cc <osKernelGetTickCount>
 8004d4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004d52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d54:	f7fe fe5e 	bl	8003a14 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8004d58:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004d5a:	f00e fb3d 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 8004d5e:	e7c8      	b.n	8004cf2 <vTaskFSM+0x56>
 8004d60:	51eb851f 	.word	0x51eb851f
 8004d64:	2000026c 	.word	0x2000026c
 8004d68:	20010af0 	.word	0x20010af0
 8004d6c:	200002ac 	.word	0x200002ac
 8004d70:	20008b70 	.word	0x20008b70
 8004d74:	20008984 	.word	0x20008984
 8004d78:	200002bc 	.word	0x200002bc

08004d7c <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes();


void vTaskMotorCont(void *argument) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b090      	sub	sp, #64	; 0x40
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	637b      	str	r3, [r7, #52]	; 0x34

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 8004d88:	239b      	movs	r3, #155	; 0x9b
 8004d8a:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	605a      	str	r2, [r3, #4]
 8004d96:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8004d9c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004da0:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 2000;
 8004da8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8004dac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8004dae:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <vTaskMotorCont+0x158>)
 8004db0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8004db2:	4b48      	ldr	r3, [pc, #288]	; (8004ed4 <vTaskMotorCont+0x158>)
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t measured_motor_position = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 8004dc2:	e003      	b.n	8004dcc <vTaskMotorCont+0x50>
		osDelay(1000);
 8004dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dc8:	f00e fad8 	bl	801337c <osDelay>
	while(EnableMotor() != osOK){
 8004dcc:	f7fc f908 	bl	8000fe0 <EnableMotor>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f6      	bne.n	8004dc4 <vTaskMotorCont+0x48>
	};

	while(SetPositionMode(position_mode) != osOK){
 8004dd6:	e003      	b.n	8004de0 <vTaskMotorCont+0x64>
		osDelay(1000);
 8004dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ddc:	f00e face 	bl	801337c <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8004de0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fc f954 	bl	8001092 <SetPositionMode>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f3      	bne.n	8004dd8 <vTaskMotorCont+0x5c>
	};

	if (position_mode == 0x01) {
 8004df0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d105      	bne.n	8004e04 <vTaskMotorCont+0x88>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dfe:	f7fc f9c8 	bl	8001192 <ConfigurePPM>
 8004e02:	6378      	str	r0, [r7, #52]	; 0x34
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8004e04:	f00e f9e2 	bl	80131cc <osKernelGetTickCount>
 8004e08:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8004e0a:	f00e fa07 	bl	801321c <osKernelGetTickFreq>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	4b31      	ldr	r3, [pc, #196]	; (8004ed8 <vTaskMotorCont+0x15c>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 8004e1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	4413      	add	r3, r2
 8004e20:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8004e22:	f107 0308 	add.w	r3, r7, #8
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc fa2a 	bl	8001280 <GetPosition>
 8004e2c:	6378      	str	r0, [r7, #52]	; 0x34

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8004e2e:	f107 021f 	add.w	r2, r7, #31
 8004e32:	2301      	movs	r3, #1
 8004e34:	4929      	ldr	r1, [pc, #164]	; (8004edc <vTaskMotorCont+0x160>)
 8004e36:	482a      	ldr	r0, [pc, #168]	; (8004ee0 <vTaskMotorCont+0x164>)
 8004e38:	f7fe fc62 	bl	8003700 <ReadMutex>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8004e3c:	f107 0210 	add.w	r2, r7, #16
 8004e40:	230c      	movs	r3, #12
 8004e42:	4928      	ldr	r1, [pc, #160]	; (8004ee4 <vTaskMotorCont+0x168>)
 8004e44:	4828      	ldr	r0, [pc, #160]	; (8004ee8 <vTaskMotorCont+0x16c>)
 8004e46:	f7fe fc5b 	bl	8003700 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8004e4a:	f107 020c 	add.w	r2, r7, #12
 8004e4e:	2304      	movs	r3, #4
 8004e50:	4926      	ldr	r1, [pc, #152]	; (8004eec <vTaskMotorCont+0x170>)
 8004e52:	4827      	ldr	r0, [pc, #156]	; (8004ef0 <vTaskMotorCont+0x174>)
 8004e54:	f7fe fc54 	bl	8003700 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e62:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ef4 <vTaskMotorCont+0x178>
 8004e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e6a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8004ef8 <vTaskMotorCont+0x17c>
 8004e6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e76:	ee17 3a90 	vmov	r3, s15
 8004e7a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Check Bounds */
		if(desired_motor_position > -2){
 8004e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e82:	db02      	blt.n	8004e8a <vTaskMotorCont+0x10e>
			desired_motor_position = -2;
 8004e84:	f06f 0301 	mvn.w	r3, #1
 8004e88:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if(desired_motor_position < -135){
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8c:	f113 0f87 	cmn.w	r3, #135	; 0x87
 8004e90:	da02      	bge.n	8004e98 <vTaskMotorCont+0x11c>
			desired_motor_position = -135;
 8004e92:	f06f 0386 	mvn.w	r3, #134	; 0x86
 8004e96:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8004e98:	7c3b      	ldrb	r3, [r7, #16]
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	d103      	bne.n	8004ea6 <vTaskMotorCont+0x12a>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 8004e9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ea0:	f7fc f91c 	bl	80010dc <MoveToPositionPPM>
 8004ea4:	e002      	b.n	8004eac <vTaskMotorCont+0x130>
		}
		else{
			MoveToPositionPPM(0);
 8004ea6:	2000      	movs	r0, #0
 8004ea8:	f7fc f918 	bl	80010dc <MoveToPositionPPM>
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 8004eac:	7c3b      	ldrb	r3, [r7, #16]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d104      	bne.n	8004ebc <vTaskMotorCont+0x140>
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
 8004eb4:	2b9d      	cmp	r3, #157	; 0x9d
 8004eb6:	d101      	bne.n	8004ebc <vTaskMotorCont+0x140>
			testairbrakes();
 8004eb8:	f000 f820 	bl	8004efc <testairbrakes>
		}



		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8004ebc:	f00e f986 	bl	80131cc <osKernelGetTickCount>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ec6:	f7fe fe31 	bl	8003b2c <logMotor>


		osDelayUntil(tick_count);
 8004eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ecc:	f00e fa84 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 8004ed0:	e7a3      	b.n	8004e1a <vTaskMotorCont+0x9e>
 8004ed2:	bf00      	nop
 8004ed4:	000186a0 	.word	0x000186a0
 8004ed8:	cccccccd 	.word	0xcccccccd
 8004edc:	20014b54 	.word	0x20014b54
 8004ee0:	20008b68 	.word	0x20008b68
 8004ee4:	200002bc 	.word	0x200002bc
 8004ee8:	20008984 	.word	0x20008984
 8004eec:	200002a8 	.word	0x200002a8
 8004ef0:	20010a60 	.word	0x20010a60
 8004ef4:	447a0000 	.word	0x447a0000
 8004ef8:	c30c0000 	.word	0xc30c0000

08004efc <testairbrakes>:
	}
}

void testairbrakes(){
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	MoveToPositionPPM(-150);
 8004f00:	f06f 0095 	mvn.w	r0, #149	; 0x95
 8004f04:	f7fc f8ea 	bl	80010dc <MoveToPositionPPM>
	HAL_Delay(1000);
 8004f08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f0c:	f000 fd86 	bl	8005a1c <HAL_Delay>
	MoveToPositionPPM(0);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fc f8e3 	bl	80010dc <MoveToPositionPPM>
}
 8004f16:	bf00      	nop
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8004f1c:	b5b0      	push	{r4, r5, r7, lr}
 8004f1e:	b0cc      	sub	sp, #304	; 0x130
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	1d3b      	adds	r3, r7, #4
 8004f24:	6018      	str	r0, [r3, #0]
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8004f26:	2300      	movs	r3, #0
 8004f28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f2c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8004f38:	48c3      	ldr	r0, [pc, #780]	; (8005248 <vTaskSdCard+0x32c>)
 8004f3a:	f7fe fe23 	bl	8003b84 <UsbPrint>

	resetSDCard: UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8004f3e:	48c3      	ldr	r0, [pc, #780]	; (800524c <vTaskSdCard+0x330>)
 8004f40:	f7fe fe20 	bl	8003b84 <UsbPrint>
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8004f44:	2201      	movs	r2, #1
 8004f46:	49c2      	ldr	r1, [pc, #776]	; (8005250 <vTaskSdCard+0x334>)
 8004f48:	48c2      	ldr	r0, [pc, #776]	; (8005254 <vTaskSdCard+0x338>)
 8004f4a:	f00d f833 	bl	8011fb4 <f_mount>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8004f54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00b      	beq.n	8004f74 <vTaskSdCard+0x58>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8004f5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f60:	4619      	mov	r1, r3
 8004f62:	48bd      	ldr	r0, [pc, #756]	; (8005258 <vTaskSdCard+0x33c>)
 8004f64:	f7fe fe0e 	bl	8003b84 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8004f68:	4bbc      	ldr	r3, [pc, #752]	; (800525c <vTaskSdCard+0x340>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8004f6e:	2064      	movs	r0, #100	; 0x64
 8004f70:	f00e fa04 	bl	801337c <osDelay>
		}
	} while (res != FR_OK);
 8004f74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d1e3      	bne.n	8004f44 <vTaskSdCard+0x28>

	if (!EULER_LOG_FILE_NAME[0]) {
 8004f7c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f040 80a9 	bne.w	80050d8 <vTaskSdCard+0x1bc>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8004f86:	48b6      	ldr	r0, [pc, #728]	; (8005260 <vTaskSdCard+0x344>)
 8004f88:	f7fe fdfc 	bl	8003b84 <UsbPrint>

		unsigned int file_number = 1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8004f92:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004f96:	f107 0008 	add.w	r0, r7, #8
 8004f9a:	4bb2      	ldr	r3, [pc, #712]	; (8005264 <vTaskSdCard+0x348>)
 8004f9c:	4aac      	ldr	r2, [pc, #688]	; (8005250 <vTaskSdCard+0x334>)
 8004f9e:	f00d ffc1 	bl	8012f24 <f_findfirst>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8004fa8:	e02b      	b.n	8005002 <vTaskSdCard+0xe6>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004faa:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004fae:	3b30      	subs	r3, #48	; 0x30
 8004fb0:	2264      	movs	r2, #100	; 0x64
 8004fb2:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8004fb6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004fba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	18ca      	adds	r2, r1, r3
 8004fc8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004fcc:	3b30      	subs	r3, #48	; 0x30
 8004fce:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8004fd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8004fd4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d204      	bcs.n	8004fec <vTaskSdCard+0xd0>
				file_number = current_file_number + 1;
 8004fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8004fec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004ff0:	f107 0308 	add.w	r3, r7, #8
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f00d ff6c 	bl	8012ed4 <f_findnext>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8005002:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005006:	2b00      	cmp	r3, #0
 8005008:	d103      	bne.n	8005012 <vTaskSdCard+0xf6>
 800500a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1cb      	bne.n	8004faa <vTaskSdCard+0x8e>
		}
		if (res != FR_OK) {
 8005012:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d006      	beq.n	8005028 <vTaskSdCard+0x10c>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 800501a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800501e:	4619      	mov	r1, r3
 8005020:	4891      	ldr	r0, [pc, #580]	; (8005268 <vTaskSdCard+0x34c>)
 8005022:	f7fe fdaf 	bl	8003b84 <UsbPrint>
					res);
			goto resetSDCard;
 8005026:	e78a      	b.n	8004f3e <vTaskSdCard+0x22>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8005028:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800502c:	4a8f      	ldr	r2, [pc, #572]	; (800526c <vTaskSdCard+0x350>)
 800502e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8005034:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8005038:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <vTaskSdCard+0x354>)
 800503a:	fba3 2301 	umull	r2, r3, r3, r1
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	1aca      	subs	r2, r1, r3
 800504a:	b2d3      	uxtb	r3, r2
 800504c:	3330      	adds	r3, #48	; 0x30
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8005054:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005058:	4a85      	ldr	r2, [pc, #532]	; (8005270 <vTaskSdCard+0x354>)
 800505a:	fba2 2303 	umull	r2, r3, r2, r3
 800505e:	08d9      	lsrs	r1, r3, #3
 8005060:	4b83      	ldr	r3, [pc, #524]	; (8005270 <vTaskSdCard+0x354>)
 8005062:	fba3 2301 	umull	r2, r3, r3, r1
 8005066:	08da      	lsrs	r2, r3, #3
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	1aca      	subs	r2, r1, r3
 8005072:	b2d3      	uxtb	r3, r2
 8005074:	3330      	adds	r3, #48	; 0x30
 8005076:	b2db      	uxtb	r3, r3
 8005078:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 800507c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005080:	4a7c      	ldr	r2, [pc, #496]	; (8005274 <vTaskSdCard+0x358>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0959      	lsrs	r1, r3, #5
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <vTaskSdCard+0x354>)
 800508a:	fba3 2301 	umull	r2, r3, r3, r1
 800508e:	08da      	lsrs	r2, r3, #3
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	1aca      	subs	r2, r1, r3
 800509a:	b2d3      	uxtb	r3, r2
 800509c:	3330      	adds	r3, #48	; 0x30
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 80050a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050a8:	4619      	mov	r1, r3
 80050aa:	4873      	ldr	r0, [pc, #460]	; (8005278 <vTaskSdCard+0x35c>)
 80050ac:	f7fe fd6a 	bl	8003b84 <UsbPrint>

		res = f_closedir(&dj);
 80050b0:	f107 0308 	add.w	r3, r7, #8
 80050b4:	4618      	mov	r0, r3
 80050b6:	f00d fe9f 	bl	8012df8 <f_closedir>
 80050ba:	4603      	mov	r3, r0
 80050bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80050c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <vTaskSdCard+0x1bc>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80050c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050cc:	4619      	mov	r1, r3
 80050ce:	486b      	ldr	r0, [pc, #428]	; (800527c <vTaskSdCard+0x360>)
 80050d0:	f7fe fd58 	bl	8003b84 <UsbPrint>
			goto resetSDCard;
 80050d4:	bf00      	nop
 80050d6:	e732      	b.n	8004f3e <vTaskSdCard+0x22>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 80050d8:	4869      	ldr	r0, [pc, #420]	; (8005280 <vTaskSdCard+0x364>)
 80050da:	f7fe fd53 	bl	8003b84 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80050de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050e2:	2212      	movs	r2, #18
 80050e4:	4619      	mov	r1, r3
 80050e6:	4867      	ldr	r0, [pc, #412]	; (8005284 <vTaskSdCard+0x368>)
 80050e8:	f00c ffc8 	bl	801207c <f_open>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 80050f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d006      	beq.n	8005108 <vTaskSdCard+0x1ec>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 80050fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050fe:	4619      	mov	r1, r3
 8005100:	4861      	ldr	r0, [pc, #388]	; (8005288 <vTaskSdCard+0x36c>)
 8005102:	f7fe fd3f 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005106:	e71a      	b.n	8004f3e <vTaskSdCard+0x22>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8005108:	4860      	ldr	r0, [pc, #384]	; (800528c <vTaskSdCard+0x370>)
 800510a:	f7fe fd3b 	bl	8003b84 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 800510e:	4b5d      	ldr	r3, [pc, #372]	; (8005284 <vTaskSdCard+0x368>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	4619      	mov	r1, r3
 8005114:	485b      	ldr	r0, [pc, #364]	; (8005284 <vTaskSdCard+0x368>)
 8005116:	f00d fba3 	bl	8012860 <f_lseek>
 800511a:	4603      	mov	r3, r0
 800511c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8005120:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005124:	2b00      	cmp	r3, #0
 8005126:	d006      	beq.n	8005136 <vTaskSdCard+0x21a>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8005128:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800512c:	4619      	mov	r1, r3
 800512e:	4858      	ldr	r0, [pc, #352]	; (8005290 <vTaskSdCard+0x374>)
 8005130:	f7fe fd28 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005134:	e703      	b.n	8004f3e <vTaskSdCard+0x22>
	}

	volatile int32_t msgCounter = 0;
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 800513c:	4b55      	ldr	r3, [pc, #340]	; (8005294 <vTaskSdCard+0x378>)
 800513e:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8005142:	461d      	mov	r5, r3
 8005144:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005148:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800514c:	c407      	stmia	r4!, {r0, r1, r2}
 800514e:	8023      	strh	r3, [r4, #0]
 8005150:	3402      	adds	r4, #2
 8005152:	0c1b      	lsrs	r3, r3, #16
 8005154:	7023      	strb	r3, [r4, #0]
 8005156:	2300      	movs	r3, #0
 8005158:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8005162:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb f852 	bl	8000210 <strlen>
 800516c:	4602      	mov	r2, r0
 800516e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8005172:	4b49      	ldr	r3, [pc, #292]	; (8005298 <vTaskSdCard+0x37c>)
 8005174:	4843      	ldr	r0, [pc, #268]	; (8005284 <vTaskSdCard+0x368>)
 8005176:	f00d f946 	bl	8012406 <f_write>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8005180:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <vTaskSdCard+0x27a>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8005188:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800518c:	4619      	mov	r1, r3
 800518e:	4843      	ldr	r0, [pc, #268]	; (800529c <vTaskSdCard+0x380>)
 8005190:	f7fe fcf8 	bl	8003b84 <UsbPrint>
		goto resetSDCard;
 8005194:	e6d3      	b.n	8004f3e <vTaskSdCard+0x22>
	}
	log_entry_t log_entry = { 0 };
 8005196:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800519a:	2296      	movs	r2, #150	; 0x96
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f012 fd1b 	bl	8017bda <memset>
	for (;;) {

		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80051a4:	4b3e      	ldr	r3, [pc, #248]	; (80052a0 <vTaskSdCard+0x384>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	2200      	movs	r2, #0
 80051b2:	f00e fd25 	bl	8013c00 <osMessageQueueGet>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f3      	bne.n	80051a4 <vTaskSdCard+0x288>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 80051bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb f825 	bl	8000210 <strlen>
 80051c6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 80051ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d015      	beq.n	80051fe <vTaskSdCard+0x2e2>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80051d2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80051d6:	4b30      	ldr	r3, [pc, #192]	; (8005298 <vTaskSdCard+0x37c>)
 80051d8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80051dc:	4829      	ldr	r0, [pc, #164]	; (8005284 <vTaskSdCard+0x368>)
 80051de:	f00d f912 	bl	8012406 <f_write>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 80051e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <vTaskSdCard+0x2e2>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 80051f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051f4:	4619      	mov	r1, r3
 80051f6:	4829      	ldr	r0, [pc, #164]	; (800529c <vTaskSdCard+0x380>)
 80051f8:	f7fe fcc4 	bl	8003b84 <UsbPrint>
							res);
					goto resetSDCard;
 80051fc:	e69f      	b.n	8004f3e <vTaskSdCard+0x22>
				}
			}

			msgCounter++;
 80051fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005202:	3301      	adds	r3, #1
 8005204:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8005208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800520c:	2b7f      	cmp	r3, #127	; 0x7f
 800520e:	ddc9      	ble.n	80051a4 <vTaskSdCard+0x288>
				msgCounter = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8005216:	4823      	ldr	r0, [pc, #140]	; (80052a4 <vTaskSdCard+0x388>)
 8005218:	f7fe fcb4 	bl	8003b84 <UsbPrint>
				HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800521c:	2108      	movs	r1, #8
 800521e:	4822      	ldr	r0, [pc, #136]	; (80052a8 <vTaskSdCard+0x38c>)
 8005220:	f001 fa67 	bl	80066f2 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8005224:	4817      	ldr	r0, [pc, #92]	; (8005284 <vTaskSdCard+0x368>)
 8005226:	f00d fa92 	bl	801274e <f_sync>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8005230:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0b5      	beq.n	80051a4 <vTaskSdCard+0x288>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8005238:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800523c:	4619      	mov	r1, r3
 800523e:	481b      	ldr	r0, [pc, #108]	; (80052ac <vTaskSdCard+0x390>)
 8005240:	f7fe fca0 	bl	8003b84 <UsbPrint>
					goto resetSDCard;
 8005244:	e67b      	b.n	8004f3e <vTaskSdCard+0x22>
 8005246:	bf00      	nop
 8005248:	0801a748 	.word	0x0801a748
 800524c:	0801a770 	.word	0x0801a770
 8005250:	0801a794 	.word	0x0801a794
 8005254:	20026f78 	.word	0x20026f78
 8005258:	0801a798 	.word	0x0801a798
 800525c:	20000464 	.word	0x20000464
 8005260:	0801a7c4 	.word	0x0801a7c4
 8005264:	0801a7e8 	.word	0x0801a7e8
 8005268:	0801a7f4 	.word	0x0801a7f4
 800526c:	0801a82c 	.word	0x0801a82c
 8005270:	cccccccd 	.word	0xcccccccd
 8005274:	51eb851f 	.word	0x51eb851f
 8005278:	0801a838 	.word	0x0801a838
 800527c:	0801a85c 	.word	0x0801a85c
 8005280:	0801a88c 	.word	0x0801a88c
 8005284:	20026d48 	.word	0x20026d48
 8005288:	0801a8b0 	.word	0x0801a8b0
 800528c:	0801a8dc 	.word	0x0801a8dc
 8005290:	0801a904 	.word	0x0801a904
 8005294:	0801a9a8 	.word	0x0801a9a8
 8005298:	200271ac 	.word	0x200271ac
 800529c:	0801a934 	.word	0x0801a934
 80052a0:	2001ccfc 	.word	0x2001ccfc
 80052a4:	0801a960 	.word	0x0801a960
 80052a8:	40020800 	.word	0x40020800
 80052ac:	0801a980 	.word	0x0801a980

080052b0 <vTaskSensRead>:
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };
uint32_t counter = 0;

void vTaskSensRead(void *argument) {
 80052b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052b2:	b08b      	sub	sp, #44	; 0x2c
 80052b4:	af04      	add	r7, sp, #16
 80052b6:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80052b8:	f00d ff88 	bl	80131cc <osKernelGetTickCount>
 80052bc:	6178      	str	r0, [r7, #20]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80052be:	f00d ffad 	bl	801321c <osKernelGetTickFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b28      	ldr	r3, [pc, #160]	; (8005368 <vTaskSensRead+0xb8>)
 80052c6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	613b      	str	r3, [r7, #16]
	uint8_t checksum = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	73fb      	strb	r3, [r7, #15]




	for (;;) {
		tick_count += tick_update;
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]

		UsbPrint(
				"[DBG Task Send] Gx: %ld, Gy:%ld, Gz:%ld; Ax: %ld, Ay:%ld, Az:%ld; t: %lu\n",
				sb1_data.imu.gyro_x, sb1_data.imu.gyro_y,
 80052da:	4b24      	ldr	r3, [pc, #144]	; (800536c <vTaskSensRead+0xbc>)
 80052dc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
		UsbPrint(
 80052e0:	461c      	mov	r4, r3
				sb1_data.imu.gyro_x, sb1_data.imu.gyro_y,
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <vTaskSensRead+0xbc>)
 80052e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		UsbPrint(
 80052e8:	461d      	mov	r5, r3
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <vTaskSensRead+0xbc>)
 80052ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
		UsbPrint(
 80052f0:	461e      	mov	r6, r3
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80052f2:	4b1e      	ldr	r3, [pc, #120]	; (800536c <vTaskSensRead+0xbc>)
 80052f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		UsbPrint(
 80052f8:	461a      	mov	r2, r3
				sb1_data.imu.gyro_z, sb1_data.imu.acc_x, sb1_data.imu.acc_y,
 80052fa:	4b1c      	ldr	r3, [pc, #112]	; (800536c <vTaskSensRead+0xbc>)
 80052fc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
		UsbPrint(
 8005300:	4619      	mov	r1, r3
				sb1_data.imu.acc_z, sb1_data.imu.ts);
 8005302:	4b1a      	ldr	r3, [pc, #104]	; (800536c <vTaskSensRead+0xbc>)
 8005304:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
		UsbPrint(
 8005308:	4618      	mov	r0, r3
 800530a:	4b18      	ldr	r3, [pc, #96]	; (800536c <vTaskSensRead+0xbc>)
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	9303      	str	r3, [sp, #12]
 8005310:	9002      	str	r0, [sp, #8]
 8005312:	9101      	str	r1, [sp, #4]
 8005314:	9200      	str	r2, [sp, #0]
 8005316:	4633      	mov	r3, r6
 8005318:	462a      	mov	r2, r5
 800531a:	4621      	mov	r1, r4
 800531c:	4814      	ldr	r0, [pc, #80]	; (8005370 <vTaskSensRead+0xc0>)
 800531e:	f7fe fc31 	bl	8003b84 <UsbPrint>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005322:	2108      	movs	r1, #8
 8005324:	4813      	ldr	r0, [pc, #76]	; (8005374 <vTaskSensRead+0xc4>)
 8005326:	f001 f9e4 	bl	80066f2 <HAL_GPIO_TogglePin>
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 800532a:	4a13      	ldr	r2, [pc, #76]	; (8005378 <vTaskSensRead+0xc8>)
 800532c:	4913      	ldr	r1, [pc, #76]	; (800537c <vTaskSensRead+0xcc>)
 800532e:	480f      	ldr	r0, [pc, #60]	; (800536c <vTaskSensRead+0xbc>)
 8005330:	f000 f83e 	bl	80053b0 <ReadDataSB>
		}
		sb3_data.imu.acc_x = counter;
 8005334:	4b12      	ldr	r3, [pc, #72]	; (8005380 <vTaskSensRead+0xd0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b21a      	sxth	r2, r3
 800533a:	4b0f      	ldr	r3, [pc, #60]	; (8005378 <vTaskSensRead+0xc8>)
 800533c:	825a      	strh	r2, [r3, #18]
		/* Log Data */
//		logSensor(tick_count, 1, BARO, &sb1_data.baro);
//		logSensor(tick_count, 1, IMU, &sb1_data.imu);
//		logSensor(tick_count, 2, BARO, &sb2_data.baro);
//		logSensor(tick_count, 2, IMU, &sb2_data.imu);
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <vTaskSensRead+0xc8>)
 8005340:	2201      	movs	r2, #1
 8005342:	2103      	movs	r1, #3
 8005344:	6978      	ldr	r0, [r7, #20]
 8005346:	f7fe fabf 	bl	80038c8 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 800534a:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <vTaskSensRead+0xd4>)
 800534c:	2202      	movs	r2, #2
 800534e:	2103      	movs	r1, #3
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	f7fe fab9 	bl	80038c8 <logSensor>
		HAL_SPI_Receive_IT(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8005356:	2220      	movs	r2, #32
 8005358:	4907      	ldr	r1, [pc, #28]	; (8005378 <vTaskSensRead+0xc8>)
 800535a:	480b      	ldr	r0, [pc, #44]	; (8005388 <vTaskSensRead+0xd8>)
 800535c:	f004 ffae 	bl	800a2bc <HAL_SPI_Receive_IT>
		/* Periodic Update */
		osDelayUntil(tick_count);
 8005360:	6978      	ldr	r0, [r7, #20]
 8005362:	f00e f839 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 8005366:	e7b4      	b.n	80052d2 <vTaskSensRead+0x22>
 8005368:	51eb851f 	.word	0x51eb851f
 800536c:	200003cc 	.word	0x200003cc
 8005370:	0801a9c8 	.word	0x0801a9c8
 8005374:	40020800 	.word	0x40020800
 8005378:	2000040c 	.word	0x2000040c
 800537c:	200003ec 	.word	0x200003ec
 8005380:	2000042c 	.word	0x2000042c
 8005384:	20000418 	.word	0x20000418
 8005388:	200109fc 	.word	0x200109fc

0800538c <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	counter++;
 8005394:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_SPI_RxCpltCallback+0x20>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a04      	ldr	r2, [pc, #16]	; (80053ac <HAL_SPI_RxCpltCallback+0x20>)
 800539c:	6013      	str	r3, [r2, #0]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	2000042c 	.word	0x2000042c

080053b0 <ReadDataSB>:


/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum(sb1);
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f861 	bl	8005484 <calculate_checksum>
 80053c2:	4603      	mov	r3, r0
 80053c4:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 80053c6:	4826      	ldr	r0, [pc, #152]	; (8005460 <ReadDataSB+0xb0>)
 80053c8:	f7fe f972 	bl	80036b0 <AcquireMutex>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <ReadDataSB+0x40>
			sb1_baro = sb3->baro;
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <ReadDataSB+0xb4>)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80053d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb3->imu;
 80053dc:	4a22      	ldr	r2, [pc, #136]	; (8005468 <ReadDataSB+0xb8>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4614      	mov	r4, r2
 80053e2:	330c      	adds	r3, #12
 80053e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 80053ea:	481d      	ldr	r0, [pc, #116]	; (8005460 <ReadDataSB+0xb0>)
 80053ec:	f7fe f97a 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum(sb2);
 80053f0:	68b8      	ldr	r0, [r7, #8]
 80053f2:	f000 f847 	bl	8005484 <calculate_checksum>
 80053f6:	4603      	mov	r3, r0
 80053f8:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 80053fa:	481c      	ldr	r0, [pc, #112]	; (800546c <ReadDataSB+0xbc>)
 80053fc:	f7fe f958 	bl	80036b0 <AcquireMutex>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10e      	bne.n	8005424 <ReadDataSB+0x74>
			sb2_baro = sb3->baro;
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <ReadDataSB+0xc0>)
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	ca07      	ldmia	r2, {r0, r1, r2}
 800540c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb3->imu;
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <ReadDataSB+0xc4>)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4614      	mov	r4, r2
 8005416:	330c      	adds	r3, #12
 8005418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800541a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 800541e:	4813      	ldr	r0, [pc, #76]	; (800546c <ReadDataSB+0xbc>)
 8005420:	f7fe f960 	bl	80036e4 <ReleaseMutex>
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum(sb3);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f82d 	bl	8005484 <calculate_checksum>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 800542e:	4812      	ldr	r0, [pc, #72]	; (8005478 <ReadDataSB+0xc8>)
 8005430:	f7fe f93e 	bl	80036b0 <AcquireMutex>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10e      	bne.n	8005458 <ReadDataSB+0xa8>
			sb3_baro = sb3->baro;
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <ReadDataSB+0xcc>)
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005440:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb3->imu;
 8005444:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <ReadDataSB+0xd0>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4614      	mov	r4, r2
 800544a:	330c      	adds	r3, #12
 800544c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800544e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <ReadDataSB+0xc8>)
 8005454:	f7fe f946 	bl	80036e4 <ReleaseMutex>
		}
//	}
}
 8005458:	bf00      	nop
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd90      	pop	{r4, r7, pc}
 8005460:	20010a70 	.word	0x20010a70
 8005464:	20000218 	.word	0x20000218
 8005468:	20000224 	.word	0x20000224
 800546c:	20026d00 	.word	0x20026d00
 8005470:	20000234 	.word	0x20000234
 8005474:	20000240 	.word	0x20000240
 8005478:	20010ae0 	.word	0x20010ae0
 800547c:	20000250 	.word	0x20000250
 8005480:	2000025c 	.word	0x2000025c

08005484 <calculate_checksum>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum(sb_data_t *sb_data){
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	b2db      	uxtb	r3, r3
 8005498:	4413      	add	r3, r2
 800549a:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	4413      	add	r3, r2
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4413      	add	r3, r2
 80054be:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	4413      	add	r3, r2
 80054ca:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	4413      	add	r3, r2
 80054e2:	b2db      	uxtb	r3, r3
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <vTaskStateEst>:

void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory);


void vTaskStateEst(void *argument) {
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	f2ad 5db4 	subw	sp, sp, #1460	; 0x5b4
 80054f6:	af0c      	add	r7, sp, #48	; 0x30
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 80054fc:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005500:	4618      	mov	r0, r3
 8005502:	f7fc fac1 	bl	8001a88 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8005506:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800550a:	2278      	movs	r2, #120	; 0x78
 800550c:	2100      	movs	r1, #0
 800550e:	4618      	mov	r0, r3
 8005510:	f012 fb63 	bl	8017bda <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8005514:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8005518:	4618      	mov	r0, r3
 800551a:	2378      	movs	r3, #120	; 0x78
 800551c:	461a      	mov	r2, r3
 800551e:	2100      	movs	r1, #0
 8005520:	f012 fb5b 	bl	8017bda <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8005524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005528:	4618      	mov	r0, r3
 800552a:	f7fc fd83 	bl	8002034 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	4618      	mov	r0, r3
 8005534:	23b0      	movs	r3, #176	; 0xb0
 8005536:	461a      	mov	r2, r3
 8005538:	2100      	movs	r1, #0
 800553a:	f012 fb4e 	bl	8017bda <memset>
	extrapolation_rolling_memory.memory_length = 0;
 800553e:	f107 0318 	add.w	r3, r7, #24
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8005546:	f107 030c 	add.w	r3, r7, #12
 800554a:	461a      	mov	r2, r3
 800554c:	2300      	movs	r3, #0
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	6053      	str	r3, [r2, #4]
 8005552:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	4618      	mov	r0, r3
 800555a:	f7fc fd53 	bl	8002004 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 800555e:	f107 030b 	add.w	r3, r7, #11
 8005562:	229b      	movs	r2, #155	; 0x9b
 8005564:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005566:	f107 0318 	add.w	r3, r7, #24
 800556a:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800556e:	f107 010c 	add.w	r1, r7, #12
 8005572:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8005576:	f7fd f953 	bl	8002820 <select_noise_models>



	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800557a:	f00d fe27 	bl	80131cc <osKernelGetTickCount>
 800557e:	f8c7 057c 	str.w	r0, [r7, #1404]	; 0x57c
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8005582:	f00d fe4b 	bl	801321c <osKernelGetTickFreq>
 8005586:	4602      	mov	r2, r0
 8005588:	4b64      	ldr	r3, [pc, #400]	; (800571c <vTaskStateEst+0x22c>)
 800558a:	fba3 2302 	umull	r2, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578

	for (;;) {
		tick_count += tick_update;
 8005594:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8005598:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 800559c:	4413      	add	r3, r2
 800559e:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80055a2:	f107 020b 	add.w	r2, r7, #11
 80055a6:	2301      	movs	r3, #1
 80055a8:	495d      	ldr	r1, [pc, #372]	; (8005720 <vTaskStateEst+0x230>)
 80055aa:	485e      	ldr	r0, [pc, #376]	; (8005724 <vTaskStateEst+0x234>)
 80055ac:	f7fe f8a8 	bl	8003700 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 80055b0:	f107 030c 	add.w	r3, r7, #12
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10d      	bne.n	80055d6 <vTaskStateEst+0xe6>
 80055ba:	4b59      	ldr	r3, [pc, #356]	; (8005720 <vTaskStateEst+0x230>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b9c      	cmp	r3, #156	; 0x9c
 80055c0:	d109      	bne.n	80055d6 <vTaskStateEst+0xe6>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80055c2:	f107 0318 	add.w	r3, r7, #24
 80055c6:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 80055ca:	f107 010c 	add.w	r1, r7, #12
 80055ce:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 80055d2:	f000 f8c5 	bl	8005760 <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 80055d6:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80055da:	2301      	movs	r3, #1
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	4a51      	ldr	r2, [pc, #324]	; (8005728 <vTaskStateEst+0x238>)
 80055e2:	4952      	ldr	r1, [pc, #328]	; (800572c <vTaskStateEst+0x23c>)
 80055e4:	4852      	ldr	r0, [pc, #328]	; (8005730 <vTaskStateEst+0x240>)
 80055e6:	f7fe f8c7 	bl	8003778 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 80055ea:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 80055ee:	2302      	movs	r3, #2
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	4a4f      	ldr	r2, [pc, #316]	; (8005734 <vTaskStateEst+0x244>)
 80055f6:	4950      	ldr	r1, [pc, #320]	; (8005738 <vTaskStateEst+0x248>)
 80055f8:	4850      	ldr	r0, [pc, #320]	; (800573c <vTaskStateEst+0x24c>)
 80055fa:	f7fe f8bd 	bl	8003778 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 80055fe:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8005602:	2303      	movs	r3, #3
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	4613      	mov	r3, r2
 8005608:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <vTaskStateEst+0x250>)
 800560a:	494e      	ldr	r1, [pc, #312]	; (8005744 <vTaskStateEst+0x254>)
 800560c:	484e      	ldr	r0, [pc, #312]	; (8005748 <vTaskStateEst+0x258>)
 800560e:	f7fe f8b3 	bl	8003778 <ReadMutexStateEst>

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8005612:	f107 020c 	add.w	r2, r7, #12
 8005616:	230c      	movs	r3, #12
 8005618:	494c      	ldr	r1, [pc, #304]	; (800574c <vTaskStateEst+0x25c>)
 800561a:	484d      	ldr	r0, [pc, #308]	; (8005750 <vTaskStateEst+0x260>)
 800561c:	f7fe f870 	bl	8003700 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8005620:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 8005624:	f507 629e 	add.w	r2, r7, #1264	; 0x4f0
 8005628:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 800562c:	f107 0318 	add.w	r3, r7, #24
 8005630:	9301      	str	r3, [sp, #4]
 8005632:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	4603      	mov	r3, r0
 800563a:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 800563e:	f7fc ff7b 	bl	8002538 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8005642:	f107 0318 	add.w	r3, r7, #24
 8005646:	f507 62ad 	add.w	r2, r7, #1384	; 0x568
 800564a:	f107 010c 	add.w	r1, r7, #12
 800564e:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8005652:	f7fd f8e5 	bl	8002820 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 8005656:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800565a:	4618      	mov	r0, r3
 800565c:	f7fc fd80 	bl	8002160 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8005660:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005664:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005668:	2b00      	cmp	r3, #0
 800566a:	dd0a      	ble.n	8005682 <vTaskStateEst+0x192>
			select_kf_observation_matrices(&kf_state);
 800566c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc fde6 	bl	8002242 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8005676:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800567a:	4618      	mov	r0, r3
 800567c:	f7fc fe1e 	bl	80022bc <kf_update>
 8005680:	e00a      	b.n	8005698 <vTaskStateEst+0x1a8>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8005682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005686:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800568a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800568e:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8005692:	ca07      	ldmia	r2, {r0, r1, r2}
 8005694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8005698:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800569c:	4618      	mov	r0, r3
 800569e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 80056a2:	2278      	movs	r2, #120	; 0x78
 80056a4:	4619      	mov	r1, r3
 80056a6:	f012 fa8d 	bl	8017bc4 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 80056aa:	482a      	ldr	r0, [pc, #168]	; (8005754 <vTaskStateEst+0x264>)
 80056ac:	f7fe f800 	bl	80036b0 <AcquireMutex>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d108      	bne.n	80056c8 <vTaskStateEst+0x1d8>
			update_state_est_data(&state_est_data_global, &kf_state);
 80056b6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80056ba:	4619      	mov	r1, r3
 80056bc:	4826      	ldr	r0, [pc, #152]	; (8005758 <vTaskStateEst+0x268>)
 80056be:	f7fc feeb 	bl	8002498 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 80056c2:	4824      	ldr	r0, [pc, #144]	; (8005754 <vTaskStateEst+0x264>)
 80056c4:	f7fe f80e 	bl	80036e4 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 80056c8:	4821      	ldr	r0, [pc, #132]	; (8005750 <vTaskStateEst+0x260>)
 80056ca:	f7fd fff1 	bl	80036b0 <AcquireMutex>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <vTaskStateEst+0x1f8>
			global_env = env;
 80056d4:	4b21      	ldr	r3, [pc, #132]	; (800575c <vTaskStateEst+0x26c>)
 80056d6:	461c      	mov	r4, r3
 80056d8:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 80056dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 80056e2:	481b      	ldr	r0, [pc, #108]	; (8005750 <vTaskStateEst+0x260>)
 80056e4:	f7fd fffe 	bl	80036e4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 80056e8:	f00d fd70 	bl	80131cc <osKernelGetTickCount>
 80056ec:	4684      	mov	ip, r0
 80056ee:	4e1a      	ldr	r6, [pc, #104]	; (8005758 <vTaskStateEst+0x268>)
 80056f0:	466d      	mov	r5, sp
 80056f2:	f106 040c 	add.w	r4, r6, #12
 80056f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005702:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8005706:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800570a:	4660      	mov	r0, ip
 800570c:	f7fe f9ac 	bl	8003a68 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8005710:	f8d7 057c 	ldr.w	r0, [r7, #1404]	; 0x57c
 8005714:	f00d fe60 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 8005718:	e73c      	b.n	8005594 <vTaskStateEst+0xa4>
 800571a:	bf00      	nop
 800571c:	51eb851f 	.word	0x51eb851f
 8005720:	20014b54 	.word	0x20014b54
 8005724:	20008b68 	.word	0x20008b68
 8005728:	20000224 	.word	0x20000224
 800572c:	20000218 	.word	0x20000218
 8005730:	20010a70 	.word	0x20010a70
 8005734:	20000240 	.word	0x20000240
 8005738:	20000234 	.word	0x20000234
 800573c:	20026d00 	.word	0x20026d00
 8005740:	2000025c 	.word	0x2000025c
 8005744:	20000250 	.word	0x20000250
 8005748:	20010ae0 	.word	0x20010ae0
 800574c:	200002bc 	.word	0x200002bc
 8005750:	20008984 	.word	0x20008984
 8005754:	20010af0 	.word	0x20010af0
 8005758:	2000026c 	.word	0x2000026c
 800575c:	200002ac 	.word	0x200002ac

08005760 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory){
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
	reset_flight_phase_detection(flight_phase_detection);
 800576e:	68b8      	ldr	r0, [r7, #8]
 8005770:	f7fc fc48 	bl	8002004 <reset_flight_phase_detection>
	reset_kf_state(kf_state);
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f7fc fc5d 	bl	8002034 <reset_kf_state>
	init_env(environment);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f7fc f984 	bl	8001a88 <init_env>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4618      	mov	r0, r3
 8005784:	23b0      	movs	r3, #176	; 0xb0
 8005786:	461a      	mov	r2, r3
 8005788:	2100      	movs	r1, #0
 800578a:	f012 fa26 	bl	8017bda <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7fd f843 	bl	8002820 <select_noise_models>
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <vTaskXbee>:
command_xbee_t local_command_xbee;

command_e local_command;
bool new_command = false;

void vTaskXbee(void *argument) {
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b0b2      	sub	sp, #200	; 0xc8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	int32_t controller_output;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 80057ac:	f107 030c 	add.w	r3, r7, #12
 80057b0:	2270      	movs	r2, #112	; 0x70
 80057b2:	2100      	movs	r1, #0
 80057b4:	4618      	mov	r0, r3
 80057b6:	f012 fa10 	bl	8017bda <memset>
	telemetry_send.flight_phase = IDLE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	telemetry_send.mach_regime = SUBSONIC;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t rx = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

	/* Command struct */
	local_command = IDLE_COMMAND;
 80057cc:	4b50      	ldr	r3, [pc, #320]	; (8005910 <vTaskXbee+0x16c>)
 80057ce:	229b      	movs	r2, #155	; 0x9b
 80057d0:	701a      	strb	r2, [r3, #0]
	local_command_xbee = IDLE_XBEE_DATA;
 80057d2:	4b50      	ldr	r3, [pc, #320]	; (8005914 <vTaskXbee+0x170>)
 80057d4:	4a50      	ldr	r2, [pc, #320]	; (8005918 <vTaskXbee+0x174>)
 80057d6:	6810      	ldr	r0, [r2, #0]
 80057d8:	6018      	str	r0, [r3, #0]


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80057da:	f00d fcf7 	bl	80131cc <osKernelGetTickCount>
 80057de:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
	tick_update = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 80057e2:	f00d fd1b 	bl	801321c <osKernelGetTickFreq>
 80057e6:	4602      	mov	r2, r0
 80057e8:	4b4c      	ldr	r3, [pc, #304]	; (800591c <vTaskXbee+0x178>)
 80057ea:	fba3 2302 	umull	r2, r3, r3, r2
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	HAL_UART_Receive_IT(&huart7, (uint8_t*) &local_command, sizeof(local_command));
 80057f4:	2201      	movs	r2, #1
 80057f6:	4946      	ldr	r1, [pc, #280]	; (8005910 <vTaskXbee+0x16c>)
 80057f8:	4849      	ldr	r0, [pc, #292]	; (8005920 <vTaskXbee+0x17c>)
 80057fa:	f005 ff31 	bl	800b660 <HAL_UART_Receive_IT>

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80057fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005802:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005806:	4413      	add	r3, r2
 8005808:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

		/* Write command in Global Command Variable */
		if(AcquireMutex(&command_mutex) == osOK){
 800580c:	4845      	ldr	r0, [pc, #276]	; (8005924 <vTaskXbee+0x180>)
 800580e:	f7fd ff4f 	bl	80036b0 <AcquireMutex>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <vTaskXbee+0x82>
			global_telemetry_command = local_command;
 8005818:	4b3d      	ldr	r3, [pc, #244]	; (8005910 <vTaskXbee+0x16c>)
 800581a:	781a      	ldrb	r2, [r3, #0]
 800581c:	4b42      	ldr	r3, [pc, #264]	; (8005928 <vTaskXbee+0x184>)
 800581e:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 8005820:	4840      	ldr	r0, [pc, #256]	; (8005924 <vTaskXbee+0x180>)
 8005822:	f7fd ff5f 	bl	80036e4 <ReleaseMutex>
		}
		if(new_command){
 8005826:	4b41      	ldr	r3, [pc, #260]	; (800592c <vTaskXbee+0x188>)
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <vTaskXbee+0x96>
			local_command = IDLE_COMMAND;
 800582e:	4b38      	ldr	r3, [pc, #224]	; (8005910 <vTaskXbee+0x16c>)
 8005830:	229b      	movs	r2, #155	; 0x9b
 8005832:	701a      	strb	r2, [r3, #0]
			new_command = false;
 8005834:	4b3d      	ldr	r3, [pc, #244]	; (800592c <vTaskXbee+0x188>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
		}

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &telemetry_send.sb1.baro, sizeof(sb1_baro));
 800583a:	f107 020c 	add.w	r2, r7, #12
 800583e:	230c      	movs	r3, #12
 8005840:	493b      	ldr	r1, [pc, #236]	; (8005930 <vTaskXbee+0x18c>)
 8005842:	483c      	ldr	r0, [pc, #240]	; (8005934 <vTaskXbee+0x190>)
 8005844:	f7fd ff5c 	bl	8003700 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &telemetry_send.sb1.imu, sizeof(sb1_imu));
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	f103 020c 	add.w	r2, r3, #12
 8005850:	2310      	movs	r3, #16
 8005852:	4939      	ldr	r1, [pc, #228]	; (8005938 <vTaskXbee+0x194>)
 8005854:	4837      	ldr	r0, [pc, #220]	; (8005934 <vTaskXbee+0x190>)
 8005856:	f7fd ff53 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_baro, &telemetry_send.sb2.baro, sizeof(sb2_baro));
 800585a:	f107 030c 	add.w	r3, r7, #12
 800585e:	f103 0220 	add.w	r2, r3, #32
 8005862:	230c      	movs	r3, #12
 8005864:	4935      	ldr	r1, [pc, #212]	; (800593c <vTaskXbee+0x198>)
 8005866:	4836      	ldr	r0, [pc, #216]	; (8005940 <vTaskXbee+0x19c>)
 8005868:	f7fd ff4a 	bl	8003700 <ReadMutex>
		ReadMutex(&sb2_mutex, &sb2_imu, &telemetry_send.sb2.imu, sizeof(sb2_imu));
 800586c:	f107 030c 	add.w	r3, r7, #12
 8005870:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8005874:	2310      	movs	r3, #16
 8005876:	4933      	ldr	r1, [pc, #204]	; (8005944 <vTaskXbee+0x1a0>)
 8005878:	4831      	ldr	r0, [pc, #196]	; (8005940 <vTaskXbee+0x19c>)
 800587a:	f7fd ff41 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_baro, &telemetry_send.sb3.baro, sizeof(sb3_baro));
 800587e:	f107 030c 	add.w	r3, r7, #12
 8005882:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005886:	230c      	movs	r3, #12
 8005888:	492f      	ldr	r1, [pc, #188]	; (8005948 <vTaskXbee+0x1a4>)
 800588a:	4830      	ldr	r0, [pc, #192]	; (800594c <vTaskXbee+0x1a8>)
 800588c:	f7fd ff38 	bl	8003700 <ReadMutex>
		ReadMutex(&sb3_mutex, &sb3_imu, &telemetry_send.sb3.imu, sizeof(sb3_imu));
 8005890:	f107 030c 	add.w	r3, r7, #12
 8005894:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8005898:	2310      	movs	r3, #16
 800589a:	492d      	ldr	r1, [pc, #180]	; (8005950 <vTaskXbee+0x1ac>)
 800589c:	482b      	ldr	r0, [pc, #172]	; (800594c <vTaskXbee+0x1a8>)
 800589e:	f7fd ff2f 	bl	8003700 <ReadMutex>

		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 80058a2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80058a6:	233c      	movs	r3, #60	; 0x3c
 80058a8:	492a      	ldr	r1, [pc, #168]	; (8005954 <vTaskXbee+0x1b0>)
 80058aa:	482b      	ldr	r0, [pc, #172]	; (8005958 <vTaskXbee+0x1b4>)
 80058ac:	f7fd ff28 	bl	8003700 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &controller_output, sizeof(controller_output));
 80058b0:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80058b4:	2304      	movs	r3, #4
 80058b6:	4929      	ldr	r1, [pc, #164]	; (800595c <vTaskXbee+0x1b8>)
 80058b8:	4829      	ldr	r0, [pc, #164]	; (8005960 <vTaskXbee+0x1bc>)
 80058ba:	f7fd ff21 	bl	8003700 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80058c6:	2301      	movs	r3, #1
 80058c8:	4926      	ldr	r1, [pc, #152]	; (8005964 <vTaskXbee+0x1c0>)
 80058ca:	4827      	ldr	r0, [pc, #156]	; (8005968 <vTaskXbee+0x1c4>)
 80058cc:	f7fd ff18 	bl	8003700 <ReadMutex>
		ReadMutex(&fsm_mutex, &global_flight_phase_detection.mach_regime, &telemetry_send.mach_regime, sizeof(global_flight_phase_detection.mach_regime));
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	f103 026d 	add.w	r2, r3, #109	; 0x6d
 80058d8:	2301      	movs	r3, #1
 80058da:	4924      	ldr	r1, [pc, #144]	; (800596c <vTaskXbee+0x1c8>)
 80058dc:	4822      	ldr	r0, [pc, #136]	; (8005968 <vTaskXbee+0x1c4>)
 80058de:	f7fd ff0f 	bl	8003700 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 80058e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80058e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058ec:	673b      	str	r3, [r7, #112]	; 0x70
		telemetry_send.ts = osKernelGetTickCount();
 80058ee:	f00d fc6d 	bl	80131cc <osKernelGetTickCount>
 80058f2:	4603      	mov	r3, r0
 80058f4:	677b      	str	r3, [r7, #116]	; 0x74

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), HAL_MAX_DELAY);
 80058f6:	f107 010c 	add.w	r1, r7, #12
 80058fa:	f04f 33ff 	mov.w	r3, #4294967295
 80058fe:	2270      	movs	r2, #112	; 0x70
 8005900:	4807      	ldr	r0, [pc, #28]	; (8005920 <vTaskXbee+0x17c>)
 8005902:	f005 fd4f 	bl	800b3a4 <HAL_UART_Transmit>



		/* Sleep */
		osDelayUntil(tick_count);
 8005906:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800590a:	f00d fd65 	bl	80133d8 <osDelayUntil>
		tick_count += tick_update;
 800590e:	e776      	b.n	80057fe <vTaskXbee+0x5a>
 8005910:	200271b0 	.word	0x200271b0
 8005914:	200271b4 	.word	0x200271b4
 8005918:	0801ac6c 	.word	0x0801ac6c
 800591c:	cccccccd 	.word	0xcccccccd
 8005920:	200089f0 	.word	0x200089f0
 8005924:	20008b68 	.word	0x20008b68
 8005928:	20014b54 	.word	0x20014b54
 800592c:	20000430 	.word	0x20000430
 8005930:	20000218 	.word	0x20000218
 8005934:	20010a70 	.word	0x20010a70
 8005938:	20000224 	.word	0x20000224
 800593c:	20000234 	.word	0x20000234
 8005940:	20026d00 	.word	0x20026d00
 8005944:	20000240 	.word	0x20000240
 8005948:	20000250 	.word	0x20000250
 800594c:	20010ae0 	.word	0x20010ae0
 8005950:	2000025c 	.word	0x2000025c
 8005954:	2000026c 	.word	0x2000026c
 8005958:	20010af0 	.word	0x20010af0
 800595c:	200002a8 	.word	0x200002a8
 8005960:	20010a60 	.word	0x20010a60
 8005964:	200002bc 	.word	0x200002bc
 8005968:	20008984 	.word	0x20008984
 800596c:	200002bd 	.word	0x200002bd

08005970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005974:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005976:	e003      	b.n	8005980 <LoopCopyDataInit>

08005978 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005978:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800597a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800597c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800597e:	3104      	adds	r1, #4

08005980 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005980:	480b      	ldr	r0, [pc, #44]	; (80059b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005982:	4b0c      	ldr	r3, [pc, #48]	; (80059b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005984:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005986:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005988:	d3f6      	bcc.n	8005978 <CopyDataInit>
  ldr  r2, =_sbss
 800598a:	4a0b      	ldr	r2, [pc, #44]	; (80059b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800598c:	e002      	b.n	8005994 <LoopFillZerobss>

0800598e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800598e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005990:	f842 3b04 	str.w	r3, [r2], #4

08005994 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005996:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005998:	d3f9      	bcc.n	800598e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800599a:	f7ff f895 	bl	8004ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800599e:	f012 f8dd 	bl	8017b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059a2:	f7fe f8fd 	bl	8003ba0 <main>
  bx  lr    
 80059a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059a8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80059ac:	0801ae28 	.word	0x0801ae28
  ldr  r0, =_sdata
 80059b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80059b4:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80059b8:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80059bc:	20028f40 	.word	0x20028f40

080059c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059c0:	e7fe      	b.n	80059c0 <ADC_IRQHandler>

080059c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059c6:	2003      	movs	r0, #3
 80059c8:	f000 f8f7 	bl	8005bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059cc:	2000      	movs	r0, #0
 80059ce:	f7fe ff79 	bl	80048c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80059d2:	f7fe fcf3 	bl	80043bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <HAL_IncTick+0x20>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <HAL_IncTick+0x24>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <HAL_IncTick+0x24>)
 80059ee:	6013      	str	r3, [r2, #0]
}
 80059f0:	bf00      	nop
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	20000008 	.word	0x20000008
 8005a00:	200271b8 	.word	0x200271b8

08005a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
  return uwTick;
 8005a08:	4b03      	ldr	r3, [pc, #12]	; (8005a18 <HAL_GetTick+0x14>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	200271b8 	.word	0x200271b8

08005a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a24:	f7ff ffee 	bl	8005a04 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a34:	d005      	beq.n	8005a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_Delay+0x40>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a42:	bf00      	nop
 8005a44:	f7ff ffde 	bl	8005a04 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d8f7      	bhi.n	8005a44 <HAL_Delay+0x28>
  {
  }
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000008 	.word	0x20000008

08005a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a70:	4b0b      	ldr	r3, [pc, #44]	; (8005aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a88:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a8e:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	60d3      	str	r3, [r2, #12]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	e000ed00 	.word	0xe000ed00
 8005aa4:	05fa0000 	.word	0x05fa0000

08005aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005aac:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	f003 0307 	and.w	r3, r3, #7
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	e000ed00 	.word	0xe000ed00

08005ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	db0b      	blt.n	8005aee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	f003 021f 	and.w	r2, r3, #31
 8005adc:	4907      	ldr	r1, [pc, #28]	; (8005afc <__NVIC_EnableIRQ+0x38>)
 8005ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	2001      	movs	r0, #1
 8005ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	e000e100 	.word	0xe000e100

08005b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db0a      	blt.n	8005b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	490c      	ldr	r1, [pc, #48]	; (8005b4c <__NVIC_SetPriority+0x4c>)
 8005b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	440b      	add	r3, r1
 8005b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b28:	e00a      	b.n	8005b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4908      	ldr	r1, [pc, #32]	; (8005b50 <__NVIC_SetPriority+0x50>)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3b04      	subs	r3, #4
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	761a      	strb	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	e000e100 	.word	0xe000e100
 8005b50:	e000ed00 	.word	0xe000ed00

08005b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf28      	it	cs
 8005b72:	2304      	movcs	r3, #4
 8005b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d902      	bls.n	8005b84 <NVIC_EncodePriority+0x30>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3b03      	subs	r3, #3
 8005b82:	e000      	b.n	8005b86 <NVIC_EncodePriority+0x32>
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	401a      	ands	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	43d9      	mvns	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	4313      	orrs	r3, r2
         );
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3724      	adds	r7, #36	; 0x24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b082      	sub	sp, #8
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f7ff ff4c 	bl	8005a60 <__NVIC_SetPriorityGrouping>
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005be2:	f7ff ff61 	bl	8005aa8 <__NVIC_GetPriorityGrouping>
 8005be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	6978      	ldr	r0, [r7, #20]
 8005bee:	f7ff ffb1 	bl	8005b54 <NVIC_EncodePriority>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff80 	bl	8005b00 <__NVIC_SetPriority>
}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff ff54 	bl	8005ac4 <__NVIC_EnableIRQ>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff fee8 	bl	8005a04 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e099      	b.n	8005d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c60:	e00f      	b.n	8005c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c62:	f7ff fecf 	bl	8005a04 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d908      	bls.n	8005c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e078      	b.n	8005d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e8      	bne.n	8005c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <HAL_DMA_Init+0x158>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d107      	bne.n	8005cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d117      	bne.n	8005d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 faa5 	bl	8006278 <DMA_CheckFifoParam>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d42:	2301      	movs	r3, #1
 8005d44:	e016      	b.n	8005d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa5c 	bl	800620c <DMA_CalcBaseAndBitshift>
 8005d54:	4603      	mov	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5c:	223f      	movs	r2, #63	; 0x3f
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	f010803f 	.word	0xf010803f

08005d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA_Start_IT+0x26>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e048      	b.n	8005e38 <HAL_DMA_Start_IT+0xb8>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d137      	bne.n	8005e2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f9ee 	bl	80061b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	223f      	movs	r2, #63	; 0x3f
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0216 	orr.w	r2, r2, #22
 8005dee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dfe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d007      	beq.n	8005e18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0208 	orr.w	r2, r2, #8
 8005e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e005      	b.n	8005e36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
 8005e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d004      	beq.n	8005e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2280      	movs	r2, #128	; 0x80
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e00c      	b.n	8005e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2205      	movs	r2, #5
 8005e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0201 	bic.w	r2, r2, #1
 8005e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005e90:	4b92      	ldr	r3, [pc, #584]	; (80060dc <HAL_DMA_IRQHandler+0x258>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a92      	ldr	r2, [pc, #584]	; (80060e0 <HAL_DMA_IRQHandler+0x25c>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	0a9b      	lsrs	r3, r3, #10
 8005e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eae:	2208      	movs	r2, #8
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d01a      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d013      	beq.n	8005ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f022 0204 	bic.w	r2, r2, #4
 8005ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005edc:	2208      	movs	r2, #8
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	409a      	lsls	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d012      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f12:	2201      	movs	r2, #1
 8005f14:	409a      	lsls	r2, r3
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f043 0202 	orr.w	r2, r3, #2
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	409a      	lsls	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0302 	and.w	r3, r3, #2
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00b      	beq.n	8005f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	2204      	movs	r2, #4
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	f043 0204 	orr.w	r2, r3, #4
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	2210      	movs	r2, #16
 8005f62:	409a      	lsls	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d043      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d03c      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7e:	2210      	movs	r2, #16
 8005f80:	409a      	lsls	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d018      	beq.n	8005fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d024      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
 8005fb2:	e01f      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01b      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	4798      	blx	r3
 8005fc4:	e016      	b.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0208 	bic.w	r2, r2, #8
 8005fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d003      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 808e 	beq.w	8006122 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8086 	beq.w	8006122 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	2220      	movs	r2, #32
 800601c:	409a      	lsls	r2, r3
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b05      	cmp	r3, #5
 800602c:	d136      	bne.n	800609c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0216 	bic.w	r2, r2, #22
 800603c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695a      	ldr	r2, [r3, #20]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800604c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d103      	bne.n	800605e <HAL_DMA_IRQHandler+0x1da>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605a:	2b00      	cmp	r3, #0
 800605c:	d007      	beq.n	800606e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f022 0208 	bic.w	r2, r2, #8
 800606c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006072:	223f      	movs	r2, #63	; 0x3f
 8006074:	409a      	lsls	r2, r3
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	2b00      	cmp	r3, #0
 8006090:	d07d      	beq.n	800618e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
        }
        return;
 800609a:	e078      	b.n	800618e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01c      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d108      	bne.n	80060ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d030      	beq.n	8006122 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	4798      	blx	r3
 80060c8:	e02b      	b.n	8006122 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d027      	beq.n	8006122 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
 80060da:	e022      	b.n	8006122 <HAL_DMA_IRQHandler+0x29e>
 80060dc:	20000000 	.word	0x20000000
 80060e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10f      	bne.n	8006112 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0210 	bic.w	r2, r2, #16
 8006100:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006126:	2b00      	cmp	r3, #0
 8006128:	d032      	beq.n	8006190 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f003 0301 	and.w	r3, r3, #1
 8006132:	2b00      	cmp	r3, #0
 8006134:	d022      	beq.n	800617c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2205      	movs	r2, #5
 800613a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	3301      	adds	r3, #1
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	429a      	cmp	r2, r3
 8006158:	d307      	bcc.n	800616a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1f2      	bne.n	800614e <HAL_DMA_IRQHandler+0x2ca>
 8006168:	e000      	b.n	800616c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800616a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
 800618c:	e000      	b.n	8006190 <HAL_DMA_IRQHandler+0x30c>
        return;
 800618e:	bf00      	nop
    }
  }
}
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d108      	bne.n	80061f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061ee:	e007      	b.n	8006200 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	60da      	str	r2, [r3, #12]
}
 8006200:	bf00      	nop
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b2db      	uxtb	r3, r3
 800621a:	3b10      	subs	r3, #16
 800621c:	4a13      	ldr	r2, [pc, #76]	; (800626c <DMA_CalcBaseAndBitshift+0x60>)
 800621e:	fba2 2303 	umull	r2, r3, r2, r3
 8006222:	091b      	lsrs	r3, r3, #4
 8006224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <DMA_CalcBaseAndBitshift+0x64>)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b03      	cmp	r3, #3
 8006238:	d908      	bls.n	800624c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <DMA_CalcBaseAndBitshift+0x68>)
 8006242:	4013      	ands	r3, r2
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	659a      	str	r2, [r3, #88]	; 0x58
 800624a:	e006      	b.n	800625a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	461a      	mov	r2, r3
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <DMA_CalcBaseAndBitshift+0x68>)
 8006254:	4013      	ands	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	aaaaaaab 	.word	0xaaaaaaab
 8006270:	0801ac70 	.word	0x0801ac70
 8006274:	fffffc00 	.word	0xfffffc00

08006278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d11f      	bne.n	80062d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b03      	cmp	r3, #3
 8006296:	d855      	bhi.n	8006344 <DMA_CheckFifoParam+0xcc>
 8006298:	a201      	add	r2, pc, #4	; (adr r2, 80062a0 <DMA_CheckFifoParam+0x28>)
 800629a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629e:	bf00      	nop
 80062a0:	080062b1 	.word	0x080062b1
 80062a4:	080062c3 	.word	0x080062c3
 80062a8:	080062b1 	.word	0x080062b1
 80062ac:	08006345 	.word	0x08006345
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d045      	beq.n	8006348 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062c0:	e042      	b.n	8006348 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062ca:	d13f      	bne.n	800634c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e03c      	b.n	800634c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062da:	d121      	bne.n	8006320 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d836      	bhi.n	8006350 <DMA_CheckFifoParam+0xd8>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <DMA_CheckFifoParam+0x70>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	080062f9 	.word	0x080062f9
 80062ec:	080062ff 	.word	0x080062ff
 80062f0:	080062f9 	.word	0x080062f9
 80062f4:	08006311 	.word	0x08006311
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
      break;
 80062fc:	e02f      	b.n	800635e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d024      	beq.n	8006354 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800630e:	e021      	b.n	8006354 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006318:	d11e      	bne.n	8006358 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800631e:	e01b      	b.n	8006358 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d902      	bls.n	800632c <DMA_CheckFifoParam+0xb4>
 8006326:	2b03      	cmp	r3, #3
 8006328:	d003      	beq.n	8006332 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800632a:	e018      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	73fb      	strb	r3, [r7, #15]
      break;
 8006330:	e015      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00e      	beq.n	800635c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
      break;
 8006342:	e00b      	b.n	800635c <DMA_CheckFifoParam+0xe4>
      break;
 8006344:	bf00      	nop
 8006346:	e00a      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;
 8006348:	bf00      	nop
 800634a:	e008      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;
 800634c:	bf00      	nop
 800634e:	e006      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;
 8006350:	bf00      	nop
 8006352:	e004      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;
 8006354:	bf00      	nop
 8006356:	e002      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;   
 8006358:	bf00      	nop
 800635a:	e000      	b.n	800635e <DMA_CheckFifoParam+0xe6>
      break;
 800635c:	bf00      	nop
    }
  } 
  
  return status; 
 800635e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800636c:	b480      	push	{r7}
 800636e:	b089      	sub	sp, #36	; 0x24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800637e:	2300      	movs	r3, #0
 8006380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006382:	2300      	movs	r3, #0
 8006384:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006386:	2300      	movs	r3, #0
 8006388:	61fb      	str	r3, [r7, #28]
 800638a:	e175      	b.n	8006678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800638c:	2201      	movs	r2, #1
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4013      	ands	r3, r2
 800639e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	f040 8164 	bne.w	8006672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d00b      	beq.n	80063ca <HAL_GPIO_Init+0x5e>
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d007      	beq.n	80063ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063be:	2b11      	cmp	r3, #17
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b12      	cmp	r3, #18
 80063c8:	d130      	bne.n	800642c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	2203      	movs	r2, #3
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	43db      	mvns	r3, r3
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	4013      	ands	r3, r2
 80063e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006400:	2201      	movs	r2, #1
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4013      	ands	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 0201 	and.w	r2, r3, #1
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	fa02 f303 	lsl.w	r3, r2, r3
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	4313      	orrs	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	2203      	movs	r2, #3
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	4013      	ands	r3, r2
 8006442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d003      	beq.n	800646c <HAL_GPIO_Init+0x100>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b12      	cmp	r3, #18
 800646a:	d123      	bne.n	80064b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	08da      	lsrs	r2, r3, #3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3208      	adds	r2, #8
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	220f      	movs	r2, #15
 8006484:	fa02 f303 	lsl.w	r3, r2, r3
 8006488:	43db      	mvns	r3, r3
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	4013      	ands	r3, r2
 800648e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	08da      	lsrs	r2, r3, #3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3208      	adds	r2, #8
 80064ae:	69b9      	ldr	r1, [r7, #24]
 80064b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	2203      	movs	r2, #3
 80064c0:	fa02 f303 	lsl.w	r3, r2, r3
 80064c4:	43db      	mvns	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 0203 	and.w	r2, r3, #3
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4313      	orrs	r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80be 	beq.w	8006672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064f6:	4b65      	ldr	r3, [pc, #404]	; (800668c <HAL_GPIO_Init+0x320>)
 80064f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064fa:	4a64      	ldr	r2, [pc, #400]	; (800668c <HAL_GPIO_Init+0x320>)
 80064fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006500:	6453      	str	r3, [r2, #68]	; 0x44
 8006502:	4b62      	ldr	r3, [pc, #392]	; (800668c <HAL_GPIO_Init+0x320>)
 8006504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800650a:	60fb      	str	r3, [r7, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800650e:	4a60      	ldr	r2, [pc, #384]	; (8006690 <HAL_GPIO_Init+0x324>)
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	089b      	lsrs	r3, r3, #2
 8006514:	3302      	adds	r3, #2
 8006516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f003 0303 	and.w	r3, r3, #3
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	220f      	movs	r2, #15
 8006526:	fa02 f303 	lsl.w	r3, r2, r3
 800652a:	43db      	mvns	r3, r3
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a57      	ldr	r2, [pc, #348]	; (8006694 <HAL_GPIO_Init+0x328>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d037      	beq.n	80065aa <HAL_GPIO_Init+0x23e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a56      	ldr	r2, [pc, #344]	; (8006698 <HAL_GPIO_Init+0x32c>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d031      	beq.n	80065a6 <HAL_GPIO_Init+0x23a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a55      	ldr	r2, [pc, #340]	; (800669c <HAL_GPIO_Init+0x330>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d02b      	beq.n	80065a2 <HAL_GPIO_Init+0x236>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a54      	ldr	r2, [pc, #336]	; (80066a0 <HAL_GPIO_Init+0x334>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d025      	beq.n	800659e <HAL_GPIO_Init+0x232>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_GPIO_Init+0x338>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d01f      	beq.n	800659a <HAL_GPIO_Init+0x22e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a52      	ldr	r2, [pc, #328]	; (80066a8 <HAL_GPIO_Init+0x33c>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d019      	beq.n	8006596 <HAL_GPIO_Init+0x22a>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a51      	ldr	r2, [pc, #324]	; (80066ac <HAL_GPIO_Init+0x340>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d013      	beq.n	8006592 <HAL_GPIO_Init+0x226>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a50      	ldr	r2, [pc, #320]	; (80066b0 <HAL_GPIO_Init+0x344>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00d      	beq.n	800658e <HAL_GPIO_Init+0x222>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a4f      	ldr	r2, [pc, #316]	; (80066b4 <HAL_GPIO_Init+0x348>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d007      	beq.n	800658a <HAL_GPIO_Init+0x21e>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a4e      	ldr	r2, [pc, #312]	; (80066b8 <HAL_GPIO_Init+0x34c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d101      	bne.n	8006586 <HAL_GPIO_Init+0x21a>
 8006582:	2309      	movs	r3, #9
 8006584:	e012      	b.n	80065ac <HAL_GPIO_Init+0x240>
 8006586:	230a      	movs	r3, #10
 8006588:	e010      	b.n	80065ac <HAL_GPIO_Init+0x240>
 800658a:	2308      	movs	r3, #8
 800658c:	e00e      	b.n	80065ac <HAL_GPIO_Init+0x240>
 800658e:	2307      	movs	r3, #7
 8006590:	e00c      	b.n	80065ac <HAL_GPIO_Init+0x240>
 8006592:	2306      	movs	r3, #6
 8006594:	e00a      	b.n	80065ac <HAL_GPIO_Init+0x240>
 8006596:	2305      	movs	r3, #5
 8006598:	e008      	b.n	80065ac <HAL_GPIO_Init+0x240>
 800659a:	2304      	movs	r3, #4
 800659c:	e006      	b.n	80065ac <HAL_GPIO_Init+0x240>
 800659e:	2303      	movs	r3, #3
 80065a0:	e004      	b.n	80065ac <HAL_GPIO_Init+0x240>
 80065a2:	2302      	movs	r3, #2
 80065a4:	e002      	b.n	80065ac <HAL_GPIO_Init+0x240>
 80065a6:	2301      	movs	r3, #1
 80065a8:	e000      	b.n	80065ac <HAL_GPIO_Init+0x240>
 80065aa:	2300      	movs	r3, #0
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	f002 0203 	and.w	r2, r2, #3
 80065b2:	0092      	lsls	r2, r2, #2
 80065b4:	4093      	lsls	r3, r2
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80065bc:	4934      	ldr	r1, [pc, #208]	; (8006690 <HAL_GPIO_Init+0x324>)
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	3302      	adds	r3, #2
 80065c4:	69ba      	ldr	r2, [r7, #24]
 80065c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065ca:	4b3c      	ldr	r3, [pc, #240]	; (80066bc <HAL_GPIO_Init+0x350>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	43db      	mvns	r3, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4013      	ands	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80065ee:	4a33      	ldr	r2, [pc, #204]	; (80066bc <HAL_GPIO_Init+0x350>)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80065f4:	4b31      	ldr	r3, [pc, #196]	; (80066bc <HAL_GPIO_Init+0x350>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	43db      	mvns	r3, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4013      	ands	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006618:	4a28      	ldr	r2, [pc, #160]	; (80066bc <HAL_GPIO_Init+0x350>)
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800661e:	4b27      	ldr	r3, [pc, #156]	; (80066bc <HAL_GPIO_Init+0x350>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	43db      	mvns	r3, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4013      	ands	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d003      	beq.n	8006642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800663a:	69ba      	ldr	r2, [r7, #24]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006642:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <HAL_GPIO_Init+0x350>)
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006648:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <HAL_GPIO_Init+0x350>)
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	43db      	mvns	r3, r3
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4013      	ands	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d003      	beq.n	800666c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	4313      	orrs	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <HAL_GPIO_Init+0x350>)
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3301      	adds	r3, #1
 8006676:	61fb      	str	r3, [r7, #28]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	2b0f      	cmp	r3, #15
 800667c:	f67f ae86 	bls.w	800638c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006680:	bf00      	nop
 8006682:	3724      	adds	r7, #36	; 0x24
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40023800 	.word	0x40023800
 8006690:	40013800 	.word	0x40013800
 8006694:	40020000 	.word	0x40020000
 8006698:	40020400 	.word	0x40020400
 800669c:	40020800 	.word	0x40020800
 80066a0:	40020c00 	.word	0x40020c00
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40021400 	.word	0x40021400
 80066ac:	40021800 	.word	0x40021800
 80066b0:	40021c00 	.word	0x40021c00
 80066b4:	40022000 	.word	0x40022000
 80066b8:	40022400 	.word	0x40022400
 80066bc:	40013c00 	.word	0x40013c00

080066c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	460b      	mov	r3, r1
 80066ca:	807b      	strh	r3, [r7, #2]
 80066cc:	4613      	mov	r3, r2
 80066ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066d0:	787b      	ldrb	r3, [r7, #1]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066d6:	887a      	ldrh	r2, [r7, #2]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80066dc:	e003      	b.n	80066e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	041a      	lsls	r2, r3, #16
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	619a      	str	r2, [r3, #24]
}
 80066e6:	bf00      	nop
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066f2:	b480      	push	{r7}
 80066f4:	b083      	sub	sp, #12
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	460b      	mov	r3, r1
 80066fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	887b      	ldrh	r3, [r7, #2]
 8006704:	4013      	ands	r3, r2
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	041a      	lsls	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006712:	e002      	b.n	800671a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006714:	887a      	ldrh	r2, [r7, #2]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	619a      	str	r2, [r3, #24]
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006728:	b08f      	sub	sp, #60	; 0x3c
 800672a:	af0a      	add	r7, sp, #40	; 0x28
 800672c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e116      	b.n	8006966 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f010 feaa 	bl	80174ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2203      	movs	r2, #3
 800675c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f006 fcc3 	bl	800d102 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	687e      	ldr	r6, [r7, #4]
 8006784:	466d      	mov	r5, sp
 8006786:	f106 0410 	add.w	r4, r6, #16
 800678a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800678c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800678e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006792:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006796:	e885 0003 	stmia.w	r5, {r0, r1}
 800679a:	1d33      	adds	r3, r6, #4
 800679c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	f006 fba4 	bl	800ceec <USB_CoreInit>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e0d7      	b.n	8006966 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2100      	movs	r1, #0
 80067bc:	4618      	mov	r0, r3
 80067be:	f006 fcb1 	bl	800d124 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]
 80067c6:	e04a      	b.n	800685e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067c8:	7bfa      	ldrb	r2, [r7, #15]
 80067ca:	6879      	ldr	r1, [r7, #4]
 80067cc:	4613      	mov	r3, r2
 80067ce:	00db      	lsls	r3, r3, #3
 80067d0:	1a9b      	subs	r3, r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	440b      	add	r3, r1
 80067d6:	333d      	adds	r3, #61	; 0x3d
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067dc:	7bfa      	ldrb	r2, [r7, #15]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	00db      	lsls	r3, r3, #3
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	333c      	adds	r3, #60	; 0x3c
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80067f0:	7bfa      	ldrb	r2, [r7, #15]
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	b298      	uxth	r0, r3
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	00db      	lsls	r3, r3, #3
 80067fc:	1a9b      	subs	r3, r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	3342      	adds	r3, #66	; 0x42
 8006804:	4602      	mov	r2, r0
 8006806:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006808:	7bfa      	ldrb	r2, [r7, #15]
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	333f      	adds	r3, #63	; 0x3f
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800681c:	7bfa      	ldrb	r2, [r7, #15]
 800681e:	6879      	ldr	r1, [r7, #4]
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3344      	adds	r3, #68	; 0x44
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006830:	7bfa      	ldrb	r2, [r7, #15]
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	4613      	mov	r3, r2
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	1a9b      	subs	r3, r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	440b      	add	r3, r1
 800683e:	3348      	adds	r3, #72	; 0x48
 8006840:	2200      	movs	r2, #0
 8006842:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006844:	7bfa      	ldrb	r2, [r7, #15]
 8006846:	6879      	ldr	r1, [r7, #4]
 8006848:	4613      	mov	r3, r2
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	1a9b      	subs	r3, r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	3350      	adds	r3, #80	; 0x50
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	3301      	adds	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
 800685e:	7bfa      	ldrb	r2, [r7, #15]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d3af      	bcc.n	80067c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	73fb      	strb	r3, [r7, #15]
 800686c:	e044      	b.n	80068f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006880:	2200      	movs	r2, #0
 8006882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006884:	7bfa      	ldrb	r2, [r7, #15]
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	440b      	add	r3, r1
 8006892:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800689a:	7bfa      	ldrb	r2, [r7, #15]
 800689c:	6879      	ldr	r1, [r7, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	1a9b      	subs	r3, r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	440b      	add	r3, r1
 80068a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	6879      	ldr	r1, [r7, #4]
 80068b4:	4613      	mov	r3, r2
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	440b      	add	r3, r1
 80068be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068c6:	7bfa      	ldrb	r2, [r7, #15]
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	4613      	mov	r3, r2
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	440b      	add	r3, r1
 80068d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068dc:	7bfa      	ldrb	r2, [r7, #15]
 80068de:	6879      	ldr	r1, [r7, #4]
 80068e0:	4613      	mov	r3, r2
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	1a9b      	subs	r3, r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	3301      	adds	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d3b5      	bcc.n	800686e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	687e      	ldr	r6, [r7, #4]
 800690a:	466d      	mov	r5, sp
 800690c:	f106 0410 	add.w	r4, r6, #16
 8006910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006918:	e894 0003 	ldmia.w	r4, {r0, r1}
 800691c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006920:	1d33      	adds	r3, r6, #4
 8006922:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006924:	6838      	ldr	r0, [r7, #0]
 8006926:	f006 fc27 	bl	800d178 <USB_DevInit>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d005      	beq.n	800693c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e014      	b.n	8006966 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b01      	cmp	r3, #1
 8006952:	d102      	bne.n	800695a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f881 	bl	8007a5c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f007 fc76 	bl	800e250 <USB_DevDisconnect>

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800696e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_PCD_Start+0x16>
 8006980:	2302      	movs	r3, #2
 8006982:	e012      	b.n	80069aa <HAL_PCD_Start+0x3c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f007 fc45 	bl	800e220 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f006 fba0 	bl	800d0e0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80069b2:	b590      	push	{r4, r7, lr}
 80069b4:	b08d      	sub	sp, #52	; 0x34
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f007 fcec 	bl	800e3a6 <USB_GetMode>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 83ca 	bne.w	800716a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4618      	mov	r0, r3
 80069dc:	f007 fc50 	bl	800e280 <USB_ReadInterrupts>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f000 83c0 	beq.w	8007168 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f007 fc47 	bl	800e280 <USB_ReadInterrupts>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d107      	bne.n	8006a0c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695a      	ldr	r2, [r3, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f002 0202 	and.w	r2, r2, #2
 8006a0a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f007 fc35 	bl	800e280 <USB_ReadInterrupts>
 8006a16:	4603      	mov	r3, r0
 8006a18:	f003 0310 	and.w	r3, r3, #16
 8006a1c:	2b10      	cmp	r3, #16
 8006a1e:	d161      	bne.n	8006ae4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	699a      	ldr	r2, [r3, #24]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0210 	bic.w	r2, r2, #16
 8006a2e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	f003 020f 	and.w	r2, r3, #15
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	1a9b      	subs	r3, r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	0c5b      	lsrs	r3, r3, #17
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d124      	bne.n	8006aa6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006a5c:	69ba      	ldr	r2, [r7, #24]
 8006a5e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d035      	beq.n	8006ad4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	091b      	lsrs	r3, r3, #4
 8006a70:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	461a      	mov	r2, r3
 8006a7a:	6a38      	ldr	r0, [r7, #32]
 8006a7c:	f007 faad 	bl	800dfda <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	091b      	lsrs	r3, r3, #4
 8006a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8c:	441a      	add	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9e:	441a      	add	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	619a      	str	r2, [r3, #24]
 8006aa4:	e016      	b.n	8006ad4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	0c5b      	lsrs	r3, r3, #17
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	2b06      	cmp	r3, #6
 8006ab0:	d110      	bne.n	8006ad4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ab8:	2208      	movs	r2, #8
 8006aba:	4619      	mov	r1, r3
 8006abc:	6a38      	ldr	r0, [r7, #32]
 8006abe:	f007 fa8c 	bl	800dfda <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	091b      	lsrs	r3, r3, #4
 8006aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ace:	441a      	add	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f042 0210 	orr.w	r2, r2, #16
 8006ae2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f007 fbc9 	bl	800e280 <USB_ReadInterrupts>
 8006aee:	4603      	mov	r3, r0
 8006af0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006af4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006af8:	d16e      	bne.n	8006bd8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f007 fbcf 	bl	800e2a6 <USB_ReadDevAllOutEpInterrupt>
 8006b08:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006b0a:	e062      	b.n	8006bd2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d057      	beq.n	8006bc6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f007 fbf4 	bl	800e30e <USB_ReadDevOutEPInterrupt>
 8006b26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00c      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	461a      	mov	r2, r3
 8006b40:	2301      	movs	r3, #1
 8006b42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fdde 	bl	8007708 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00c      	beq.n	8006b70 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b62:	461a      	mov	r2, r3
 8006b64:	2308      	movs	r3, #8
 8006b66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fed8 	bl	8007920 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f003 0310 	and.w	r3, r3, #16
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b86:	461a      	mov	r2, r3
 8006b88:	2310      	movs	r3, #16
 8006b8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f003 0320 	and.w	r3, r3, #32
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d008      	beq.n	8006ba8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2320      	movs	r3, #32
 8006ba6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006bc4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	3301      	adds	r3, #1
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	085b      	lsrs	r3, r3, #1
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d199      	bne.n	8006b0c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f007 fb4f 	bl	800e280 <USB_ReadInterrupts>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006bec:	f040 80c0 	bne.w	8006d70 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f007 fb70 	bl	800e2da <USB_ReadDevAllInEpInterrupt>
 8006bfa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006c00:	e0b2      	b.n	8006d68 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 80a7 	beq.w	8006d5c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f007 fb96 	bl	800e34a <USB_ReadDevInEPInterrupt>
 8006c1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d057      	beq.n	8006cda <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	f003 030f 	and.w	r3, r3, #15
 8006c30:	2201      	movs	r2, #1
 8006c32:	fa02 f303 	lsl.w	r3, r2, r3
 8006c36:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	43db      	mvns	r3, r3
 8006c44:	69f9      	ldr	r1, [r7, #28]
 8006c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d132      	bne.n	8006cce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3348      	adds	r3, #72	; 0x48
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4403      	add	r3, r0
 8006c88:	3344      	adds	r3, #68	; 0x44
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4419      	add	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	4613      	mov	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4403      	add	r3, r0
 8006c9c:	3348      	adds	r3, #72	; 0x48
 8006c9e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d113      	bne.n	8006cce <HAL_PCD_IRQHandler+0x31c>
 8006ca6:	6879      	ldr	r1, [r7, #4]
 8006ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006caa:	4613      	mov	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	1a9b      	subs	r3, r3, r2
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	3350      	adds	r3, #80	; 0x50
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d108      	bne.n	8006cce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2101      	movs	r1, #1
 8006cca:	f007 fb9f 	bl	800e40c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f010 fc6c 	bl	80175b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d008      	beq.n	8006cf6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	015a      	lsls	r2, r3, #5
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4413      	add	r3, r2
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2310      	movs	r3, #16
 8006d10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d008      	beq.n	8006d2e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d28:	461a      	mov	r2, r3
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d008      	beq.n	8006d4a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d44:	461a      	mov	r2, r3
 8006d46:	2302      	movs	r3, #2
 8006d48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006d54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fc48 	bl	80075ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	3301      	adds	r3, #1
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f47f af49 	bne.w	8006c02 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4618      	mov	r0, r3
 8006d76:	f007 fa83 	bl	800e280 <USB_ReadInterrupts>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d84:	d122      	bne.n	8006dcc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d108      	bne.n	8006db6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006dac:	2100      	movs	r1, #0
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f010 fe4e 	bl	8017a50 <HAL_PCDEx_LPM_Callback>
 8006db4:	e002      	b.n	8006dbc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f010 fc72 	bl	80176a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	695a      	ldr	r2, [r3, #20]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f007 fa55 	bl	800e280 <USB_ReadInterrupts>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006de0:	d112      	bne.n	8006e08 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d102      	bne.n	8006df8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f010 fc2e 	bl	8017654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695a      	ldr	r2, [r3, #20]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006e06:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f007 fa37 	bl	800e280 <USB_ReadInterrupts>
 8006e12:	4603      	mov	r3, r0
 8006e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1c:	d121      	bne.n	8006e62 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	695a      	ldr	r2, [r3, #20]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006e2c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d111      	bne.n	8006e5c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e46:	089b      	lsrs	r3, r3, #2
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006e52:	2101      	movs	r1, #1
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f010 fdfb 	bl	8017a50 <HAL_PCDEx_LPM_Callback>
 8006e5a:	e002      	b.n	8006e62 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f010 fbf9 	bl	8017654 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f007 fa0a 	bl	800e280 <USB_ReadInterrupts>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e76:	f040 80c7 	bne.w	8007008 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2110      	movs	r1, #16
 8006e94:	4618      	mov	r0, r3
 8006e96:	f006 fadd 	bl	800d454 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	e056      	b.n	8006f4e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	461a      	mov	r2, r3
 8006eae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006eb2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec4:	0151      	lsls	r1, r2, #5
 8006ec6:	69fa      	ldr	r2, [r7, #28]
 8006ec8:	440a      	add	r2, r1
 8006eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ee4:	0151      	lsls	r1, r2, #5
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	440a      	add	r2, r1
 8006eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ef2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef6:	015a      	lsls	r2, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	4413      	add	r3, r2
 8006efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f00:	461a      	mov	r2, r3
 8006f02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f18:	0151      	lsls	r1, r2, #5
 8006f1a:	69fa      	ldr	r2, [r7, #28]
 8006f1c:	440a      	add	r2, r1
 8006f1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f38:	0151      	lsls	r1, r2, #5
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	440a      	add	r2, r1
 8006f3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d3a3      	bcc.n	8006ea0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	69fa      	ldr	r2, [r7, #28]
 8006f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006f6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d016      	beq.n	8006fa2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f84:	f043 030b 	orr.w	r3, r3, #11
 8006f88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f94:	69fa      	ldr	r2, [r7, #28]
 8006f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9a:	f043 030b 	orr.w	r3, r3, #11
 8006f9e:	6453      	str	r3, [r2, #68]	; 0x44
 8006fa0:	e015      	b.n	8006fce <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa8:	695a      	ldr	r2, [r3, #20]
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	f242 032b 	movw	r3, #8235	; 0x202b
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc8:	f043 030b 	orr.w	r3, r3, #11
 8006fcc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69fa      	ldr	r2, [r7, #28]
 8006fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fdc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fe0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	f007 fa0a 	bl	800e40c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	695a      	ldr	r2, [r3, #20]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007006:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f007 f937 	bl	800e280 <USB_ReadInterrupts>
 8007012:	4603      	mov	r3, r0
 8007014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007018:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800701c:	d124      	bne.n	8007068 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4618      	mov	r0, r3
 8007024:	f007 f9ce 	bl	800e3c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f006 fa72 	bl	800d516 <USB_GetDevSpeed>
 8007032:	4603      	mov	r3, r0
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681c      	ldr	r4, [r3, #0]
 800703e:	f001 f999 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 8007042:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	4620      	mov	r0, r4
 800704e:	f005 ffa5 	bl	800cf9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f010 fad5 	bl	8017602 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	695a      	ldr	r2, [r3, #20]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007066:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f007 f907 	bl	800e280 <USB_ReadInterrupts>
 8007072:	4603      	mov	r3, r0
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b08      	cmp	r3, #8
 800707a:	d10a      	bne.n	8007092 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f010 fab2 	bl	80175e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695a      	ldr	r2, [r3, #20]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f002 0208 	and.w	r2, r2, #8
 8007090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f007 f8f2 	bl	800e280 <USB_ReadInterrupts>
 800709c:	4603      	mov	r3, r0
 800709e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d10f      	bne.n	80070c8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f010 fb14 	bl	80176e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695a      	ldr	r2, [r3, #20]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80070c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f007 f8d7 	bl	800e280 <USB_ReadInterrupts>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070dc:	d10f      	bne.n	80070fe <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80070e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f010 fae7 	bl	80176bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	695a      	ldr	r2, [r3, #20]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f007 f8bc 	bl	800e280 <USB_ReadInterrupts>
 8007108:	4603      	mov	r3, r0
 800710a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d10a      	bne.n	800712a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f010 faf5 	bl	8017704 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695a      	ldr	r2, [r3, #20]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f007 f8a6 	bl	800e280 <USB_ReadInterrupts>
 8007134:	4603      	mov	r3, r0
 8007136:	f003 0304 	and.w	r3, r3, #4
 800713a:	2b04      	cmp	r3, #4
 800713c:	d115      	bne.n	800716a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d002      	beq.n	8007156 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f010 fae5 	bl	8017720 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	6859      	ldr	r1, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	e000      	b.n	800716a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007168:	bf00      	nop
    }
  }
}
 800716a:	3734      	adds	r7, #52	; 0x34
 800716c:	46bd      	mov	sp, r7
 800716e:	bd90      	pop	{r4, r7, pc}

08007170 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_PCD_SetAddress+0x1a>
 8007186:	2302      	movs	r3, #2
 8007188:	e013      	b.n	80071b2 <HAL_PCD_SetAddress+0x42>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	78fa      	ldrb	r2, [r7, #3]
 8007196:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	78fa      	ldrb	r2, [r7, #3]
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f007 f816 	bl	800e1d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3708      	adds	r7, #8
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	461a      	mov	r2, r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	70fb      	strb	r3, [r7, #3]
 80071cc:	460b      	mov	r3, r1
 80071ce:	803b      	strh	r3, [r7, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da0f      	bge.n	8007200 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	f003 020f 	and.w	r2, r3, #15
 80071e6:	4613      	mov	r3, r2
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	3338      	adds	r3, #56	; 0x38
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	3304      	adds	r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	705a      	strb	r2, [r3, #1]
 80071fe:	e00f      	b.n	8007220 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007200:	78fb      	ldrb	r3, [r7, #3]
 8007202:	f003 020f 	and.w	r2, r3, #15
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	3304      	adds	r3, #4
 8007218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007220:	78fb      	ldrb	r3, [r7, #3]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	b2da      	uxtb	r2, r3
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800722c:	883a      	ldrh	r2, [r7, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	78ba      	ldrb	r2, [r7, #2]
 8007236:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d004      	beq.n	800724a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800724a:	78bb      	ldrb	r3, [r7, #2]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d102      	bne.n	8007256 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800725c:	2b01      	cmp	r3, #1
 800725e:	d101      	bne.n	8007264 <HAL_PCD_EP_Open+0xaa>
 8007260:	2302      	movs	r3, #2
 8007262:	e00e      	b.n	8007282 <HAL_PCD_EP_Open+0xc8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68f9      	ldr	r1, [r7, #12]
 8007272:	4618      	mov	r0, r3
 8007274:	f006 f974 	bl	800d560 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007280:	7afb      	ldrb	r3, [r7, #11]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800729a:	2b00      	cmp	r3, #0
 800729c:	da0f      	bge.n	80072be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	4613      	mov	r3, r2
 80072a6:	00db      	lsls	r3, r3, #3
 80072a8:	1a9b      	subs	r3, r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	3338      	adds	r3, #56	; 0x38
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	4413      	add	r3, r2
 80072b2:	3304      	adds	r3, #4
 80072b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	705a      	strb	r2, [r3, #1]
 80072bc:	e00f      	b.n	80072de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	1a9b      	subs	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4413      	add	r3, r2
 80072d4:	3304      	adds	r3, #4
 80072d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80072de:	78fb      	ldrb	r3, [r7, #3]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_PCD_EP_Close+0x6e>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e00e      	b.n	8007316 <HAL_PCD_EP_Close+0x8c>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	4618      	mov	r0, r3
 8007308:	f006 f9b2 	bl	800d670 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
 800732a:	460b      	mov	r3, r1
 800732c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800732e:	7afb      	ldrb	r3, [r7, #11]
 8007330:	f003 020f 	and.w	r2, r3, #15
 8007334:	4613      	mov	r3, r2
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	009b      	lsls	r3, r3, #2
 800733c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	3304      	adds	r3, #4
 8007346:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	2200      	movs	r2, #0
 8007358:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007360:	7afb      	ldrb	r3, [r7, #11]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	b2da      	uxtb	r2, r3
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d102      	bne.n	800737a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	f003 030f 	and.w	r3, r3, #15
 8007380:	2b00      	cmp	r3, #0
 8007382:	d109      	bne.n	8007398 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6818      	ldr	r0, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	461a      	mov	r2, r3
 8007390:	6979      	ldr	r1, [r7, #20]
 8007392:	f006 fc95 	bl	800dcc0 <USB_EP0StartXfer>
 8007396:	e008      	b.n	80073aa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	6979      	ldr	r1, [r7, #20]
 80073a6:	f006 fa3f 	bl	800d828 <USB_EPStartXfer>
  }

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	1a9b      	subs	r3, r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80073d6:	681b      	ldr	r3, [r3, #0]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	370c      	adds	r7, #12
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	460b      	mov	r3, r1
 80073f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	f003 020f 	and.w	r2, r3, #15
 80073fa:	4613      	mov	r3, r2
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	1a9b      	subs	r3, r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	3338      	adds	r3, #56	; 0x38
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4413      	add	r3, r2
 8007408:	3304      	adds	r3, #4
 800740a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2200      	movs	r2, #0
 800741c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2201      	movs	r2, #1
 8007422:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	f003 030f 	and.w	r3, r3, #15
 800742a:	b2da      	uxtb	r2, r3
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d102      	bne.n	800743e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800743e:	7afb      	ldrb	r3, [r7, #11]
 8007440:	f003 030f 	and.w	r3, r3, #15
 8007444:	2b00      	cmp	r3, #0
 8007446:	d109      	bne.n	800745c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6818      	ldr	r0, [r3, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	461a      	mov	r2, r3
 8007454:	6979      	ldr	r1, [r7, #20]
 8007456:	f006 fc33 	bl	800dcc0 <USB_EP0StartXfer>
 800745a:	e008      	b.n	800746e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
 8007468:	6979      	ldr	r1, [r7, #20]
 800746a:	f006 f9dd 	bl	800d828 <USB_EPStartXfer>
  }

  return HAL_OK;
 800746e:	2300      	movs	r3, #0
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	f003 020f 	and.w	r2, r3, #15
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	429a      	cmp	r2, r3
 8007490:	d901      	bls.n	8007496 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e050      	b.n	8007538 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da0f      	bge.n	80074be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 020f 	and.w	r2, r3, #15
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	3338      	adds	r3, #56	; 0x38
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	3304      	adds	r3, #4
 80074b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2201      	movs	r2, #1
 80074ba:	705a      	strb	r2, [r3, #1]
 80074bc:	e00d      	b.n	80074da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	4613      	mov	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	4413      	add	r3, r2
 80074d0:	3304      	adds	r3, #4
 80074d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2201      	movs	r2, #1
 80074de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d101      	bne.n	80074fa <HAL_PCD_EP_SetStall+0x82>
 80074f6:	2302      	movs	r3, #2
 80074f8:	e01e      	b.n	8007538 <HAL_PCD_EP_SetStall+0xc0>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	4618      	mov	r0, r3
 800750a:	f006 fd8f 	bl	800e02c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800750e:	78fb      	ldrb	r3, [r7, #3]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	b2d9      	uxtb	r1, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007528:	461a      	mov	r2, r3
 800752a:	f006 ff6f 	bl	800e40c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	f003 020f 	and.w	r2, r3, #15
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d901      	bls.n	800755e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e042      	b.n	80075e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800755e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007562:	2b00      	cmp	r3, #0
 8007564:	da0f      	bge.n	8007586 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007566:	78fb      	ldrb	r3, [r7, #3]
 8007568:	f003 020f 	and.w	r2, r3, #15
 800756c:	4613      	mov	r3, r2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3338      	adds	r3, #56	; 0x38
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	4413      	add	r3, r2
 800757a:	3304      	adds	r3, #4
 800757c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2201      	movs	r2, #1
 8007582:	705a      	strb	r2, [r3, #1]
 8007584:	e00f      	b.n	80075a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007586:	78fb      	ldrb	r3, [r7, #3]
 8007588:	f003 020f 	and.w	r2, r3, #15
 800758c:	4613      	mov	r3, r2
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	1a9b      	subs	r3, r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	4413      	add	r3, r2
 800759c:	3304      	adds	r3, #4
 800759e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	f003 030f 	and.w	r3, r3, #15
 80075b2:	b2da      	uxtb	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d101      	bne.n	80075c6 <HAL_PCD_EP_ClrStall+0x86>
 80075c2:	2302      	movs	r3, #2
 80075c4:	e00e      	b.n	80075e4 <HAL_PCD_EP_ClrStall+0xa4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68f9      	ldr	r1, [r7, #12]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f006 fd97 	bl	800e108 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	1a9b      	subs	r3, r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	3338      	adds	r3, #56	; 0x38
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4413      	add	r3, r2
 8007610:	3304      	adds	r3, #4
 8007612:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	d901      	bls.n	8007624 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	e06c      	b.n	80076fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	695a      	ldr	r2, [r3, #20]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	429a      	cmp	r2, r3
 8007638:	d902      	bls.n	8007640 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	3303      	adds	r3, #3
 8007644:	089b      	lsrs	r3, r3, #2
 8007646:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007648:	e02b      	b.n	80076a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d902      	bls.n	8007666 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3303      	adds	r3, #3
 800766a:	089b      	lsrs	r3, r3, #2
 800766c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68d9      	ldr	r1, [r3, #12]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	b2da      	uxtb	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800767e:	b2db      	uxtb	r3, r3
 8007680:	9300      	str	r3, [sp, #0]
 8007682:	4603      	mov	r3, r0
 8007684:	6978      	ldr	r0, [r7, #20]
 8007686:	f006 fc73 	bl	800df70 <USB_WritePacket>

    ep->xfer_buff  += len;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68da      	ldr	r2, [r3, #12]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	441a      	add	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	441a      	add	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	015a      	lsls	r2, r3, #5
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	4413      	add	r3, r2
 80076aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ae:	699b      	ldr	r3, [r3, #24]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d809      	bhi.n	80076cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	699a      	ldr	r2, [r3, #24]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d203      	bcs.n	80076cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1be      	bne.n	800764a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	695a      	ldr	r2, [r3, #20]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d811      	bhi.n	80076fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	2201      	movs	r2, #1
 80076e0:	fa02 f303 	lsl.w	r3, r2, r3
 80076e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	6939      	ldr	r1, [r7, #16]
 80076f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076f8:	4013      	ands	r3, r2
 80076fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3720      	adds	r7, #32
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	333c      	adds	r3, #60	; 0x3c
 8007720:	3304      	adds	r3, #4
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	2b01      	cmp	r3, #1
 800773c:	f040 80a0 	bne.w	8007880 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d015      	beq.n	8007776 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a72      	ldr	r2, [pc, #456]	; (8007918 <PCD_EP_OutXfrComplete_int+0x210>)
 800774e:	4293      	cmp	r3, r2
 8007750:	f240 80dd 	bls.w	800790e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80d7 	beq.w	800790e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	461a      	mov	r2, r3
 800776e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007772:	6093      	str	r3, [r2, #8]
 8007774:	e0cb      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f003 0320 	and.w	r3, r3, #32
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	461a      	mov	r2, r3
 800778e:	2320      	movs	r3, #32
 8007790:	6093      	str	r3, [r2, #8]
 8007792:	e0bc      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 80b7 	bne.w	800790e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4a5d      	ldr	r2, [pc, #372]	; (8007918 <PCD_EP_OutXfrComplete_int+0x210>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d90f      	bls.n	80077c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	461a      	mov	r2, r3
 80077c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c4:	6093      	str	r3, [r2, #8]
 80077c6:	e0a2      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	1a9b      	subs	r3, r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80077da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	0159      	lsls	r1, r3, #5
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	440b      	add	r3, r1
 80077e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80077ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	4613      	mov	r3, r2
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4403      	add	r3, r0
 80077fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007802:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	4613      	mov	r3, r2
 800780a:	00db      	lsls	r3, r3, #3
 800780c:	1a9b      	subs	r3, r3, r2
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	440b      	add	r3, r1
 8007812:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007816:	6819      	ldr	r1, [r3, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4403      	add	r3, r0
 8007826:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4419      	add	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	4613      	mov	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	1a9b      	subs	r3, r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4403      	add	r3, r0
 800783c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007840:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d114      	bne.n	8007872 <PCD_EP_OutXfrComplete_int+0x16a>
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	00db      	lsls	r3, r3, #3
 8007850:	1a9b      	subs	r3, r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d108      	bne.n	8007872 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6818      	ldr	r0, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800786a:	461a      	mov	r2, r3
 800786c:	2101      	movs	r1, #1
 800786e:	f006 fdcd 	bl	800e40c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f00f fe7f 	bl	801757c <HAL_PCD_DataOutStageCallback>
 800787e:	e046      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4a26      	ldr	r2, [pc, #152]	; (800791c <PCD_EP_OutXfrComplete_int+0x214>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d124      	bne.n	80078d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789e:	461a      	mov	r2, r3
 80078a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078a4:	6093      	str	r3, [r2, #8]
 80078a6:	e032      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078be:	461a      	mov	r2, r3
 80078c0:	2320      	movs	r3, #32
 80078c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f00f fe56 	bl	801757c <HAL_PCD_DataOutStageCallback>
 80078d0:	e01d      	b.n	800790e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d114      	bne.n	8007902 <PCD_EP_OutXfrComplete_int+0x1fa>
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	4613      	mov	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d108      	bne.n	8007902 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078fa:	461a      	mov	r2, r3
 80078fc:	2100      	movs	r1, #0
 80078fe:	f006 fd85 	bl	800e40c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	b2db      	uxtb	r3, r3
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f00f fe37 	bl	801757c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	4f54300a 	.word	0x4f54300a
 800791c:	4f54310a 	.word	0x4f54310a

08007920 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	333c      	adds	r3, #60	; 0x3c
 8007938:	3304      	adds	r3, #4
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4a15      	ldr	r2, [pc, #84]	; (80079a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d90e      	bls.n	8007974 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	461a      	mov	r2, r3
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f00f fdef 	bl	8017558 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a0a      	ldr	r2, [pc, #40]	; (80079a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d90c      	bls.n	800799c <PCD_EP_OutSetupPacket_int+0x7c>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d108      	bne.n	800799c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007994:	461a      	mov	r2, r3
 8007996:	2101      	movs	r1, #1
 8007998:	f006 fd38 	bl	800e40c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	4f54300a 	.word	0x4f54300a

080079ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	460b      	mov	r3, r1
 80079b6:	70fb      	strb	r3, [r7, #3]
 80079b8:	4613      	mov	r3, r2
 80079ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d107      	bne.n	80079da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80079ca:	883b      	ldrh	r3, [r7, #0]
 80079cc:	0419      	lsls	r1, r3, #16
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	629a      	str	r2, [r3, #40]	; 0x28
 80079d8:	e028      	b.n	8007a2c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e0:	0c1b      	lsrs	r3, r3, #16
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
 80079ec:	e00d      	b.n	8007a0a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	3340      	adds	r3, #64	; 0x40
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4413      	add	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	3301      	adds	r3, #1
 8007a08:	73fb      	strb	r3, [r7, #15]
 8007a0a:	7bfa      	ldrb	r2, [r7, #15]
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d3ec      	bcc.n	80079ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a14:	883b      	ldrh	r3, [r7, #0]
 8007a16:	0418      	lsls	r0, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6819      	ldr	r1, [r3, #0]
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	4302      	orrs	r2, r0
 8007a24:	3340      	adds	r3, #64	; 0x40
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	887a      	ldrh	r2, [r7, #2]
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a8a:	4b05      	ldr	r3, [pc, #20]	; (8007aa0 <HAL_PCDEx_ActivateLPM+0x44>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	10000003 	.word	0x10000003

08007aa4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007aac:	2300      	movs	r3, #0
 8007aae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e291      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 8087 	beq.w	8007bd6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007ac8:	4b96      	ldr	r3, [pc, #600]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d00c      	beq.n	8007aee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ad4:	4b93      	ldr	r3, [pc, #588]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 030c 	and.w	r3, r3, #12
 8007adc:	2b08      	cmp	r3, #8
 8007ade:	d112      	bne.n	8007b06 <HAL_RCC_OscConfig+0x62>
 8007ae0:	4b90      	ldr	r3, [pc, #576]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aec:	d10b      	bne.n	8007b06 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aee:	4b8d      	ldr	r3, [pc, #564]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d06c      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x130>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d168      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e26b      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0e:	d106      	bne.n	8007b1e <HAL_RCC_OscConfig+0x7a>
 8007b10:	4b84      	ldr	r3, [pc, #528]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a83      	ldr	r2, [pc, #524]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e02e      	b.n	8007b7c <HAL_RCC_OscConfig+0xd8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10c      	bne.n	8007b40 <HAL_RCC_OscConfig+0x9c>
 8007b26:	4b7f      	ldr	r3, [pc, #508]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a7e      	ldr	r2, [pc, #504]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	4b7c      	ldr	r3, [pc, #496]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a7b      	ldr	r2, [pc, #492]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b3c:	6013      	str	r3, [r2, #0]
 8007b3e:	e01d      	b.n	8007b7c <HAL_RCC_OscConfig+0xd8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b48:	d10c      	bne.n	8007b64 <HAL_RCC_OscConfig+0xc0>
 8007b4a:	4b76      	ldr	r3, [pc, #472]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a75      	ldr	r2, [pc, #468]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b54:	6013      	str	r3, [r2, #0]
 8007b56:	4b73      	ldr	r3, [pc, #460]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a72      	ldr	r2, [pc, #456]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b60:	6013      	str	r3, [r2, #0]
 8007b62:	e00b      	b.n	8007b7c <HAL_RCC_OscConfig+0xd8>
 8007b64:	4b6f      	ldr	r3, [pc, #444]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a6e      	ldr	r2, [pc, #440]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	4b6c      	ldr	r3, [pc, #432]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a6b      	ldr	r2, [pc, #428]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d013      	beq.n	8007bac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fd ff3e 	bl	8005a04 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7fd ff3a 	bl	8005a04 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e21f      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b9e:	4b61      	ldr	r3, [pc, #388]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f0      	beq.n	8007b8c <HAL_RCC_OscConfig+0xe8>
 8007baa:	e014      	b.n	8007bd6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fd ff2a 	bl	8005a04 <HAL_GetTick>
 8007bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bb2:	e008      	b.n	8007bc6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb4:	f7fd ff26 	bl	8005a04 <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	2b64      	cmp	r3, #100	; 0x64
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e20b      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007bc6:	4b57      	ldr	r3, [pc, #348]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1f0      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x110>
 8007bd2:	e000      	b.n	8007bd6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d069      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007be2:	4b50      	ldr	r3, [pc, #320]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 030c 	and.w	r3, r3, #12
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bee:	4b4d      	ldr	r3, [pc, #308]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f003 030c 	and.w	r3, r3, #12
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d11c      	bne.n	8007c34 <HAL_RCC_OscConfig+0x190>
 8007bfa:	4b4a      	ldr	r3, [pc, #296]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d116      	bne.n	8007c34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c06:	4b47      	ldr	r3, [pc, #284]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_RCC_OscConfig+0x17a>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d001      	beq.n	8007c1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e1df      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1e:	4b41      	ldr	r3, [pc, #260]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	493d      	ldr	r1, [pc, #244]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c32:	e040      	b.n	8007cb6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d023      	beq.n	8007c84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c3c:	4b39      	ldr	r3, [pc, #228]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a38      	ldr	r2, [pc, #224]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fd fedc 	bl	8005a04 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c50:	f7fd fed8 	bl	8005a04 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1bd      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c62:	4b30      	ldr	r3, [pc, #192]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f0      	beq.n	8007c50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	4929      	ldr	r1, [pc, #164]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	600b      	str	r3, [r1, #0]
 8007c82:	e018      	b.n	8007cb6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c84:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a26      	ldr	r2, [pc, #152]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007c8a:	f023 0301 	bic.w	r3, r3, #1
 8007c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c90:	f7fd feb8 	bl	8005a04 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c98:	f7fd feb4 	bl	8005a04 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e199      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007caa:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f0      	bne.n	8007c98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d038      	beq.n	8007d34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d019      	beq.n	8007cfe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cca:	4b16      	ldr	r3, [pc, #88]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cce:	4a15      	ldr	r2, [pc, #84]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	f043 0301 	orr.w	r3, r3, #1
 8007cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd6:	f7fd fe95 	bl	8005a04 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cdc:	e008      	b.n	8007cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cde:	f7fd fe91 	bl	8005a04 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d901      	bls.n	8007cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cec:	2303      	movs	r3, #3
 8007cee:	e176      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf4:	f003 0302 	and.w	r3, r3, #2
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d0f0      	beq.n	8007cde <HAL_RCC_OscConfig+0x23a>
 8007cfc:	e01a      	b.n	8007d34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cfe:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d02:	4a08      	ldr	r2, [pc, #32]	; (8007d24 <HAL_RCC_OscConfig+0x280>)
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0a:	f7fd fe7b 	bl	8005a04 <HAL_GetTick>
 8007d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d10:	e00a      	b.n	8007d28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d12:	f7fd fe77 	bl	8005a04 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d903      	bls.n	8007d28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e15c      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
 8007d24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d28:	4b91      	ldr	r3, [pc, #580]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d2c:	f003 0302 	and.w	r3, r3, #2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1ee      	bne.n	8007d12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 80a4 	beq.w	8007e8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d42:	4b8b      	ldr	r3, [pc, #556]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10d      	bne.n	8007d6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d4e:	4b88      	ldr	r3, [pc, #544]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	4a87      	ldr	r2, [pc, #540]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d58:	6413      	str	r3, [r2, #64]	; 0x40
 8007d5a:	4b85      	ldr	r3, [pc, #532]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d62:	60bb      	str	r3, [r7, #8]
 8007d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d6a:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <HAL_RCC_OscConfig+0x4d0>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d118      	bne.n	8007da8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d76:	4b7f      	ldr	r3, [pc, #508]	; (8007f74 <HAL_RCC_OscConfig+0x4d0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7e      	ldr	r2, [pc, #504]	; (8007f74 <HAL_RCC_OscConfig+0x4d0>)
 8007d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d82:	f7fd fe3f 	bl	8005a04 <HAL_GetTick>
 8007d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d88:	e008      	b.n	8007d9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d8a:	f7fd fe3b 	bl	8005a04 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b64      	cmp	r3, #100	; 0x64
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e120      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d9c:	4b75      	ldr	r3, [pc, #468]	; (8007f74 <HAL_RCC_OscConfig+0x4d0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d0f0      	beq.n	8007d8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d106      	bne.n	8007dbe <HAL_RCC_OscConfig+0x31a>
 8007db0:	4b6f      	ldr	r3, [pc, #444]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	4a6e      	ldr	r2, [pc, #440]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007db6:	f043 0301 	orr.w	r3, r3, #1
 8007dba:	6713      	str	r3, [r2, #112]	; 0x70
 8007dbc:	e02d      	b.n	8007e1a <HAL_RCC_OscConfig+0x376>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <HAL_RCC_OscConfig+0x33c>
 8007dc6:	4b6a      	ldr	r3, [pc, #424]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dca:	4a69      	ldr	r2, [pc, #420]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd2:	4b67      	ldr	r3, [pc, #412]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a66      	ldr	r2, [pc, #408]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dd8:	f023 0304 	bic.w	r3, r3, #4
 8007ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dde:	e01c      	b.n	8007e1a <HAL_RCC_OscConfig+0x376>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b05      	cmp	r3, #5
 8007de6:	d10c      	bne.n	8007e02 <HAL_RCC_OscConfig+0x35e>
 8007de8:	4b61      	ldr	r3, [pc, #388]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dec:	4a60      	ldr	r2, [pc, #384]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6713      	str	r3, [r2, #112]	; 0x70
 8007df4:	4b5e      	ldr	r3, [pc, #376]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df8:	4a5d      	ldr	r2, [pc, #372]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007dfa:	f043 0301 	orr.w	r3, r3, #1
 8007dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007e00:	e00b      	b.n	8007e1a <HAL_RCC_OscConfig+0x376>
 8007e02:	4b5b      	ldr	r3, [pc, #364]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e06:	4a5a      	ldr	r2, [pc, #360]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e08:	f023 0301 	bic.w	r3, r3, #1
 8007e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8007e0e:	4b58      	ldr	r3, [pc, #352]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	4a57      	ldr	r2, [pc, #348]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e14:	f023 0304 	bic.w	r3, r3, #4
 8007e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d015      	beq.n	8007e4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e22:	f7fd fdef 	bl	8005a04 <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e28:	e00a      	b.n	8007e40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2a:	f7fd fdeb 	bl	8005a04 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e0ce      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e40:	4b4b      	ldr	r3, [pc, #300]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e44:	f003 0302 	and.w	r3, r3, #2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0ee      	beq.n	8007e2a <HAL_RCC_OscConfig+0x386>
 8007e4c:	e014      	b.n	8007e78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4e:	f7fd fdd9 	bl	8005a04 <HAL_GetTick>
 8007e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e54:	e00a      	b.n	8007e6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e56:	f7fd fdd5 	bl	8005a04 <HAL_GetTick>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e0b8      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e6c:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1ee      	bne.n	8007e56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d105      	bne.n	8007e8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e7e:	4b3c      	ldr	r3, [pc, #240]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e82:	4a3b      	ldr	r2, [pc, #236]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80a4 	beq.w	8007fdc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e94:	4b36      	ldr	r3, [pc, #216]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 030c 	and.w	r3, r3, #12
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d06b      	beq.n	8007f78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d149      	bne.n	8007f3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea8:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a30      	ldr	r2, [pc, #192]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fd fda6 	bl	8005a04 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ebc:	f7fd fda2 	bl	8005a04 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e087      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ece:	4b28      	ldr	r3, [pc, #160]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	69da      	ldr	r2, [r3, #28]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee8:	019b      	lsls	r3, r3, #6
 8007eea:	431a      	orrs	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	085b      	lsrs	r3, r3, #1
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	041b      	lsls	r3, r3, #16
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	061b      	lsls	r3, r3, #24
 8007efe:	4313      	orrs	r3, r2
 8007f00:	4a1b      	ldr	r2, [pc, #108]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f08:	4b19      	ldr	r3, [pc, #100]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f14:	f7fd fd76 	bl	8005a04 <HAL_GetTick>
 8007f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f1a:	e008      	b.n	8007f2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1c:	f7fd fd72 	bl	8005a04 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e057      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f2e:	4b10      	ldr	r3, [pc, #64]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0f0      	beq.n	8007f1c <HAL_RCC_OscConfig+0x478>
 8007f3a:	e04f      	b.n	8007fdc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a0b      	ldr	r2, [pc, #44]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f48:	f7fd fd5c 	bl	8005a04 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fd fd58 	bl	8005a04 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e03d      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f62:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <HAL_RCC_OscConfig+0x4cc>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1f0      	bne.n	8007f50 <HAL_RCC_OscConfig+0x4ac>
 8007f6e:	e035      	b.n	8007fdc <HAL_RCC_OscConfig+0x538>
 8007f70:	40023800 	.word	0x40023800
 8007f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f78:	4b1b      	ldr	r3, [pc, #108]	; (8007fe8 <HAL_RCC_OscConfig+0x544>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d028      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d121      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d11a      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007fa8:	4013      	ands	r3, r2
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d111      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d107      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d001      	beq.n	8007fdc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e000      	b.n	8007fde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800

08007fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0d0      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008004:	4b6a      	ldr	r3, [pc, #424]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 030f 	and.w	r3, r3, #15
 800800c:	683a      	ldr	r2, [r7, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d910      	bls.n	8008034 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008012:	4b67      	ldr	r3, [pc, #412]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f023 020f 	bic.w	r2, r3, #15
 800801a:	4965      	ldr	r1, [pc, #404]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	4313      	orrs	r3, r2
 8008020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008022:	4b63      	ldr	r3, [pc, #396]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f003 030f 	and.w	r3, r3, #15
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d001      	beq.n	8008034 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e0b8      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d020      	beq.n	8008082 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800804c:	4b59      	ldr	r3, [pc, #356]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	4a58      	ldr	r2, [pc, #352]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008056:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0308 	and.w	r3, r3, #8
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008064:	4b53      	ldr	r3, [pc, #332]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a52      	ldr	r2, [pc, #328]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800806a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800806e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008070:	4b50      	ldr	r3, [pc, #320]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	494d      	ldr	r1, [pc, #308]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	d040      	beq.n	8008110 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d107      	bne.n	80080a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008096:	4b47      	ldr	r3, [pc, #284]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d115      	bne.n	80080ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e07f      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d107      	bne.n	80080be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ae:	4b41      	ldr	r3, [pc, #260]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e073      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080be:	4b3d      	ldr	r3, [pc, #244]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e06b      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ce:	4b39      	ldr	r3, [pc, #228]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f023 0203 	bic.w	r2, r3, #3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	4936      	ldr	r1, [pc, #216]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080e0:	f7fd fc90 	bl	8005a04 <HAL_GetTick>
 80080e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e6:	e00a      	b.n	80080fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080e8:	f7fd fc8c 	bl	8005a04 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e053      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080fe:	4b2d      	ldr	r3, [pc, #180]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f003 020c 	and.w	r2, r3, #12
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	429a      	cmp	r2, r3
 800810e:	d1eb      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008110:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d210      	bcs.n	8008140 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800811e:	4b24      	ldr	r3, [pc, #144]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f023 020f 	bic.w	r2, r3, #15
 8008126:	4922      	ldr	r1, [pc, #136]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	4313      	orrs	r3, r2
 800812c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800812e:	4b20      	ldr	r3, [pc, #128]	; (80081b0 <HAL_RCC_ClockConfig+0x1c4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d001      	beq.n	8008140 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e032      	b.n	80081a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0304 	and.w	r3, r3, #4
 8008148:	2b00      	cmp	r3, #0
 800814a:	d008      	beq.n	800815e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800814c:	4b19      	ldr	r3, [pc, #100]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	4916      	ldr	r1, [pc, #88]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800815a:	4313      	orrs	r3, r2
 800815c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800816a:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	00db      	lsls	r3, r3, #3
 8008178:	490e      	ldr	r1, [pc, #56]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 800817a:	4313      	orrs	r3, r2
 800817c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800817e:	f000 f821 	bl	80081c4 <HAL_RCC_GetSysClockFreq>
 8008182:	4601      	mov	r1, r0
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_RCC_ClockConfig+0x1c8>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	091b      	lsrs	r3, r3, #4
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	4a0a      	ldr	r2, [pc, #40]	; (80081b8 <HAL_RCC_ClockConfig+0x1cc>)
 8008190:	5cd3      	ldrb	r3, [r2, r3]
 8008192:	fa21 f303 	lsr.w	r3, r1, r3
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <HAL_RCC_ClockConfig+0x1d0>)
 8008198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800819a:	4b09      	ldr	r3, [pc, #36]	; (80081c0 <HAL_RCC_ClockConfig+0x1d4>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f7fc fb90 	bl	80048c4 <HAL_InitTick>

  return HAL_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023c00 	.word	0x40023c00
 80081b4:	40023800 	.word	0x40023800
 80081b8:	0801ac54 	.word	0x0801ac54
 80081bc:	20000000 	.word	0x20000000
 80081c0:	20000004 	.word	0x20000004

080081c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80081ca:	2300      	movs	r3, #0
 80081cc:	607b      	str	r3, [r7, #4]
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	2300      	movs	r3, #0
 80081d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081da:	4b63      	ldr	r3, [pc, #396]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 030c 	and.w	r3, r3, #12
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d007      	beq.n	80081f6 <HAL_RCC_GetSysClockFreq+0x32>
 80081e6:	2b08      	cmp	r3, #8
 80081e8:	d008      	beq.n	80081fc <HAL_RCC_GetSysClockFreq+0x38>
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f040 80b4 	bne.w	8008358 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081f0:	4b5e      	ldr	r3, [pc, #376]	; (800836c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80081f2:	60bb      	str	r3, [r7, #8]
      break;
 80081f4:	e0b3      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081f6:	4b5e      	ldr	r3, [pc, #376]	; (8008370 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80081f8:	60bb      	str	r3, [r7, #8]
      break;
 80081fa:	e0b0      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081fc:	4b5a      	ldr	r3, [pc, #360]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008204:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008206:	4b58      	ldr	r3, [pc, #352]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d04a      	beq.n	80082a8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008212:	4b55      	ldr	r3, [pc, #340]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	099b      	lsrs	r3, r3, #6
 8008218:	f04f 0400 	mov.w	r4, #0
 800821c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	ea03 0501 	and.w	r5, r3, r1
 8008228:	ea04 0602 	and.w	r6, r4, r2
 800822c:	4629      	mov	r1, r5
 800822e:	4632      	mov	r2, r6
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	f04f 0400 	mov.w	r4, #0
 8008238:	0154      	lsls	r4, r2, #5
 800823a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800823e:	014b      	lsls	r3, r1, #5
 8008240:	4619      	mov	r1, r3
 8008242:	4622      	mov	r2, r4
 8008244:	1b49      	subs	r1, r1, r5
 8008246:	eb62 0206 	sbc.w	r2, r2, r6
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	f04f 0400 	mov.w	r4, #0
 8008252:	0194      	lsls	r4, r2, #6
 8008254:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008258:	018b      	lsls	r3, r1, #6
 800825a:	1a5b      	subs	r3, r3, r1
 800825c:	eb64 0402 	sbc.w	r4, r4, r2
 8008260:	f04f 0100 	mov.w	r1, #0
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	00e2      	lsls	r2, r4, #3
 800826a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800826e:	00d9      	lsls	r1, r3, #3
 8008270:	460b      	mov	r3, r1
 8008272:	4614      	mov	r4, r2
 8008274:	195b      	adds	r3, r3, r5
 8008276:	eb44 0406 	adc.w	r4, r4, r6
 800827a:	f04f 0100 	mov.w	r1, #0
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	0262      	lsls	r2, r4, #9
 8008284:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008288:	0259      	lsls	r1, r3, #9
 800828a:	460b      	mov	r3, r1
 800828c:	4614      	mov	r4, r2
 800828e:	4618      	mov	r0, r3
 8008290:	4621      	mov	r1, r4
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f04f 0400 	mov.w	r4, #0
 8008298:	461a      	mov	r2, r3
 800829a:	4623      	mov	r3, r4
 800829c:	f7f8 fccc 	bl	8000c38 <__aeabi_uldivmod>
 80082a0:	4603      	mov	r3, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	60fb      	str	r3, [r7, #12]
 80082a6:	e049      	b.n	800833c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082a8:	4b2f      	ldr	r3, [pc, #188]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	099b      	lsrs	r3, r3, #6
 80082ae:	f04f 0400 	mov.w	r4, #0
 80082b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80082b6:	f04f 0200 	mov.w	r2, #0
 80082ba:	ea03 0501 	and.w	r5, r3, r1
 80082be:	ea04 0602 	and.w	r6, r4, r2
 80082c2:	4629      	mov	r1, r5
 80082c4:	4632      	mov	r2, r6
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	f04f 0400 	mov.w	r4, #0
 80082ce:	0154      	lsls	r4, r2, #5
 80082d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80082d4:	014b      	lsls	r3, r1, #5
 80082d6:	4619      	mov	r1, r3
 80082d8:	4622      	mov	r2, r4
 80082da:	1b49      	subs	r1, r1, r5
 80082dc:	eb62 0206 	sbc.w	r2, r2, r6
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	f04f 0400 	mov.w	r4, #0
 80082e8:	0194      	lsls	r4, r2, #6
 80082ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80082ee:	018b      	lsls	r3, r1, #6
 80082f0:	1a5b      	subs	r3, r3, r1
 80082f2:	eb64 0402 	sbc.w	r4, r4, r2
 80082f6:	f04f 0100 	mov.w	r1, #0
 80082fa:	f04f 0200 	mov.w	r2, #0
 80082fe:	00e2      	lsls	r2, r4, #3
 8008300:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008304:	00d9      	lsls	r1, r3, #3
 8008306:	460b      	mov	r3, r1
 8008308:	4614      	mov	r4, r2
 800830a:	195b      	adds	r3, r3, r5
 800830c:	eb44 0406 	adc.w	r4, r4, r6
 8008310:	f04f 0100 	mov.w	r1, #0
 8008314:	f04f 0200 	mov.w	r2, #0
 8008318:	02a2      	lsls	r2, r4, #10
 800831a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800831e:	0299      	lsls	r1, r3, #10
 8008320:	460b      	mov	r3, r1
 8008322:	4614      	mov	r4, r2
 8008324:	4618      	mov	r0, r3
 8008326:	4621      	mov	r1, r4
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f04f 0400 	mov.w	r4, #0
 800832e:	461a      	mov	r2, r3
 8008330:	4623      	mov	r3, r4
 8008332:	f7f8 fc81 	bl	8000c38 <__aeabi_uldivmod>
 8008336:	4603      	mov	r3, r0
 8008338:	460c      	mov	r4, r1
 800833a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	0c1b      	lsrs	r3, r3, #16
 8008342:	f003 0303 	and.w	r3, r3, #3
 8008346:	3301      	adds	r3, #1
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	fbb2 f3f3 	udiv	r3, r2, r3
 8008354:	60bb      	str	r3, [r7, #8]
      break;
 8008356:	e002      	b.n	800835e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800835a:	60bb      	str	r3, [r7, #8]
      break;
 800835c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800835e:	68bb      	ldr	r3, [r7, #8]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008368:	40023800 	.word	0x40023800
 800836c:	00f42400 	.word	0x00f42400
 8008370:	007a1200 	.word	0x007a1200

08008374 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <HAL_RCC_GetHCLKFreq+0x14>)
 800837a:	681b      	ldr	r3, [r3, #0]
}
 800837c:	4618      	mov	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	20000000 	.word	0x20000000

0800838c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008390:	f7ff fff0 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 8008394:	4601      	mov	r1, r0
 8008396:	4b05      	ldr	r3, [pc, #20]	; (80083ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	0a9b      	lsrs	r3, r3, #10
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	4a03      	ldr	r2, [pc, #12]	; (80083b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80083a2:	5cd3      	ldrb	r3, [r2, r3]
 80083a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40023800 	.word	0x40023800
 80083b0:	0801ac64 	.word	0x0801ac64

080083b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083b8:	f7ff ffdc 	bl	8008374 <HAL_RCC_GetHCLKFreq>
 80083bc:	4601      	mov	r1, r0
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	0b5b      	lsrs	r3, r3, #13
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	4a03      	ldr	r2, [pc, #12]	; (80083d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083ca:	5cd3      	ldrb	r3, [r2, r3]
 80083cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	40023800 	.word	0x40023800
 80083d8:	0801ac64 	.word	0x0801ac64

080083dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	220f      	movs	r2, #15
 80083ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80083ec:	4b12      	ldr	r3, [pc, #72]	; (8008438 <HAL_RCC_GetClockConfig+0x5c>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	f003 0203 	and.w	r2, r3, #3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80083f8:	4b0f      	ldr	r3, [pc, #60]	; (8008438 <HAL_RCC_GetClockConfig+0x5c>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <HAL_RCC_GetClockConfig+0x5c>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <HAL_RCC_GetClockConfig+0x5c>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	08db      	lsrs	r3, r3, #3
 8008416:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800841e:	4b07      	ldr	r3, [pc, #28]	; (800843c <HAL_RCC_GetClockConfig+0x60>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 020f 	and.w	r2, r3, #15
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	601a      	str	r2, [r3, #0]
}
 800842a:	bf00      	nop
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40023800 	.word	0x40023800
 800843c:	40023c00 	.word	0x40023c00

08008440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008450:	2300      	movs	r3, #0
 8008452:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d012      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008468:	4b69      	ldr	r3, [pc, #420]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	4a68      	ldr	r2, [pc, #416]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008472:	6093      	str	r3, [r2, #8]
 8008474:	4b66      	ldr	r3, [pc, #408]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	4964      	ldr	r1, [pc, #400]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847e:	4313      	orrs	r3, r2
 8008480:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800848a:	2301      	movs	r3, #1
 800848c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d017      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800849a:	4b5d      	ldr	r3, [pc, #372]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a8:	4959      	ldr	r1, [pc, #356]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b8:	d101      	bne.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80084ba:	2301      	movs	r3, #1
 80084bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80084c6:	2301      	movs	r3, #1
 80084c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d017      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80084d6:	4b4e      	ldr	r3, [pc, #312]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	494a      	ldr	r1, [pc, #296]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f4:	d101      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d101      	bne.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008502:	2301      	movs	r3, #1
 8008504:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008512:	2301      	movs	r3, #1
 8008514:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 808b 	beq.w	800863a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008524:	4b3a      	ldr	r3, [pc, #232]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	4a39      	ldr	r2, [pc, #228]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852e:	6413      	str	r3, [r2, #64]	; 0x40
 8008530:	4b37      	ldr	r3, [pc, #220]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800853c:	4b35      	ldr	r3, [pc, #212]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a34      	ldr	r2, [pc, #208]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008548:	f7fd fa5c 	bl	8005a04 <HAL_GetTick>
 800854c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800854e:	e008      	b.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008550:	f7fd fa58 	bl	8005a04 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b64      	cmp	r3, #100	; 0x64
 800855c:	d901      	bls.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e31e      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008562:	4b2c      	ldr	r3, [pc, #176]	; (8008614 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0f0      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800856e:	4b28      	ldr	r3, [pc, #160]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008576:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d035      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	429a      	cmp	r2, r3
 800858a:	d02e      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800858c:	4b20      	ldr	r3, [pc, #128]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008594:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008596:	4b1e      	ldr	r3, [pc, #120]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859a:	4a1d      	ldr	r2, [pc, #116]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800859c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085a2:	4b1b      	ldr	r3, [pc, #108]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a6:	4a1a      	ldr	r2, [pc, #104]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80085ae:	4a18      	ldr	r2, [pc, #96]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085b4:	4b16      	ldr	r3, [pc, #88]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b8:	f003 0301 	and.w	r3, r3, #1
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d114      	bne.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fd fa20 	bl	8005a04 <HAL_GetTick>
 80085c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085c6:	e00a      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c8:	f7fd fa1c 	bl	8005a04 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e2e0      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085de:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0ee      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f6:	d111      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008604:	4b04      	ldr	r3, [pc, #16]	; (8008618 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008606:	400b      	ands	r3, r1
 8008608:	4901      	ldr	r1, [pc, #4]	; (8008610 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800860a:	4313      	orrs	r3, r2
 800860c:	608b      	str	r3, [r1, #8]
 800860e:	e00b      	b.n	8008628 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008610:	40023800 	.word	0x40023800
 8008614:	40007000 	.word	0x40007000
 8008618:	0ffffcff 	.word	0x0ffffcff
 800861c:	4bac      	ldr	r3, [pc, #688]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	4aab      	ldr	r2, [pc, #684]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008622:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008626:	6093      	str	r3, [r2, #8]
 8008628:	4ba9      	ldr	r3, [pc, #676]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800862a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008634:	49a6      	ldr	r1, [pc, #664]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008636:	4313      	orrs	r3, r2
 8008638:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d010      	beq.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008646:	4ba2      	ldr	r3, [pc, #648]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800864c:	4aa0      	ldr	r2, [pc, #640]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800864e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008652:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008656:	4b9e      	ldr	r3, [pc, #632]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008658:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	499b      	ldr	r1, [pc, #620]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008662:	4313      	orrs	r3, r2
 8008664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00a      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008674:	4b96      	ldr	r3, [pc, #600]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008682:	4993      	ldr	r1, [pc, #588]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008684:	4313      	orrs	r3, r2
 8008686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00a      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008696:	4b8e      	ldr	r3, [pc, #568]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086a4:	498a      	ldr	r1, [pc, #552]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00a      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80086b8:	4b85      	ldr	r3, [pc, #532]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c6:	4982      	ldr	r1, [pc, #520]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80086da:	4b7d      	ldr	r3, [pc, #500]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086e8:	4979      	ldr	r1, [pc, #484]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086fc:	4b74      	ldr	r3, [pc, #464]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80086fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008702:	f023 0203 	bic.w	r2, r3, #3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800870a:	4971      	ldr	r1, [pc, #452]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800870c:	4313      	orrs	r3, r2
 800870e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00a      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800871e:	4b6c      	ldr	r3, [pc, #432]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008724:	f023 020c 	bic.w	r2, r3, #12
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800872c:	4968      	ldr	r1, [pc, #416]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00a      	beq.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008740:	4b63      	ldr	r3, [pc, #396]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008746:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800874e:	4960      	ldr	r1, [pc, #384]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008750:	4313      	orrs	r3, r2
 8008752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008762:	4b5b      	ldr	r3, [pc, #364]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008770:	4957      	ldr	r1, [pc, #348]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008772:	4313      	orrs	r3, r2
 8008774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00a      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008784:	4b52      	ldr	r3, [pc, #328]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800878a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008792:	494f      	ldr	r1, [pc, #316]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008794:	4313      	orrs	r3, r2
 8008796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00a      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80087a6:	4b4a      	ldr	r3, [pc, #296]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087b4:	4946      	ldr	r1, [pc, #280]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00a      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80087c8:	4b41      	ldr	r3, [pc, #260]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d6:	493e      	ldr	r1, [pc, #248]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80087ea:	4b39      	ldr	r3, [pc, #228]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f8:	4935      	ldr	r1, [pc, #212]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80087fa:	4313      	orrs	r3, r2
 80087fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00a      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800880c:	4b30      	ldr	r3, [pc, #192]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800880e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008812:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800881a:	492d      	ldr	r1, [pc, #180]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800881c:	4313      	orrs	r3, r2
 800881e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d011      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800882e:	4b28      	ldr	r3, [pc, #160]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008834:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800883c:	4924      	ldr	r1, [pc, #144]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800883e:	4313      	orrs	r3, r2
 8008840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800884c:	d101      	bne.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800884e:	2301      	movs	r3, #1
 8008850:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800885e:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800886c:	4918      	ldr	r1, [pc, #96]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00b      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008880:	4b13      	ldr	r3, [pc, #76]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008886:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008890:	490f      	ldr	r1, [pc, #60]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008892:	4313      	orrs	r3, r2
 8008894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d005      	beq.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a6:	f040 80d8 	bne.w	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80088b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b6:	f7fd f8a5 	bl	8005a04 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088bc:	e00a      	b.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088be:	f7fd f8a1 	bl	8005a04 <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	2b64      	cmp	r3, #100	; 0x64
 80088ca:	d903      	bls.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e167      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80088d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80088d4:	4bad      	ldr	r3, [pc, #692]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1ee      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d021      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11d      	bne.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088f4:	4ba5      	ldr	r3, [pc, #660]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80088f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008902:	4ba2      	ldr	r3, [pc, #648]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008908:	0e1b      	lsrs	r3, r3, #24
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	019a      	lsls	r2, r3, #6
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	041b      	lsls	r3, r3, #16
 800891a:	431a      	orrs	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	431a      	orrs	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	071b      	lsls	r3, r3, #28
 8008928:	4998      	ldr	r1, [pc, #608]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d004      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008944:	d00a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800894e:	2b00      	cmp	r3, #0
 8008950:	d02e      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008956:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800895a:	d129      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800895c:	4b8b      	ldr	r3, [pc, #556]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800895e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008962:	0c1b      	lsrs	r3, r3, #16
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800896a:	4b88      	ldr	r3, [pc, #544]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800896c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008970:	0f1b      	lsrs	r3, r3, #28
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	019a      	lsls	r2, r3, #6
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	041b      	lsls	r3, r3, #16
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	061b      	lsls	r3, r3, #24
 800898a:	431a      	orrs	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	071b      	lsls	r3, r3, #28
 8008990:	497e      	ldr	r1, [pc, #504]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008998:	4b7c      	ldr	r3, [pc, #496]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800899a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800899e:	f023 021f 	bic.w	r2, r3, #31
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	3b01      	subs	r3, #1
 80089a8:	4978      	ldr	r1, [pc, #480]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01d      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80089bc:	4b73      	ldr	r3, [pc, #460]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80089ca:	4b70      	ldr	r3, [pc, #448]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089d0:	0f1b      	lsrs	r3, r3, #28
 80089d2:	f003 0307 	and.w	r3, r3, #7
 80089d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	019a      	lsls	r2, r3, #6
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	041b      	lsls	r3, r3, #16
 80089e4:	431a      	orrs	r2, r3
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	431a      	orrs	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	071b      	lsls	r3, r3, #28
 80089f0:	4966      	ldr	r1, [pc, #408]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 80089f2:	4313      	orrs	r3, r2
 80089f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	019a      	lsls	r2, r3, #6
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	041b      	lsls	r3, r3, #16
 8008a10:	431a      	orrs	r2, r3
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	061b      	lsls	r3, r3, #24
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	071b      	lsls	r3, r3, #28
 8008a20:	495a      	ldr	r1, [pc, #360]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a28:	4b58      	ldr	r3, [pc, #352]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a57      	ldr	r2, [pc, #348]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a34:	f7fc ffe6 	bl	8005a04 <HAL_GetTick>
 8008a38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a3a:	e008      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008a3c:	f7fc ffe2 	bl	8005a04 <HAL_GetTick>
 8008a40:	4602      	mov	r2, r0
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	2b64      	cmp	r3, #100	; 0x64
 8008a48:	d901      	bls.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e0a8      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a4e:	4b4f      	ldr	r3, [pc, #316]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f0      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	f040 809e 	bne.w	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a62:	4b4a      	ldr	r3, [pc, #296]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a49      	ldr	r2, [pc, #292]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a6e:	f7fc ffc9 	bl	8005a04 <HAL_GetTick>
 8008a72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a74:	e008      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a76:	f7fc ffc5 	bl	8005a04 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b64      	cmp	r3, #100	; 0x64
 8008a82:	d901      	bls.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e08b      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a88:	4b40      	ldr	r3, [pc, #256]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a94:	d0ef      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d009      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d02e      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d12a      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008abe:	4b33      	ldr	r3, [pc, #204]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008acc:	4b2f      	ldr	r3, [pc, #188]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	f003 0307 	and.w	r3, r3, #7
 8008ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	019a      	lsls	r2, r3, #6
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	041b      	lsls	r3, r3, #16
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	071b      	lsls	r3, r3, #28
 8008af2:	4926      	ldr	r1, [pc, #152]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008afa:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	3b01      	subs	r3, #1
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	491f      	ldr	r1, [pc, #124]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d022      	beq.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x726>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b28:	d11d      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b2a:	4b18      	ldr	r3, [pc, #96]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b30:	0e1b      	lsrs	r3, r3, #24
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008b38:	4b14      	ldr	r3, [pc, #80]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3e:	0f1b      	lsrs	r3, r3, #28
 8008b40:	f003 0307 	and.w	r3, r3, #7
 8008b44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	695b      	ldr	r3, [r3, #20]
 8008b4a:	019a      	lsls	r2, r3, #6
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	041b      	lsls	r3, r3, #16
 8008b52:	431a      	orrs	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	061b      	lsls	r3, r3, #24
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	071b      	lsls	r3, r3, #28
 8008b5e:	490b      	ldr	r1, [pc, #44]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b60:	4313      	orrs	r3, r2
 8008b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a08      	ldr	r2, [pc, #32]	; (8008b8c <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 8008b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b72:	f7fc ff47 	bl	8005a04 <HAL_GetTick>
 8008b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b78:	e00a      	b.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b7a:	f7fc ff43 	bl	8005a04 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	2b64      	cmp	r3, #100	; 0x64
 8008b86:	d903      	bls.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e009      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8008b8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b90:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b9c:	d1ed      	bne.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40023800 	.word	0x40023800

08008bac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e022      	b.n	8008c04 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d105      	bne.n	8008bd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7fb fc1b 	bl	800440c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2203      	movs	r2, #3
 8008bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f814 	bl	8008c0c <HAL_SD_InitCard>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e00a      	b.n	8008c04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c0c:	b5b0      	push	{r4, r5, r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af04      	add	r7, sp, #16
 8008c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008c28:	2376      	movs	r3, #118	; 0x76
 8008c2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681d      	ldr	r5, [r3, #0]
 8008c30:	466c      	mov	r4, sp
 8008c32:	f107 0314 	add.w	r3, r7, #20
 8008c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c3e:	f107 0308 	add.w	r3, r7, #8
 8008c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c44:	4628      	mov	r0, r5
 8008c46:	f003 fbe9 	bl	800c41c <SDMMC_Init>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d001      	beq.n	8008c5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e03b      	b.n	8008cd4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685a      	ldr	r2, [r3, #4]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c6a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f003 fc1d 	bl	800c4b0 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c84:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 ffca 	bl	8009c20 <SD_PowerON>
 8008c8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c8e:	6a3b      	ldr	r3, [r7, #32]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ca0:	6a3b      	ldr	r3, [r7, #32]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e013      	b.n	8008cd4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fee9 	bl	8009a84 <SD_InitCard>
 8008cb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cb4:	6a3b      	ldr	r3, [r7, #32]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00b      	beq.n	8008cd2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e000      	b.n	8008cd4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3728      	adds	r7, #40	; 0x28
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bdb0      	pop	{r4, r5, r7, pc}

08008cdc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08c      	sub	sp, #48	; 0x30
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d107      	bne.n	8008d04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e0cc      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	f040 80c5 	bne.w	8008e9c <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	441a      	add	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d907      	bls.n	8008d36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e0b3      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2203      	movs	r2, #3
 8008d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2200      	movs	r2, #0
 8008d44:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008d54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5a:	4a53      	ldr	r2, [pc, #332]	; (8008ea8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	4a52      	ldr	r2, [pc, #328]	; (8008eac <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008d64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3380      	adds	r3, #128	; 0x80
 8008d78:	4619      	mov	r1, r3
 8008d7a:	68ba      	ldr	r2, [r7, #8]
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	025b      	lsls	r3, r3, #9
 8008d80:	089b      	lsrs	r3, r3, #2
 8008d82:	f7fc fffd 	bl	8005d80 <HAL_DMA_Start_IT>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d017      	beq.n	8008dbc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008d9a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a43      	ldr	r2, [pc, #268]	; (8008eb0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008da2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e070      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0208 	orr.w	r2, r2, #8
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d002      	beq.n	8008dda <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd6:	025b      	lsls	r3, r3, #9
 8008dd8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008de2:	4618      	mov	r0, r3
 8008de4:	f003 fbf8 	bl	800c5d8 <SDMMC_CmdBlockLength>
 8008de8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00f      	beq.n	8008e10 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a2e      	ldr	r2, [pc, #184]	; (8008eb0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008df6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e046      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008e10:	f04f 33ff 	mov.w	r3, #4294967295
 8008e14:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	025b      	lsls	r3, r3, #9
 8008e1a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008e1c:	2390      	movs	r3, #144	; 0x90
 8008e1e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008e20:	2302      	movs	r3, #2
 8008e22:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f107 0210 	add.w	r2, r7, #16
 8008e34:	4611      	mov	r1, r2
 8008e36:	4618      	mov	r0, r3
 8008e38:	f003 fba2 	bl	800c580 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d90a      	bls.n	8008e58 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2282      	movs	r2, #130	; 0x82
 8008e46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f003 fc06 	bl	800c660 <SDMMC_CmdReadMultiBlock>
 8008e54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008e56:	e009      	b.n	8008e6c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2281      	movs	r2, #129	; 0x81
 8008e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e64:	4618      	mov	r0, r3
 8008e66:	f003 fbd9 	bl	800c61c <SDMMC_CmdReadSingleBlock>
 8008e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d012      	beq.n	8008e98 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a0e      	ldr	r2, [pc, #56]	; (8008eb0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008e94:	2301      	movs	r3, #1
 8008e96:	e002      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e000      	b.n	8008e9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008e9c:	2302      	movs	r3, #2
  }
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3730      	adds	r7, #48	; 0x30
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08009893 	.word	0x08009893
 8008eac:	08009905 	.word	0x08009905
 8008eb0:	004005ff 	.word	0x004005ff

08008eb4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b08c      	sub	sp, #48	; 0x30
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
 8008ec0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d107      	bne.n	8008edc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e0cf      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	f040 80c8 	bne.w	800907a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d907      	bls.n	8008f0e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e0b6      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2203      	movs	r2, #3
 8008f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 021a 	orr.w	r2, r2, #26
 8008f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f32:	4a54      	ldr	r2, [pc, #336]	; (8009084 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008f34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3a:	4a53      	ldr	r2, [pc, #332]	; (8009088 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008f3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f42:	2200      	movs	r2, #0
 8008f44:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d002      	beq.n	8008f54 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	025b      	lsls	r3, r3, #9
 8008f52:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f003 fb3b 	bl	800c5d8 <SDMMC_CmdBlockLength>
 8008f62:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00f      	beq.n	8008f8a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a47      	ldr	r2, [pc, #284]	; (800908c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	431a      	orrs	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e078      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d90a      	bls.n	8008fa6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	22a0      	movs	r2, #160	; 0xa0
 8008f94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f003 fba3 	bl	800c6e8 <SDMMC_CmdWriteMultiBlock>
 8008fa2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008fa4:	e009      	b.n	8008fba <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2290      	movs	r2, #144	; 0x90
 8008faa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f003 fb76 	bl	800c6a4 <SDMMC_CmdWriteSingleBlock>
 8008fb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d012      	beq.n	8008fe6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a31      	ldr	r2, [pc, #196]	; (800908c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e04a      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0208 	orr.w	r2, r2, #8
 8008ff4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008ffa:	68b9      	ldr	r1, [r7, #8]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	3380      	adds	r3, #128	; 0x80
 8009002:	461a      	mov	r2, r3
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	025b      	lsls	r3, r3, #9
 8009008:	089b      	lsrs	r3, r3, #2
 800900a:	f7fc feb9 	bl	8005d80 <HAL_DMA_Start_IT>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d01a      	beq.n	800904a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f022 021a 	bic.w	r2, r2, #26
 8009022:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a18      	ldr	r2, [pc, #96]	; (800908c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800902a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e018      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800904a:	f04f 33ff 	mov.w	r3, #4294967295
 800904e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	025b      	lsls	r3, r3, #9
 8009054:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009056:	2390      	movs	r3, #144	; 0x90
 8009058:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800905a:	2300      	movs	r3, #0
 800905c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800905e:	2300      	movs	r3, #0
 8009060:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009062:	2301      	movs	r3, #1
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f107 0210 	add.w	r2, r7, #16
 800906e:	4611      	mov	r1, r2
 8009070:	4618      	mov	r0, r3
 8009072:	f003 fa85 	bl	800c580 <SDMMC_ConfigData>

      return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e000      	b.n	800907c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800907a:	2302      	movs	r3, #2
  }
}
 800907c:	4618      	mov	r0, r3
 800907e:	3730      	adds	r7, #48	; 0x30
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	08009869 	.word	0x08009869
 8009088:	08009905 	.word	0x08009905
 800908c:	004005ff 	.word	0x004005ff

08009090 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_SD_IRQHandler+0x2e>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d003      	beq.n	80090be <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 ffc8 	bl	800a04c <SD_Read_IT>
 80090bc:	e153      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 808d 	beq.w	80091e8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090d6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4ba3      	ldr	r3, [pc, #652]	; (8009370 <HAL_SD_IRQHandler+0x2e0>)
 80090e4:	400b      	ands	r3, r1
 80090e6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0201 	bic.w	r2, r2, #1
 80090f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f003 0308 	and.w	r3, r3, #8
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d039      	beq.n	8009176 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d104      	bne.n	8009116 <HAL_SD_IRQHandler+0x86>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0320 	and.w	r3, r3, #32
 8009112:	2b00      	cmp	r3, #0
 8009114:	d011      	beq.n	800913a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f003 fb06 	bl	800c72c <SDMMC_CmdStopTransfer>
 8009120:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d008      	beq.n	800913a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f921 	bl	800937c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009142:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d104      	bne.n	8009166 <HAL_SD_IRQHandler+0xd6>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f005 fa88 	bl	800e67c <HAL_SD_RxCpltCallback>
 800916c:	e0fb      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f005 fa7a 	bl	800e668 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009174:	e0f7      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80f2 	beq.w	8009366 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f003 0320 	and.w	r3, r3, #32
 8009188:	2b00      	cmp	r3, #0
 800918a:	d011      	beq.n	80091b0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f003 facb 	bl	800c72c <SDMMC_CmdStopTransfer>
 8009196:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d008      	beq.n	80091b0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8e6 	bl	800937c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f040 80d5 	bne.w	8009366 <HAL_SD_IRQHandler+0x2d6>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f040 80cf 	bne.w	8009366 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0208 	bic.w	r2, r2, #8
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f005 fa41 	bl	800e668 <HAL_SD_TxCpltCallback>
}
 80091e6:	e0be      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d008      	beq.n	8009208 <HAL_SD_IRQHandler+0x178>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f000 ff74 	bl	800a0ee <SD_Write_IT>
 8009206:	e0ae      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 80a7 	beq.w	8009366 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922a:	f043 0202 	orr.w	r2, r3, #2
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009238:	f003 0308 	and.w	r3, r3, #8
 800923c:	2b00      	cmp	r3, #0
 800923e:	d005      	beq.n	800924c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	f043 0208 	orr.w	r2, r3, #8
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d005      	beq.n	8009266 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925e:	f043 0220 	orr.w	r2, r3, #32
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	f043 0210 	orr.w	r2, r3, #16
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f240 523a 	movw	r2, #1338	; 0x53a
 8009288:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009298:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f003 fa44 	bl	800c72c <SDMMC_CmdStopTransfer>
 80092a4:	4602      	mov	r2, r0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092aa:	431a      	orrs	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f003 0308 	and.w	r3, r3, #8
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d00a      	beq.n	80092d0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f857 	bl	800937c <HAL_SD_ErrorCallback>
}
 80092ce:	e04a      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d045      	beq.n	8009366 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d104      	bne.n	80092ee <HAL_SD_IRQHandler+0x25e>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d011      	beq.n	8009312 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f2:	4a20      	ldr	r2, [pc, #128]	; (8009374 <HAL_SD_IRQHandler+0x2e4>)
 80092f4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fc fda0 	bl	8005e40 <HAL_DMA_Abort_IT>
 8009300:	4603      	mov	r3, r0
 8009302:	2b00      	cmp	r3, #0
 8009304:	d02f      	beq.n	8009366 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fb4c 	bl	80099a8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009310:	e029      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d104      	bne.n	8009326 <HAL_SD_IRQHandler+0x296>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d011      	beq.n	800934a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932a:	4a13      	ldr	r2, [pc, #76]	; (8009378 <HAL_SD_IRQHandler+0x2e8>)
 800932c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	4618      	mov	r0, r3
 8009334:	f7fc fd84 	bl	8005e40 <HAL_DMA_Abort_IT>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d013      	beq.n	8009366 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fb67 	bl	8009a16 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009348:	e00d      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f005 f978 	bl	800e654 <HAL_SD_AbortCallback>
}
 8009364:	e7ff      	b.n	8009366 <HAL_SD_IRQHandler+0x2d6>
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	ffff3ec5 	.word	0xffff3ec5
 8009374:	080099a9 	.word	0x080099a9
 8009378:	08009a17 	.word	0x08009a17

0800937c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800939e:	0f9b      	lsrs	r3, r3, #30
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093aa:	0e9b      	lsrs	r3, r3, #26
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 030f 	and.w	r3, r3, #15
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093bc:	0e1b      	lsrs	r3, r3, #24
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f003 0303 	and.w	r3, r3, #3
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093ce:	0c1b      	lsrs	r3, r3, #16
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f0:	0d1b      	lsrs	r3, r3, #20
 80093f2:	b29a      	uxth	r2, r3
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093fc:	0c1b      	lsrs	r3, r3, #16
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	f003 030f 	and.w	r3, r3, #15
 8009404:	b2da      	uxtb	r2, r3
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940e:	0bdb      	lsrs	r3, r3, #15
 8009410:	b2db      	uxtb	r3, r3
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	b2da      	uxtb	r2, r3
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009420:	0b9b      	lsrs	r3, r3, #14
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	b2da      	uxtb	r2, r3
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009432:	0b5b      	lsrs	r3, r3, #13
 8009434:	b2db      	uxtb	r3, r3
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	b2da      	uxtb	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009444:	0b1b      	lsrs	r3, r3, #12
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	b2da      	uxtb	r2, r3
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2200      	movs	r2, #0
 8009456:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800945c:	2b00      	cmp	r3, #0
 800945e:	d163      	bne.n	8009528 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009464:	009a      	lsls	r2, r3, #2
 8009466:	f640 73fc 	movw	r3, #4092	; 0xffc
 800946a:	4013      	ands	r3, r2
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009470:	0f92      	lsrs	r2, r2, #30
 8009472:	431a      	orrs	r2, r3
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800947c:	0edb      	lsrs	r3, r3, #27
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	b2da      	uxtb	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800948e:	0e1b      	lsrs	r3, r3, #24
 8009490:	b2db      	uxtb	r3, r3
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	b2da      	uxtb	r2, r3
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a0:	0d5b      	lsrs	r3, r3, #21
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	f003 0307 	and.w	r3, r3, #7
 80094a8:	b2da      	uxtb	r2, r3
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094b2:	0c9b      	lsrs	r3, r3, #18
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	f003 0307 	and.w	r3, r3, #7
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	0bdb      	lsrs	r3, r3, #15
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	f003 0307 	and.w	r3, r3, #7
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	7e1b      	ldrb	r3, [r3, #24]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f003 0307 	and.w	r3, r3, #7
 80094e6:	3302      	adds	r3, #2
 80094e8:	2201      	movs	r2, #1
 80094ea:	fa02 f303 	lsl.w	r3, r2, r3
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80094f2:	fb02 f203 	mul.w	r2, r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	7a1b      	ldrb	r3, [r3, #8]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	2201      	movs	r2, #1
 8009506:	409a      	lsls	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009514:	0a52      	lsrs	r2, r2, #9
 8009516:	fb02 f203 	mul.w	r2, r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009524:	661a      	str	r2, [r3, #96]	; 0x60
 8009526:	e031      	b.n	800958c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952c:	2b01      	cmp	r3, #1
 800952e:	d11d      	bne.n	800956c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800953e:	0c1b      	lsrs	r3, r3, #16
 8009540:	431a      	orrs	r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	3301      	adds	r3, #1
 800954c:	029a      	lsls	r2, r3, #10
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009560:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	661a      	str	r2, [r3, #96]	; 0x60
 800956a:	e00f      	b.n	800958c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a58      	ldr	r2, [pc, #352]	; (80096d4 <HAL_SD_GetCardCSD+0x344>)
 8009572:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e09d      	b.n	80096c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009590:	0b9b      	lsrs	r3, r3, #14
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 0301 	and.w	r3, r3, #1
 8009598:	b2da      	uxtb	r2, r3
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095a2:	09db      	lsrs	r3, r3, #7
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095aa:	b2da      	uxtb	r2, r3
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095b4:	b2db      	uxtb	r3, r3
 80095b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095c4:	0fdb      	lsrs	r3, r3, #31
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095d0:	0f5b      	lsrs	r3, r3, #29
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	f003 0303 	and.w	r3, r3, #3
 80095d8:	b2da      	uxtb	r2, r3
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095e2:	0e9b      	lsrs	r3, r3, #26
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f4:	0d9b      	lsrs	r3, r3, #22
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	f003 030f 	and.w	r3, r3, #15
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009606:	0d5b      	lsrs	r3, r3, #21
 8009608:	b2db      	uxtb	r3, r3
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	0c1b      	lsrs	r3, r3, #16
 8009624:	b2db      	uxtb	r3, r3
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	b2da      	uxtb	r2, r3
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009636:	0bdb      	lsrs	r3, r3, #15
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964a:	0b9b      	lsrs	r3, r3, #14
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965e:	0b5b      	lsrs	r3, r3, #13
 8009660:	b2db      	uxtb	r3, r3
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009672:	0b1b      	lsrs	r3, r3, #12
 8009674:	b2db      	uxtb	r3, r3
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	b2da      	uxtb	r2, r3
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	0a9b      	lsrs	r3, r3, #10
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	b2da      	uxtb	r2, r3
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969a:	0a1b      	lsrs	r3, r3, #8
 800969c:	b2db      	uxtb	r3, r3
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096ae:	085b      	lsrs	r3, r3, #1
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80096c6:	2300      	movs	r3, #0
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	004005ff 	.word	0x004005ff

080096d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009730:	b5b0      	push	{r4, r5, r7, lr}
 8009732:	b08e      	sub	sp, #56	; 0x38
 8009734:	af04      	add	r7, sp, #16
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2203      	movs	r2, #3
 800973e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009746:	2b03      	cmp	r3, #3
 8009748:	d02e      	beq.n	80097a8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009750:	d106      	bne.n	8009760 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	639a      	str	r2, [r3, #56]	; 0x38
 800975e:	e029      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009766:	d10a      	bne.n	800977e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fb0f 	bl	8009d8c <SD_WideBus_Enable>
 800976e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	639a      	str	r2, [r3, #56]	; 0x38
 800977c:	e01a      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fb4c 	bl	8009e22 <SD_WideBus_Disable>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
 8009798:	e00c      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	639a      	str	r2, [r3, #56]	; 0x38
 80097a6:	e005      	b.n	80097b4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a18      	ldr	r2, [pc, #96]	; (8009824 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e024      	b.n	800981a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681d      	ldr	r5, [r3, #0]
 80097f6:	466c      	mov	r4, sp
 80097f8:	f107 0318 	add.w	r3, r7, #24
 80097fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009804:	f107 030c 	add.w	r3, r7, #12
 8009808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800980a:	4628      	mov	r0, r5
 800980c:	f002 fe06 	bl	800c41c <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3728      	adds	r7, #40	; 0x28
 800981e:	46bd      	mov	sp, r7
 8009820:	bdb0      	pop	{r4, r5, r7, pc}
 8009822:	bf00      	nop
 8009824:	004005ff 	.word	0x004005ff

08009828 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b086      	sub	sp, #24
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009834:	f107 030c 	add.w	r3, r7, #12
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa7e 	bl	8009d3c <SD_SendStatus>
 8009840:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	0a5b      	lsrs	r3, r3, #9
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800985e:	693b      	ldr	r3, [r7, #16]
}
 8009860:	4618      	mov	r0, r3
 8009862:	3718      	adds	r7, #24
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009874:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009884:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b084      	sub	sp, #16
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a4:	2b82      	cmp	r3, #130	; 0x82
 80098a6:	d111      	bne.n	80098cc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f002 ff3d 	bl	800c72c <SDMMC_CmdStopTransfer>
 80098b2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d008      	beq.n	80098cc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	431a      	orrs	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7ff fd58 	bl	800937c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0208 	bic.w	r2, r2, #8
 80098da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f240 523a 	movw	r2, #1338	; 0x53a
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80098f4:	68f8      	ldr	r0, [r7, #12]
 80098f6:	f004 fec1 	bl	800e67c <HAL_SD_RxCpltCallback>
#endif
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
	...

08009904 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009910:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fc fc40 	bl	8006198 <HAL_DMA_GetError>
 8009918:	4603      	mov	r3, r0
 800991a:	2b02      	cmp	r3, #2
 800991c:	d03e      	beq.n	800999c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009924:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800992c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d002      	beq.n	800993a <SD_DMAError+0x36>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d12d      	bne.n	8009996 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a19      	ldr	r2, [pc, #100]	; (80099a4 <SD_DMAError+0xa0>)
 8009940:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009950:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800995e:	6978      	ldr	r0, [r7, #20]
 8009960:	f7ff ff62 	bl	8009828 <HAL_SD_GetCardState>
 8009964:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b06      	cmp	r3, #6
 800996a:	d002      	beq.n	8009972 <SD_DMAError+0x6e>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b05      	cmp	r3, #5
 8009970:	d10a      	bne.n	8009988 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4618      	mov	r0, r3
 8009978:	f002 fed8 	bl	800c72c <SDMMC_CmdStopTransfer>
 800997c:	4602      	mov	r2, r0
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009982:	431a      	orrs	r2, r3
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	2200      	movs	r2, #0
 8009994:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009996:	6978      	ldr	r0, [r7, #20]
 8009998:	f7ff fcf0 	bl	800937c <HAL_SD_ErrorCallback>
#endif
  }
}
 800999c:	bf00      	nop
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	004005ff 	.word	0x004005ff

080099a8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f240 523a 	movw	r2, #1338	; 0x53a
 80099be:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f7ff ff31 	bl	8009828 <HAL_SD_GetCardState>
 80099c6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b06      	cmp	r3, #6
 80099da:	d002      	beq.n	80099e2 <SD_DMATxAbort+0x3a>
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	2b05      	cmp	r3, #5
 80099e0:	d10a      	bne.n	80099f8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f002 fea0 	bl	800c72c <SDMMC_CmdStopTransfer>
 80099ec:	4602      	mov	r2, r0
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	431a      	orrs	r2, r3
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f004 fe27 	bl	800e654 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a06:	e002      	b.n	8009a0e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a08:	68f8      	ldr	r0, [r7, #12]
 8009a0a:	f7ff fcb7 	bl	800937c <HAL_SD_ErrorCallback>
}
 8009a0e:	bf00      	nop
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fefa 	bl	8009828 <HAL_SD_GetCardState>
 8009a34:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b06      	cmp	r3, #6
 8009a48:	d002      	beq.n	8009a50 <SD_DMARxAbort+0x3a>
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b05      	cmp	r3, #5
 8009a4e:	d10a      	bne.n	8009a66 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4618      	mov	r0, r3
 8009a56:	f002 fe69 	bl	800c72c <SDMMC_CmdStopTransfer>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a60:	431a      	orrs	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f004 fdf0 	bl	800e654 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009a74:	e002      	b.n	8009a7c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff fc80 	bl	800937c <HAL_SD_ErrorCallback>
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009a84:	b5b0      	push	{r4, r5, r7, lr}
 8009a86:	b094      	sub	sp, #80	; 0x50
 8009a88:	af04      	add	r7, sp, #16
 8009a8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f002 fd1a 	bl	800c4ce <SDMMC_GetPowerState>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d102      	bne.n	8009aa6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009aa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009aa4:	e0b7      	b.n	8009c16 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d02f      	beq.n	8009b0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f002 ff45 	bl	800c942 <SDMMC_CmdSendCID>
 8009ab8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <SD_InitCard+0x40>
    {
      return errorstate;
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	e0a8      	b.n	8009c16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	4618      	mov	r0, r3
 8009acc:	f002 fd45 	bl	800c55a <SDMMC_GetResponse>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2104      	movs	r1, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f002 fd3c 	bl	800c55a <SDMMC_GetResponse>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2108      	movs	r1, #8
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 fd33 	bl	800c55a <SDMMC_GetResponse>
 8009af4:	4602      	mov	r2, r0
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	210c      	movs	r1, #12
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 fd2a 	bl	800c55a <SDMMC_GetResponse>
 8009b06:	4602      	mov	r2, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d00d      	beq.n	8009b32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f107 020e 	add.w	r2, r7, #14
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f002 ff4b 	bl	800c9bc <SDMMC_CmdSetRelAdd>
 8009b26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d001      	beq.n	8009b32 <SD_InitCard+0xae>
    {
      return errorstate;
 8009b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b30:	e071      	b.n	8009c16 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	d036      	beq.n	8009ba8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009b3a:	89fb      	ldrh	r3, [r7, #14]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b4a:	041b      	lsls	r3, r3, #16
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	4610      	mov	r0, r2
 8009b50:	f002 ff15 	bl	800c97e <SDMMC_CmdSendCSD>
 8009b54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	e05a      	b.n	8009c16 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f002 fcf7 	bl	800c55a <SDMMC_GetResponse>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2104      	movs	r1, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f002 fcee 	bl	800c55a <SDMMC_GetResponse>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2108      	movs	r1, #8
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f002 fce5 	bl	800c55a <SDMMC_GetResponse>
 8009b90:	4602      	mov	r2, r0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	210c      	movs	r1, #12
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f002 fcdc 	bl	800c55a <SDMMC_GetResponse>
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2104      	movs	r1, #4
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f002 fcd3 	bl	800c55a <SDMMC_GetResponse>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	0d1a      	lsrs	r2, r3, #20
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009bbc:	f107 0310 	add.w	r3, r7, #16
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7ff fbe4 	bl	8009390 <HAL_SD_GetCardCSD>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009bd2:	e020      	b.n	8009c16 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6819      	ldr	r1, [r3, #0]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bdc:	041b      	lsls	r3, r3, #16
 8009bde:	f04f 0400 	mov.w	r4, #0
 8009be2:	461a      	mov	r2, r3
 8009be4:	4623      	mov	r3, r4
 8009be6:	4608      	mov	r0, r1
 8009be8:	f002 fdc2 	bl	800c770 <SDMMC_CmdSelDesel>
 8009bec:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <SD_InitCard+0x174>
  {
    return errorstate;
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf6:	e00e      	b.n	8009c16 <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681d      	ldr	r5, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	466c      	mov	r4, sp
 8009c00:	f103 0210 	add.w	r2, r3, #16
 8009c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f002 fc04 	bl	800c41c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3740      	adds	r7, #64	; 0x40
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009c20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b086      	sub	sp, #24
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f002 fdbc 	bl	800c7b6 <SDMMC_CmdGoIdleState>
 8009c3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	e072      	b.n	8009d30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f002 fdcf 	bl	800c7f2 <SDMMC_CmdOperCond>
 8009c54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00d      	beq.n	8009c78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f002 fda5 	bl	800c7b6 <SDMMC_CmdGoIdleState>
 8009c6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	e05b      	b.n	8009d30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d137      	bne.n	8009cf6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f002 fdcf 	bl	800c830 <SDMMC_CmdAppCommand>
 8009c92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d02d      	beq.n	8009cf6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c9e:	e047      	b.n	8009d30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f002 fdc2 	bl	800c830 <SDMMC_CmdAppCommand>
 8009cac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <SD_PowerON+0x98>
    {
      return errorstate;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	e03b      	b.n	8009d30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	491e      	ldr	r1, [pc, #120]	; (8009d38 <SD_PowerON+0x118>)
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f002 fdd8 	bl	800c874 <SDMMC_CmdAppOperCommand>
 8009cc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cd0:	e02e      	b.n	8009d30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f002 fc3e 	bl	800c55a <SDMMC_GetResponse>
 8009cde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	0fdb      	lsrs	r3, r3, #31
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d101      	bne.n	8009cec <SD_PowerON+0xcc>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e000      	b.n	8009cee <SD_PowerON+0xce>
 8009cec:	2300      	movs	r3, #0
 8009cee:	613b      	str	r3, [r7, #16]

    count++;
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d802      	bhi.n	8009d06 <SD_PowerON+0xe6>
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0cc      	beq.n	8009ca0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d902      	bls.n	8009d16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d14:	e00c      	b.n	8009d30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	645a      	str	r2, [r3, #68]	; 0x44
 8009d26:	e002      	b.n	8009d2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	c1100000 	.word	0xc1100000

08009d3c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009d4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d50:	e018      	b.n	8009d84 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d5a:	041b      	lsls	r3, r3, #16
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f002 fe4d 	bl	800c9fe <SDMMC_CmdSendStatus>
 8009d64:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	e009      	b.n	8009d84 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f002 fbef 	bl	800c55a <SDMMC_GetResponse>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2100      	movs	r1, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f002 fbd9 	bl	800c55a <SDMMC_GetResponse>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009db2:	d102      	bne.n	8009dba <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009db8:	e02f      	b.n	8009e1a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009dba:	f107 030c 	add.w	r3, r7, #12
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 f879 	bl	8009eb8 <SD_FindSCR>
 8009dc6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	e023      	b.n	8009e1a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01c      	beq.n	8009e16 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	041b      	lsls	r3, r3, #16
 8009de6:	4619      	mov	r1, r3
 8009de8:	4610      	mov	r0, r2
 8009dea:	f002 fd21 	bl	800c830 <SDMMC_CmdAppCommand>
 8009dee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d001      	beq.n	8009dfa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	e00f      	b.n	8009e1a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2102      	movs	r1, #2
 8009e00:	4618      	mov	r0, r3
 8009e02:	f002 fd5b 	bl	800c8bc <SDMMC_CmdBusWidth>
 8009e06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	e003      	b.n	8009e1a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	e001      	b.n	8009e1a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009e16:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3718      	adds	r7, #24
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2100      	movs	r1, #0
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f002 fb8e 	bl	800c55a <SDMMC_GetResponse>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e48:	d102      	bne.n	8009e50 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009e4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e4e:	e02f      	b.n	8009eb0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009e50:	f107 030c 	add.w	r3, r7, #12
 8009e54:	4619      	mov	r1, r3
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f82e 	bl	8009eb8 <SD_FindSCR>
 8009e5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	e023      	b.n	8009eb0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d01c      	beq.n	8009eac <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e7a:	041b      	lsls	r3, r3, #16
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f002 fcd6 	bl	800c830 <SDMMC_CmdAppCommand>
 8009e84:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	e00f      	b.n	8009eb0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2100      	movs	r1, #0
 8009e96:	4618      	mov	r0, r3
 8009e98:	f002 fd10 	bl	800c8bc <SDMMC_CmdBusWidth>
 8009e9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	e003      	b.n	8009eb0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e001      	b.n	8009eb0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3718      	adds	r7, #24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009eb8:	b590      	push	{r4, r7, lr}
 8009eba:	b08f      	sub	sp, #60	; 0x3c
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009ec2:	f7fb fd9f 	bl	8005a04 <HAL_GetTick>
 8009ec6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2108      	movs	r1, #8
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f002 fb7a 	bl	800c5d8 <SDMMC_CmdBlockLength>
 8009ee4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	e0a9      	b.n	800a044 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef8:	041b      	lsls	r3, r3, #16
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f002 fc97 	bl	800c830 <SDMMC_CmdAppCommand>
 8009f02:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <SD_FindSCR+0x56>
  {
    return errorstate;
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	e09a      	b.n	800a044 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f12:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009f14:	2308      	movs	r3, #8
 8009f16:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009f18:	2330      	movs	r3, #48	; 0x30
 8009f1a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f24:	2301      	movs	r3, #1
 8009f26:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f107 0210 	add.w	r2, r7, #16
 8009f30:	4611      	mov	r1, r2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fb24 	bl	800c580 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f002 fcdf 	bl	800c900 <SDMMC_CmdSendSCR>
 8009f42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d022      	beq.n	8009f90 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	e07a      	b.n	800a044 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00e      	beq.n	8009f7a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	f107 0208 	add.w	r2, r7, #8
 8009f68:	18d4      	adds	r4, r2, r3
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	f002 fa82 	bl	800c474 <SDMMC_ReadFIFO>
 8009f70:	4603      	mov	r3, r0
 8009f72:	6023      	str	r3, [r4, #0]
      index++;
 8009f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f76:	3301      	adds	r3, #1
 8009f78:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009f7a:	f7fb fd43 	bl	8005a04 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d102      	bne.n	8009f90 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009f8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f8e:	e059      	b.n	800a044 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f96:	f240 432a 	movw	r3, #1066	; 0x42a
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0d6      	beq.n	8009f4e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	f003 0308 	and.w	r3, r3, #8
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	e044      	b.n	800a044 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	f003 0302 	and.w	r3, r3, #2
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d005      	beq.n	8009fd4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2202      	movs	r2, #2
 8009fce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e037      	b.n	800a044 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f003 0320 	and.w	r3, r3, #32
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2220      	movs	r2, #32
 8009fe8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009fea:	2320      	movs	r3, #32
 8009fec:	e02a      	b.n	800a044 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	061a      	lsls	r2, r3, #24
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a004:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a00e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	0e1b      	lsrs	r3, r3, #24
 800a014:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	601a      	str	r2, [r3, #0]
    scr++;
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	3304      	adds	r3, #4
 800a01e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	061a      	lsls	r2, r3, #24
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	021b      	lsls	r3, r3, #8
 800a028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a02c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	0a1b      	lsrs	r3, r3, #8
 800a032:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a036:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	0e1b      	lsrs	r3, r3, #24
 800a03c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a040:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	373c      	adds	r7, #60	; 0x3c
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd90      	pop	{r4, r7, pc}

0800a04c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b086      	sub	sp, #24
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a058:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d03f      	beq.n	800a0e6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	e033      	b.n	800a0d4 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4618      	mov	r0, r3
 800a072:	f002 f9ff 	bl	800c474 <SDMMC_ReadFIFO>
 800a076:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	3b01      	subs	r3, #1
 800a08a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	0a1b      	lsrs	r3, r3, #8
 800a090:	b2da      	uxtb	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	3301      	adds	r3, #1
 800a09a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	0c1b      	lsrs	r3, r3, #16
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	0e1b      	lsrs	r3, r3, #24
 800a0bc:	b2da      	uxtb	r2, r3
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b07      	cmp	r3, #7
 800a0d8:	d9c8      	bls.n	800a06c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a0e6:	bf00      	nop
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b086      	sub	sp, #24
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d043      	beq.n	800a190 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a108:	2300      	movs	r3, #0
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e037      	b.n	800a17e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3301      	adds	r3, #1
 800a118:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	021a      	lsls	r2, r3, #8
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	4313      	orrs	r3, r2
 800a12a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	3301      	adds	r3, #1
 800a130:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	3b01      	subs	r3, #1
 800a136:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	041a      	lsls	r2, r3, #16
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4313      	orrs	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3301      	adds	r3, #1
 800a148:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	061a      	lsls	r2, r3, #24
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4313      	orrs	r3, r2
 800a15a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	3b01      	subs	r3, #1
 800a166:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f107 0208 	add.w	r2, r7, #8
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f002 f98b 	bl	800c48e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	3301      	adds	r3, #1
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	2b07      	cmp	r3, #7
 800a182:	d9c4      	bls.n	800a10e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a190:	bf00      	nop
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e084      	b.n	800a2b4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d106      	bne.n	800a1ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7fa fa0b 	bl	80045e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1ea:	d902      	bls.n	800a1f2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	60fb      	str	r3, [r7, #12]
 800a1f0:	e002      	b.n	800a1f8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a200:	d007      	beq.n	800a212 <HAL_SPI_Init+0x7a>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a20a:	d002      	beq.n	800a212 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10b      	bne.n	800a232 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	68db      	ldr	r3, [r3, #12]
 800a21e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a222:	d903      	bls.n	800a22c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	631a      	str	r2, [r3, #48]	; 0x30
 800a22a:	e002      	b.n	800a232 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	689b      	ldr	r3, [r3, #8]
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	431a      	orrs	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a250:	431a      	orrs	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	69db      	ldr	r3, [r3, #28]
 800a256:	431a      	orrs	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	ea42 0103 	orr.w	r1, r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	430a      	orrs	r2, r1
 800a26a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	699b      	ldr	r3, [r3, #24]
 800a270:	0c1b      	lsrs	r3, r3, #16
 800a272:	f003 0204 	and.w	r2, r3, #4
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a27a:	431a      	orrs	r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a280:	431a      	orrs	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	ea42 0103 	orr.w	r1, r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	430a      	orrs	r2, r1
 800a292:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	69da      	ldr	r2, [r3, #28]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d110      	bne.n	800a2f8 <HAL_SPI_Receive_IT+0x3c>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2de:	d10b      	bne.n	800a2f8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a2e8:	88fb      	ldrh	r3, [r7, #6]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	68b9      	ldr	r1, [r7, #8]
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 f88c 	bl	800a40c <HAL_SPI_TransmitReceive_IT>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	e081      	b.n	800a3fc <HAL_SPI_Receive_IT+0x140>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <HAL_SPI_Receive_IT+0x4a>
 800a302:	2302      	movs	r3, #2
 800a304:	e07a      	b.n	800a3fc <HAL_SPI_Receive_IT+0x140>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2201      	movs	r2, #1
 800a30a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a314:	b2db      	uxtb	r3, r3
 800a316:	2b01      	cmp	r3, #1
 800a318:	d002      	beq.n	800a320 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800a31a:	2302      	movs	r3, #2
 800a31c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a31e:	e068      	b.n	800a3f2 <HAL_SPI_Receive_IT+0x136>
  }

  if ((pData == NULL) || (Size == 0U))
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <HAL_SPI_Receive_IT+0x70>
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a330:	e05f      	b.n	800a3f2 <HAL_SPI_Receive_IT+0x136>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2204      	movs	r2, #4
 800a336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2200      	movs	r2, #0
 800a33e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	88fa      	ldrh	r2, [r7, #6]
 800a34a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a376:	d90b      	bls.n	800a390 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a386:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4a1e      	ldr	r2, [pc, #120]	; (800a404 <HAL_SPI_Receive_IT+0x148>)
 800a38c:	64da      	str	r2, [r3, #76]	; 0x4c
 800a38e:	e00a      	b.n	800a3a6 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a39e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4a19      	ldr	r2, [pc, #100]	; (800a408 <HAL_SPI_Receive_IT+0x14c>)
 800a3a4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ae:	d107      	bne.n	800a3c0 <HAL_SPI_Receive_IT+0x104>
  {
    SPI_1LINE_RX(hspi);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a3be:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685a      	ldr	r2, [r3, #4]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a3ce:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b40      	cmp	r3, #64	; 0x40
 800a3dc:	d008      	beq.n	800a3f0 <HAL_SPI_Receive_IT+0x134>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e000      	b.n	800a3f2 <HAL_SPI_Receive_IT+0x136>
  }

error :
 800a3f0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	0800aa25 	.word	0x0800aa25
 800a408:	0800a9d5 	.word	0x0800a9d5

0800a40c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
 800a418:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a424:	2b01      	cmp	r3, #1
 800a426:	d101      	bne.n	800a42c <HAL_SPI_TransmitReceive_IT+0x20>
 800a428:	2302      	movs	r3, #2
 800a42a:	e091      	b.n	800a550 <HAL_SPI_TransmitReceive_IT+0x144>
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a43a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a442:	7dbb      	ldrb	r3, [r7, #22]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d00d      	beq.n	800a464 <HAL_SPI_TransmitReceive_IT+0x58>
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a44e:	d106      	bne.n	800a45e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <HAL_SPI_TransmitReceive_IT+0x52>
 800a458:	7dbb      	ldrb	r3, [r7, #22]
 800a45a:	2b04      	cmp	r3, #4
 800a45c:	d002      	beq.n	800a464 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800a45e:	2302      	movs	r3, #2
 800a460:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a462:	e070      	b.n	800a546 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <HAL_SPI_TransmitReceive_IT+0x6a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d002      	beq.n	800a476 <HAL_SPI_TransmitReceive_IT+0x6a>
 800a470:	887b      	ldrh	r3, [r7, #2]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d102      	bne.n	800a47c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800a476:	2301      	movs	r3, #1
 800a478:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a47a:	e064      	b.n	800a546 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a482:	b2db      	uxtb	r3, r3
 800a484:	2b04      	cmp	r3, #4
 800a486:	d003      	beq.n	800a490 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2205      	movs	r2, #5
 800a48c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	887a      	ldrh	r2, [r7, #2]
 800a4a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	887a      	ldrh	r2, [r7, #2]
 800a4a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	887a      	ldrh	r2, [r7, #2]
 800a4b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	887a      	ldrh	r2, [r7, #2]
 800a4ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4c6:	d906      	bls.n	800a4d6 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4a24      	ldr	r2, [pc, #144]	; (800a55c <HAL_SPI_TransmitReceive_IT+0x150>)
 800a4cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	4a23      	ldr	r2, [pc, #140]	; (800a560 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a4d2:	651a      	str	r2, [r3, #80]	; 0x50
 800a4d4:	e005      	b.n	800a4e2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	4a22      	ldr	r2, [pc, #136]	; (800a564 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a4da:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4a22      	ldr	r2, [pc, #136]	; (800a568 <HAL_SPI_TransmitReceive_IT+0x15c>)
 800a4e0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a4ea:	d802      	bhi.n	800a4f2 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a4ec:	887b      	ldrh	r3, [r7, #2]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d908      	bls.n	800a504 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	e007      	b.n	800a514 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a512:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	685a      	ldr	r2, [r3, #4]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a522:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b40      	cmp	r3, #64	; 0x40
 800a530:	d008      	beq.n	800a544 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	e000      	b.n	800a546 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 800a544:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	371c      	adds	r7, #28
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr
 800a55c:	0800a90f 	.word	0x0800a90f
 800a560:	0800a975 	.word	0x0800a975
 800a564:	0800a7bf 	.word	0x0800a7bf
 800a568:	0800a87d 	.word	0x0800a87d

0800a56c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b088      	sub	sp, #32
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	099b      	lsrs	r3, r3, #6
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10f      	bne.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	099b      	lsrs	r3, r3, #6
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d004      	beq.n	800a5b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
    return;
 800a5ae:	e0d8      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	085b      	lsrs	r3, r3, #1
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00a      	beq.n	800a5d2 <HAL_SPI_IRQHandler+0x66>
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	09db      	lsrs	r3, r3, #7
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d004      	beq.n	800a5d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	4798      	blx	r3
    return;
 800a5d0:	e0c7      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	095b      	lsrs	r3, r3, #5
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10c      	bne.n	800a5f8 <HAL_SPI_IRQHandler+0x8c>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	099b      	lsrs	r3, r3, #6
 800a5e2:	f003 0301 	and.w	r3, r3, #1
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d106      	bne.n	800a5f8 <HAL_SPI_IRQHandler+0x8c>
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 0301 	and.w	r3, r3, #1
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	f000 80b5 	beq.w	800a762 <HAL_SPI_IRQHandler+0x1f6>
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 80ae 	beq.w	800a762 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	099b      	lsrs	r3, r3, #6
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d023      	beq.n	800a65a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d011      	beq.n	800a642 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a622:	f043 0204 	orr.w	r2, r3, #4
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a62a:	2300      	movs	r3, #0
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	617b      	str	r3, [r7, #20]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	617b      	str	r3, [r7, #20]
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	e00b      	b.n	800a65a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a642:	2300      	movs	r3, #0
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	613b      	str	r3, [r7, #16]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	613b      	str	r3, [r7, #16]
 800a656:	693b      	ldr	r3, [r7, #16]
        return;
 800a658:	e083      	b.n	800a762 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	095b      	lsrs	r3, r3, #5
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b00      	cmp	r3, #0
 800a664:	d014      	beq.n	800a690 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a66a:	f043 0201 	orr.w	r2, r3, #1
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00c      	beq.n	800a6b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6a0:	f043 0208 	orr.w	r2, r3, #8
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	60bb      	str	r3, [r7, #8]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	60bb      	str	r3, [r7, #8]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d050      	beq.n	800a760 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	685a      	ldr	r2, [r3, #4]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a6cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d104      	bne.n	800a6ea <HAL_SPI_IRQHandler+0x17e>
 800a6e0:	69fb      	ldr	r3, [r7, #28]
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d034      	beq.n	800a754 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	685a      	ldr	r2, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f022 0203 	bic.w	r2, r2, #3
 800a6f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d011      	beq.n	800a726 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a706:	4a18      	ldr	r2, [pc, #96]	; (800a768 <HAL_SPI_IRQHandler+0x1fc>)
 800a708:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fb fb96 	bl	8005e40 <HAL_DMA_Abort_IT>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d005      	beq.n	800a726 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a71e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d016      	beq.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a732:	4a0d      	ldr	r2, [pc, #52]	; (800a768 <HAL_SPI_IRQHandler+0x1fc>)
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7fb fb80 	bl	8005e40 <HAL_DMA_Abort_IT>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00a      	beq.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a74a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a752:	e003      	b.n	800a75c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f813 	bl	800a780 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a75a:	e000      	b.n	800a75e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a75c:	bf00      	nop
    return;
 800a75e:	bf00      	nop
 800a760:	bf00      	nop
  }
}
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	0800a795 	.word	0x0800a795

0800a76c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f7ff ffe5 	bl	800a780 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7b6:	bf00      	nop
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a7be:	b580      	push	{r7, lr}
 800a7c0:	b082      	sub	sp, #8
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d923      	bls.n	800a81a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68da      	ldr	r2, [r3, #12]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7dc:	b292      	uxth	r2, r2
 800a7de:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e4:	1c9a      	adds	r2, r3, #2
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	3b02      	subs	r3, #2
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a802:	b29b      	uxth	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	d11f      	bne.n	800a848 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	e016      	b.n	800a848 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f103 020c 	add.w	r2, r3, #12
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a826:	7812      	ldrb	r2, [r2, #0]
 800a828:	b2d2      	uxtb	r2, r2
 800a82a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a830:	1c5a      	adds	r2, r3, #1
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	3b01      	subs	r3, #1
 800a840:	b29a      	uxth	r2, r3
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10f      	bne.n	800a874 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	685a      	ldr	r2, [r3, #4]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800a862:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a868:	b29b      	uxth	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d102      	bne.n	800a874 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 fa73 	bl	800ad5a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b082      	sub	sp, #8
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a888:	b29b      	uxth	r3, r3
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d912      	bls.n	800a8b4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a892:	881a      	ldrh	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a89e:	1c9a      	adds	r2, r3, #2
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	3b02      	subs	r3, #2
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a8b2:	e012      	b.n	800a8da <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	330c      	adds	r3, #12
 800a8be:	7812      	ldrb	r2, [r2, #0]
 800a8c0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c6:	1c5a      	adds	r2, r3, #1
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d110      	bne.n	800a906 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	685a      	ldr	r2, [r3, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8f2:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fa2a 	bl	800ad5a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a906:	bf00      	nop
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b082      	sub	sp, #8
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	68da      	ldr	r2, [r3, #12]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	b292      	uxth	r2, r2
 800a922:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a928:	1c9a      	adds	r2, r3, #2
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a934:	b29b      	uxth	r3, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	b29a      	uxth	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a946:	b29b      	uxth	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10f      	bne.n	800a96c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a95a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a960:	b29b      	uxth	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d102      	bne.n	800a96c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f9f7 	bl	800ad5a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a980:	881a      	ldrh	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	1c9a      	adds	r2, r3, #2
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d110      	bne.n	800a9cc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9b8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d102      	bne.n	800a9cc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f9c7 	bl	800ad5a <SPI_CloseRxTx_ISR>
    }
  }
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f103 020c 	add.w	r2, r3, #12
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e8:	7812      	ldrb	r2, [r2, #0]
 800a9ea:	b2d2      	uxtb	r2, r2
 800a9ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f9e1 	bl	800adde <SPI_CloseRx_ISR>
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa36:	b292      	uxth	r2, r2
 800aa38:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3e:	1c9a      	adds	r2, r3, #2
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f000 f9bb 	bl	800adde <SPI_CloseRx_ISR>
  }
}
 800aa68:	bf00      	nop
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aa80:	e04c      	b.n	800ab1c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa88:	d048      	beq.n	800ab1c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800aa8a:	f7fa ffbb 	bl	8005a04 <HAL_GetTick>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d902      	bls.n	800aaa0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d13d      	bne.n	800ab1c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685a      	ldr	r2, [r3, #4]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aaae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aab8:	d111      	bne.n	800aade <SPI_WaitFlagStateUntilTimeout+0x6e>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aac2:	d004      	beq.n	800aace <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aacc:	d107      	bne.n	800aade <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aadc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aae6:	d10f      	bne.n	800ab08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e00f      	b.n	800ab3c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	4013      	ands	r3, r2
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	bf0c      	ite	eq
 800ab2c:	2301      	moveq	r3, #1
 800ab2e:	2300      	movne	r3, #0
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	461a      	mov	r2, r3
 800ab34:	79fb      	ldrb	r3, [r7, #7]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d1a3      	bne.n	800aa82 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800ab52:	e057      	b.n	800ac04 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ab5a:	d106      	bne.n	800ab6a <SPI_WaitFifoStateUntilTimeout+0x26>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab70:	d048      	beq.n	800ac04 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ab72:	f7fa ff47 	bl	8005a04 <HAL_GetTick>
 800ab76:	4602      	mov	r2, r0
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d902      	bls.n	800ab88 <SPI_WaitFifoStateUntilTimeout+0x44>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d13d      	bne.n	800ac04 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ab96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aba0:	d111      	bne.n	800abc6 <SPI_WaitFifoStateUntilTimeout+0x82>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abaa:	d004      	beq.n	800abb6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb4:	d107      	bne.n	800abc6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800abc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abce:	d10f      	bne.n	800abf0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800abee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ac00:	2303      	movs	r3, #3
 800ac02:	e008      	b.n	800ac16 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d19f      	bne.n	800ab54 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}

0800ac1e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ac1e:	b580      	push	{r7, lr}
 800ac20:	b086      	sub	sp, #24
 800ac22:	af02      	add	r7, sp, #8
 800ac24:	60f8      	str	r0, [r7, #12]
 800ac26:	60b9      	str	r1, [r7, #8]
 800ac28:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac32:	d111      	bne.n	800ac58 <SPI_EndRxTransaction+0x3a>
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	689b      	ldr	r3, [r3, #8]
 800ac38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac3c:	d004      	beq.n	800ac48 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac46:	d107      	bne.n	800ac58 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac56:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2180      	movs	r1, #128	; 0x80
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff ff04 	bl	800aa70 <SPI_WaitFlagStateUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac72:	f043 0220 	orr.w	r2, r3, #32
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e023      	b.n	800acc6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ac86:	d11d      	bne.n	800acc4 <SPI_EndRxTransaction+0xa6>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac90:	d004      	beq.n	800ac9c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac9a:	d113      	bne.n	800acc4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff ff4b 	bl	800ab44 <SPI_WaitFifoStateUntilTimeout>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb8:	f043 0220 	orr.w	r2, r3, #32
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e000      	b.n	800acc6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b086      	sub	sp, #24
 800acd2:	af02      	add	r7, sp, #8
 800acd4:	60f8      	str	r0, [r7, #12]
 800acd6:	60b9      	str	r1, [r7, #8]
 800acd8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff ff2c 	bl	800ab44 <SPI_WaitFifoStateUntilTimeout>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d007      	beq.n	800ad02 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acf6:	f043 0220 	orr.w	r2, r3, #32
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	e027      	b.n	800ad52 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	2180      	movs	r1, #128	; 0x80
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7ff feaf 	bl	800aa70 <SPI_WaitFlagStateUntilTimeout>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d007      	beq.n	800ad28 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad1c:	f043 0220 	orr.w	r2, r3, #32
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad24:	2303      	movs	r3, #3
 800ad26:	e014      	b.n	800ad52 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7ff ff05 	bl	800ab44 <SPI_WaitFifoStateUntilTimeout>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d007      	beq.n	800ad50 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad44:	f043 0220 	orr.w	r2, r3, #32
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e000      	b.n	800ad52 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ad62:	f7fa fe4f 	bl	8005a04 <HAL_GetTick>
 800ad66:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0220 	bic.w	r2, r2, #32
 800ad76:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	2164      	movs	r1, #100	; 0x64
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff ffa6 	bl	800acce <SPI_EndRxTxTransaction>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d005      	beq.n	800ad94 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad8c:	f043 0220 	orr.w	r2, r3, #32
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d115      	bne.n	800adc8 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d107      	bne.n	800adb8 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7fa faeb 	bl	800538c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800adb6:	e00e      	b.n	800add6 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff fcd3 	bl	800a76c <HAL_SPI_TxRxCpltCallback>
}
 800adc6:	e006      	b.n	800add6 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff fcd5 	bl	800a780 <HAL_SPI_ErrorCallback>
}
 800add6:	bf00      	nop
 800add8:	3710      	adds	r7, #16
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800adf4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800adf6:	f7fa fe05 	bl	8005a04 <HAL_GetTick>
 800adfa:	4603      	mov	r3, r0
 800adfc:	461a      	mov	r2, r3
 800adfe:	2164      	movs	r1, #100	; 0x64
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ff0c 	bl	800ac1e <SPI_EndRxTransaction>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae10:	f043 0220 	orr.w	r2, r3, #32
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d103      	bne.n	800ae30 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f7fa faaf 	bl	800538c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800ae2e:	e002      	b.n	800ae36 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f7ff fca5 	bl	800a780 <HAL_SPI_ErrorCallback>
}
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b082      	sub	sp, #8
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e01d      	b.n	800ae8c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 f815 	bl	800ae94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	3304      	adds	r3, #4
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	4610      	mov	r0, r2
 800ae7e:	f000 f985 	bl	800b18c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	68da      	ldr	r2, [r3, #12]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f042 0201 	orr.w	r2, r2, #1
 800aebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689a      	ldr	r2, [r3, #8]
 800aec6:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <HAL_TIM_Base_Start_IT+0x50>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b06      	cmp	r3, #6
 800aed0:	d00b      	beq.n	800aeea <HAL_TIM_Base_Start_IT+0x42>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aed8:	d007      	beq.n	800aeea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f042 0201 	orr.w	r2, r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	00010007 	.word	0x00010007

0800aefc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d122      	bne.n	800af58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	f003 0302 	and.w	r3, r3, #2
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d11b      	bne.n	800af58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f06f 0202 	mvn.w	r2, #2
 800af28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	f003 0303 	and.w	r3, r3, #3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d003      	beq.n	800af46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f905 	bl	800b14e <HAL_TIM_IC_CaptureCallback>
 800af44:	e005      	b.n	800af52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f8f7 	bl	800b13a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f908 	bl	800b162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	f003 0304 	and.w	r3, r3, #4
 800af62:	2b04      	cmp	r3, #4
 800af64:	d122      	bne.n	800afac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b04      	cmp	r3, #4
 800af72:	d11b      	bne.n	800afac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f06f 0204 	mvn.w	r2, #4
 800af7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2202      	movs	r2, #2
 800af82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	699b      	ldr	r3, [r3, #24]
 800af8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d003      	beq.n	800af9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f8db 	bl	800b14e <HAL_TIM_IC_CaptureCallback>
 800af98:	e005      	b.n	800afa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f8cd 	bl	800b13a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f8de 	bl	800b162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f003 0308 	and.w	r3, r3, #8
 800afb6:	2b08      	cmp	r3, #8
 800afb8:	d122      	bne.n	800b000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	f003 0308 	and.w	r3, r3, #8
 800afc4:	2b08      	cmp	r3, #8
 800afc6:	d11b      	bne.n	800b000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f06f 0208 	mvn.w	r2, #8
 800afd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2204      	movs	r2, #4
 800afd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	69db      	ldr	r3, [r3, #28]
 800afde:	f003 0303 	and.w	r3, r3, #3
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d003      	beq.n	800afee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f8b1 	bl	800b14e <HAL_TIM_IC_CaptureCallback>
 800afec:	e005      	b.n	800affa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f8a3 	bl	800b13a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 f8b4 	bl	800b162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	f003 0310 	and.w	r3, r3, #16
 800b00a:	2b10      	cmp	r3, #16
 800b00c:	d122      	bne.n	800b054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	f003 0310 	and.w	r3, r3, #16
 800b018:	2b10      	cmp	r3, #16
 800b01a:	d11b      	bne.n	800b054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f06f 0210 	mvn.w	r2, #16
 800b024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2208      	movs	r2, #8
 800b02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	69db      	ldr	r3, [r3, #28]
 800b032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b036:	2b00      	cmp	r3, #0
 800b038:	d003      	beq.n	800b042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f887 	bl	800b14e <HAL_TIM_IC_CaptureCallback>
 800b040:	e005      	b.n	800b04e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f879 	bl	800b13a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 f88a 	bl	800b162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2200      	movs	r2, #0
 800b052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d10e      	bne.n	800b080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d107      	bne.n	800b080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f06f 0201 	mvn.w	r2, #1
 800b078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f7f9 f984 	bl	8004388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b08a:	2b80      	cmp	r3, #128	; 0x80
 800b08c:	d10e      	bne.n	800b0ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b098:	2b80      	cmp	r3, #128	; 0x80
 800b09a:	d107      	bne.n	800b0ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b0a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f91a 	bl	800b2e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ba:	d10e      	bne.n	800b0da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0c6:	2b80      	cmp	r3, #128	; 0x80
 800b0c8:	d107      	bne.n	800b0da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b0d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f90d 	bl	800b2f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e4:	2b40      	cmp	r3, #64	; 0x40
 800b0e6:	d10e      	bne.n	800b106 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68db      	ldr	r3, [r3, #12]
 800b0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f2:	2b40      	cmp	r3, #64	; 0x40
 800b0f4:	d107      	bne.n	800b106 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b0fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f838 	bl	800b176 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b20      	cmp	r3, #32
 800b112:	d10e      	bne.n	800b132 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	f003 0320 	and.w	r3, r3, #32
 800b11e:	2b20      	cmp	r3, #32
 800b120:	d107      	bne.n	800b132 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f06f 0220 	mvn.w	r2, #32
 800b12a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f8cd 	bl	800b2cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b14e:	b480      	push	{r7}
 800b150:	b083      	sub	sp, #12
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b156:	bf00      	nop
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b162:	b480      	push	{r7}
 800b164:	b083      	sub	sp, #12
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b16a:	bf00      	nop
 800b16c:	370c      	adds	r7, #12
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b17e:	bf00      	nop
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
	...

0800b18c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a40      	ldr	r2, [pc, #256]	; (800b2a0 <TIM_Base_SetConfig+0x114>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d013      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1aa:	d00f      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a3d      	ldr	r2, [pc, #244]	; (800b2a4 <TIM_Base_SetConfig+0x118>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d00b      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a3c      	ldr	r2, [pc, #240]	; (800b2a8 <TIM_Base_SetConfig+0x11c>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d007      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a3b      	ldr	r2, [pc, #236]	; (800b2ac <TIM_Base_SetConfig+0x120>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d003      	beq.n	800b1cc <TIM_Base_SetConfig+0x40>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a3a      	ldr	r2, [pc, #232]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d108      	bne.n	800b1de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a2f      	ldr	r2, [pc, #188]	; (800b2a0 <TIM_Base_SetConfig+0x114>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d02b      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ec:	d027      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a2c      	ldr	r2, [pc, #176]	; (800b2a4 <TIM_Base_SetConfig+0x118>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d023      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a2b      	ldr	r2, [pc, #172]	; (800b2a8 <TIM_Base_SetConfig+0x11c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d01f      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a2a      	ldr	r2, [pc, #168]	; (800b2ac <TIM_Base_SetConfig+0x120>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d01b      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a29      	ldr	r2, [pc, #164]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d017      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a28      	ldr	r2, [pc, #160]	; (800b2b4 <TIM_Base_SetConfig+0x128>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d013      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a27      	ldr	r2, [pc, #156]	; (800b2b8 <TIM_Base_SetConfig+0x12c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d00f      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a26      	ldr	r2, [pc, #152]	; (800b2bc <TIM_Base_SetConfig+0x130>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d00b      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a25      	ldr	r2, [pc, #148]	; (800b2c0 <TIM_Base_SetConfig+0x134>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d007      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a24      	ldr	r2, [pc, #144]	; (800b2c4 <TIM_Base_SetConfig+0x138>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d003      	beq.n	800b23e <TIM_Base_SetConfig+0xb2>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a23      	ldr	r2, [pc, #140]	; (800b2c8 <TIM_Base_SetConfig+0x13c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d108      	bne.n	800b250 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b244:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689a      	ldr	r2, [r3, #8]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	681a      	ldr	r2, [r3, #0]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a0a      	ldr	r2, [pc, #40]	; (800b2a0 <TIM_Base_SetConfig+0x114>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d003      	beq.n	800b284 <TIM_Base_SetConfig+0xf8>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a0c      	ldr	r2, [pc, #48]	; (800b2b0 <TIM_Base_SetConfig+0x124>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d103      	bne.n	800b28c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	691a      	ldr	r2, [r3, #16]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2201      	movs	r2, #1
 800b290:	615a      	str	r2, [r3, #20]
}
 800b292:	bf00      	nop
 800b294:	3714      	adds	r7, #20
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	40010000 	.word	0x40010000
 800b2a4:	40000400 	.word	0x40000400
 800b2a8:	40000800 	.word	0x40000800
 800b2ac:	40000c00 	.word	0x40000c00
 800b2b0:	40010400 	.word	0x40010400
 800b2b4:	40014000 	.word	0x40014000
 800b2b8:	40014400 	.word	0x40014400
 800b2bc:	40014800 	.word	0x40014800
 800b2c0:	40001800 	.word	0x40001800
 800b2c4:	40001c00 	.word	0x40001c00
 800b2c8:	40002000 	.word	0x40002000

0800b2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2e8:	bf00      	nop
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2fc:	bf00      	nop
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	e040      	b.n	800b39c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d106      	bne.n	800b330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7f9 fa44 	bl	80047b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2224      	movs	r2, #36	; 0x24
 800b334:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 0201 	bic.w	r2, r2, #1
 800b344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 fb7c 	bl	800ba44 <UART_SetConfig>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d101      	bne.n	800b356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e022      	b.n	800b39c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d002      	beq.n	800b364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fe1a 	bl	800bf98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	685a      	ldr	r2, [r3, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0201 	orr.w	r2, r2, #1
 800b392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fea1 	bl	800c0dc <UART_CheckIdleState>
 800b39a:	4603      	mov	r3, r0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b08a      	sub	sp, #40	; 0x28
 800b3a8:	af02      	add	r7, sp, #8
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	60b9      	str	r1, [r7, #8]
 800b3ae:	603b      	str	r3, [r7, #0]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3b8:	2b20      	cmp	r3, #32
 800b3ba:	d17f      	bne.n	800b4bc <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <HAL_UART_Transmit+0x24>
 800b3c2:	88fb      	ldrh	r3, [r7, #6]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e078      	b.n	800b4be <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d101      	bne.n	800b3da <HAL_UART_Transmit+0x36>
 800b3d6:	2302      	movs	r3, #2
 800b3d8:	e071      	b.n	800b4be <HAL_UART_Transmit+0x11a>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2201      	movs	r2, #1
 800b3de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2221      	movs	r2, #33	; 0x21
 800b3ec:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b3ee:	f7fa fb09 	bl	8005a04 <HAL_GetTick>
 800b3f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	88fa      	ldrh	r2, [r7, #6]
 800b3f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	88fa      	ldrh	r2, [r7, #6]
 800b400:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40c:	d108      	bne.n	800b420 <HAL_UART_Transmit+0x7c>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d104      	bne.n	800b420 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	61bb      	str	r3, [r7, #24]
 800b41e:	e003      	b.n	800b428 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b424:	2300      	movs	r3, #0
 800b426:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800b430:	e02c      	b.n	800b48c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2200      	movs	r2, #0
 800b43a:	2180      	movs	r1, #128	; 0x80
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f000 fe7c 	bl	800c13a <UART_WaitOnFlagUntilTimeout>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800b448:	2303      	movs	r3, #3
 800b44a:	e038      	b.n	800b4be <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10b      	bne.n	800b46a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	461a      	mov	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b460:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	3302      	adds	r3, #2
 800b466:	61bb      	str	r3, [r7, #24]
 800b468:	e007      	b.n	800b47a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	781a      	ldrb	r2, [r3, #0]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	3301      	adds	r3, #1
 800b478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1cc      	bne.n	800b432 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2140      	movs	r1, #64	; 0x40
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 fe49 	bl	800c13a <UART_WaitOnFlagUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b4ae:	2303      	movs	r3, #3
 800b4b0:	e005      	b.n	800b4be <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	e000      	b.n	800b4be <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800b4bc:	2302      	movs	r3, #2
  }
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3720      	adds	r7, #32
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b08a      	sub	sp, #40	; 0x28
 800b4ca:	af02      	add	r7, sp, #8
 800b4cc:	60f8      	str	r0, [r7, #12]
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	603b      	str	r3, [r7, #0]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4da:	2b20      	cmp	r3, #32
 800b4dc:	f040 80ba 	bne.w	800b654 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d002      	beq.n	800b4ec <HAL_UART_Receive+0x26>
 800b4e6:	88fb      	ldrh	r3, [r7, #6]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e0b2      	b.n	800b656 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d101      	bne.n	800b4fe <HAL_UART_Receive+0x38>
 800b4fa:	2302      	movs	r3, #2
 800b4fc:	e0ab      	b.n	800b656 <HAL_UART_Receive+0x190>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2222      	movs	r2, #34	; 0x22
 800b510:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800b512:	f7fa fa77 	bl	8005a04 <HAL_GetTick>
 800b516:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	88fa      	ldrh	r2, [r7, #6]
 800b51c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	88fa      	ldrh	r2, [r7, #6]
 800b524:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b530:	d10e      	bne.n	800b550 <HAL_UART_Receive+0x8a>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d105      	bne.n	800b546 <HAL_UART_Receive+0x80>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b540:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b544:	e02d      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	22ff      	movs	r2, #255	; 0xff
 800b54a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b54e:	e028      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d10d      	bne.n	800b574 <HAL_UART_Receive+0xae>
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <HAL_UART_Receive+0xa4>
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	22ff      	movs	r2, #255	; 0xff
 800b564:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b568:	e01b      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	227f      	movs	r2, #127	; 0x7f
 800b56e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b572:	e016      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b57c:	d10d      	bne.n	800b59a <HAL_UART_Receive+0xd4>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	691b      	ldr	r3, [r3, #16]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d104      	bne.n	800b590 <HAL_UART_Receive+0xca>
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	227f      	movs	r2, #127	; 0x7f
 800b58a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b58e:	e008      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	223f      	movs	r2, #63	; 0x3f
 800b594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b598:	e003      	b.n	800b5a2 <HAL_UART_Receive+0xdc>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b5a8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5b2:	d108      	bne.n	800b5c6 <HAL_UART_Receive+0x100>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d104      	bne.n	800b5c6 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	61bb      	str	r3, [r7, #24]
 800b5c4:	e003      	b.n	800b5ce <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800b5d6:	e032      	b.n	800b63e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	2120      	movs	r1, #32
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f000 fda9 	bl	800c13a <UART_WaitOnFlagUntilTimeout>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d001      	beq.n	800b5f2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e031      	b.n	800b656 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10c      	bne.n	800b612 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	b29a      	uxth	r2, r3
 800b600:	8a7b      	ldrh	r3, [r7, #18]
 800b602:	4013      	ands	r3, r2
 800b604:	b29a      	uxth	r2, r3
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	3302      	adds	r3, #2
 800b60e:	61bb      	str	r3, [r7, #24]
 800b610:	e00c      	b.n	800b62c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	8a7b      	ldrh	r3, [r7, #18]
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	4013      	ands	r3, r2
 800b620:	b2da      	uxtb	r2, r3
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b626:	69fb      	ldr	r3, [r7, #28]
 800b628:	3301      	adds	r3, #1
 800b62a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b632:	b29b      	uxth	r3, r3
 800b634:	3b01      	subs	r3, #1
 800b636:	b29a      	uxth	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b644:	b29b      	uxth	r3, r3
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1c6      	bne.n	800b5d8 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2220      	movs	r2, #32
 800b64e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b650:	2300      	movs	r3, #0
 800b652:	e000      	b.n	800b656 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800b654:	2302      	movs	r3, #2
  }
}
 800b656:	4618      	mov	r0, r3
 800b658:	3720      	adds	r7, #32
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
	...

0800b660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	60f8      	str	r0, [r7, #12]
 800b668:	60b9      	str	r1, [r7, #8]
 800b66a:	4613      	mov	r3, r2
 800b66c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b672:	2b20      	cmp	r3, #32
 800b674:	f040 808a 	bne.w	800b78c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <HAL_UART_Receive_IT+0x24>
 800b67e:	88fb      	ldrh	r3, [r7, #6]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e082      	b.n	800b78e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d101      	bne.n	800b696 <HAL_UART_Receive_IT+0x36>
 800b692:	2302      	movs	r3, #2
 800b694:	e07b      	b.n	800b78e <HAL_UART_Receive_IT+0x12e>
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2201      	movs	r2, #1
 800b69a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	88fa      	ldrh	r2, [r7, #6]
 800b6a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	88fa      	ldrh	r2, [r7, #6]
 800b6b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c2:	d10e      	bne.n	800b6e2 <HAL_UART_Receive_IT+0x82>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d105      	bne.n	800b6d8 <HAL_UART_Receive_IT+0x78>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b6d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6d6:	e02d      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	22ff      	movs	r2, #255	; 0xff
 800b6dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6e0:	e028      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10d      	bne.n	800b706 <HAL_UART_Receive_IT+0xa6>
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	691b      	ldr	r3, [r3, #16]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d104      	bne.n	800b6fc <HAL_UART_Receive_IT+0x9c>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	22ff      	movs	r2, #255	; 0xff
 800b6f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b6fa:	e01b      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	227f      	movs	r2, #127	; 0x7f
 800b700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b704:	e016      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b70e:	d10d      	bne.n	800b72c <HAL_UART_Receive_IT+0xcc>
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d104      	bne.n	800b722 <HAL_UART_Receive_IT+0xc2>
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	227f      	movs	r2, #127	; 0x7f
 800b71c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b720:	e008      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	223f      	movs	r2, #63	; 0x3f
 800b726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b72a:	e003      	b.n	800b734 <HAL_UART_Receive_IT+0xd4>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2200      	movs	r2, #0
 800b738:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2222      	movs	r2, #34	; 0x22
 800b73e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689a      	ldr	r2, [r3, #8]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 0201 	orr.w	r2, r2, #1
 800b74e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b758:	d107      	bne.n	800b76a <HAL_UART_Receive_IT+0x10a>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d103      	bne.n	800b76a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4a0d      	ldr	r2, [pc, #52]	; (800b79c <HAL_UART_Receive_IT+0x13c>)
 800b766:	661a      	str	r2, [r3, #96]	; 0x60
 800b768:	e002      	b.n	800b770 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	4a0c      	ldr	r2, [pc, #48]	; (800b7a0 <HAL_UART_Receive_IT+0x140>)
 800b76e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b786:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	e000      	b.n	800b78e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b78c:	2302      	movs	r3, #2
  }
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	0800c375 	.word	0x0800c375
 800b7a0:	0800c2cf 	.word	0x0800c2cf

0800b7a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b088      	sub	sp, #32
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	69db      	ldr	r3, [r3, #28]
 800b7b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b7c4:	69fa      	ldr	r2, [r7, #28]
 800b7c6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d113      	bne.n	800b7fc <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b7d4:	69fb      	ldr	r3, [r7, #28]
 800b7d6:	f003 0320 	and.w	r3, r3, #32
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00e      	beq.n	800b7fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	f003 0320 	and.w	r3, r3, #32
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 8100 	beq.w	800b9f2 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	4798      	blx	r3
      }
      return;
 800b7fa:	e0fa      	b.n	800b9f2 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 80d5 	beq.w	800b9ae <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f003 0301 	and.w	r3, r3, #1
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d105      	bne.n	800b81a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b814:	2b00      	cmp	r3, #0
 800b816:	f000 80ca 	beq.w	800b9ae <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00e      	beq.n	800b842 <HAL_UART_IRQHandler+0x9e>
 800b824:	69bb      	ldr	r3, [r7, #24]
 800b826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d009      	beq.n	800b842 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2201      	movs	r2, #1
 800b834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b83a:	f043 0201 	orr.w	r2, r3, #1
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <HAL_UART_IRQHandler+0xc6>
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	f003 0301 	and.w	r3, r3, #1
 800b852:	2b00      	cmp	r3, #0
 800b854:	d009      	beq.n	800b86a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2202      	movs	r2, #2
 800b85c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b862:	f043 0204 	orr.w	r2, r3, #4
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	f003 0304 	and.w	r3, r3, #4
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00e      	beq.n	800b892 <HAL_UART_IRQHandler+0xee>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d009      	beq.n	800b892 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2204      	movs	r2, #4
 800b884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88a:	f043 0202 	orr.w	r2, r3, #2
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	f003 0308 	and.w	r3, r3, #8
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d013      	beq.n	800b8c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	f003 0320 	and.w	r3, r3, #32
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d104      	bne.n	800b8b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2208      	movs	r2, #8
 800b8b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8bc:	f043 0208 	orr.w	r2, r3, #8
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00f      	beq.n	800b8ee <HAL_UART_IRQHandler+0x14a>
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00a      	beq.n	800b8ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b8e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e6:	f043 0220 	orr.w	r2, r3, #32
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d07f      	beq.n	800b9f6 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b900:	69bb      	ldr	r3, [r7, #24]
 800b902:	f003 0320 	and.w	r3, r3, #32
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b91e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b92a:	2b40      	cmp	r3, #64	; 0x40
 800b92c:	d004      	beq.n	800b938 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b934:	2b00      	cmp	r3, #0
 800b936:	d031      	beq.n	800b99c <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fc79 	bl	800c230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	689b      	ldr	r3, [r3, #8]
 800b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b948:	2b40      	cmp	r3, #64	; 0x40
 800b94a:	d123      	bne.n	800b994 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689a      	ldr	r2, [r3, #8]
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b95a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b960:	2b00      	cmp	r3, #0
 800b962:	d013      	beq.n	800b98c <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b968:	4a26      	ldr	r2, [pc, #152]	; (800ba04 <HAL_UART_IRQHandler+0x260>)
 800b96a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b970:	4618      	mov	r0, r3
 800b972:	f7fa fa65 	bl	8005e40 <HAL_DMA_Abort_IT>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d016      	beq.n	800b9aa <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b986:	4610      	mov	r0, r2
 800b988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b98a:	e00e      	b.n	800b9aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f84f 	bl	800ba30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b992:	e00a      	b.n	800b9aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f84b 	bl	800ba30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b99a:	e006      	b.n	800b9aa <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f847 	bl	800ba30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b9a8:	e025      	b.n	800b9f6 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9aa:	bf00      	nop
    return;
 800b9ac:	e023      	b.n	800b9f6 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00d      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d008      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d017      	beq.n	800b9fa <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	4798      	blx	r3
    }
    return;
 800b9d2:	e012      	b.n	800b9fa <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00e      	beq.n	800b9fc <HAL_UART_IRQHandler+0x258>
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 fc57 	bl	800c29c <UART_EndTransmit_IT>
    return;
 800b9ee:	bf00      	nop
 800b9f0:	e004      	b.n	800b9fc <HAL_UART_IRQHandler+0x258>
      return;
 800b9f2:	bf00      	nop
 800b9f4:	e002      	b.n	800b9fc <HAL_UART_IRQHandler+0x258>
    return;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <HAL_UART_IRQHandler+0x258>
    return;
 800b9fa:	bf00      	nop
  }

}
 800b9fc:	3720      	adds	r7, #32
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	0800c271 	.word	0x0800c271

0800ba08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ba24:	bf00      	nop
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b088      	sub	sp, #32
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	689a      	ldr	r2, [r3, #8]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	431a      	orrs	r2, r3
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	4bb1      	ldr	r3, [pc, #708]	; (800bd38 <UART_SetConfig+0x2f4>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	6812      	ldr	r2, [r2, #0]
 800ba7a:	6939      	ldr	r1, [r7, #16]
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68da      	ldr	r2, [r3, #12]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	430a      	orrs	r2, r1
 800ba94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6a1b      	ldr	r3, [r3, #32]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	430a      	orrs	r2, r1
 800bab8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a9f      	ldr	r2, [pc, #636]	; (800bd3c <UART_SetConfig+0x2f8>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d121      	bne.n	800bb08 <UART_SetConfig+0xc4>
 800bac4:	4b9e      	ldr	r3, [pc, #632]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baca:	f003 0303 	and.w	r3, r3, #3
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d816      	bhi.n	800bb00 <UART_SetConfig+0xbc>
 800bad2:	a201      	add	r2, pc, #4	; (adr r2, 800bad8 <UART_SetConfig+0x94>)
 800bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad8:	0800bae9 	.word	0x0800bae9
 800badc:	0800baf5 	.word	0x0800baf5
 800bae0:	0800baef 	.word	0x0800baef
 800bae4:	0800bafb 	.word	0x0800bafb
 800bae8:	2301      	movs	r3, #1
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e151      	b.n	800bd92 <UART_SetConfig+0x34e>
 800baee:	2302      	movs	r3, #2
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e14e      	b.n	800bd92 <UART_SetConfig+0x34e>
 800baf4:	2304      	movs	r3, #4
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e14b      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bafa:	2308      	movs	r3, #8
 800bafc:	77fb      	strb	r3, [r7, #31]
 800bafe:	e148      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb00:	2310      	movs	r3, #16
 800bb02:	77fb      	strb	r3, [r7, #31]
 800bb04:	bf00      	nop
 800bb06:	e144      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	4a8d      	ldr	r2, [pc, #564]	; (800bd44 <UART_SetConfig+0x300>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d134      	bne.n	800bb7c <UART_SetConfig+0x138>
 800bb12:	4b8b      	ldr	r3, [pc, #556]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bb14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb18:	f003 030c 	and.w	r3, r3, #12
 800bb1c:	2b0c      	cmp	r3, #12
 800bb1e:	d829      	bhi.n	800bb74 <UART_SetConfig+0x130>
 800bb20:	a201      	add	r2, pc, #4	; (adr r2, 800bb28 <UART_SetConfig+0xe4>)
 800bb22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb26:	bf00      	nop
 800bb28:	0800bb5d 	.word	0x0800bb5d
 800bb2c:	0800bb75 	.word	0x0800bb75
 800bb30:	0800bb75 	.word	0x0800bb75
 800bb34:	0800bb75 	.word	0x0800bb75
 800bb38:	0800bb69 	.word	0x0800bb69
 800bb3c:	0800bb75 	.word	0x0800bb75
 800bb40:	0800bb75 	.word	0x0800bb75
 800bb44:	0800bb75 	.word	0x0800bb75
 800bb48:	0800bb63 	.word	0x0800bb63
 800bb4c:	0800bb75 	.word	0x0800bb75
 800bb50:	0800bb75 	.word	0x0800bb75
 800bb54:	0800bb75 	.word	0x0800bb75
 800bb58:	0800bb6f 	.word	0x0800bb6f
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	77fb      	strb	r3, [r7, #31]
 800bb60:	e117      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb62:	2302      	movs	r3, #2
 800bb64:	77fb      	strb	r3, [r7, #31]
 800bb66:	e114      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	77fb      	strb	r3, [r7, #31]
 800bb6c:	e111      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	77fb      	strb	r3, [r7, #31]
 800bb72:	e10e      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb74:	2310      	movs	r3, #16
 800bb76:	77fb      	strb	r3, [r7, #31]
 800bb78:	bf00      	nop
 800bb7a:	e10a      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a71      	ldr	r2, [pc, #452]	; (800bd48 <UART_SetConfig+0x304>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d120      	bne.n	800bbc8 <UART_SetConfig+0x184>
 800bb86:	4b6e      	ldr	r3, [pc, #440]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bb88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb90:	2b10      	cmp	r3, #16
 800bb92:	d00f      	beq.n	800bbb4 <UART_SetConfig+0x170>
 800bb94:	2b10      	cmp	r3, #16
 800bb96:	d802      	bhi.n	800bb9e <UART_SetConfig+0x15a>
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d005      	beq.n	800bba8 <UART_SetConfig+0x164>
 800bb9c:	e010      	b.n	800bbc0 <UART_SetConfig+0x17c>
 800bb9e:	2b20      	cmp	r3, #32
 800bba0:	d005      	beq.n	800bbae <UART_SetConfig+0x16a>
 800bba2:	2b30      	cmp	r3, #48	; 0x30
 800bba4:	d009      	beq.n	800bbba <UART_SetConfig+0x176>
 800bba6:	e00b      	b.n	800bbc0 <UART_SetConfig+0x17c>
 800bba8:	2300      	movs	r3, #0
 800bbaa:	77fb      	strb	r3, [r7, #31]
 800bbac:	e0f1      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	77fb      	strb	r3, [r7, #31]
 800bbb2:	e0ee      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbb4:	2304      	movs	r3, #4
 800bbb6:	77fb      	strb	r3, [r7, #31]
 800bbb8:	e0eb      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbba:	2308      	movs	r3, #8
 800bbbc:	77fb      	strb	r3, [r7, #31]
 800bbbe:	e0e8      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbc0:	2310      	movs	r3, #16
 800bbc2:	77fb      	strb	r3, [r7, #31]
 800bbc4:	bf00      	nop
 800bbc6:	e0e4      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a5f      	ldr	r2, [pc, #380]	; (800bd4c <UART_SetConfig+0x308>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d120      	bne.n	800bc14 <UART_SetConfig+0x1d0>
 800bbd2:	4b5b      	ldr	r3, [pc, #364]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bbd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bbdc:	2b40      	cmp	r3, #64	; 0x40
 800bbde:	d00f      	beq.n	800bc00 <UART_SetConfig+0x1bc>
 800bbe0:	2b40      	cmp	r3, #64	; 0x40
 800bbe2:	d802      	bhi.n	800bbea <UART_SetConfig+0x1a6>
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d005      	beq.n	800bbf4 <UART_SetConfig+0x1b0>
 800bbe8:	e010      	b.n	800bc0c <UART_SetConfig+0x1c8>
 800bbea:	2b80      	cmp	r3, #128	; 0x80
 800bbec:	d005      	beq.n	800bbfa <UART_SetConfig+0x1b6>
 800bbee:	2bc0      	cmp	r3, #192	; 0xc0
 800bbf0:	d009      	beq.n	800bc06 <UART_SetConfig+0x1c2>
 800bbf2:	e00b      	b.n	800bc0c <UART_SetConfig+0x1c8>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	77fb      	strb	r3, [r7, #31]
 800bbf8:	e0cb      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	77fb      	strb	r3, [r7, #31]
 800bbfe:	e0c8      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc00:	2304      	movs	r3, #4
 800bc02:	77fb      	strb	r3, [r7, #31]
 800bc04:	e0c5      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc06:	2308      	movs	r3, #8
 800bc08:	77fb      	strb	r3, [r7, #31]
 800bc0a:	e0c2      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc0c:	2310      	movs	r3, #16
 800bc0e:	77fb      	strb	r3, [r7, #31]
 800bc10:	bf00      	nop
 800bc12:	e0be      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4a4d      	ldr	r2, [pc, #308]	; (800bd50 <UART_SetConfig+0x30c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d124      	bne.n	800bc68 <UART_SetConfig+0x224>
 800bc1e:	4b48      	ldr	r3, [pc, #288]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bc20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc2c:	d012      	beq.n	800bc54 <UART_SetConfig+0x210>
 800bc2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc32:	d802      	bhi.n	800bc3a <UART_SetConfig+0x1f6>
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d007      	beq.n	800bc48 <UART_SetConfig+0x204>
 800bc38:	e012      	b.n	800bc60 <UART_SetConfig+0x21c>
 800bc3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc3e:	d006      	beq.n	800bc4e <UART_SetConfig+0x20a>
 800bc40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc44:	d009      	beq.n	800bc5a <UART_SetConfig+0x216>
 800bc46:	e00b      	b.n	800bc60 <UART_SetConfig+0x21c>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	77fb      	strb	r3, [r7, #31]
 800bc4c:	e0a1      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc4e:	2302      	movs	r3, #2
 800bc50:	77fb      	strb	r3, [r7, #31]
 800bc52:	e09e      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc54:	2304      	movs	r3, #4
 800bc56:	77fb      	strb	r3, [r7, #31]
 800bc58:	e09b      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc5a:	2308      	movs	r3, #8
 800bc5c:	77fb      	strb	r3, [r7, #31]
 800bc5e:	e098      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc60:	2310      	movs	r3, #16
 800bc62:	77fb      	strb	r3, [r7, #31]
 800bc64:	bf00      	nop
 800bc66:	e094      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a39      	ldr	r2, [pc, #228]	; (800bd54 <UART_SetConfig+0x310>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d124      	bne.n	800bcbc <UART_SetConfig+0x278>
 800bc72:	4b33      	ldr	r3, [pc, #204]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bc74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc80:	d012      	beq.n	800bca8 <UART_SetConfig+0x264>
 800bc82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc86:	d802      	bhi.n	800bc8e <UART_SetConfig+0x24a>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <UART_SetConfig+0x258>
 800bc8c:	e012      	b.n	800bcb4 <UART_SetConfig+0x270>
 800bc8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc92:	d006      	beq.n	800bca2 <UART_SetConfig+0x25e>
 800bc94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc98:	d009      	beq.n	800bcae <UART_SetConfig+0x26a>
 800bc9a:	e00b      	b.n	800bcb4 <UART_SetConfig+0x270>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	77fb      	strb	r3, [r7, #31]
 800bca0:	e077      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bca2:	2302      	movs	r3, #2
 800bca4:	77fb      	strb	r3, [r7, #31]
 800bca6:	e074      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	77fb      	strb	r3, [r7, #31]
 800bcac:	e071      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bcae:	2308      	movs	r3, #8
 800bcb0:	77fb      	strb	r3, [r7, #31]
 800bcb2:	e06e      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	77fb      	strb	r3, [r7, #31]
 800bcb8:	bf00      	nop
 800bcba:	e06a      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a25      	ldr	r2, [pc, #148]	; (800bd58 <UART_SetConfig+0x314>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d124      	bne.n	800bd10 <UART_SetConfig+0x2cc>
 800bcc6:	4b1e      	ldr	r3, [pc, #120]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bcc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bccc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bcd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcd4:	d012      	beq.n	800bcfc <UART_SetConfig+0x2b8>
 800bcd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcda:	d802      	bhi.n	800bce2 <UART_SetConfig+0x29e>
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d007      	beq.n	800bcf0 <UART_SetConfig+0x2ac>
 800bce0:	e012      	b.n	800bd08 <UART_SetConfig+0x2c4>
 800bce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bce6:	d006      	beq.n	800bcf6 <UART_SetConfig+0x2b2>
 800bce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bcec:	d009      	beq.n	800bd02 <UART_SetConfig+0x2be>
 800bcee:	e00b      	b.n	800bd08 <UART_SetConfig+0x2c4>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	77fb      	strb	r3, [r7, #31]
 800bcf4:	e04d      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	77fb      	strb	r3, [r7, #31]
 800bcfa:	e04a      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	77fb      	strb	r3, [r7, #31]
 800bd00:	e047      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd02:	2308      	movs	r3, #8
 800bd04:	77fb      	strb	r3, [r7, #31]
 800bd06:	e044      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd08:	2310      	movs	r3, #16
 800bd0a:	77fb      	strb	r3, [r7, #31]
 800bd0c:	bf00      	nop
 800bd0e:	e040      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	4a11      	ldr	r2, [pc, #68]	; (800bd5c <UART_SetConfig+0x318>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d139      	bne.n	800bd8e <UART_SetConfig+0x34a>
 800bd1a:	4b09      	ldr	r3, [pc, #36]	; (800bd40 <UART_SetConfig+0x2fc>)
 800bd1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bd24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd28:	d027      	beq.n	800bd7a <UART_SetConfig+0x336>
 800bd2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd2e:	d817      	bhi.n	800bd60 <UART_SetConfig+0x31c>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d01c      	beq.n	800bd6e <UART_SetConfig+0x32a>
 800bd34:	e027      	b.n	800bd86 <UART_SetConfig+0x342>
 800bd36:	bf00      	nop
 800bd38:	efff69f3 	.word	0xefff69f3
 800bd3c:	40011000 	.word	0x40011000
 800bd40:	40023800 	.word	0x40023800
 800bd44:	40004400 	.word	0x40004400
 800bd48:	40004800 	.word	0x40004800
 800bd4c:	40004c00 	.word	0x40004c00
 800bd50:	40005000 	.word	0x40005000
 800bd54:	40011400 	.word	0x40011400
 800bd58:	40007800 	.word	0x40007800
 800bd5c:	40007c00 	.word	0x40007c00
 800bd60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd64:	d006      	beq.n	800bd74 <UART_SetConfig+0x330>
 800bd66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bd6a:	d009      	beq.n	800bd80 <UART_SetConfig+0x33c>
 800bd6c:	e00b      	b.n	800bd86 <UART_SetConfig+0x342>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	e00e      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd74:	2302      	movs	r3, #2
 800bd76:	77fb      	strb	r3, [r7, #31]
 800bd78:	e00b      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd7a:	2304      	movs	r3, #4
 800bd7c:	77fb      	strb	r3, [r7, #31]
 800bd7e:	e008      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd80:	2308      	movs	r3, #8
 800bd82:	77fb      	strb	r3, [r7, #31]
 800bd84:	e005      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd86:	2310      	movs	r3, #16
 800bd88:	77fb      	strb	r3, [r7, #31]
 800bd8a:	bf00      	nop
 800bd8c:	e001      	b.n	800bd92 <UART_SetConfig+0x34e>
 800bd8e:	2310      	movs	r3, #16
 800bd90:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd9a:	d17f      	bne.n	800be9c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800bd9c:	7ffb      	ldrb	r3, [r7, #31]
 800bd9e:	2b08      	cmp	r3, #8
 800bda0:	d85c      	bhi.n	800be5c <UART_SetConfig+0x418>
 800bda2:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <UART_SetConfig+0x364>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800bdcd 	.word	0x0800bdcd
 800bdac:	0800bded 	.word	0x0800bded
 800bdb0:	0800be0d 	.word	0x0800be0d
 800bdb4:	0800be5d 	.word	0x0800be5d
 800bdb8:	0800be25 	.word	0x0800be25
 800bdbc:	0800be5d 	.word	0x0800be5d
 800bdc0:	0800be5d 	.word	0x0800be5d
 800bdc4:	0800be5d 	.word	0x0800be5d
 800bdc8:	0800be45 	.word	0x0800be45
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bdcc:	f7fc fade 	bl	800838c <HAL_RCC_GetPCLK1Freq>
 800bdd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	005a      	lsls	r2, r3, #1
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	085b      	lsrs	r3, r3, #1
 800bddc:	441a      	add	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	61bb      	str	r3, [r7, #24]
        break;
 800bdea:	e03a      	b.n	800be62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdec:	f7fc fae2 	bl	80083b4 <HAL_RCC_GetPCLK2Freq>
 800bdf0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	005a      	lsls	r2, r3, #1
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	085b      	lsrs	r3, r3, #1
 800bdfc:	441a      	add	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	fbb2 f3f3 	udiv	r3, r2, r3
 800be06:	b29b      	uxth	r3, r3
 800be08:	61bb      	str	r3, [r7, #24]
        break;
 800be0a:	e02a      	b.n	800be62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	085a      	lsrs	r2, r3, #1
 800be12:	4b5f      	ldr	r3, [pc, #380]	; (800bf90 <UART_SetConfig+0x54c>)
 800be14:	4413      	add	r3, r2
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	6852      	ldr	r2, [r2, #4]
 800be1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be1e:	b29b      	uxth	r3, r3
 800be20:	61bb      	str	r3, [r7, #24]
        break;
 800be22:	e01e      	b.n	800be62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be24:	f7fc f9ce 	bl	80081c4 <HAL_RCC_GetSysClockFreq>
 800be28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	005a      	lsls	r2, r3, #1
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	085b      	lsrs	r3, r3, #1
 800be34:	441a      	add	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3e:	b29b      	uxth	r3, r3
 800be40:	61bb      	str	r3, [r7, #24]
        break;
 800be42:	e00e      	b.n	800be62 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	085b      	lsrs	r3, r3, #1
 800be4a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	fbb2 f3f3 	udiv	r3, r2, r3
 800be56:	b29b      	uxth	r3, r3
 800be58:	61bb      	str	r3, [r7, #24]
        break;
 800be5a:	e002      	b.n	800be62 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	75fb      	strb	r3, [r7, #23]
        break;
 800be60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	2b0f      	cmp	r3, #15
 800be66:	d916      	bls.n	800be96 <UART_SetConfig+0x452>
 800be68:	69bb      	ldr	r3, [r7, #24]
 800be6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be6e:	d212      	bcs.n	800be96 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	b29b      	uxth	r3, r3
 800be74:	f023 030f 	bic.w	r3, r3, #15
 800be78:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	085b      	lsrs	r3, r3, #1
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	b29a      	uxth	r2, r3
 800be86:	897b      	ldrh	r3, [r7, #10]
 800be88:	4313      	orrs	r3, r2
 800be8a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	897a      	ldrh	r2, [r7, #10]
 800be92:	60da      	str	r2, [r3, #12]
 800be94:	e070      	b.n	800bf78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	75fb      	strb	r3, [r7, #23]
 800be9a:	e06d      	b.n	800bf78 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800be9c:	7ffb      	ldrb	r3, [r7, #31]
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	d859      	bhi.n	800bf56 <UART_SetConfig+0x512>
 800bea2:	a201      	add	r2, pc, #4	; (adr r2, 800bea8 <UART_SetConfig+0x464>)
 800bea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea8:	0800becd 	.word	0x0800becd
 800beac:	0800beeb 	.word	0x0800beeb
 800beb0:	0800bf09 	.word	0x0800bf09
 800beb4:	0800bf57 	.word	0x0800bf57
 800beb8:	0800bf21 	.word	0x0800bf21
 800bebc:	0800bf57 	.word	0x0800bf57
 800bec0:	0800bf57 	.word	0x0800bf57
 800bec4:	0800bf57 	.word	0x0800bf57
 800bec8:	0800bf3f 	.word	0x0800bf3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800becc:	f7fc fa5e 	bl	800838c <HAL_RCC_GetPCLK1Freq>
 800bed0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	085a      	lsrs	r2, r3, #1
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	441a      	add	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	61bb      	str	r3, [r7, #24]
        break;
 800bee8:	e038      	b.n	800bf5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beea:	f7fc fa63 	bl	80083b4 <HAL_RCC_GetPCLK2Freq>
 800beee:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	085a      	lsrs	r2, r3, #1
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	441a      	add	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	61bb      	str	r3, [r7, #24]
        break;
 800bf06:	e029      	b.n	800bf5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	085a      	lsrs	r2, r3, #1
 800bf0e:	4b21      	ldr	r3, [pc, #132]	; (800bf94 <UART_SetConfig+0x550>)
 800bf10:	4413      	add	r3, r2
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	6852      	ldr	r2, [r2, #4]
 800bf16:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	61bb      	str	r3, [r7, #24]
        break;
 800bf1e:	e01d      	b.n	800bf5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf20:	f7fc f950 	bl	80081c4 <HAL_RCC_GetSysClockFreq>
 800bf24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	085a      	lsrs	r2, r3, #1
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	441a      	add	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	61bb      	str	r3, [r7, #24]
        break;
 800bf3c:	e00e      	b.n	800bf5c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	085b      	lsrs	r3, r3, #1
 800bf44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	61bb      	str	r3, [r7, #24]
        break;
 800bf54:	e002      	b.n	800bf5c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800bf56:	2301      	movs	r3, #1
 800bf58:	75fb      	strb	r3, [r7, #23]
        break;
 800bf5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	2b0f      	cmp	r3, #15
 800bf60:	d908      	bls.n	800bf74 <UART_SetConfig+0x530>
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf68:	d204      	bcs.n	800bf74 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	69ba      	ldr	r2, [r7, #24]
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	e001      	b.n	800bf78 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bf84:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	01e84800 	.word	0x01e84800
 800bf94:	00f42400 	.word	0x00f42400

0800bf98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	f003 0301 	and.w	r3, r3, #1
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00a      	beq.n	800bfc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc6:	f003 0302 	and.w	r3, r3, #2
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	430a      	orrs	r2, r1
 800bfe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	f003 0304 	and.w	r3, r3, #4
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00a      	beq.n	800c006 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	f003 0308 	and.w	r3, r3, #8
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d00a      	beq.n	800c028 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	430a      	orrs	r2, r1
 800c026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	f003 0310 	and.w	r3, r3, #16
 800c030:	2b00      	cmp	r3, #0
 800c032:	d00a      	beq.n	800c04a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	430a      	orrs	r2, r1
 800c048:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	430a      	orrs	r2, r1
 800c06a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c074:	2b00      	cmp	r3, #0
 800c076:	d01a      	beq.n	800c0ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	430a      	orrs	r2, r1
 800c08c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c096:	d10a      	bne.n	800c0ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00a      	beq.n	800c0d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	685b      	ldr	r3, [r3, #4]
 800c0c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	430a      	orrs	r2, r1
 800c0ce:	605a      	str	r2, [r3, #4]
  }
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af02      	add	r7, sp, #8
 800c0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c0ea:	f7f9 fc8b 	bl	8005a04 <HAL_GetTick>
 800c0ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0308 	and.w	r3, r3, #8
 800c0fa:	2b08      	cmp	r3, #8
 800c0fc:	d10e      	bne.n	800c11c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f814 	bl	800c13a <UART_WaitOnFlagUntilTimeout>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c118:	2303      	movs	r3, #3
 800c11a:	e00a      	b.n	800c132 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2220      	movs	r2, #32
 800c120:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c130:	2300      	movs	r3, #0
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}

0800c13a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c13a:	b580      	push	{r7, lr}
 800c13c:	b084      	sub	sp, #16
 800c13e:	af00      	add	r7, sp, #0
 800c140:	60f8      	str	r0, [r7, #12]
 800c142:	60b9      	str	r1, [r7, #8]
 800c144:	603b      	str	r3, [r7, #0]
 800c146:	4613      	mov	r3, r2
 800c148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c14a:	e05d      	b.n	800c208 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c152:	d059      	beq.n	800c208 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c154:	f7f9 fc56 	bl	8005a04 <HAL_GetTick>
 800c158:	4602      	mov	r2, r0
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	1ad3      	subs	r3, r2, r3
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d302      	bcc.n	800c16a <UART_WaitOnFlagUntilTimeout+0x30>
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d11b      	bne.n	800c1a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c178:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	689a      	ldr	r2, [r3, #8]
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 0201 	bic.w	r2, r2, #1
 800c188:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2220      	movs	r2, #32
 800c18e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2220      	movs	r2, #32
 800c194:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e042      	b.n	800c228 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 0304 	and.w	r3, r3, #4
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d02b      	beq.n	800c208 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1be:	d123      	bne.n	800c208 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1c8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c1d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	689a      	ldr	r2, [r3, #8]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 0201 	bic.w	r2, r2, #1
 800c1e8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2220      	movs	r2, #32
 800c1f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2220      	movs	r2, #32
 800c1fa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c204:	2303      	movs	r3, #3
 800c206:	e00f      	b.n	800c228 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	69da      	ldr	r2, [r3, #28]
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	4013      	ands	r3, r2
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	429a      	cmp	r2, r3
 800c216:	bf0c      	ite	eq
 800c218:	2301      	moveq	r3, #1
 800c21a:	2300      	movne	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	461a      	mov	r2, r3
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	429a      	cmp	r2, r3
 800c224:	d092      	beq.n	800c14c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c246:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689a      	ldr	r2, [r3, #8]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 0201 	bic.w	r2, r2, #1
 800c256:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2220      	movs	r2, #32
 800c25c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c264:	bf00      	nop
 800c266:	370c      	adds	r7, #12
 800c268:	46bd      	mov	sp, r7
 800c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26e:	4770      	bx	lr

0800c270 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c27c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fbce 	bl	800ba30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c294:	bf00      	nop
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2220      	movs	r2, #32
 800c2b8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2200      	movs	r2, #0
 800c2be:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f7ff fba1 	bl	800ba08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2c6:	bf00      	nop
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b084      	sub	sp, #16
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c2dc:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c2e2:	2b22      	cmp	r3, #34	; 0x22
 800c2e4:	d13a      	bne.n	800c35c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ec:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c2ee:	89bb      	ldrh	r3, [r7, #12]
 800c2f0:	b2d9      	uxtb	r1, r3
 800c2f2:	89fb      	ldrh	r3, [r7, #14]
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	400a      	ands	r2, r1
 800c2fc:	b2d2      	uxtb	r2, r2
 800c2fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c304:	1c5a      	adds	r2, r3, #1
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c310:	b29b      	uxth	r3, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	b29a      	uxth	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c322:	b29b      	uxth	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d121      	bne.n	800c36c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c336:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0201 	bic.w	r2, r2, #1
 800c346:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2220      	movs	r2, #32
 800c34c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f7ff fb61 	bl	800ba1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c35a:	e007      	b.n	800c36c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	699a      	ldr	r2, [r3, #24]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f042 0208 	orr.w	r2, r2, #8
 800c36a:	619a      	str	r2, [r3, #24]
}
 800c36c:	bf00      	nop
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}

0800c374 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c382:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c388:	2b22      	cmp	r3, #34	; 0x22
 800c38a:	d13a      	bne.n	800c402 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c392:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c398:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c39a:	89ba      	ldrh	r2, [r7, #12]
 800c39c:	89fb      	ldrh	r3, [r7, #14]
 800c39e:	4013      	ands	r3, r2
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3aa:	1c9a      	adds	r2, r3, #2
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d121      	bne.n	800c412 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c3dc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	689a      	ldr	r2, [r3, #8]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 0201 	bic.w	r2, r2, #1
 800c3ec:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2220      	movs	r2, #32
 800c3f2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff fb0e 	bl	800ba1c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c400:	e007      	b.n	800c412 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	699a      	ldr	r2, [r3, #24]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f042 0208 	orr.w	r2, r2, #8
 800c410:	619a      	str	r2, [r3, #24]
}
 800c412:	bf00      	nop
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c41c:	b084      	sub	sp, #16
 800c41e:	b480      	push	{r7}
 800c420:	b085      	sub	sp, #20
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]
 800c426:	f107 001c 	add.w	r0, r7, #28
 800c42a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c432:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c434:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c436:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c43a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c43e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c442:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c446:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685a      	ldr	r2, [r3, #4]
 800c452:	4b07      	ldr	r3, [pc, #28]	; (800c470 <SDMMC_Init+0x54>)
 800c454:	4013      	ands	r3, r2
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	431a      	orrs	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	3714      	adds	r7, #20
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	b004      	add	sp, #16
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	ffff8100 	.word	0xffff8100

0800c474 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c482:	4618      	mov	r0, r3
 800c484:	370c      	adds	r7, #12
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr

0800c48e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	681a      	ldr	r2, [r3, #0]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4a2:	2300      	movs	r3, #0
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2203      	movs	r2, #3
 800c4bc:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c4be:	2002      	movs	r0, #2
 800c4c0:	f7f9 faac 	bl	8005a1c <HAL_Delay>
  
  return HAL_OK;
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}

0800c4ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c4ce:	b480      	push	{r7}
 800c4d0:	b083      	sub	sp, #12
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 0303 	and.w	r3, r3, #3
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	370c      	adds	r7, #12
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr
	...

0800c4ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c50a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c510:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c516:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	68da      	ldr	r2, [r3, #12]
 800c522:	4b06      	ldr	r3, [pc, #24]	; (800c53c <SDMMC_SendCommand+0x50>)
 800c524:	4013      	ands	r3, r2
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	431a      	orrs	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c52e:	2300      	movs	r3, #0
}
 800c530:	4618      	mov	r0, r3
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	fffff000 	.word	0xfffff000

0800c540 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	691b      	ldr	r3, [r3, #16]
 800c54c:	b2db      	uxtb	r3, r3
}
 800c54e:	4618      	mov	r0, r3
 800c550:	370c      	adds	r7, #12
 800c552:	46bd      	mov	sp, r7
 800c554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c558:	4770      	bx	lr

0800c55a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c55a:	b480      	push	{r7}
 800c55c:	b085      	sub	sp, #20
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
 800c562:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	3314      	adds	r3, #20
 800c568:	461a      	mov	r2, r3
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	4413      	add	r3, r2
 800c56e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
}  
 800c574:	4618      	mov	r0, r3
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c5ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c5b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	431a      	orrs	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0

}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr

0800c5d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b088      	sub	sp, #32
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c5e6:	2310      	movs	r3, #16
 800c5e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ea:	2340      	movs	r3, #64	; 0x40
 800c5ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff ff74 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c604:	f241 3288 	movw	r2, #5000	; 0x1388
 800c608:	2110      	movs	r1, #16
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 fa42 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c612:	69fb      	ldr	r3, [r7, #28]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3720      	adds	r7, #32
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b088      	sub	sp, #32
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c62a:	2311      	movs	r3, #17
 800c62c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c62e:	2340      	movs	r3, #64	; 0x40
 800c630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c632:	2300      	movs	r3, #0
 800c634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c63a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c63c:	f107 0308 	add.w	r3, r7, #8
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7ff ff52 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c648:	f241 3288 	movw	r2, #5000	; 0x1388
 800c64c:	2111      	movs	r1, #17
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fa20 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c656:	69fb      	ldr	r3, [r7, #28]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3720      	adds	r7, #32
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c66e:	2312      	movs	r3, #18
 800c670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c672:	2340      	movs	r3, #64	; 0x40
 800c674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c67e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c680:	f107 0308 	add.w	r3, r7, #8
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff ff30 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c68c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c690:	2112      	movs	r1, #18
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 f9fe 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c69a:	69fb      	ldr	r3, [r7, #28]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3720      	adds	r7, #32
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b088      	sub	sp, #32
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c6b2:	2318      	movs	r3, #24
 800c6b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6b6:	2340      	movs	r3, #64	; 0x40
 800c6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff ff0e 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6d4:	2118      	movs	r1, #24
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f9dc 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6de:	69fb      	ldr	r3, [r7, #28]
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3720      	adds	r7, #32
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b088      	sub	sp, #32
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c6f6:	2319      	movs	r3, #25
 800c6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6fa:	2340      	movs	r3, #64	; 0x40
 800c6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6fe:	2300      	movs	r3, #0
 800c700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c706:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c708:	f107 0308 	add.w	r3, r7, #8
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7ff feec 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c714:	f241 3288 	movw	r2, #5000	; 0x1388
 800c718:	2119      	movs	r1, #25
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f9ba 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c722:	69fb      	ldr	r3, [r7, #28]
}
 800c724:	4618      	mov	r0, r3
 800c726:	3720      	adds	r7, #32
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c738:	230c      	movs	r3, #12
 800c73a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c73c:	2340      	movs	r3, #64	; 0x40
 800c73e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c740:	2300      	movs	r3, #0
 800c742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff fecb 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c756:	4a05      	ldr	r2, [pc, #20]	; (800c76c <SDMMC_CmdStopTransfer+0x40>)
 800c758:	210c      	movs	r1, #12
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f99a 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c762:	69fb      	ldr	r3, [r7, #28]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3720      	adds	r7, #32
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}
 800c76c:	05f5e100 	.word	0x05f5e100

0800c770 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08a      	sub	sp, #40	; 0x28
 800c774:	af00      	add	r7, sp, #0
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c780:	2307      	movs	r3, #7
 800c782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c784:	2340      	movs	r3, #64	; 0x40
 800c786:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c788:	2300      	movs	r3, #0
 800c78a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c790:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c792:	f107 0310 	add.w	r3, r7, #16
 800c796:	4619      	mov	r1, r3
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff fea7 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c79e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7a2:	2107      	movs	r1, #7
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 f975 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c7aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3728      	adds	r7, #40	; 0x28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b088      	sub	sp, #32
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7d4:	f107 0308 	add.w	r3, r7, #8
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff fe86 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f92f 	bl	800ca44 <SDMMC_GetCmdError>
 800c7e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7e8:	69fb      	ldr	r3, [r7, #28]
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3720      	adds	r7, #32
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b088      	sub	sp, #32
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c7fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c7fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c800:	2308      	movs	r3, #8
 800c802:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c804:	2340      	movs	r3, #64	; 0x40
 800c806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c808:	2300      	movs	r3, #0
 800c80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c80c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c812:	f107 0308 	add.w	r3, r7, #8
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff fe67 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 fb18 	bl	800ce54 <SDMMC_GetCmdResp7>
 800c824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c826:	69fb      	ldr	r3, [r7, #28]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3720      	adds	r7, #32
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c83e:	2337      	movs	r3, #55	; 0x37
 800c840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c846:	2300      	movs	r3, #0
 800c848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c850:	f107 0308 	add.w	r3, r7, #8
 800c854:	4619      	mov	r1, r3
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7ff fe48 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c860:	2137      	movs	r1, #55	; 0x37
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f916 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c86a:	69fb      	ldr	r3, [r7, #28]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3720      	adds	r7, #32
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b088      	sub	sp, #32
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <SDMMC_CmdAppOperCommand+0x44>)
 800c882:	4313      	orrs	r3, r2
 800c884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c886:	2329      	movs	r3, #41	; 0x29
 800c888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c88e:	2300      	movs	r3, #0
 800c890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c896:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff fe24 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fa27 	bl	800ccf8 <SDMMC_GetCmdResp3>
 800c8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ac:	69fb      	ldr	r3, [r7, #28]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3720      	adds	r7, #32
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	80100000 	.word	0x80100000

0800c8bc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c8ca:	2306      	movs	r3, #6
 800c8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ce:	2340      	movs	r3, #64	; 0x40
 800c8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8dc:	f107 0308 	add.w	r3, r7, #8
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff fe02 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ec:	2106      	movs	r1, #6
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f8d0 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3720      	adds	r7, #32
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c908:	2300      	movs	r3, #0
 800c90a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c90c:	2333      	movs	r3, #51	; 0x33
 800c90e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c910:	2340      	movs	r3, #64	; 0x40
 800c912:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c914:	2300      	movs	r3, #0
 800c916:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c91e:	f107 0308 	add.w	r3, r7, #8
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff fde1 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c92a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c92e:	2133      	movs	r1, #51	; 0x33
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 f8af 	bl	800ca94 <SDMMC_GetCmdResp1>
 800c936:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c938:	69fb      	ldr	r3, [r7, #28]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3720      	adds	r7, #32
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b088      	sub	sp, #32
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c94a:	2300      	movs	r3, #0
 800c94c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c94e:	2302      	movs	r3, #2
 800c950:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c952:	23c0      	movs	r3, #192	; 0xc0
 800c954:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c956:	2300      	movs	r3, #0
 800c958:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c95a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c95e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c960:	f107 0308 	add.w	r3, r7, #8
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7ff fdc0 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f97d 	bl	800cc6c <SDMMC_GetCmdResp2>
 800c972:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c97e:	b580      	push	{r7, lr}
 800c980:	b088      	sub	sp, #32
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c98c:	2309      	movs	r3, #9
 800c98e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c990:	23c0      	movs	r3, #192	; 0xc0
 800c992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c994:	2300      	movs	r3, #0
 800c996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c99c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c99e:	f107 0308 	add.w	r3, r7, #8
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7ff fda1 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f95e 	bl	800cc6c <SDMMC_GetCmdResp2>
 800c9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b088      	sub	sp, #32
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c9ca:	2303      	movs	r3, #3
 800c9cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9ce:	2340      	movs	r3, #64	; 0x40
 800c9d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9dc:	f107 0308 	add.w	r3, r7, #8
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff fd82 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	2103      	movs	r1, #3
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f9bd 	bl	800cd6c <SDMMC_GetCmdResp6>
 800c9f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9f4:	69fb      	ldr	r3, [r7, #28]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3720      	adds	r7, #32
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b088      	sub	sp, #32
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ca0c:	230d      	movs	r3, #13
 800ca0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca10:	2340      	movs	r3, #64	; 0x40
 800ca12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca14:	2300      	movs	r3, #0
 800ca16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca1e:	f107 0308 	add.w	r3, r7, #8
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7ff fd61 	bl	800c4ec <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ca2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca2e:	210d      	movs	r1, #13
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 f82f 	bl	800ca94 <SDMMC_GetCmdResp1>
 800ca36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca38:	69fb      	ldr	r3, [r7, #28]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3720      	adds	r7, #32
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
	...

0800ca44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ca44:	b490      	push	{r4, r7}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca4c:	4b0f      	ldr	r3, [pc, #60]	; (800ca8c <SDMMC_GetCmdError+0x48>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a0f      	ldr	r2, [pc, #60]	; (800ca90 <SDMMC_GetCmdError+0x4c>)
 800ca52:	fba2 2303 	umull	r2, r3, r2, r3
 800ca56:	0a5b      	lsrs	r3, r3, #9
 800ca58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca60:	4623      	mov	r3, r4
 800ca62:	1e5c      	subs	r4, r3, #1
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d102      	bne.n	800ca6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca6c:	e009      	b.n	800ca82 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f2      	beq.n	800ca60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	22c5      	movs	r2, #197	; 0xc5
 800ca7e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bc90      	pop	{r4, r7}
 800ca8a:	4770      	bx	lr
 800ca8c:	20000000 	.word	0x20000000
 800ca90:	10624dd3 	.word	0x10624dd3

0800ca94 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ca94:	b590      	push	{r4, r7, lr}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	607a      	str	r2, [r7, #4]
 800caa0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800caa2:	4b6f      	ldr	r3, [pc, #444]	; (800cc60 <SDMMC_GetCmdResp1+0x1cc>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a6f      	ldr	r2, [pc, #444]	; (800cc64 <SDMMC_GetCmdResp1+0x1d0>)
 800caa8:	fba2 2303 	umull	r2, r3, r2, r3
 800caac:	0a5b      	lsrs	r3, r3, #9
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cab4:	4623      	mov	r3, r4
 800cab6:	1e5c      	subs	r4, r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d102      	bne.n	800cac2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cabc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cac0:	e0c9      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0f0      	beq.n	800cab4 <SDMMC_GetCmdResp1+0x20>
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d1eb      	bne.n	800cab4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cae0:	f003 0304 	and.w	r3, r3, #4
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d004      	beq.n	800caf2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2204      	movs	r2, #4
 800caec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800caee:	2304      	movs	r3, #4
 800caf0:	e0b1      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caf6:	f003 0301 	and.w	r3, r3, #1
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d004      	beq.n	800cb08 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb04:	2301      	movs	r3, #1
 800cb06:	e0a6      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	22c5      	movs	r2, #197	; 0xc5
 800cb0c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f7ff fd16 	bl	800c540 <SDMMC_GetCommandResponse>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d001      	beq.n	800cb22 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e099      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cb22:	2100      	movs	r1, #0
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	f7ff fd18 	bl	800c55a <SDMMC_GetResponse>
 800cb2a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cb2c:	693a      	ldr	r2, [r7, #16]
 800cb2e:	4b4e      	ldr	r3, [pc, #312]	; (800cc68 <SDMMC_GetCmdResp1+0x1d4>)
 800cb30:	4013      	ands	r3, r2
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d101      	bne.n	800cb3a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cb36:	2300      	movs	r3, #0
 800cb38:	e08d      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	da02      	bge.n	800cb46 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb44:	e087      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d001      	beq.n	800cb54 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb50:	2340      	movs	r3, #64	; 0x40
 800cb52:	e080      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb54:	693b      	ldr	r3, [r7, #16]
 800cb56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb5e:	2380      	movs	r3, #128	; 0x80
 800cb60:	e079      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d002      	beq.n	800cb72 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cb70:	e071      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d002      	beq.n	800cb82 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb80:	e069      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb90:	e061      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d002      	beq.n	800cba2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cba0:	e059      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cbac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cbb0:	e051      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cbbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cbc0:	e049      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cbc2:	693b      	ldr	r3, [r7, #16]
 800cbc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d002      	beq.n	800cbd2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cbd0:	e041      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cbdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbe0:	e039      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d002      	beq.n	800cbf2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cbec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cbf0:	e031      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cbfc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cc00:	e029      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d002      	beq.n	800cc12 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cc0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cc10:	e021      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cc1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cc20:	e019      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cc2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cc30:	e011      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cc3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cc40:	e009      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	f003 0308 	and.w	r3, r3, #8
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d002      	beq.n	800cc52 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cc4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cc50:	e001      	b.n	800cc56 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	371c      	adds	r7, #28
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd90      	pop	{r4, r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	20000000 	.word	0x20000000
 800cc64:	10624dd3 	.word	0x10624dd3
 800cc68:	fdffe008 	.word	0xfdffe008

0800cc6c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cc6c:	b490      	push	{r4, r7}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc74:	4b1e      	ldr	r3, [pc, #120]	; (800ccf0 <SDMMC_GetCmdResp2+0x84>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a1e      	ldr	r2, [pc, #120]	; (800ccf4 <SDMMC_GetCmdResp2+0x88>)
 800cc7a:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7e:	0a5b      	lsrs	r3, r3, #9
 800cc80:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc88:	4623      	mov	r3, r4
 800cc8a:	1e5c      	subs	r4, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d102      	bne.n	800cc96 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc94:	e026      	b.n	800cce4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc9a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d0f0      	beq.n	800cc88 <SDMMC_GetCmdResp2+0x1c>
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1eb      	bne.n	800cc88 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d004      	beq.n	800ccc6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2204      	movs	r2, #4
 800ccc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccc2:	2304      	movs	r3, #4
 800ccc4:	e00e      	b.n	800cce4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d004      	beq.n	800ccdc <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e003      	b.n	800cce4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	22c5      	movs	r2, #197	; 0xc5
 800cce0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3710      	adds	r7, #16
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bc90      	pop	{r4, r7}
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	20000000 	.word	0x20000000
 800ccf4:	10624dd3 	.word	0x10624dd3

0800ccf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ccf8:	b490      	push	{r4, r7}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd00:	4b18      	ldr	r3, [pc, #96]	; (800cd64 <SDMMC_GetCmdResp3+0x6c>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a18      	ldr	r2, [pc, #96]	; (800cd68 <SDMMC_GetCmdResp3+0x70>)
 800cd06:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0a:	0a5b      	lsrs	r3, r3, #9
 800cd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd14:	4623      	mov	r3, r4
 800cd16:	1e5c      	subs	r4, r3, #1
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d102      	bne.n	800cd22 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd20:	e01b      	b.n	800cd5a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d0f0      	beq.n	800cd14 <SDMMC_GetCmdResp3+0x1c>
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d1eb      	bne.n	800cd14 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd40:	f003 0304 	and.w	r3, r3, #4
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d004      	beq.n	800cd52 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2204      	movs	r2, #4
 800cd4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd4e:	2304      	movs	r3, #4
 800cd50:	e003      	b.n	800cd5a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	22c5      	movs	r2, #197	; 0xc5
 800cd56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bc90      	pop	{r4, r7}
 800cd62:	4770      	bx	lr
 800cd64:	20000000 	.word	0x20000000
 800cd68:	10624dd3 	.word	0x10624dd3

0800cd6c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cd6c:	b590      	push	{r4, r7, lr}
 800cd6e:	b087      	sub	sp, #28
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	460b      	mov	r3, r1
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd7a:	4b34      	ldr	r3, [pc, #208]	; (800ce4c <SDMMC_GetCmdResp6+0xe0>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a34      	ldr	r2, [pc, #208]	; (800ce50 <SDMMC_GetCmdResp6+0xe4>)
 800cd80:	fba2 2303 	umull	r2, r3, r2, r3
 800cd84:	0a5b      	lsrs	r3, r3, #9
 800cd86:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd8e:	4623      	mov	r3, r4
 800cd90:	1e5c      	subs	r4, r3, #1
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d102      	bne.n	800cd9c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd96:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd9a:	e052      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d0f0      	beq.n	800cd8e <SDMMC_GetCmdResp6+0x22>
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1eb      	bne.n	800cd8e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdba:	f003 0304 	and.w	r3, r3, #4
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d004      	beq.n	800cdcc <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2204      	movs	r2, #4
 800cdc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdc8:	2304      	movs	r3, #4
 800cdca:	e03a      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d004      	beq.n	800cde2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2201      	movs	r2, #1
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdde:	2301      	movs	r3, #1
 800cde0:	e02f      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cde2:	68f8      	ldr	r0, [r7, #12]
 800cde4:	f7ff fbac 	bl	800c540 <SDMMC_GetCommandResponse>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	7afb      	ldrb	r3, [r7, #11]
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d001      	beq.n	800cdf6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e025      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	22c5      	movs	r2, #197	; 0xc5
 800cdfa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f7ff fbab 	bl	800c55a <SDMMC_GetResponse>
 800ce04:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d106      	bne.n	800ce1e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	0c1b      	lsrs	r3, r3, #16
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e011      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce2c:	e009      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce3c:	e001      	b.n	800ce42 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ce3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	371c      	adds	r7, #28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd90      	pop	{r4, r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20000000 	.word	0x20000000
 800ce50:	10624dd3 	.word	0x10624dd3

0800ce54 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ce54:	b490      	push	{r4, r7}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce5c:	4b21      	ldr	r3, [pc, #132]	; (800cee4 <SDMMC_GetCmdResp7+0x90>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4a21      	ldr	r2, [pc, #132]	; (800cee8 <SDMMC_GetCmdResp7+0x94>)
 800ce62:	fba2 2303 	umull	r2, r3, r2, r3
 800ce66:	0a5b      	lsrs	r3, r3, #9
 800ce68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce6c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce70:	4623      	mov	r3, r4
 800ce72:	1e5c      	subs	r4, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce7c:	e02c      	b.n	800ced8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce82:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d0f0      	beq.n	800ce70 <SDMMC_GetCmdResp7+0x1c>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1eb      	bne.n	800ce70 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d004      	beq.n	800ceae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2204      	movs	r2, #4
 800cea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ceaa:	2304      	movs	r3, #4
 800ceac:	e014      	b.n	800ced8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceb2:	f003 0301 	and.w	r3, r3, #1
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d004      	beq.n	800cec4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2201      	movs	r2, #1
 800cebe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e009      	b.n	800ced8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d002      	beq.n	800ced6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2240      	movs	r2, #64	; 0x40
 800ced4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ced6:	2300      	movs	r3, #0
  
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bc90      	pop	{r4, r7}
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	20000000 	.word	0x20000000
 800cee8:	10624dd3 	.word	0x10624dd3

0800ceec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ceec:	b084      	sub	sp, #16
 800ceee:	b580      	push	{r7, lr}
 800cef0:	b084      	sub	sp, #16
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	f107 001c 	add.w	r0, r7, #28
 800cefa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d120      	bne.n	800cf46 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	4b20      	ldr	r3, [pc, #128]	; (800cf98 <USB_CoreInit+0xac>)
 800cf16:	4013      	ands	r3, r2
 800cf18:	687a      	ldr	r2, [r7, #4]
 800cf1a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cf28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d105      	bne.n	800cf3a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f001 fac4 	bl	800e4c8 <USB_CoreReset>
 800cf40:	4603      	mov	r3, r0
 800cf42:	73fb      	strb	r3, [r7, #15]
 800cf44:	e010      	b.n	800cf68 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	68db      	ldr	r3, [r3, #12]
 800cf4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f001 fab8 	bl	800e4c8 <USB_CoreReset>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800cf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d10b      	bne.n	800cf86 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f043 0206 	orr.w	r2, r3, #6
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f043 0220 	orr.w	r2, r3, #32
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf92:	b004      	add	sp, #16
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	ffbdffbf 	.word	0xffbdffbf

0800cf9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d165      	bne.n	800d07c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	4a41      	ldr	r2, [pc, #260]	; (800d0b8 <USB_SetTurnaroundTime+0x11c>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d906      	bls.n	800cfc6 <USB_SetTurnaroundTime+0x2a>
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	4a40      	ldr	r2, [pc, #256]	; (800d0bc <USB_SetTurnaroundTime+0x120>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d802      	bhi.n	800cfc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cfc0:	230f      	movs	r3, #15
 800cfc2:	617b      	str	r3, [r7, #20]
 800cfc4:	e062      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	4a3c      	ldr	r2, [pc, #240]	; (800d0bc <USB_SetTurnaroundTime+0x120>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d906      	bls.n	800cfdc <USB_SetTurnaroundTime+0x40>
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	4a3b      	ldr	r2, [pc, #236]	; (800d0c0 <USB_SetTurnaroundTime+0x124>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d802      	bhi.n	800cfdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cfd6:	230e      	movs	r3, #14
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e057      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	4a38      	ldr	r2, [pc, #224]	; (800d0c0 <USB_SetTurnaroundTime+0x124>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d906      	bls.n	800cff2 <USB_SetTurnaroundTime+0x56>
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	4a37      	ldr	r2, [pc, #220]	; (800d0c4 <USB_SetTurnaroundTime+0x128>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d802      	bhi.n	800cff2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cfec:	230d      	movs	r3, #13
 800cfee:	617b      	str	r3, [r7, #20]
 800cff0:	e04c      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	4a33      	ldr	r2, [pc, #204]	; (800d0c4 <USB_SetTurnaroundTime+0x128>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d906      	bls.n	800d008 <USB_SetTurnaroundTime+0x6c>
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	4a32      	ldr	r2, [pc, #200]	; (800d0c8 <USB_SetTurnaroundTime+0x12c>)
 800cffe:	4293      	cmp	r3, r2
 800d000:	d802      	bhi.n	800d008 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d002:	230c      	movs	r3, #12
 800d004:	617b      	str	r3, [r7, #20]
 800d006:	e041      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	4a2f      	ldr	r2, [pc, #188]	; (800d0c8 <USB_SetTurnaroundTime+0x12c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d906      	bls.n	800d01e <USB_SetTurnaroundTime+0x82>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	4a2e      	ldr	r2, [pc, #184]	; (800d0cc <USB_SetTurnaroundTime+0x130>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d802      	bhi.n	800d01e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d018:	230b      	movs	r3, #11
 800d01a:	617b      	str	r3, [r7, #20]
 800d01c:	e036      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	4a2a      	ldr	r2, [pc, #168]	; (800d0cc <USB_SetTurnaroundTime+0x130>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d906      	bls.n	800d034 <USB_SetTurnaroundTime+0x98>
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	4a29      	ldr	r2, [pc, #164]	; (800d0d0 <USB_SetTurnaroundTime+0x134>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d802      	bhi.n	800d034 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d02e:	230a      	movs	r3, #10
 800d030:	617b      	str	r3, [r7, #20]
 800d032:	e02b      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	4a26      	ldr	r2, [pc, #152]	; (800d0d0 <USB_SetTurnaroundTime+0x134>)
 800d038:	4293      	cmp	r3, r2
 800d03a:	d906      	bls.n	800d04a <USB_SetTurnaroundTime+0xae>
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	4a25      	ldr	r2, [pc, #148]	; (800d0d4 <USB_SetTurnaroundTime+0x138>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d802      	bhi.n	800d04a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d044:	2309      	movs	r3, #9
 800d046:	617b      	str	r3, [r7, #20]
 800d048:	e020      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <USB_SetTurnaroundTime+0x138>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d906      	bls.n	800d060 <USB_SetTurnaroundTime+0xc4>
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	4a20      	ldr	r2, [pc, #128]	; (800d0d8 <USB_SetTurnaroundTime+0x13c>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d802      	bhi.n	800d060 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d05a:	2308      	movs	r3, #8
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	e015      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	4a1d      	ldr	r2, [pc, #116]	; (800d0d8 <USB_SetTurnaroundTime+0x13c>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d906      	bls.n	800d076 <USB_SetTurnaroundTime+0xda>
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	4a1c      	ldr	r2, [pc, #112]	; (800d0dc <USB_SetTurnaroundTime+0x140>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d802      	bhi.n	800d076 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d070:	2307      	movs	r3, #7
 800d072:	617b      	str	r3, [r7, #20]
 800d074:	e00a      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d076:	2306      	movs	r3, #6
 800d078:	617b      	str	r3, [r7, #20]
 800d07a:	e007      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d07c:	79fb      	ldrb	r3, [r7, #7]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d082:	2309      	movs	r3, #9
 800d084:	617b      	str	r3, [r7, #20]
 800d086:	e001      	b.n	800d08c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d088:	2309      	movs	r3, #9
 800d08a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	029b      	lsls	r3, r3, #10
 800d0a0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d0a4:	431a      	orrs	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	371c      	adds	r7, #28
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr
 800d0b8:	00d8acbf 	.word	0x00d8acbf
 800d0bc:	00e4e1bf 	.word	0x00e4e1bf
 800d0c0:	00f423ff 	.word	0x00f423ff
 800d0c4:	0106737f 	.word	0x0106737f
 800d0c8:	011a499f 	.word	0x011a499f
 800d0cc:	01312cff 	.word	0x01312cff
 800d0d0:	014ca43f 	.word	0x014ca43f
 800d0d4:	016e35ff 	.word	0x016e35ff
 800d0d8:	01a6ab1f 	.word	0x01a6ab1f
 800d0dc:	01e847ff 	.word	0x01e847ff

0800d0e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	f043 0201 	orr.w	r2, r3, #1
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d0f4:	2300      	movs	r3, #0
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	370c      	adds	r7, #12
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr

0800d102 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d102:	b480      	push	{r7}
 800d104:	b083      	sub	sp, #12
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	f023 0201 	bic.w	r2, r3, #1
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d13c:	78fb      	ldrb	r3, [r7, #3]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d106      	bne.n	800d150 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	60da      	str	r2, [r3, #12]
 800d14e:	e00b      	b.n	800d168 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d106      	bne.n	800d164 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	60da      	str	r2, [r3, #12]
 800d162:	e001      	b.n	800d168 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	e003      	b.n	800d170 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d168:	2032      	movs	r0, #50	; 0x32
 800d16a:	f7f8 fc57 	bl	8005a1c <HAL_Delay>

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3708      	adds	r7, #8
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d178:	b084      	sub	sp, #16
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b086      	sub	sp, #24
 800d17e:	af00      	add	r7, sp, #0
 800d180:	6078      	str	r0, [r7, #4]
 800d182:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d18a:	2300      	movs	r3, #0
 800d18c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d192:	2300      	movs	r3, #0
 800d194:	613b      	str	r3, [r7, #16]
 800d196:	e009      	b.n	800d1ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	3340      	adds	r3, #64	; 0x40
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	613b      	str	r3, [r7, #16]
 800d1ac:	693b      	ldr	r3, [r7, #16]
 800d1ae:	2b0e      	cmp	r3, #14
 800d1b0:	d9f2      	bls.n	800d198 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d11c      	bne.n	800d1f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1c6:	f043 0302 	orr.w	r3, r3, #2
 800d1ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	e005      	b.n	800d1fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d204:	461a      	mov	r2, r3
 800d206:	2300      	movs	r3, #0
 800d208:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d210:	4619      	mov	r1, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d218:	461a      	mov	r2, r3
 800d21a:	680b      	ldr	r3, [r1, #0]
 800d21c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	2b01      	cmp	r3, #1
 800d222:	d10c      	bne.n	800d23e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	2b00      	cmp	r3, #0
 800d228:	d104      	bne.n	800d234 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d22a:	2100      	movs	r1, #0
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f000 f959 	bl	800d4e4 <USB_SetDevSpeed>
 800d232:	e018      	b.n	800d266 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d234:	2101      	movs	r1, #1
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f954 	bl	800d4e4 <USB_SetDevSpeed>
 800d23c:	e013      	b.n	800d266 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	2b03      	cmp	r3, #3
 800d242:	d10c      	bne.n	800d25e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d104      	bne.n	800d254 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d24a:	2100      	movs	r1, #0
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 f949 	bl	800d4e4 <USB_SetDevSpeed>
 800d252:	e008      	b.n	800d266 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d254:	2101      	movs	r1, #1
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f000 f944 	bl	800d4e4 <USB_SetDevSpeed>
 800d25c:	e003      	b.n	800d266 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d25e:	2103      	movs	r1, #3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 f93f 	bl	800d4e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d266:	2110      	movs	r1, #16
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f8f3 	bl	800d454 <USB_FlushTxFifo>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f911 	bl	800d4a0 <USB_FlushRxFifo>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b00      	cmp	r3, #0
 800d282:	d001      	beq.n	800d288 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d28e:	461a      	mov	r2, r3
 800d290:	2300      	movs	r3, #0
 800d292:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d29a:	461a      	mov	r2, r3
 800d29c:	2300      	movs	r3, #0
 800d29e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	e043      	b.n	800d33a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	015a      	lsls	r2, r3, #5
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2c8:	d118      	bne.n	800d2fc <USB_DevInit+0x184>
    {
      if (i == 0U)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d10a      	bne.n	800d2e6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	015a      	lsls	r2, r3, #5
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2dc:	461a      	mov	r2, r3
 800d2de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	e013      	b.n	800d30e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	015a      	lsls	r2, r3, #5
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	e008      	b.n	800d30e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	015a      	lsls	r2, r3, #5
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4413      	add	r3, r2
 800d304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d308:	461a      	mov	r2, r3
 800d30a:	2300      	movs	r3, #0
 800d30c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	015a      	lsls	r2, r3, #5
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	4413      	add	r3, r2
 800d316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31a:	461a      	mov	r2, r3
 800d31c:	2300      	movs	r3, #0
 800d31e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d32c:	461a      	mov	r2, r3
 800d32e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3301      	adds	r3, #1
 800d338:	613b      	str	r3, [r7, #16]
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	693a      	ldr	r2, [r7, #16]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d3b7      	bcc.n	800d2b2 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d342:	2300      	movs	r3, #0
 800d344:	613b      	str	r3, [r7, #16]
 800d346:	e043      	b.n	800d3d0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	015a      	lsls	r2, r3, #5
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	4413      	add	r3, r2
 800d350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d35a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d35e:	d118      	bne.n	800d392 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d10a      	bne.n	800d37c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	015a      	lsls	r2, r3, #5
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	4413      	add	r3, r2
 800d36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d372:	461a      	mov	r2, r3
 800d374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d378:	6013      	str	r3, [r2, #0]
 800d37a:	e013      	b.n	800d3a4 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	015a      	lsls	r2, r3, #5
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	4413      	add	r3, r2
 800d384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d388:	461a      	mov	r2, r3
 800d38a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d38e:	6013      	str	r3, [r2, #0]
 800d390:	e008      	b.n	800d3a4 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	015a      	lsls	r2, r3, #5
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	4413      	add	r3, r2
 800d39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d39e:	461a      	mov	r2, r3
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	015a      	lsls	r2, r3, #5
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	015a      	lsls	r2, r3, #5
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	4413      	add	r3, r2
 800d3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d3c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	613b      	str	r3, [r7, #16]
 800d3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d2:	693a      	ldr	r2, [r7, #16]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d3b7      	bcc.n	800d348 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	68fa      	ldr	r2, [r7, #12]
 800d3e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d3f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d105      	bne.n	800d40c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	f043 0210 	orr.w	r2, r3, #16
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	699a      	ldr	r2, [r3, #24]
 800d410:	4b0e      	ldr	r3, [pc, #56]	; (800d44c <USB_DevInit+0x2d4>)
 800d412:	4313      	orrs	r3, r2
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d005      	beq.n	800d42a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	f043 0208 	orr.w	r2, r3, #8
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d42a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d105      	bne.n	800d43c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	699a      	ldr	r2, [r3, #24]
 800d434:	4b06      	ldr	r3, [pc, #24]	; (800d450 <USB_DevInit+0x2d8>)
 800d436:	4313      	orrs	r3, r2
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d448:	b004      	add	sp, #16
 800d44a:	4770      	bx	lr
 800d44c:	803c3800 	.word	0x803c3800
 800d450:	40000004 	.word	0x40000004

0800d454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d45e:	2300      	movs	r3, #0
 800d460:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	019b      	lsls	r3, r3, #6
 800d466:	f043 0220 	orr.w	r2, r3, #32
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	3301      	adds	r3, #1
 800d472:	60fb      	str	r3, [r7, #12]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	4a09      	ldr	r2, [pc, #36]	; (800d49c <USB_FlushTxFifo+0x48>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d901      	bls.n	800d480 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d47c:	2303      	movs	r3, #3
 800d47e:	e006      	b.n	800d48e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	f003 0320 	and.w	r3, r3, #32
 800d488:	2b20      	cmp	r3, #32
 800d48a:	d0f0      	beq.n	800d46e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d48c:	2300      	movs	r3, #0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	00030d40 	.word	0x00030d40

0800d4a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2210      	movs	r2, #16
 800d4b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4a09      	ldr	r2, [pc, #36]	; (800d4e0 <USB_FlushRxFifo+0x40>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d901      	bls.n	800d4c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	e006      	b.n	800d4d2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	f003 0310 	and.w	r3, r3, #16
 800d4cc:	2b10      	cmp	r3, #16
 800d4ce:	d0f0      	beq.n	800d4b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3714      	adds	r7, #20
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	00030d40 	.word	0x00030d40

0800d4e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	78fb      	ldrb	r3, [r7, #3]
 800d4fe:	68f9      	ldr	r1, [r7, #12]
 800d500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d504:	4313      	orrs	r3, r2
 800d506:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d516:	b480      	push	{r7}
 800d518:	b087      	sub	sp, #28
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	f003 0306 	and.w	r3, r3, #6
 800d52e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d536:	2300      	movs	r3, #0
 800d538:	75fb      	strb	r3, [r7, #23]
 800d53a:	e00a      	b.n	800d552 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d002      	beq.n	800d548 <USB_GetDevSpeed+0x32>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2b06      	cmp	r3, #6
 800d546:	d102      	bne.n	800d54e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d548:	2302      	movs	r3, #2
 800d54a:	75fb      	strb	r3, [r7, #23]
 800d54c:	e001      	b.n	800d552 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d54e:	230f      	movs	r3, #15
 800d550:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
}
 800d554:	4618      	mov	r0, r3
 800d556:	371c      	adds	r7, #28
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	785b      	ldrb	r3, [r3, #1]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d139      	bne.n	800d5f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d582:	69da      	ldr	r2, [r3, #28]
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	f003 030f 	and.w	r3, r3, #15
 800d58c:	2101      	movs	r1, #1
 800d58e:	fa01 f303 	lsl.w	r3, r1, r3
 800d592:	b29b      	uxth	r3, r3
 800d594:	68f9      	ldr	r1, [r7, #12]
 800d596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d59a:	4313      	orrs	r3, r2
 800d59c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d153      	bne.n	800d65c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	015a      	lsls	r2, r3, #5
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	689b      	ldr	r3, [r3, #8]
 800d5c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	78db      	ldrb	r3, [r3, #3]
 800d5ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	059b      	lsls	r3, r3, #22
 800d5d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d5d8:	431a      	orrs	r2, r3
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	0159      	lsls	r1, r3, #5
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	440b      	add	r3, r1
 800d5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	4b20      	ldr	r3, [pc, #128]	; (800d66c <USB_ActivateEndpoint+0x10c>)
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	600b      	str	r3, [r1, #0]
 800d5ee:	e035      	b.n	800d65c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5f6:	69da      	ldr	r2, [r3, #28]
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	f003 030f 	and.w	r3, r3, #15
 800d600:	2101      	movs	r1, #1
 800d602:	fa01 f303 	lsl.w	r3, r1, r3
 800d606:	041b      	lsls	r3, r3, #16
 800d608:	68f9      	ldr	r1, [r7, #12]
 800d60a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d60e:	4313      	orrs	r3, r2
 800d610:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	015a      	lsls	r2, r3, #5
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	4413      	add	r3, r2
 800d61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d624:	2b00      	cmp	r3, #0
 800d626:	d119      	bne.n	800d65c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	78db      	ldrb	r3, [r3, #3]
 800d642:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d644:	430b      	orrs	r3, r1
 800d646:	431a      	orrs	r2, r3
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	0159      	lsls	r1, r3, #5
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	440b      	add	r3, r1
 800d650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d654:	4619      	mov	r1, r3
 800d656:	4b05      	ldr	r3, [pc, #20]	; (800d66c <USB_ActivateEndpoint+0x10c>)
 800d658:	4313      	orrs	r3, r2
 800d65a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	10008000 	.word	0x10008000

0800d670 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d670:	b480      	push	{r7}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	785b      	ldrb	r3, [r3, #1]
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d161      	bne.n	800d750 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	015a      	lsls	r2, r3, #5
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	4413      	add	r3, r2
 800d694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d69e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6a2:	d11f      	bne.n	800d6e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	015a      	lsls	r2, r3, #5
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	68ba      	ldr	r2, [r7, #8]
 800d6b4:	0151      	lsls	r1, r2, #5
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	440a      	add	r2, r1
 800d6ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d6c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	015a      	lsls	r2, r3, #5
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	4413      	add	r3, r2
 800d6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	0151      	lsls	r1, r2, #5
 800d6d6:	68fa      	ldr	r2, [r7, #12]
 800d6d8:	440a      	add	r2, r1
 800d6da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d6e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	f003 030f 	and.w	r3, r3, #15
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	43db      	mvns	r3, r3
 800d6fe:	68f9      	ldr	r1, [r7, #12]
 800d700:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d704:	4013      	ands	r3, r2
 800d706:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d70e:	69da      	ldr	r2, [r3, #28]
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	f003 030f 	and.w	r3, r3, #15
 800d718:	2101      	movs	r1, #1
 800d71a:	fa01 f303 	lsl.w	r3, r1, r3
 800d71e:	b29b      	uxth	r3, r3
 800d720:	43db      	mvns	r3, r3
 800d722:	68f9      	ldr	r1, [r7, #12]
 800d724:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d728:	4013      	ands	r3, r2
 800d72a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	0159      	lsls	r1, r3, #5
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	440b      	add	r3, r1
 800d742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d746:	4619      	mov	r1, r3
 800d748:	4b35      	ldr	r3, [pc, #212]	; (800d820 <USB_DeactivateEndpoint+0x1b0>)
 800d74a:	4013      	ands	r3, r2
 800d74c:	600b      	str	r3, [r1, #0]
 800d74e:	e060      	b.n	800d812 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	015a      	lsls	r2, r3, #5
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	4413      	add	r3, r2
 800d758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d766:	d11f      	bne.n	800d7a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	015a      	lsls	r2, r3, #5
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	4413      	add	r3, r2
 800d770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	0151      	lsls	r1, r2, #5
 800d77a:	68fa      	ldr	r2, [r7, #12]
 800d77c:	440a      	add	r2, r1
 800d77e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d782:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d786:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	015a      	lsls	r2, r3, #5
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	4413      	add	r3, r2
 800d790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	0151      	lsls	r1, r2, #5
 800d79a:	68fa      	ldr	r2, [r7, #12]
 800d79c:	440a      	add	r2, r1
 800d79e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d7a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	f003 030f 	and.w	r3, r3, #15
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	fa01 f303 	lsl.w	r3, r1, r3
 800d7be:	041b      	lsls	r3, r3, #16
 800d7c0:	43db      	mvns	r3, r3
 800d7c2:	68f9      	ldr	r1, [r7, #12]
 800d7c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7c8:	4013      	ands	r3, r2
 800d7ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7d2:	69da      	ldr	r2, [r3, #28]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	f003 030f 	and.w	r3, r3, #15
 800d7dc:	2101      	movs	r1, #1
 800d7de:	fa01 f303 	lsl.w	r3, r1, r3
 800d7e2:	041b      	lsls	r3, r3, #16
 800d7e4:	43db      	mvns	r3, r3
 800d7e6:	68f9      	ldr	r1, [r7, #12]
 800d7e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	015a      	lsls	r2, r3, #5
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	0159      	lsls	r1, r3, #5
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	440b      	add	r3, r1
 800d806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d80a:	4619      	mov	r1, r3
 800d80c:	4b05      	ldr	r3, [pc, #20]	; (800d824 <USB_DeactivateEndpoint+0x1b4>)
 800d80e:	4013      	ands	r3, r2
 800d810:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3714      	adds	r7, #20
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr
 800d820:	ec337800 	.word	0xec337800
 800d824:	eff37800 	.word	0xeff37800

0800d828 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08a      	sub	sp, #40	; 0x28
 800d82c:	af02      	add	r7, sp, #8
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	4613      	mov	r3, r2
 800d834:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	785b      	ldrb	r3, [r3, #1]
 800d844:	2b01      	cmp	r3, #1
 800d846:	f040 8163 	bne.w	800db10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	695b      	ldr	r3, [r3, #20]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d132      	bne.n	800d8b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	015a      	lsls	r2, r3, #5
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	4413      	add	r3, r2
 800d85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85e:	691a      	ldr	r2, [r3, #16]
 800d860:	69bb      	ldr	r3, [r7, #24]
 800d862:	0159      	lsls	r1, r3, #5
 800d864:	69fb      	ldr	r3, [r7, #28]
 800d866:	440b      	add	r3, r1
 800d868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d86c:	4619      	mov	r1, r3
 800d86e:	4ba5      	ldr	r3, [pc, #660]	; (800db04 <USB_EPStartXfer+0x2dc>)
 800d870:	4013      	ands	r3, r2
 800d872:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	015a      	lsls	r2, r3, #5
 800d878:	69fb      	ldr	r3, [r7, #28]
 800d87a:	4413      	add	r3, r2
 800d87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	69ba      	ldr	r2, [r7, #24]
 800d884:	0151      	lsls	r1, r2, #5
 800d886:	69fa      	ldr	r2, [r7, #28]
 800d888:	440a      	add	r2, r1
 800d88a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d88e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	015a      	lsls	r2, r3, #5
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8a0:	691a      	ldr	r2, [r3, #16]
 800d8a2:	69bb      	ldr	r3, [r7, #24]
 800d8a4:	0159      	lsls	r1, r3, #5
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	440b      	add	r3, r1
 800d8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	4b95      	ldr	r3, [pc, #596]	; (800db08 <USB_EPStartXfer+0x2e0>)
 800d8b2:	4013      	ands	r3, r2
 800d8b4:	610b      	str	r3, [r1, #16]
 800d8b6:	e074      	b.n	800d9a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d8b8:	69bb      	ldr	r3, [r7, #24]
 800d8ba:	015a      	lsls	r2, r3, #5
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	4413      	add	r3, r2
 800d8c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c4:	691a      	ldr	r2, [r3, #16]
 800d8c6:	69bb      	ldr	r3, [r7, #24]
 800d8c8:	0159      	lsls	r1, r3, #5
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	440b      	add	r3, r1
 800d8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	4b8c      	ldr	r3, [pc, #560]	; (800db08 <USB_EPStartXfer+0x2e0>)
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	015a      	lsls	r2, r3, #5
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	4413      	add	r3, r2
 800d8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e6:	691a      	ldr	r2, [r3, #16]
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	0159      	lsls	r1, r3, #5
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	440b      	add	r3, r1
 800d8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f4:	4619      	mov	r1, r3
 800d8f6:	4b83      	ldr	r3, [pc, #524]	; (800db04 <USB_EPStartXfer+0x2dc>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	69fb      	ldr	r3, [r7, #28]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d908:	691a      	ldr	r2, [r3, #16]
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	6959      	ldr	r1, [r3, #20]
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	440b      	add	r3, r1
 800d914:	1e59      	subs	r1, r3, #1
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d91e:	04d9      	lsls	r1, r3, #19
 800d920:	4b7a      	ldr	r3, [pc, #488]	; (800db0c <USB_EPStartXfer+0x2e4>)
 800d922:	400b      	ands	r3, r1
 800d924:	69b9      	ldr	r1, [r7, #24]
 800d926:	0148      	lsls	r0, r1, #5
 800d928:	69f9      	ldr	r1, [r7, #28]
 800d92a:	4401      	add	r1, r0
 800d92c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d930:	4313      	orrs	r3, r2
 800d932:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	015a      	lsls	r2, r3, #5
 800d938:	69fb      	ldr	r3, [r7, #28]
 800d93a:	4413      	add	r3, r2
 800d93c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d940:	691a      	ldr	r2, [r3, #16]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	695b      	ldr	r3, [r3, #20]
 800d946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d94a:	69b9      	ldr	r1, [r7, #24]
 800d94c:	0148      	lsls	r0, r1, #5
 800d94e:	69f9      	ldr	r1, [r7, #28]
 800d950:	4401      	add	r1, r0
 800d952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d956:	4313      	orrs	r3, r2
 800d958:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	78db      	ldrb	r3, [r3, #3]
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d11f      	bne.n	800d9a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	015a      	lsls	r2, r3, #5
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	4413      	add	r3, r2
 800d96a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	69ba      	ldr	r2, [r7, #24]
 800d972:	0151      	lsls	r1, r2, #5
 800d974:	69fa      	ldr	r2, [r7, #28]
 800d976:	440a      	add	r2, r1
 800d978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d97c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d980:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	015a      	lsls	r2, r3, #5
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	4413      	add	r3, r2
 800d98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d98e:	691b      	ldr	r3, [r3, #16]
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	0151      	lsls	r1, r2, #5
 800d994:	69fa      	ldr	r2, [r7, #28]
 800d996:	440a      	add	r2, r1
 800d998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d99c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d9a2:	79fb      	ldrb	r3, [r7, #7]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d14b      	bne.n	800da40 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d009      	beq.n	800d9c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	015a      	lsls	r2, r3, #5
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9bc:	461a      	mov	r2, r3
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	78db      	ldrb	r3, [r3, #3]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d128      	bne.n	800da1e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d110      	bne.n	800d9fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	69ba      	ldr	r2, [r7, #24]
 800d9ec:	0151      	lsls	r1, r2, #5
 800d9ee:	69fa      	ldr	r2, [r7, #28]
 800d9f0:	440a      	add	r2, r1
 800d9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	e00f      	b.n	800da1e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	69ba      	ldr	r2, [r7, #24]
 800da0e:	0151      	lsls	r1, r2, #5
 800da10:	69fa      	ldr	r2, [r7, #28]
 800da12:	440a      	add	r2, r1
 800da14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	015a      	lsls	r2, r3, #5
 800da22:	69fb      	ldr	r3, [r7, #28]
 800da24:	4413      	add	r3, r2
 800da26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	69ba      	ldr	r2, [r7, #24]
 800da2e:	0151      	lsls	r1, r2, #5
 800da30:	69fa      	ldr	r2, [r7, #28]
 800da32:	440a      	add	r2, r1
 800da34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da3c:	6013      	str	r3, [r2, #0]
 800da3e:	e133      	b.n	800dca8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800da40:	69bb      	ldr	r3, [r7, #24]
 800da42:	015a      	lsls	r2, r3, #5
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	4413      	add	r3, r2
 800da48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	69ba      	ldr	r2, [r7, #24]
 800da50:	0151      	lsls	r1, r2, #5
 800da52:	69fa      	ldr	r2, [r7, #28]
 800da54:	440a      	add	r2, r1
 800da56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800da5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800da5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	78db      	ldrb	r3, [r3, #3]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d015      	beq.n	800da94 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	f000 811b 	beq.w	800dca8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 030f 	and.w	r3, r3, #15
 800da82:	2101      	movs	r1, #1
 800da84:	fa01 f303 	lsl.w	r3, r1, r3
 800da88:	69f9      	ldr	r1, [r7, #28]
 800da8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800da8e:	4313      	orrs	r3, r2
 800da90:	634b      	str	r3, [r1, #52]	; 0x34
 800da92:	e109      	b.n	800dca8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800da94:	69fb      	ldr	r3, [r7, #28]
 800da96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d110      	bne.n	800dac6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	69fb      	ldr	r3, [r7, #28]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	69ba      	ldr	r2, [r7, #24]
 800dab4:	0151      	lsls	r1, r2, #5
 800dab6:	69fa      	ldr	r2, [r7, #28]
 800dab8:	440a      	add	r2, r1
 800daba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dabe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dac2:	6013      	str	r3, [r2, #0]
 800dac4:	e00f      	b.n	800dae6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	015a      	lsls	r2, r3, #5
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	4413      	add	r3, r2
 800dace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	0151      	lsls	r1, r2, #5
 800dad8:	69fa      	ldr	r2, [r7, #28]
 800dada:	440a      	add	r2, r1
 800dadc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dae4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	68d9      	ldr	r1, [r3, #12]
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	781a      	ldrb	r2, [r3, #0]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	695b      	ldr	r3, [r3, #20]
 800daf2:	b298      	uxth	r0, r3
 800daf4:	79fb      	ldrb	r3, [r7, #7]
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4603      	mov	r3, r0
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	f000 fa38 	bl	800df70 <USB_WritePacket>
 800db00:	e0d2      	b.n	800dca8 <USB_EPStartXfer+0x480>
 800db02:	bf00      	nop
 800db04:	e007ffff 	.word	0xe007ffff
 800db08:	fff80000 	.word	0xfff80000
 800db0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	015a      	lsls	r2, r3, #5
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	4413      	add	r3, r2
 800db18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db1c:	691a      	ldr	r2, [r3, #16]
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	0159      	lsls	r1, r3, #5
 800db22:	69fb      	ldr	r3, [r7, #28]
 800db24:	440b      	add	r3, r1
 800db26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db2a:	4619      	mov	r1, r3
 800db2c:	4b61      	ldr	r3, [pc, #388]	; (800dcb4 <USB_EPStartXfer+0x48c>)
 800db2e:	4013      	ands	r3, r2
 800db30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	015a      	lsls	r2, r3, #5
 800db36:	69fb      	ldr	r3, [r7, #28]
 800db38:	4413      	add	r3, r2
 800db3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db3e:	691a      	ldr	r2, [r3, #16]
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	0159      	lsls	r1, r3, #5
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	440b      	add	r3, r1
 800db48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db4c:	4619      	mov	r1, r3
 800db4e:	4b5a      	ldr	r3, [pc, #360]	; (800dcb8 <USB_EPStartXfer+0x490>)
 800db50:	4013      	ands	r3, r2
 800db52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	695b      	ldr	r3, [r3, #20]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d123      	bne.n	800dba4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db68:	691a      	ldr	r2, [r3, #16]
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db72:	69b9      	ldr	r1, [r7, #24]
 800db74:	0148      	lsls	r0, r1, #5
 800db76:	69f9      	ldr	r1, [r7, #28]
 800db78:	4401      	add	r1, r0
 800db7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800db7e:	4313      	orrs	r3, r2
 800db80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800db82:	69bb      	ldr	r3, [r7, #24]
 800db84:	015a      	lsls	r2, r3, #5
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	4413      	add	r3, r2
 800db8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	69ba      	ldr	r2, [r7, #24]
 800db92:	0151      	lsls	r1, r2, #5
 800db94:	69fa      	ldr	r2, [r7, #28]
 800db96:	440a      	add	r2, r1
 800db98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dba0:	6113      	str	r3, [r2, #16]
 800dba2:	e033      	b.n	800dc0c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	695a      	ldr	r2, [r3, #20]
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	689b      	ldr	r3, [r3, #8]
 800dbac:	4413      	add	r3, r2
 800dbae:	1e5a      	subs	r2, r3, #1
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbb8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	015a      	lsls	r2, r3, #5
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc6:	691a      	ldr	r2, [r3, #16]
 800dbc8:	8afb      	ldrh	r3, [r7, #22]
 800dbca:	04d9      	lsls	r1, r3, #19
 800dbcc:	4b3b      	ldr	r3, [pc, #236]	; (800dcbc <USB_EPStartXfer+0x494>)
 800dbce:	400b      	ands	r3, r1
 800dbd0:	69b9      	ldr	r1, [r7, #24]
 800dbd2:	0148      	lsls	r0, r1, #5
 800dbd4:	69f9      	ldr	r1, [r7, #28]
 800dbd6:	4401      	add	r1, r0
 800dbd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	015a      	lsls	r2, r3, #5
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbec:	691a      	ldr	r2, [r3, #16]
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	8af9      	ldrh	r1, [r7, #22]
 800dbf4:	fb01 f303 	mul.w	r3, r1, r3
 800dbf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dbfc:	69b9      	ldr	r1, [r7, #24]
 800dbfe:	0148      	lsls	r0, r1, #5
 800dc00:	69f9      	ldr	r1, [r7, #28]
 800dc02:	4401      	add	r1, r0
 800dc04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dc08:	4313      	orrs	r3, r2
 800dc0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dc0c:	79fb      	ldrb	r3, [r7, #7]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d10d      	bne.n	800dc2e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	68d9      	ldr	r1, [r3, #12]
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	015a      	lsls	r2, r3, #5
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	4413      	add	r3, r2
 800dc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc2a:	460a      	mov	r2, r1
 800dc2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	78db      	ldrb	r3, [r3, #3]
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	d128      	bne.n	800dc88 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d110      	bne.n	800dc68 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800dc46:	69bb      	ldr	r3, [r7, #24]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	69fb      	ldr	r3, [r7, #28]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	69fa      	ldr	r2, [r7, #28]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc64:	6013      	str	r3, [r2, #0]
 800dc66:	e00f      	b.n	800dc88 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800dc68:	69bb      	ldr	r3, [r7, #24]
 800dc6a:	015a      	lsls	r2, r3, #5
 800dc6c:	69fb      	ldr	r3, [r7, #28]
 800dc6e:	4413      	add	r3, r2
 800dc70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	69ba      	ldr	r2, [r7, #24]
 800dc78:	0151      	lsls	r1, r2, #5
 800dc7a:	69fa      	ldr	r2, [r7, #28]
 800dc7c:	440a      	add	r2, r1
 800dc7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	015a      	lsls	r2, r3, #5
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	4413      	add	r3, r2
 800dc90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	69ba      	ldr	r2, [r7, #24]
 800dc98:	0151      	lsls	r1, r2, #5
 800dc9a:	69fa      	ldr	r2, [r7, #28]
 800dc9c:	440a      	add	r2, r1
 800dc9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3720      	adds	r7, #32
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	fff80000 	.word	0xfff80000
 800dcb8:	e007ffff 	.word	0xe007ffff
 800dcbc:	1ff80000 	.word	0x1ff80000

0800dcc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	4613      	mov	r3, r2
 800dccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	785b      	ldrb	r3, [r3, #1]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	f040 80cd 	bne.w	800de7c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	695b      	ldr	r3, [r3, #20]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d132      	bne.n	800dd50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dcea:	693b      	ldr	r3, [r7, #16]
 800dcec:	015a      	lsls	r2, r3, #5
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcf6:	691a      	ldr	r2, [r3, #16]
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	0159      	lsls	r1, r3, #5
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	440b      	add	r3, r1
 800dd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd04:	4619      	mov	r1, r3
 800dd06:	4b98      	ldr	r3, [pc, #608]	; (800df68 <USB_EP0StartXfer+0x2a8>)
 800dd08:	4013      	ands	r3, r2
 800dd0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	015a      	lsls	r2, r3, #5
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	4413      	add	r3, r2
 800dd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd18:	691b      	ldr	r3, [r3, #16]
 800dd1a:	693a      	ldr	r2, [r7, #16]
 800dd1c:	0151      	lsls	r1, r2, #5
 800dd1e:	697a      	ldr	r2, [r7, #20]
 800dd20:	440a      	add	r2, r1
 800dd22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd38:	691a      	ldr	r2, [r3, #16]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	0159      	lsls	r1, r3, #5
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	440b      	add	r3, r1
 800dd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd46:	4619      	mov	r1, r3
 800dd48:	4b88      	ldr	r3, [pc, #544]	; (800df6c <USB_EP0StartXfer+0x2ac>)
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	610b      	str	r3, [r1, #16]
 800dd4e:	e04e      	b.n	800ddee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	4413      	add	r3, r2
 800dd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd5c:	691a      	ldr	r2, [r3, #16]
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	0159      	lsls	r1, r3, #5
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	440b      	add	r3, r1
 800dd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	4b7f      	ldr	r3, [pc, #508]	; (800df6c <USB_EP0StartXfer+0x2ac>)
 800dd6e:	4013      	ands	r3, r2
 800dd70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	015a      	lsls	r2, r3, #5
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	4413      	add	r3, r2
 800dd7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd7e:	691a      	ldr	r2, [r3, #16]
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	0159      	lsls	r1, r3, #5
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	440b      	add	r3, r1
 800dd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	4b76      	ldr	r3, [pc, #472]	; (800df68 <USB_EP0StartXfer+0x2a8>)
 800dd90:	4013      	ands	r3, r2
 800dd92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	695a      	ldr	r2, [r3, #20]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d903      	bls.n	800dda8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	689a      	ldr	r2, [r3, #8]
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	015a      	lsls	r2, r3, #5
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	4413      	add	r3, r2
 800ddb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	0151      	lsls	r1, r2, #5
 800ddba:	697a      	ldr	r2, [r7, #20]
 800ddbc:	440a      	add	r2, r1
 800ddbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ddc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddd4:	691a      	ldr	r2, [r3, #16]
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	695b      	ldr	r3, [r3, #20]
 800ddda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddde:	6939      	ldr	r1, [r7, #16]
 800dde0:	0148      	lsls	r0, r1, #5
 800dde2:	6979      	ldr	r1, [r7, #20]
 800dde4:	4401      	add	r1, r0
 800dde6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ddea:	4313      	orrs	r3, r2
 800ddec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ddee:	79fb      	ldrb	r3, [r7, #7]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d11e      	bne.n	800de32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d009      	beq.n	800de10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	015a      	lsls	r2, r3, #5
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	4413      	add	r3, r2
 800de04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de08:	461a      	mov	r2, r3
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	691b      	ldr	r3, [r3, #16]
 800de0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	015a      	lsls	r2, r3, #5
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	4413      	add	r3, r2
 800de18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	0151      	lsls	r1, r2, #5
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	440a      	add	r2, r1
 800de26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de2e:	6013      	str	r3, [r2, #0]
 800de30:	e092      	b.n	800df58 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	015a      	lsls	r2, r3, #5
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	4413      	add	r3, r2
 800de3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	0151      	lsls	r1, r2, #5
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	440a      	add	r2, r1
 800de48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	695b      	ldr	r3, [r3, #20]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d07e      	beq.n	800df58 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	f003 030f 	and.w	r3, r3, #15
 800de6a:	2101      	movs	r1, #1
 800de6c:	fa01 f303 	lsl.w	r3, r1, r3
 800de70:	6979      	ldr	r1, [r7, #20]
 800de72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de76:	4313      	orrs	r3, r2
 800de78:	634b      	str	r3, [r1, #52]	; 0x34
 800de7a:	e06d      	b.n	800df58 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	015a      	lsls	r2, r3, #5
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	4413      	add	r3, r2
 800de84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de88:	691a      	ldr	r2, [r3, #16]
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	0159      	lsls	r1, r3, #5
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	440b      	add	r3, r1
 800de92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de96:	4619      	mov	r1, r3
 800de98:	4b34      	ldr	r3, [pc, #208]	; (800df6c <USB_EP0StartXfer+0x2ac>)
 800de9a:	4013      	ands	r3, r2
 800de9c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	015a      	lsls	r2, r3, #5
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	4413      	add	r3, r2
 800dea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deaa:	691a      	ldr	r2, [r3, #16]
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	0159      	lsls	r1, r3, #5
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	440b      	add	r3, r1
 800deb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb8:	4619      	mov	r1, r3
 800deba:	4b2b      	ldr	r3, [pc, #172]	; (800df68 <USB_EP0StartXfer+0x2a8>)
 800debc:	4013      	ands	r3, r2
 800debe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	695b      	ldr	r3, [r3, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	689a      	ldr	r2, [r3, #8]
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ded0:	693b      	ldr	r3, [r7, #16]
 800ded2:	015a      	lsls	r2, r3, #5
 800ded4:	697b      	ldr	r3, [r7, #20]
 800ded6:	4413      	add	r3, r2
 800ded8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dedc:	691b      	ldr	r3, [r3, #16]
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	0151      	lsls	r1, r2, #5
 800dee2:	697a      	ldr	r2, [r7, #20]
 800dee4:	440a      	add	r2, r1
 800dee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800deee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	015a      	lsls	r2, r3, #5
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	4413      	add	r3, r2
 800def8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800defc:	691a      	ldr	r2, [r3, #16]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800df06:	6939      	ldr	r1, [r7, #16]
 800df08:	0148      	lsls	r0, r1, #5
 800df0a:	6979      	ldr	r1, [r7, #20]
 800df0c:	4401      	add	r1, r0
 800df0e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800df12:	4313      	orrs	r3, r2
 800df14:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800df16:	79fb      	ldrb	r3, [r7, #7]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d10d      	bne.n	800df38 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d009      	beq.n	800df38 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	68d9      	ldr	r1, [r3, #12]
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	015a      	lsls	r2, r3, #5
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df34:	460a      	mov	r2, r1
 800df36:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800df38:	693b      	ldr	r3, [r7, #16]
 800df3a:	015a      	lsls	r2, r3, #5
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	4413      	add	r3, r2
 800df40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	693a      	ldr	r2, [r7, #16]
 800df48:	0151      	lsls	r1, r2, #5
 800df4a:	697a      	ldr	r2, [r7, #20]
 800df4c:	440a      	add	r2, r1
 800df4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800df56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	371c      	adds	r7, #28
 800df5e:	46bd      	mov	sp, r7
 800df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df64:	4770      	bx	lr
 800df66:	bf00      	nop
 800df68:	e007ffff 	.word	0xe007ffff
 800df6c:	fff80000 	.word	0xfff80000

0800df70 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800df70:	b480      	push	{r7}
 800df72:	b089      	sub	sp, #36	; 0x24
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4611      	mov	r1, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	460b      	mov	r3, r1
 800df80:	71fb      	strb	r3, [r7, #7]
 800df82:	4613      	mov	r3, r2
 800df84:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800df8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df92:	2b00      	cmp	r3, #0
 800df94:	d11a      	bne.n	800dfcc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800df96:	88bb      	ldrh	r3, [r7, #4]
 800df98:	3303      	adds	r3, #3
 800df9a:	089b      	lsrs	r3, r3, #2
 800df9c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61bb      	str	r3, [r7, #24]
 800dfa2:	e00f      	b.n	800dfc4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dfa4:	79fb      	ldrb	r3, [r7, #7]
 800dfa6:	031a      	lsls	r2, r3, #12
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	4413      	add	r3, r2
 800dfac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	3304      	adds	r3, #4
 800dfbc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	3301      	adds	r3, #1
 800dfc2:	61bb      	str	r3, [r7, #24]
 800dfc4:	69ba      	ldr	r2, [r7, #24]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d3eb      	bcc.n	800dfa4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3724      	adds	r7, #36	; 0x24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dfda:	b480      	push	{r7}
 800dfdc:	b089      	sub	sp, #36	; 0x24
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	60f8      	str	r0, [r7, #12]
 800dfe2:	60b9      	str	r1, [r7, #8]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800dfec:	68bb      	ldr	r3, [r7, #8]
 800dfee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800dff0:	88fb      	ldrh	r3, [r7, #6]
 800dff2:	3303      	adds	r3, #3
 800dff4:	089b      	lsrs	r3, r3, #2
 800dff6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dff8:	2300      	movs	r3, #0
 800dffa:	61bb      	str	r3, [r7, #24]
 800dffc:	e00b      	b.n	800e016 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e004:	681a      	ldr	r2, [r3, #0]
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	601a      	str	r2, [r3, #0]
    pDest++;
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	3304      	adds	r3, #4
 800e00e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800e010:	69bb      	ldr	r3, [r7, #24]
 800e012:	3301      	adds	r3, #1
 800e014:	61bb      	str	r3, [r7, #24]
 800e016:	69ba      	ldr	r2, [r7, #24]
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d3ef      	bcc.n	800dffe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800e01e:	69fb      	ldr	r3, [r7, #28]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3724      	adds	r7, #36	; 0x24
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b085      	sub	sp, #20
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	781b      	ldrb	r3, [r3, #0]
 800e03e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	785b      	ldrb	r3, [r3, #1]
 800e044:	2b01      	cmp	r3, #1
 800e046:	d12c      	bne.n	800e0a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	015a      	lsls	r2, r3, #5
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	4413      	add	r3, r2
 800e050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	db12      	blt.n	800e080 <USB_EPSetStall+0x54>
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00f      	beq.n	800e080 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	015a      	lsls	r2, r3, #5
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	4413      	add	r3, r2
 800e068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	0151      	lsls	r1, r2, #5
 800e072:	68fa      	ldr	r2, [r7, #12]
 800e074:	440a      	add	r2, r1
 800e076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e07a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e07e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	015a      	lsls	r2, r3, #5
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	4413      	add	r3, r2
 800e088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	68ba      	ldr	r2, [r7, #8]
 800e090:	0151      	lsls	r1, r2, #5
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	440a      	add	r2, r1
 800e096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e09a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e09e:	6013      	str	r3, [r2, #0]
 800e0a0:	e02b      	b.n	800e0fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	015a      	lsls	r2, r3, #5
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	4413      	add	r3, r2
 800e0aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	db12      	blt.n	800e0da <USB_EPSetStall+0xae>
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d00f      	beq.n	800e0da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	015a      	lsls	r2, r3, #5
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	68ba      	ldr	r2, [r7, #8]
 800e0ca:	0151      	lsls	r1, r2, #5
 800e0cc:	68fa      	ldr	r2, [r7, #12]
 800e0ce:	440a      	add	r2, r1
 800e0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e0d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	0151      	lsls	r1, r2, #5
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	440a      	add	r2, r1
 800e0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e0f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e0fa:	2300      	movs	r3, #0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3714      	adds	r7, #20
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e108:	b480      	push	{r7}
 800e10a:	b085      	sub	sp, #20
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	2b01      	cmp	r3, #1
 800e122:	d128      	bne.n	800e176 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	015a      	lsls	r2, r3, #5
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	0151      	lsls	r1, r2, #5
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	440a      	add	r2, r1
 800e13a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e13e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e142:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	78db      	ldrb	r3, [r3, #3]
 800e148:	2b03      	cmp	r3, #3
 800e14a:	d003      	beq.n	800e154 <USB_EPClearStall+0x4c>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	78db      	ldrb	r3, [r3, #3]
 800e150:	2b02      	cmp	r3, #2
 800e152:	d138      	bne.n	800e1c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	015a      	lsls	r2, r3, #5
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	4413      	add	r3, r2
 800e15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68ba      	ldr	r2, [r7, #8]
 800e164:	0151      	lsls	r1, r2, #5
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	440a      	add	r2, r1
 800e16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e16e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e172:	6013      	str	r3, [r2, #0]
 800e174:	e027      	b.n	800e1c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	68ba      	ldr	r2, [r7, #8]
 800e186:	0151      	lsls	r1, r2, #5
 800e188:	68fa      	ldr	r2, [r7, #12]
 800e18a:	440a      	add	r2, r1
 800e18c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e190:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e194:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	78db      	ldrb	r3, [r3, #3]
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d003      	beq.n	800e1a6 <USB_EPClearStall+0x9e>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	78db      	ldrb	r3, [r3, #3]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d10f      	bne.n	800e1c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	015a      	lsls	r2, r3, #5
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	0151      	lsls	r1, r2, #5
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	440a      	add	r2, r1
 800e1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e1c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e1c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e1c6:	2300      	movs	r3, #0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3714      	adds	r7, #20
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	460b      	mov	r3, r1
 800e1de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e1f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1fe:	681a      	ldr	r2, [r3, #0]
 800e200:	78fb      	ldrb	r3, [r7, #3]
 800e202:	011b      	lsls	r3, r3, #4
 800e204:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e208:	68f9      	ldr	r1, [r7, #12]
 800e20a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e20e:	4313      	orrs	r3, r2
 800e210:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e212:	2300      	movs	r3, #0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr

0800e220 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e23a:	f023 0302 	bic.w	r3, r3, #2
 800e23e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e240:	2003      	movs	r0, #3
 800e242:	f7f7 fbeb 	bl	8005a1c <HAL_Delay>

  return HAL_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e26a:	f043 0302 	orr.w	r3, r3, #2
 800e26e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e270:	2003      	movs	r0, #3
 800e272:	f7f7 fbd3 	bl	8005a1c <HAL_Delay>

  return HAL_OK;
 800e276:	2300      	movs	r3, #0
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3710      	adds	r7, #16
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	4013      	ands	r3, r2
 800e296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e298:	68fb      	ldr	r3, [r7, #12]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2a6:	b480      	push	{r7}
 800e2a8:	b085      	sub	sp, #20
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b8:	699b      	ldr	r3, [r3, #24]
 800e2ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2c2:	69db      	ldr	r3, [r3, #28]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	4013      	ands	r3, r2
 800e2c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	0c1b      	lsrs	r3, r3, #16
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3714      	adds	r7, #20
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr

0800e2da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b085      	sub	sp, #20
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ec:	699b      	ldr	r3, [r3, #24]
 800e2ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2f6:	69db      	ldr	r3, [r3, #28]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	b29b      	uxth	r3, r3
}
 800e302:	4618      	mov	r0, r3
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e30e:	b480      	push	{r7}
 800e310:	b085      	sub	sp, #20
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	460b      	mov	r3, r1
 800e318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e31e:	78fb      	ldrb	r3, [r7, #3]
 800e320:	015a      	lsls	r2, r3, #5
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	4413      	add	r3, r2
 800e326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	4013      	ands	r3, r2
 800e33a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e33c:	68bb      	ldr	r3, [r7, #8]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr

0800e34a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e34a:	b480      	push	{r7}
 800e34c:	b087      	sub	sp, #28
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e360:	691b      	ldr	r3, [r3, #16]
 800e362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e36a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e36c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e36e:	78fb      	ldrb	r3, [r7, #3]
 800e370:	f003 030f 	and.w	r3, r3, #15
 800e374:	68fa      	ldr	r2, [r7, #12]
 800e376:	fa22 f303 	lsr.w	r3, r2, r3
 800e37a:	01db      	lsls	r3, r3, #7
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	693a      	ldr	r2, [r7, #16]
 800e380:	4313      	orrs	r3, r2
 800e382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e384:	78fb      	ldrb	r3, [r7, #3]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	697b      	ldr	r3, [r7, #20]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4013      	ands	r3, r2
 800e396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e398:	68bb      	ldr	r3, [r7, #8]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	371c      	adds	r7, #28
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e3a6:	b480      	push	{r7}
 800e3a8:	b083      	sub	sp, #12
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	f003 0301 	and.w	r3, r3, #1
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	370c      	adds	r7, #12
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr
	...

0800e3c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3d6:	681a      	ldr	r2, [r3, #0]
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3de:	4619      	mov	r1, r3
 800e3e0:	4b09      	ldr	r3, [pc, #36]	; (800e408 <USB_ActivateSetup+0x44>)
 800e3e2:	4013      	ands	r3, r2
 800e3e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	68fa      	ldr	r2, [r7, #12]
 800e3f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr
 800e408:	fffff800 	.word	0xfffff800

0800e40c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	460b      	mov	r3, r1
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	333c      	adds	r3, #60	; 0x3c
 800e422:	3304      	adds	r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	4a26      	ldr	r2, [pc, #152]	; (800e4c4 <USB_EP0_OutStart+0xb8>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d90a      	bls.n	800e446 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e43c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e440:	d101      	bne.n	800e446 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e442:	2300      	movs	r3, #0
 800e444:	e037      	b.n	800e4b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e44c:	461a      	mov	r2, r3
 800e44e:	2300      	movs	r3, #0
 800e450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e458:	691b      	ldr	r3, [r3, #16]
 800e45a:	697a      	ldr	r2, [r7, #20]
 800e45c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e466:	697b      	ldr	r3, [r7, #20]
 800e468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	697a      	ldr	r2, [r7, #20]
 800e470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e474:	f043 0318 	orr.w	r3, r3, #24
 800e478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e47a:	697b      	ldr	r3, [r7, #20]
 800e47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	697a      	ldr	r2, [r7, #20]
 800e484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e488:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e48c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e48e:	7afb      	ldrb	r3, [r7, #11]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d10f      	bne.n	800e4b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e49a:	461a      	mov	r2, r3
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	697a      	ldr	r2, [r7, #20]
 800e4aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e4b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	371c      	adds	r7, #28
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	4f54300a 	.word	0x4f54300a

0800e4c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	60fb      	str	r3, [r7, #12]
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	4a13      	ldr	r2, [pc, #76]	; (800e52c <USB_CoreReset+0x64>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d901      	bls.n	800e4e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e4e2:	2303      	movs	r3, #3
 800e4e4:	e01b      	b.n	800e51e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	daf2      	bge.n	800e4d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	f043 0201 	orr.w	r2, r3, #1
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3301      	adds	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	4a09      	ldr	r2, [pc, #36]	; (800e52c <USB_CoreReset+0x64>)
 800e508:	4293      	cmp	r3, r2
 800e50a:	d901      	bls.n	800e510 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e50c:	2303      	movs	r3, #3
 800e50e:	e006      	b.n	800e51e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	691b      	ldr	r3, [r3, #16]
 800e514:	f003 0301 	and.w	r3, r3, #1
 800e518:	2b01      	cmp	r3, #1
 800e51a:	d0f0      	beq.n	800e4fe <USB_CoreReset+0x36>

  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	00030d40 	.word	0x00030d40

0800e530 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800e530:	b580      	push	{r7, lr}
 800e532:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e534:	4904      	ldr	r1, [pc, #16]	; (800e548 <MX_FATFS_Init+0x18>)
 800e536:	4805      	ldr	r0, [pc, #20]	; (800e54c <MX_FATFS_Init+0x1c>)
 800e538:	f004 fd5e 	bl	8012ff8 <FATFS_LinkDriver>
 800e53c:	4603      	mov	r3, r0
 800e53e:	461a      	mov	r2, r3
 800e540:	4b03      	ldr	r3, [pc, #12]	; (800e550 <MX_FATFS_Init+0x20>)
 800e542:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800e544:	bf00      	nop
 800e546:	bd80      	pop	{r7, pc}
 800e548:	200271c0 	.word	0x200271c0
 800e54c:	0801ac78 	.word	0x0801ac78
 800e550:	200271bc 	.word	0x200271bc

0800e554 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800e554:	b480      	push	{r7}
 800e556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e558:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e56a:	2300      	movs	r3, #0
 800e56c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e56e:	f000 f896 	bl	800e69e <BSP_SD_IsDetected>
 800e572:	4603      	mov	r3, r0
 800e574:	2b01      	cmp	r3, #1
 800e576:	d001      	beq.n	800e57c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e578:	2302      	movs	r3, #2
 800e57a:	e012      	b.n	800e5a2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e57c:	480b      	ldr	r0, [pc, #44]	; (800e5ac <BSP_SD_Init+0x48>)
 800e57e:	f7fa fb15 	bl	8008bac <HAL_SD_Init>
 800e582:	4603      	mov	r3, r0
 800e584:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d109      	bne.n	800e5a0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e58c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e590:	4806      	ldr	r0, [pc, #24]	; (800e5ac <BSP_SD_Init+0x48>)
 800e592:	f7fb f8cd 	bl	8009730 <HAL_SD_ConfigWideBusOperation>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d001      	beq.n	800e5a0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e59c:	2301      	movs	r3, #1
 800e59e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	20008ad8 	.word	0x20008ad8

0800e5b0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	60b9      	str	r1, [r7, #8]
 800e5ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	68f9      	ldr	r1, [r7, #12]
 800e5c6:	4806      	ldr	r0, [pc, #24]	; (800e5e0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800e5c8:	f7fa fb88 	bl	8008cdc <HAL_SD_ReadBlocks_DMA>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	20008ad8 	.word	0x20008ad8

0800e5e4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	68f9      	ldr	r1, [r7, #12]
 800e5fa:	4806      	ldr	r0, [pc, #24]	; (800e614 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e5fc:	f7fa fc5a 	bl	8008eb4 <HAL_SD_WriteBlocks_DMA>
 800e600:	4603      	mov	r3, r0
 800e602:	2b00      	cmp	r3, #0
 800e604:	d001      	beq.n	800e60a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800e60a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3718      	adds	r7, #24
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}
 800e614:	20008ad8 	.word	0x20008ad8

0800e618 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e61c:	4805      	ldr	r0, [pc, #20]	; (800e634 <BSP_SD_GetCardState+0x1c>)
 800e61e:	f7fb f903 	bl	8009828 <HAL_SD_GetCardState>
 800e622:	4603      	mov	r3, r0
 800e624:	2b04      	cmp	r3, #4
 800e626:	bf14      	ite	ne
 800e628:	2301      	movne	r3, #1
 800e62a:	2300      	moveq	r3, #0
 800e62c:	b2db      	uxtb	r3, r3
}
 800e62e:	4618      	mov	r0, r3
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	20008ad8 	.word	0x20008ad8

0800e638 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e640:	6879      	ldr	r1, [r7, #4]
 800e642:	4803      	ldr	r0, [pc, #12]	; (800e650 <BSP_SD_GetCardInfo+0x18>)
 800e644:	f7fb f848 	bl	80096d8 <HAL_SD_GetCardInfo>
}
 800e648:	bf00      	nop
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	20008ad8 	.word	0x20008ad8

0800e654 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e65c:	f000 f818 	bl	800e690 <BSP_SD_AbortCallback>
}
 800e660:	bf00      	nop
 800e662:	3708      	adds	r7, #8
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e670:	f000 f998 	bl	800e9a4 <BSP_SD_WriteCpltCallback>
}
 800e674:	bf00      	nop
 800e676:	3708      	adds	r7, #8
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b082      	sub	sp, #8
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e684:	f000 f9a0 	bl	800e9c8 <BSP_SD_ReadCpltCallback>
}
 800e688:	bf00      	nop
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0

}
 800e694:	bf00      	nop
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800e6a8:	79fb      	ldrb	r3, [r7, #7]
 800e6aa:	b2db      	uxtb	r3, r3
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b084      	sub	sp, #16
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800e6c0:	f004 fd84 	bl	80131cc <osKernelGetTickCount>
 800e6c4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800e6c6:	e006      	b.n	800e6d6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e6c8:	f7ff ffa6 	bl	800e618 <BSP_SD_GetCardState>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	e009      	b.n	800e6ea <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800e6d6:	f004 fd79 	bl	80131cc <osKernelGetTickCount>
 800e6da:	4602      	mov	r2, r0
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	1ad3      	subs	r3, r2, r3
 800e6e0:	687a      	ldr	r2, [r7, #4]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d8f0      	bhi.n	800e6c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e6e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
	...

0800e6f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b082      	sub	sp, #8
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e6fe:	4b0b      	ldr	r3, [pc, #44]	; (800e72c <SD_CheckStatus+0x38>)
 800e700:	2201      	movs	r2, #1
 800e702:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e704:	f7ff ff88 	bl	800e618 <BSP_SD_GetCardState>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d107      	bne.n	800e71e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e70e:	4b07      	ldr	r3, [pc, #28]	; (800e72c <SD_CheckStatus+0x38>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	b2db      	uxtb	r3, r3
 800e714:	f023 0301 	bic.w	r3, r3, #1
 800e718:	b2da      	uxtb	r2, r3
 800e71a:	4b04      	ldr	r3, [pc, #16]	; (800e72c <SD_CheckStatus+0x38>)
 800e71c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e71e:	4b03      	ldr	r3, [pc, #12]	; (800e72c <SD_CheckStatus+0x38>)
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	b2db      	uxtb	r3, r3
}
 800e724:	4618      	mov	r0, r3
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	20000009 	.word	0x20000009

0800e730 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
 800e736:	4603      	mov	r3, r0
 800e738:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800e73a:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <SD_initialize+0x7c>)
 800e73c:	2201      	movs	r2, #1
 800e73e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800e740:	f004 fcec 	bl	801311c <osKernelGetState>
 800e744:	4603      	mov	r3, r0
 800e746:	2b02      	cmp	r3, #2
 800e748:	d129      	bne.n	800e79e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800e74a:	f7ff ff0b 	bl	800e564 <BSP_SD_Init>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d107      	bne.n	800e764 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800e754:	79fb      	ldrb	r3, [r7, #7]
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff ffcc 	bl	800e6f4 <SD_CheckStatus>
 800e75c:	4603      	mov	r3, r0
 800e75e:	461a      	mov	r2, r3
 800e760:	4b12      	ldr	r3, [pc, #72]	; (800e7ac <SD_initialize+0x7c>)
 800e762:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800e764:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <SD_initialize+0x7c>)
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d017      	beq.n	800e79e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800e76e:	4b10      	ldr	r3, [pc, #64]	; (800e7b0 <SD_initialize+0x80>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d107      	bne.n	800e786 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800e776:	2200      	movs	r2, #0
 800e778:	2102      	movs	r1, #2
 800e77a:	200a      	movs	r0, #10
 800e77c:	f005 f946 	bl	8013a0c <osMessageQueueNew>
 800e780:	4602      	mov	r2, r0
 800e782:	4b0b      	ldr	r3, [pc, #44]	; (800e7b0 <SD_initialize+0x80>)
 800e784:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 800e786:	4b0a      	ldr	r3, [pc, #40]	; (800e7b0 <SD_initialize+0x80>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d107      	bne.n	800e79e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800e78e:	4b07      	ldr	r3, [pc, #28]	; (800e7ac <SD_initialize+0x7c>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	b2db      	uxtb	r3, r3
 800e794:	f043 0301 	orr.w	r3, r3, #1
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	4b04      	ldr	r3, [pc, #16]	; (800e7ac <SD_initialize+0x7c>)
 800e79c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800e79e:	4b03      	ldr	r3, [pc, #12]	; (800e7ac <SD_initialize+0x7c>)
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	b2db      	uxtb	r3, r3
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3708      	adds	r7, #8
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	20000009 	.word	0x20000009
 800e7b0:	20000434 	.word	0x20000434

0800e7b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e7be:	79fb      	ldrb	r3, [r7, #7]
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f7ff ff97 	bl	800e6f4 <SD_CheckStatus>
 800e7c6:	4603      	mov	r3, r0
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b088      	sub	sp, #32
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60b9      	str	r1, [r7, #8]
 800e7d8:	607a      	str	r2, [r7, #4]
 800e7da:	603b      	str	r3, [r7, #0]
 800e7dc:	4603      	mov	r3, r0
 800e7de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e7e4:	f247 5030 	movw	r0, #30000	; 0x7530
 800e7e8:	f7ff ff66 	bl	800e6b8 <SD_CheckStatusWithTimeout>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	da01      	bge.n	800e7f6 <SD_read+0x26>
  {
    return res;
 800e7f2:	7ffb      	ldrb	r3, [r7, #31]
 800e7f4:	e02f      	b.n	800e856 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	6879      	ldr	r1, [r7, #4]
 800e7fa:	68b8      	ldr	r0, [r7, #8]
 800e7fc:	f7ff fed8 	bl	800e5b0 <BSP_SD_ReadBlocks_DMA>
 800e800:	4603      	mov	r3, r0
 800e802:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800e804:	7fbb      	ldrb	r3, [r7, #30]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d124      	bne.n	800e854 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e80a:	4b15      	ldr	r3, [pc, #84]	; (800e860 <SD_read+0x90>)
 800e80c:	6818      	ldr	r0, [r3, #0]
 800e80e:	f107 0112 	add.w	r1, r7, #18
 800e812:	f247 5330 	movw	r3, #30000	; 0x7530
 800e816:	2200      	movs	r2, #0
 800e818:	f005 f9f2 	bl	8013c00 <osMessageQueueGet>
 800e81c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d117      	bne.n	800e854 <SD_read+0x84>
 800e824:	8a7b      	ldrh	r3, [r7, #18]
 800e826:	2b01      	cmp	r3, #1
 800e828:	d114      	bne.n	800e854 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800e82a:	f004 fccf 	bl	80131cc <osKernelGetTickCount>
 800e82e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e830:	e007      	b.n	800e842 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e832:	f7ff fef1 	bl	800e618 <BSP_SD_GetCardState>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d102      	bne.n	800e842 <SD_read+0x72>
              {
                res = RES_OK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800e840:	e008      	b.n	800e854 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800e842:	f004 fcc3 	bl	80131cc <osKernelGetTickCount>
 800e846:	4602      	mov	r2, r0
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e850:	4293      	cmp	r3, r2
 800e852:	d9ee      	bls.n	800e832 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800e854:	7ffb      	ldrb	r3, [r7, #31]
}
 800e856:	4618      	mov	r0, r3
 800e858:	3720      	adds	r7, #32
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20000434 	.word	0x20000434

0800e864 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b088      	sub	sp, #32
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	603b      	str	r3, [r7, #0]
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e878:	f247 5030 	movw	r0, #30000	; 0x7530
 800e87c:	f7ff ff1c 	bl	800e6b8 <SD_CheckStatusWithTimeout>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	da01      	bge.n	800e88a <SD_write+0x26>
  {
    return res;
 800e886:	7ffb      	ldrb	r3, [r7, #31]
 800e888:	e02d      	b.n	800e8e6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e88a:	683a      	ldr	r2, [r7, #0]
 800e88c:	6879      	ldr	r1, [r7, #4]
 800e88e:	68b8      	ldr	r0, [r7, #8]
 800e890:	f7ff fea8 	bl	800e5e4 <BSP_SD_WriteBlocks_DMA>
 800e894:	4603      	mov	r3, r0
 800e896:	2b00      	cmp	r3, #0
 800e898:	d124      	bne.n	800e8e4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800e89a:	4b15      	ldr	r3, [pc, #84]	; (800e8f0 <SD_write+0x8c>)
 800e89c:	6818      	ldr	r0, [r3, #0]
 800e89e:	f107 0112 	add.w	r1, r7, #18
 800e8a2:	f247 5330 	movw	r3, #30000	; 0x7530
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f005 f9aa 	bl	8013c00 <osMessageQueueGet>
 800e8ac:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800e8ae:	69bb      	ldr	r3, [r7, #24]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d117      	bne.n	800e8e4 <SD_write+0x80>
 800e8b4:	8a7b      	ldrh	r3, [r7, #18]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d114      	bne.n	800e8e4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800e8ba:	f004 fc87 	bl	80131cc <osKernelGetTickCount>
 800e8be:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e8c0:	e007      	b.n	800e8d2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e8c2:	f7ff fea9 	bl	800e618 <BSP_SD_GetCardState>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <SD_write+0x6e>
          {
            res = RES_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	77fb      	strb	r3, [r7, #31]
            break;
 800e8d0:	e008      	b.n	800e8e4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800e8d2:	f004 fc7b 	bl	80131cc <osKernelGetTickCount>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d9ee      	bls.n	800e8c2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800e8e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3720      	adds	r7, #32
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20000434 	.word	0x20000434

0800e8f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08c      	sub	sp, #48	; 0x30
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	603a      	str	r2, [r7, #0]
 800e8fe:	71fb      	strb	r3, [r7, #7]
 800e900:	460b      	mov	r3, r1
 800e902:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e904:	2301      	movs	r3, #1
 800e906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e90a:	4b25      	ldr	r3, [pc, #148]	; (800e9a0 <SD_ioctl+0xac>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	b2db      	uxtb	r3, r3
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <SD_ioctl+0x28>
 800e918:	2303      	movs	r3, #3
 800e91a:	e03c      	b.n	800e996 <SD_ioctl+0xa2>

  switch (cmd)
 800e91c:	79bb      	ldrb	r3, [r7, #6]
 800e91e:	2b03      	cmp	r3, #3
 800e920:	d834      	bhi.n	800e98c <SD_ioctl+0x98>
 800e922:	a201      	add	r2, pc, #4	; (adr r2, 800e928 <SD_ioctl+0x34>)
 800e924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e928:	0800e939 	.word	0x0800e939
 800e92c:	0800e941 	.word	0x0800e941
 800e930:	0800e959 	.word	0x0800e959
 800e934:	0800e973 	.word	0x0800e973
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e938:	2300      	movs	r3, #0
 800e93a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e93e:	e028      	b.n	800e992 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e940:	f107 030c 	add.w	r3, r7, #12
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fe77 	bl	800e638 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e950:	2300      	movs	r3, #0
 800e952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e956:	e01c      	b.n	800e992 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e958:	f107 030c 	add.w	r3, r7, #12
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7ff fe6b 	bl	800e638 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	b29a      	uxth	r2, r3
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e970:	e00f      	b.n	800e992 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e972:	f107 030c 	add.w	r3, r7, #12
 800e976:	4618      	mov	r0, r3
 800e978:	f7ff fe5e 	bl	800e638 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	0a5a      	lsrs	r2, r3, #9
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e98a:	e002      	b.n	800e992 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e98c:	2304      	movs	r3, #4
 800e98e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e996:	4618      	mov	r0, r3
 800e998:	3730      	adds	r7, #48	; 0x30
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	20000009 	.word	0x20000009

0800e9a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b082      	sub	sp, #8
 800e9a8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800e9aa:	2302      	movs	r3, #2
 800e9ac:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e9ae:	4b05      	ldr	r3, [pc, #20]	; (800e9c4 <BSP_SD_WriteCpltCallback+0x20>)
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	1db9      	adds	r1, r7, #6
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f005 f8ae 	bl	8013b18 <osMessageQueuePut>
#endif
}
 800e9bc:	bf00      	nop
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}
 800e9c4:	20000434 	.word	0x20000434

0800e9c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b082      	sub	sp, #8
 800e9cc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800e9ce:	2301      	movs	r3, #1
 800e9d0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800e9d2:	4b05      	ldr	r3, [pc, #20]	; (800e9e8 <BSP_SD_ReadCpltCallback+0x20>)
 800e9d4:	6818      	ldr	r0, [r3, #0]
 800e9d6:	1db9      	adds	r1, r7, #6
 800e9d8:	2300      	movs	r3, #0
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f005 f89c 	bl	8013b18 <osMessageQueuePut>
#endif
}
 800e9e0:	bf00      	nop
 800e9e2:	3708      	adds	r7, #8
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}
 800e9e8:	20000434 	.word	0x20000434

0800e9ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b084      	sub	sp, #16
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	460b      	mov	r3, r1
 800e9f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e9f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e9fc:	f009 f8d2 	bl	8017ba4 <malloc>
 800ea00:	4603      	mov	r3, r0
 800ea02:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d105      	bne.n	800ea16 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ea12:	2302      	movs	r3, #2
 800ea14:	e066      	b.n	800eae4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	68fa      	ldr	r2, [r7, #12]
 800ea1a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	7c1b      	ldrb	r3, [r3, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d119      	bne.n	800ea5a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea2a:	2202      	movs	r2, #2
 800ea2c:	2181      	movs	r1, #129	; 0x81
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f008 feeb 	bl	801780a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2201      	movs	r2, #1
 800ea38:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea3e:	2202      	movs	r2, #2
 800ea40:	2101      	movs	r1, #1
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f008 fee1 	bl	801780a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2210      	movs	r2, #16
 800ea54:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ea58:	e016      	b.n	800ea88 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ea5a:	2340      	movs	r3, #64	; 0x40
 800ea5c:	2202      	movs	r2, #2
 800ea5e:	2181      	movs	r1, #129	; 0x81
 800ea60:	6878      	ldr	r0, [r7, #4]
 800ea62:	f008 fed2 	bl	801780a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ea6c:	2340      	movs	r3, #64	; 0x40
 800ea6e:	2202      	movs	r2, #2
 800ea70:	2101      	movs	r1, #1
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f008 fec9 	bl	801780a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2210      	movs	r2, #16
 800ea84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ea88:	2308      	movs	r3, #8
 800ea8a:	2203      	movs	r2, #3
 800ea8c:	2182      	movs	r1, #130	; 0x82
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f008 febb 	bl	801780a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2201      	movs	r2, #1
 800ea98:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	7c1b      	ldrb	r3, [r3, #16]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d109      	bne.n	800ead2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800eac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eac8:	2101      	movs	r1, #1
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f008 ff8c 	bl	80179e8 <USBD_LL_PrepareReceive>
 800ead0:	e007      	b.n	800eae2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ead8:	2340      	movs	r3, #64	; 0x40
 800eada:	2101      	movs	r1, #1
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f008 ff83 	bl	80179e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3710      	adds	r7, #16
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b084      	sub	sp, #16
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eafc:	2181      	movs	r1, #129	; 0x81
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f008 fea9 	bl	8017856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800eb0a:	2101      	movs	r1, #1
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f008 fea2 	bl	8017856 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800eb1a:	2182      	movs	r1, #130	; 0x82
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f008 fe9a 	bl	8017856 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d00e      	beq.n	800eb5a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb42:	685b      	ldr	r3, [r3, #4]
 800eb44:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f009 f831 	bl	8017bb4 <free>
    pdev->pClassData = NULL;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800eb5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3710      	adds	r7, #16
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}

0800eb64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b086      	sub	sp, #24
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb74:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800eb76:	2300      	movs	r3, #0
 800eb78:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	781b      	ldrb	r3, [r3, #0]
 800eb86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d03a      	beq.n	800ec04 <USBD_CDC_Setup+0xa0>
 800eb8e:	2b20      	cmp	r3, #32
 800eb90:	f040 8097 	bne.w	800ecc2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	88db      	ldrh	r3, [r3, #6]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d029      	beq.n	800ebf0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	b25b      	sxtb	r3, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	da11      	bge.n	800ebca <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800ebb2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebb4:	683a      	ldr	r2, [r7, #0]
 800ebb6:	88d2      	ldrh	r2, [r2, #6]
 800ebb8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ebba:	6939      	ldr	r1, [r7, #16]
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	88db      	ldrh	r3, [r3, #6]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f001 fa97 	bl	80100f6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800ebc8:	e082      	b.n	800ecd0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	785a      	ldrb	r2, [r3, #1]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	88db      	ldrh	r3, [r3, #6]
 800ebd8:	b2da      	uxtb	r2, r3
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ebe0:	6939      	ldr	r1, [r7, #16]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	88db      	ldrh	r3, [r3, #6]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 fab0 	bl	801014e <USBD_CtlPrepareRx>
    break;
 800ebee:	e06f      	b.n	800ecd0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	683a      	ldr	r2, [r7, #0]
 800ebfa:	7850      	ldrb	r0, [r2, #1]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	6839      	ldr	r1, [r7, #0]
 800ec00:	4798      	blx	r3
    break;
 800ec02:	e065      	b.n	800ecd0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	785b      	ldrb	r3, [r3, #1]
 800ec08:	2b0b      	cmp	r3, #11
 800ec0a:	d84f      	bhi.n	800ecac <USBD_CDC_Setup+0x148>
 800ec0c:	a201      	add	r2, pc, #4	; (adr r2, 800ec14 <USBD_CDC_Setup+0xb0>)
 800ec0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec12:	bf00      	nop
 800ec14:	0800ec45 	.word	0x0800ec45
 800ec18:	0800ecbb 	.word	0x0800ecbb
 800ec1c:	0800ecad 	.word	0x0800ecad
 800ec20:	0800ecad 	.word	0x0800ecad
 800ec24:	0800ecad 	.word	0x0800ecad
 800ec28:	0800ecad 	.word	0x0800ecad
 800ec2c:	0800ecad 	.word	0x0800ecad
 800ec30:	0800ecad 	.word	0x0800ecad
 800ec34:	0800ecad 	.word	0x0800ecad
 800ec38:	0800ecad 	.word	0x0800ecad
 800ec3c:	0800ec6d 	.word	0x0800ec6d
 800ec40:	0800ec95 	.word	0x0800ec95
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec4a:	2b03      	cmp	r3, #3
 800ec4c:	d107      	bne.n	800ec5e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ec4e:	f107 030c 	add.w	r3, r7, #12
 800ec52:	2202      	movs	r2, #2
 800ec54:	4619      	mov	r1, r3
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f001 fa4d 	bl	80100f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec5c:	e030      	b.n	800ecc0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f001 f9d7 	bl	8010014 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec66:	2303      	movs	r3, #3
 800ec68:	75fb      	strb	r3, [r7, #23]
      break;
 800ec6a:	e029      	b.n	800ecc0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec72:	2b03      	cmp	r3, #3
 800ec74:	d107      	bne.n	800ec86 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ec76:	f107 030f 	add.w	r3, r7, #15
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	4619      	mov	r1, r3
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f001 fa39 	bl	80100f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ec84:	e01c      	b.n	800ecc0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800ec86:	6839      	ldr	r1, [r7, #0]
 800ec88:	6878      	ldr	r0, [r7, #4]
 800ec8a:	f001 f9c3 	bl	8010014 <USBD_CtlError>
        ret = USBD_FAIL;
 800ec8e:	2303      	movs	r3, #3
 800ec90:	75fb      	strb	r3, [r7, #23]
      break;
 800ec92:	e015      	b.n	800ecc0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec9a:	2b03      	cmp	r3, #3
 800ec9c:	d00f      	beq.n	800ecbe <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f001 f9b7 	bl	8010014 <USBD_CtlError>
        ret = USBD_FAIL;
 800eca6:	2303      	movs	r3, #3
 800eca8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ecaa:	e008      	b.n	800ecbe <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800ecac:	6839      	ldr	r1, [r7, #0]
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f001 f9b0 	bl	8010014 <USBD_CtlError>
      ret = USBD_FAIL;
 800ecb4:	2303      	movs	r3, #3
 800ecb6:	75fb      	strb	r3, [r7, #23]
      break;
 800ecb8:	e002      	b.n	800ecc0 <USBD_CDC_Setup+0x15c>
      break;
 800ecba:	bf00      	nop
 800ecbc:	e008      	b.n	800ecd0 <USBD_CDC_Setup+0x16c>
      break;
 800ecbe:	bf00      	nop
    }
    break;
 800ecc0:	e006      	b.n	800ecd0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f001 f9a5 	bl	8010014 <USBD_CtlError>
    ret = USBD_FAIL;
 800ecca:	2303      	movs	r3, #3
 800eccc:	75fb      	strb	r3, [r7, #23]
    break;
 800ecce:	bf00      	nop
  }

  return (uint8_t)ret;
 800ecd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop

0800ecdc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	460b      	mov	r3, r1
 800ece6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ecee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d101      	bne.n	800ecfe <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ecfa:	2303      	movs	r3, #3
 800ecfc:	e049      	b.n	800ed92 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed06:	78fa      	ldrb	r2, [r7, #3]
 800ed08:	6879      	ldr	r1, [r7, #4]
 800ed0a:	4613      	mov	r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	4413      	add	r3, r2
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	3318      	adds	r3, #24
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d029      	beq.n	800ed70 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ed1c:	78fa      	ldrb	r2, [r7, #3]
 800ed1e:	6879      	ldr	r1, [r7, #4]
 800ed20:	4613      	mov	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	4413      	add	r3, r2
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	440b      	add	r3, r1
 800ed2a:	3318      	adds	r3, #24
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	78f9      	ldrb	r1, [r7, #3]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	460b      	mov	r3, r1
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	1a5b      	subs	r3, r3, r1
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4403      	add	r3, r0
 800ed3c:	3344      	adds	r3, #68	; 0x44
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	fbb2 f1f3 	udiv	r1, r2, r3
 800ed44:	fb03 f301 	mul.w	r3, r3, r1
 800ed48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d110      	bne.n	800ed70 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ed4e:	78fa      	ldrb	r2, [r7, #3]
 800ed50:	6879      	ldr	r1, [r7, #4]
 800ed52:	4613      	mov	r3, r2
 800ed54:	009b      	lsls	r3, r3, #2
 800ed56:	4413      	add	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	440b      	add	r3, r1
 800ed5c:	3318      	adds	r3, #24
 800ed5e:	2200      	movs	r2, #0
 800ed60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ed62:	78f9      	ldrb	r1, [r7, #3]
 800ed64:	2300      	movs	r3, #0
 800ed66:	2200      	movs	r2, #0
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f008 fe1c 	bl	80179a6 <USBD_LL_Transmit>
 800ed6e:	e00f      	b.n	800ed90 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	2200      	movs	r2, #0
 800ed74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed7e:	691b      	ldr	r3, [r3, #16]
 800ed80:	68ba      	ldr	r2, [r7, #8]
 800ed82:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ed8c:	78fa      	ldrb	r2, [r7, #3]
 800ed8e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ed90:	2300      	movs	r3, #0
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	460b      	mov	r3, r1
 800eda4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d101      	bne.n	800edbc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edb8:	2303      	movs	r3, #3
 800edba:	e015      	b.n	800ede8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800edbc:	78fb      	ldrb	r3, [r7, #3]
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f008 fe32 	bl	8017a2a <USBD_LL_GetRxDataSize>
 800edc6:	4602      	mov	r2, r0
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800edd4:	68db      	ldr	r3, [r3, #12]
 800edd6:	68fa      	ldr	r2, [r7, #12]
 800edd8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ede2:	4611      	mov	r1, r2
 800ede4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edfe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d015      	beq.n	800ee36 <USBD_CDC_EP0_RxReady+0x46>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ee10:	2bff      	cmp	r3, #255	; 0xff
 800ee12:	d010      	beq.n	800ee36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ee22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ee24:	68fa      	ldr	r2, [r7, #12]
 800ee26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ee2a:	b292      	uxth	r2, r2
 800ee2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	22ff      	movs	r2, #255	; 0xff
 800ee32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3710      	adds	r7, #16
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2243      	movs	r2, #67	; 0x43
 800ee4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ee4e:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	20000094 	.word	0x20000094

0800ee60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2243      	movs	r2, #67	; 0x43
 800ee6c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ee6e:	4b03      	ldr	r3, [pc, #12]	; (800ee7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	370c      	adds	r7, #12
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr
 800ee7c:	20000050 	.word	0x20000050

0800ee80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b083      	sub	sp, #12
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2243      	movs	r2, #67	; 0x43
 800ee8c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ee8e:	4b03      	ldr	r3, [pc, #12]	; (800ee9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr
 800ee9c:	200000d8 	.word	0x200000d8

0800eea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b083      	sub	sp, #12
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	220a      	movs	r2, #10
 800eeac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eeae:	4b03      	ldr	r3, [pc, #12]	; (800eebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr
 800eebc:	2000000c 	.word	0x2000000c

0800eec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d101      	bne.n	800eed4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eed0:	2303      	movs	r3, #3
 800eed2:	e004      	b.n	800eede <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800eedc:	2300      	movs	r3, #0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b087      	sub	sp, #28
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	60f8      	str	r0, [r7, #12]
 800eef2:	60b9      	str	r1, [r7, #8]
 800eef4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eefc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	68ba      	ldr	r2, [r7, #8]
 800ef02:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	371c      	adds	r7, #28
 800ef14:	46bd      	mov	sp, r7
 800ef16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1a:	4770      	bx	lr

0800ef1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef2c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	683a      	ldr	r2, [r7, #0]
 800ef32:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d101      	bne.n	800ef62 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ef5e:	2303      	movs	r3, #3
 800ef60:	e016      	b.n	800ef90 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7c1b      	ldrb	r3, [r3, #16]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d109      	bne.n	800ef7e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef74:	2101      	movs	r1, #1
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f008 fd36 	bl	80179e8 <USBD_LL_PrepareReceive>
 800ef7c:	e007      	b.n	800ef8e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ef84:	2340      	movs	r3, #64	; 0x40
 800ef86:	2101      	movs	r1, #1
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f008 fd2d 	bl	80179e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b086      	sub	sp, #24
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	60f8      	str	r0, [r7, #12]
 800efa0:	60b9      	str	r1, [r7, #8]
 800efa2:	4613      	mov	r3, r2
 800efa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d101      	bne.n	800efb0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800efac:	2303      	movs	r3, #3
 800efae:	e025      	b.n	800effc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d003      	beq.n	800efc2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2201      	movs	r2, #1
 800efe6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	79fa      	ldrb	r2, [r7, #7]
 800efee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eff0:	68f8      	ldr	r0, [r7, #12]
 800eff2:	f008 fba3 	bl	801773c <USBD_LL_Init>
 800eff6:	4603      	mov	r3, r0
 800eff8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800effa:	7dfb      	ldrb	r3, [r7, #23]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3718      	adds	r7, #24
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f00e:	2300      	movs	r3, #0
 800f010:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d101      	bne.n	800f01c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f018:	2303      	movs	r3, #3
 800f01a:	e010      	b.n	800f03e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	683a      	ldr	r2, [r7, #0]
 800f020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f02c:	f107 020e 	add.w	r2, r7, #14
 800f030:	4610      	mov	r0, r2
 800f032:	4798      	blx	r3
 800f034:	4602      	mov	r2, r0
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b082      	sub	sp, #8
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f008 fbc0 	bl	80177d4 <USBD_LL_Start>
 800f054:	4603      	mov	r3, r0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f05e:	b480      	push	{r7}
 800f060:	b083      	sub	sp, #12
 800f062:	af00      	add	r7, sp, #0
 800f064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr

0800f074 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
 800f07c:	460b      	mov	r3, r1
 800f07e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f080:	2303      	movs	r3, #3
 800f082:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d009      	beq.n	800f0a2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	78fa      	ldrb	r2, [r7, #3]
 800f098:	4611      	mov	r1, r2
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	4798      	blx	r3
 800f09e:	4603      	mov	r3, r0
 800f0a0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b082      	sub	sp, #8
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	460b      	mov	r3, r1
 800f0b6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d007      	beq.n	800f0d2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c8:	685b      	ldr	r3, [r3, #4]
 800f0ca:	78fa      	ldrb	r2, [r7, #3]
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	4798      	blx	r3
  }

  return USBD_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3708      	adds	r7, #8
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 ff56 	bl	800ffa0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f102:	461a      	mov	r2, r3
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f110:	f003 031f 	and.w	r3, r3, #31
 800f114:	2b01      	cmp	r3, #1
 800f116:	d00e      	beq.n	800f136 <USBD_LL_SetupStage+0x5a>
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d302      	bcc.n	800f122 <USBD_LL_SetupStage+0x46>
 800f11c:	2b02      	cmp	r3, #2
 800f11e:	d014      	beq.n	800f14a <USBD_LL_SetupStage+0x6e>
 800f120:	e01d      	b.n	800f15e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f128:	4619      	mov	r1, r3
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fa18 	bl	800f560 <USBD_StdDevReq>
 800f130:	4603      	mov	r3, r0
 800f132:	73fb      	strb	r3, [r7, #15]
      break;
 800f134:	e020      	b.n	800f178 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f13c:	4619      	mov	r1, r3
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 fa7c 	bl	800f63c <USBD_StdItfReq>
 800f144:	4603      	mov	r3, r0
 800f146:	73fb      	strb	r3, [r7, #15]
      break;
 800f148:	e016      	b.n	800f178 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f150:	4619      	mov	r1, r3
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f000 fab8 	bl	800f6c8 <USBD_StdEPReq>
 800f158:	4603      	mov	r3, r0
 800f15a:	73fb      	strb	r3, [r7, #15]
      break;
 800f15c:	e00c      	b.n	800f178 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f164:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	4619      	mov	r1, r3
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f008 fb91 	bl	8017894 <USBD_LL_StallEP>
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]
      break;
 800f176:	bf00      	nop
  }

  return ret;
 800f178:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b086      	sub	sp, #24
 800f186:	af00      	add	r7, sp, #0
 800f188:	60f8      	str	r0, [r7, #12]
 800f18a:	460b      	mov	r3, r1
 800f18c:	607a      	str	r2, [r7, #4]
 800f18e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f190:	7afb      	ldrb	r3, [r7, #11]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d137      	bne.n	800f206 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f19c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f1a4:	2b03      	cmp	r3, #3
 800f1a6:	d14a      	bne.n	800f23e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	689a      	ldr	r2, [r3, #8]
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d913      	bls.n	800f1dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	1ad2      	subs	r2, r2, r3
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	68da      	ldr	r2, [r3, #12]
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	689b      	ldr	r3, [r3, #8]
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	bf28      	it	cs
 800f1ce:	4613      	movcs	r3, r2
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	6879      	ldr	r1, [r7, #4]
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 ffd7 	bl	8010188 <USBD_CtlContinueRx>
 800f1da:	e030      	b.n	800f23e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1e2:	691b      	ldr	r3, [r3, #16]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00a      	beq.n	800f1fe <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d105      	bne.n	800f1fe <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1f8:	691b      	ldr	r3, [r3, #16]
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f1fe:	68f8      	ldr	r0, [r7, #12]
 800f200:	f000 ffd3 	bl	80101aa <USBD_CtlSendStatus>
 800f204:	e01b      	b.n	800f23e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f20c:	699b      	ldr	r3, [r3, #24]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d013      	beq.n	800f23a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f218:	2b03      	cmp	r3, #3
 800f21a:	d10e      	bne.n	800f23a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f222:	699b      	ldr	r3, [r3, #24]
 800f224:	7afa      	ldrb	r2, [r7, #11]
 800f226:	4611      	mov	r1, r2
 800f228:	68f8      	ldr	r0, [r7, #12]
 800f22a:	4798      	blx	r3
 800f22c:	4603      	mov	r3, r0
 800f22e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f230:	7dfb      	ldrb	r3, [r7, #23]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d003      	beq.n	800f23e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f236:	7dfb      	ldrb	r3, [r7, #23]
 800f238:	e002      	b.n	800f240 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f23a:	2303      	movs	r3, #3
 800f23c:	e000      	b.n	800f240 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	460b      	mov	r3, r1
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f256:	7afb      	ldrb	r3, [r7, #11]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d16a      	bne.n	800f332 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	3314      	adds	r3, #20
 800f260:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d155      	bne.n	800f318 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	689a      	ldr	r2, [r3, #8]
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	68db      	ldr	r3, [r3, #12]
 800f274:	429a      	cmp	r2, r3
 800f276:	d914      	bls.n	800f2a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	689a      	ldr	r2, [r3, #8]
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	68db      	ldr	r3, [r3, #12]
 800f280:	1ad2      	subs	r2, r2, r3
 800f282:	693b      	ldr	r3, [r7, #16]
 800f284:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	689b      	ldr	r3, [r3, #8]
 800f28a:	461a      	mov	r2, r3
 800f28c:	6879      	ldr	r1, [r7, #4]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f000 ff4c 	bl	801012c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f294:	2300      	movs	r3, #0
 800f296:	2200      	movs	r2, #0
 800f298:	2100      	movs	r1, #0
 800f29a:	68f8      	ldr	r0, [r7, #12]
 800f29c:	f008 fba4 	bl	80179e8 <USBD_LL_PrepareReceive>
 800f2a0:	e03a      	b.n	800f318 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	68da      	ldr	r2, [r3, #12]
 800f2a6:	693b      	ldr	r3, [r7, #16]
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d11c      	bne.n	800f2e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d316      	bcc.n	800f2e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	685a      	ldr	r2, [r3, #4]
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d20f      	bcs.n	800f2e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	2100      	movs	r1, #0
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f000 ff2d 	bl	801012c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f2da:	2300      	movs	r3, #0
 800f2dc:	2200      	movs	r2, #0
 800f2de:	2100      	movs	r1, #0
 800f2e0:	68f8      	ldr	r0, [r7, #12]
 800f2e2:	f008 fb81 	bl	80179e8 <USBD_LL_PrepareReceive>
 800f2e6:	e017      	b.n	800f318 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00a      	beq.n	800f30a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	d105      	bne.n	800f30a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f304:	68db      	ldr	r3, [r3, #12]
 800f306:	68f8      	ldr	r0, [r7, #12]
 800f308:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f30a:	2180      	movs	r1, #128	; 0x80
 800f30c:	68f8      	ldr	r0, [r7, #12]
 800f30e:	f008 fac1 	bl	8017894 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f312:	68f8      	ldr	r0, [r7, #12]
 800f314:	f000 ff5c 	bl	80101d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d123      	bne.n	800f36a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f322:	68f8      	ldr	r0, [r7, #12]
 800f324:	f7ff fe9b 	bl	800f05e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f330:	e01b      	b.n	800f36a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f338:	695b      	ldr	r3, [r3, #20]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d013      	beq.n	800f366 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f344:	2b03      	cmp	r3, #3
 800f346:	d10e      	bne.n	800f366 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f34e:	695b      	ldr	r3, [r3, #20]
 800f350:	7afa      	ldrb	r2, [r7, #11]
 800f352:	4611      	mov	r1, r2
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	4798      	blx	r3
 800f358:	4603      	mov	r3, r0
 800f35a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f35c:	7dfb      	ldrb	r3, [r7, #23]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d003      	beq.n	800f36a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f362:	7dfb      	ldrb	r3, [r7, #23]
 800f364:	e002      	b.n	800f36c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f366:	2303      	movs	r3, #3
 800f368:	e000      	b.n	800f36c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3718      	adds	r7, #24
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b082      	sub	sp, #8
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2200      	movs	r2, #0
 800f388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	2200      	movs	r2, #0
 800f396:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	6852      	ldr	r2, [r2, #4]
 800f3b0:	b2d2      	uxtb	r2, r2
 800f3b2:	4611      	mov	r1, r2
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3b8:	2340      	movs	r3, #64	; 0x40
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f008 fa23 	bl	801780a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2240      	movs	r2, #64	; 0x40
 800f3d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f3d4:	2340      	movs	r3, #64	; 0x40
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	2180      	movs	r1, #128	; 0x80
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f008 fa15 	bl	801780a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	2240      	movs	r2, #64	; 0x40
 800f3ea:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f3ec:	2300      	movs	r3, #0
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f3f6:	b480      	push	{r7}
 800f3f8:	b083      	sub	sp, #12
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	460b      	mov	r3, r1
 800f400:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	78fa      	ldrb	r2, [r7, #3]
 800f406:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f408:	2300      	movs	r3, #0
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	370c      	adds	r7, #12
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2204      	movs	r2, #4
 800f42e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f432:	2300      	movs	r3, #0
}
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f44e:	2b04      	cmp	r3, #4
 800f450:	d105      	bne.n	800f45e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	370c      	adds	r7, #12
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d10b      	bne.n	800f496 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f484:	69db      	ldr	r3, [r3, #28]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d005      	beq.n	800f496 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f490:	69db      	ldr	r3, [r3, #28]
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	460b      	mov	r3, r1
 800f4aa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f4ac:	2300      	movs	r3, #0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	370c      	adds	r7, #12
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b8:	4770      	bx	lr

0800f4ba <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b083      	sub	sp, #12
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
 800f4c2:	460b      	mov	r3, r1
 800f4c4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f4c6:	2300      	movs	r3, #0
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f4dc:	2300      	movs	r3, #0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	370c      	adds	r7, #12
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e8:	4770      	bx	lr

0800f4ea <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b082      	sub	sp, #8
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f500:	2b00      	cmp	r3, #0
 800f502:	d009      	beq.n	800f518 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6852      	ldr	r2, [r2, #4]
 800f510:	b2d2      	uxtb	r2, r2
 800f512:	4611      	mov	r1, r2
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	4798      	blx	r3
  }

  return USBD_OK;
 800f518:	2300      	movs	r3, #0
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f522:	b480      	push	{r7}
 800f524:	b087      	sub	sp, #28
 800f526:	af00      	add	r7, sp, #0
 800f528:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	3301      	adds	r3, #1
 800f538:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f540:	8a3b      	ldrh	r3, [r7, #16]
 800f542:	021b      	lsls	r3, r3, #8
 800f544:	b21a      	sxth	r2, r3
 800f546:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f54a:	4313      	orrs	r3, r2
 800f54c:	b21b      	sxth	r3, r3
 800f54e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f550:	89fb      	ldrh	r3, [r7, #14]
}
 800f552:	4618      	mov	r0, r3
 800f554:	371c      	adds	r7, #28
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
	...

0800f560 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	b084      	sub	sp, #16
 800f564:	af00      	add	r7, sp, #0
 800f566:	6078      	str	r0, [r7, #4]
 800f568:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f56a:	2300      	movs	r3, #0
 800f56c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f576:	2b20      	cmp	r3, #32
 800f578:	d004      	beq.n	800f584 <USBD_StdDevReq+0x24>
 800f57a:	2b40      	cmp	r3, #64	; 0x40
 800f57c:	d002      	beq.n	800f584 <USBD_StdDevReq+0x24>
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d00a      	beq.n	800f598 <USBD_StdDevReq+0x38>
 800f582:	e050      	b.n	800f626 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	4798      	blx	r3
 800f592:	4603      	mov	r3, r0
 800f594:	73fb      	strb	r3, [r7, #15]
    break;
 800f596:	e04b      	b.n	800f630 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	785b      	ldrb	r3, [r3, #1]
 800f59c:	2b09      	cmp	r3, #9
 800f59e:	d83c      	bhi.n	800f61a <USBD_StdDevReq+0xba>
 800f5a0:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <USBD_StdDevReq+0x48>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f5fd 	.word	0x0800f5fd
 800f5ac:	0800f611 	.word	0x0800f611
 800f5b0:	0800f61b 	.word	0x0800f61b
 800f5b4:	0800f607 	.word	0x0800f607
 800f5b8:	0800f61b 	.word	0x0800f61b
 800f5bc:	0800f5db 	.word	0x0800f5db
 800f5c0:	0800f5d1 	.word	0x0800f5d1
 800f5c4:	0800f61b 	.word	0x0800f61b
 800f5c8:	0800f5f3 	.word	0x0800f5f3
 800f5cc:	0800f5e5 	.word	0x0800f5e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f000 f9ce 	bl	800f974 <USBD_GetDescriptor>
      break;
 800f5d8:	e024      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f5da:	6839      	ldr	r1, [r7, #0]
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 fb5d 	bl	800fc9c <USBD_SetAddress>
      break;
 800f5e2:	e01f      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 fb9a 	bl	800fd20 <USBD_SetConfig>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f0:	e018      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f5f2:	6839      	ldr	r1, [r7, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fc37 	bl	800fe68 <USBD_GetConfig>
      break;
 800f5fa:	e013      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fc66 	bl	800fed0 <USBD_GetStatus>
      break;
 800f604:	e00e      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f606:	6839      	ldr	r1, [r7, #0]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 fc94 	bl	800ff36 <USBD_SetFeature>
      break;
 800f60e:	e009      	b.n	800f624 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f610:	6839      	ldr	r1, [r7, #0]
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f000 fca3 	bl	800ff5e <USBD_ClrFeature>
      break;
 800f618:	e004      	b.n	800f624 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f61a:	6839      	ldr	r1, [r7, #0]
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 fcf9 	bl	8010014 <USBD_CtlError>
      break;
 800f622:	bf00      	nop
    }
    break;
 800f624:	e004      	b.n	800f630 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 fcf3 	bl	8010014 <USBD_CtlError>
    break;
 800f62e:	bf00      	nop
  }

  return ret;
 800f630:	7bfb      	ldrb	r3, [r7, #15]
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}
 800f63a:	bf00      	nop

0800f63c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f652:	2b20      	cmp	r3, #32
 800f654:	d003      	beq.n	800f65e <USBD_StdItfReq+0x22>
 800f656:	2b40      	cmp	r3, #64	; 0x40
 800f658:	d001      	beq.n	800f65e <USBD_StdItfReq+0x22>
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d12a      	bne.n	800f6b4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f664:	3b01      	subs	r3, #1
 800f666:	2b02      	cmp	r3, #2
 800f668:	d81d      	bhi.n	800f6a6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	889b      	ldrh	r3, [r3, #4]
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	2b01      	cmp	r3, #1
 800f672:	d813      	bhi.n	800f69c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	4798      	blx	r3
 800f682:	4603      	mov	r3, r0
 800f684:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	88db      	ldrh	r3, [r3, #6]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d110      	bne.n	800f6b0 <USBD_StdItfReq+0x74>
 800f68e:	7bfb      	ldrb	r3, [r7, #15]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10d      	bne.n	800f6b0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fd88 	bl	80101aa <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f69a:	e009      	b.n	800f6b0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f69c:	6839      	ldr	r1, [r7, #0]
 800f69e:	6878      	ldr	r0, [r7, #4]
 800f6a0:	f000 fcb8 	bl	8010014 <USBD_CtlError>
      break;
 800f6a4:	e004      	b.n	800f6b0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f6a6:	6839      	ldr	r1, [r7, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fcb3 	bl	8010014 <USBD_CtlError>
      break;
 800f6ae:	e000      	b.n	800f6b2 <USBD_StdItfReq+0x76>
      break;
 800f6b0:	bf00      	nop
    }
    break;
 800f6b2:	e004      	b.n	800f6be <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f6b4:	6839      	ldr	r1, [r7, #0]
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 fcac 	bl	8010014 <USBD_CtlError>
    break;
 800f6bc:	bf00      	nop
  }

  return ret;
 800f6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	889b      	ldrh	r3, [r3, #4]
 800f6da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f6e4:	2b20      	cmp	r3, #32
 800f6e6:	d004      	beq.n	800f6f2 <USBD_StdEPReq+0x2a>
 800f6e8:	2b40      	cmp	r3, #64	; 0x40
 800f6ea:	d002      	beq.n	800f6f2 <USBD_StdEPReq+0x2a>
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d00a      	beq.n	800f706 <USBD_StdEPReq+0x3e>
 800f6f0:	e135      	b.n	800f95e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	6839      	ldr	r1, [r7, #0]
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	4798      	blx	r3
 800f700:	4603      	mov	r3, r0
 800f702:	73fb      	strb	r3, [r7, #15]
    break;
 800f704:	e130      	b.n	800f968 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	785b      	ldrb	r3, [r3, #1]
 800f70a:	2b01      	cmp	r3, #1
 800f70c:	d03e      	beq.n	800f78c <USBD_StdEPReq+0xc4>
 800f70e:	2b03      	cmp	r3, #3
 800f710:	d002      	beq.n	800f718 <USBD_StdEPReq+0x50>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d077      	beq.n	800f806 <USBD_StdEPReq+0x13e>
 800f716:	e11c      	b.n	800f952 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f71e:	2b02      	cmp	r3, #2
 800f720:	d002      	beq.n	800f728 <USBD_StdEPReq+0x60>
 800f722:	2b03      	cmp	r3, #3
 800f724:	d015      	beq.n	800f752 <USBD_StdEPReq+0x8a>
 800f726:	e02b      	b.n	800f780 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f728:	7bbb      	ldrb	r3, [r7, #14]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d00c      	beq.n	800f748 <USBD_StdEPReq+0x80>
 800f72e:	7bbb      	ldrb	r3, [r7, #14]
 800f730:	2b80      	cmp	r3, #128	; 0x80
 800f732:	d009      	beq.n	800f748 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f734:	7bbb      	ldrb	r3, [r7, #14]
 800f736:	4619      	mov	r1, r3
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f008 f8ab 	bl	8017894 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f73e:	2180      	movs	r1, #128	; 0x80
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f008 f8a7 	bl	8017894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f746:	e020      	b.n	800f78a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f748:	6839      	ldr	r1, [r7, #0]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fc62 	bl	8010014 <USBD_CtlError>
        break;
 800f750:	e01b      	b.n	800f78a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	885b      	ldrh	r3, [r3, #2]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10e      	bne.n	800f778 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f75a:	7bbb      	ldrb	r3, [r7, #14]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00b      	beq.n	800f778 <USBD_StdEPReq+0xb0>
 800f760:	7bbb      	ldrb	r3, [r7, #14]
 800f762:	2b80      	cmp	r3, #128	; 0x80
 800f764:	d008      	beq.n	800f778 <USBD_StdEPReq+0xb0>
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	88db      	ldrh	r3, [r3, #6]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d104      	bne.n	800f778 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f76e:	7bbb      	ldrb	r3, [r7, #14]
 800f770:	4619      	mov	r1, r3
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f008 f88e 	bl	8017894 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fd16 	bl	80101aa <USBD_CtlSendStatus>

        break;
 800f77e:	e004      	b.n	800f78a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f780:	6839      	ldr	r1, [r7, #0]
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f000 fc46 	bl	8010014 <USBD_CtlError>
        break;
 800f788:	bf00      	nop
      }
      break;
 800f78a:	e0e7      	b.n	800f95c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f792:	2b02      	cmp	r3, #2
 800f794:	d002      	beq.n	800f79c <USBD_StdEPReq+0xd4>
 800f796:	2b03      	cmp	r3, #3
 800f798:	d015      	beq.n	800f7c6 <USBD_StdEPReq+0xfe>
 800f79a:	e02d      	b.n	800f7f8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f79c:	7bbb      	ldrb	r3, [r7, #14]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d00c      	beq.n	800f7bc <USBD_StdEPReq+0xf4>
 800f7a2:	7bbb      	ldrb	r3, [r7, #14]
 800f7a4:	2b80      	cmp	r3, #128	; 0x80
 800f7a6:	d009      	beq.n	800f7bc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7a8:	7bbb      	ldrb	r3, [r7, #14]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f008 f871 	bl	8017894 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7b2:	2180      	movs	r1, #128	; 0x80
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f008 f86d 	bl	8017894 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f7ba:	e023      	b.n	800f804 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 fc28 	bl	8010014 <USBD_CtlError>
        break;
 800f7c4:	e01e      	b.n	800f804 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	885b      	ldrh	r3, [r3, #2]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d119      	bne.n	800f802 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d004      	beq.n	800f7e2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f7d8:	7bbb      	ldrb	r3, [r7, #14]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f008 f878 	bl	80178d2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f000 fce1 	bl	80101aa <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f7ee:	689b      	ldr	r3, [r3, #8]
 800f7f0:	6839      	ldr	r1, [r7, #0]
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	4798      	blx	r3
        }
        break;
 800f7f6:	e004      	b.n	800f802 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f7f8:	6839      	ldr	r1, [r7, #0]
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f000 fc0a 	bl	8010014 <USBD_CtlError>
        break;
 800f800:	e000      	b.n	800f804 <USBD_StdEPReq+0x13c>
        break;
 800f802:	bf00      	nop
      }
      break;
 800f804:	e0aa      	b.n	800f95c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	d002      	beq.n	800f816 <USBD_StdEPReq+0x14e>
 800f810:	2b03      	cmp	r3, #3
 800f812:	d032      	beq.n	800f87a <USBD_StdEPReq+0x1b2>
 800f814:	e097      	b.n	800f946 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f816:	7bbb      	ldrb	r3, [r7, #14]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d007      	beq.n	800f82c <USBD_StdEPReq+0x164>
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	2b80      	cmp	r3, #128	; 0x80
 800f820:	d004      	beq.n	800f82c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 fbf5 	bl	8010014 <USBD_CtlError>
          break;
 800f82a:	e091      	b.n	800f950 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f82c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f830:	2b00      	cmp	r3, #0
 800f832:	da0b      	bge.n	800f84c <USBD_StdEPReq+0x184>
 800f834:	7bbb      	ldrb	r3, [r7, #14]
 800f836:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f83a:	4613      	mov	r3, r2
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	4413      	add	r3, r2
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	3310      	adds	r3, #16
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	4413      	add	r3, r2
 800f848:	3304      	adds	r3, #4
 800f84a:	e00b      	b.n	800f864 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f84c:	7bbb      	ldrb	r3, [r7, #14]
 800f84e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f852:	4613      	mov	r3, r2
 800f854:	009b      	lsls	r3, r3, #2
 800f856:	4413      	add	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	4413      	add	r3, r2
 800f862:	3304      	adds	r3, #4
 800f864:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2200      	movs	r2, #0
 800f86a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2202      	movs	r2, #2
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 fc3f 	bl	80100f6 <USBD_CtlSendData>
        break;
 800f878:	e06a      	b.n	800f950 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f87a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	da11      	bge.n	800f8a6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f882:	7bbb      	ldrb	r3, [r7, #14]
 800f884:	f003 020f 	and.w	r2, r3, #15
 800f888:	6879      	ldr	r1, [r7, #4]
 800f88a:	4613      	mov	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4413      	add	r3, r2
 800f890:	009b      	lsls	r3, r3, #2
 800f892:	440b      	add	r3, r1
 800f894:	3324      	adds	r3, #36	; 0x24
 800f896:	881b      	ldrh	r3, [r3, #0]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d117      	bne.n	800f8cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f000 fbb8 	bl	8010014 <USBD_CtlError>
            break;
 800f8a4:	e054      	b.n	800f950 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f8a6:	7bbb      	ldrb	r3, [r7, #14]
 800f8a8:	f003 020f 	and.w	r2, r3, #15
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	440b      	add	r3, r1
 800f8b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d104      	bne.n	800f8cc <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f8c2:	6839      	ldr	r1, [r7, #0]
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 fba5 	bl	8010014 <USBD_CtlError>
            break;
 800f8ca:	e041      	b.n	800f950 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	da0b      	bge.n	800f8ec <USBD_StdEPReq+0x224>
 800f8d4:	7bbb      	ldrb	r3, [r7, #14]
 800f8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	3310      	adds	r3, #16
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	e00b      	b.n	800f904 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f8ec:	7bbb      	ldrb	r3, [r7, #14]
 800f8ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8f2:	4613      	mov	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f8fe:	687a      	ldr	r2, [r7, #4]
 800f900:	4413      	add	r3, r2
 800f902:	3304      	adds	r3, #4
 800f904:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d002      	beq.n	800f912 <USBD_StdEPReq+0x24a>
 800f90c:	7bbb      	ldrb	r3, [r7, #14]
 800f90e:	2b80      	cmp	r3, #128	; 0x80
 800f910:	d103      	bne.n	800f91a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2200      	movs	r2, #0
 800f916:	601a      	str	r2, [r3, #0]
 800f918:	e00e      	b.n	800f938 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f91a:	7bbb      	ldrb	r3, [r7, #14]
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f007 fff6 	bl	8017910 <USBD_LL_IsStallEP>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d003      	beq.n	800f932 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	2201      	movs	r2, #1
 800f92e:	601a      	str	r2, [r3, #0]
 800f930:	e002      	b.n	800f938 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	2200      	movs	r2, #0
 800f936:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	2202      	movs	r2, #2
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f000 fbd9 	bl	80100f6 <USBD_CtlSendData>
          break;
 800f944:	e004      	b.n	800f950 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f946:	6839      	ldr	r1, [r7, #0]
 800f948:	6878      	ldr	r0, [r7, #4]
 800f94a:	f000 fb63 	bl	8010014 <USBD_CtlError>
        break;
 800f94e:	bf00      	nop
      }
      break;
 800f950:	e004      	b.n	800f95c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 fb5d 	bl	8010014 <USBD_CtlError>
      break;
 800f95a:	bf00      	nop
    }
    break;
 800f95c:	e004      	b.n	800f968 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 fb57 	bl	8010014 <USBD_CtlError>
    break;
 800f966:	bf00      	nop
  }

  return ret;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
	...

0800f974 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b084      	sub	sp, #16
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f97e:	2300      	movs	r3, #0
 800f980:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f982:	2300      	movs	r3, #0
 800f984:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f986:	2300      	movs	r3, #0
 800f988:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	885b      	ldrh	r3, [r3, #2]
 800f98e:	0a1b      	lsrs	r3, r3, #8
 800f990:	b29b      	uxth	r3, r3
 800f992:	3b01      	subs	r3, #1
 800f994:	2b0e      	cmp	r3, #14
 800f996:	f200 8152 	bhi.w	800fc3e <USBD_GetDescriptor+0x2ca>
 800f99a:	a201      	add	r2, pc, #4	; (adr r2, 800f9a0 <USBD_GetDescriptor+0x2c>)
 800f99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a0:	0800fa11 	.word	0x0800fa11
 800f9a4:	0800fa29 	.word	0x0800fa29
 800f9a8:	0800fa69 	.word	0x0800fa69
 800f9ac:	0800fc3f 	.word	0x0800fc3f
 800f9b0:	0800fc3f 	.word	0x0800fc3f
 800f9b4:	0800fbdf 	.word	0x0800fbdf
 800f9b8:	0800fc0b 	.word	0x0800fc0b
 800f9bc:	0800fc3f 	.word	0x0800fc3f
 800f9c0:	0800fc3f 	.word	0x0800fc3f
 800f9c4:	0800fc3f 	.word	0x0800fc3f
 800f9c8:	0800fc3f 	.word	0x0800fc3f
 800f9cc:	0800fc3f 	.word	0x0800fc3f
 800f9d0:	0800fc3f 	.word	0x0800fc3f
 800f9d4:	0800fc3f 	.word	0x0800fc3f
 800f9d8:	0800f9dd 	.word	0x0800f9dd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9e2:	69db      	ldr	r3, [r3, #28]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00b      	beq.n	800fa00 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f9ee:	69db      	ldr	r3, [r3, #28]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	7c12      	ldrb	r2, [r2, #16]
 800f9f4:	f107 0108 	add.w	r1, r7, #8
 800f9f8:	4610      	mov	r0, r2
 800f9fa:	4798      	blx	r3
 800f9fc:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f9fe:	e126      	b.n	800fc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fa00:	6839      	ldr	r1, [r7, #0]
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f000 fb06 	bl	8010014 <USBD_CtlError>
      err++;
 800fa08:	7afb      	ldrb	r3, [r7, #11]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	72fb      	strb	r3, [r7, #11]
    break;
 800fa0e:	e11e      	b.n	800fc4e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	687a      	ldr	r2, [r7, #4]
 800fa1a:	7c12      	ldrb	r2, [r2, #16]
 800fa1c:	f107 0108 	add.w	r1, r7, #8
 800fa20:	4610      	mov	r0, r2
 800fa22:	4798      	blx	r3
 800fa24:	60f8      	str	r0, [r7, #12]
    break;
 800fa26:	e112      	b.n	800fc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	7c1b      	ldrb	r3, [r3, #16]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d10d      	bne.n	800fa4c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa38:	f107 0208 	add.w	r2, r7, #8
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	4798      	blx	r3
 800fa40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	3301      	adds	r3, #1
 800fa46:	2202      	movs	r2, #2
 800fa48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800fa4a:	e100      	b.n	800fc4e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa54:	f107 0208 	add.w	r2, r7, #8
 800fa58:	4610      	mov	r0, r2
 800fa5a:	4798      	blx	r3
 800fa5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	3301      	adds	r3, #1
 800fa62:	2202      	movs	r2, #2
 800fa64:	701a      	strb	r2, [r3, #0]
    break;
 800fa66:	e0f2      	b.n	800fc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	885b      	ldrh	r3, [r3, #2]
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	2b05      	cmp	r3, #5
 800fa70:	f200 80ac 	bhi.w	800fbcc <USBD_GetDescriptor+0x258>
 800fa74:	a201      	add	r2, pc, #4	; (adr r2, 800fa7c <USBD_GetDescriptor+0x108>)
 800fa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7a:	bf00      	nop
 800fa7c:	0800fa95 	.word	0x0800fa95
 800fa80:	0800fac9 	.word	0x0800fac9
 800fa84:	0800fafd 	.word	0x0800fafd
 800fa88:	0800fb31 	.word	0x0800fb31
 800fa8c:	0800fb65 	.word	0x0800fb65
 800fa90:	0800fb99 	.word	0x0800fb99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fa9a:	685b      	ldr	r3, [r3, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00b      	beq.n	800fab8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	7c12      	ldrb	r2, [r2, #16]
 800faac:	f107 0108 	add.w	r1, r7, #8
 800fab0:	4610      	mov	r0, r2
 800fab2:	4798      	blx	r3
 800fab4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fab6:	e091      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fab8:	6839      	ldr	r1, [r7, #0]
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 faaa 	bl	8010014 <USBD_CtlError>
        err++;
 800fac0:	7afb      	ldrb	r3, [r7, #11]
 800fac2:	3301      	adds	r3, #1
 800fac4:	72fb      	strb	r3, [r7, #11]
      break;
 800fac6:	e089      	b.n	800fbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00b      	beq.n	800faec <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fada:	689b      	ldr	r3, [r3, #8]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	7c12      	ldrb	r2, [r2, #16]
 800fae0:	f107 0108 	add.w	r1, r7, #8
 800fae4:	4610      	mov	r0, r2
 800fae6:	4798      	blx	r3
 800fae8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800faea:	e077      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800faec:	6839      	ldr	r1, [r7, #0]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f000 fa90 	bl	8010014 <USBD_CtlError>
        err++;
 800faf4:	7afb      	ldrb	r3, [r7, #11]
 800faf6:	3301      	adds	r3, #1
 800faf8:	72fb      	strb	r3, [r7, #11]
      break;
 800fafa:	e06f      	b.n	800fbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00b      	beq.n	800fb20 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	687a      	ldr	r2, [r7, #4]
 800fb12:	7c12      	ldrb	r2, [r2, #16]
 800fb14:	f107 0108 	add.w	r1, r7, #8
 800fb18:	4610      	mov	r0, r2
 800fb1a:	4798      	blx	r3
 800fb1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb1e:	e05d      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fa76 	bl	8010014 <USBD_CtlError>
        err++;
 800fb28:	7afb      	ldrb	r3, [r7, #11]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	72fb      	strb	r3, [r7, #11]
      break;
 800fb2e:	e055      	b.n	800fbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00b      	beq.n	800fb54 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	7c12      	ldrb	r2, [r2, #16]
 800fb48:	f107 0108 	add.w	r1, r7, #8
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	4798      	blx	r3
 800fb50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb52:	e043      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb54:	6839      	ldr	r1, [r7, #0]
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f000 fa5c 	bl	8010014 <USBD_CtlError>
        err++;
 800fb5c:	7afb      	ldrb	r3, [r7, #11]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	72fb      	strb	r3, [r7, #11]
      break;
 800fb62:	e03b      	b.n	800fbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb6a:	695b      	ldr	r3, [r3, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d00b      	beq.n	800fb88 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb76:	695b      	ldr	r3, [r3, #20]
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	7c12      	ldrb	r2, [r2, #16]
 800fb7c:	f107 0108 	add.w	r1, r7, #8
 800fb80:	4610      	mov	r0, r2
 800fb82:	4798      	blx	r3
 800fb84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb86:	e029      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fb88:	6839      	ldr	r1, [r7, #0]
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	f000 fa42 	bl	8010014 <USBD_CtlError>
        err++;
 800fb90:	7afb      	ldrb	r3, [r7, #11]
 800fb92:	3301      	adds	r3, #1
 800fb94:	72fb      	strb	r3, [r7, #11]
      break;
 800fb96:	e021      	b.n	800fbdc <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fb9e:	699b      	ldr	r3, [r3, #24]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d00b      	beq.n	800fbbc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	7c12      	ldrb	r2, [r2, #16]
 800fbb0:	f107 0108 	add.w	r1, r7, #8
 800fbb4:	4610      	mov	r0, r2
 800fbb6:	4798      	blx	r3
 800fbb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbba:	e00f      	b.n	800fbdc <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 fa28 	bl	8010014 <USBD_CtlError>
        err++;
 800fbc4:	7afb      	ldrb	r3, [r7, #11]
 800fbc6:	3301      	adds	r3, #1
 800fbc8:	72fb      	strb	r3, [r7, #11]
      break;
 800fbca:	e007      	b.n	800fbdc <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800fbcc:	6839      	ldr	r1, [r7, #0]
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f000 fa20 	bl	8010014 <USBD_CtlError>
      err++;
 800fbd4:	7afb      	ldrb	r3, [r7, #11]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800fbda:	bf00      	nop
    }
    break;
 800fbdc:	e037      	b.n	800fc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	7c1b      	ldrb	r3, [r3, #16]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d109      	bne.n	800fbfa <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbee:	f107 0208 	add.w	r2, r7, #8
 800fbf2:	4610      	mov	r0, r2
 800fbf4:	4798      	blx	r3
 800fbf6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fbf8:	e029      	b.n	800fc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fbfa:	6839      	ldr	r1, [r7, #0]
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f000 fa09 	bl	8010014 <USBD_CtlError>
      err++;
 800fc02:	7afb      	ldrb	r3, [r7, #11]
 800fc04:	3301      	adds	r3, #1
 800fc06:	72fb      	strb	r3, [r7, #11]
    break;
 800fc08:	e021      	b.n	800fc4e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	7c1b      	ldrb	r3, [r3, #16]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d10d      	bne.n	800fc2e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc1a:	f107 0208 	add.w	r2, r7, #8
 800fc1e:	4610      	mov	r0, r2
 800fc20:	4798      	blx	r3
 800fc22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	3301      	adds	r3, #1
 800fc28:	2207      	movs	r2, #7
 800fc2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800fc2c:	e00f      	b.n	800fc4e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 f9ef 	bl	8010014 <USBD_CtlError>
      err++;
 800fc36:	7afb      	ldrb	r3, [r7, #11]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	72fb      	strb	r3, [r7, #11]
    break;
 800fc3c:	e007      	b.n	800fc4e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800fc3e:	6839      	ldr	r1, [r7, #0]
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f9e7 	bl	8010014 <USBD_CtlError>
    err++;
 800fc46:	7afb      	ldrb	r3, [r7, #11]
 800fc48:	3301      	adds	r3, #1
 800fc4a:	72fb      	strb	r3, [r7, #11]
    break;
 800fc4c:	bf00      	nop
  }

  if (err != 0U)
 800fc4e:	7afb      	ldrb	r3, [r7, #11]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d11e      	bne.n	800fc92 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	88db      	ldrh	r3, [r3, #6]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d016      	beq.n	800fc8a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800fc5c:	893b      	ldrh	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00e      	beq.n	800fc80 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	88da      	ldrh	r2, [r3, #6]
 800fc66:	893b      	ldrh	r3, [r7, #8]
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	bf28      	it	cs
 800fc6c:	4613      	movcs	r3, r2
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc72:	893b      	ldrh	r3, [r7, #8]
 800fc74:	461a      	mov	r2, r3
 800fc76:	68f9      	ldr	r1, [r7, #12]
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f000 fa3c 	bl	80100f6 <USBD_CtlSendData>
 800fc7e:	e009      	b.n	800fc94 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f9c6 	bl	8010014 <USBD_CtlError>
 800fc88:	e004      	b.n	800fc94 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 fa8d 	bl	80101aa <USBD_CtlSendStatus>
 800fc90:	e000      	b.n	800fc94 <USBD_GetDescriptor+0x320>
    return;
 800fc92:	bf00      	nop
    }
  }
}
 800fc94:	3710      	adds	r7, #16
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop

0800fc9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b084      	sub	sp, #16
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	6078      	str	r0, [r7, #4]
 800fca4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	889b      	ldrh	r3, [r3, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d130      	bne.n	800fd10 <USBD_SetAddress+0x74>
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	88db      	ldrh	r3, [r3, #6]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d12c      	bne.n	800fd10 <USBD_SetAddress+0x74>
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	885b      	ldrh	r3, [r3, #2]
 800fcba:	2b7f      	cmp	r3, #127	; 0x7f
 800fcbc:	d828      	bhi.n	800fd10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	885b      	ldrh	r3, [r3, #2]
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcd0:	2b03      	cmp	r3, #3
 800fcd2:	d104      	bne.n	800fcde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800fcd4:	6839      	ldr	r1, [r7, #0]
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f99c 	bl	8010014 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcdc:	e01c      	b.n	800fd18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	7bfa      	ldrb	r2, [r7, #15]
 800fce2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fce6:	7bfb      	ldrb	r3, [r7, #15]
 800fce8:	4619      	mov	r1, r3
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f007 fe3c 	bl	8017968 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f000 fa5a 	bl	80101aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fcf6:	7bfb      	ldrb	r3, [r7, #15]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d004      	beq.n	800fd06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2202      	movs	r2, #2
 800fd00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd04:	e008      	b.n	800fd18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2201      	movs	r2, #1
 800fd0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd0e:	e003      	b.n	800fd18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fd10:	6839      	ldr	r1, [r7, #0]
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f000 f97e 	bl	8010014 <USBD_CtlError>
  }
}
 800fd18:	bf00      	nop
 800fd1a:	3710      	adds	r7, #16
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}

0800fd20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b084      	sub	sp, #16
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
 800fd28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	885b      	ldrh	r3, [r3, #2]
 800fd32:	b2da      	uxtb	r2, r3
 800fd34:	4b4b      	ldr	r3, [pc, #300]	; (800fe64 <USBD_SetConfig+0x144>)
 800fd36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd38:	4b4a      	ldr	r3, [pc, #296]	; (800fe64 <USBD_SetConfig+0x144>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d905      	bls.n	800fd4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 f966 	bl	8010014 <USBD_CtlError>
    return USBD_FAIL;
 800fd48:	2303      	movs	r3, #3
 800fd4a:	e087      	b.n	800fe5c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd52:	2b02      	cmp	r3, #2
 800fd54:	d002      	beq.n	800fd5c <USBD_SetConfig+0x3c>
 800fd56:	2b03      	cmp	r3, #3
 800fd58:	d025      	beq.n	800fda6 <USBD_SetConfig+0x86>
 800fd5a:	e071      	b.n	800fe40 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fd5c:	4b41      	ldr	r3, [pc, #260]	; (800fe64 <USBD_SetConfig+0x144>)
 800fd5e:	781b      	ldrb	r3, [r3, #0]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d01c      	beq.n	800fd9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800fd64:	4b3f      	ldr	r3, [pc, #252]	; (800fe64 <USBD_SetConfig+0x144>)
 800fd66:	781b      	ldrb	r3, [r3, #0]
 800fd68:	461a      	mov	r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd6e:	4b3d      	ldr	r3, [pc, #244]	; (800fe64 <USBD_SetConfig+0x144>)
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	4619      	mov	r1, r3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f7ff f97d 	bl	800f074 <USBD_SetClassConfig>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fd7e:	7bfb      	ldrb	r3, [r7, #15]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d004      	beq.n	800fd8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800fd84:	6839      	ldr	r1, [r7, #0]
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f944 	bl	8010014 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fd8c:	e065      	b.n	800fe5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fd8e:	6878      	ldr	r0, [r7, #4]
 800fd90:	f000 fa0b 	bl	80101aa <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2203      	movs	r2, #3
 800fd98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fd9c:	e05d      	b.n	800fe5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fd9e:	6878      	ldr	r0, [r7, #4]
 800fda0:	f000 fa03 	bl	80101aa <USBD_CtlSendStatus>
    break;
 800fda4:	e059      	b.n	800fe5a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fda6:	4b2f      	ldr	r3, [pc, #188]	; (800fe64 <USBD_SetConfig+0x144>)
 800fda8:	781b      	ldrb	r3, [r3, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d112      	bne.n	800fdd4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2202      	movs	r2, #2
 800fdb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800fdb6:	4b2b      	ldr	r3, [pc, #172]	; (800fe64 <USBD_SetConfig+0x144>)
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdc0:	4b28      	ldr	r3, [pc, #160]	; (800fe64 <USBD_SetConfig+0x144>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f7ff f970 	bl	800f0ac <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 f9ec 	bl	80101aa <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fdd2:	e042      	b.n	800fe5a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800fdd4:	4b23      	ldr	r3, [pc, #140]	; (800fe64 <USBD_SetConfig+0x144>)
 800fdd6:	781b      	ldrb	r3, [r3, #0]
 800fdd8:	461a      	mov	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	d02a      	beq.n	800fe38 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	685b      	ldr	r3, [r3, #4]
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	4619      	mov	r1, r3
 800fdea:	6878      	ldr	r0, [r7, #4]
 800fdec:	f7ff f95e 	bl	800f0ac <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fdf0:	4b1c      	ldr	r3, [pc, #112]	; (800fe64 <USBD_SetConfig+0x144>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fdfa:	4b1a      	ldr	r3, [pc, #104]	; (800fe64 <USBD_SetConfig+0x144>)
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7ff f937 	bl	800f074 <USBD_SetClassConfig>
 800fe06:	4603      	mov	r3, r0
 800fe08:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800fe0a:	7bfb      	ldrb	r3, [r7, #15]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00f      	beq.n	800fe30 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800fe10:	6839      	ldr	r1, [r7, #0]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f000 f8fe 	bl	8010014 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	685b      	ldr	r3, [r3, #4]
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	4619      	mov	r1, r3
 800fe20:	6878      	ldr	r0, [r7, #4]
 800fe22:	f7ff f943 	bl	800f0ac <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2202      	movs	r2, #2
 800fe2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fe2e:	e014      	b.n	800fe5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f9ba 	bl	80101aa <USBD_CtlSendStatus>
    break;
 800fe36:	e010      	b.n	800fe5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 f9b6 	bl	80101aa <USBD_CtlSendStatus>
    break;
 800fe3e:	e00c      	b.n	800fe5a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800fe40:	6839      	ldr	r1, [r7, #0]
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 f8e6 	bl	8010014 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe48:	4b06      	ldr	r3, [pc, #24]	; (800fe64 <USBD_SetConfig+0x144>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7ff f92c 	bl	800f0ac <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fe54:	2303      	movs	r3, #3
 800fe56:	73fb      	strb	r3, [r7, #15]
    break;
 800fe58:	bf00      	nop
  }

  return ret;
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3710      	adds	r7, #16
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	20000438 	.word	0x20000438

0800fe68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b082      	sub	sp, #8
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	88db      	ldrh	r3, [r3, #6]
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	d004      	beq.n	800fe84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe7a:	6839      	ldr	r1, [r7, #0]
 800fe7c:	6878      	ldr	r0, [r7, #4]
 800fe7e:	f000 f8c9 	bl	8010014 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fe82:	e021      	b.n	800fec8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	db17      	blt.n	800febe <USBD_GetConfig+0x56>
 800fe8e:	2b02      	cmp	r3, #2
 800fe90:	dd02      	ble.n	800fe98 <USBD_GetConfig+0x30>
 800fe92:	2b03      	cmp	r3, #3
 800fe94:	d00b      	beq.n	800feae <USBD_GetConfig+0x46>
 800fe96:	e012      	b.n	800febe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	3308      	adds	r3, #8
 800fea2:	2201      	movs	r2, #1
 800fea4:	4619      	mov	r1, r3
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f000 f925 	bl	80100f6 <USBD_CtlSendData>
      break;
 800feac:	e00c      	b.n	800fec8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	3304      	adds	r3, #4
 800feb2:	2201      	movs	r2, #1
 800feb4:	4619      	mov	r1, r3
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 f91d 	bl	80100f6 <USBD_CtlSendData>
      break;
 800febc:	e004      	b.n	800fec8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800febe:	6839      	ldr	r1, [r7, #0]
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 f8a7 	bl	8010014 <USBD_CtlError>
      break;
 800fec6:	bf00      	nop
}
 800fec8:	bf00      	nop
 800feca:	3708      	adds	r7, #8
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b082      	sub	sp, #8
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fee0:	3b01      	subs	r3, #1
 800fee2:	2b02      	cmp	r3, #2
 800fee4:	d81e      	bhi.n	800ff24 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	88db      	ldrh	r3, [r3, #6]
 800feea:	2b02      	cmp	r3, #2
 800feec:	d004      	beq.n	800fef8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800feee:	6839      	ldr	r1, [r7, #0]
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f000 f88f 	bl	8010014 <USBD_CtlError>
      break;
 800fef6:	e01a      	b.n	800ff2e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2201      	movs	r2, #1
 800fefc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d005      	beq.n	800ff14 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	68db      	ldr	r3, [r3, #12]
 800ff0c:	f043 0202 	orr.w	r2, r3, #2
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	330c      	adds	r3, #12
 800ff18:	2202      	movs	r2, #2
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f8ea 	bl	80100f6 <USBD_CtlSendData>
    break;
 800ff22:	e004      	b.n	800ff2e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 f874 	bl	8010014 <USBD_CtlError>
    break;
 800ff2c:	bf00      	nop
  }
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	885b      	ldrh	r3, [r3, #2]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d106      	bne.n	800ff56 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f000 f92a 	bl	80101aa <USBD_CtlSendStatus>
  }
}
 800ff56:	bf00      	nop
 800ff58:	3708      	adds	r7, #8
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b082      	sub	sp, #8
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
 800ff66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d80b      	bhi.n	800ff8c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	885b      	ldrh	r3, [r3, #2]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d10c      	bne.n	800ff96 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 f910 	bl	80101aa <USBD_CtlSendStatus>
      }
      break;
 800ff8a:	e004      	b.n	800ff96 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f840 	bl	8010014 <USBD_CtlError>
      break;
 800ff94:	e000      	b.n	800ff98 <USBD_ClrFeature+0x3a>
      break;
 800ff96:	bf00      	nop
  }
}
 800ff98:	bf00      	nop
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}

0800ffa0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
 800ffa8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	781a      	ldrb	r2, [r3, #0]
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	781a      	ldrb	r2, [r3, #0]
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ffca:	68f8      	ldr	r0, [r7, #12]
 800ffcc:	f7ff faa9 	bl	800f522 <SWAPBYTE>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3301      	adds	r3, #1
 800ffdc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f7ff fa9c 	bl	800f522 <SWAPBYTE>
 800ffea:	4603      	mov	r3, r0
 800ffec:	461a      	mov	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3301      	adds	r3, #1
 800fff6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	3301      	adds	r3, #1
 800fffc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fffe:	68f8      	ldr	r0, [r7, #12]
 8010000:	f7ff fa8f 	bl	800f522 <SWAPBYTE>
 8010004:	4603      	mov	r3, r0
 8010006:	461a      	mov	r2, r3
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	80da      	strh	r2, [r3, #6]
}
 801000c:	bf00      	nop
 801000e:	3710      	adds	r7, #16
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}

08010014 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801001e:	2180      	movs	r1, #128	; 0x80
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f007 fc37 	bl	8017894 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010026:	2100      	movs	r1, #0
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f007 fc33 	bl	8017894 <USBD_LL_StallEP>
}
 801002e:	bf00      	nop
 8010030:	3708      	adds	r7, #8
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b086      	sub	sp, #24
 801003a:	af00      	add	r7, sp, #0
 801003c:	60f8      	str	r0, [r7, #12]
 801003e:	60b9      	str	r1, [r7, #8]
 8010040:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010042:	2300      	movs	r3, #0
 8010044:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d036      	beq.n	80100ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010050:	6938      	ldr	r0, [r7, #16]
 8010052:	f000 f836 	bl	80100c2 <USBD_GetLen>
 8010056:	4603      	mov	r3, r0
 8010058:	3301      	adds	r3, #1
 801005a:	b29b      	uxth	r3, r3
 801005c:	005b      	lsls	r3, r3, #1
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010064:	7dfb      	ldrb	r3, [r7, #23]
 8010066:	68ba      	ldr	r2, [r7, #8]
 8010068:	4413      	add	r3, r2
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	7812      	ldrb	r2, [r2, #0]
 801006e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010070:	7dfb      	ldrb	r3, [r7, #23]
 8010072:	3301      	adds	r3, #1
 8010074:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010076:	7dfb      	ldrb	r3, [r7, #23]
 8010078:	68ba      	ldr	r2, [r7, #8]
 801007a:	4413      	add	r3, r2
 801007c:	2203      	movs	r2, #3
 801007e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010080:	7dfb      	ldrb	r3, [r7, #23]
 8010082:	3301      	adds	r3, #1
 8010084:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010086:	e013      	b.n	80100b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010088:	7dfb      	ldrb	r3, [r7, #23]
 801008a:	68ba      	ldr	r2, [r7, #8]
 801008c:	4413      	add	r3, r2
 801008e:	693a      	ldr	r2, [r7, #16]
 8010090:	7812      	ldrb	r2, [r2, #0]
 8010092:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	3301      	adds	r3, #1
 8010098:	613b      	str	r3, [r7, #16]
    idx++;
 801009a:	7dfb      	ldrb	r3, [r7, #23]
 801009c:	3301      	adds	r3, #1
 801009e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100a0:	7dfb      	ldrb	r3, [r7, #23]
 80100a2:	68ba      	ldr	r2, [r7, #8]
 80100a4:	4413      	add	r3, r2
 80100a6:	2200      	movs	r2, #0
 80100a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80100aa:	7dfb      	ldrb	r3, [r7, #23]
 80100ac:	3301      	adds	r3, #1
 80100ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d1e7      	bne.n	8010088 <USBD_GetString+0x52>
 80100b8:	e000      	b.n	80100bc <USBD_GetString+0x86>
    return;
 80100ba:	bf00      	nop
  }
}
 80100bc:	3718      	adds	r7, #24
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80100c2:	b480      	push	{r7}
 80100c4:	b085      	sub	sp, #20
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80100ca:	2300      	movs	r3, #0
 80100cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80100d2:	e005      	b.n	80100e0 <USBD_GetLen+0x1e>
  {
    len++;
 80100d4:	7bfb      	ldrb	r3, [r7, #15]
 80100d6:	3301      	adds	r3, #1
 80100d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	3301      	adds	r3, #1
 80100de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d1f5      	bne.n	80100d4 <USBD_GetLen+0x12>
  }

  return len;
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3714      	adds	r7, #20
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b084      	sub	sp, #16
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	60f8      	str	r0, [r7, #12]
 80100fe:	60b9      	str	r1, [r7, #8]
 8010100:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	2202      	movs	r2, #2
 8010106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	687a      	ldr	r2, [r7, #4]
 8010114:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	68ba      	ldr	r2, [r7, #8]
 801011a:	2100      	movs	r1, #0
 801011c:	68f8      	ldr	r0, [r7, #12]
 801011e:	f007 fc42 	bl	80179a6 <USBD_LL_Transmit>

  return USBD_OK;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3710      	adds	r7, #16
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	2100      	movs	r1, #0
 801013e:	68f8      	ldr	r0, [r7, #12]
 8010140:	f007 fc31 	bl	80179a6 <USBD_LL_Transmit>

  return USBD_OK;
 8010144:	2300      	movs	r3, #0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b084      	sub	sp, #16
 8010152:	af00      	add	r7, sp, #0
 8010154:	60f8      	str	r0, [r7, #12]
 8010156:	60b9      	str	r1, [r7, #8]
 8010158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2203      	movs	r2, #3
 801015e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	687a      	ldr	r2, [r7, #4]
 8010166:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	68ba      	ldr	r2, [r7, #8]
 8010176:	2100      	movs	r1, #0
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f007 fc35 	bl	80179e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3710      	adds	r7, #16
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	68ba      	ldr	r2, [r7, #8]
 8010198:	2100      	movs	r1, #0
 801019a:	68f8      	ldr	r0, [r7, #12]
 801019c:	f007 fc24 	bl	80179e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101a0:	2300      	movs	r3, #0
}
 80101a2:	4618      	mov	r0, r3
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}

080101aa <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80101aa:	b580      	push	{r7, lr}
 80101ac:	b082      	sub	sp, #8
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2204      	movs	r2, #4
 80101b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80101ba:	2300      	movs	r3, #0
 80101bc:	2200      	movs	r2, #0
 80101be:	2100      	movs	r1, #0
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f007 fbf0 	bl	80179a6 <USBD_LL_Transmit>

  return USBD_OK;
 80101c6:	2300      	movs	r3, #0
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3708      	adds	r7, #8
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2205      	movs	r2, #5
 80101dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80101e0:	2300      	movs	r3, #0
 80101e2:	2200      	movs	r2, #0
 80101e4:	2100      	movs	r1, #0
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f007 fbfe 	bl	80179e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80101ec:	2300      	movs	r3, #0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010202:	79fb      	ldrb	r3, [r7, #7]
 8010204:	4a08      	ldr	r2, [pc, #32]	; (8010228 <disk_status+0x30>)
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	79fa      	ldrb	r2, [r7, #7]
 8010210:	4905      	ldr	r1, [pc, #20]	; (8010228 <disk_status+0x30>)
 8010212:	440a      	add	r2, r1
 8010214:	7a12      	ldrb	r2, [r2, #8]
 8010216:	4610      	mov	r0, r2
 8010218:	4798      	blx	r3
 801021a:	4603      	mov	r3, r0
 801021c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801021e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}
 8010228:	20000464 	.word	0x20000464

0801022c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	4603      	mov	r3, r0
 8010234:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010236:	2300      	movs	r3, #0
 8010238:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801023a:	79fb      	ldrb	r3, [r7, #7]
 801023c:	4a0d      	ldr	r2, [pc, #52]	; (8010274 <disk_initialize+0x48>)
 801023e:	5cd3      	ldrb	r3, [r2, r3]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d111      	bne.n	8010268 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	4a0b      	ldr	r2, [pc, #44]	; (8010274 <disk_initialize+0x48>)
 8010248:	2101      	movs	r1, #1
 801024a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	4a09      	ldr	r2, [pc, #36]	; (8010274 <disk_initialize+0x48>)
 8010250:	009b      	lsls	r3, r3, #2
 8010252:	4413      	add	r3, r2
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	79fa      	ldrb	r2, [r7, #7]
 801025a:	4906      	ldr	r1, [pc, #24]	; (8010274 <disk_initialize+0x48>)
 801025c:	440a      	add	r2, r1
 801025e:	7a12      	ldrb	r2, [r2, #8]
 8010260:	4610      	mov	r0, r2
 8010262:	4798      	blx	r3
 8010264:	4603      	mov	r3, r0
 8010266:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010268:	7bfb      	ldrb	r3, [r7, #15]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
 8010272:	bf00      	nop
 8010274:	20000464 	.word	0x20000464

08010278 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b087      	sub	sp, #28
 801027c:	af00      	add	r7, sp, #0
 801027e:	60b9      	str	r1, [r7, #8]
 8010280:	607a      	str	r2, [r7, #4]
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	4603      	mov	r3, r0
 8010286:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010288:	7bfb      	ldrb	r3, [r7, #15]
 801028a:	4a0a      	ldr	r2, [pc, #40]	; (80102b4 <disk_read+0x3c>)
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	689c      	ldr	r4, [r3, #8]
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	4a07      	ldr	r2, [pc, #28]	; (80102b4 <disk_read+0x3c>)
 8010298:	4413      	add	r3, r2
 801029a:	7a18      	ldrb	r0, [r3, #8]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	68b9      	ldr	r1, [r7, #8]
 80102a2:	47a0      	blx	r4
 80102a4:	4603      	mov	r3, r0
 80102a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102aa:	4618      	mov	r0, r3
 80102ac:	371c      	adds	r7, #28
 80102ae:	46bd      	mov	sp, r7
 80102b0:	bd90      	pop	{r4, r7, pc}
 80102b2:	bf00      	nop
 80102b4:	20000464 	.word	0x20000464

080102b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80102b8:	b590      	push	{r4, r7, lr}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60b9      	str	r1, [r7, #8]
 80102c0:	607a      	str	r2, [r7, #4]
 80102c2:	603b      	str	r3, [r7, #0]
 80102c4:	4603      	mov	r3, r0
 80102c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80102c8:	7bfb      	ldrb	r3, [r7, #15]
 80102ca:	4a0a      	ldr	r2, [pc, #40]	; (80102f4 <disk_write+0x3c>)
 80102cc:	009b      	lsls	r3, r3, #2
 80102ce:	4413      	add	r3, r2
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	68dc      	ldr	r4, [r3, #12]
 80102d4:	7bfb      	ldrb	r3, [r7, #15]
 80102d6:	4a07      	ldr	r2, [pc, #28]	; (80102f4 <disk_write+0x3c>)
 80102d8:	4413      	add	r3, r2
 80102da:	7a18      	ldrb	r0, [r3, #8]
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	687a      	ldr	r2, [r7, #4]
 80102e0:	68b9      	ldr	r1, [r7, #8]
 80102e2:	47a0      	blx	r4
 80102e4:	4603      	mov	r3, r0
 80102e6:	75fb      	strb	r3, [r7, #23]
  return res;
 80102e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	371c      	adds	r7, #28
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd90      	pop	{r4, r7, pc}
 80102f2:	bf00      	nop
 80102f4:	20000464 	.word	0x20000464

080102f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	603a      	str	r2, [r7, #0]
 8010302:	71fb      	strb	r3, [r7, #7]
 8010304:	460b      	mov	r3, r1
 8010306:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010308:	79fb      	ldrb	r3, [r7, #7]
 801030a:	4a09      	ldr	r2, [pc, #36]	; (8010330 <disk_ioctl+0x38>)
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	691b      	ldr	r3, [r3, #16]
 8010314:	79fa      	ldrb	r2, [r7, #7]
 8010316:	4906      	ldr	r1, [pc, #24]	; (8010330 <disk_ioctl+0x38>)
 8010318:	440a      	add	r2, r1
 801031a:	7a10      	ldrb	r0, [r2, #8]
 801031c:	79b9      	ldrb	r1, [r7, #6]
 801031e:	683a      	ldr	r2, [r7, #0]
 8010320:	4798      	blx	r3
 8010322:	4603      	mov	r3, r0
 8010324:	73fb      	strb	r3, [r7, #15]
  return res;
 8010326:	7bfb      	ldrb	r3, [r7, #15]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	20000464 	.word	0x20000464

08010334 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010334:	b480      	push	{r7}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	3301      	adds	r3, #1
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010344:	89fb      	ldrh	r3, [r7, #14]
 8010346:	021b      	lsls	r3, r3, #8
 8010348:	b21a      	sxth	r2, r3
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	b21b      	sxth	r3, r3
 8010350:	4313      	orrs	r3, r2
 8010352:	b21b      	sxth	r3, r3
 8010354:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010356:	89fb      	ldrh	r3, [r7, #14]
}
 8010358:	4618      	mov	r0, r3
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	3303      	adds	r3, #3
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	021b      	lsls	r3, r3, #8
 8010378:	687a      	ldr	r2, [r7, #4]
 801037a:	3202      	adds	r2, #2
 801037c:	7812      	ldrb	r2, [r2, #0]
 801037e:	4313      	orrs	r3, r2
 8010380:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	021b      	lsls	r3, r3, #8
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	3201      	adds	r2, #1
 801038a:	7812      	ldrb	r2, [r2, #0]
 801038c:	4313      	orrs	r3, r2
 801038e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	021b      	lsls	r3, r3, #8
 8010394:	687a      	ldr	r2, [r7, #4]
 8010396:	7812      	ldrb	r2, [r2, #0]
 8010398:	4313      	orrs	r3, r2
 801039a:	60fb      	str	r3, [r7, #12]
	return rv;
 801039c:	68fb      	ldr	r3, [r7, #12]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3714      	adds	r7, #20
 80103a2:	46bd      	mov	sp, r7
 80103a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a8:	4770      	bx	lr

080103aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80103aa:	b480      	push	{r7}
 80103ac:	b083      	sub	sp, #12
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	460b      	mov	r3, r1
 80103b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	607a      	str	r2, [r7, #4]
 80103bc:	887a      	ldrh	r2, [r7, #2]
 80103be:	b2d2      	uxtb	r2, r2
 80103c0:	701a      	strb	r2, [r3, #0]
 80103c2:	887b      	ldrh	r3, [r7, #2]
 80103c4:	0a1b      	lsrs	r3, r3, #8
 80103c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	1c5a      	adds	r2, r3, #1
 80103cc:	607a      	str	r2, [r7, #4]
 80103ce:	887a      	ldrh	r2, [r7, #2]
 80103d0:	b2d2      	uxtb	r2, r2
 80103d2:	701a      	strb	r2, [r3, #0]
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	683a      	ldr	r2, [r7, #0]
 80103f2:	b2d2      	uxtb	r2, r2
 80103f4:	701a      	strb	r2, [r3, #0]
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	0a1b      	lsrs	r3, r3, #8
 80103fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	607a      	str	r2, [r7, #4]
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	b2d2      	uxtb	r2, r2
 8010406:	701a      	strb	r2, [r3, #0]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	0a1b      	lsrs	r3, r3, #8
 801040c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	1c5a      	adds	r2, r3, #1
 8010412:	607a      	str	r2, [r7, #4]
 8010414:	683a      	ldr	r2, [r7, #0]
 8010416:	b2d2      	uxtb	r2, r2
 8010418:	701a      	strb	r2, [r3, #0]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	0a1b      	lsrs	r3, r3, #8
 801041e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	1c5a      	adds	r2, r3, #1
 8010424:	607a      	str	r2, [r7, #4]
 8010426:	683a      	ldr	r2, [r7, #0]
 8010428:	b2d2      	uxtb	r2, r2
 801042a:	701a      	strb	r2, [r3, #0]
}
 801042c:	bf00      	nop
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010438:	b480      	push	{r7}
 801043a:	b087      	sub	sp, #28
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00d      	beq.n	801046e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	1c53      	adds	r3, r2, #1
 8010456:	613b      	str	r3, [r7, #16]
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	1c59      	adds	r1, r3, #1
 801045c:	6179      	str	r1, [r7, #20]
 801045e:	7812      	ldrb	r2, [r2, #0]
 8010460:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	3b01      	subs	r3, #1
 8010466:	607b      	str	r3, [r7, #4]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f1      	bne.n	8010452 <mem_cpy+0x1a>
	}
}
 801046e:	bf00      	nop
 8010470:	371c      	adds	r7, #28
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801047a:	b480      	push	{r7}
 801047c:	b087      	sub	sp, #28
 801047e:	af00      	add	r7, sp, #0
 8010480:	60f8      	str	r0, [r7, #12]
 8010482:	60b9      	str	r1, [r7, #8]
 8010484:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	1c5a      	adds	r2, r3, #1
 801048e:	617a      	str	r2, [r7, #20]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	b2d2      	uxtb	r2, r2
 8010494:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	3b01      	subs	r3, #1
 801049a:	607b      	str	r3, [r7, #4]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1f3      	bne.n	801048a <mem_set+0x10>
}
 80104a2:	bf00      	nop
 80104a4:	371c      	adds	r7, #28
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr

080104ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80104ae:	b480      	push	{r7}
 80104b0:	b089      	sub	sp, #36	; 0x24
 80104b2:	af00      	add	r7, sp, #0
 80104b4:	60f8      	str	r0, [r7, #12]
 80104b6:	60b9      	str	r1, [r7, #8]
 80104b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	61fb      	str	r3, [r7, #28]
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80104c2:	2300      	movs	r3, #0
 80104c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	61fa      	str	r2, [r7, #28]
 80104cc:	781b      	ldrb	r3, [r3, #0]
 80104ce:	4619      	mov	r1, r3
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	1c5a      	adds	r2, r3, #1
 80104d4:	61ba      	str	r2, [r7, #24]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	1acb      	subs	r3, r1, r3
 80104da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	3b01      	subs	r3, #1
 80104e0:	607b      	str	r3, [r7, #4]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <mem_cmp+0x40>
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d0eb      	beq.n	80104c6 <mem_cmp+0x18>

	return r;
 80104ee:	697b      	ldr	r3, [r7, #20]
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3724      	adds	r7, #36	; 0x24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010506:	e002      	b.n	801050e <chk_chr+0x12>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	3301      	adds	r3, #1
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d005      	beq.n	8010522 <chk_chr+0x26>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	461a      	mov	r2, r3
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	4293      	cmp	r3, r2
 8010520:	d1f2      	bne.n	8010508 <chk_chr+0xc>
	return *str;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	781b      	ldrb	r3, [r3, #0]
}
 8010526:	4618      	mov	r0, r3
 8010528:	370c      	adds	r7, #12
 801052a:	46bd      	mov	sp, r7
 801052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010530:	4770      	bx	lr

08010532 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010532:	b580      	push	{r7, lr}
 8010534:	b082      	sub	sp, #8
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d009      	beq.n	8010554 <lock_fs+0x22>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	4618      	mov	r0, r3
 8010546:	f002 fd8d 	bl	8013064 <ff_req_grant>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d001      	beq.n	8010554 <lock_fs+0x22>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <lock_fs+0x24>
 8010554:	2300      	movs	r3, #0
}
 8010556:	4618      	mov	r0, r3
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}

0801055e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b082      	sub	sp, #8
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
 8010566:	460b      	mov	r3, r1
 8010568:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d00d      	beq.n	801058c <unlock_fs+0x2e>
 8010570:	78fb      	ldrb	r3, [r7, #3]
 8010572:	2b0c      	cmp	r3, #12
 8010574:	d00a      	beq.n	801058c <unlock_fs+0x2e>
 8010576:	78fb      	ldrb	r3, [r7, #3]
 8010578:	2b0b      	cmp	r3, #11
 801057a:	d007      	beq.n	801058c <unlock_fs+0x2e>
 801057c:	78fb      	ldrb	r3, [r7, #3]
 801057e:	2b0f      	cmp	r3, #15
 8010580:	d004      	beq.n	801058c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	68db      	ldr	r3, [r3, #12]
 8010586:	4618      	mov	r0, r3
 8010588:	f002 fd81 	bl	801308e <ff_rel_grant>
	}
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010594:	b480      	push	{r7}
 8010596:	b085      	sub	sp, #20
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801059e:	2300      	movs	r3, #0
 80105a0:	60bb      	str	r3, [r7, #8]
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	60fb      	str	r3, [r7, #12]
 80105a6:	e029      	b.n	80105fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80105a8:	4a27      	ldr	r2, [pc, #156]	; (8010648 <chk_lock+0xb4>)
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	011b      	lsls	r3, r3, #4
 80105ae:	4413      	add	r3, r2
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d01d      	beq.n	80105f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80105b6:	4a24      	ldr	r2, [pc, #144]	; (8010648 <chk_lock+0xb4>)
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	011b      	lsls	r3, r3, #4
 80105bc:	4413      	add	r3, r2
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	429a      	cmp	r2, r3
 80105c6:	d116      	bne.n	80105f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80105c8:	4a1f      	ldr	r2, [pc, #124]	; (8010648 <chk_lock+0xb4>)
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	011b      	lsls	r3, r3, #4
 80105ce:	4413      	add	r3, r2
 80105d0:	3304      	adds	r3, #4
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80105d8:	429a      	cmp	r2, r3
 80105da:	d10c      	bne.n	80105f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105dc:	4a1a      	ldr	r2, [pc, #104]	; (8010648 <chk_lock+0xb4>)
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	011b      	lsls	r3, r3, #4
 80105e2:	4413      	add	r3, r2
 80105e4:	3308      	adds	r3, #8
 80105e6:	681a      	ldr	r2, [r3, #0]
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80105ec:	429a      	cmp	r2, r3
 80105ee:	d102      	bne.n	80105f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80105f0:	e007      	b.n	8010602 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80105f2:	2301      	movs	r3, #1
 80105f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3301      	adds	r3, #1
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d9d2      	bls.n	80105a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2b02      	cmp	r3, #2
 8010606:	d109      	bne.n	801061c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d102      	bne.n	8010614 <chk_lock+0x80>
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	2b02      	cmp	r3, #2
 8010612:	d101      	bne.n	8010618 <chk_lock+0x84>
 8010614:	2300      	movs	r3, #0
 8010616:	e010      	b.n	801063a <chk_lock+0xa6>
 8010618:	2312      	movs	r3, #18
 801061a:	e00e      	b.n	801063a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d108      	bne.n	8010634 <chk_lock+0xa0>
 8010622:	4a09      	ldr	r2, [pc, #36]	; (8010648 <chk_lock+0xb4>)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	011b      	lsls	r3, r3, #4
 8010628:	4413      	add	r3, r2
 801062a:	330c      	adds	r3, #12
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010632:	d101      	bne.n	8010638 <chk_lock+0xa4>
 8010634:	2310      	movs	r3, #16
 8010636:	e000      	b.n	801063a <chk_lock+0xa6>
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3714      	adds	r7, #20
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	bf00      	nop
 8010648:	20000444 	.word	0x20000444

0801064c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801064c:	b480      	push	{r7}
 801064e:	b083      	sub	sp, #12
 8010650:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010652:	2300      	movs	r3, #0
 8010654:	607b      	str	r3, [r7, #4]
 8010656:	e002      	b.n	801065e <enq_lock+0x12>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	3301      	adds	r3, #1
 801065c:	607b      	str	r3, [r7, #4]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b01      	cmp	r3, #1
 8010662:	d806      	bhi.n	8010672 <enq_lock+0x26>
 8010664:	4a09      	ldr	r2, [pc, #36]	; (801068c <enq_lock+0x40>)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	011b      	lsls	r3, r3, #4
 801066a:	4413      	add	r3, r2
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1f2      	bne.n	8010658 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b02      	cmp	r3, #2
 8010676:	bf14      	ite	ne
 8010678:	2301      	movne	r3, #1
 801067a:	2300      	moveq	r3, #0
 801067c:	b2db      	uxtb	r3, r3
}
 801067e:	4618      	mov	r0, r3
 8010680:	370c      	adds	r7, #12
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	20000444 	.word	0x20000444

08010690 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801069a:	2300      	movs	r3, #0
 801069c:	60fb      	str	r3, [r7, #12]
 801069e:	e01f      	b.n	80106e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80106a0:	4a41      	ldr	r2, [pc, #260]	; (80107a8 <inc_lock+0x118>)
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	011b      	lsls	r3, r3, #4
 80106a6:	4413      	add	r3, r2
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d113      	bne.n	80106da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80106b2:	4a3d      	ldr	r2, [pc, #244]	; (80107a8 <inc_lock+0x118>)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	011b      	lsls	r3, r3, #4
 80106b8:	4413      	add	r3, r2
 80106ba:	3304      	adds	r3, #4
 80106bc:	681a      	ldr	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d109      	bne.n	80106da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80106c6:	4a38      	ldr	r2, [pc, #224]	; (80107a8 <inc_lock+0x118>)
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	011b      	lsls	r3, r3, #4
 80106cc:	4413      	add	r3, r2
 80106ce:	3308      	adds	r3, #8
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d006      	beq.n	80106e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	3301      	adds	r3, #1
 80106de:	60fb      	str	r3, [r7, #12]
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d9dc      	bls.n	80106a0 <inc_lock+0x10>
 80106e6:	e000      	b.n	80106ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80106e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	2b02      	cmp	r3, #2
 80106ee:	d132      	bne.n	8010756 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80106f0:	2300      	movs	r3, #0
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	e002      	b.n	80106fc <inc_lock+0x6c>
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	3301      	adds	r3, #1
 80106fa:	60fb      	str	r3, [r7, #12]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b01      	cmp	r3, #1
 8010700:	d806      	bhi.n	8010710 <inc_lock+0x80>
 8010702:	4a29      	ldr	r2, [pc, #164]	; (80107a8 <inc_lock+0x118>)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	011b      	lsls	r3, r3, #4
 8010708:	4413      	add	r3, r2
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1f2      	bne.n	80106f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	2b02      	cmp	r3, #2
 8010714:	d101      	bne.n	801071a <inc_lock+0x8a>
 8010716:	2300      	movs	r3, #0
 8010718:	e040      	b.n	801079c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	4922      	ldr	r1, [pc, #136]	; (80107a8 <inc_lock+0x118>)
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	011b      	lsls	r3, r3, #4
 8010724:	440b      	add	r3, r1
 8010726:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	689a      	ldr	r2, [r3, #8]
 801072c:	491e      	ldr	r1, [pc, #120]	; (80107a8 <inc_lock+0x118>)
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	011b      	lsls	r3, r3, #4
 8010732:	440b      	add	r3, r1
 8010734:	3304      	adds	r3, #4
 8010736:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	695a      	ldr	r2, [r3, #20]
 801073c:	491a      	ldr	r1, [pc, #104]	; (80107a8 <inc_lock+0x118>)
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	440b      	add	r3, r1
 8010744:	3308      	adds	r3, #8
 8010746:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010748:	4a17      	ldr	r2, [pc, #92]	; (80107a8 <inc_lock+0x118>)
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	011b      	lsls	r3, r3, #4
 801074e:	4413      	add	r3, r2
 8010750:	330c      	adds	r3, #12
 8010752:	2200      	movs	r2, #0
 8010754:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d009      	beq.n	8010770 <inc_lock+0xe0>
 801075c:	4a12      	ldr	r2, [pc, #72]	; (80107a8 <inc_lock+0x118>)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	011b      	lsls	r3, r3, #4
 8010762:	4413      	add	r3, r2
 8010764:	330c      	adds	r3, #12
 8010766:	881b      	ldrh	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <inc_lock+0xe0>
 801076c:	2300      	movs	r3, #0
 801076e:	e015      	b.n	801079c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d108      	bne.n	8010788 <inc_lock+0xf8>
 8010776:	4a0c      	ldr	r2, [pc, #48]	; (80107a8 <inc_lock+0x118>)
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	011b      	lsls	r3, r3, #4
 801077c:	4413      	add	r3, r2
 801077e:	330c      	adds	r3, #12
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	3301      	adds	r3, #1
 8010784:	b29a      	uxth	r2, r3
 8010786:	e001      	b.n	801078c <inc_lock+0xfc>
 8010788:	f44f 7280 	mov.w	r2, #256	; 0x100
 801078c:	4906      	ldr	r1, [pc, #24]	; (80107a8 <inc_lock+0x118>)
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	011b      	lsls	r3, r3, #4
 8010792:	440b      	add	r3, r1
 8010794:	330c      	adds	r3, #12
 8010796:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	3301      	adds	r3, #1
}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr
 80107a8:	20000444 	.word	0x20000444

080107ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b085      	sub	sp, #20
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	3b01      	subs	r3, #1
 80107b8:	607b      	str	r3, [r7, #4]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d825      	bhi.n	801080c <dec_lock+0x60>
		n = Files[i].ctr;
 80107c0:	4a17      	ldr	r2, [pc, #92]	; (8010820 <dec_lock+0x74>)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	011b      	lsls	r3, r3, #4
 80107c6:	4413      	add	r3, r2
 80107c8:	330c      	adds	r3, #12
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80107ce:	89fb      	ldrh	r3, [r7, #14]
 80107d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107d4:	d101      	bne.n	80107da <dec_lock+0x2e>
 80107d6:	2300      	movs	r3, #0
 80107d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80107da:	89fb      	ldrh	r3, [r7, #14]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <dec_lock+0x3a>
 80107e0:	89fb      	ldrh	r3, [r7, #14]
 80107e2:	3b01      	subs	r3, #1
 80107e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80107e6:	4a0e      	ldr	r2, [pc, #56]	; (8010820 <dec_lock+0x74>)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	4413      	add	r3, r2
 80107ee:	330c      	adds	r3, #12
 80107f0:	89fa      	ldrh	r2, [r7, #14]
 80107f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80107f4:	89fb      	ldrh	r3, [r7, #14]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d105      	bne.n	8010806 <dec_lock+0x5a>
 80107fa:	4a09      	ldr	r2, [pc, #36]	; (8010820 <dec_lock+0x74>)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	011b      	lsls	r3, r3, #4
 8010800:	4413      	add	r3, r2
 8010802:	2200      	movs	r2, #0
 8010804:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010806:	2300      	movs	r3, #0
 8010808:	737b      	strb	r3, [r7, #13]
 801080a:	e001      	b.n	8010810 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801080c:	2302      	movs	r3, #2
 801080e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010810:	7b7b      	ldrb	r3, [r7, #13]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3714      	adds	r7, #20
 8010816:	46bd      	mov	sp, r7
 8010818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081c:	4770      	bx	lr
 801081e:	bf00      	nop
 8010820:	20000444 	.word	0x20000444

08010824 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801082c:	2300      	movs	r3, #0
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	e010      	b.n	8010854 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010832:	4a0d      	ldr	r2, [pc, #52]	; (8010868 <clear_lock+0x44>)
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	011b      	lsls	r3, r3, #4
 8010838:	4413      	add	r3, r2
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	429a      	cmp	r2, r3
 8010840:	d105      	bne.n	801084e <clear_lock+0x2a>
 8010842:	4a09      	ldr	r2, [pc, #36]	; (8010868 <clear_lock+0x44>)
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	011b      	lsls	r3, r3, #4
 8010848:	4413      	add	r3, r2
 801084a:	2200      	movs	r2, #0
 801084c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3301      	adds	r3, #1
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b01      	cmp	r3, #1
 8010858:	d9eb      	bls.n	8010832 <clear_lock+0xe>
	}
}
 801085a:	bf00      	nop
 801085c:	3714      	adds	r7, #20
 801085e:	46bd      	mov	sp, r7
 8010860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010864:	4770      	bx	lr
 8010866:	bf00      	nop
 8010868:	20000444 	.word	0x20000444

0801086c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801086c:	b580      	push	{r7, lr}
 801086e:	b086      	sub	sp, #24
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010874:	2300      	movs	r3, #0
 8010876:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	78db      	ldrb	r3, [r3, #3]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d034      	beq.n	80108ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010884:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	7858      	ldrb	r0, [r3, #1]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010890:	2301      	movs	r3, #1
 8010892:	697a      	ldr	r2, [r7, #20]
 8010894:	f7ff fd10 	bl	80102b8 <disk_write>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d002      	beq.n	80108a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801089e:	2301      	movs	r3, #1
 80108a0:	73fb      	strb	r3, [r7, #15]
 80108a2:	e022      	b.n	80108ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2200      	movs	r2, #0
 80108a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108ae:	697a      	ldr	r2, [r7, #20]
 80108b0:	1ad2      	subs	r2, r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	69db      	ldr	r3, [r3, #28]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d217      	bcs.n	80108ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	789b      	ldrb	r3, [r3, #2]
 80108be:	613b      	str	r3, [r7, #16]
 80108c0:	e010      	b.n	80108e4 <sync_window+0x78>
					wsect += fs->fsize;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	69db      	ldr	r3, [r3, #28]
 80108c6:	697a      	ldr	r2, [r7, #20]
 80108c8:	4413      	add	r3, r2
 80108ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	7858      	ldrb	r0, [r3, #1]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80108d6:	2301      	movs	r3, #1
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	f7ff fced 	bl	80102b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	613b      	str	r3, [r7, #16]
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d8eb      	bhi.n	80108c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80108ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3718      	adds	r7, #24
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	429a      	cmp	r2, r3
 801090a:	d01b      	beq.n	8010944 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801090c:	6878      	ldr	r0, [r7, #4]
 801090e:	f7ff ffad 	bl	801086c <sync_window>
 8010912:	4603      	mov	r3, r0
 8010914:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010916:	7bfb      	ldrb	r3, [r7, #15]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d113      	bne.n	8010944 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	7858      	ldrb	r0, [r3, #1]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8010926:	2301      	movs	r3, #1
 8010928:	683a      	ldr	r2, [r7, #0]
 801092a:	f7ff fca5 	bl	8010278 <disk_read>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d004      	beq.n	801093e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010934:	f04f 33ff 	mov.w	r3, #4294967295
 8010938:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801093a:	2301      	movs	r3, #1
 801093c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8010944:	7bfb      	ldrb	r3, [r7, #15]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3710      	adds	r7, #16
 801094a:	46bd      	mov	sp, r7
 801094c:	bd80      	pop	{r7, pc}
	...

08010950 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b084      	sub	sp, #16
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7ff ff87 	bl	801086c <sync_window>
 801095e:	4603      	mov	r3, r0
 8010960:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010962:	7bfb      	ldrb	r3, [r7, #15]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d158      	bne.n	8010a1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	2b03      	cmp	r3, #3
 801096e:	d148      	bne.n	8010a02 <sync_fs+0xb2>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	791b      	ldrb	r3, [r3, #4]
 8010974:	2b01      	cmp	r3, #1
 8010976:	d144      	bne.n	8010a02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	3334      	adds	r3, #52	; 0x34
 801097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010980:	2100      	movs	r1, #0
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff fd79 	bl	801047a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3334      	adds	r3, #52	; 0x34
 801098c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010990:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010994:	4618      	mov	r0, r3
 8010996:	f7ff fd08 	bl	80103aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	3334      	adds	r3, #52	; 0x34
 801099e:	4921      	ldr	r1, [pc, #132]	; (8010a24 <sync_fs+0xd4>)
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff fd1d 	bl	80103e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	3334      	adds	r3, #52	; 0x34
 80109aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80109ae:	491e      	ldr	r1, [pc, #120]	; (8010a28 <sync_fs+0xd8>)
 80109b0:	4618      	mov	r0, r3
 80109b2:	f7ff fd15 	bl	80103e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	3334      	adds	r3, #52	; 0x34
 80109ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	695b      	ldr	r3, [r3, #20]
 80109c2:	4619      	mov	r1, r3
 80109c4:	4610      	mov	r0, r2
 80109c6:	f7ff fd0b 	bl	80103e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	3334      	adds	r3, #52	; 0x34
 80109ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7ff fd01 	bl	80103e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
 80109e2:	1c5a      	adds	r2, r3, #1
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	7858      	ldrb	r0, [r3, #1]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109f6:	2301      	movs	r3, #1
 80109f8:	f7ff fc5e 	bl	80102b8 <disk_write>
			fs->fsi_flag = 0;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	785b      	ldrb	r3, [r3, #1]
 8010a06:	2200      	movs	r2, #0
 8010a08:	2100      	movs	r1, #0
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7ff fc74 	bl	80102f8 <disk_ioctl>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <sync_fs+0xca>
 8010a16:	2301      	movs	r3, #1
 8010a18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	41615252 	.word	0x41615252
 8010a28:	61417272 	.word	0x61417272

08010a2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	3b02      	subs	r3, #2
 8010a3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	699b      	ldr	r3, [r3, #24]
 8010a40:	3b02      	subs	r3, #2
 8010a42:	683a      	ldr	r2, [r7, #0]
 8010a44:	429a      	cmp	r2, r3
 8010a46:	d301      	bcc.n	8010a4c <clust2sect+0x20>
 8010a48:	2300      	movs	r3, #0
 8010a4a:	e008      	b.n	8010a5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	895b      	ldrh	r3, [r3, #10]
 8010a50:	461a      	mov	r2, r3
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	fb03 f202 	mul.w	r2, r3, r2
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a5c:	4413      	add	r3, r2
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr

08010a6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b086      	sub	sp, #24
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
 8010a72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010a7a:	683b      	ldr	r3, [r7, #0]
 8010a7c:	2b01      	cmp	r3, #1
 8010a7e:	d904      	bls.n	8010a8a <get_fat+0x20>
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	699b      	ldr	r3, [r3, #24]
 8010a84:	683a      	ldr	r2, [r7, #0]
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d302      	bcc.n	8010a90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010a8a:	2301      	movs	r3, #1
 8010a8c:	617b      	str	r3, [r7, #20]
 8010a8e:	e08c      	b.n	8010baa <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010a90:	f04f 33ff 	mov.w	r3, #4294967295
 8010a94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d045      	beq.n	8010b2a <get_fat+0xc0>
 8010a9e:	2b03      	cmp	r3, #3
 8010aa0:	d05d      	beq.n	8010b5e <get_fat+0xf4>
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d177      	bne.n	8010b96 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	60fb      	str	r3, [r7, #12]
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	085b      	lsrs	r3, r3, #1
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	0a5b      	lsrs	r3, r3, #9
 8010abc:	4413      	add	r3, r2
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6938      	ldr	r0, [r7, #16]
 8010ac2:	f7ff ff17 	bl	80108f4 <move_window>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d167      	bne.n	8010b9c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	1c5a      	adds	r2, r3, #1
 8010ad0:	60fa      	str	r2, [r7, #12]
 8010ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ad6:	693a      	ldr	r2, [r7, #16]
 8010ad8:	4413      	add	r3, r2
 8010ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ade:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	0a5b      	lsrs	r3, r3, #9
 8010ae8:	4413      	add	r3, r2
 8010aea:	4619      	mov	r1, r3
 8010aec:	6938      	ldr	r0, [r7, #16]
 8010aee:	f7ff ff01 	bl	80108f4 <move_window>
 8010af2:	4603      	mov	r3, r0
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d153      	bne.n	8010ba0 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010afe:	693a      	ldr	r2, [r7, #16]
 8010b00:	4413      	add	r3, r2
 8010b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b06:	021b      	lsls	r3, r3, #8
 8010b08:	461a      	mov	r2, r3
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	4313      	orrs	r3, r2
 8010b0e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	f003 0301 	and.w	r3, r3, #1
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d002      	beq.n	8010b20 <get_fat+0xb6>
 8010b1a:	68bb      	ldr	r3, [r7, #8]
 8010b1c:	091b      	lsrs	r3, r3, #4
 8010b1e:	e002      	b.n	8010b26 <get_fat+0xbc>
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010b26:	617b      	str	r3, [r7, #20]
			break;
 8010b28:	e03f      	b.n	8010baa <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	0a1b      	lsrs	r3, r3, #8
 8010b32:	4413      	add	r3, r2
 8010b34:	4619      	mov	r1, r3
 8010b36:	6938      	ldr	r0, [r7, #16]
 8010b38:	f7ff fedc 	bl	80108f4 <move_window>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d130      	bne.n	8010ba4 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010b42:	693b      	ldr	r3, [r7, #16]
 8010b44:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	005b      	lsls	r3, r3, #1
 8010b4c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010b50:	4413      	add	r3, r2
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff fbee 	bl	8010334 <ld_word>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	617b      	str	r3, [r7, #20]
			break;
 8010b5c:	e025      	b.n	8010baa <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b62:	683b      	ldr	r3, [r7, #0]
 8010b64:	09db      	lsrs	r3, r3, #7
 8010b66:	4413      	add	r3, r2
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6938      	ldr	r0, [r7, #16]
 8010b6c:	f7ff fec2 	bl	80108f4 <move_window>
 8010b70:	4603      	mov	r3, r0
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d118      	bne.n	8010ba8 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	009b      	lsls	r3, r3, #2
 8010b80:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010b84:	4413      	add	r3, r2
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7ff fbec 	bl	8010364 <ld_dword>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010b92:	617b      	str	r3, [r7, #20]
			break;
 8010b94:	e009      	b.n	8010baa <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010b96:	2301      	movs	r3, #1
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	e006      	b.n	8010baa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b9c:	bf00      	nop
 8010b9e:	e004      	b.n	8010baa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010ba0:	bf00      	nop
 8010ba2:	e002      	b.n	8010baa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ba4:	bf00      	nop
 8010ba6:	e000      	b.n	8010baa <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ba8:	bf00      	nop
		}
	}

	return val;
 8010baa:	697b      	ldr	r3, [r7, #20]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010bb4:	b590      	push	{r4, r7, lr}
 8010bb6:	b089      	sub	sp, #36	; 0x24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	2b01      	cmp	r3, #1
 8010bc8:	f240 80d6 	bls.w	8010d78 <put_fat+0x1c4>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	699b      	ldr	r3, [r3, #24]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	f080 80d0 	bcs.w	8010d78 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	2b02      	cmp	r3, #2
 8010bde:	d073      	beq.n	8010cc8 <put_fat+0x114>
 8010be0:	2b03      	cmp	r3, #3
 8010be2:	f000 8091 	beq.w	8010d08 <put_fat+0x154>
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	f040 80c6 	bne.w	8010d78 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	61bb      	str	r3, [r7, #24]
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	085b      	lsrs	r3, r3, #1
 8010bf4:	69ba      	ldr	r2, [r7, #24]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	0a5b      	lsrs	r3, r3, #9
 8010c02:	4413      	add	r3, r2
 8010c04:	4619      	mov	r1, r3
 8010c06:	68f8      	ldr	r0, [r7, #12]
 8010c08:	f7ff fe74 	bl	80108f4 <move_window>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c10:	7ffb      	ldrb	r3, [r7, #31]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	f040 80a9 	bne.w	8010d6a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	1c59      	adds	r1, r3, #1
 8010c22:	61b9      	str	r1, [r7, #24]
 8010c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c28:	4413      	add	r3, r2
 8010c2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	f003 0301 	and.w	r3, r3, #1
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00d      	beq.n	8010c52 <put_fat+0x9e>
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	b25b      	sxtb	r3, r3
 8010c3c:	f003 030f 	and.w	r3, r3, #15
 8010c40:	b25a      	sxtb	r2, r3
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	b2db      	uxtb	r3, r3
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	b25b      	sxtb	r3, r3
 8010c4a:	4313      	orrs	r3, r2
 8010c4c:	b25b      	sxtb	r3, r3
 8010c4e:	b2db      	uxtb	r3, r3
 8010c50:	e001      	b.n	8010c56 <put_fat+0xa2>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	697a      	ldr	r2, [r7, #20]
 8010c58:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	0a5b      	lsrs	r3, r3, #9
 8010c68:	4413      	add	r3, r2
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	68f8      	ldr	r0, [r7, #12]
 8010c6e:	f7ff fe41 	bl	80108f4 <move_window>
 8010c72:	4603      	mov	r3, r0
 8010c74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010c76:	7ffb      	ldrb	r3, [r7, #31]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d178      	bne.n	8010d6e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010c82:	69bb      	ldr	r3, [r7, #24]
 8010c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c88:	4413      	add	r3, r2
 8010c8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d003      	beq.n	8010c9e <put_fat+0xea>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	091b      	lsrs	r3, r3, #4
 8010c9a:	b2db      	uxtb	r3, r3
 8010c9c:	e00e      	b.n	8010cbc <put_fat+0x108>
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	781b      	ldrb	r3, [r3, #0]
 8010ca2:	b25b      	sxtb	r3, r3
 8010ca4:	f023 030f 	bic.w	r3, r3, #15
 8010ca8:	b25a      	sxtb	r2, r3
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	0a1b      	lsrs	r3, r3, #8
 8010cae:	b25b      	sxtb	r3, r3
 8010cb0:	f003 030f 	and.w	r3, r3, #15
 8010cb4:	b25b      	sxtb	r3, r3
 8010cb6:	4313      	orrs	r3, r2
 8010cb8:	b25b      	sxtb	r3, r3
 8010cba:	b2db      	uxtb	r3, r3
 8010cbc:	697a      	ldr	r2, [r7, #20]
 8010cbe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	70da      	strb	r2, [r3, #3]
			break;
 8010cc6:	e057      	b.n	8010d78 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	0a1b      	lsrs	r3, r3, #8
 8010cd0:	4413      	add	r3, r2
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	68f8      	ldr	r0, [r7, #12]
 8010cd6:	f7ff fe0d 	bl	80108f4 <move_window>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010cde:	7ffb      	ldrb	r3, [r7, #31]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d146      	bne.n	8010d72 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	005b      	lsls	r3, r3, #1
 8010cee:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010cf2:	4413      	add	r3, r2
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	b292      	uxth	r2, r2
 8010cf8:	4611      	mov	r1, r2
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff fb55 	bl	80103aa <st_word>
			fs->wflag = 1;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	2201      	movs	r2, #1
 8010d04:	70da      	strb	r2, [r3, #3]
			break;
 8010d06:	e037      	b.n	8010d78 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	09db      	lsrs	r3, r3, #7
 8010d10:	4413      	add	r3, r2
 8010d12:	4619      	mov	r1, r3
 8010d14:	68f8      	ldr	r0, [r7, #12]
 8010d16:	f7ff fded 	bl	80108f4 <move_window>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d1e:	7ffb      	ldrb	r3, [r7, #31]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d128      	bne.n	8010d76 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d38:	4413      	add	r3, r2
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7ff fb12 	bl	8010364 <ld_dword>
 8010d40:	4603      	mov	r3, r0
 8010d42:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010d46:	4323      	orrs	r3, r4
 8010d48:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010d58:	4413      	add	r3, r2
 8010d5a:	6879      	ldr	r1, [r7, #4]
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f7ff fb3f 	bl	80103e0 <st_dword>
			fs->wflag = 1;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	2201      	movs	r2, #1
 8010d66:	70da      	strb	r2, [r3, #3]
			break;
 8010d68:	e006      	b.n	8010d78 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d6a:	bf00      	nop
 8010d6c:	e004      	b.n	8010d78 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d6e:	bf00      	nop
 8010d70:	e002      	b.n	8010d78 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d72:	bf00      	nop
 8010d74:	e000      	b.n	8010d78 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8010d76:	bf00      	nop
		}
	}
	return res;
 8010d78:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	3724      	adds	r7, #36	; 0x24
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd90      	pop	{r4, r7, pc}

08010d82 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010d82:	b580      	push	{r7, lr}
 8010d84:	b088      	sub	sp, #32
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	60f8      	str	r0, [r7, #12]
 8010d8a:	60b9      	str	r1, [r7, #8]
 8010d8c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d904      	bls.n	8010da8 <remove_chain+0x26>
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	699b      	ldr	r3, [r3, #24]
 8010da2:	68ba      	ldr	r2, [r7, #8]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d301      	bcc.n	8010dac <remove_chain+0x2a>
 8010da8:	2302      	movs	r3, #2
 8010daa:	e04b      	b.n	8010e44 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00c      	beq.n	8010dcc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010db2:	f04f 32ff 	mov.w	r2, #4294967295
 8010db6:	6879      	ldr	r1, [r7, #4]
 8010db8:	69b8      	ldr	r0, [r7, #24]
 8010dba:	f7ff fefb 	bl	8010bb4 <put_fat>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010dc2:	7ffb      	ldrb	r3, [r7, #31]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d001      	beq.n	8010dcc <remove_chain+0x4a>
 8010dc8:	7ffb      	ldrb	r3, [r7, #31]
 8010dca:	e03b      	b.n	8010e44 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010dcc:	68b9      	ldr	r1, [r7, #8]
 8010dce:	68f8      	ldr	r0, [r7, #12]
 8010dd0:	f7ff fe4b 	bl	8010a6a <get_fat>
 8010dd4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d031      	beq.n	8010e40 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d101      	bne.n	8010de6 <remove_chain+0x64>
 8010de2:	2302      	movs	r3, #2
 8010de4:	e02e      	b.n	8010e44 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dec:	d101      	bne.n	8010df2 <remove_chain+0x70>
 8010dee:	2301      	movs	r3, #1
 8010df0:	e028      	b.n	8010e44 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010df2:	2200      	movs	r2, #0
 8010df4:	68b9      	ldr	r1, [r7, #8]
 8010df6:	69b8      	ldr	r0, [r7, #24]
 8010df8:	f7ff fedc 	bl	8010bb4 <put_fat>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010e00:	7ffb      	ldrb	r3, [r7, #31]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d001      	beq.n	8010e0a <remove_chain+0x88>
 8010e06:	7ffb      	ldrb	r3, [r7, #31]
 8010e08:	e01c      	b.n	8010e44 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010e0a:	69bb      	ldr	r3, [r7, #24]
 8010e0c:	695a      	ldr	r2, [r3, #20]
 8010e0e:	69bb      	ldr	r3, [r7, #24]
 8010e10:	699b      	ldr	r3, [r3, #24]
 8010e12:	3b02      	subs	r3, #2
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d20b      	bcs.n	8010e30 <remove_chain+0xae>
			fs->free_clst++;
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	695b      	ldr	r3, [r3, #20]
 8010e1c:	1c5a      	adds	r2, r3, #1
 8010e1e:	69bb      	ldr	r3, [r7, #24]
 8010e20:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	791b      	ldrb	r3, [r3, #4]
 8010e26:	f043 0301 	orr.w	r3, r3, #1
 8010e2a:	b2da      	uxtb	r2, r3
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	699b      	ldr	r3, [r3, #24]
 8010e38:	68ba      	ldr	r2, [r7, #8]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d3c6      	bcc.n	8010dcc <remove_chain+0x4a>
 8010e3e:	e000      	b.n	8010e42 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010e40:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010e5c:	683b      	ldr	r3, [r7, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10d      	bne.n	8010e7e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010e68:	69bb      	ldr	r3, [r7, #24]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d004      	beq.n	8010e78 <create_chain+0x2c>
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	699b      	ldr	r3, [r3, #24]
 8010e72:	69ba      	ldr	r2, [r7, #24]
 8010e74:	429a      	cmp	r2, r3
 8010e76:	d31b      	bcc.n	8010eb0 <create_chain+0x64>
 8010e78:	2301      	movs	r3, #1
 8010e7a:	61bb      	str	r3, [r7, #24]
 8010e7c:	e018      	b.n	8010eb0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7ff fdf2 	bl	8010a6a <get_fat>
 8010e86:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	2b01      	cmp	r3, #1
 8010e8c:	d801      	bhi.n	8010e92 <create_chain+0x46>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e070      	b.n	8010f74 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e98:	d101      	bne.n	8010e9e <create_chain+0x52>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	e06a      	b.n	8010f74 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	699b      	ldr	r3, [r3, #24]
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	429a      	cmp	r2, r3
 8010ea6:	d201      	bcs.n	8010eac <create_chain+0x60>
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	e063      	b.n	8010f74 <create_chain+0x128>
		scl = clst;
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010eb0:	69bb      	ldr	r3, [r7, #24]
 8010eb2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010eba:	693b      	ldr	r3, [r7, #16]
 8010ebc:	699b      	ldr	r3, [r3, #24]
 8010ebe:	69fa      	ldr	r2, [r7, #28]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d307      	bcc.n	8010ed4 <create_chain+0x88>
				ncl = 2;
 8010ec4:	2302      	movs	r3, #2
 8010ec6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010ec8:	69fa      	ldr	r2, [r7, #28]
 8010eca:	69bb      	ldr	r3, [r7, #24]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d901      	bls.n	8010ed4 <create_chain+0x88>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e04f      	b.n	8010f74 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010ed4:	69f9      	ldr	r1, [r7, #28]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	f7ff fdc7 	bl	8010a6a <get_fat>
 8010edc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d00e      	beq.n	8010f02 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d003      	beq.n	8010ef2 <create_chain+0xa6>
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ef0:	d101      	bne.n	8010ef6 <create_chain+0xaa>
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	e03e      	b.n	8010f74 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010ef6:	69fa      	ldr	r2, [r7, #28]
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d1da      	bne.n	8010eb4 <create_chain+0x68>
 8010efe:	2300      	movs	r3, #0
 8010f00:	e038      	b.n	8010f74 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010f02:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010f04:	f04f 32ff 	mov.w	r2, #4294967295
 8010f08:	69f9      	ldr	r1, [r7, #28]
 8010f0a:	6938      	ldr	r0, [r7, #16]
 8010f0c:	f7ff fe52 	bl	8010bb4 <put_fat>
 8010f10:	4603      	mov	r3, r0
 8010f12:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010f14:	7dfb      	ldrb	r3, [r7, #23]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d109      	bne.n	8010f2e <create_chain+0xe2>
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d006      	beq.n	8010f2e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010f20:	69fa      	ldr	r2, [r7, #28]
 8010f22:	6839      	ldr	r1, [r7, #0]
 8010f24:	6938      	ldr	r0, [r7, #16]
 8010f26:	f7ff fe45 	bl	8010bb4 <put_fat>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010f2e:	7dfb      	ldrb	r3, [r7, #23]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d116      	bne.n	8010f62 <create_chain+0x116>
		fs->last_clst = ncl;
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	69fa      	ldr	r2, [r7, #28]
 8010f38:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	695a      	ldr	r2, [r3, #20]
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	699b      	ldr	r3, [r3, #24]
 8010f42:	3b02      	subs	r3, #2
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d804      	bhi.n	8010f52 <create_chain+0x106>
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	1e5a      	subs	r2, r3, #1
 8010f4e:	693b      	ldr	r3, [r7, #16]
 8010f50:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8010f52:	693b      	ldr	r3, [r7, #16]
 8010f54:	791b      	ldrb	r3, [r3, #4]
 8010f56:	f043 0301 	orr.w	r3, r3, #1
 8010f5a:	b2da      	uxtb	r2, r3
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	711a      	strb	r2, [r3, #4]
 8010f60:	e007      	b.n	8010f72 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010f62:	7dfb      	ldrb	r3, [r7, #23]
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d102      	bne.n	8010f6e <create_chain+0x122>
 8010f68:	f04f 33ff 	mov.w	r3, #4294967295
 8010f6c:	e000      	b.n	8010f70 <create_chain+0x124>
 8010f6e:	2301      	movs	r3, #1
 8010f70:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010f72:	69fb      	ldr	r3, [r7, #28]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3720      	adds	r7, #32
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	3304      	adds	r3, #4
 8010f92:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	0a5b      	lsrs	r3, r3, #9
 8010f98:	68fa      	ldr	r2, [r7, #12]
 8010f9a:	8952      	ldrh	r2, [r2, #10]
 8010f9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fa0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	1d1a      	adds	r2, r3, #4
 8010fa6:	613a      	str	r2, [r7, #16]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d101      	bne.n	8010fb6 <clmt_clust+0x3a>
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	e010      	b.n	8010fd8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d307      	bcc.n	8010fce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010fbe:	697a      	ldr	r2, [r7, #20]
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	693b      	ldr	r3, [r7, #16]
 8010fc8:	3304      	adds	r3, #4
 8010fca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010fcc:	e7e9      	b.n	8010fa2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010fce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	4413      	add	r3, r2
}
 8010fd8:	4618      	mov	r0, r3
 8010fda:	371c      	adds	r7, #28
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010ffa:	d204      	bcs.n	8011006 <dir_sdi+0x22>
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	f003 031f 	and.w	r3, r3, #31
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <dir_sdi+0x26>
		return FR_INT_ERR;
 8011006:	2302      	movs	r3, #2
 8011008:	e063      	b.n	80110d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	683a      	ldr	r2, [r7, #0]
 801100e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011016:	697b      	ldr	r3, [r7, #20]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <dir_sdi+0x46>
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	2b02      	cmp	r3, #2
 8011022:	d902      	bls.n	801102a <dir_sdi+0x46>
		clst = fs->dirbase;
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011028:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10c      	bne.n	801104a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	095b      	lsrs	r3, r3, #5
 8011034:	693a      	ldr	r2, [r7, #16]
 8011036:	8912      	ldrh	r2, [r2, #8]
 8011038:	4293      	cmp	r3, r2
 801103a:	d301      	bcc.n	8011040 <dir_sdi+0x5c>
 801103c:	2302      	movs	r3, #2
 801103e:	e048      	b.n	80110d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	61da      	str	r2, [r3, #28]
 8011048:	e029      	b.n	801109e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	895b      	ldrh	r3, [r3, #10]
 801104e:	025b      	lsls	r3, r3, #9
 8011050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011052:	e019      	b.n	8011088 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6979      	ldr	r1, [r7, #20]
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fd06 	bl	8010a6a <get_fat>
 801105e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011066:	d101      	bne.n	801106c <dir_sdi+0x88>
 8011068:	2301      	movs	r3, #1
 801106a:	e032      	b.n	80110d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	2b01      	cmp	r3, #1
 8011070:	d904      	bls.n	801107c <dir_sdi+0x98>
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	699b      	ldr	r3, [r3, #24]
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	429a      	cmp	r2, r3
 801107a:	d301      	bcc.n	8011080 <dir_sdi+0x9c>
 801107c:	2302      	movs	r3, #2
 801107e:	e028      	b.n	80110d2 <dir_sdi+0xee>
			ofs -= csz;
 8011080:	683a      	ldr	r2, [r7, #0]
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011088:	683a      	ldr	r2, [r7, #0]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	429a      	cmp	r2, r3
 801108e:	d2e1      	bcs.n	8011054 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011090:	6979      	ldr	r1, [r7, #20]
 8011092:	6938      	ldr	r0, [r7, #16]
 8011094:	f7ff fcca 	bl	8010a2c <clust2sect>
 8011098:	4602      	mov	r2, r0
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	697a      	ldr	r2, [r7, #20]
 80110a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	69db      	ldr	r3, [r3, #28]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d101      	bne.n	80110b0 <dir_sdi+0xcc>
 80110ac:	2302      	movs	r3, #2
 80110ae:	e010      	b.n	80110d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	69da      	ldr	r2, [r3, #28]
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	0a5b      	lsrs	r3, r3, #9
 80110b8:	441a      	add	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110ca:	441a      	add	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3718      	adds	r7, #24
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}

080110da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80110da:	b580      	push	{r7, lr}
 80110dc:	b086      	sub	sp, #24
 80110de:	af00      	add	r7, sp, #0
 80110e0:	6078      	str	r0, [r7, #4]
 80110e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	695b      	ldr	r3, [r3, #20]
 80110ee:	3320      	adds	r3, #32
 80110f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	69db      	ldr	r3, [r3, #28]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d003      	beq.n	8011102 <dir_next+0x28>
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011100:	d301      	bcc.n	8011106 <dir_next+0x2c>
 8011102:	2304      	movs	r3, #4
 8011104:	e0aa      	b.n	801125c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801110c:	2b00      	cmp	r3, #0
 801110e:	f040 8098 	bne.w	8011242 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	69db      	ldr	r3, [r3, #28]
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	699b      	ldr	r3, [r3, #24]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d10b      	bne.n	801113c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011124:	68bb      	ldr	r3, [r7, #8]
 8011126:	095b      	lsrs	r3, r3, #5
 8011128:	68fa      	ldr	r2, [r7, #12]
 801112a:	8912      	ldrh	r2, [r2, #8]
 801112c:	4293      	cmp	r3, r2
 801112e:	f0c0 8088 	bcc.w	8011242 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	61da      	str	r2, [r3, #28]
 8011138:	2304      	movs	r3, #4
 801113a:	e08f      	b.n	801125c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	0a5b      	lsrs	r3, r3, #9
 8011140:	68fa      	ldr	r2, [r7, #12]
 8011142:	8952      	ldrh	r2, [r2, #10]
 8011144:	3a01      	subs	r2, #1
 8011146:	4013      	ands	r3, r2
 8011148:	2b00      	cmp	r3, #0
 801114a:	d17a      	bne.n	8011242 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801114c:	687a      	ldr	r2, [r7, #4]
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	699b      	ldr	r3, [r3, #24]
 8011152:	4619      	mov	r1, r3
 8011154:	4610      	mov	r0, r2
 8011156:	f7ff fc88 	bl	8010a6a <get_fat>
 801115a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801115c:	697b      	ldr	r3, [r7, #20]
 801115e:	2b01      	cmp	r3, #1
 8011160:	d801      	bhi.n	8011166 <dir_next+0x8c>
 8011162:	2302      	movs	r3, #2
 8011164:	e07a      	b.n	801125c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801116c:	d101      	bne.n	8011172 <dir_next+0x98>
 801116e:	2301      	movs	r3, #1
 8011170:	e074      	b.n	801125c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	699b      	ldr	r3, [r3, #24]
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	429a      	cmp	r2, r3
 801117a:	d358      	bcc.n	801122e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d104      	bne.n	801118c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	61da      	str	r2, [r3, #28]
 8011188:	2304      	movs	r3, #4
 801118a:	e067      	b.n	801125c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	4619      	mov	r1, r3
 8011194:	4610      	mov	r0, r2
 8011196:	f7ff fe59 	bl	8010e4c <create_chain>
 801119a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d101      	bne.n	80111a6 <dir_next+0xcc>
 80111a2:	2307      	movs	r3, #7
 80111a4:	e05a      	b.n	801125c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d101      	bne.n	80111b0 <dir_next+0xd6>
 80111ac:	2302      	movs	r3, #2
 80111ae:	e055      	b.n	801125c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b6:	d101      	bne.n	80111bc <dir_next+0xe2>
 80111b8:	2301      	movs	r3, #1
 80111ba:	e04f      	b.n	801125c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80111bc:	68f8      	ldr	r0, [r7, #12]
 80111be:	f7ff fb55 	bl	801086c <sync_window>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d001      	beq.n	80111cc <dir_next+0xf2>
 80111c8:	2301      	movs	r3, #1
 80111ca:	e047      	b.n	801125c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	3334      	adds	r3, #52	; 0x34
 80111d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80111d4:	2100      	movs	r1, #0
 80111d6:	4618      	mov	r0, r3
 80111d8:	f7ff f94f 	bl	801047a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80111dc:	2300      	movs	r3, #0
 80111de:	613b      	str	r3, [r7, #16]
 80111e0:	6979      	ldr	r1, [r7, #20]
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f7ff fc22 	bl	8010a2c <clust2sect>
 80111e8:	4602      	mov	r2, r0
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	631a      	str	r2, [r3, #48]	; 0x30
 80111ee:	e012      	b.n	8011216 <dir_next+0x13c>
						fs->wflag = 1;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	2201      	movs	r2, #1
 80111f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f7ff fb38 	bl	801086c <sync_window>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <dir_next+0x12c>
 8011202:	2301      	movs	r3, #1
 8011204:	e02a      	b.n	801125c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	3301      	adds	r3, #1
 801120a:	613b      	str	r3, [r7, #16]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011210:	1c5a      	adds	r2, r3, #1
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	631a      	str	r2, [r3, #48]	; 0x30
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	895b      	ldrh	r3, [r3, #10]
 801121a:	461a      	mov	r2, r3
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	4293      	cmp	r3, r2
 8011220:	d3e6      	bcc.n	80111f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	1ad2      	subs	r2, r2, r3
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	697a      	ldr	r2, [r7, #20]
 8011232:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011234:	6979      	ldr	r1, [r7, #20]
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f7ff fbf8 	bl	8010a2c <clust2sect>
 801123c:	4602      	mov	r2, r0
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	68ba      	ldr	r2, [r7, #8]
 8011246:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011254:	441a      	add	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801125a:	2300      	movs	r3, #0
}
 801125c:	4618      	mov	r0, r3
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b086      	sub	sp, #24
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011274:	2100      	movs	r1, #0
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff feb4 	bl	8010fe4 <dir_sdi>
 801127c:	4603      	mov	r3, r0
 801127e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011280:	7dfb      	ldrb	r3, [r7, #23]
 8011282:	2b00      	cmp	r3, #0
 8011284:	d12b      	bne.n	80112de <dir_alloc+0x7a>
		n = 0;
 8011286:	2300      	movs	r3, #0
 8011288:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	69db      	ldr	r3, [r3, #28]
 801128e:	4619      	mov	r1, r3
 8011290:	68f8      	ldr	r0, [r7, #12]
 8011292:	f7ff fb2f 	bl	80108f4 <move_window>
 8011296:	4603      	mov	r3, r0
 8011298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801129a:	7dfb      	ldrb	r3, [r7, #23]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d11d      	bne.n	80112dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6a1b      	ldr	r3, [r3, #32]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	2be5      	cmp	r3, #229	; 0xe5
 80112a8:	d004      	beq.n	80112b4 <dir_alloc+0x50>
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6a1b      	ldr	r3, [r3, #32]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d107      	bne.n	80112c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	3301      	adds	r3, #1
 80112b8:	613b      	str	r3, [r7, #16]
 80112ba:	693a      	ldr	r2, [r7, #16]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d102      	bne.n	80112c8 <dir_alloc+0x64>
 80112c2:	e00c      	b.n	80112de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80112c4:	2300      	movs	r3, #0
 80112c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80112c8:	2101      	movs	r1, #1
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7ff ff05 	bl	80110da <dir_next>
 80112d0:	4603      	mov	r3, r0
 80112d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80112d4:	7dfb      	ldrb	r3, [r7, #23]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d0d7      	beq.n	801128a <dir_alloc+0x26>
 80112da:	e000      	b.n	80112de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80112dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	2b04      	cmp	r3, #4
 80112e2:	d101      	bne.n	80112e8 <dir_alloc+0x84>
 80112e4:	2307      	movs	r3, #7
 80112e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80112e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3718      	adds	r7, #24
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	331a      	adds	r3, #26
 8011300:	4618      	mov	r0, r3
 8011302:	f7ff f817 	bl	8010334 <ld_word>
 8011306:	4603      	mov	r3, r0
 8011308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	781b      	ldrb	r3, [r3, #0]
 801130e:	2b03      	cmp	r3, #3
 8011310:	d109      	bne.n	8011326 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	3314      	adds	r3, #20
 8011316:	4618      	mov	r0, r3
 8011318:	f7ff f80c 	bl	8010334 <ld_word>
 801131c:	4603      	mov	r3, r0
 801131e:	041b      	lsls	r3, r3, #16
 8011320:	68fa      	ldr	r2, [r7, #12]
 8011322:	4313      	orrs	r3, r2
 8011324:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011326:	68fb      	ldr	r3, [r7, #12]
}
 8011328:	4618      	mov	r0, r3
 801132a:	3710      	adds	r7, #16
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	60b9      	str	r1, [r7, #8]
 801133a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	331a      	adds	r3, #26
 8011340:	687a      	ldr	r2, [r7, #4]
 8011342:	b292      	uxth	r2, r2
 8011344:	4611      	mov	r1, r2
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff f82f 	bl	80103aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b03      	cmp	r3, #3
 8011352:	d109      	bne.n	8011368 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f103 0214 	add.w	r2, r3, #20
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	0c1b      	lsrs	r3, r3, #16
 801135e:	b29b      	uxth	r3, r3
 8011360:	4619      	mov	r1, r3
 8011362:	4610      	mov	r0, r2
 8011364:	f7ff f821 	bl	80103aa <st_word>
	}
}
 8011368:	bf00      	nop
 801136a:	3710      	adds	r7, #16
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b086      	sub	sp, #24
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801137a:	2304      	movs	r3, #4
 801137c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011384:	e03c      	b.n	8011400 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	69db      	ldr	r3, [r3, #28]
 801138a:	4619      	mov	r1, r3
 801138c:	6938      	ldr	r0, [r7, #16]
 801138e:	f7ff fab1 	bl	80108f4 <move_window>
 8011392:	4603      	mov	r3, r0
 8011394:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011396:	7dfb      	ldrb	r3, [r7, #23]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d136      	bne.n	801140a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6a1b      	ldr	r3, [r3, #32]
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d102      	bne.n	80113b0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80113aa:	2304      	movs	r3, #4
 80113ac:	75fb      	strb	r3, [r7, #23]
 80113ae:	e031      	b.n	8011414 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a1b      	ldr	r3, [r3, #32]
 80113b4:	330b      	adds	r3, #11
 80113b6:	781b      	ldrb	r3, [r3, #0]
 80113b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113bc:	73bb      	strb	r3, [r7, #14]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	7bba      	ldrb	r2, [r7, #14]
 80113c2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80113c4:	7bfb      	ldrb	r3, [r7, #15]
 80113c6:	2be5      	cmp	r3, #229	; 0xe5
 80113c8:	d011      	beq.n	80113ee <dir_read+0x7e>
 80113ca:	7bfb      	ldrb	r3, [r7, #15]
 80113cc:	2b2e      	cmp	r3, #46	; 0x2e
 80113ce:	d00e      	beq.n	80113ee <dir_read+0x7e>
 80113d0:	7bbb      	ldrb	r3, [r7, #14]
 80113d2:	2b0f      	cmp	r3, #15
 80113d4:	d00b      	beq.n	80113ee <dir_read+0x7e>
 80113d6:	7bbb      	ldrb	r3, [r7, #14]
 80113d8:	f023 0320 	bic.w	r3, r3, #32
 80113dc:	2b08      	cmp	r3, #8
 80113de:	bf0c      	ite	eq
 80113e0:	2301      	moveq	r3, #1
 80113e2:	2300      	movne	r3, #0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	461a      	mov	r2, r3
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	4293      	cmp	r3, r2
 80113ec:	d00f      	beq.n	801140e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80113ee:	2100      	movs	r1, #0
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f7ff fe72 	bl	80110da <dir_next>
 80113f6:	4603      	mov	r3, r0
 80113f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80113fa:	7dfb      	ldrb	r3, [r7, #23]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d108      	bne.n	8011412 <dir_read+0xa2>
	while (dp->sect) {
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	69db      	ldr	r3, [r3, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d1be      	bne.n	8011386 <dir_read+0x16>
 8011408:	e004      	b.n	8011414 <dir_read+0xa4>
		if (res != FR_OK) break;
 801140a:	bf00      	nop
 801140c:	e002      	b.n	8011414 <dir_read+0xa4>
				break;
 801140e:	bf00      	nop
 8011410:	e000      	b.n	8011414 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011412:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011414:	7dfb      	ldrb	r3, [r7, #23]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d002      	beq.n	8011420 <dir_read+0xb0>
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2200      	movs	r2, #0
 801141e:	61da      	str	r2, [r3, #28]
	return res;
 8011420:	7dfb      	ldrb	r3, [r7, #23]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3718      	adds	r7, #24
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b086      	sub	sp, #24
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011438:	2100      	movs	r1, #0
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7ff fdd2 	bl	8010fe4 <dir_sdi>
 8011440:	4603      	mov	r3, r0
 8011442:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011444:	7dfb      	ldrb	r3, [r7, #23]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d001      	beq.n	801144e <dir_find+0x24>
 801144a:	7dfb      	ldrb	r3, [r7, #23]
 801144c:	e03e      	b.n	80114cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	69db      	ldr	r3, [r3, #28]
 8011452:	4619      	mov	r1, r3
 8011454:	6938      	ldr	r0, [r7, #16]
 8011456:	f7ff fa4d 	bl	80108f4 <move_window>
 801145a:	4603      	mov	r3, r0
 801145c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801145e:	7dfb      	ldrb	r3, [r7, #23]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d12f      	bne.n	80114c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6a1b      	ldr	r3, [r3, #32]
 8011468:	781b      	ldrb	r3, [r3, #0]
 801146a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801146c:	7bfb      	ldrb	r3, [r7, #15]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d102      	bne.n	8011478 <dir_find+0x4e>
 8011472:	2304      	movs	r3, #4
 8011474:	75fb      	strb	r3, [r7, #23]
 8011476:	e028      	b.n	80114ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a1b      	ldr	r3, [r3, #32]
 801147c:	330b      	adds	r3, #11
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011484:	b2da      	uxtb	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	6a1b      	ldr	r3, [r3, #32]
 801148e:	330b      	adds	r3, #11
 8011490:	781b      	ldrb	r3, [r3, #0]
 8011492:	f003 0308 	and.w	r3, r3, #8
 8011496:	2b00      	cmp	r3, #0
 8011498:	d10a      	bne.n	80114b0 <dir_find+0x86>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	6a18      	ldr	r0, [r3, #32]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	3324      	adds	r3, #36	; 0x24
 80114a2:	220b      	movs	r2, #11
 80114a4:	4619      	mov	r1, r3
 80114a6:	f7ff f802 	bl	80104ae <mem_cmp>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d00b      	beq.n	80114c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80114b0:	2100      	movs	r1, #0
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f7ff fe11 	bl	80110da <dir_next>
 80114b8:	4603      	mov	r3, r0
 80114ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80114bc:	7dfb      	ldrb	r3, [r7, #23]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d0c5      	beq.n	801144e <dir_find+0x24>
 80114c2:	e002      	b.n	80114ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80114c4:	bf00      	nop
 80114c6:	e000      	b.n	80114ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80114c8:	bf00      	nop

	return res;
 80114ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3718      	adds	r7, #24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80114e2:	2101      	movs	r1, #1
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7ff febd 	bl	8011264 <dir_alloc>
 80114ea:	4603      	mov	r3, r0
 80114ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80114ee:	7bfb      	ldrb	r3, [r7, #15]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d11c      	bne.n	801152e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	69db      	ldr	r3, [r3, #28]
 80114f8:	4619      	mov	r1, r3
 80114fa:	68b8      	ldr	r0, [r7, #8]
 80114fc:	f7ff f9fa 	bl	80108f4 <move_window>
 8011500:	4603      	mov	r3, r0
 8011502:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011504:	7bfb      	ldrb	r3, [r7, #15]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d111      	bne.n	801152e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6a1b      	ldr	r3, [r3, #32]
 801150e:	2220      	movs	r2, #32
 8011510:	2100      	movs	r1, #0
 8011512:	4618      	mov	r0, r3
 8011514:	f7fe ffb1 	bl	801047a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6a18      	ldr	r0, [r3, #32]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	3324      	adds	r3, #36	; 0x24
 8011520:	220b      	movs	r2, #11
 8011522:	4619      	mov	r1, r3
 8011524:	f7fe ff88 	bl	8010438 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011528:	68bb      	ldr	r3, [r7, #8]
 801152a:	2201      	movs	r2, #1
 801152c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801152e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011530:	4618      	mov	r0, r3
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	2200      	movs	r2, #0
 8011546:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	69db      	ldr	r3, [r3, #28]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d04e      	beq.n	80115ee <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011550:	2300      	movs	r3, #0
 8011552:	613b      	str	r3, [r7, #16]
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011558:	e021      	b.n	801159e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6a1a      	ldr	r2, [r3, #32]
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	1c59      	adds	r1, r3, #1
 8011562:	6179      	str	r1, [r7, #20]
 8011564:	4413      	add	r3, r2
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801156a:	7bfb      	ldrb	r3, [r7, #15]
 801156c:	2b20      	cmp	r3, #32
 801156e:	d100      	bne.n	8011572 <get_fileinfo+0x3a>
 8011570:	e015      	b.n	801159e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011572:	7bfb      	ldrb	r3, [r7, #15]
 8011574:	2b05      	cmp	r3, #5
 8011576:	d101      	bne.n	801157c <get_fileinfo+0x44>
 8011578:	23e5      	movs	r3, #229	; 0xe5
 801157a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	2b09      	cmp	r3, #9
 8011580:	d106      	bne.n	8011590 <get_fileinfo+0x58>
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	1c5a      	adds	r2, r3, #1
 8011586:	613a      	str	r2, [r7, #16]
 8011588:	683a      	ldr	r2, [r7, #0]
 801158a:	4413      	add	r3, r2
 801158c:	222e      	movs	r2, #46	; 0x2e
 801158e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	613a      	str	r2, [r7, #16]
 8011596:	683a      	ldr	r2, [r7, #0]
 8011598:	4413      	add	r3, r2
 801159a:	7bfa      	ldrb	r2, [r7, #15]
 801159c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	2b0a      	cmp	r3, #10
 80115a2:	d9da      	bls.n	801155a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80115a4:	683a      	ldr	r2, [r7, #0]
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	4413      	add	r3, r2
 80115aa:	3309      	adds	r3, #9
 80115ac:	2200      	movs	r2, #0
 80115ae:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a1b      	ldr	r3, [r3, #32]
 80115b4:	7ada      	ldrb	r2, [r3, #11]
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	6a1b      	ldr	r3, [r3, #32]
 80115be:	331c      	adds	r3, #28
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7fe fecf 	bl	8010364 <ld_dword>
 80115c6:	4602      	mov	r2, r0
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a1b      	ldr	r3, [r3, #32]
 80115d0:	3316      	adds	r3, #22
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7fe fec6 	bl	8010364 <ld_dword>
 80115d8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	b29a      	uxth	r2, r3
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	80da      	strh	r2, [r3, #6]
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	0c1b      	lsrs	r3, r3, #16
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	809a      	strh	r2, [r3, #4]
 80115ec:	e000      	b.n	80115f0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80115ee:	bf00      	nop
}
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}
	...

080115f8 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	1c59      	adds	r1, r3, #1
 8011606:	687a      	ldr	r2, [r7, #4]
 8011608:	6011      	str	r1, [r2, #0]
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801160e:	89fb      	ldrh	r3, [r7, #14]
 8011610:	2b60      	cmp	r3, #96	; 0x60
 8011612:	d905      	bls.n	8011620 <get_achar+0x28>
 8011614:	89fb      	ldrh	r3, [r7, #14]
 8011616:	2b7a      	cmp	r3, #122	; 0x7a
 8011618:	d802      	bhi.n	8011620 <get_achar+0x28>
 801161a:	89fb      	ldrh	r3, [r7, #14]
 801161c:	3b20      	subs	r3, #32
 801161e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011620:	89fb      	ldrh	r3, [r7, #14]
 8011622:	2b7f      	cmp	r3, #127	; 0x7f
 8011624:	d904      	bls.n	8011630 <get_achar+0x38>
 8011626:	89fb      	ldrh	r3, [r7, #14]
 8011628:	3b80      	subs	r3, #128	; 0x80
 801162a:	4a05      	ldr	r2, [pc, #20]	; (8011640 <get_achar+0x48>)
 801162c:	5cd3      	ldrb	r3, [r2, r3]
 801162e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8011630:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8011632:	4618      	mov	r0, r3
 8011634:	3714      	adds	r7, #20
 8011636:	46bd      	mov	sp, r7
 8011638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop
 8011640:	0801ac8c 	.word	0x0801ac8c

08011644 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b08a      	sub	sp, #40	; 0x28
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	60b9      	str	r1, [r7, #8]
 801164e:	607a      	str	r2, [r7, #4]
 8011650:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8011652:	e009      	b.n	8011668 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8011654:	f107 0308 	add.w	r3, r7, #8
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff ffcd 	bl	80115f8 <get_achar>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d101      	bne.n	8011668 <pattern_matching+0x24>
 8011664:	2300      	movs	r3, #0
 8011666:	e064      	b.n	8011732 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	1e5a      	subs	r2, r3, #1
 801166c:	607a      	str	r2, [r7, #4]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d1f0      	bne.n	8011654 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d104      	bne.n	8011684 <pattern_matching+0x40>
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d001      	beq.n	8011684 <pattern_matching+0x40>
 8011680:	2301      	movs	r3, #1
 8011682:	e056      	b.n	8011732 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	617b      	str	r3, [r7, #20]
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	2b3f      	cmp	r3, #63	; 0x3f
 8011692:	d003      	beq.n	801169c <pattern_matching+0x58>
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	781b      	ldrb	r3, [r3, #0]
 8011698:	2b2a      	cmp	r3, #42	; 0x2a
 801169a:	d126      	bne.n	80116ea <pattern_matching+0xa6>
				nm = nx = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	61fb      	str	r3, [r7, #28]
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	617a      	str	r2, [r7, #20]
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	2b3f      	cmp	r3, #63	; 0x3f
 80116ae:	d103      	bne.n	80116b8 <pattern_matching+0x74>
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	3301      	adds	r3, #1
 80116b4:	623b      	str	r3, [r7, #32]
 80116b6:	e001      	b.n	80116bc <pattern_matching+0x78>
 80116b8:	2301      	movs	r3, #1
 80116ba:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	781b      	ldrb	r3, [r3, #0]
 80116c0:	2b3f      	cmp	r3, #63	; 0x3f
 80116c2:	d0ef      	beq.n	80116a4 <pattern_matching+0x60>
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	2b2a      	cmp	r3, #42	; 0x2a
 80116ca:	d0eb      	beq.n	80116a4 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 80116cc:	6978      	ldr	r0, [r7, #20]
 80116ce:	6939      	ldr	r1, [r7, #16]
 80116d0:	69fb      	ldr	r3, [r7, #28]
 80116d2:	6a3a      	ldr	r2, [r7, #32]
 80116d4:	f7ff ffb6 	bl	8011644 <pattern_matching>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d001      	beq.n	80116e2 <pattern_matching+0x9e>
 80116de:	2301      	movs	r3, #1
 80116e0:	e027      	b.n	8011732 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 80116e2:	693b      	ldr	r3, [r7, #16]
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80116e8:	e017      	b.n	801171a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 80116ea:	f107 0314 	add.w	r3, r7, #20
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7ff ff82 	bl	80115f8 <get_achar>
 80116f4:	4603      	mov	r3, r0
 80116f6:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 80116f8:	f107 0310 	add.w	r3, r7, #16
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7ff ff7b 	bl	80115f8 <get_achar>
 8011702:	4603      	mov	r3, r0
 8011704:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8011706:	8b7a      	ldrh	r2, [r7, #26]
 8011708:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801170a:	429a      	cmp	r2, r3
 801170c:	d104      	bne.n	8011718 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801170e:	8b7b      	ldrh	r3, [r7, #26]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d1bb      	bne.n	801168c <pattern_matching+0x48>
 8011714:	2301      	movs	r3, #1
 8011716:	e00c      	b.n	8011732 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8011718:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801171a:	f107 0308 	add.w	r3, r7, #8
 801171e:	4618      	mov	r0, r3
 8011720:	f7ff ff6a 	bl	80115f8 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d002      	beq.n	8011730 <pattern_matching+0xec>
 801172a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1a9      	bne.n	8011684 <pattern_matching+0x40>

	return 0;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	3728      	adds	r7, #40	; 0x28
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
	...

0801173c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b088      	sub	sp, #32
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	60fb      	str	r3, [r7, #12]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	3324      	adds	r3, #36	; 0x24
 8011750:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011752:	220b      	movs	r2, #11
 8011754:	2120      	movs	r1, #32
 8011756:	68b8      	ldr	r0, [r7, #8]
 8011758:	f7fe fe8f 	bl	801047a <mem_set>
	si = i = 0; ni = 8;
 801175c:	2300      	movs	r3, #0
 801175e:	613b      	str	r3, [r7, #16]
 8011760:	693b      	ldr	r3, [r7, #16]
 8011762:	617b      	str	r3, [r7, #20]
 8011764:	2308      	movs	r3, #8
 8011766:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	617a      	str	r2, [r7, #20]
 801176e:	68fa      	ldr	r2, [r7, #12]
 8011770:	4413      	add	r3, r2
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011776:	7ffb      	ldrb	r3, [r7, #31]
 8011778:	2b20      	cmp	r3, #32
 801177a:	d94e      	bls.n	801181a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801177c:	7ffb      	ldrb	r3, [r7, #31]
 801177e:	2b2f      	cmp	r3, #47	; 0x2f
 8011780:	d006      	beq.n	8011790 <create_name+0x54>
 8011782:	7ffb      	ldrb	r3, [r7, #31]
 8011784:	2b5c      	cmp	r3, #92	; 0x5c
 8011786:	d110      	bne.n	80117aa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011788:	e002      	b.n	8011790 <create_name+0x54>
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	3301      	adds	r3, #1
 801178e:	617b      	str	r3, [r7, #20]
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	4413      	add	r3, r2
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	2b2f      	cmp	r3, #47	; 0x2f
 801179a:	d0f6      	beq.n	801178a <create_name+0x4e>
 801179c:	68fa      	ldr	r2, [r7, #12]
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	4413      	add	r3, r2
 80117a2:	781b      	ldrb	r3, [r3, #0]
 80117a4:	2b5c      	cmp	r3, #92	; 0x5c
 80117a6:	d0f0      	beq.n	801178a <create_name+0x4e>
			break;
 80117a8:	e038      	b.n	801181c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80117aa:	7ffb      	ldrb	r3, [r7, #31]
 80117ac:	2b2e      	cmp	r3, #46	; 0x2e
 80117ae:	d003      	beq.n	80117b8 <create_name+0x7c>
 80117b0:	693a      	ldr	r2, [r7, #16]
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d30c      	bcc.n	80117d2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	2b0b      	cmp	r3, #11
 80117bc:	d002      	beq.n	80117c4 <create_name+0x88>
 80117be:	7ffb      	ldrb	r3, [r7, #31]
 80117c0:	2b2e      	cmp	r3, #46	; 0x2e
 80117c2:	d001      	beq.n	80117c8 <create_name+0x8c>
 80117c4:	2306      	movs	r3, #6
 80117c6:	e044      	b.n	8011852 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80117c8:	2308      	movs	r3, #8
 80117ca:	613b      	str	r3, [r7, #16]
 80117cc:	230b      	movs	r3, #11
 80117ce:	61bb      	str	r3, [r7, #24]
			continue;
 80117d0:	e022      	b.n	8011818 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80117d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	da04      	bge.n	80117e4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80117da:	7ffb      	ldrb	r3, [r7, #31]
 80117dc:	3b80      	subs	r3, #128	; 0x80
 80117de:	4a1f      	ldr	r2, [pc, #124]	; (801185c <create_name+0x120>)
 80117e0:	5cd3      	ldrb	r3, [r2, r3]
 80117e2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80117e4:	7ffb      	ldrb	r3, [r7, #31]
 80117e6:	4619      	mov	r1, r3
 80117e8:	481d      	ldr	r0, [pc, #116]	; (8011860 <create_name+0x124>)
 80117ea:	f7fe fe87 	bl	80104fc <chk_chr>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <create_name+0xbc>
 80117f4:	2306      	movs	r3, #6
 80117f6:	e02c      	b.n	8011852 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80117f8:	7ffb      	ldrb	r3, [r7, #31]
 80117fa:	2b60      	cmp	r3, #96	; 0x60
 80117fc:	d905      	bls.n	801180a <create_name+0xce>
 80117fe:	7ffb      	ldrb	r3, [r7, #31]
 8011800:	2b7a      	cmp	r3, #122	; 0x7a
 8011802:	d802      	bhi.n	801180a <create_name+0xce>
 8011804:	7ffb      	ldrb	r3, [r7, #31]
 8011806:	3b20      	subs	r3, #32
 8011808:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	1c5a      	adds	r2, r3, #1
 801180e:	613a      	str	r2, [r7, #16]
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	4413      	add	r3, r2
 8011814:	7ffa      	ldrb	r2, [r7, #31]
 8011816:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011818:	e7a6      	b.n	8011768 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801181a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801181c:	68fa      	ldr	r2, [r7, #12]
 801181e:	697b      	ldr	r3, [r7, #20]
 8011820:	441a      	add	r2, r3
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011826:	693b      	ldr	r3, [r7, #16]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d101      	bne.n	8011830 <create_name+0xf4>
 801182c:	2306      	movs	r3, #6
 801182e:	e010      	b.n	8011852 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	2be5      	cmp	r3, #229	; 0xe5
 8011836:	d102      	bne.n	801183e <create_name+0x102>
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	2205      	movs	r2, #5
 801183c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801183e:	7ffb      	ldrb	r3, [r7, #31]
 8011840:	2b20      	cmp	r3, #32
 8011842:	d801      	bhi.n	8011848 <create_name+0x10c>
 8011844:	2204      	movs	r2, #4
 8011846:	e000      	b.n	801184a <create_name+0x10e>
 8011848:	2200      	movs	r2, #0
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	330b      	adds	r3, #11
 801184e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011850:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011852:	4618      	mov	r0, r3
 8011854:	3720      	adds	r7, #32
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	0801ac8c 	.word	0x0801ac8c
 8011860:	0801aa90 	.word	0x0801aa90

08011864 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b086      	sub	sp, #24
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
 801186c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011878:	e002      	b.n	8011880 <follow_path+0x1c>
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	3301      	adds	r3, #1
 801187e:	603b      	str	r3, [r7, #0]
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b2f      	cmp	r3, #47	; 0x2f
 8011886:	d0f8      	beq.n	801187a <follow_path+0x16>
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	781b      	ldrb	r3, [r3, #0]
 801188c:	2b5c      	cmp	r3, #92	; 0x5c
 801188e:	d0f4      	beq.n	801187a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011890:	693b      	ldr	r3, [r7, #16]
 8011892:	2200      	movs	r2, #0
 8011894:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	781b      	ldrb	r3, [r3, #0]
 801189a:	2b1f      	cmp	r3, #31
 801189c:	d80a      	bhi.n	80118b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	2280      	movs	r2, #128	; 0x80
 80118a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80118a6:	2100      	movs	r1, #0
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f7ff fb9b 	bl	8010fe4 <dir_sdi>
 80118ae:	4603      	mov	r3, r0
 80118b0:	75fb      	strb	r3, [r7, #23]
 80118b2:	e043      	b.n	801193c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80118b4:	463b      	mov	r3, r7
 80118b6:	4619      	mov	r1, r3
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7ff ff3f 	bl	801173c <create_name>
 80118be:	4603      	mov	r3, r0
 80118c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80118c2:	7dfb      	ldrb	r3, [r7, #23]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d134      	bne.n	8011932 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80118c8:	6878      	ldr	r0, [r7, #4]
 80118ca:	f7ff fdae 	bl	801142a <dir_find>
 80118ce:	4603      	mov	r3, r0
 80118d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80118d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00a      	beq.n	80118f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80118e0:	7dfb      	ldrb	r3, [r7, #23]
 80118e2:	2b04      	cmp	r3, #4
 80118e4:	d127      	bne.n	8011936 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80118e6:	7afb      	ldrb	r3, [r7, #11]
 80118e8:	f003 0304 	and.w	r3, r3, #4
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d122      	bne.n	8011936 <follow_path+0xd2>
 80118f0:	2305      	movs	r3, #5
 80118f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80118f4:	e01f      	b.n	8011936 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80118f6:	7afb      	ldrb	r3, [r7, #11]
 80118f8:	f003 0304 	and.w	r3, r3, #4
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11c      	bne.n	801193a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	799b      	ldrb	r3, [r3, #6]
 8011904:	f003 0310 	and.w	r3, r3, #16
 8011908:	2b00      	cmp	r3, #0
 801190a:	d102      	bne.n	8011912 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801190c:	2305      	movs	r3, #5
 801190e:	75fb      	strb	r3, [r7, #23]
 8011910:	e014      	b.n	801193c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011920:	4413      	add	r3, r2
 8011922:	4619      	mov	r1, r3
 8011924:	68f8      	ldr	r0, [r7, #12]
 8011926:	f7ff fce4 	bl	80112f2 <ld_clust>
 801192a:	4602      	mov	r2, r0
 801192c:	693b      	ldr	r3, [r7, #16]
 801192e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011930:	e7c0      	b.n	80118b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8011932:	bf00      	nop
 8011934:	e002      	b.n	801193c <follow_path+0xd8>
				break;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801193a:	bf00      	nop
			}
		}
	}

	return res;
 801193c:	7dfb      	ldrb	r3, [r7, #23]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3718      	adds	r7, #24
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011946:	b480      	push	{r7}
 8011948:	b087      	sub	sp, #28
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801194e:	f04f 33ff 	mov.w	r3, #4294967295
 8011952:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d031      	beq.n	80119c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	617b      	str	r3, [r7, #20]
 8011962:	e002      	b.n	801196a <get_ldnumber+0x24>
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	3301      	adds	r3, #1
 8011968:	617b      	str	r3, [r7, #20]
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	2b20      	cmp	r3, #32
 8011970:	d903      	bls.n	801197a <get_ldnumber+0x34>
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	781b      	ldrb	r3, [r3, #0]
 8011976:	2b3a      	cmp	r3, #58	; 0x3a
 8011978:	d1f4      	bne.n	8011964 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	781b      	ldrb	r3, [r3, #0]
 801197e:	2b3a      	cmp	r3, #58	; 0x3a
 8011980:	d11c      	bne.n	80119bc <get_ldnumber+0x76>
			tp = *path;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	1c5a      	adds	r2, r3, #1
 801198c:	60fa      	str	r2, [r7, #12]
 801198e:	781b      	ldrb	r3, [r3, #0]
 8011990:	3b30      	subs	r3, #48	; 0x30
 8011992:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	2b09      	cmp	r3, #9
 8011998:	d80e      	bhi.n	80119b8 <get_ldnumber+0x72>
 801199a:	68fa      	ldr	r2, [r7, #12]
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d10a      	bne.n	80119b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d107      	bne.n	80119b8 <get_ldnumber+0x72>
					vol = (int)i;
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	3301      	adds	r3, #1
 80119b0:	617b      	str	r3, [r7, #20]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	697a      	ldr	r2, [r7, #20]
 80119b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	e002      	b.n	80119c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80119bc:	2300      	movs	r3, #0
 80119be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80119c0:	693b      	ldr	r3, [r7, #16]
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	371c      	adds	r7, #28
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr
	...

080119d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2200      	movs	r2, #0
 80119de:	70da      	strb	r2, [r3, #3]
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f04f 32ff 	mov.w	r2, #4294967295
 80119e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80119e8:	6839      	ldr	r1, [r7, #0]
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7fe ff82 	bl	80108f4 <move_window>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d001      	beq.n	80119fa <check_fs+0x2a>
 80119f6:	2304      	movs	r3, #4
 80119f8:	e038      	b.n	8011a6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	3334      	adds	r3, #52	; 0x34
 80119fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7fe fc96 	bl	8010334 <ld_word>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	461a      	mov	r2, r3
 8011a0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d001      	beq.n	8011a18 <check_fs+0x48>
 8011a14:	2303      	movs	r3, #3
 8011a16:	e029      	b.n	8011a6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a1e:	2be9      	cmp	r3, #233	; 0xe9
 8011a20:	d009      	beq.n	8011a36 <check_fs+0x66>
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a28:	2beb      	cmp	r3, #235	; 0xeb
 8011a2a:	d11e      	bne.n	8011a6a <check_fs+0x9a>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8011a32:	2b90      	cmp	r3, #144	; 0x90
 8011a34:	d119      	bne.n	8011a6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	3334      	adds	r3, #52	; 0x34
 8011a3a:	3336      	adds	r3, #54	; 0x36
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7fe fc91 	bl	8010364 <ld_dword>
 8011a42:	4603      	mov	r3, r0
 8011a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011a48:	4a0a      	ldr	r2, [pc, #40]	; (8011a74 <check_fs+0xa4>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	d101      	bne.n	8011a52 <check_fs+0x82>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	e00c      	b.n	8011a6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	3334      	adds	r3, #52	; 0x34
 8011a56:	3352      	adds	r3, #82	; 0x52
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fe fc83 	bl	8010364 <ld_dword>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	4b05      	ldr	r3, [pc, #20]	; (8011a78 <check_fs+0xa8>)
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d101      	bne.n	8011a6a <check_fs+0x9a>
 8011a66:	2300      	movs	r3, #0
 8011a68:	e000      	b.n	8011a6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011a6a:	2302      	movs	r3, #2
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3708      	adds	r7, #8
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd80      	pop	{r7, pc}
 8011a74:	00544146 	.word	0x00544146
 8011a78:	33544146 	.word	0x33544146

08011a7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b096      	sub	sp, #88	; 0x58
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	4613      	mov	r3, r2
 8011a88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011a8a:	68bb      	ldr	r3, [r7, #8]
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7ff ff58 	bl	8011946 <get_ldnumber>
 8011a96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	da01      	bge.n	8011aa2 <find_volume+0x26>
 8011a9e:	230b      	movs	r3, #11
 8011aa0:	e236      	b.n	8011f10 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011aa2:	4aac      	ldr	r2, [pc, #688]	; (8011d54 <find_volume+0x2d8>)
 8011aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011aaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <find_volume+0x3a>
 8011ab2:	230c      	movs	r3, #12
 8011ab4:	e22c      	b.n	8011f10 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8011ab6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ab8:	f7fe fd3b 	bl	8010532 <lock_fs>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <find_volume+0x4a>
 8011ac2:	230f      	movs	r3, #15
 8011ac4:	e224      	b.n	8011f10 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011aca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011acc:	79fb      	ldrb	r3, [r7, #7]
 8011ace:	f023 0301 	bic.w	r3, r3, #1
 8011ad2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d01a      	beq.n	8011b12 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8011adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ade:	785b      	ldrb	r3, [r3, #1]
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7fe fb89 	bl	80101f8 <disk_status>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011af0:	f003 0301 	and.w	r3, r3, #1
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d10c      	bne.n	8011b12 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d007      	beq.n	8011b0e <find_volume+0x92>
 8011afe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b02:	f003 0304 	and.w	r3, r3, #4
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d001      	beq.n	8011b0e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8011b0a:	230a      	movs	r3, #10
 8011b0c:	e200      	b.n	8011f10 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 8011b0e:	2300      	movs	r3, #0
 8011b10:	e1fe      	b.n	8011f10 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b14:	2200      	movs	r2, #0
 8011b16:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b1a:	b2da      	uxtb	r2, r3
 8011b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b22:	785b      	ldrb	r3, [r3, #1]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7fe fb81 	bl	801022c <disk_initialize>
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011b30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b34:	f003 0301 	and.w	r3, r3, #1
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d001      	beq.n	8011b40 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011b3c:	2303      	movs	r3, #3
 8011b3e:	e1e7      	b.n	8011f10 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011b40:	79fb      	ldrb	r3, [r7, #7]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d007      	beq.n	8011b56 <find_volume+0xda>
 8011b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b4a:	f003 0304 	and.w	r3, r3, #4
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011b52:	230a      	movs	r3, #10
 8011b54:	e1dc      	b.n	8011f10 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011b56:	2300      	movs	r3, #0
 8011b58:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011b5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b5e:	f7ff ff37 	bl	80119d0 <check_fs>
 8011b62:	4603      	mov	r3, r0
 8011b64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d14b      	bne.n	8011c08 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b70:	2300      	movs	r3, #0
 8011b72:	643b      	str	r3, [r7, #64]	; 0x40
 8011b74:	e01f      	b.n	8011bb6 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b78:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b7e:	011b      	lsls	r3, r3, #4
 8011b80:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011b84:	4413      	add	r3, r2
 8011b86:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b8a:	3304      	adds	r3, #4
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d006      	beq.n	8011ba0 <find_volume+0x124>
 8011b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b94:	3308      	adds	r3, #8
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fe fbe4 	bl	8010364 <ld_dword>
 8011b9c:	4602      	mov	r2, r0
 8011b9e:	e000      	b.n	8011ba2 <find_volume+0x126>
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011baa:	440b      	add	r3, r1
 8011bac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8011bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bb8:	2b03      	cmp	r3, #3
 8011bba:	d9dc      	bls.n	8011b76 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d002      	beq.n	8011bcc <find_volume+0x150>
 8011bc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011bda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011bdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d005      	beq.n	8011bee <find_volume+0x172>
 8011be2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011be6:	f7ff fef3 	bl	80119d0 <check_fs>
 8011bea:	4603      	mov	r3, r0
 8011bec:	e000      	b.n	8011bf0 <find_volume+0x174>
 8011bee:	2303      	movs	r3, #3
 8011bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d905      	bls.n	8011c08 <find_volume+0x18c>
 8011bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bfe:	3301      	adds	r3, #1
 8011c00:	643b      	str	r3, [r7, #64]	; 0x40
 8011c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	d9e1      	bls.n	8011bcc <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c0c:	2b04      	cmp	r3, #4
 8011c0e:	d101      	bne.n	8011c14 <find_volume+0x198>
 8011c10:	2301      	movs	r3, #1
 8011c12:	e17d      	b.n	8011f10 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d901      	bls.n	8011c20 <find_volume+0x1a4>
 8011c1c:	230d      	movs	r3, #13
 8011c1e:	e177      	b.n	8011f10 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	3334      	adds	r3, #52	; 0x34
 8011c24:	330b      	adds	r3, #11
 8011c26:	4618      	mov	r0, r3
 8011c28:	f7fe fb84 	bl	8010334 <ld_word>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c32:	d001      	beq.n	8011c38 <find_volume+0x1bc>
 8011c34:	230d      	movs	r3, #13
 8011c36:	e16b      	b.n	8011f10 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	3334      	adds	r3, #52	; 0x34
 8011c3c:	3316      	adds	r3, #22
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fb78 	bl	8010334 <ld_word>
 8011c44:	4603      	mov	r3, r0
 8011c46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d106      	bne.n	8011c5c <find_volume+0x1e0>
 8011c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c50:	3334      	adds	r3, #52	; 0x34
 8011c52:	3324      	adds	r3, #36	; 0x24
 8011c54:	4618      	mov	r0, r3
 8011c56:	f7fe fb85 	bl	8010364 <ld_dword>
 8011c5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c60:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c64:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8011c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	789b      	ldrb	r3, [r3, #2]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d005      	beq.n	8011c80 <find_volume+0x204>
 8011c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c76:	789b      	ldrb	r3, [r3, #2]
 8011c78:	2b02      	cmp	r3, #2
 8011c7a:	d001      	beq.n	8011c80 <find_volume+0x204>
 8011c7c:	230d      	movs	r3, #13
 8011c7e:	e147      	b.n	8011f10 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	789b      	ldrb	r3, [r3, #2]
 8011c84:	461a      	mov	r2, r3
 8011c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c88:	fb02 f303 	mul.w	r3, r2, r3
 8011c8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011c94:	b29a      	uxth	r2, r3
 8011c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9c:	895b      	ldrh	r3, [r3, #10]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d008      	beq.n	8011cb4 <find_volume+0x238>
 8011ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca4:	895b      	ldrh	r3, [r3, #10]
 8011ca6:	461a      	mov	r2, r3
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	895b      	ldrh	r3, [r3, #10]
 8011cac:	3b01      	subs	r3, #1
 8011cae:	4013      	ands	r3, r2
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d001      	beq.n	8011cb8 <find_volume+0x23c>
 8011cb4:	230d      	movs	r3, #13
 8011cb6:	e12b      	b.n	8011f10 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cba:	3334      	adds	r3, #52	; 0x34
 8011cbc:	3311      	adds	r3, #17
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe fb38 	bl	8010334 <ld_word>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cce:	891b      	ldrh	r3, [r3, #8]
 8011cd0:	f003 030f 	and.w	r3, r3, #15
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d001      	beq.n	8011cde <find_volume+0x262>
 8011cda:	230d      	movs	r3, #13
 8011cdc:	e118      	b.n	8011f10 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	3334      	adds	r3, #52	; 0x34
 8011ce2:	3313      	adds	r3, #19
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	f7fe fb25 	bl	8010334 <ld_word>
 8011cea:	4603      	mov	r3, r0
 8011cec:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011cee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d106      	bne.n	8011d02 <find_volume+0x286>
 8011cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf6:	3334      	adds	r3, #52	; 0x34
 8011cf8:	3320      	adds	r3, #32
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f7fe fb32 	bl	8010364 <ld_dword>
 8011d00:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d04:	3334      	adds	r3, #52	; 0x34
 8011d06:	330e      	adds	r3, #14
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7fe fb13 	bl	8010334 <ld_word>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d101      	bne.n	8011d1c <find_volume+0x2a0>
 8011d18:	230d      	movs	r3, #13
 8011d1a:	e0f9      	b.n	8011f10 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011d1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d20:	4413      	add	r3, r2
 8011d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d24:	8912      	ldrh	r2, [r2, #8]
 8011d26:	0912      	lsrs	r2, r2, #4
 8011d28:	b292      	uxth	r2, r2
 8011d2a:	4413      	add	r3, r2
 8011d2c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011d2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d201      	bcs.n	8011d3a <find_volume+0x2be>
 8011d36:	230d      	movs	r3, #13
 8011d38:	e0ea      	b.n	8011f10 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011d3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d3e:	1ad3      	subs	r3, r2, r3
 8011d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d42:	8952      	ldrh	r2, [r2, #10]
 8011d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d48:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d103      	bne.n	8011d58 <find_volume+0x2dc>
 8011d50:	230d      	movs	r3, #13
 8011d52:	e0dd      	b.n	8011f10 <find_volume+0x494>
 8011d54:	2000043c 	.word	0x2000043c
		fmt = FS_FAT32;
 8011d58:	2303      	movs	r3, #3
 8011d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d60:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011d64:	4293      	cmp	r3, r2
 8011d66:	d802      	bhi.n	8011d6e <find_volume+0x2f2>
 8011d68:	2302      	movs	r3, #2
 8011d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d802      	bhi.n	8011d7e <find_volume+0x302>
 8011d78:	2301      	movs	r3, #1
 8011d7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d80:	1c9a      	adds	r2, r3, #2
 8011d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d84:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d8a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011d8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d90:	441a      	add	r2, r3
 8011d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d94:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9a:	441a      	add	r2, r3
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8011da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011da4:	2b03      	cmp	r3, #3
 8011da6:	d11e      	bne.n	8011de6 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011daa:	3334      	adds	r3, #52	; 0x34
 8011dac:	332a      	adds	r3, #42	; 0x2a
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fe fac0 	bl	8010334 <ld_word>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d001      	beq.n	8011dbe <find_volume+0x342>
 8011dba:	230d      	movs	r3, #13
 8011dbc:	e0a8      	b.n	8011f10 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc0:	891b      	ldrh	r3, [r3, #8]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <find_volume+0x34e>
 8011dc6:	230d      	movs	r3, #13
 8011dc8:	e0a2      	b.n	8011f10 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dcc:	3334      	adds	r3, #52	; 0x34
 8011dce:	332c      	adds	r3, #44	; 0x2c
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7fe fac7 	bl	8010364 <ld_dword>
 8011dd6:	4602      	mov	r2, r0
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dde:	699b      	ldr	r3, [r3, #24]
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	647b      	str	r3, [r7, #68]	; 0x44
 8011de4:	e01f      	b.n	8011e26 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de8:	891b      	ldrh	r3, [r3, #8]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d101      	bne.n	8011df2 <find_volume+0x376>
 8011dee:	230d      	movs	r3, #13
 8011df0:	e08e      	b.n	8011f10 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011df8:	441a      	add	r2, r3
 8011dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dfc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011dfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d103      	bne.n	8011e0e <find_volume+0x392>
 8011e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	005b      	lsls	r3, r3, #1
 8011e0c:	e00a      	b.n	8011e24 <find_volume+0x3a8>
 8011e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e10:	699a      	ldr	r2, [r3, #24]
 8011e12:	4613      	mov	r3, r2
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4413      	add	r3, r2
 8011e18:	085a      	lsrs	r2, r3, #1
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	699b      	ldr	r3, [r3, #24]
 8011e1e:	f003 0301 	and.w	r3, r3, #1
 8011e22:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011e24:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e28:	69da      	ldr	r2, [r3, #28]
 8011e2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011e30:	0a5b      	lsrs	r3, r3, #9
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d201      	bcs.n	8011e3a <find_volume+0x3be>
 8011e36:	230d      	movs	r3, #13
 8011e38:	e06a      	b.n	8011f10 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8011e40:	615a      	str	r2, [r3, #20]
 8011e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e44:	695a      	ldr	r2, [r3, #20]
 8011e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e48:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4c:	2280      	movs	r2, #128	; 0x80
 8011e4e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e54:	2b03      	cmp	r3, #3
 8011e56:	d149      	bne.n	8011eec <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e5a:	3334      	adds	r3, #52	; 0x34
 8011e5c:	3330      	adds	r3, #48	; 0x30
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7fe fa68 	bl	8010334 <ld_word>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b01      	cmp	r3, #1
 8011e68:	d140      	bne.n	8011eec <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	4619      	mov	r1, r3
 8011e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e72:	f7fe fd3f 	bl	80108f4 <move_window>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d137      	bne.n	8011eec <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8011e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7e:	2200      	movs	r2, #0
 8011e80:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e84:	3334      	adds	r3, #52	; 0x34
 8011e86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fe fa52 	bl	8010334 <ld_word>
 8011e90:	4603      	mov	r3, r0
 8011e92:	461a      	mov	r2, r3
 8011e94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d127      	bne.n	8011eec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	3334      	adds	r3, #52	; 0x34
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fe fa5f 	bl	8010364 <ld_dword>
 8011ea6:	4602      	mov	r2, r0
 8011ea8:	4b1b      	ldr	r3, [pc, #108]	; (8011f18 <find_volume+0x49c>)
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	d11e      	bne.n	8011eec <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb0:	3334      	adds	r3, #52	; 0x34
 8011eb2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe fa54 	bl	8010364 <ld_dword>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	4b17      	ldr	r3, [pc, #92]	; (8011f1c <find_volume+0x4a0>)
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d113      	bne.n	8011eec <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	3334      	adds	r3, #52	; 0x34
 8011ec8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fe fa49 	bl	8010364 <ld_dword>
 8011ed2:	4602      	mov	r2, r0
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eda:	3334      	adds	r3, #52	; 0x34
 8011edc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f7fe fa3f 	bl	8010364 <ld_dword>
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eea:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011ef2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011ef4:	4b0a      	ldr	r3, [pc, #40]	; (8011f20 <find_volume+0x4a4>)
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	4b08      	ldr	r3, [pc, #32]	; (8011f20 <find_volume+0x4a4>)
 8011efe:	801a      	strh	r2, [r3, #0]
 8011f00:	4b07      	ldr	r3, [pc, #28]	; (8011f20 <find_volume+0x4a4>)
 8011f02:	881a      	ldrh	r2, [r3, #0]
 8011f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f06:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011f0a:	f7fe fc8b 	bl	8010824 <clear_lock>
#endif
	return FR_OK;
 8011f0e:	2300      	movs	r3, #0
}
 8011f10:	4618      	mov	r0, r3
 8011f12:	3758      	adds	r7, #88	; 0x58
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	41615252 	.word	0x41615252
 8011f1c:	61417272 	.word	0x61417272
 8011f20:	20000440 	.word	0x20000440

08011f24 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011f2e:	2309      	movs	r3, #9
 8011f30:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d02e      	beq.n	8011f96 <validate+0x72>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d02a      	beq.n	8011f96 <validate+0x72>
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d025      	beq.n	8011f96 <validate+0x72>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	889a      	ldrh	r2, [r3, #4]
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	88db      	ldrh	r3, [r3, #6]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d11e      	bne.n	8011f96 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7fe fae8 	bl	8010532 <lock_fs>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d014      	beq.n	8011f92 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	785b      	ldrb	r3, [r3, #1]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7fe f942 	bl	80101f8 <disk_status>
 8011f74:	4603      	mov	r3, r0
 8011f76:	f003 0301 	and.w	r3, r3, #1
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d102      	bne.n	8011f84 <validate+0x60>
				res = FR_OK;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	73fb      	strb	r3, [r7, #15]
 8011f82:	e008      	b.n	8011f96 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	2100      	movs	r1, #0
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7fe fae7 	bl	801055e <unlock_fs>
 8011f90:	e001      	b.n	8011f96 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011f92:	230f      	movs	r3, #15
 8011f94:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011f96:	7bfb      	ldrb	r3, [r7, #15]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d102      	bne.n	8011fa2 <validate+0x7e>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	e000      	b.n	8011fa4 <validate+0x80>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	683a      	ldr	r2, [r7, #0]
 8011fa6:	6013      	str	r3, [r2, #0]
	return res;
 8011fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
	...

08011fb4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b088      	sub	sp, #32
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	60f8      	str	r0, [r7, #12]
 8011fbc:	60b9      	str	r1, [r7, #8]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011fc2:	68bb      	ldr	r3, [r7, #8]
 8011fc4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011fc6:	f107 0310 	add.w	r3, r7, #16
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7ff fcbb 	bl	8011946 <get_ldnumber>
 8011fd0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011fd2:	69fb      	ldr	r3, [r7, #28]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	da01      	bge.n	8011fdc <f_mount+0x28>
 8011fd8:	230b      	movs	r3, #11
 8011fda:	e048      	b.n	801206e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011fdc:	4a26      	ldr	r2, [pc, #152]	; (8012078 <f_mount+0xc4>)
 8011fde:	69fb      	ldr	r3, [r7, #28]
 8011fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fe4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011fe6:	69bb      	ldr	r3, [r7, #24]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d00f      	beq.n	801200c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011fec:	69b8      	ldr	r0, [r7, #24]
 8011fee:	f7fe fc19 	bl	8010824 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f001 f828 	bl	801304c <ff_del_syncobj>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d101      	bne.n	8012006 <f_mount+0x52>
 8012002:	2302      	movs	r3, #2
 8012004:	e033      	b.n	801206e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	2200      	movs	r2, #0
 801200a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d00f      	beq.n	8012032 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2200      	movs	r2, #0
 8012016:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	b2da      	uxtb	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	330c      	adds	r3, #12
 8012020:	4619      	mov	r1, r3
 8012022:	4610      	mov	r0, r2
 8012024:	f000 fff7 	bl	8013016 <ff_cre_syncobj>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	d101      	bne.n	8012032 <f_mount+0x7e>
 801202e:	2302      	movs	r3, #2
 8012030:	e01d      	b.n	801206e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012032:	68fa      	ldr	r2, [r7, #12]
 8012034:	4910      	ldr	r1, [pc, #64]	; (8012078 <f_mount+0xc4>)
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d002      	beq.n	8012048 <f_mount+0x94>
 8012042:	79fb      	ldrb	r3, [r7, #7]
 8012044:	2b01      	cmp	r3, #1
 8012046:	d001      	beq.n	801204c <f_mount+0x98>
 8012048:	2300      	movs	r3, #0
 801204a:	e010      	b.n	801206e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801204c:	f107 010c 	add.w	r1, r7, #12
 8012050:	f107 0308 	add.w	r3, r7, #8
 8012054:	2200      	movs	r2, #0
 8012056:	4618      	mov	r0, r3
 8012058:	f7ff fd10 	bl	8011a7c <find_volume>
 801205c:	4603      	mov	r3, r0
 801205e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	7dfa      	ldrb	r2, [r7, #23]
 8012064:	4611      	mov	r1, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f7fe fa79 	bl	801055e <unlock_fs>
 801206c:	7dfb      	ldrb	r3, [r7, #23]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3720      	adds	r7, #32
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	2000043c 	.word	0x2000043c

0801207c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b09a      	sub	sp, #104	; 0x68
 8012080:	af00      	add	r7, sp, #0
 8012082:	60f8      	str	r0, [r7, #12]
 8012084:	60b9      	str	r1, [r7, #8]
 8012086:	4613      	mov	r3, r2
 8012088:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d101      	bne.n	8012094 <f_open+0x18>
 8012090:	2309      	movs	r3, #9
 8012092:	e1b4      	b.n	80123fe <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012094:	79fb      	ldrb	r3, [r7, #7]
 8012096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801209a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801209c:	79fa      	ldrb	r2, [r7, #7]
 801209e:	f107 0114 	add.w	r1, r7, #20
 80120a2:	f107 0308 	add.w	r3, r7, #8
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7ff fce8 	bl	8011a7c <find_volume>
 80120ac:	4603      	mov	r3, r0
 80120ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80120b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	f040 8191 	bne.w	80123de <f_open+0x362>
		dj.obj.fs = fs;
 80120bc:	697b      	ldr	r3, [r7, #20]
 80120be:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80120c0:	68ba      	ldr	r2, [r7, #8]
 80120c2:	f107 0318 	add.w	r3, r7, #24
 80120c6:	4611      	mov	r1, r2
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7ff fbcb 	bl	8011864 <follow_path>
 80120ce:	4603      	mov	r3, r0
 80120d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80120d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d11a      	bne.n	8012112 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80120dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80120e0:	b25b      	sxtb	r3, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	da03      	bge.n	80120ee <f_open+0x72>
				res = FR_INVALID_NAME;
 80120e6:	2306      	movs	r3, #6
 80120e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80120ec:	e011      	b.n	8012112 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80120ee:	79fb      	ldrb	r3, [r7, #7]
 80120f0:	f023 0301 	bic.w	r3, r3, #1
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	bf14      	ite	ne
 80120f8:	2301      	movne	r3, #1
 80120fa:	2300      	moveq	r3, #0
 80120fc:	b2db      	uxtb	r3, r3
 80120fe:	461a      	mov	r2, r3
 8012100:	f107 0318 	add.w	r3, r7, #24
 8012104:	4611      	mov	r1, r2
 8012106:	4618      	mov	r0, r3
 8012108:	f7fe fa44 	bl	8010594 <chk_lock>
 801210c:	4603      	mov	r3, r0
 801210e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012112:	79fb      	ldrb	r3, [r7, #7]
 8012114:	f003 031c 	and.w	r3, r3, #28
 8012118:	2b00      	cmp	r3, #0
 801211a:	d07f      	beq.n	801221c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801211c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012120:	2b00      	cmp	r3, #0
 8012122:	d017      	beq.n	8012154 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012124:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012128:	2b04      	cmp	r3, #4
 801212a:	d10e      	bne.n	801214a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801212c:	f7fe fa8e 	bl	801064c <enq_lock>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d006      	beq.n	8012144 <f_open+0xc8>
 8012136:	f107 0318 	add.w	r3, r7, #24
 801213a:	4618      	mov	r0, r3
 801213c:	f7ff f9ca 	bl	80114d4 <dir_register>
 8012140:	4603      	mov	r3, r0
 8012142:	e000      	b.n	8012146 <f_open+0xca>
 8012144:	2312      	movs	r3, #18
 8012146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801214a:	79fb      	ldrb	r3, [r7, #7]
 801214c:	f043 0308 	orr.w	r3, r3, #8
 8012150:	71fb      	strb	r3, [r7, #7]
 8012152:	e010      	b.n	8012176 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012154:	7fbb      	ldrb	r3, [r7, #30]
 8012156:	f003 0311 	and.w	r3, r3, #17
 801215a:	2b00      	cmp	r3, #0
 801215c:	d003      	beq.n	8012166 <f_open+0xea>
					res = FR_DENIED;
 801215e:	2307      	movs	r3, #7
 8012160:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012164:	e007      	b.n	8012176 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012166:	79fb      	ldrb	r3, [r7, #7]
 8012168:	f003 0304 	and.w	r3, r3, #4
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <f_open+0xfa>
 8012170:	2308      	movs	r3, #8
 8012172:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012176:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801217a:	2b00      	cmp	r3, #0
 801217c:	d168      	bne.n	8012250 <f_open+0x1d4>
 801217e:	79fb      	ldrb	r3, [r7, #7]
 8012180:	f003 0308 	and.w	r3, r3, #8
 8012184:	2b00      	cmp	r3, #0
 8012186:	d063      	beq.n	8012250 <f_open+0x1d4>
				dw = GET_FATTIME();
 8012188:	f7fc f9e4 	bl	800e554 <get_fattime>
 801218c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012190:	330e      	adds	r3, #14
 8012192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe f923 	bl	80103e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801219a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801219c:	3316      	adds	r3, #22
 801219e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7fe f91d 	bl	80103e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80121a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a8:	330b      	adds	r3, #11
 80121aa:	2220      	movs	r2, #32
 80121ac:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121b2:	4611      	mov	r1, r2
 80121b4:	4618      	mov	r0, r3
 80121b6:	f7ff f89c 	bl	80112f2 <ld_clust>
 80121ba:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121c0:	2200      	movs	r2, #0
 80121c2:	4618      	mov	r0, r3
 80121c4:	f7ff f8b4 	bl	8011330 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80121c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ca:	331c      	adds	r3, #28
 80121cc:	2100      	movs	r1, #0
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fe f906 	bl	80103e0 <st_dword>
					fs->wflag = 1;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2201      	movs	r2, #1
 80121d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80121da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d037      	beq.n	8012250 <f_open+0x1d4>
						dw = fs->winsect;
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121e4:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80121e6:	f107 0318 	add.w	r3, r7, #24
 80121ea:	2200      	movs	r2, #0
 80121ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fdc7 	bl	8010d82 <remove_chain>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80121fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d126      	bne.n	8012250 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012206:	4618      	mov	r0, r3
 8012208:	f7fe fb74 	bl	80108f4 <move_window>
 801220c:	4603      	mov	r3, r0
 801220e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012216:	3a01      	subs	r2, #1
 8012218:	611a      	str	r2, [r3, #16]
 801221a:	e019      	b.n	8012250 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801221c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012220:	2b00      	cmp	r3, #0
 8012222:	d115      	bne.n	8012250 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012224:	7fbb      	ldrb	r3, [r7, #30]
 8012226:	f003 0310 	and.w	r3, r3, #16
 801222a:	2b00      	cmp	r3, #0
 801222c:	d003      	beq.n	8012236 <f_open+0x1ba>
					res = FR_NO_FILE;
 801222e:	2304      	movs	r3, #4
 8012230:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8012234:	e00c      	b.n	8012250 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	f003 0302 	and.w	r3, r3, #2
 801223c:	2b00      	cmp	r3, #0
 801223e:	d007      	beq.n	8012250 <f_open+0x1d4>
 8012240:	7fbb      	ldrb	r3, [r7, #30]
 8012242:	f003 0301 	and.w	r3, r3, #1
 8012246:	2b00      	cmp	r3, #0
 8012248:	d002      	beq.n	8012250 <f_open+0x1d4>
						res = FR_DENIED;
 801224a:	2307      	movs	r3, #7
 801224c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8012250:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012254:	2b00      	cmp	r3, #0
 8012256:	d128      	bne.n	80122aa <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012258:	79fb      	ldrb	r3, [r7, #7]
 801225a:	f003 0308 	and.w	r3, r3, #8
 801225e:	2b00      	cmp	r3, #0
 8012260:	d003      	beq.n	801226a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012262:	79fb      	ldrb	r3, [r7, #7]
 8012264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012268:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012278:	79fb      	ldrb	r3, [r7, #7]
 801227a:	f023 0301 	bic.w	r3, r3, #1
 801227e:	2b00      	cmp	r3, #0
 8012280:	bf14      	ite	ne
 8012282:	2301      	movne	r3, #1
 8012284:	2300      	moveq	r3, #0
 8012286:	b2db      	uxtb	r3, r3
 8012288:	461a      	mov	r2, r3
 801228a:	f107 0318 	add.w	r3, r7, #24
 801228e:	4611      	mov	r1, r2
 8012290:	4618      	mov	r0, r3
 8012292:	f7fe f9fd 	bl	8010690 <inc_lock>
 8012296:	4602      	mov	r2, r0
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	691b      	ldr	r3, [r3, #16]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <f_open+0x22e>
 80122a4:	2302      	movs	r3, #2
 80122a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80122aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	f040 8095 	bne.w	80123de <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122b8:	4611      	mov	r1, r2
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7ff f819 	bl	80112f2 <ld_clust>
 80122c0:	4602      	mov	r2, r0
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80122c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122c8:	331c      	adds	r3, #28
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7fe f84a 	bl	8010364 <ld_dword>
 80122d0:	4602      	mov	r2, r0
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2200      	movs	r2, #0
 80122da:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80122dc:	697a      	ldr	r2, [r7, #20]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	88da      	ldrh	r2, [r3, #6]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	79fa      	ldrb	r2, [r7, #7]
 80122ee:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2200      	movs	r2, #0
 80122f4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2200      	movs	r2, #0
 80122fa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	2200      	movs	r2, #0
 8012300:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	3330      	adds	r3, #48	; 0x30
 8012306:	f44f 7200 	mov.w	r2, #512	; 0x200
 801230a:	2100      	movs	r1, #0
 801230c:	4618      	mov	r0, r3
 801230e:	f7fe f8b4 	bl	801047a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	f003 0320 	and.w	r3, r3, #32
 8012318:	2b00      	cmp	r3, #0
 801231a:	d060      	beq.n	80123de <f_open+0x362>
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d05c      	beq.n	80123de <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	68da      	ldr	r2, [r3, #12]
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	895b      	ldrh	r3, [r3, #10]
 8012330:	025b      	lsls	r3, r3, #9
 8012332:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	689b      	ldr	r3, [r3, #8]
 8012338:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012340:	e016      	b.n	8012370 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8012346:	4618      	mov	r0, r3
 8012348:	f7fe fb8f 	bl	8010a6a <get_fat>
 801234c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801234e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012350:	2b01      	cmp	r3, #1
 8012352:	d802      	bhi.n	801235a <f_open+0x2de>
 8012354:	2302      	movs	r3, #2
 8012356:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801235c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012360:	d102      	bne.n	8012368 <f_open+0x2ec>
 8012362:	2301      	movs	r3, #1
 8012364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801236a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801236c:	1ad3      	subs	r3, r2, r3
 801236e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012370:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012374:	2b00      	cmp	r3, #0
 8012376:	d103      	bne.n	8012380 <f_open+0x304>
 8012378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801237a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801237c:	429a      	cmp	r2, r3
 801237e:	d8e0      	bhi.n	8012342 <f_open+0x2c6>
				}
				fp->clust = clst;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012384:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801238a:	2b00      	cmp	r3, #0
 801238c:	d127      	bne.n	80123de <f_open+0x362>
 801238e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012394:	2b00      	cmp	r3, #0
 8012396:	d022      	beq.n	80123de <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801239c:	4618      	mov	r0, r3
 801239e:	f7fe fb45 	bl	8010a2c <clust2sect>
 80123a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80123a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d103      	bne.n	80123b2 <f_open+0x336>
						res = FR_INT_ERR;
 80123aa:	2302      	movs	r3, #2
 80123ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80123b0:	e015      	b.n	80123de <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80123b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123b4:	0a5a      	lsrs	r2, r3, #9
 80123b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b8:	441a      	add	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	7858      	ldrb	r0, [r3, #1]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	6a1a      	ldr	r2, [r3, #32]
 80123cc:	2301      	movs	r3, #1
 80123ce:	f7fd ff53 	bl	8010278 <disk_read>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d002      	beq.n	80123de <f_open+0x362>
 80123d8:	2301      	movs	r3, #1
 80123da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80123de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d002      	beq.n	80123ec <f_open+0x370>
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	2200      	movs	r2, #0
 80123ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80123f2:	4611      	mov	r1, r2
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fe f8b2 	bl	801055e <unlock_fs>
 80123fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3768      	adds	r7, #104	; 0x68
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}

08012406 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012406:	b580      	push	{r7, lr}
 8012408:	b08c      	sub	sp, #48	; 0x30
 801240a:	af00      	add	r7, sp, #0
 801240c:	60f8      	str	r0, [r7, #12]
 801240e:	60b9      	str	r1, [r7, #8]
 8012410:	607a      	str	r2, [r7, #4]
 8012412:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	2200      	movs	r2, #0
 801241c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f107 0210 	add.w	r2, r7, #16
 8012424:	4611      	mov	r1, r2
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff fd7c 	bl	8011f24 <validate>
 801242c:	4603      	mov	r3, r0
 801242e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012436:	2b00      	cmp	r3, #0
 8012438:	d107      	bne.n	801244a <f_write+0x44>
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	7d5b      	ldrb	r3, [r3, #21]
 801243e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012446:	2b00      	cmp	r3, #0
 8012448:	d009      	beq.n	801245e <f_write+0x58>
 801244a:	693b      	ldr	r3, [r7, #16]
 801244c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012450:	4611      	mov	r1, r2
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe f883 	bl	801055e <unlock_fs>
 8012458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801245c:	e173      	b.n	8012746 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	7d1b      	ldrb	r3, [r3, #20]
 8012462:	f003 0302 	and.w	r3, r3, #2
 8012466:	2b00      	cmp	r3, #0
 8012468:	d106      	bne.n	8012478 <f_write+0x72>
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2107      	movs	r1, #7
 801246e:	4618      	mov	r0, r3
 8012470:	f7fe f875 	bl	801055e <unlock_fs>
 8012474:	2307      	movs	r3, #7
 8012476:	e166      	b.n	8012746 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	699a      	ldr	r2, [r3, #24]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	441a      	add	r2, r3
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	429a      	cmp	r2, r3
 8012486:	f080 814b 	bcs.w	8012720 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	699b      	ldr	r3, [r3, #24]
 801248e:	43db      	mvns	r3, r3
 8012490:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012492:	e145      	b.n	8012720 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801249c:	2b00      	cmp	r3, #0
 801249e:	f040 8101 	bne.w	80126a4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	0a5b      	lsrs	r3, r3, #9
 80124a8:	693a      	ldr	r2, [r7, #16]
 80124aa:	8952      	ldrh	r2, [r2, #10]
 80124ac:	3a01      	subs	r2, #1
 80124ae:	4013      	ands	r3, r2
 80124b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d14d      	bne.n	8012554 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	699b      	ldr	r3, [r3, #24]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d10c      	bne.n	80124da <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80124c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d11a      	bne.n	8012502 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2100      	movs	r1, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fe fcbb 	bl	8010e4c <create_chain>
 80124d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80124d8:	e013      	b.n	8012502 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d007      	beq.n	80124f2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	699b      	ldr	r3, [r3, #24]
 80124e6:	4619      	mov	r1, r3
 80124e8:	68f8      	ldr	r0, [r7, #12]
 80124ea:	f7fe fd47 	bl	8010f7c <clmt_clust>
 80124ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80124f0:	e007      	b.n	8012502 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	69db      	ldr	r3, [r3, #28]
 80124f8:	4619      	mov	r1, r3
 80124fa:	4610      	mov	r0, r2
 80124fc:	f7fe fca6 	bl	8010e4c <create_chain>
 8012500:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 8110 	beq.w	801272a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801250c:	2b01      	cmp	r3, #1
 801250e:	d109      	bne.n	8012524 <f_write+0x11e>
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2202      	movs	r2, #2
 8012514:	755a      	strb	r2, [r3, #21]
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2102      	movs	r1, #2
 801251a:	4618      	mov	r0, r3
 801251c:	f7fe f81f 	bl	801055e <unlock_fs>
 8012520:	2302      	movs	r3, #2
 8012522:	e110      	b.n	8012746 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801252a:	d109      	bne.n	8012540 <f_write+0x13a>
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2201      	movs	r2, #1
 8012530:	755a      	strb	r2, [r3, #21]
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	2101      	movs	r1, #1
 8012536:	4618      	mov	r0, r3
 8012538:	f7fe f811 	bl	801055e <unlock_fs>
 801253c:	2301      	movs	r3, #1
 801253e:	e102      	b.n	8012746 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012544:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	689b      	ldr	r3, [r3, #8]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d102      	bne.n	8012554 <f_write+0x14e>
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012552:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	7d1b      	ldrb	r3, [r3, #20]
 8012558:	b25b      	sxtb	r3, r3
 801255a:	2b00      	cmp	r3, #0
 801255c:	da1d      	bge.n	801259a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	7858      	ldrb	r0, [r3, #1]
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	6a1a      	ldr	r2, [r3, #32]
 801256c:	2301      	movs	r3, #1
 801256e:	f7fd fea3 	bl	80102b8 <disk_write>
 8012572:	4603      	mov	r3, r0
 8012574:	2b00      	cmp	r3, #0
 8012576:	d009      	beq.n	801258c <f_write+0x186>
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	2201      	movs	r2, #1
 801257c:	755a      	strb	r2, [r3, #21]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	2101      	movs	r1, #1
 8012582:	4618      	mov	r0, r3
 8012584:	f7fd ffeb 	bl	801055e <unlock_fs>
 8012588:	2301      	movs	r3, #1
 801258a:	e0dc      	b.n	8012746 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	7d1b      	ldrb	r3, [r3, #20]
 8012590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012594:	b2da      	uxtb	r2, r3
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801259a:	693a      	ldr	r2, [r7, #16]
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	69db      	ldr	r3, [r3, #28]
 80125a0:	4619      	mov	r1, r3
 80125a2:	4610      	mov	r0, r2
 80125a4:	f7fe fa42 	bl	8010a2c <clust2sect>
 80125a8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d109      	bne.n	80125c4 <f_write+0x1be>
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2202      	movs	r2, #2
 80125b4:	755a      	strb	r2, [r3, #21]
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	2102      	movs	r1, #2
 80125ba:	4618      	mov	r0, r3
 80125bc:	f7fd ffcf 	bl	801055e <unlock_fs>
 80125c0:	2302      	movs	r3, #2
 80125c2:	e0c0      	b.n	8012746 <f_write+0x340>
			sect += csect;
 80125c4:	697a      	ldr	r2, [r7, #20]
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	4413      	add	r3, r2
 80125ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	0a5b      	lsrs	r3, r3, #9
 80125d0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d041      	beq.n	801265c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80125d8:	69ba      	ldr	r2, [r7, #24]
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	4413      	add	r3, r2
 80125de:	693a      	ldr	r2, [r7, #16]
 80125e0:	8952      	ldrh	r2, [r2, #10]
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d905      	bls.n	80125f2 <f_write+0x1ec>
					cc = fs->csize - csect;
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	895b      	ldrh	r3, [r3, #10]
 80125ea:	461a      	mov	r2, r3
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	1ad3      	subs	r3, r2, r3
 80125f0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	7858      	ldrb	r0, [r3, #1]
 80125f6:	6a3b      	ldr	r3, [r7, #32]
 80125f8:	697a      	ldr	r2, [r7, #20]
 80125fa:	69f9      	ldr	r1, [r7, #28]
 80125fc:	f7fd fe5c 	bl	80102b8 <disk_write>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d009      	beq.n	801261a <f_write+0x214>
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2201      	movs	r2, #1
 801260a:	755a      	strb	r2, [r3, #21]
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	2101      	movs	r1, #1
 8012610:	4618      	mov	r0, r3
 8012612:	f7fd ffa4 	bl	801055e <unlock_fs>
 8012616:	2301      	movs	r3, #1
 8012618:	e095      	b.n	8012746 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	6a1a      	ldr	r2, [r3, #32]
 801261e:	697b      	ldr	r3, [r7, #20]
 8012620:	1ad3      	subs	r3, r2, r3
 8012622:	6a3a      	ldr	r2, [r7, #32]
 8012624:	429a      	cmp	r2, r3
 8012626:	d915      	bls.n	8012654 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6a1a      	ldr	r2, [r3, #32]
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	1ad3      	subs	r3, r2, r3
 8012636:	025b      	lsls	r3, r3, #9
 8012638:	69fa      	ldr	r2, [r7, #28]
 801263a:	4413      	add	r3, r2
 801263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012640:	4619      	mov	r1, r3
 8012642:	f7fd fef9 	bl	8010438 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	7d1b      	ldrb	r3, [r3, #20]
 801264a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801264e:	b2da      	uxtb	r2, r3
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012654:	6a3b      	ldr	r3, [r7, #32]
 8012656:	025b      	lsls	r3, r3, #9
 8012658:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801265a:	e044      	b.n	80126e6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	6a1b      	ldr	r3, [r3, #32]
 8012660:	697a      	ldr	r2, [r7, #20]
 8012662:	429a      	cmp	r2, r3
 8012664:	d01b      	beq.n	801269e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	699a      	ldr	r2, [r3, #24]
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801266e:	429a      	cmp	r2, r3
 8012670:	d215      	bcs.n	801269e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	7858      	ldrb	r0, [r3, #1]
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801267c:	2301      	movs	r3, #1
 801267e:	697a      	ldr	r2, [r7, #20]
 8012680:	f7fd fdfa 	bl	8010278 <disk_read>
 8012684:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012686:	2b00      	cmp	r3, #0
 8012688:	d009      	beq.n	801269e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	2201      	movs	r2, #1
 801268e:	755a      	strb	r2, [r3, #21]
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	2101      	movs	r1, #1
 8012694:	4618      	mov	r0, r3
 8012696:	f7fd ff62 	bl	801055e <unlock_fs>
 801269a:	2301      	movs	r3, #1
 801269c:	e053      	b.n	8012746 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	699b      	ldr	r3, [r3, #24]
 80126a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80126b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80126b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d901      	bls.n	80126be <f_write+0x2b8>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	699b      	ldr	r3, [r3, #24]
 80126c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126cc:	4413      	add	r3, r2
 80126ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126d0:	69f9      	ldr	r1, [r7, #28]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7fd feb0 	bl	8010438 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	7d1b      	ldrb	r3, [r3, #20]
 80126dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80126e0:	b2da      	uxtb	r2, r3
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80126e6:	69fa      	ldr	r2, [r7, #28]
 80126e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ea:	4413      	add	r3, r2
 80126ec:	61fb      	str	r3, [r7, #28]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	699a      	ldr	r2, [r3, #24]
 80126f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126f4:	441a      	add	r2, r3
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	619a      	str	r2, [r3, #24]
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	68da      	ldr	r2, [r3, #12]
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	699b      	ldr	r3, [r3, #24]
 8012702:	429a      	cmp	r2, r3
 8012704:	bf38      	it	cc
 8012706:	461a      	movcc	r2, r3
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	60da      	str	r2, [r3, #12]
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	681a      	ldr	r2, [r3, #0]
 8012710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012712:	441a      	add	r2, r3
 8012714:	683b      	ldr	r3, [r7, #0]
 8012716:	601a      	str	r2, [r3, #0]
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271c:	1ad3      	subs	r3, r2, r3
 801271e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	2b00      	cmp	r3, #0
 8012724:	f47f aeb6 	bne.w	8012494 <f_write+0x8e>
 8012728:	e000      	b.n	801272c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801272a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	7d1b      	ldrb	r3, [r3, #20]
 8012730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012734:	b2da      	uxtb	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	2100      	movs	r1, #0
 801273e:	4618      	mov	r0, r3
 8012740:	f7fd ff0d 	bl	801055e <unlock_fs>
 8012744:	2300      	movs	r3, #0
}
 8012746:	4618      	mov	r0, r3
 8012748:	3730      	adds	r7, #48	; 0x30
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}

0801274e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801274e:	b580      	push	{r7, lr}
 8012750:	b086      	sub	sp, #24
 8012752:	af00      	add	r7, sp, #0
 8012754:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f107 0208 	add.w	r2, r7, #8
 801275c:	4611      	mov	r1, r2
 801275e:	4618      	mov	r0, r3
 8012760:	f7ff fbe0 	bl	8011f24 <validate>
 8012764:	4603      	mov	r3, r0
 8012766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012768:	7dfb      	ldrb	r3, [r7, #23]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d16d      	bne.n	801284a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	7d1b      	ldrb	r3, [r3, #20]
 8012772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012776:	2b00      	cmp	r3, #0
 8012778:	d067      	beq.n	801284a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	7d1b      	ldrb	r3, [r3, #20]
 801277e:	b25b      	sxtb	r3, r3
 8012780:	2b00      	cmp	r3, #0
 8012782:	da1a      	bge.n	80127ba <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	7858      	ldrb	r0, [r3, #1]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a1a      	ldr	r2, [r3, #32]
 8012792:	2301      	movs	r3, #1
 8012794:	f7fd fd90 	bl	80102b8 <disk_write>
 8012798:	4603      	mov	r3, r0
 801279a:	2b00      	cmp	r3, #0
 801279c:	d006      	beq.n	80127ac <f_sync+0x5e>
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2101      	movs	r1, #1
 80127a2:	4618      	mov	r0, r3
 80127a4:	f7fd fedb 	bl	801055e <unlock_fs>
 80127a8:	2301      	movs	r3, #1
 80127aa:	e055      	b.n	8012858 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	7d1b      	ldrb	r3, [r3, #20]
 80127b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127b4:	b2da      	uxtb	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80127ba:	f7fb fecb 	bl	800e554 <get_fattime>
 80127be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80127c0:	68ba      	ldr	r2, [r7, #8]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c6:	4619      	mov	r1, r3
 80127c8:	4610      	mov	r0, r2
 80127ca:	f7fe f893 	bl	80108f4 <move_window>
 80127ce:	4603      	mov	r3, r0
 80127d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80127d2:	7dfb      	ldrb	r3, [r7, #23]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d138      	bne.n	801284a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	330b      	adds	r3, #11
 80127e2:	781a      	ldrb	r2, [r3, #0]
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	330b      	adds	r3, #11
 80127e8:	f042 0220 	orr.w	r2, r2, #32
 80127ec:	b2d2      	uxtb	r2, r2
 80127ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6818      	ldr	r0, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	461a      	mov	r2, r3
 80127fa:	68f9      	ldr	r1, [r7, #12]
 80127fc:	f7fe fd98 	bl	8011330 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	f103 021c 	add.w	r2, r3, #28
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	68db      	ldr	r3, [r3, #12]
 801280a:	4619      	mov	r1, r3
 801280c:	4610      	mov	r0, r2
 801280e:	f7fd fde7 	bl	80103e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	3316      	adds	r3, #22
 8012816:	6939      	ldr	r1, [r7, #16]
 8012818:	4618      	mov	r0, r3
 801281a:	f7fd fde1 	bl	80103e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	3312      	adds	r3, #18
 8012822:	2100      	movs	r1, #0
 8012824:	4618      	mov	r0, r3
 8012826:	f7fd fdc0 	bl	80103aa <st_word>
					fs->wflag = 1;
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	2201      	movs	r2, #1
 801282e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe f88c 	bl	8010950 <sync_fs>
 8012838:	4603      	mov	r3, r0
 801283a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	7d1b      	ldrb	r3, [r3, #20]
 8012840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012844:	b2da      	uxtb	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	7dfa      	ldrb	r2, [r7, #23]
 801284e:	4611      	mov	r1, r2
 8012850:	4618      	mov	r0, r3
 8012852:	f7fd fe84 	bl	801055e <unlock_fs>
 8012856:	7dfb      	ldrb	r3, [r7, #23]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3718      	adds	r7, #24
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}

08012860 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b090      	sub	sp, #64	; 0x40
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
 8012868:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	f107 0208 	add.w	r2, r7, #8
 8012870:	4611      	mov	r1, r2
 8012872:	4618      	mov	r0, r3
 8012874:	f7ff fb56 	bl	8011f24 <validate>
 8012878:	4603      	mov	r3, r0
 801287a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801287e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012882:	2b00      	cmp	r3, #0
 8012884:	d103      	bne.n	801288e <f_lseek+0x2e>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	7d5b      	ldrb	r3, [r3, #21]
 801288a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801288e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012892:	2b00      	cmp	r3, #0
 8012894:	d009      	beq.n	80128aa <f_lseek+0x4a>
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801289c:	4611      	mov	r1, r2
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fd fe5d 	bl	801055e <unlock_fs>
 80128a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80128a8:	e229      	b.n	8012cfe <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 80ea 	beq.w	8012a88 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128ba:	d164      	bne.n	8012986 <f_lseek+0x126>
			tbl = fp->cltbl;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128c0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80128c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c4:	1d1a      	adds	r2, r3, #4
 80128c6:	627a      	str	r2, [r7, #36]	; 0x24
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	617b      	str	r3, [r7, #20]
 80128cc:	2302      	movs	r3, #2
 80128ce:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80128d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d044      	beq.n	8012966 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80128dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128de:	613b      	str	r3, [r7, #16]
 80128e0:	2300      	movs	r3, #0
 80128e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e6:	3302      	adds	r3, #2
 80128e8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80128ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ec:	60fb      	str	r3, [r7, #12]
 80128ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f0:	3301      	adds	r3, #1
 80128f2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7fe f8b6 	bl	8010a6a <get_fat>
 80128fe:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012902:	2b01      	cmp	r3, #1
 8012904:	d809      	bhi.n	801291a <f_lseek+0xba>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2202      	movs	r2, #2
 801290a:	755a      	strb	r2, [r3, #21]
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	2102      	movs	r1, #2
 8012910:	4618      	mov	r0, r3
 8012912:	f7fd fe24 	bl	801055e <unlock_fs>
 8012916:	2302      	movs	r3, #2
 8012918:	e1f1      	b.n	8012cfe <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012920:	d109      	bne.n	8012936 <f_lseek+0xd6>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2201      	movs	r2, #1
 8012926:	755a      	strb	r2, [r3, #21]
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	2101      	movs	r1, #1
 801292c:	4618      	mov	r0, r3
 801292e:	f7fd fe16 	bl	801055e <unlock_fs>
 8012932:	2301      	movs	r3, #1
 8012934:	e1e3      	b.n	8012cfe <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	3301      	adds	r3, #1
 801293a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801293c:	429a      	cmp	r2, r3
 801293e:	d0d4      	beq.n	80128ea <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8012940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	429a      	cmp	r2, r3
 8012946:	d809      	bhi.n	801295c <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8012948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801294a:	1d1a      	adds	r2, r3, #4
 801294c:	627a      	str	r2, [r7, #36]	; 0x24
 801294e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012950:	601a      	str	r2, [r3, #0]
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	1d1a      	adds	r2, r3, #4
 8012956:	627a      	str	r2, [r7, #36]	; 0x24
 8012958:	693a      	ldr	r2, [r7, #16]
 801295a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	699b      	ldr	r3, [r3, #24]
 8012960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012962:	429a      	cmp	r2, r3
 8012964:	d3ba      	bcc.n	80128dc <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801296c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801296e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	429a      	cmp	r2, r3
 8012974:	d803      	bhi.n	801297e <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	2200      	movs	r2, #0
 801297a:	601a      	str	r2, [r3, #0]
 801297c:	e1b6      	b.n	8012cec <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801297e:	2311      	movs	r3, #17
 8012980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012984:	e1b2      	b.n	8012cec <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	683a      	ldr	r2, [r7, #0]
 801298c:	429a      	cmp	r2, r3
 801298e:	d902      	bls.n	8012996 <f_lseek+0x136>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	68db      	ldr	r3, [r3, #12]
 8012994:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	683a      	ldr	r2, [r7, #0]
 801299a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	f000 81a4 	beq.w	8012cec <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	3b01      	subs	r3, #1
 80129a8:	4619      	mov	r1, r3
 80129aa:	6878      	ldr	r0, [r7, #4]
 80129ac:	f7fe fae6 	bl	8010f7c <clmt_clust>
 80129b0:	4602      	mov	r2, r0
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80129b6:	68ba      	ldr	r2, [r7, #8]
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	69db      	ldr	r3, [r3, #28]
 80129bc:	4619      	mov	r1, r3
 80129be:	4610      	mov	r0, r2
 80129c0:	f7fe f834 	bl	8010a2c <clust2sect>
 80129c4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <f_lseek+0x180>
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2202      	movs	r2, #2
 80129d0:	755a      	strb	r2, [r3, #21]
 80129d2:	68bb      	ldr	r3, [r7, #8]
 80129d4:	2102      	movs	r1, #2
 80129d6:	4618      	mov	r0, r3
 80129d8:	f7fd fdc1 	bl	801055e <unlock_fs>
 80129dc:	2302      	movs	r3, #2
 80129de:	e18e      	b.n	8012cfe <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	3b01      	subs	r3, #1
 80129e4:	0a5b      	lsrs	r3, r3, #9
 80129e6:	68ba      	ldr	r2, [r7, #8]
 80129e8:	8952      	ldrh	r2, [r2, #10]
 80129ea:	3a01      	subs	r2, #1
 80129ec:	4013      	ands	r3, r2
 80129ee:	69ba      	ldr	r2, [r7, #24]
 80129f0:	4413      	add	r3, r2
 80129f2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	699b      	ldr	r3, [r3, #24]
 80129f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	f000 8175 	beq.w	8012cec <f_lseek+0x48c>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6a1b      	ldr	r3, [r3, #32]
 8012a06:	69ba      	ldr	r2, [r7, #24]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	f000 816f 	beq.w	8012cec <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	7d1b      	ldrb	r3, [r3, #20]
 8012a12:	b25b      	sxtb	r3, r3
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	da1d      	bge.n	8012a54 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	7858      	ldrb	r0, [r3, #1]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6a1a      	ldr	r2, [r3, #32]
 8012a26:	2301      	movs	r3, #1
 8012a28:	f7fd fc46 	bl	80102b8 <disk_write>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d009      	beq.n	8012a46 <f_lseek+0x1e6>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2201      	movs	r2, #1
 8012a36:	755a      	strb	r2, [r3, #21]
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	2101      	movs	r1, #1
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7fd fd8e 	bl	801055e <unlock_fs>
 8012a42:	2301      	movs	r3, #1
 8012a44:	e15b      	b.n	8012cfe <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	7d1b      	ldrb	r3, [r3, #20]
 8012a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012a4e:	b2da      	uxtb	r2, r3
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	7858      	ldrb	r0, [r3, #1]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012a5e:	2301      	movs	r3, #1
 8012a60:	69ba      	ldr	r2, [r7, #24]
 8012a62:	f7fd fc09 	bl	8010278 <disk_read>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <f_lseek+0x220>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2201      	movs	r2, #1
 8012a70:	755a      	strb	r2, [r3, #21]
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	2101      	movs	r1, #1
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fd fd71 	bl	801055e <unlock_fs>
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e13e      	b.n	8012cfe <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	69ba      	ldr	r2, [r7, #24]
 8012a84:	621a      	str	r2, [r3, #32]
 8012a86:	e131      	b.n	8012cec <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	68db      	ldr	r3, [r3, #12]
 8012a8c:	683a      	ldr	r2, [r7, #0]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d908      	bls.n	8012aa4 <f_lseek+0x244>
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	7d1b      	ldrb	r3, [r3, #20]
 8012a96:	f003 0302 	and.w	r3, r3, #2
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d102      	bne.n	8012aa4 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012aaa:	2300      	movs	r3, #0
 8012aac:	637b      	str	r3, [r7, #52]	; 0x34
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ab2:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	f000 80c0 	beq.w	8012c3c <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	895b      	ldrh	r3, [r3, #10]
 8012ac0:	025b      	lsls	r3, r3, #9
 8012ac2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012ac4:	6a3b      	ldr	r3, [r7, #32]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d01b      	beq.n	8012b02 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	1e5a      	subs	r2, r3, #1
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8012ad4:	6a3b      	ldr	r3, [r7, #32]
 8012ad6:	1e59      	subs	r1, r3, #1
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d30f      	bcc.n	8012b02 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012ae2:	6a3b      	ldr	r3, [r7, #32]
 8012ae4:	1e5a      	subs	r2, r3, #1
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	425b      	negs	r3, r3
 8012aea:	401a      	ands	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	699b      	ldr	r3, [r3, #24]
 8012af4:	683a      	ldr	r2, [r7, #0]
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	69db      	ldr	r3, [r3, #28]
 8012afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b00:	e02c      	b.n	8012b5c <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d123      	bne.n	8012b56 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2100      	movs	r1, #0
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fe f99a 	bl	8010e4c <create_chain>
 8012b18:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1c:	2b01      	cmp	r3, #1
 8012b1e:	d109      	bne.n	8012b34 <f_lseek+0x2d4>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2202      	movs	r2, #2
 8012b24:	755a      	strb	r2, [r3, #21]
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	2102      	movs	r1, #2
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fd fd17 	bl	801055e <unlock_fs>
 8012b30:	2302      	movs	r3, #2
 8012b32:	e0e4      	b.n	8012cfe <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b3a:	d109      	bne.n	8012b50 <f_lseek+0x2f0>
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	755a      	strb	r2, [r3, #21]
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2101      	movs	r1, #1
 8012b46:	4618      	mov	r0, r3
 8012b48:	f7fd fd09 	bl	801055e <unlock_fs>
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	e0d6      	b.n	8012cfe <f_lseek+0x49e>
					fp->obj.sclust = clst;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b54:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b5a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d06c      	beq.n	8012c3c <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8012b62:	e044      	b.n	8012bee <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8012b64:	683a      	ldr	r2, [r7, #0]
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	1ad3      	subs	r3, r2, r3
 8012b6a:	603b      	str	r3, [r7, #0]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	699a      	ldr	r2, [r3, #24]
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	441a      	add	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	7d1b      	ldrb	r3, [r3, #20]
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d00b      	beq.n	8012b9c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fe f95f 	bl	8010e4c <create_chain>
 8012b8e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d108      	bne.n	8012ba8 <f_lseek+0x348>
							ofs = 0; break;
 8012b96:	2300      	movs	r3, #0
 8012b98:	603b      	str	r3, [r7, #0]
 8012b9a:	e02c      	b.n	8012bf6 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7fd ff62 	bl	8010a6a <get_fat>
 8012ba6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bae:	d109      	bne.n	8012bc4 <f_lseek+0x364>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	755a      	strb	r2, [r3, #21]
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	2101      	movs	r1, #1
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fd fccf 	bl	801055e <unlock_fs>
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	e09c      	b.n	8012cfe <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d904      	bls.n	8012bd4 <f_lseek+0x374>
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	699b      	ldr	r3, [r3, #24]
 8012bce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d309      	bcc.n	8012be8 <f_lseek+0x388>
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	755a      	strb	r2, [r3, #21]
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	2102      	movs	r1, #2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fd fcbd 	bl	801055e <unlock_fs>
 8012be4:	2302      	movs	r3, #2
 8012be6:	e08a      	b.n	8012cfe <f_lseek+0x49e>
					fp->clust = clst;
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012bee:	683a      	ldr	r2, [r7, #0]
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d8b6      	bhi.n	8012b64 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	699a      	ldr	r2, [r3, #24]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	441a      	add	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d017      	beq.n	8012c3c <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7fd ff0b 	bl	8010a2c <clust2sect>
 8012c16:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8012c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d109      	bne.n	8012c32 <f_lseek+0x3d2>
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	2202      	movs	r2, #2
 8012c22:	755a      	strb	r2, [r3, #21]
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	2102      	movs	r1, #2
 8012c28:	4618      	mov	r0, r3
 8012c2a:	f7fd fc98 	bl	801055e <unlock_fs>
 8012c2e:	2302      	movs	r3, #2
 8012c30:	e065      	b.n	8012cfe <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	0a5b      	lsrs	r3, r3, #9
 8012c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c38:	4413      	add	r3, r2
 8012c3a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	699a      	ldr	r2, [r3, #24]
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d90a      	bls.n	8012c5e <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	699a      	ldr	r2, [r3, #24]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	7d1b      	ldrb	r3, [r3, #20]
 8012c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c58:	b2da      	uxtb	r2, r3
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	699b      	ldr	r3, [r3, #24]
 8012c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d040      	beq.n	8012cec <f_lseek+0x48c>
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6a1b      	ldr	r3, [r3, #32]
 8012c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d03b      	beq.n	8012cec <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	b25b      	sxtb	r3, r3
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	da1d      	bge.n	8012cba <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c7e:	68bb      	ldr	r3, [r7, #8]
 8012c80:	7858      	ldrb	r0, [r3, #1]
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6a1a      	ldr	r2, [r3, #32]
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	f7fd fb13 	bl	80102b8 <disk_write>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d009      	beq.n	8012cac <f_lseek+0x44c>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	755a      	strb	r2, [r3, #21]
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	2101      	movs	r1, #1
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7fd fc5b 	bl	801055e <unlock_fs>
 8012ca8:	2301      	movs	r3, #1
 8012caa:	e028      	b.n	8012cfe <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	7d1b      	ldrb	r3, [r3, #20]
 8012cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012cb4:	b2da      	uxtb	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012cba:	68bb      	ldr	r3, [r7, #8]
 8012cbc:	7858      	ldrb	r0, [r3, #1]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012cc4:	2301      	movs	r3, #1
 8012cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cc8:	f7fd fad6 	bl	8010278 <disk_read>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d009      	beq.n	8012ce6 <f_lseek+0x486>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	2201      	movs	r2, #1
 8012cd6:	755a      	strb	r2, [r3, #21]
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	2101      	movs	r1, #1
 8012cdc:	4618      	mov	r0, r3
 8012cde:	f7fd fc3e 	bl	801055e <unlock_fs>
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	e00b      	b.n	8012cfe <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cea:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7fd fc32 	bl	801055e <unlock_fs>
 8012cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3740      	adds	r7, #64	; 0x40
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}

08012d06 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012d06:	b580      	push	{r7, lr}
 8012d08:	b086      	sub	sp, #24
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	6078      	str	r0, [r7, #4]
 8012d0e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d101      	bne.n	8012d1a <f_opendir+0x14>
 8012d16:	2309      	movs	r3, #9
 8012d18:	e06a      	b.n	8012df0 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8012d1e:	f107 010c 	add.w	r1, r7, #12
 8012d22:	463b      	mov	r3, r7
 8012d24:	2200      	movs	r2, #0
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7fe fea8 	bl	8011a7c <find_volume>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012d30:	7dfb      	ldrb	r3, [r7, #23]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d14f      	bne.n	8012dd6 <f_opendir+0xd0>
		obj->fs = fs;
 8012d36:	68fa      	ldr	r2, [r7, #12]
 8012d38:	693b      	ldr	r3, [r7, #16]
 8012d3a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	4619      	mov	r1, r3
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7fe fd8f 	bl	8011864 <follow_path>
 8012d46:	4603      	mov	r3, r0
 8012d48:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8012d4a:	7dfb      	ldrb	r3, [r7, #23]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d13d      	bne.n	8012dcc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d56:	b25b      	sxtb	r3, r3
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	db12      	blt.n	8012d82 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012d5c:	693b      	ldr	r3, [r7, #16]
 8012d5e:	799b      	ldrb	r3, [r3, #6]
 8012d60:	f003 0310 	and.w	r3, r3, #16
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00a      	beq.n	8012d7e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	6a1b      	ldr	r3, [r3, #32]
 8012d6e:	4619      	mov	r1, r3
 8012d70:	4610      	mov	r0, r2
 8012d72:	f7fe fabe 	bl	80112f2 <ld_clust>
 8012d76:	4602      	mov	r2, r0
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	609a      	str	r2, [r3, #8]
 8012d7c:	e001      	b.n	8012d82 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8012d7e:	2305      	movs	r3, #5
 8012d80:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8012d82:	7dfb      	ldrb	r3, [r7, #23]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d121      	bne.n	8012dcc <f_opendir+0xc6>
				obj->id = fs->id;
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	88da      	ldrh	r2, [r3, #6]
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012d90:	2100      	movs	r1, #0
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7fe f926 	bl	8010fe4 <dir_sdi>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8012d9c:	7dfb      	ldrb	r3, [r7, #23]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d114      	bne.n	8012dcc <f_opendir+0xc6>
					if (obj->sclust) {
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	689b      	ldr	r3, [r3, #8]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00d      	beq.n	8012dc6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012daa:	2100      	movs	r1, #0
 8012dac:	6878      	ldr	r0, [r7, #4]
 8012dae:	f7fd fc6f 	bl	8010690 <inc_lock>
 8012db2:	4602      	mov	r2, r0
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012db8:	693b      	ldr	r3, [r7, #16]
 8012dba:	691b      	ldr	r3, [r3, #16]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d105      	bne.n	8012dcc <f_opendir+0xc6>
 8012dc0:	2312      	movs	r3, #18
 8012dc2:	75fb      	strb	r3, [r7, #23]
 8012dc4:	e002      	b.n	8012dcc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012dc6:	693b      	ldr	r3, [r7, #16]
 8012dc8:	2200      	movs	r2, #0
 8012dca:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012dcc:	7dfb      	ldrb	r3, [r7, #23]
 8012dce:	2b04      	cmp	r3, #4
 8012dd0:	d101      	bne.n	8012dd6 <f_opendir+0xd0>
 8012dd2:	2305      	movs	r3, #5
 8012dd4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012dd6:	7dfb      	ldrb	r3, [r7, #23]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d002      	beq.n	8012de2 <f_opendir+0xdc>
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	2200      	movs	r2, #0
 8012de0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	7dfa      	ldrb	r2, [r7, #23]
 8012de6:	4611      	mov	r1, r2
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7fd fbb8 	bl	801055e <unlock_fs>
 8012dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8012df0:	4618      	mov	r0, r3
 8012df2:	3718      	adds	r7, #24
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}

08012df8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f107 0208 	add.w	r2, r7, #8
 8012e06:	4611      	mov	r1, r2
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff f88b 	bl	8011f24 <validate>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e12:	7bfb      	ldrb	r3, [r7, #15]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d115      	bne.n	8012e44 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d006      	beq.n	8012e2e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	691b      	ldr	r3, [r3, #16]
 8012e24:	4618      	mov	r0, r3
 8012e26:	f7fd fcc1 	bl	80107ac <dec_lock>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d102      	bne.n	8012e3a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2200      	movs	r2, #0
 8012e38:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	2100      	movs	r1, #0
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7fd fb8d 	bl	801055e <unlock_fs>
#endif
	}
	return res;
 8012e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e46:	4618      	mov	r0, r3
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}

08012e4e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012e4e:	b580      	push	{r7, lr}
 8012e50:	b084      	sub	sp, #16
 8012e52:	af00      	add	r7, sp, #0
 8012e54:	6078      	str	r0, [r7, #4]
 8012e56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f107 0208 	add.w	r2, r7, #8
 8012e5e:	4611      	mov	r1, r2
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7ff f85f 	bl	8011f24 <validate>
 8012e66:	4603      	mov	r3, r0
 8012e68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d126      	bne.n	8012ebe <f_readdir+0x70>
		if (!fno) {
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d106      	bne.n	8012e84 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012e76:	2100      	movs	r1, #0
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7fe f8b3 	bl	8010fe4 <dir_sdi>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	73fb      	strb	r3, [r7, #15]
 8012e82:	e01c      	b.n	8012ebe <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8012e84:	2100      	movs	r1, #0
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7fe fa72 	bl	8011370 <dir_read>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012e90:	7bfb      	ldrb	r3, [r7, #15]
 8012e92:	2b04      	cmp	r3, #4
 8012e94:	d101      	bne.n	8012e9a <f_readdir+0x4c>
 8012e96:	2300      	movs	r3, #0
 8012e98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8012e9a:	7bfb      	ldrb	r3, [r7, #15]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d10e      	bne.n	8012ebe <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012ea0:	6839      	ldr	r1, [r7, #0]
 8012ea2:	6878      	ldr	r0, [r7, #4]
 8012ea4:	f7fe fb48 	bl	8011538 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012ea8:	2100      	movs	r1, #0
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f7fe f915 	bl	80110da <dir_next>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012eb4:	7bfb      	ldrb	r3, [r7, #15]
 8012eb6:	2b04      	cmp	r3, #4
 8012eb8:	d101      	bne.n	8012ebe <f_readdir+0x70>
 8012eba:	2300      	movs	r3, #0
 8012ebc:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	7bfa      	ldrb	r2, [r7, #15]
 8012ec2:	4611      	mov	r1, r2
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fd fb4a 	bl	801055e <unlock_fs>
 8012eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3710      	adds	r7, #16
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}

08012ed4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b084      	sub	sp, #16
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012ede:	6839      	ldr	r1, [r7, #0]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7ff ffb4 	bl	8012e4e <f_readdir>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012eea:	7bfb      	ldrb	r3, [r7, #15]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d114      	bne.n	8012f1a <f_findnext+0x46>
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d011      	beq.n	8012f1a <f_findnext+0x46>
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	7a5b      	ldrb	r3, [r3, #9]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00d      	beq.n	8012f1a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	f103 0109 	add.w	r1, r3, #9
 8012f08:	2300      	movs	r3, #0
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f7fe fb9a 	bl	8011644 <pattern_matching>
 8012f10:	4603      	mov	r3, r0
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d100      	bne.n	8012f18 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8012f16:	e7e2      	b.n	8012ede <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012f18:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 8012f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	3710      	adds	r7, #16
 8012f20:	46bd      	mov	sp, r7
 8012f22:	bd80      	pop	{r7, pc}

08012f24 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012f24:	b580      	push	{r7, lr}
 8012f26:	b086      	sub	sp, #24
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	60f8      	str	r0, [r7, #12]
 8012f2c:	60b9      	str	r1, [r7, #8]
 8012f2e:	607a      	str	r2, [r7, #4]
 8012f30:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	683a      	ldr	r2, [r7, #0]
 8012f36:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 8012f38:	6879      	ldr	r1, [r7, #4]
 8012f3a:	68f8      	ldr	r0, [r7, #12]
 8012f3c:	f7ff fee3 	bl	8012d06 <f_opendir>
 8012f40:	4603      	mov	r3, r0
 8012f42:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012f44:	7dfb      	ldrb	r3, [r7, #23]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d105      	bne.n	8012f56 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 8012f4a:	68b9      	ldr	r1, [r7, #8]
 8012f4c:	68f8      	ldr	r0, [r7, #12]
 8012f4e:	f7ff ffc1 	bl	8012ed4 <f_findnext>
 8012f52:	4603      	mov	r3, r0
 8012f54:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 8012f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3718      	adds	r7, #24
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012f60:	b480      	push	{r7}
 8012f62:	b087      	sub	sp, #28
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012f6e:	2301      	movs	r3, #1
 8012f70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012f72:	2300      	movs	r3, #0
 8012f74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012f76:	4b1f      	ldr	r3, [pc, #124]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012f78:	7a5b      	ldrb	r3, [r3, #9]
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d131      	bne.n	8012fe4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012f80:	4b1c      	ldr	r3, [pc, #112]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012f82:	7a5b      	ldrb	r3, [r3, #9]
 8012f84:	b2db      	uxtb	r3, r3
 8012f86:	461a      	mov	r2, r3
 8012f88:	4b1a      	ldr	r3, [pc, #104]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012f8a:	2100      	movs	r1, #0
 8012f8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012f8e:	4b19      	ldr	r3, [pc, #100]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012f90:	7a5b      	ldrb	r3, [r3, #9]
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	4a17      	ldr	r2, [pc, #92]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	4413      	add	r3, r2
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012f9e:	4b15      	ldr	r3, [pc, #84]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012fa0:	7a5b      	ldrb	r3, [r3, #9]
 8012fa2:	b2db      	uxtb	r3, r3
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	4b13      	ldr	r3, [pc, #76]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012fa8:	4413      	add	r3, r2
 8012faa:	79fa      	ldrb	r2, [r7, #7]
 8012fac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012fae:	4b11      	ldr	r3, [pc, #68]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012fb0:	7a5b      	ldrb	r3, [r3, #9]
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	b2d1      	uxtb	r1, r2
 8012fb8:	4a0e      	ldr	r2, [pc, #56]	; (8012ff4 <FATFS_LinkDriverEx+0x94>)
 8012fba:	7251      	strb	r1, [r2, #9]
 8012fbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012fbe:	7dbb      	ldrb	r3, [r7, #22]
 8012fc0:	3330      	adds	r3, #48	; 0x30
 8012fc2:	b2da      	uxtb	r2, r3
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012fc8:	68bb      	ldr	r3, [r7, #8]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	223a      	movs	r2, #58	; 0x3a
 8012fce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	3302      	adds	r3, #2
 8012fd4:	222f      	movs	r2, #47	; 0x2f
 8012fd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	3303      	adds	r3, #3
 8012fdc:	2200      	movs	r2, #0
 8012fde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	371c      	adds	r7, #28
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	20000464 	.word	0x20000464

08012ff8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b082      	sub	sp, #8
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
 8013000:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013002:	2200      	movs	r2, #0
 8013004:	6839      	ldr	r1, [r7, #0]
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7ff ffaa 	bl	8012f60 <FATFS_LinkDriverEx>
 801300c:	4603      	mov	r3, r0
}
 801300e:	4618      	mov	r0, r3
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013016:	b580      	push	{r7, lr}
 8013018:	b084      	sub	sp, #16
 801301a:	af00      	add	r7, sp, #0
 801301c:	4603      	mov	r3, r0
 801301e:	6039      	str	r1, [r7, #0]
 8013020:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8013022:	2200      	movs	r2, #0
 8013024:	2101      	movs	r1, #1
 8013026:	2001      	movs	r0, #1
 8013028:	f000 fb5e 	bl	80136e8 <osSemaphoreNew>
 801302c:	4602      	mov	r2, r0
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	bf14      	ite	ne
 801303a:	2301      	movne	r3, #1
 801303c:	2300      	moveq	r3, #0
 801303e:	b2db      	uxtb	r3, r3
 8013040:	60fb      	str	r3, [r7, #12]

    return ret;
 8013042:	68fb      	ldr	r3, [r7, #12]
}
 8013044:	4618      	mov	r0, r3
 8013046:	3710      	adds	r7, #16
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013054:	6878      	ldr	r0, [r7, #4]
 8013056:	f000 fca3 	bl	80139a0 <osSemaphoreDelete>
#endif
    return 1;
 801305a:	2301      	movs	r3, #1
}
 801305c:	4618      	mov	r0, r3
 801305e:	3708      	adds	r7, #8
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}

08013064 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 fbd5 	bl	8013824 <osSemaphoreAcquire>
 801307a:	4603      	mov	r3, r0
 801307c:	2b00      	cmp	r3, #0
 801307e:	d101      	bne.n	8013084 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013080:	2301      	movs	r3, #1
 8013082:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013084:	68fb      	ldr	r3, [r7, #12]
}
 8013086:	4618      	mov	r0, r3
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}

0801308e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801308e:	b580      	push	{r7, lr}
 8013090:	b082      	sub	sp, #8
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f000 fc2a 	bl	80138f0 <osSemaphoreRelease>
#endif
}
 801309c:	bf00      	nop
 801309e:	3708      	adds	r7, #8
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}

080130a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80130a4:	b480      	push	{r7}
 80130a6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80130a8:	bf00      	nop
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr
	...

080130b4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80130b4:	b480      	push	{r7}
 80130b6:	b085      	sub	sp, #20
 80130b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130ba:	f3ef 8305 	mrs	r3, IPSR
 80130be:	60bb      	str	r3, [r7, #8]
  return(result);
 80130c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d10f      	bne.n	80130e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80130c6:	f3ef 8310 	mrs	r3, PRIMASK
 80130ca:	607b      	str	r3, [r7, #4]
  return(result);
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d105      	bne.n	80130de <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80130d2:	f3ef 8311 	mrs	r3, BASEPRI
 80130d6:	603b      	str	r3, [r7, #0]
  return(result);
 80130d8:	683b      	ldr	r3, [r7, #0]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d007      	beq.n	80130ee <osKernelInitialize+0x3a>
 80130de:	4b0e      	ldr	r3, [pc, #56]	; (8013118 <osKernelInitialize+0x64>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	2b02      	cmp	r3, #2
 80130e4:	d103      	bne.n	80130ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80130e6:	f06f 0305 	mvn.w	r3, #5
 80130ea:	60fb      	str	r3, [r7, #12]
 80130ec:	e00c      	b.n	8013108 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130ee:	4b0a      	ldr	r3, [pc, #40]	; (8013118 <osKernelInitialize+0x64>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d105      	bne.n	8013102 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130f6:	4b08      	ldr	r3, [pc, #32]	; (8013118 <osKernelInitialize+0x64>)
 80130f8:	2201      	movs	r2, #1
 80130fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130fc:	2300      	movs	r3, #0
 80130fe:	60fb      	str	r3, [r7, #12]
 8013100:	e002      	b.n	8013108 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8013102:	f04f 33ff 	mov.w	r3, #4294967295
 8013106:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8013108:	68fb      	ldr	r3, [r7, #12]
}
 801310a:	4618      	mov	r0, r3
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	20000470 	.word	0x20000470

0801311c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8013122:	f002 fe7b 	bl	8015e1c <xTaskGetSchedulerState>
 8013126:	4603      	mov	r3, r0
 8013128:	2b00      	cmp	r3, #0
 801312a:	d004      	beq.n	8013136 <osKernelGetState+0x1a>
 801312c:	2b02      	cmp	r3, #2
 801312e:	d105      	bne.n	801313c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8013130:	2302      	movs	r3, #2
 8013132:	607b      	str	r3, [r7, #4]
      break;
 8013134:	e00c      	b.n	8013150 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8013136:	2303      	movs	r3, #3
 8013138:	607b      	str	r3, [r7, #4]
      break;
 801313a:	e009      	b.n	8013150 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 801313c:	4b07      	ldr	r3, [pc, #28]	; (801315c <osKernelGetState+0x40>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d102      	bne.n	801314a <osKernelGetState+0x2e>
        state = osKernelReady;
 8013144:	2301      	movs	r3, #1
 8013146:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8013148:	e001      	b.n	801314e <osKernelGetState+0x32>
        state = osKernelInactive;
 801314a:	2300      	movs	r3, #0
 801314c:	607b      	str	r3, [r7, #4]
      break;
 801314e:	bf00      	nop
  }

  return (state);
 8013150:	687b      	ldr	r3, [r7, #4]
}
 8013152:	4618      	mov	r0, r3
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	20000470 	.word	0x20000470

08013160 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013166:	f3ef 8305 	mrs	r3, IPSR
 801316a:	60bb      	str	r3, [r7, #8]
  return(result);
 801316c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801316e:	2b00      	cmp	r3, #0
 8013170:	d10f      	bne.n	8013192 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013172:	f3ef 8310 	mrs	r3, PRIMASK
 8013176:	607b      	str	r3, [r7, #4]
  return(result);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d105      	bne.n	801318a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801317e:	f3ef 8311 	mrs	r3, BASEPRI
 8013182:	603b      	str	r3, [r7, #0]
  return(result);
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d007      	beq.n	801319a <osKernelStart+0x3a>
 801318a:	4b0f      	ldr	r3, [pc, #60]	; (80131c8 <osKernelStart+0x68>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	2b02      	cmp	r3, #2
 8013190:	d103      	bne.n	801319a <osKernelStart+0x3a>
    stat = osErrorISR;
 8013192:	f06f 0305 	mvn.w	r3, #5
 8013196:	60fb      	str	r3, [r7, #12]
 8013198:	e010      	b.n	80131bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 801319a:	4b0b      	ldr	r3, [pc, #44]	; (80131c8 <osKernelStart+0x68>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b01      	cmp	r3, #1
 80131a0:	d109      	bne.n	80131b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80131a2:	f7ff ff7f 	bl	80130a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80131a6:	4b08      	ldr	r3, [pc, #32]	; (80131c8 <osKernelStart+0x68>)
 80131a8:	2202      	movs	r2, #2
 80131aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80131ac:	f002 f9c8 	bl	8015540 <vTaskStartScheduler>
      stat = osOK;
 80131b0:	2300      	movs	r3, #0
 80131b2:	60fb      	str	r3, [r7, #12]
 80131b4:	e002      	b.n	80131bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80131b6:	f04f 33ff 	mov.w	r3, #4294967295
 80131ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80131bc:	68fb      	ldr	r3, [r7, #12]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20000470 	.word	0x20000470

080131cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131d2:	f3ef 8305 	mrs	r3, IPSR
 80131d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80131d8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d10f      	bne.n	80131fe <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131de:	f3ef 8310 	mrs	r3, PRIMASK
 80131e2:	607b      	str	r3, [r7, #4]
  return(result);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d105      	bne.n	80131f6 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80131ea:	f3ef 8311 	mrs	r3, BASEPRI
 80131ee:	603b      	str	r3, [r7, #0]
  return(result);
 80131f0:	683b      	ldr	r3, [r7, #0]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d007      	beq.n	8013206 <osKernelGetTickCount+0x3a>
 80131f6:	4b08      	ldr	r3, [pc, #32]	; (8013218 <osKernelGetTickCount+0x4c>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2b02      	cmp	r3, #2
 80131fc:	d103      	bne.n	8013206 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80131fe:	f002 fac3 	bl	8015788 <xTaskGetTickCountFromISR>
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	e002      	b.n	801320c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8013206:	f002 faaf 	bl	8015768 <xTaskGetTickCount>
 801320a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 801320c:	68fb      	ldr	r3, [r7, #12]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3710      	adds	r7, #16
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	20000470 	.word	0x20000470

0801321c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 801321c:	b480      	push	{r7}
 801321e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8013220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8013224:	4618      	mov	r0, r3
 8013226:	46bd      	mov	sp, r7
 8013228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801322c:	4770      	bx	lr
	...

08013230 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013230:	b580      	push	{r7, lr}
 8013232:	b090      	sub	sp, #64	; 0x40
 8013234:	af04      	add	r7, sp, #16
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801323c:	2300      	movs	r3, #0
 801323e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013240:	f3ef 8305 	mrs	r3, IPSR
 8013244:	61fb      	str	r3, [r7, #28]
  return(result);
 8013246:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8013248:	2b00      	cmp	r3, #0
 801324a:	f040 808f 	bne.w	801336c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801324e:	f3ef 8310 	mrs	r3, PRIMASK
 8013252:	61bb      	str	r3, [r7, #24]
  return(result);
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801325a:	f3ef 8311 	mrs	r3, BASEPRI
 801325e:	617b      	str	r3, [r7, #20]
  return(result);
 8013260:	697b      	ldr	r3, [r7, #20]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d003      	beq.n	801326e <osThreadNew+0x3e>
 8013266:	4b44      	ldr	r3, [pc, #272]	; (8013378 <osThreadNew+0x148>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	2b02      	cmp	r3, #2
 801326c:	d07e      	beq.n	801336c <osThreadNew+0x13c>
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d07b      	beq.n	801336c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8013274:	2380      	movs	r3, #128	; 0x80
 8013276:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8013278:	2318      	movs	r3, #24
 801327a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 801327c:	2300      	movs	r3, #0
 801327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295
 8013284:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d045      	beq.n	8013318 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d002      	beq.n	801329a <osThreadNew+0x6a>
        name = attr->name;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	699b      	ldr	r3, [r3, #24]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d002      	beq.n	80132a8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	699b      	ldr	r3, [r3, #24]
 80132a6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80132a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d008      	beq.n	80132c0 <osThreadNew+0x90>
 80132ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b0:	2b38      	cmp	r3, #56	; 0x38
 80132b2:	d805      	bhi.n	80132c0 <osThreadNew+0x90>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	685b      	ldr	r3, [r3, #4]
 80132b8:	f003 0301 	and.w	r3, r3, #1
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d001      	beq.n	80132c4 <osThreadNew+0x94>
        return (NULL);
 80132c0:	2300      	movs	r3, #0
 80132c2:	e054      	b.n	801336e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	695b      	ldr	r3, [r3, #20]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d003      	beq.n	80132d4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	695b      	ldr	r3, [r3, #20]
 80132d0:	089b      	lsrs	r3, r3, #2
 80132d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d00e      	beq.n	80132fa <osThreadNew+0xca>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	2b5b      	cmp	r3, #91	; 0x5b
 80132e2:	d90a      	bls.n	80132fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d006      	beq.n	80132fa <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	695b      	ldr	r3, [r3, #20]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d002      	beq.n	80132fa <osThreadNew+0xca>
        mem = 1;
 80132f4:	2301      	movs	r3, #1
 80132f6:	623b      	str	r3, [r7, #32]
 80132f8:	e010      	b.n	801331c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	689b      	ldr	r3, [r3, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d10c      	bne.n	801331c <osThreadNew+0xec>
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	68db      	ldr	r3, [r3, #12]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d108      	bne.n	801331c <osThreadNew+0xec>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	691b      	ldr	r3, [r3, #16]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d104      	bne.n	801331c <osThreadNew+0xec>
          mem = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	623b      	str	r3, [r7, #32]
 8013316:	e001      	b.n	801331c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8013318:	2300      	movs	r3, #0
 801331a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 801331c:	6a3b      	ldr	r3, [r7, #32]
 801331e:	2b01      	cmp	r3, #1
 8013320:	d110      	bne.n	8013344 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8013326:	687a      	ldr	r2, [r7, #4]
 8013328:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801332a:	9202      	str	r2, [sp, #8]
 801332c:	9301      	str	r3, [sp, #4]
 801332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013330:	9300      	str	r3, [sp, #0]
 8013332:	68bb      	ldr	r3, [r7, #8]
 8013334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013338:	68f8      	ldr	r0, [r7, #12]
 801333a:	f001 fea5 	bl	8015088 <xTaskCreateStatic>
 801333e:	4603      	mov	r3, r0
 8013340:	613b      	str	r3, [r7, #16]
 8013342:	e013      	b.n	801336c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8013344:	6a3b      	ldr	r3, [r7, #32]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d110      	bne.n	801336c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801334c:	b29a      	uxth	r2, r3
 801334e:	f107 0310 	add.w	r3, r7, #16
 8013352:	9301      	str	r3, [sp, #4]
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801335c:	68f8      	ldr	r0, [r7, #12]
 801335e:	f001 fef3 	bl	8015148 <xTaskCreate>
 8013362:	4603      	mov	r3, r0
 8013364:	2b01      	cmp	r3, #1
 8013366:	d001      	beq.n	801336c <osThreadNew+0x13c>
          hTask = NULL;
 8013368:	2300      	movs	r3, #0
 801336a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 801336c:	693b      	ldr	r3, [r7, #16]
}
 801336e:	4618      	mov	r0, r3
 8013370:	3730      	adds	r7, #48	; 0x30
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}
 8013376:	bf00      	nop
 8013378:	20000470 	.word	0x20000470

0801337c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 801337c:	b580      	push	{r7, lr}
 801337e:	b086      	sub	sp, #24
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013384:	f3ef 8305 	mrs	r3, IPSR
 8013388:	613b      	str	r3, [r7, #16]
  return(result);
 801338a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10f      	bne.n	80133b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013390:	f3ef 8310 	mrs	r3, PRIMASK
 8013394:	60fb      	str	r3, [r7, #12]
  return(result);
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d105      	bne.n	80133a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801339c:	f3ef 8311 	mrs	r3, BASEPRI
 80133a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d007      	beq.n	80133b8 <osDelay+0x3c>
 80133a8:	4b0a      	ldr	r3, [pc, #40]	; (80133d4 <osDelay+0x58>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2b02      	cmp	r3, #2
 80133ae:	d103      	bne.n	80133b8 <osDelay+0x3c>
    stat = osErrorISR;
 80133b0:	f06f 0305 	mvn.w	r3, #5
 80133b4:	617b      	str	r3, [r7, #20]
 80133b6:	e007      	b.n	80133c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80133b8:	2300      	movs	r3, #0
 80133ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f002 f886 	bl	80154d4 <vTaskDelay>
    }
  }

  return (stat);
 80133c8:	697b      	ldr	r3, [r7, #20]
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3718      	adds	r7, #24
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
 80133d2:	bf00      	nop
 80133d4:	20000470 	.word	0x20000470

080133d8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 80133d8:	b580      	push	{r7, lr}
 80133da:	b088      	sub	sp, #32
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133e0:	f3ef 8305 	mrs	r3, IPSR
 80133e4:	617b      	str	r3, [r7, #20]
  return(result);
 80133e6:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d10f      	bne.n	801340c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80133ec:	f3ef 8310 	mrs	r3, PRIMASK
 80133f0:	613b      	str	r3, [r7, #16]
  return(result);
 80133f2:	693b      	ldr	r3, [r7, #16]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d105      	bne.n	8013404 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80133f8:	f3ef 8311 	mrs	r3, BASEPRI
 80133fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <osDelayUntil+0x3c>
 8013404:	4b13      	ldr	r3, [pc, #76]	; (8013454 <osDelayUntil+0x7c>)
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b02      	cmp	r3, #2
 801340a:	d103      	bne.n	8013414 <osDelayUntil+0x3c>
    stat = osErrorISR;
 801340c:	f06f 0305 	mvn.w	r3, #5
 8013410:	61fb      	str	r3, [r7, #28]
 8013412:	e019      	b.n	8013448 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8013414:	2300      	movs	r3, #0
 8013416:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8013418:	f002 f9a6 	bl	8015768 <xTaskGetTickCount>
 801341c:	4603      	mov	r3, r0
 801341e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	1ad3      	subs	r3, r2, r3
 8013426:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d009      	beq.n	8013442 <osDelayUntil+0x6a>
 801342e:	69bb      	ldr	r3, [r7, #24]
 8013430:	2b00      	cmp	r3, #0
 8013432:	db06      	blt.n	8013442 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8013434:	f107 0308 	add.w	r3, r7, #8
 8013438:	69b9      	ldr	r1, [r7, #24]
 801343a:	4618      	mov	r0, r3
 801343c:	f001 ffca 	bl	80153d4 <vTaskDelayUntil>
 8013440:	e002      	b.n	8013448 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8013442:	f06f 0303 	mvn.w	r3, #3
 8013446:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8013448:	69fb      	ldr	r3, [r7, #28]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3720      	adds	r7, #32
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	20000470 	.word	0x20000470

08013458 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8013458:	b580      	push	{r7, lr}
 801345a:	b08a      	sub	sp, #40	; 0x28
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8013460:	2300      	movs	r3, #0
 8013462:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013464:	f3ef 8305 	mrs	r3, IPSR
 8013468:	613b      	str	r3, [r7, #16]
  return(result);
 801346a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 801346c:	2b00      	cmp	r3, #0
 801346e:	f040 8085 	bne.w	801357c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013472:	f3ef 8310 	mrs	r3, PRIMASK
 8013476:	60fb      	str	r3, [r7, #12]
  return(result);
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d105      	bne.n	801348a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801347e:	f3ef 8311 	mrs	r3, BASEPRI
 8013482:	60bb      	str	r3, [r7, #8]
  return(result);
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d003      	beq.n	8013492 <osMutexNew+0x3a>
 801348a:	4b3f      	ldr	r3, [pc, #252]	; (8013588 <osMutexNew+0x130>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	2b02      	cmp	r3, #2
 8013490:	d074      	beq.n	801357c <osMutexNew+0x124>
    if (attr != NULL) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d003      	beq.n	80134a0 <osMutexNew+0x48>
      type = attr->attr_bits;
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	623b      	str	r3, [r7, #32]
 801349e:	e001      	b.n	80134a4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80134a0:	2300      	movs	r3, #0
 80134a2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80134a4:	6a3b      	ldr	r3, [r7, #32]
 80134a6:	f003 0301 	and.w	r3, r3, #1
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d002      	beq.n	80134b4 <osMutexNew+0x5c>
      rmtx = 1U;
 80134ae:	2301      	movs	r3, #1
 80134b0:	61fb      	str	r3, [r7, #28]
 80134b2:	e001      	b.n	80134b8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80134b4:	2300      	movs	r3, #0
 80134b6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80134b8:	6a3b      	ldr	r3, [r7, #32]
 80134ba:	f003 0308 	and.w	r3, r3, #8
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d15c      	bne.n	801357c <osMutexNew+0x124>
      mem = -1;
 80134c2:	f04f 33ff 	mov.w	r3, #4294967295
 80134c6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d015      	beq.n	80134fa <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d006      	beq.n	80134e4 <osMutexNew+0x8c>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	2b4f      	cmp	r3, #79	; 0x4f
 80134dc:	d902      	bls.n	80134e4 <osMutexNew+0x8c>
          mem = 1;
 80134de:	2301      	movs	r3, #1
 80134e0:	61bb      	str	r3, [r7, #24]
 80134e2:	e00c      	b.n	80134fe <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	689b      	ldr	r3, [r3, #8]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d108      	bne.n	80134fe <osMutexNew+0xa6>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	68db      	ldr	r3, [r3, #12]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d104      	bne.n	80134fe <osMutexNew+0xa6>
            mem = 0;
 80134f4:	2300      	movs	r3, #0
 80134f6:	61bb      	str	r3, [r7, #24]
 80134f8:	e001      	b.n	80134fe <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80134fa:	2300      	movs	r3, #0
 80134fc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80134fe:	69bb      	ldr	r3, [r7, #24]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d112      	bne.n	801352a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d007      	beq.n	801351a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	4619      	mov	r1, r3
 8013510:	2004      	movs	r0, #4
 8013512:	f000 fe4c 	bl	80141ae <xQueueCreateMutexStatic>
 8013516:	6278      	str	r0, [r7, #36]	; 0x24
 8013518:	e016      	b.n	8013548 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	689b      	ldr	r3, [r3, #8]
 801351e:	4619      	mov	r1, r3
 8013520:	2001      	movs	r0, #1
 8013522:	f000 fe44 	bl	80141ae <xQueueCreateMutexStatic>
 8013526:	6278      	str	r0, [r7, #36]	; 0x24
 8013528:	e00e      	b.n	8013548 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 801352a:	69bb      	ldr	r3, [r7, #24]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d10b      	bne.n	8013548 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8013530:	69fb      	ldr	r3, [r7, #28]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d004      	beq.n	8013540 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8013536:	2004      	movs	r0, #4
 8013538:	f000 fe21 	bl	801417e <xQueueCreateMutex>
 801353c:	6278      	str	r0, [r7, #36]	; 0x24
 801353e:	e003      	b.n	8013548 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8013540:	2001      	movs	r0, #1
 8013542:	f000 fe1c 	bl	801417e <xQueueCreateMutex>
 8013546:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8013548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00c      	beq.n	8013568 <osMutexNew+0x110>
        if (attr != NULL) {
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d003      	beq.n	801355c <osMutexNew+0x104>
          name = attr->name;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	617b      	str	r3, [r7, #20]
 801355a:	e001      	b.n	8013560 <osMutexNew+0x108>
        } else {
          name = NULL;
 801355c:	2300      	movs	r3, #0
 801355e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8013560:	6979      	ldr	r1, [r7, #20]
 8013562:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013564:	f001 fd0a 	bl	8014f7c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	2b00      	cmp	r3, #0
 801356c:	d006      	beq.n	801357c <osMutexNew+0x124>
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d003      	beq.n	801357c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8013574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013576:	f043 0301 	orr.w	r3, r3, #1
 801357a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801357e:	4618      	mov	r0, r3
 8013580:	3728      	adds	r7, #40	; 0x28
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	20000470 	.word	0x20000470

0801358c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801358c:	b580      	push	{r7, lr}
 801358e:	b088      	sub	sp, #32
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f023 0301 	bic.w	r3, r3, #1
 801359c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f003 0301 	and.w	r3, r3, #1
 80135a4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80135a6:	2300      	movs	r3, #0
 80135a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135aa:	f3ef 8305 	mrs	r3, IPSR
 80135ae:	613b      	str	r3, [r7, #16]
  return(result);
 80135b0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10f      	bne.n	80135d6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135b6:	f3ef 8310 	mrs	r3, PRIMASK
 80135ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d105      	bne.n	80135ce <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80135c2:	f3ef 8311 	mrs	r3, BASEPRI
 80135c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d007      	beq.n	80135de <osMutexAcquire+0x52>
 80135ce:	4b1d      	ldr	r3, [pc, #116]	; (8013644 <osMutexAcquire+0xb8>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	2b02      	cmp	r3, #2
 80135d4:	d103      	bne.n	80135de <osMutexAcquire+0x52>
    stat = osErrorISR;
 80135d6:	f06f 0305 	mvn.w	r3, #5
 80135da:	61fb      	str	r3, [r7, #28]
 80135dc:	e02c      	b.n	8013638 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d103      	bne.n	80135ec <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80135e4:	f06f 0303 	mvn.w	r3, #3
 80135e8:	61fb      	str	r3, [r7, #28]
 80135ea:	e025      	b.n	8013638 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d011      	beq.n	8013616 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	69b8      	ldr	r0, [r7, #24]
 80135f6:	f000 fe2a 	bl	801424e <xQueueTakeMutexRecursive>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d01b      	beq.n	8013638 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d003      	beq.n	801360e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8013606:	f06f 0301 	mvn.w	r3, #1
 801360a:	61fb      	str	r3, [r7, #28]
 801360c:	e014      	b.n	8013638 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801360e:	f06f 0302 	mvn.w	r3, #2
 8013612:	61fb      	str	r3, [r7, #28]
 8013614:	e010      	b.n	8013638 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8013616:	6839      	ldr	r1, [r7, #0]
 8013618:	69b8      	ldr	r0, [r7, #24]
 801361a:	f001 f9cf 	bl	80149bc <xQueueSemaphoreTake>
 801361e:	4603      	mov	r3, r0
 8013620:	2b01      	cmp	r3, #1
 8013622:	d009      	beq.n	8013638 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8013624:	683b      	ldr	r3, [r7, #0]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d003      	beq.n	8013632 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 801362a:	f06f 0301 	mvn.w	r3, #1
 801362e:	61fb      	str	r3, [r7, #28]
 8013630:	e002      	b.n	8013638 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8013632:	f06f 0302 	mvn.w	r3, #2
 8013636:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013638:	69fb      	ldr	r3, [r7, #28]
}
 801363a:	4618      	mov	r0, r3
 801363c:	3720      	adds	r7, #32
 801363e:	46bd      	mov	sp, r7
 8013640:	bd80      	pop	{r7, pc}
 8013642:	bf00      	nop
 8013644:	20000470 	.word	0x20000470

08013648 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f023 0301 	bic.w	r3, r3, #1
 8013656:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	f003 0301 	and.w	r3, r3, #1
 801365e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8013660:	2300      	movs	r3, #0
 8013662:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013664:	f3ef 8305 	mrs	r3, IPSR
 8013668:	613b      	str	r3, [r7, #16]
  return(result);
 801366a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801366c:	2b00      	cmp	r3, #0
 801366e:	d10f      	bne.n	8013690 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013670:	f3ef 8310 	mrs	r3, PRIMASK
 8013674:	60fb      	str	r3, [r7, #12]
  return(result);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d105      	bne.n	8013688 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801367c:	f3ef 8311 	mrs	r3, BASEPRI
 8013680:	60bb      	str	r3, [r7, #8]
  return(result);
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d007      	beq.n	8013698 <osMutexRelease+0x50>
 8013688:	4b16      	ldr	r3, [pc, #88]	; (80136e4 <osMutexRelease+0x9c>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	2b02      	cmp	r3, #2
 801368e:	d103      	bne.n	8013698 <osMutexRelease+0x50>
    stat = osErrorISR;
 8013690:	f06f 0305 	mvn.w	r3, #5
 8013694:	61fb      	str	r3, [r7, #28]
 8013696:	e01f      	b.n	80136d8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8013698:	69bb      	ldr	r3, [r7, #24]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d103      	bne.n	80136a6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801369e:	f06f 0303 	mvn.w	r3, #3
 80136a2:	61fb      	str	r3, [r7, #28]
 80136a4:	e018      	b.n	80136d8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d009      	beq.n	80136c0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80136ac:	69b8      	ldr	r0, [r7, #24]
 80136ae:	f000 fd99 	bl	80141e4 <xQueueGiveMutexRecursive>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d00f      	beq.n	80136d8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80136b8:	f06f 0302 	mvn.w	r3, #2
 80136bc:	61fb      	str	r3, [r7, #28]
 80136be:	e00b      	b.n	80136d8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80136c0:	2300      	movs	r3, #0
 80136c2:	2200      	movs	r2, #0
 80136c4:	2100      	movs	r1, #0
 80136c6:	69b8      	ldr	r0, [r7, #24]
 80136c8:	f000 fe66 	bl	8014398 <xQueueGenericSend>
 80136cc:	4603      	mov	r3, r0
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d002      	beq.n	80136d8 <osMutexRelease+0x90>
        stat = osErrorResource;
 80136d2:	f06f 0302 	mvn.w	r3, #2
 80136d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80136d8:	69fb      	ldr	r3, [r7, #28]
}
 80136da:	4618      	mov	r0, r3
 80136dc:	3720      	adds	r7, #32
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd80      	pop	{r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20000470 	.word	0x20000470

080136e8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b08c      	sub	sp, #48	; 0x30
 80136ec:	af02      	add	r7, sp, #8
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80136f4:	2300      	movs	r3, #0
 80136f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80136f8:	f3ef 8305 	mrs	r3, IPSR
 80136fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80136fe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8013700:	2b00      	cmp	r3, #0
 8013702:	f040 8087 	bne.w	8013814 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013706:	f3ef 8310 	mrs	r3, PRIMASK
 801370a:	617b      	str	r3, [r7, #20]
  return(result);
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d105      	bne.n	801371e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013712:	f3ef 8311 	mrs	r3, BASEPRI
 8013716:	613b      	str	r3, [r7, #16]
  return(result);
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d003      	beq.n	8013726 <osSemaphoreNew+0x3e>
 801371e:	4b40      	ldr	r3, [pc, #256]	; (8013820 <osSemaphoreNew+0x138>)
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	2b02      	cmp	r3, #2
 8013724:	d076      	beq.n	8013814 <osSemaphoreNew+0x12c>
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d073      	beq.n	8013814 <osSemaphoreNew+0x12c>
 801372c:	68ba      	ldr	r2, [r7, #8]
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	429a      	cmp	r2, r3
 8013732:	d86f      	bhi.n	8013814 <osSemaphoreNew+0x12c>
    mem = -1;
 8013734:	f04f 33ff 	mov.w	r3, #4294967295
 8013738:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d015      	beq.n	801376c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d006      	beq.n	8013756 <osSemaphoreNew+0x6e>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	68db      	ldr	r3, [r3, #12]
 801374c:	2b4f      	cmp	r3, #79	; 0x4f
 801374e:	d902      	bls.n	8013756 <osSemaphoreNew+0x6e>
        mem = 1;
 8013750:	2301      	movs	r3, #1
 8013752:	623b      	str	r3, [r7, #32]
 8013754:	e00c      	b.n	8013770 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	689b      	ldr	r3, [r3, #8]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d108      	bne.n	8013770 <osSemaphoreNew+0x88>
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	68db      	ldr	r3, [r3, #12]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d104      	bne.n	8013770 <osSemaphoreNew+0x88>
          mem = 0;
 8013766:	2300      	movs	r3, #0
 8013768:	623b      	str	r3, [r7, #32]
 801376a:	e001      	b.n	8013770 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801376c:	2300      	movs	r3, #0
 801376e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8013770:	6a3b      	ldr	r3, [r7, #32]
 8013772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013776:	d04d      	beq.n	8013814 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2b01      	cmp	r3, #1
 801377c:	d129      	bne.n	80137d2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 801377e:	6a3b      	ldr	r3, [r7, #32]
 8013780:	2b01      	cmp	r3, #1
 8013782:	d10b      	bne.n	801379c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	689a      	ldr	r2, [r3, #8]
 8013788:	2303      	movs	r3, #3
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	4613      	mov	r3, r2
 801378e:	2200      	movs	r2, #0
 8013790:	2100      	movs	r1, #0
 8013792:	2001      	movs	r0, #1
 8013794:	f000 fbf8 	bl	8013f88 <xQueueGenericCreateStatic>
 8013798:	6278      	str	r0, [r7, #36]	; 0x24
 801379a:	e005      	b.n	80137a8 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801379c:	2203      	movs	r2, #3
 801379e:	2100      	movs	r1, #0
 80137a0:	2001      	movs	r0, #1
 80137a2:	f000 fc6e 	bl	8014082 <xQueueGenericCreate>
 80137a6:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d022      	beq.n	80137f4 <osSemaphoreNew+0x10c>
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d01f      	beq.n	80137f4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80137b4:	2300      	movs	r3, #0
 80137b6:	2200      	movs	r2, #0
 80137b8:	2100      	movs	r1, #0
 80137ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137bc:	f000 fdec 	bl	8014398 <xQueueGenericSend>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d016      	beq.n	80137f4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80137c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137c8:	f001 fa8b 	bl	8014ce2 <vQueueDelete>
            hSemaphore = NULL;
 80137cc:	2300      	movs	r3, #0
 80137ce:	627b      	str	r3, [r7, #36]	; 0x24
 80137d0:	e010      	b.n	80137f4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80137d2:	6a3b      	ldr	r3, [r7, #32]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d108      	bne.n	80137ea <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	689b      	ldr	r3, [r3, #8]
 80137dc:	461a      	mov	r2, r3
 80137de:	68b9      	ldr	r1, [r7, #8]
 80137e0:	68f8      	ldr	r0, [r7, #12]
 80137e2:	f000 fd6b 	bl	80142bc <xQueueCreateCountingSemaphoreStatic>
 80137e6:	6278      	str	r0, [r7, #36]	; 0x24
 80137e8:	e004      	b.n	80137f4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80137ea:	68b9      	ldr	r1, [r7, #8]
 80137ec:	68f8      	ldr	r0, [r7, #12]
 80137ee:	f000 fd9e 	bl	801432e <xQueueCreateCountingSemaphore>
 80137f2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80137f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d00c      	beq.n	8013814 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d003      	beq.n	8013808 <osSemaphoreNew+0x120>
          name = attr->name;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	681b      	ldr	r3, [r3, #0]
 8013804:	61fb      	str	r3, [r7, #28]
 8013806:	e001      	b.n	801380c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8013808:	2300      	movs	r3, #0
 801380a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801380c:	69f9      	ldr	r1, [r7, #28]
 801380e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013810:	f001 fbb4 	bl	8014f7c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8013814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013816:	4618      	mov	r0, r3
 8013818:	3728      	adds	r7, #40	; 0x28
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	20000470 	.word	0x20000470

08013824 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8013824:	b580      	push	{r7, lr}
 8013826:	b088      	sub	sp, #32
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013832:	2300      	movs	r3, #0
 8013834:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d103      	bne.n	8013844 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801383c:	f06f 0303 	mvn.w	r3, #3
 8013840:	61fb      	str	r3, [r7, #28]
 8013842:	e04b      	b.n	80138dc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013844:	f3ef 8305 	mrs	r3, IPSR
 8013848:	617b      	str	r3, [r7, #20]
  return(result);
 801384a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10f      	bne.n	8013870 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013850:	f3ef 8310 	mrs	r3, PRIMASK
 8013854:	613b      	str	r3, [r7, #16]
  return(result);
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d105      	bne.n	8013868 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801385c:	f3ef 8311 	mrs	r3, BASEPRI
 8013860:	60fb      	str	r3, [r7, #12]
  return(result);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d026      	beq.n	80138b6 <osSemaphoreAcquire+0x92>
 8013868:	4b1f      	ldr	r3, [pc, #124]	; (80138e8 <osSemaphoreAcquire+0xc4>)
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	2b02      	cmp	r3, #2
 801386e:	d122      	bne.n	80138b6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	2b00      	cmp	r3, #0
 8013874:	d003      	beq.n	801387e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8013876:	f06f 0303 	mvn.w	r3, #3
 801387a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801387c:	e02d      	b.n	80138da <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801387e:	2300      	movs	r3, #0
 8013880:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8013882:	f107 0308 	add.w	r3, r7, #8
 8013886:	461a      	mov	r2, r3
 8013888:	2100      	movs	r1, #0
 801388a:	69b8      	ldr	r0, [r7, #24]
 801388c:	f001 f9a6 	bl	8014bdc <xQueueReceiveFromISR>
 8013890:	4603      	mov	r3, r0
 8013892:	2b01      	cmp	r3, #1
 8013894:	d003      	beq.n	801389e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8013896:	f06f 0302 	mvn.w	r3, #2
 801389a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801389c:	e01d      	b.n	80138da <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d01a      	beq.n	80138da <osSemaphoreAcquire+0xb6>
 80138a4:	4b11      	ldr	r3, [pc, #68]	; (80138ec <osSemaphoreAcquire+0xc8>)
 80138a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138aa:	601a      	str	r2, [r3, #0]
 80138ac:	f3bf 8f4f 	dsb	sy
 80138b0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80138b4:	e011      	b.n	80138da <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	69b8      	ldr	r0, [r7, #24]
 80138ba:	f001 f87f 	bl	80149bc <xQueueSemaphoreTake>
 80138be:	4603      	mov	r3, r0
 80138c0:	2b01      	cmp	r3, #1
 80138c2:	d00b      	beq.n	80138dc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80138c4:	683b      	ldr	r3, [r7, #0]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d003      	beq.n	80138d2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80138ca:	f06f 0301 	mvn.w	r3, #1
 80138ce:	61fb      	str	r3, [r7, #28]
 80138d0:	e004      	b.n	80138dc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80138d2:	f06f 0302 	mvn.w	r3, #2
 80138d6:	61fb      	str	r3, [r7, #28]
 80138d8:	e000      	b.n	80138dc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80138da:	bf00      	nop
      }
    }
  }

  return (stat);
 80138dc:	69fb      	ldr	r3, [r7, #28]
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3720      	adds	r7, #32
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	20000470 	.word	0x20000470
 80138ec:	e000ed04 	.word	0xe000ed04

080138f0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b088      	sub	sp, #32
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80138fc:	2300      	movs	r3, #0
 80138fe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8013900:	69bb      	ldr	r3, [r7, #24]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d103      	bne.n	801390e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8013906:	f06f 0303 	mvn.w	r3, #3
 801390a:	61fb      	str	r3, [r7, #28]
 801390c:	e03e      	b.n	801398c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801390e:	f3ef 8305 	mrs	r3, IPSR
 8013912:	617b      	str	r3, [r7, #20]
  return(result);
 8013914:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8013916:	2b00      	cmp	r3, #0
 8013918:	d10f      	bne.n	801393a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801391a:	f3ef 8310 	mrs	r3, PRIMASK
 801391e:	613b      	str	r3, [r7, #16]
  return(result);
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d105      	bne.n	8013932 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013926:	f3ef 8311 	mrs	r3, BASEPRI
 801392a:	60fb      	str	r3, [r7, #12]
  return(result);
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d01e      	beq.n	8013970 <osSemaphoreRelease+0x80>
 8013932:	4b19      	ldr	r3, [pc, #100]	; (8013998 <osSemaphoreRelease+0xa8>)
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2b02      	cmp	r3, #2
 8013938:	d11a      	bne.n	8013970 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 801393a:	2300      	movs	r3, #0
 801393c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801393e:	f107 0308 	add.w	r3, r7, #8
 8013942:	4619      	mov	r1, r3
 8013944:	69b8      	ldr	r0, [r7, #24]
 8013946:	f000 fec5 	bl	80146d4 <xQueueGiveFromISR>
 801394a:	4603      	mov	r3, r0
 801394c:	2b01      	cmp	r3, #1
 801394e:	d003      	beq.n	8013958 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8013950:	f06f 0302 	mvn.w	r3, #2
 8013954:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8013956:	e018      	b.n	801398a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d015      	beq.n	801398a <osSemaphoreRelease+0x9a>
 801395e:	4b0f      	ldr	r3, [pc, #60]	; (801399c <osSemaphoreRelease+0xac>)
 8013960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013964:	601a      	str	r2, [r3, #0]
 8013966:	f3bf 8f4f 	dsb	sy
 801396a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801396e:	e00c      	b.n	801398a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013970:	2300      	movs	r3, #0
 8013972:	2200      	movs	r2, #0
 8013974:	2100      	movs	r1, #0
 8013976:	69b8      	ldr	r0, [r7, #24]
 8013978:	f000 fd0e 	bl	8014398 <xQueueGenericSend>
 801397c:	4603      	mov	r3, r0
 801397e:	2b01      	cmp	r3, #1
 8013980:	d004      	beq.n	801398c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8013982:	f06f 0302 	mvn.w	r3, #2
 8013986:	61fb      	str	r3, [r7, #28]
 8013988:	e000      	b.n	801398c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801398a:	bf00      	nop
    }
  }

  return (stat);
 801398c:	69fb      	ldr	r3, [r7, #28]
}
 801398e:	4618      	mov	r0, r3
 8013990:	3720      	adds	r7, #32
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	20000470 	.word	0x20000470
 801399c:	e000ed04 	.word	0xe000ed04

080139a0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b088      	sub	sp, #32
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80139ac:	f3ef 8305 	mrs	r3, IPSR
 80139b0:	617b      	str	r3, [r7, #20]
  return(result);
 80139b2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d10f      	bne.n	80139d8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139b8:	f3ef 8310 	mrs	r3, PRIMASK
 80139bc:	613b      	str	r3, [r7, #16]
  return(result);
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d105      	bne.n	80139d0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80139c4:	f3ef 8311 	mrs	r3, BASEPRI
 80139c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d007      	beq.n	80139e0 <osSemaphoreDelete+0x40>
 80139d0:	4b0d      	ldr	r3, [pc, #52]	; (8013a08 <osSemaphoreDelete+0x68>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	2b02      	cmp	r3, #2
 80139d6:	d103      	bne.n	80139e0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80139d8:	f06f 0305 	mvn.w	r3, #5
 80139dc:	61fb      	str	r3, [r7, #28]
 80139de:	e00e      	b.n	80139fe <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d103      	bne.n	80139ee <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80139e6:	f06f 0303 	mvn.w	r3, #3
 80139ea:	61fb      	str	r3, [r7, #28]
 80139ec:	e007      	b.n	80139fe <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80139ee:	69b8      	ldr	r0, [r7, #24]
 80139f0:	f001 faec 	bl	8014fcc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80139f8:	69b8      	ldr	r0, [r7, #24]
 80139fa:	f001 f972 	bl	8014ce2 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80139fe:	69fb      	ldr	r3, [r7, #28]
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3720      	adds	r7, #32
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	20000470 	.word	0x20000470

08013a0c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b08c      	sub	sp, #48	; 0x30
 8013a10:	af02      	add	r7, sp, #8
 8013a12:	60f8      	str	r0, [r7, #12]
 8013a14:	60b9      	str	r1, [r7, #8]
 8013a16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013a18:	2300      	movs	r3, #0
 8013a1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a1c:	f3ef 8305 	mrs	r3, IPSR
 8013a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8013a22:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d170      	bne.n	8013b0a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a28:	f3ef 8310 	mrs	r3, PRIMASK
 8013a2c:	617b      	str	r3, [r7, #20]
  return(result);
 8013a2e:	697b      	ldr	r3, [r7, #20]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d105      	bne.n	8013a40 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013a34:	f3ef 8311 	mrs	r3, BASEPRI
 8013a38:	613b      	str	r3, [r7, #16]
  return(result);
 8013a3a:	693b      	ldr	r3, [r7, #16]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d003      	beq.n	8013a48 <osMessageQueueNew+0x3c>
 8013a40:	4b34      	ldr	r3, [pc, #208]	; (8013b14 <osMessageQueueNew+0x108>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	d060      	beq.n	8013b0a <osMessageQueueNew+0xfe>
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d05d      	beq.n	8013b0a <osMessageQueueNew+0xfe>
 8013a4e:	68bb      	ldr	r3, [r7, #8]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d05a      	beq.n	8013b0a <osMessageQueueNew+0xfe>
    mem = -1;
 8013a54:	f04f 33ff 	mov.w	r3, #4294967295
 8013a58:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d029      	beq.n	8013ab4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	689b      	ldr	r3, [r3, #8]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d012      	beq.n	8013a8e <osMessageQueueNew+0x82>
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	68db      	ldr	r3, [r3, #12]
 8013a6c:	2b4f      	cmp	r3, #79	; 0x4f
 8013a6e:	d90e      	bls.n	8013a8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d00a      	beq.n	8013a8e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	695a      	ldr	r2, [r3, #20]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	68b9      	ldr	r1, [r7, #8]
 8013a80:	fb01 f303 	mul.w	r3, r1, r3
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d302      	bcc.n	8013a8e <osMessageQueueNew+0x82>
        mem = 1;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	623b      	str	r3, [r7, #32]
 8013a8c:	e014      	b.n	8013ab8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	689b      	ldr	r3, [r3, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d110      	bne.n	8013ab8 <osMessageQueueNew+0xac>
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	68db      	ldr	r3, [r3, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d10c      	bne.n	8013ab8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d108      	bne.n	8013ab8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	695b      	ldr	r3, [r3, #20]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d104      	bne.n	8013ab8 <osMessageQueueNew+0xac>
          mem = 0;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	623b      	str	r3, [r7, #32]
 8013ab2:	e001      	b.n	8013ab8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8013ab8:	6a3b      	ldr	r3, [r7, #32]
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d10c      	bne.n	8013ad8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	691a      	ldr	r2, [r3, #16]
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	6899      	ldr	r1, [r3, #8]
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	460b      	mov	r3, r1
 8013acc:	68b9      	ldr	r1, [r7, #8]
 8013ace:	68f8      	ldr	r0, [r7, #12]
 8013ad0:	f000 fa5a 	bl	8013f88 <xQueueGenericCreateStatic>
 8013ad4:	6278      	str	r0, [r7, #36]	; 0x24
 8013ad6:	e008      	b.n	8013aea <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8013ad8:	6a3b      	ldr	r3, [r7, #32]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d105      	bne.n	8013aea <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8013ade:	2200      	movs	r2, #0
 8013ae0:	68b9      	ldr	r1, [r7, #8]
 8013ae2:	68f8      	ldr	r0, [r7, #12]
 8013ae4:	f000 facd 	bl	8014082 <xQueueGenericCreate>
 8013ae8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d00c      	beq.n	8013b0a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d003      	beq.n	8013afe <osMessageQueueNew+0xf2>
        name = attr->name;
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	61fb      	str	r3, [r7, #28]
 8013afc:	e001      	b.n	8013b02 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8013afe:	2300      	movs	r3, #0
 8013b00:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8013b02:	69f9      	ldr	r1, [r7, #28]
 8013b04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b06:	f001 fa39 	bl	8014f7c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3728      	adds	r7, #40	; 0x28
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}
 8013b14:	20000470 	.word	0x20000470

08013b18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b08a      	sub	sp, #40	; 0x28
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	603b      	str	r3, [r7, #0]
 8013b24:	4613      	mov	r3, r2
 8013b26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013b30:	f3ef 8305 	mrs	r3, IPSR
 8013b34:	61fb      	str	r3, [r7, #28]
  return(result);
 8013b36:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10f      	bne.n	8013b5c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013b3c:	f3ef 8310 	mrs	r3, PRIMASK
 8013b40:	61bb      	str	r3, [r7, #24]
  return(result);
 8013b42:	69bb      	ldr	r3, [r7, #24]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d105      	bne.n	8013b54 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013b48:	f3ef 8311 	mrs	r3, BASEPRI
 8013b4c:	617b      	str	r3, [r7, #20]
  return(result);
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d02c      	beq.n	8013bae <osMessageQueuePut+0x96>
 8013b54:	4b28      	ldr	r3, [pc, #160]	; (8013bf8 <osMessageQueuePut+0xe0>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d128      	bne.n	8013bae <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b5c:	6a3b      	ldr	r3, [r7, #32]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d005      	beq.n	8013b6e <osMessageQueuePut+0x56>
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <osMessageQueuePut+0x56>
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d003      	beq.n	8013b76 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8013b6e:	f06f 0303 	mvn.w	r3, #3
 8013b72:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b74:	e039      	b.n	8013bea <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8013b76:	2300      	movs	r3, #0
 8013b78:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013b7a:	f107 0210 	add.w	r2, r7, #16
 8013b7e:	2300      	movs	r3, #0
 8013b80:	68b9      	ldr	r1, [r7, #8]
 8013b82:	6a38      	ldr	r0, [r7, #32]
 8013b84:	f000 fd0a 	bl	801459c <xQueueGenericSendFromISR>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d003      	beq.n	8013b96 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8013b8e:	f06f 0302 	mvn.w	r3, #2
 8013b92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013b94:	e029      	b.n	8013bea <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d026      	beq.n	8013bea <osMessageQueuePut+0xd2>
 8013b9c:	4b17      	ldr	r3, [pc, #92]	; (8013bfc <osMessageQueuePut+0xe4>)
 8013b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ba2:	601a      	str	r2, [r3, #0]
 8013ba4:	f3bf 8f4f 	dsb	sy
 8013ba8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013bac:	e01d      	b.n	8013bea <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013bae:	6a3b      	ldr	r3, [r7, #32]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d002      	beq.n	8013bba <osMessageQueuePut+0xa2>
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d103      	bne.n	8013bc2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8013bba:	f06f 0303 	mvn.w	r3, #3
 8013bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8013bc0:	e014      	b.n	8013bec <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	683a      	ldr	r2, [r7, #0]
 8013bc6:	68b9      	ldr	r1, [r7, #8]
 8013bc8:	6a38      	ldr	r0, [r7, #32]
 8013bca:	f000 fbe5 	bl	8014398 <xQueueGenericSend>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d00b      	beq.n	8013bec <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8013bd4:	683b      	ldr	r3, [r7, #0]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d003      	beq.n	8013be2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8013bda:	f06f 0301 	mvn.w	r3, #1
 8013bde:	627b      	str	r3, [r7, #36]	; 0x24
 8013be0:	e004      	b.n	8013bec <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8013be2:	f06f 0302 	mvn.w	r3, #2
 8013be6:	627b      	str	r3, [r7, #36]	; 0x24
 8013be8:	e000      	b.n	8013bec <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013bea:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013bee:	4618      	mov	r0, r3
 8013bf0:	3728      	adds	r7, #40	; 0x28
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	bd80      	pop	{r7, pc}
 8013bf6:	bf00      	nop
 8013bf8:	20000470 	.word	0x20000470
 8013bfc:	e000ed04 	.word	0xe000ed04

08013c00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b08a      	sub	sp, #40	; 0x28
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
 8013c0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c16:	f3ef 8305 	mrs	r3, IPSR
 8013c1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8013c1c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d10f      	bne.n	8013c42 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c22:	f3ef 8310 	mrs	r3, PRIMASK
 8013c26:	61bb      	str	r3, [r7, #24]
  return(result);
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d105      	bne.n	8013c3a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8013c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8013c32:	617b      	str	r3, [r7, #20]
  return(result);
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d02c      	beq.n	8013c94 <osMessageQueueGet+0x94>
 8013c3a:	4b28      	ldr	r3, [pc, #160]	; (8013cdc <osMessageQueueGet+0xdc>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b02      	cmp	r3, #2
 8013c40:	d128      	bne.n	8013c94 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c42:	6a3b      	ldr	r3, [r7, #32]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d005      	beq.n	8013c54 <osMessageQueueGet+0x54>
 8013c48:	68bb      	ldr	r3, [r7, #8]
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d002      	beq.n	8013c54 <osMessageQueueGet+0x54>
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d003      	beq.n	8013c5c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8013c54:	f06f 0303 	mvn.w	r3, #3
 8013c58:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c5a:	e038      	b.n	8013cce <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013c60:	f107 0310 	add.w	r3, r7, #16
 8013c64:	461a      	mov	r2, r3
 8013c66:	68b9      	ldr	r1, [r7, #8]
 8013c68:	6a38      	ldr	r0, [r7, #32]
 8013c6a:	f000 ffb7 	bl	8014bdc <xQueueReceiveFromISR>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	2b01      	cmp	r3, #1
 8013c72:	d003      	beq.n	8013c7c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8013c74:	f06f 0302 	mvn.w	r3, #2
 8013c78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c7a:	e028      	b.n	8013cce <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d025      	beq.n	8013cce <osMessageQueueGet+0xce>
 8013c82:	4b17      	ldr	r3, [pc, #92]	; (8013ce0 <osMessageQueueGet+0xe0>)
 8013c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c88:	601a      	str	r2, [r3, #0]
 8013c8a:	f3bf 8f4f 	dsb	sy
 8013c8e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013c92:	e01c      	b.n	8013cce <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013c94:	6a3b      	ldr	r3, [r7, #32]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d002      	beq.n	8013ca0 <osMessageQueueGet+0xa0>
 8013c9a:	68bb      	ldr	r3, [r7, #8]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d103      	bne.n	8013ca8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8013ca0:	f06f 0303 	mvn.w	r3, #3
 8013ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8013ca6:	e013      	b.n	8013cd0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013ca8:	683a      	ldr	r2, [r7, #0]
 8013caa:	68b9      	ldr	r1, [r7, #8]
 8013cac:	6a38      	ldr	r0, [r7, #32]
 8013cae:	f000 fda3 	bl	80147f8 <xQueueReceive>
 8013cb2:	4603      	mov	r3, r0
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d00b      	beq.n	8013cd0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8013cb8:	683b      	ldr	r3, [r7, #0]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d003      	beq.n	8013cc6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8013cbe:	f06f 0301 	mvn.w	r3, #1
 8013cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8013cc4:	e004      	b.n	8013cd0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8013cc6:	f06f 0302 	mvn.w	r3, #2
 8013cca:	627b      	str	r3, [r7, #36]	; 0x24
 8013ccc:	e000      	b.n	8013cd0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013cce:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8013cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3728      	adds	r7, #40	; 0x28
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}
 8013cda:	bf00      	nop
 8013cdc:	20000470 	.word	0x20000470
 8013ce0:	e000ed04 	.word	0xe000ed04

08013ce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	4a07      	ldr	r2, [pc, #28]	; (8013d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8013cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	4a06      	ldr	r2, [pc, #24]	; (8013d14 <vApplicationGetIdleTaskMemory+0x30>)
 8013cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2280      	movs	r2, #128	; 0x80
 8013d00:	601a      	str	r2, [r3, #0]
}
 8013d02:	bf00      	nop
 8013d04:	3714      	adds	r7, #20
 8013d06:	46bd      	mov	sp, r7
 8013d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	20000474 	.word	0x20000474
 8013d14:	200004d0 	.word	0x200004d0

08013d18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013d18:	b480      	push	{r7}
 8013d1a:	b085      	sub	sp, #20
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	4a07      	ldr	r2, [pc, #28]	; (8013d44 <vApplicationGetTimerTaskMemory+0x2c>)
 8013d28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	4a06      	ldr	r2, [pc, #24]	; (8013d48 <vApplicationGetTimerTaskMemory+0x30>)
 8013d2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013d36:	601a      	str	r2, [r3, #0]
}
 8013d38:	bf00      	nop
 8013d3a:	3714      	adds	r7, #20
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr
 8013d44:	200006d0 	.word	0x200006d0
 8013d48:	2000072c 	.word	0x2000072c

08013d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013d4c:	b480      	push	{r7}
 8013d4e:	b083      	sub	sp, #12
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f103 0208 	add.w	r2, r3, #8
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f04f 32ff 	mov.w	r2, #4294967295
 8013d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f103 0208 	add.w	r2, r3, #8
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f103 0208 	add.w	r2, r3, #8
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013d80:	bf00      	nop
 8013d82:	370c      	adds	r7, #12
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2200      	movs	r2, #0
 8013d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013d9a:	bf00      	nop
 8013d9c:	370c      	adds	r7, #12
 8013d9e:	46bd      	mov	sp, r7
 8013da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da4:	4770      	bx	lr

08013da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013da6:	b480      	push	{r7}
 8013da8:	b085      	sub	sp, #20
 8013daa:	af00      	add	r7, sp, #0
 8013dac:	6078      	str	r0, [r7, #4]
 8013dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	68fa      	ldr	r2, [r7, #12]
 8013dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	689a      	ldr	r2, [r3, #8]
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	689b      	ldr	r3, [r3, #8]
 8013dc8:	683a      	ldr	r2, [r7, #0]
 8013dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	683a      	ldr	r2, [r7, #0]
 8013dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	687a      	ldr	r2, [r7, #4]
 8013dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	1c5a      	adds	r2, r3, #1
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	601a      	str	r2, [r3, #0]
}
 8013de2:	bf00      	nop
 8013de4:	3714      	adds	r7, #20
 8013de6:	46bd      	mov	sp, r7
 8013de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dec:	4770      	bx	lr

08013dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013dee:	b480      	push	{r7}
 8013df0:	b085      	sub	sp, #20
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e04:	d103      	bne.n	8013e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	691b      	ldr	r3, [r3, #16]
 8013e0a:	60fb      	str	r3, [r7, #12]
 8013e0c:	e00c      	b.n	8013e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	3308      	adds	r3, #8
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	e002      	b.n	8013e1c <vListInsert+0x2e>
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	685b      	ldr	r3, [r3, #4]
 8013e1a:	60fb      	str	r3, [r7, #12]
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d2f6      	bcs.n	8013e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	685a      	ldr	r2, [r3, #4]
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	685b      	ldr	r3, [r3, #4]
 8013e34:	683a      	ldr	r2, [r7, #0]
 8013e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013e38:	683b      	ldr	r3, [r7, #0]
 8013e3a:	68fa      	ldr	r2, [r7, #12]
 8013e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	683a      	ldr	r2, [r7, #0]
 8013e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	687a      	ldr	r2, [r7, #4]
 8013e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	1c5a      	adds	r2, r3, #1
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	601a      	str	r2, [r3, #0]
}
 8013e54:	bf00      	nop
 8013e56:	3714      	adds	r7, #20
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5e:	4770      	bx	lr

08013e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013e60:	b480      	push	{r7}
 8013e62:	b085      	sub	sp, #20
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	691b      	ldr	r3, [r3, #16]
 8013e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	6892      	ldr	r2, [r2, #8]
 8013e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	687a      	ldr	r2, [r7, #4]
 8013e7e:	6852      	ldr	r2, [r2, #4]
 8013e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	685b      	ldr	r3, [r3, #4]
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d103      	bne.n	8013e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	689a      	ldr	r2, [r3, #8]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	2200      	movs	r2, #0
 8013e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013e9a:	68fb      	ldr	r3, [r7, #12]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	1e5a      	subs	r2, r3, #1
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
}
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	3714      	adds	r7, #20
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d10b      	bne.n	8013ee0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ecc:	b672      	cpsid	i
 8013ece:	f383 8811 	msr	BASEPRI, r3
 8013ed2:	f3bf 8f6f 	isb	sy
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	b662      	cpsie	i
 8013edc:	60bb      	str	r3, [r7, #8]
 8013ede:	e7fe      	b.n	8013ede <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8013ee0:	f002 fdda 	bl	8016a98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	681a      	ldr	r2, [r3, #0]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013eec:	68f9      	ldr	r1, [r7, #12]
 8013eee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013ef0:	fb01 f303 	mul.w	r3, r1, r3
 8013ef4:	441a      	add	r2, r3
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2200      	movs	r2, #0
 8013efe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681a      	ldr	r2, [r3, #0]
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	681a      	ldr	r2, [r3, #0]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f10:	3b01      	subs	r3, #1
 8013f12:	68f9      	ldr	r1, [r7, #12]
 8013f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013f16:	fb01 f303 	mul.w	r3, r1, r3
 8013f1a:	441a      	add	r2, r3
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	22ff      	movs	r2, #255	; 0xff
 8013f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	22ff      	movs	r2, #255	; 0xff
 8013f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d114      	bne.n	8013f60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	691b      	ldr	r3, [r3, #16]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d01a      	beq.n	8013f74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	3310      	adds	r3, #16
 8013f42:	4618      	mov	r0, r3
 8013f44:	f001 fd9c 	bl	8015a80 <xTaskRemoveFromEventList>
 8013f48:	4603      	mov	r3, r0
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d012      	beq.n	8013f74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013f4e:	4b0d      	ldr	r3, [pc, #52]	; (8013f84 <xQueueGenericReset+0xd0>)
 8013f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013f54:	601a      	str	r2, [r3, #0]
 8013f56:	f3bf 8f4f 	dsb	sy
 8013f5a:	f3bf 8f6f 	isb	sy
 8013f5e:	e009      	b.n	8013f74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	3310      	adds	r3, #16
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7ff fef1 	bl	8013d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	3324      	adds	r3, #36	; 0x24
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7ff feec 	bl	8013d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013f74:	f002 fdc2 	bl	8016afc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013f78:	2301      	movs	r3, #1
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3710      	adds	r7, #16
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	e000ed04 	.word	0xe000ed04

08013f88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b08e      	sub	sp, #56	; 0x38
 8013f8c:	af02      	add	r7, sp, #8
 8013f8e:	60f8      	str	r0, [r7, #12]
 8013f90:	60b9      	str	r1, [r7, #8]
 8013f92:	607a      	str	r2, [r7, #4]
 8013f94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d10b      	bne.n	8013fb4 <xQueueGenericCreateStatic+0x2c>
 8013f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa0:	b672      	cpsid	i
 8013fa2:	f383 8811 	msr	BASEPRI, r3
 8013fa6:	f3bf 8f6f 	isb	sy
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	b662      	cpsie	i
 8013fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fb2:	e7fe      	b.n	8013fb2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10b      	bne.n	8013fd2 <xQueueGenericCreateStatic+0x4a>
 8013fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fbe:	b672      	cpsid	i
 8013fc0:	f383 8811 	msr	BASEPRI, r3
 8013fc4:	f3bf 8f6f 	isb	sy
 8013fc8:	f3bf 8f4f 	dsb	sy
 8013fcc:	b662      	cpsie	i
 8013fce:	627b      	str	r3, [r7, #36]	; 0x24
 8013fd0:	e7fe      	b.n	8013fd0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d002      	beq.n	8013fde <xQueueGenericCreateStatic+0x56>
 8013fd8:	68bb      	ldr	r3, [r7, #8]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d001      	beq.n	8013fe2 <xQueueGenericCreateStatic+0x5a>
 8013fde:	2301      	movs	r3, #1
 8013fe0:	e000      	b.n	8013fe4 <xQueueGenericCreateStatic+0x5c>
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d10b      	bne.n	8014000 <xQueueGenericCreateStatic+0x78>
 8013fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fec:	b672      	cpsid	i
 8013fee:	f383 8811 	msr	BASEPRI, r3
 8013ff2:	f3bf 8f6f 	isb	sy
 8013ff6:	f3bf 8f4f 	dsb	sy
 8013ffa:	b662      	cpsie	i
 8013ffc:	623b      	str	r3, [r7, #32]
 8013ffe:	e7fe      	b.n	8013ffe <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d102      	bne.n	801400c <xQueueGenericCreateStatic+0x84>
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	2b00      	cmp	r3, #0
 801400a:	d101      	bne.n	8014010 <xQueueGenericCreateStatic+0x88>
 801400c:	2301      	movs	r3, #1
 801400e:	e000      	b.n	8014012 <xQueueGenericCreateStatic+0x8a>
 8014010:	2300      	movs	r3, #0
 8014012:	2b00      	cmp	r3, #0
 8014014:	d10b      	bne.n	801402e <xQueueGenericCreateStatic+0xa6>
 8014016:	f04f 0350 	mov.w	r3, #80	; 0x50
 801401a:	b672      	cpsid	i
 801401c:	f383 8811 	msr	BASEPRI, r3
 8014020:	f3bf 8f6f 	isb	sy
 8014024:	f3bf 8f4f 	dsb	sy
 8014028:	b662      	cpsie	i
 801402a:	61fb      	str	r3, [r7, #28]
 801402c:	e7fe      	b.n	801402c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801402e:	2350      	movs	r3, #80	; 0x50
 8014030:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	2b50      	cmp	r3, #80	; 0x50
 8014036:	d00b      	beq.n	8014050 <xQueueGenericCreateStatic+0xc8>
 8014038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801403c:	b672      	cpsid	i
 801403e:	f383 8811 	msr	BASEPRI, r3
 8014042:	f3bf 8f6f 	isb	sy
 8014046:	f3bf 8f4f 	dsb	sy
 801404a:	b662      	cpsie	i
 801404c:	61bb      	str	r3, [r7, #24]
 801404e:	e7fe      	b.n	801404e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014050:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014058:	2b00      	cmp	r3, #0
 801405a:	d00d      	beq.n	8014078 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801405e:	2201      	movs	r2, #1
 8014060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014064:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	4613      	mov	r3, r2
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	68b9      	ldr	r1, [r7, #8]
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f000 f846 	bl	8014104 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801407a:	4618      	mov	r0, r3
 801407c:	3730      	adds	r7, #48	; 0x30
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}

08014082 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014082:	b580      	push	{r7, lr}
 8014084:	b08a      	sub	sp, #40	; 0x28
 8014086:	af02      	add	r7, sp, #8
 8014088:	60f8      	str	r0, [r7, #12]
 801408a:	60b9      	str	r1, [r7, #8]
 801408c:	4613      	mov	r3, r2
 801408e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d10b      	bne.n	80140ae <xQueueGenericCreate+0x2c>
 8014096:	f04f 0350 	mov.w	r3, #80	; 0x50
 801409a:	b672      	cpsid	i
 801409c:	f383 8811 	msr	BASEPRI, r3
 80140a0:	f3bf 8f6f 	isb	sy
 80140a4:	f3bf 8f4f 	dsb	sy
 80140a8:	b662      	cpsie	i
 80140aa:	613b      	str	r3, [r7, #16]
 80140ac:	e7fe      	b.n	80140ac <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d102      	bne.n	80140ba <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80140b4:	2300      	movs	r3, #0
 80140b6:	61fb      	str	r3, [r7, #28]
 80140b8:	e004      	b.n	80140c4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	68ba      	ldr	r2, [r7, #8]
 80140be:	fb02 f303 	mul.w	r3, r2, r3
 80140c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80140c4:	69fb      	ldr	r3, [r7, #28]
 80140c6:	3350      	adds	r3, #80	; 0x50
 80140c8:	4618      	mov	r0, r3
 80140ca:	f002 fe07 	bl	8016cdc <pvPortMalloc>
 80140ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80140d0:	69bb      	ldr	r3, [r7, #24]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d011      	beq.n	80140fa <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80140d6:	69bb      	ldr	r3, [r7, #24]
 80140d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	3350      	adds	r3, #80	; 0x50
 80140de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	2200      	movs	r2, #0
 80140e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80140e8:	79fa      	ldrb	r2, [r7, #7]
 80140ea:	69bb      	ldr	r3, [r7, #24]
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	4613      	mov	r3, r2
 80140f0:	697a      	ldr	r2, [r7, #20]
 80140f2:	68b9      	ldr	r1, [r7, #8]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f000 f805 	bl	8014104 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80140fa:	69bb      	ldr	r3, [r7, #24]
	}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3720      	adds	r7, #32
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}

08014104 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b084      	sub	sp, #16
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d103      	bne.n	8014120 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	69ba      	ldr	r2, [r7, #24]
 801411c:	601a      	str	r2, [r3, #0]
 801411e:	e002      	b.n	8014126 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	687a      	ldr	r2, [r7, #4]
 8014124:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801412c:	69bb      	ldr	r3, [r7, #24]
 801412e:	68ba      	ldr	r2, [r7, #8]
 8014130:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014132:	2101      	movs	r1, #1
 8014134:	69b8      	ldr	r0, [r7, #24]
 8014136:	f7ff febd 	bl	8013eb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	78fa      	ldrb	r2, [r7, #3]
 801413e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014142:	bf00      	nop
 8014144:	3710      	adds	r7, #16
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}

0801414a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801414a:	b580      	push	{r7, lr}
 801414c:	b082      	sub	sp, #8
 801414e:	af00      	add	r7, sp, #0
 8014150:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00e      	beq.n	8014176 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2200      	movs	r2, #0
 801415c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2200      	movs	r2, #0
 8014162:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801416a:	2300      	movs	r3, #0
 801416c:	2200      	movs	r2, #0
 801416e:	2100      	movs	r1, #0
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f000 f911 	bl	8014398 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014176:	bf00      	nop
 8014178:	3708      	adds	r7, #8
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}

0801417e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801417e:	b580      	push	{r7, lr}
 8014180:	b086      	sub	sp, #24
 8014182:	af00      	add	r7, sp, #0
 8014184:	4603      	mov	r3, r0
 8014186:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014188:	2301      	movs	r3, #1
 801418a:	617b      	str	r3, [r7, #20]
 801418c:	2300      	movs	r3, #0
 801418e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014190:	79fb      	ldrb	r3, [r7, #7]
 8014192:	461a      	mov	r2, r3
 8014194:	6939      	ldr	r1, [r7, #16]
 8014196:	6978      	ldr	r0, [r7, #20]
 8014198:	f7ff ff73 	bl	8014082 <xQueueGenericCreate>
 801419c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801419e:	68f8      	ldr	r0, [r7, #12]
 80141a0:	f7ff ffd3 	bl	801414a <prvInitialiseMutex>

		return xNewQueue;
 80141a4:	68fb      	ldr	r3, [r7, #12]
	}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3718      	adds	r7, #24
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b088      	sub	sp, #32
 80141b2:	af02      	add	r7, sp, #8
 80141b4:	4603      	mov	r3, r0
 80141b6:	6039      	str	r1, [r7, #0]
 80141b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80141ba:	2301      	movs	r3, #1
 80141bc:	617b      	str	r3, [r7, #20]
 80141be:	2300      	movs	r3, #0
 80141c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80141c2:	79fb      	ldrb	r3, [r7, #7]
 80141c4:	9300      	str	r3, [sp, #0]
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	2200      	movs	r2, #0
 80141ca:	6939      	ldr	r1, [r7, #16]
 80141cc:	6978      	ldr	r0, [r7, #20]
 80141ce:	f7ff fedb 	bl	8013f88 <xQueueGenericCreateStatic>
 80141d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80141d4:	68f8      	ldr	r0, [r7, #12]
 80141d6:	f7ff ffb8 	bl	801414a <prvInitialiseMutex>

		return xNewQueue;
 80141da:	68fb      	ldr	r3, [r7, #12]
	}
 80141dc:	4618      	mov	r0, r3
 80141de:	3718      	adds	r7, #24
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80141e4:	b590      	push	{r4, r7, lr}
 80141e6:	b087      	sub	sp, #28
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d10b      	bne.n	801420e <xQueueGiveMutexRecursive+0x2a>
 80141f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141fa:	b672      	cpsid	i
 80141fc:	f383 8811 	msr	BASEPRI, r3
 8014200:	f3bf 8f6f 	isb	sy
 8014204:	f3bf 8f4f 	dsb	sy
 8014208:	b662      	cpsie	i
 801420a:	60fb      	str	r3, [r7, #12]
 801420c:	e7fe      	b.n	801420c <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	689c      	ldr	r4, [r3, #8]
 8014212:	f001 fdf3 	bl	8015dfc <xTaskGetCurrentTaskHandle>
 8014216:	4603      	mov	r3, r0
 8014218:	429c      	cmp	r4, r3
 801421a:	d111      	bne.n	8014240 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	68db      	ldr	r3, [r3, #12]
 8014220:	1e5a      	subs	r2, r3, #1
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d105      	bne.n	801423a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801422e:	2300      	movs	r3, #0
 8014230:	2200      	movs	r2, #0
 8014232:	2100      	movs	r1, #0
 8014234:	6938      	ldr	r0, [r7, #16]
 8014236:	f000 f8af 	bl	8014398 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801423a:	2301      	movs	r3, #1
 801423c:	617b      	str	r3, [r7, #20]
 801423e:	e001      	b.n	8014244 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8014240:	2300      	movs	r3, #0
 8014242:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8014244:	697b      	ldr	r3, [r7, #20]
	}
 8014246:	4618      	mov	r0, r3
 8014248:	371c      	adds	r7, #28
 801424a:	46bd      	mov	sp, r7
 801424c:	bd90      	pop	{r4, r7, pc}

0801424e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801424e:	b590      	push	{r4, r7, lr}
 8014250:	b087      	sub	sp, #28
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]
 8014256:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 801425c:	693b      	ldr	r3, [r7, #16]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d10b      	bne.n	801427a <xQueueTakeMutexRecursive+0x2c>
 8014262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014266:	b672      	cpsid	i
 8014268:	f383 8811 	msr	BASEPRI, r3
 801426c:	f3bf 8f6f 	isb	sy
 8014270:	f3bf 8f4f 	dsb	sy
 8014274:	b662      	cpsie	i
 8014276:	60fb      	str	r3, [r7, #12]
 8014278:	e7fe      	b.n	8014278 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	689c      	ldr	r4, [r3, #8]
 801427e:	f001 fdbd 	bl	8015dfc <xTaskGetCurrentTaskHandle>
 8014282:	4603      	mov	r3, r0
 8014284:	429c      	cmp	r4, r3
 8014286:	d107      	bne.n	8014298 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	68db      	ldr	r3, [r3, #12]
 801428c:	1c5a      	adds	r2, r3, #1
 801428e:	693b      	ldr	r3, [r7, #16]
 8014290:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014292:	2301      	movs	r3, #1
 8014294:	617b      	str	r3, [r7, #20]
 8014296:	e00c      	b.n	80142b2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8014298:	6839      	ldr	r1, [r7, #0]
 801429a:	6938      	ldr	r0, [r7, #16]
 801429c:	f000 fb8e 	bl	80149bc <xQueueSemaphoreTake>
 80142a0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d004      	beq.n	80142b2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	68db      	ldr	r3, [r3, #12]
 80142ac:	1c5a      	adds	r2, r3, #1
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80142b2:	697b      	ldr	r3, [r7, #20]
	}
 80142b4:	4618      	mov	r0, r3
 80142b6:	371c      	adds	r7, #28
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd90      	pop	{r4, r7, pc}

080142bc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b08a      	sub	sp, #40	; 0x28
 80142c0:	af02      	add	r7, sp, #8
 80142c2:	60f8      	str	r0, [r7, #12]
 80142c4:	60b9      	str	r1, [r7, #8]
 80142c6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80142c8:	68fb      	ldr	r3, [r7, #12]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d10b      	bne.n	80142e6 <xQueueCreateCountingSemaphoreStatic+0x2a>
 80142ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d2:	b672      	cpsid	i
 80142d4:	f383 8811 	msr	BASEPRI, r3
 80142d8:	f3bf 8f6f 	isb	sy
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	b662      	cpsie	i
 80142e2:	61bb      	str	r3, [r7, #24]
 80142e4:	e7fe      	b.n	80142e4 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80142e6:	68ba      	ldr	r2, [r7, #8]
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d90b      	bls.n	8014306 <xQueueCreateCountingSemaphoreStatic+0x4a>
 80142ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f2:	b672      	cpsid	i
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	b662      	cpsie	i
 8014302:	617b      	str	r3, [r7, #20]
 8014304:	e7fe      	b.n	8014304 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014306:	2302      	movs	r3, #2
 8014308:	9300      	str	r3, [sp, #0]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2200      	movs	r2, #0
 801430e:	2100      	movs	r1, #0
 8014310:	68f8      	ldr	r0, [r7, #12]
 8014312:	f7ff fe39 	bl	8013f88 <xQueueGenericCreateStatic>
 8014316:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d002      	beq.n	8014324 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	68ba      	ldr	r2, [r7, #8]
 8014322:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014324:	69fb      	ldr	r3, [r7, #28]
	}
 8014326:	4618      	mov	r0, r3
 8014328:	3720      	adds	r7, #32
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}

0801432e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801432e:	b580      	push	{r7, lr}
 8014330:	b086      	sub	sp, #24
 8014332:	af00      	add	r7, sp, #0
 8014334:	6078      	str	r0, [r7, #4]
 8014336:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10b      	bne.n	8014356 <xQueueCreateCountingSemaphore+0x28>
 801433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014342:	b672      	cpsid	i
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
 8014350:	b662      	cpsie	i
 8014352:	613b      	str	r3, [r7, #16]
 8014354:	e7fe      	b.n	8014354 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	429a      	cmp	r2, r3
 801435c:	d90b      	bls.n	8014376 <xQueueCreateCountingSemaphore+0x48>
 801435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014362:	b672      	cpsid	i
 8014364:	f383 8811 	msr	BASEPRI, r3
 8014368:	f3bf 8f6f 	isb	sy
 801436c:	f3bf 8f4f 	dsb	sy
 8014370:	b662      	cpsie	i
 8014372:	60fb      	str	r3, [r7, #12]
 8014374:	e7fe      	b.n	8014374 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014376:	2202      	movs	r2, #2
 8014378:	2100      	movs	r1, #0
 801437a:	6878      	ldr	r0, [r7, #4]
 801437c:	f7ff fe81 	bl	8014082 <xQueueGenericCreate>
 8014380:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014382:	697b      	ldr	r3, [r7, #20]
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014388:	697b      	ldr	r3, [r7, #20]
 801438a:	683a      	ldr	r2, [r7, #0]
 801438c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801438e:	697b      	ldr	r3, [r7, #20]
	}
 8014390:	4618      	mov	r0, r3
 8014392:	3718      	adds	r7, #24
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b08e      	sub	sp, #56	; 0x38
 801439c:	af00      	add	r7, sp, #0
 801439e:	60f8      	str	r0, [r7, #12]
 80143a0:	60b9      	str	r1, [r7, #8]
 80143a2:	607a      	str	r2, [r7, #4]
 80143a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80143a6:	2300      	movs	r3, #0
 80143a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80143ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10b      	bne.n	80143cc <xQueueGenericSend+0x34>
 80143b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b8:	b672      	cpsid	i
 80143ba:	f383 8811 	msr	BASEPRI, r3
 80143be:	f3bf 8f6f 	isb	sy
 80143c2:	f3bf 8f4f 	dsb	sy
 80143c6:	b662      	cpsie	i
 80143c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80143ca:	e7fe      	b.n	80143ca <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d103      	bne.n	80143da <xQueueGenericSend+0x42>
 80143d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d101      	bne.n	80143de <xQueueGenericSend+0x46>
 80143da:	2301      	movs	r3, #1
 80143dc:	e000      	b.n	80143e0 <xQueueGenericSend+0x48>
 80143de:	2300      	movs	r3, #0
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d10b      	bne.n	80143fc <xQueueGenericSend+0x64>
 80143e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e8:	b672      	cpsid	i
 80143ea:	f383 8811 	msr	BASEPRI, r3
 80143ee:	f3bf 8f6f 	isb	sy
 80143f2:	f3bf 8f4f 	dsb	sy
 80143f6:	b662      	cpsie	i
 80143f8:	627b      	str	r3, [r7, #36]	; 0x24
 80143fa:	e7fe      	b.n	80143fa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	2b02      	cmp	r3, #2
 8014400:	d103      	bne.n	801440a <xQueueGenericSend+0x72>
 8014402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014406:	2b01      	cmp	r3, #1
 8014408:	d101      	bne.n	801440e <xQueueGenericSend+0x76>
 801440a:	2301      	movs	r3, #1
 801440c:	e000      	b.n	8014410 <xQueueGenericSend+0x78>
 801440e:	2300      	movs	r3, #0
 8014410:	2b00      	cmp	r3, #0
 8014412:	d10b      	bne.n	801442c <xQueueGenericSend+0x94>
 8014414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014418:	b672      	cpsid	i
 801441a:	f383 8811 	msr	BASEPRI, r3
 801441e:	f3bf 8f6f 	isb	sy
 8014422:	f3bf 8f4f 	dsb	sy
 8014426:	b662      	cpsie	i
 8014428:	623b      	str	r3, [r7, #32]
 801442a:	e7fe      	b.n	801442a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801442c:	f001 fcf6 	bl	8015e1c <xTaskGetSchedulerState>
 8014430:	4603      	mov	r3, r0
 8014432:	2b00      	cmp	r3, #0
 8014434:	d102      	bne.n	801443c <xQueueGenericSend+0xa4>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d101      	bne.n	8014440 <xQueueGenericSend+0xa8>
 801443c:	2301      	movs	r3, #1
 801443e:	e000      	b.n	8014442 <xQueueGenericSend+0xaa>
 8014440:	2300      	movs	r3, #0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d10b      	bne.n	801445e <xQueueGenericSend+0xc6>
 8014446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801444a:	b672      	cpsid	i
 801444c:	f383 8811 	msr	BASEPRI, r3
 8014450:	f3bf 8f6f 	isb	sy
 8014454:	f3bf 8f4f 	dsb	sy
 8014458:	b662      	cpsie	i
 801445a:	61fb      	str	r3, [r7, #28]
 801445c:	e7fe      	b.n	801445c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801445e:	f002 fb1b 	bl	8016a98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801446a:	429a      	cmp	r2, r3
 801446c:	d302      	bcc.n	8014474 <xQueueGenericSend+0xdc>
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	2b02      	cmp	r3, #2
 8014472:	d129      	bne.n	80144c8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014474:	683a      	ldr	r2, [r7, #0]
 8014476:	68b9      	ldr	r1, [r7, #8]
 8014478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801447a:	f000 fc6e 	bl	8014d5a <prvCopyDataToQueue>
 801447e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014484:	2b00      	cmp	r3, #0
 8014486:	d010      	beq.n	80144aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801448a:	3324      	adds	r3, #36	; 0x24
 801448c:	4618      	mov	r0, r3
 801448e:	f001 faf7 	bl	8015a80 <xTaskRemoveFromEventList>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d013      	beq.n	80144c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014498:	4b3f      	ldr	r3, [pc, #252]	; (8014598 <xQueueGenericSend+0x200>)
 801449a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801449e:	601a      	str	r2, [r3, #0]
 80144a0:	f3bf 8f4f 	dsb	sy
 80144a4:	f3bf 8f6f 	isb	sy
 80144a8:	e00a      	b.n	80144c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80144aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d007      	beq.n	80144c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80144b0:	4b39      	ldr	r3, [pc, #228]	; (8014598 <xQueueGenericSend+0x200>)
 80144b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80144c0:	f002 fb1c 	bl	8016afc <vPortExitCritical>
				return pdPASS;
 80144c4:	2301      	movs	r3, #1
 80144c6:	e063      	b.n	8014590 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d103      	bne.n	80144d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80144ce:	f002 fb15 	bl	8016afc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80144d2:	2300      	movs	r3, #0
 80144d4:	e05c      	b.n	8014590 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80144d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d106      	bne.n	80144ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80144dc:	f107 0314 	add.w	r3, r7, #20
 80144e0:	4618      	mov	r0, r3
 80144e2:	f001 fb31 	bl	8015b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80144e6:	2301      	movs	r3, #1
 80144e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80144ea:	f002 fb07 	bl	8016afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80144ee:	f001 f88f 	bl	8015610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80144f2:	f002 fad1 	bl	8016a98 <vPortEnterCritical>
 80144f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144fc:	b25b      	sxtb	r3, r3
 80144fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014502:	d103      	bne.n	801450c <xQueueGenericSend+0x174>
 8014504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014506:	2200      	movs	r2, #0
 8014508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801450e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014512:	b25b      	sxtb	r3, r3
 8014514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014518:	d103      	bne.n	8014522 <xQueueGenericSend+0x18a>
 801451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801451c:	2200      	movs	r2, #0
 801451e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014522:	f002 faeb 	bl	8016afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014526:	1d3a      	adds	r2, r7, #4
 8014528:	f107 0314 	add.w	r3, r7, #20
 801452c:	4611      	mov	r1, r2
 801452e:	4618      	mov	r0, r3
 8014530:	f001 fb20 	bl	8015b74 <xTaskCheckForTimeOut>
 8014534:	4603      	mov	r3, r0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d124      	bne.n	8014584 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801453a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801453c:	f000 fd05 	bl	8014f4a <prvIsQueueFull>
 8014540:	4603      	mov	r3, r0
 8014542:	2b00      	cmp	r3, #0
 8014544:	d018      	beq.n	8014578 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014548:	3310      	adds	r3, #16
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	4611      	mov	r1, r2
 801454e:	4618      	mov	r0, r3
 8014550:	f001 fa44 	bl	80159dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014556:	f000 fc90 	bl	8014e7a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801455a:	f001 f867 	bl	801562c <xTaskResumeAll>
 801455e:	4603      	mov	r3, r0
 8014560:	2b00      	cmp	r3, #0
 8014562:	f47f af7c 	bne.w	801445e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014566:	4b0c      	ldr	r3, [pc, #48]	; (8014598 <xQueueGenericSend+0x200>)
 8014568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801456c:	601a      	str	r2, [r3, #0]
 801456e:	f3bf 8f4f 	dsb	sy
 8014572:	f3bf 8f6f 	isb	sy
 8014576:	e772      	b.n	801445e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801457a:	f000 fc7e 	bl	8014e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801457e:	f001 f855 	bl	801562c <xTaskResumeAll>
 8014582:	e76c      	b.n	801445e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014586:	f000 fc78 	bl	8014e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801458a:	f001 f84f 	bl	801562c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801458e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014590:	4618      	mov	r0, r3
 8014592:	3738      	adds	r7, #56	; 0x38
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	e000ed04 	.word	0xe000ed04

0801459c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b08e      	sub	sp, #56	; 0x38
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	60f8      	str	r0, [r7, #12]
 80145a4:	60b9      	str	r1, [r7, #8]
 80145a6:	607a      	str	r2, [r7, #4]
 80145a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80145ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d10b      	bne.n	80145cc <xQueueGenericSendFromISR+0x30>
 80145b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b8:	b672      	cpsid	i
 80145ba:	f383 8811 	msr	BASEPRI, r3
 80145be:	f3bf 8f6f 	isb	sy
 80145c2:	f3bf 8f4f 	dsb	sy
 80145c6:	b662      	cpsie	i
 80145c8:	627b      	str	r3, [r7, #36]	; 0x24
 80145ca:	e7fe      	b.n	80145ca <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d103      	bne.n	80145da <xQueueGenericSendFromISR+0x3e>
 80145d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d101      	bne.n	80145de <xQueueGenericSendFromISR+0x42>
 80145da:	2301      	movs	r3, #1
 80145dc:	e000      	b.n	80145e0 <xQueueGenericSendFromISR+0x44>
 80145de:	2300      	movs	r3, #0
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d10b      	bne.n	80145fc <xQueueGenericSendFromISR+0x60>
 80145e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e8:	b672      	cpsid	i
 80145ea:	f383 8811 	msr	BASEPRI, r3
 80145ee:	f3bf 8f6f 	isb	sy
 80145f2:	f3bf 8f4f 	dsb	sy
 80145f6:	b662      	cpsie	i
 80145f8:	623b      	str	r3, [r7, #32]
 80145fa:	e7fe      	b.n	80145fa <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	2b02      	cmp	r3, #2
 8014600:	d103      	bne.n	801460a <xQueueGenericSendFromISR+0x6e>
 8014602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014606:	2b01      	cmp	r3, #1
 8014608:	d101      	bne.n	801460e <xQueueGenericSendFromISR+0x72>
 801460a:	2301      	movs	r3, #1
 801460c:	e000      	b.n	8014610 <xQueueGenericSendFromISR+0x74>
 801460e:	2300      	movs	r3, #0
 8014610:	2b00      	cmp	r3, #0
 8014612:	d10b      	bne.n	801462c <xQueueGenericSendFromISR+0x90>
 8014614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014618:	b672      	cpsid	i
 801461a:	f383 8811 	msr	BASEPRI, r3
 801461e:	f3bf 8f6f 	isb	sy
 8014622:	f3bf 8f4f 	dsb	sy
 8014626:	b662      	cpsie	i
 8014628:	61fb      	str	r3, [r7, #28]
 801462a:	e7fe      	b.n	801462a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801462c:	f002 fb14 	bl	8016c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014630:	f3ef 8211 	mrs	r2, BASEPRI
 8014634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014638:	b672      	cpsid	i
 801463a:	f383 8811 	msr	BASEPRI, r3
 801463e:	f3bf 8f6f 	isb	sy
 8014642:	f3bf 8f4f 	dsb	sy
 8014646:	b662      	cpsie	i
 8014648:	61ba      	str	r2, [r7, #24]
 801464a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801464c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801464e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014652:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014658:	429a      	cmp	r2, r3
 801465a:	d302      	bcc.n	8014662 <xQueueGenericSendFromISR+0xc6>
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	2b02      	cmp	r3, #2
 8014660:	d12c      	bne.n	80146bc <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801466c:	683a      	ldr	r2, [r7, #0]
 801466e:	68b9      	ldr	r1, [r7, #8]
 8014670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014672:	f000 fb72 	bl	8014d5a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014676:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467e:	d112      	bne.n	80146a6 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014684:	2b00      	cmp	r3, #0
 8014686:	d016      	beq.n	80146b6 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801468a:	3324      	adds	r3, #36	; 0x24
 801468c:	4618      	mov	r0, r3
 801468e:	f001 f9f7 	bl	8015a80 <xTaskRemoveFromEventList>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d00e      	beq.n	80146b6 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d00b      	beq.n	80146b6 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2201      	movs	r2, #1
 80146a2:	601a      	str	r2, [r3, #0]
 80146a4:	e007      	b.n	80146b6 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80146a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146aa:	3301      	adds	r3, #1
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	b25a      	sxtb	r2, r3
 80146b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80146b6:	2301      	movs	r3, #1
 80146b8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80146ba:	e001      	b.n	80146c0 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80146bc:	2300      	movs	r3, #0
 80146be:	637b      	str	r3, [r7, #52]	; 0x34
 80146c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80146ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80146cc:	4618      	mov	r0, r3
 80146ce:	3738      	adds	r7, #56	; 0x38
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}

080146d4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b08e      	sub	sp, #56	; 0x38
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
 80146dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80146e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d10b      	bne.n	8014700 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80146e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ec:	b672      	cpsid	i
 80146ee:	f383 8811 	msr	BASEPRI, r3
 80146f2:	f3bf 8f6f 	isb	sy
 80146f6:	f3bf 8f4f 	dsb	sy
 80146fa:	b662      	cpsie	i
 80146fc:	623b      	str	r3, [r7, #32]
 80146fe:	e7fe      	b.n	80146fe <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00b      	beq.n	8014720 <xQueueGiveFromISR+0x4c>
 8014708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801470c:	b672      	cpsid	i
 801470e:	f383 8811 	msr	BASEPRI, r3
 8014712:	f3bf 8f6f 	isb	sy
 8014716:	f3bf 8f4f 	dsb	sy
 801471a:	b662      	cpsie	i
 801471c:	61fb      	str	r3, [r7, #28]
 801471e:	e7fe      	b.n	801471e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	2b00      	cmp	r3, #0
 8014726:	d103      	bne.n	8014730 <xQueueGiveFromISR+0x5c>
 8014728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d101      	bne.n	8014734 <xQueueGiveFromISR+0x60>
 8014730:	2301      	movs	r3, #1
 8014732:	e000      	b.n	8014736 <xQueueGiveFromISR+0x62>
 8014734:	2300      	movs	r3, #0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d10b      	bne.n	8014752 <xQueueGiveFromISR+0x7e>
 801473a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801473e:	b672      	cpsid	i
 8014740:	f383 8811 	msr	BASEPRI, r3
 8014744:	f3bf 8f6f 	isb	sy
 8014748:	f3bf 8f4f 	dsb	sy
 801474c:	b662      	cpsie	i
 801474e:	61bb      	str	r3, [r7, #24]
 8014750:	e7fe      	b.n	8014750 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014752:	f002 fa81 	bl	8016c58 <vPortValidateInterruptPriority>
	__asm volatile
 8014756:	f3ef 8211 	mrs	r2, BASEPRI
 801475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801475e:	b672      	cpsid	i
 8014760:	f383 8811 	msr	BASEPRI, r3
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	b662      	cpsie	i
 801476e:	617a      	str	r2, [r7, #20]
 8014770:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014772:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014774:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801477a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014782:	429a      	cmp	r2, r3
 8014784:	d22b      	bcs.n	80147de <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801478c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014792:	1c5a      	adds	r2, r3, #1
 8014794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014796:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a0:	d112      	bne.n	80147c8 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d016      	beq.n	80147d8 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147ac:	3324      	adds	r3, #36	; 0x24
 80147ae:	4618      	mov	r0, r3
 80147b0:	f001 f966 	bl	8015a80 <xTaskRemoveFromEventList>
 80147b4:	4603      	mov	r3, r0
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d00e      	beq.n	80147d8 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80147ba:	683b      	ldr	r3, [r7, #0]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d00b      	beq.n	80147d8 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	2201      	movs	r2, #1
 80147c4:	601a      	str	r2, [r3, #0]
 80147c6:	e007      	b.n	80147d8 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80147c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147cc:	3301      	adds	r3, #1
 80147ce:	b2db      	uxtb	r3, r3
 80147d0:	b25a      	sxtb	r2, r3
 80147d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80147d8:	2301      	movs	r3, #1
 80147da:	637b      	str	r3, [r7, #52]	; 0x34
 80147dc:	e001      	b.n	80147e2 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	637b      	str	r3, [r7, #52]	; 0x34
 80147e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80147ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80147ee:	4618      	mov	r0, r3
 80147f0:	3738      	adds	r7, #56	; 0x38
 80147f2:	46bd      	mov	sp, r7
 80147f4:	bd80      	pop	{r7, pc}
	...

080147f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b08c      	sub	sp, #48	; 0x30
 80147fc:	af00      	add	r7, sp, #0
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014804:	2300      	movs	r3, #0
 8014806:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801480e:	2b00      	cmp	r3, #0
 8014810:	d10b      	bne.n	801482a <xQueueReceive+0x32>
	__asm volatile
 8014812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014816:	b672      	cpsid	i
 8014818:	f383 8811 	msr	BASEPRI, r3
 801481c:	f3bf 8f6f 	isb	sy
 8014820:	f3bf 8f4f 	dsb	sy
 8014824:	b662      	cpsie	i
 8014826:	623b      	str	r3, [r7, #32]
 8014828:	e7fe      	b.n	8014828 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d103      	bne.n	8014838 <xQueueReceive+0x40>
 8014830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014834:	2b00      	cmp	r3, #0
 8014836:	d101      	bne.n	801483c <xQueueReceive+0x44>
 8014838:	2301      	movs	r3, #1
 801483a:	e000      	b.n	801483e <xQueueReceive+0x46>
 801483c:	2300      	movs	r3, #0
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10b      	bne.n	801485a <xQueueReceive+0x62>
 8014842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014846:	b672      	cpsid	i
 8014848:	f383 8811 	msr	BASEPRI, r3
 801484c:	f3bf 8f6f 	isb	sy
 8014850:	f3bf 8f4f 	dsb	sy
 8014854:	b662      	cpsie	i
 8014856:	61fb      	str	r3, [r7, #28]
 8014858:	e7fe      	b.n	8014858 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801485a:	f001 fadf 	bl	8015e1c <xTaskGetSchedulerState>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d102      	bne.n	801486a <xQueueReceive+0x72>
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <xQueueReceive+0x76>
 801486a:	2301      	movs	r3, #1
 801486c:	e000      	b.n	8014870 <xQueueReceive+0x78>
 801486e:	2300      	movs	r3, #0
 8014870:	2b00      	cmp	r3, #0
 8014872:	d10b      	bne.n	801488c <xQueueReceive+0x94>
 8014874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014878:	b672      	cpsid	i
 801487a:	f383 8811 	msr	BASEPRI, r3
 801487e:	f3bf 8f6f 	isb	sy
 8014882:	f3bf 8f4f 	dsb	sy
 8014886:	b662      	cpsie	i
 8014888:	61bb      	str	r3, [r7, #24]
 801488a:	e7fe      	b.n	801488a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801488c:	f002 f904 	bl	8016a98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014894:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014898:	2b00      	cmp	r3, #0
 801489a:	d01f      	beq.n	80148dc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801489c:	68b9      	ldr	r1, [r7, #8]
 801489e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80148a0:	f000 fac5 	bl	8014e2e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80148a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a6:	1e5a      	subs	r2, r3, #1
 80148a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148aa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80148ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ae:	691b      	ldr	r3, [r3, #16]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d00f      	beq.n	80148d4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80148b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b6:	3310      	adds	r3, #16
 80148b8:	4618      	mov	r0, r3
 80148ba:	f001 f8e1 	bl	8015a80 <xTaskRemoveFromEventList>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d007      	beq.n	80148d4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80148c4:	4b3c      	ldr	r3, [pc, #240]	; (80149b8 <xQueueReceive+0x1c0>)
 80148c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80148ca:	601a      	str	r2, [r3, #0]
 80148cc:	f3bf 8f4f 	dsb	sy
 80148d0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80148d4:	f002 f912 	bl	8016afc <vPortExitCritical>
				return pdPASS;
 80148d8:	2301      	movs	r3, #1
 80148da:	e069      	b.n	80149b0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d103      	bne.n	80148ea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80148e2:	f002 f90b 	bl	8016afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80148e6:	2300      	movs	r3, #0
 80148e8:	e062      	b.n	80149b0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80148ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d106      	bne.n	80148fe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80148f0:	f107 0310 	add.w	r3, r7, #16
 80148f4:	4618      	mov	r0, r3
 80148f6:	f001 f927 	bl	8015b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80148fa:	2301      	movs	r3, #1
 80148fc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80148fe:	f002 f8fd 	bl	8016afc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014902:	f000 fe85 	bl	8015610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014906:	f002 f8c7 	bl	8016a98 <vPortEnterCritical>
 801490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014910:	b25b      	sxtb	r3, r3
 8014912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014916:	d103      	bne.n	8014920 <xQueueReceive+0x128>
 8014918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491a:	2200      	movs	r2, #0
 801491c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014926:	b25b      	sxtb	r3, r3
 8014928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801492c:	d103      	bne.n	8014936 <xQueueReceive+0x13e>
 801492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014930:	2200      	movs	r2, #0
 8014932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014936:	f002 f8e1 	bl	8016afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801493a:	1d3a      	adds	r2, r7, #4
 801493c:	f107 0310 	add.w	r3, r7, #16
 8014940:	4611      	mov	r1, r2
 8014942:	4618      	mov	r0, r3
 8014944:	f001 f916 	bl	8015b74 <xTaskCheckForTimeOut>
 8014948:	4603      	mov	r3, r0
 801494a:	2b00      	cmp	r3, #0
 801494c:	d123      	bne.n	8014996 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801494e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014950:	f000 fae5 	bl	8014f1e <prvIsQueueEmpty>
 8014954:	4603      	mov	r3, r0
 8014956:	2b00      	cmp	r3, #0
 8014958:	d017      	beq.n	801498a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495c:	3324      	adds	r3, #36	; 0x24
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	4611      	mov	r1, r2
 8014962:	4618      	mov	r0, r3
 8014964:	f001 f83a 	bl	80159dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801496a:	f000 fa86 	bl	8014e7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801496e:	f000 fe5d 	bl	801562c <xTaskResumeAll>
 8014972:	4603      	mov	r3, r0
 8014974:	2b00      	cmp	r3, #0
 8014976:	d189      	bne.n	801488c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014978:	4b0f      	ldr	r3, [pc, #60]	; (80149b8 <xQueueReceive+0x1c0>)
 801497a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801497e:	601a      	str	r2, [r3, #0]
 8014980:	f3bf 8f4f 	dsb	sy
 8014984:	f3bf 8f6f 	isb	sy
 8014988:	e780      	b.n	801488c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801498a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801498c:	f000 fa75 	bl	8014e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014990:	f000 fe4c 	bl	801562c <xTaskResumeAll>
 8014994:	e77a      	b.n	801488c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014998:	f000 fa6f 	bl	8014e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801499c:	f000 fe46 	bl	801562c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80149a2:	f000 fabc 	bl	8014f1e <prvIsQueueEmpty>
 80149a6:	4603      	mov	r3, r0
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	f43f af6f 	beq.w	801488c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80149ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3730      	adds	r7, #48	; 0x30
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	e000ed04 	.word	0xe000ed04

080149bc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b08e      	sub	sp, #56	; 0x38
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80149c6:	2300      	movs	r3, #0
 80149c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80149ce:	2300      	movs	r3, #0
 80149d0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80149d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10b      	bne.n	80149f0 <xQueueSemaphoreTake+0x34>
 80149d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149dc:	b672      	cpsid	i
 80149de:	f383 8811 	msr	BASEPRI, r3
 80149e2:	f3bf 8f6f 	isb	sy
 80149e6:	f3bf 8f4f 	dsb	sy
 80149ea:	b662      	cpsie	i
 80149ec:	623b      	str	r3, [r7, #32]
 80149ee:	e7fe      	b.n	80149ee <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80149f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d00b      	beq.n	8014a10 <xQueueSemaphoreTake+0x54>
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	b672      	cpsid	i
 80149fe:	f383 8811 	msr	BASEPRI, r3
 8014a02:	f3bf 8f6f 	isb	sy
 8014a06:	f3bf 8f4f 	dsb	sy
 8014a0a:	b662      	cpsie	i
 8014a0c:	61fb      	str	r3, [r7, #28]
 8014a0e:	e7fe      	b.n	8014a0e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014a10:	f001 fa04 	bl	8015e1c <xTaskGetSchedulerState>
 8014a14:	4603      	mov	r3, r0
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d102      	bne.n	8014a20 <xQueueSemaphoreTake+0x64>
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d101      	bne.n	8014a24 <xQueueSemaphoreTake+0x68>
 8014a20:	2301      	movs	r3, #1
 8014a22:	e000      	b.n	8014a26 <xQueueSemaphoreTake+0x6a>
 8014a24:	2300      	movs	r3, #0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d10b      	bne.n	8014a42 <xQueueSemaphoreTake+0x86>
 8014a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a2e:	b672      	cpsid	i
 8014a30:	f383 8811 	msr	BASEPRI, r3
 8014a34:	f3bf 8f6f 	isb	sy
 8014a38:	f3bf 8f4f 	dsb	sy
 8014a3c:	b662      	cpsie	i
 8014a3e:	61bb      	str	r3, [r7, #24]
 8014a40:	e7fe      	b.n	8014a40 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014a42:	f002 f829 	bl	8016a98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014a4a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d024      	beq.n	8014a9c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a54:	1e5a      	subs	r2, r3, #1
 8014a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a58:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a5c:	681b      	ldr	r3, [r3, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d104      	bne.n	8014a6c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014a62:	f001 fb55 	bl	8016110 <pvTaskIncrementMutexHeldCount>
 8014a66:	4602      	mov	r2, r0
 8014a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6e:	691b      	ldr	r3, [r3, #16]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00f      	beq.n	8014a94 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a76:	3310      	adds	r3, #16
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f001 f801 	bl	8015a80 <xTaskRemoveFromEventList>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d007      	beq.n	8014a94 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014a84:	4b54      	ldr	r3, [pc, #336]	; (8014bd8 <xQueueSemaphoreTake+0x21c>)
 8014a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a8a:	601a      	str	r2, [r3, #0]
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014a94:	f002 f832 	bl	8016afc <vPortExitCritical>
				return pdPASS;
 8014a98:	2301      	movs	r3, #1
 8014a9a:	e098      	b.n	8014bce <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d112      	bne.n	8014ac8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d00b      	beq.n	8014ac0 <xQueueSemaphoreTake+0x104>
 8014aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aac:	b672      	cpsid	i
 8014aae:	f383 8811 	msr	BASEPRI, r3
 8014ab2:	f3bf 8f6f 	isb	sy
 8014ab6:	f3bf 8f4f 	dsb	sy
 8014aba:	b662      	cpsie	i
 8014abc:	617b      	str	r3, [r7, #20]
 8014abe:	e7fe      	b.n	8014abe <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014ac0:	f002 f81c 	bl	8016afc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	e082      	b.n	8014bce <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d106      	bne.n	8014adc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014ace:	f107 030c 	add.w	r3, r7, #12
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f001 f838 	bl	8015b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ad8:	2301      	movs	r3, #1
 8014ada:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014adc:	f002 f80e 	bl	8016afc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014ae0:	f000 fd96 	bl	8015610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014ae4:	f001 ffd8 	bl	8016a98 <vPortEnterCritical>
 8014ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014aee:	b25b      	sxtb	r3, r3
 8014af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014af4:	d103      	bne.n	8014afe <xQueueSemaphoreTake+0x142>
 8014af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014af8:	2200      	movs	r2, #0
 8014afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014b04:	b25b      	sxtb	r3, r3
 8014b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b0a:	d103      	bne.n	8014b14 <xQueueSemaphoreTake+0x158>
 8014b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b0e:	2200      	movs	r2, #0
 8014b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014b14:	f001 fff2 	bl	8016afc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014b18:	463a      	mov	r2, r7
 8014b1a:	f107 030c 	add.w	r3, r7, #12
 8014b1e:	4611      	mov	r1, r2
 8014b20:	4618      	mov	r0, r3
 8014b22:	f001 f827 	bl	8015b74 <xTaskCheckForTimeOut>
 8014b26:	4603      	mov	r3, r0
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d132      	bne.n	8014b92 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b2e:	f000 f9f6 	bl	8014f1e <prvIsQueueEmpty>
 8014b32:	4603      	mov	r3, r0
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d026      	beq.n	8014b86 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d109      	bne.n	8014b54 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014b40:	f001 ffaa 	bl	8016a98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b46:	689b      	ldr	r3, [r3, #8]
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f001 f985 	bl	8015e58 <xTaskPriorityInherit>
 8014b4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014b50:	f001 ffd4 	bl	8016afc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b56:	3324      	adds	r3, #36	; 0x24
 8014b58:	683a      	ldr	r2, [r7, #0]
 8014b5a:	4611      	mov	r1, r2
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f000 ff3d 	bl	80159dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014b62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b64:	f000 f989 	bl	8014e7a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014b68:	f000 fd60 	bl	801562c <xTaskResumeAll>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	f47f af67 	bne.w	8014a42 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014b74:	4b18      	ldr	r3, [pc, #96]	; (8014bd8 <xQueueSemaphoreTake+0x21c>)
 8014b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b7a:	601a      	str	r2, [r3, #0]
 8014b7c:	f3bf 8f4f 	dsb	sy
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	e75d      	b.n	8014a42 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b88:	f000 f977 	bl	8014e7a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014b8c:	f000 fd4e 	bl	801562c <xTaskResumeAll>
 8014b90:	e757      	b.n	8014a42 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014b92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b94:	f000 f971 	bl	8014e7a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014b98:	f000 fd48 	bl	801562c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b9e:	f000 f9be 	bl	8014f1e <prvIsQueueEmpty>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	f43f af4c 	beq.w	8014a42 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d00d      	beq.n	8014bcc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014bb0:	f001 ff72 	bl	8016a98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014bb6:	f000 f8b8 	bl	8014d2a <prvGetDisinheritPriorityAfterTimeout>
 8014bba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bbe:	689b      	ldr	r3, [r3, #8]
 8014bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f001 fa20 	bl	8016008 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014bc8:	f001 ff98 	bl	8016afc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014bcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3738      	adds	r7, #56	; 0x38
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	e000ed04 	.word	0xe000ed04

08014bdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b08e      	sub	sp, #56	; 0x38
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	60b9      	str	r1, [r7, #8]
 8014be6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d10b      	bne.n	8014c0a <xQueueReceiveFromISR+0x2e>
 8014bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf6:	b672      	cpsid	i
 8014bf8:	f383 8811 	msr	BASEPRI, r3
 8014bfc:	f3bf 8f6f 	isb	sy
 8014c00:	f3bf 8f4f 	dsb	sy
 8014c04:	b662      	cpsie	i
 8014c06:	623b      	str	r3, [r7, #32]
 8014c08:	e7fe      	b.n	8014c08 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d103      	bne.n	8014c18 <xQueueReceiveFromISR+0x3c>
 8014c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d101      	bne.n	8014c1c <xQueueReceiveFromISR+0x40>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e000      	b.n	8014c1e <xQueueReceiveFromISR+0x42>
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d10b      	bne.n	8014c3a <xQueueReceiveFromISR+0x5e>
 8014c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c26:	b672      	cpsid	i
 8014c28:	f383 8811 	msr	BASEPRI, r3
 8014c2c:	f3bf 8f6f 	isb	sy
 8014c30:	f3bf 8f4f 	dsb	sy
 8014c34:	b662      	cpsie	i
 8014c36:	61fb      	str	r3, [r7, #28]
 8014c38:	e7fe      	b.n	8014c38 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c3a:	f002 f80d 	bl	8016c58 <vPortValidateInterruptPriority>
	__asm volatile
 8014c3e:	f3ef 8211 	mrs	r2, BASEPRI
 8014c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c46:	b672      	cpsid	i
 8014c48:	f383 8811 	msr	BASEPRI, r3
 8014c4c:	f3bf 8f6f 	isb	sy
 8014c50:	f3bf 8f4f 	dsb	sy
 8014c54:	b662      	cpsie	i
 8014c56:	61ba      	str	r2, [r7, #24]
 8014c58:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014c5a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d02f      	beq.n	8014cca <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c74:	68b9      	ldr	r1, [r7, #8]
 8014c76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c78:	f000 f8d9 	bl	8014e2e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7e:	1e5a      	subs	r2, r3, #1
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8014c84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c8c:	d112      	bne.n	8014cb4 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	691b      	ldr	r3, [r3, #16]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d016      	beq.n	8014cc4 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c98:	3310      	adds	r3, #16
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f000 fef0 	bl	8015a80 <xTaskRemoveFromEventList>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d00e      	beq.n	8014cc4 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d00b      	beq.n	8014cc4 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2201      	movs	r2, #1
 8014cb0:	601a      	str	r2, [r3, #0]
 8014cb2:	e007      	b.n	8014cc4 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8014cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cb8:	3301      	adds	r3, #1
 8014cba:	b2db      	uxtb	r3, r3
 8014cbc:	b25a      	sxtb	r2, r3
 8014cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8014cc8:	e001      	b.n	8014cce <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8014cca:	2300      	movs	r3, #0
 8014ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8014cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014cd2:	693b      	ldr	r3, [r7, #16]
 8014cd4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3738      	adds	r7, #56	; 0x38
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}

08014ce2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014ce2:	b580      	push	{r7, lr}
 8014ce4:	b084      	sub	sp, #16
 8014ce6:	af00      	add	r7, sp, #0
 8014ce8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10b      	bne.n	8014d0c <vQueueDelete+0x2a>
	__asm volatile
 8014cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf8:	b672      	cpsid	i
 8014cfa:	f383 8811 	msr	BASEPRI, r3
 8014cfe:	f3bf 8f6f 	isb	sy
 8014d02:	f3bf 8f4f 	dsb	sy
 8014d06:	b662      	cpsie	i
 8014d08:	60bb      	str	r3, [r7, #8]
 8014d0a:	e7fe      	b.n	8014d0a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014d0c:	68f8      	ldr	r0, [r7, #12]
 8014d0e:	f000 f95d 	bl	8014fcc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d102      	bne.n	8014d22 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8014d1c:	68f8      	ldr	r0, [r7, #12]
 8014d1e:	f002 f8a5 	bl	8016e6c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8014d22:	bf00      	nop
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014d2a:	b480      	push	{r7}
 8014d2c:	b085      	sub	sp, #20
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d006      	beq.n	8014d48 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014d44:	60fb      	str	r3, [r7, #12]
 8014d46:	e001      	b.n	8014d4c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014d48:	2300      	movs	r3, #0
 8014d4a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014d4c:	68fb      	ldr	r3, [r7, #12]
	}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3714      	adds	r7, #20
 8014d52:	46bd      	mov	sp, r7
 8014d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d58:	4770      	bx	lr

08014d5a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014d5a:	b580      	push	{r7, lr}
 8014d5c:	b086      	sub	sp, #24
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	60f8      	str	r0, [r7, #12]
 8014d62:	60b9      	str	r1, [r7, #8]
 8014d64:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014d66:	2300      	movs	r3, #0
 8014d68:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d6e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d10d      	bne.n	8014d94 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d14d      	bne.n	8014e1c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	689b      	ldr	r3, [r3, #8]
 8014d84:	4618      	mov	r0, r3
 8014d86:	f001 f8cf 	bl	8015f28 <xTaskPriorityDisinherit>
 8014d8a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	609a      	str	r2, [r3, #8]
 8014d92:	e043      	b.n	8014e1c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d119      	bne.n	8014dce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	6858      	ldr	r0, [r3, #4]
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014da2:	461a      	mov	r2, r3
 8014da4:	68b9      	ldr	r1, [r7, #8]
 8014da6:	f002 ff0d 	bl	8017bc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	685a      	ldr	r2, [r3, #4]
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014db2:	441a      	add	r2, r3
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	685a      	ldr	r2, [r3, #4]
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	689b      	ldr	r3, [r3, #8]
 8014dc0:	429a      	cmp	r2, r3
 8014dc2:	d32b      	bcc.n	8014e1c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	605a      	str	r2, [r3, #4]
 8014dcc:	e026      	b.n	8014e1c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	68d8      	ldr	r0, [r3, #12]
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dd6:	461a      	mov	r2, r3
 8014dd8:	68b9      	ldr	r1, [r7, #8]
 8014dda:	f002 fef3 	bl	8017bc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	68da      	ldr	r2, [r3, #12]
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014de6:	425b      	negs	r3, r3
 8014de8:	441a      	add	r2, r3
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	68da      	ldr	r2, [r3, #12]
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	429a      	cmp	r2, r3
 8014df8:	d207      	bcs.n	8014e0a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	689a      	ldr	r2, [r3, #8]
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e02:	425b      	negs	r3, r3
 8014e04:	441a      	add	r2, r3
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2b02      	cmp	r3, #2
 8014e0e:	d105      	bne.n	8014e1c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d002      	beq.n	8014e1c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014e1c:	693b      	ldr	r3, [r7, #16]
 8014e1e:	1c5a      	adds	r2, r3, #1
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014e24:	697b      	ldr	r3, [r7, #20]
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3718      	adds	r7, #24
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}

08014e2e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014e2e:	b580      	push	{r7, lr}
 8014e30:	b082      	sub	sp, #8
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
 8014e36:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d018      	beq.n	8014e72 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	68da      	ldr	r2, [r3, #12]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e48:	441a      	add	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	68da      	ldr	r2, [r3, #12]
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	689b      	ldr	r3, [r3, #8]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d303      	bcc.n	8014e62 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	681a      	ldr	r2, [r3, #0]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	68d9      	ldr	r1, [r3, #12]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e6a:	461a      	mov	r2, r3
 8014e6c:	6838      	ldr	r0, [r7, #0]
 8014e6e:	f002 fea9 	bl	8017bc4 <memcpy>
	}
}
 8014e72:	bf00      	nop
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b084      	sub	sp, #16
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014e82:	f001 fe09 	bl	8016a98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014e8c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014e8e:	e011      	b.n	8014eb4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d012      	beq.n	8014ebe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	3324      	adds	r3, #36	; 0x24
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f000 fdef 	bl	8015a80 <xTaskRemoveFromEventList>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d001      	beq.n	8014eac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014ea8:	f000 fec8 	bl	8015c3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014eac:	7bfb      	ldrb	r3, [r7, #15]
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	dce9      	bgt.n	8014e90 <prvUnlockQueue+0x16>
 8014ebc:	e000      	b.n	8014ec0 <prvUnlockQueue+0x46>
					break;
 8014ebe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	22ff      	movs	r2, #255	; 0xff
 8014ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014ec8:	f001 fe18 	bl	8016afc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014ecc:	f001 fde4 	bl	8016a98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014ed6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014ed8:	e011      	b.n	8014efe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	691b      	ldr	r3, [r3, #16]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d012      	beq.n	8014f08 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	3310      	adds	r3, #16
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f000 fdca 	bl	8015a80 <xTaskRemoveFromEventList>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014ef2:	f000 fea3 	bl	8015c3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014ef6:	7bbb      	ldrb	r3, [r7, #14]
 8014ef8:	3b01      	subs	r3, #1
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014efe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	dce9      	bgt.n	8014eda <prvUnlockQueue+0x60>
 8014f06:	e000      	b.n	8014f0a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014f08:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	22ff      	movs	r2, #255	; 0xff
 8014f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8014f12:	f001 fdf3 	bl	8016afc <vPortExitCritical>
}
 8014f16:	bf00      	nop
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014f1e:	b580      	push	{r7, lr}
 8014f20:	b084      	sub	sp, #16
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014f26:	f001 fdb7 	bl	8016a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014f32:	2301      	movs	r3, #1
 8014f34:	60fb      	str	r3, [r7, #12]
 8014f36:	e001      	b.n	8014f3c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014f3c:	f001 fdde 	bl	8016afc <vPortExitCritical>

	return xReturn;
 8014f40:	68fb      	ldr	r3, [r7, #12]
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3710      	adds	r7, #16
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}

08014f4a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014f4a:	b580      	push	{r7, lr}
 8014f4c:	b084      	sub	sp, #16
 8014f4e:	af00      	add	r7, sp, #0
 8014f50:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014f52:	f001 fda1 	bl	8016a98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d102      	bne.n	8014f68 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014f62:	2301      	movs	r3, #1
 8014f64:	60fb      	str	r3, [r7, #12]
 8014f66:	e001      	b.n	8014f6c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014f6c:	f001 fdc6 	bl	8016afc <vPortExitCritical>

	return xReturn;
 8014f70:	68fb      	ldr	r3, [r7, #12]
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
	...

08014f7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014f7c:	b480      	push	{r7}
 8014f7e:	b085      	sub	sp, #20
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014f86:	2300      	movs	r3, #0
 8014f88:	60fb      	str	r3, [r7, #12]
 8014f8a:	e014      	b.n	8014fb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014f8c:	4a0e      	ldr	r2, [pc, #56]	; (8014fc8 <vQueueAddToRegistry+0x4c>)
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014f94:	2b00      	cmp	r3, #0
 8014f96:	d10b      	bne.n	8014fb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014f98:	490b      	ldr	r1, [pc, #44]	; (8014fc8 <vQueueAddToRegistry+0x4c>)
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	683a      	ldr	r2, [r7, #0]
 8014f9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014fa2:	4a09      	ldr	r2, [pc, #36]	; (8014fc8 <vQueueAddToRegistry+0x4c>)
 8014fa4:	68fb      	ldr	r3, [r7, #12]
 8014fa6:	00db      	lsls	r3, r3, #3
 8014fa8:	4413      	add	r3, r2
 8014faa:	687a      	ldr	r2, [r7, #4]
 8014fac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014fae:	e005      	b.n	8014fbc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	60fb      	str	r3, [r7, #12]
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	2b07      	cmp	r3, #7
 8014fba:	d9e7      	bls.n	8014f8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014fbc:	bf00      	nop
 8014fbe:	3714      	adds	r7, #20
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr
 8014fc8:	20027628 	.word	0x20027628

08014fcc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8014fcc:	b480      	push	{r7}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	60fb      	str	r3, [r7, #12]
 8014fd8:	e016      	b.n	8015008 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8014fda:	4a10      	ldr	r2, [pc, #64]	; (801501c <vQueueUnregisterQueue+0x50>)
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	00db      	lsls	r3, r3, #3
 8014fe0:	4413      	add	r3, r2
 8014fe2:	685b      	ldr	r3, [r3, #4]
 8014fe4:	687a      	ldr	r2, [r7, #4]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d10b      	bne.n	8015002 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8014fea:	4a0c      	ldr	r2, [pc, #48]	; (801501c <vQueueUnregisterQueue+0x50>)
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	2100      	movs	r1, #0
 8014ff0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014ff4:	4a09      	ldr	r2, [pc, #36]	; (801501c <vQueueUnregisterQueue+0x50>)
 8014ff6:	68fb      	ldr	r3, [r7, #12]
 8014ff8:	00db      	lsls	r3, r3, #3
 8014ffa:	4413      	add	r3, r2
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	605a      	str	r2, [r3, #4]
				break;
 8015000:	e005      	b.n	801500e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	3301      	adds	r3, #1
 8015006:	60fb      	str	r3, [r7, #12]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2b07      	cmp	r3, #7
 801500c:	d9e5      	bls.n	8014fda <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801500e:	bf00      	nop
 8015010:	3714      	adds	r7, #20
 8015012:	46bd      	mov	sp, r7
 8015014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015018:	4770      	bx	lr
 801501a:	bf00      	nop
 801501c:	20027628 	.word	0x20027628

08015020 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015020:	b580      	push	{r7, lr}
 8015022:	b086      	sub	sp, #24
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015030:	f001 fd32 	bl	8016a98 <vPortEnterCritical>
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801503a:	b25b      	sxtb	r3, r3
 801503c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015040:	d103      	bne.n	801504a <vQueueWaitForMessageRestricted+0x2a>
 8015042:	697b      	ldr	r3, [r7, #20]
 8015044:	2200      	movs	r2, #0
 8015046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015050:	b25b      	sxtb	r3, r3
 8015052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015056:	d103      	bne.n	8015060 <vQueueWaitForMessageRestricted+0x40>
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	2200      	movs	r2, #0
 801505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015060:	f001 fd4c 	bl	8016afc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015068:	2b00      	cmp	r3, #0
 801506a:	d106      	bne.n	801507a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	3324      	adds	r3, #36	; 0x24
 8015070:	687a      	ldr	r2, [r7, #4]
 8015072:	68b9      	ldr	r1, [r7, #8]
 8015074:	4618      	mov	r0, r3
 8015076:	f000 fcd7 	bl	8015a28 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801507a:	6978      	ldr	r0, [r7, #20]
 801507c:	f7ff fefd 	bl	8014e7a <prvUnlockQueue>
	}
 8015080:	bf00      	nop
 8015082:	3718      	adds	r7, #24
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015088:	b580      	push	{r7, lr}
 801508a:	b08e      	sub	sp, #56	; 0x38
 801508c:	af04      	add	r7, sp, #16
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
 8015094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015098:	2b00      	cmp	r3, #0
 801509a:	d10b      	bne.n	80150b4 <xTaskCreateStatic+0x2c>
 801509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a0:	b672      	cpsid	i
 80150a2:	f383 8811 	msr	BASEPRI, r3
 80150a6:	f3bf 8f6f 	isb	sy
 80150aa:	f3bf 8f4f 	dsb	sy
 80150ae:	b662      	cpsie	i
 80150b0:	623b      	str	r3, [r7, #32]
 80150b2:	e7fe      	b.n	80150b2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80150b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d10b      	bne.n	80150d2 <xTaskCreateStatic+0x4a>
 80150ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150be:	b672      	cpsid	i
 80150c0:	f383 8811 	msr	BASEPRI, r3
 80150c4:	f3bf 8f6f 	isb	sy
 80150c8:	f3bf 8f4f 	dsb	sy
 80150cc:	b662      	cpsie	i
 80150ce:	61fb      	str	r3, [r7, #28]
 80150d0:	e7fe      	b.n	80150d0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80150d2:	235c      	movs	r3, #92	; 0x5c
 80150d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	2b5c      	cmp	r3, #92	; 0x5c
 80150da:	d00b      	beq.n	80150f4 <xTaskCreateStatic+0x6c>
 80150dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e0:	b672      	cpsid	i
 80150e2:	f383 8811 	msr	BASEPRI, r3
 80150e6:	f3bf 8f6f 	isb	sy
 80150ea:	f3bf 8f4f 	dsb	sy
 80150ee:	b662      	cpsie	i
 80150f0:	61bb      	str	r3, [r7, #24]
 80150f2:	e7fe      	b.n	80150f2 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80150f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80150f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d01e      	beq.n	801513a <xTaskCreateStatic+0xb2>
 80150fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d01b      	beq.n	801513a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015104:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801510a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510e:	2202      	movs	r2, #2
 8015110:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015114:	2300      	movs	r3, #0
 8015116:	9303      	str	r3, [sp, #12]
 8015118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511a:	9302      	str	r3, [sp, #8]
 801511c:	f107 0314 	add.w	r3, r7, #20
 8015120:	9301      	str	r3, [sp, #4]
 8015122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	687a      	ldr	r2, [r7, #4]
 801512a:	68b9      	ldr	r1, [r7, #8]
 801512c:	68f8      	ldr	r0, [r7, #12]
 801512e:	f000 f850 	bl	80151d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015132:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015134:	f000 f8de 	bl	80152f4 <prvAddNewTaskToReadyList>
 8015138:	e001      	b.n	801513e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801513a:	2300      	movs	r3, #0
 801513c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801513e:	697b      	ldr	r3, [r7, #20]
	}
 8015140:	4618      	mov	r0, r3
 8015142:	3728      	adds	r7, #40	; 0x28
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015148:	b580      	push	{r7, lr}
 801514a:	b08c      	sub	sp, #48	; 0x30
 801514c:	af04      	add	r7, sp, #16
 801514e:	60f8      	str	r0, [r7, #12]
 8015150:	60b9      	str	r1, [r7, #8]
 8015152:	603b      	str	r3, [r7, #0]
 8015154:	4613      	mov	r3, r2
 8015156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015158:	88fb      	ldrh	r3, [r7, #6]
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	4618      	mov	r0, r3
 801515e:	f001 fdbd 	bl	8016cdc <pvPortMalloc>
 8015162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015164:	697b      	ldr	r3, [r7, #20]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d00e      	beq.n	8015188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801516a:	205c      	movs	r0, #92	; 0x5c
 801516c:	f001 fdb6 	bl	8016cdc <pvPortMalloc>
 8015170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015172:	69fb      	ldr	r3, [r7, #28]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d003      	beq.n	8015180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015178:	69fb      	ldr	r3, [r7, #28]
 801517a:	697a      	ldr	r2, [r7, #20]
 801517c:	631a      	str	r2, [r3, #48]	; 0x30
 801517e:	e005      	b.n	801518c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015180:	6978      	ldr	r0, [r7, #20]
 8015182:	f001 fe73 	bl	8016e6c <vPortFree>
 8015186:	e001      	b.n	801518c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015188:	2300      	movs	r3, #0
 801518a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d017      	beq.n	80151c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015192:	69fb      	ldr	r3, [r7, #28]
 8015194:	2200      	movs	r2, #0
 8015196:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801519a:	88fa      	ldrh	r2, [r7, #6]
 801519c:	2300      	movs	r3, #0
 801519e:	9303      	str	r3, [sp, #12]
 80151a0:	69fb      	ldr	r3, [r7, #28]
 80151a2:	9302      	str	r3, [sp, #8]
 80151a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151a6:	9301      	str	r3, [sp, #4]
 80151a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151aa:	9300      	str	r3, [sp, #0]
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	68b9      	ldr	r1, [r7, #8]
 80151b0:	68f8      	ldr	r0, [r7, #12]
 80151b2:	f000 f80e 	bl	80151d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80151b6:	69f8      	ldr	r0, [r7, #28]
 80151b8:	f000 f89c 	bl	80152f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80151bc:	2301      	movs	r3, #1
 80151be:	61bb      	str	r3, [r7, #24]
 80151c0:	e002      	b.n	80151c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80151c2:	f04f 33ff 	mov.w	r3, #4294967295
 80151c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80151c8:	69bb      	ldr	r3, [r7, #24]
	}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3720      	adds	r7, #32
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}

080151d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80151d2:	b580      	push	{r7, lr}
 80151d4:	b088      	sub	sp, #32
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	60f8      	str	r0, [r7, #12]
 80151da:	60b9      	str	r1, [r7, #8]
 80151dc:	607a      	str	r2, [r7, #4]
 80151de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80151e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	009b      	lsls	r3, r3, #2
 80151e8:	461a      	mov	r2, r3
 80151ea:	21a5      	movs	r1, #165	; 0xa5
 80151ec:	f002 fcf5 	bl	8017bda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80151f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80151f4:	6879      	ldr	r1, [r7, #4]
 80151f6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80151fa:	440b      	add	r3, r1
 80151fc:	009b      	lsls	r3, r3, #2
 80151fe:	4413      	add	r3, r2
 8015200:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	f023 0307 	bic.w	r3, r3, #7
 8015208:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801520a:	69bb      	ldr	r3, [r7, #24]
 801520c:	f003 0307 	and.w	r3, r3, #7
 8015210:	2b00      	cmp	r3, #0
 8015212:	d00b      	beq.n	801522c <prvInitialiseNewTask+0x5a>
 8015214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015218:	b672      	cpsid	i
 801521a:	f383 8811 	msr	BASEPRI, r3
 801521e:	f3bf 8f6f 	isb	sy
 8015222:	f3bf 8f4f 	dsb	sy
 8015226:	b662      	cpsie	i
 8015228:	617b      	str	r3, [r7, #20]
 801522a:	e7fe      	b.n	801522a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d01f      	beq.n	8015272 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015232:	2300      	movs	r3, #0
 8015234:	61fb      	str	r3, [r7, #28]
 8015236:	e012      	b.n	801525e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015238:	68ba      	ldr	r2, [r7, #8]
 801523a:	69fb      	ldr	r3, [r7, #28]
 801523c:	4413      	add	r3, r2
 801523e:	7819      	ldrb	r1, [r3, #0]
 8015240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015242:	69fb      	ldr	r3, [r7, #28]
 8015244:	4413      	add	r3, r2
 8015246:	3334      	adds	r3, #52	; 0x34
 8015248:	460a      	mov	r2, r1
 801524a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	4413      	add	r3, r2
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d006      	beq.n	8015266 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015258:	69fb      	ldr	r3, [r7, #28]
 801525a:	3301      	adds	r3, #1
 801525c:	61fb      	str	r3, [r7, #28]
 801525e:	69fb      	ldr	r3, [r7, #28]
 8015260:	2b0f      	cmp	r3, #15
 8015262:	d9e9      	bls.n	8015238 <prvInitialiseNewTask+0x66>
 8015264:	e000      	b.n	8015268 <prvInitialiseNewTask+0x96>
			{
				break;
 8015266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801526a:	2200      	movs	r2, #0
 801526c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015270:	e003      	b.n	801527a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015274:	2200      	movs	r2, #0
 8015276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801527c:	2b37      	cmp	r3, #55	; 0x37
 801527e:	d901      	bls.n	8015284 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015280:	2337      	movs	r3, #55	; 0x37
 8015282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801528e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015292:	2200      	movs	r2, #0
 8015294:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015298:	3304      	adds	r3, #4
 801529a:	4618      	mov	r0, r3
 801529c:	f7fe fd76 	bl	8013d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80152a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a2:	3318      	adds	r3, #24
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fe fd71 	bl	8013d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80152aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80152b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80152b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80152c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c2:	2200      	movs	r2, #0
 80152c4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80152c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c8:	2200      	movs	r2, #0
 80152ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	68f9      	ldr	r1, [r7, #12]
 80152d2:	69b8      	ldr	r0, [r7, #24]
 80152d4:	f001 fad8 	bl	8016888 <pxPortInitialiseStack>
 80152d8:	4602      	mov	r2, r0
 80152da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80152de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d002      	beq.n	80152ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80152e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80152ea:	bf00      	nop
 80152ec:	3720      	adds	r7, #32
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
	...

080152f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b082      	sub	sp, #8
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80152fc:	f001 fbcc 	bl	8016a98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015300:	4b2d      	ldr	r3, [pc, #180]	; (80153b8 <prvAddNewTaskToReadyList+0xc4>)
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	3301      	adds	r3, #1
 8015306:	4a2c      	ldr	r2, [pc, #176]	; (80153b8 <prvAddNewTaskToReadyList+0xc4>)
 8015308:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801530a:	4b2c      	ldr	r3, [pc, #176]	; (80153bc <prvAddNewTaskToReadyList+0xc8>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d109      	bne.n	8015326 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015312:	4a2a      	ldr	r2, [pc, #168]	; (80153bc <prvAddNewTaskToReadyList+0xc8>)
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015318:	4b27      	ldr	r3, [pc, #156]	; (80153b8 <prvAddNewTaskToReadyList+0xc4>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2b01      	cmp	r3, #1
 801531e:	d110      	bne.n	8015342 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015320:	f000 fcb0 	bl	8015c84 <prvInitialiseTaskLists>
 8015324:	e00d      	b.n	8015342 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015326:	4b26      	ldr	r3, [pc, #152]	; (80153c0 <prvAddNewTaskToReadyList+0xcc>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d109      	bne.n	8015342 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801532e:	4b23      	ldr	r3, [pc, #140]	; (80153bc <prvAddNewTaskToReadyList+0xc8>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015338:	429a      	cmp	r2, r3
 801533a:	d802      	bhi.n	8015342 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801533c:	4a1f      	ldr	r2, [pc, #124]	; (80153bc <prvAddNewTaskToReadyList+0xc8>)
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015342:	4b20      	ldr	r3, [pc, #128]	; (80153c4 <prvAddNewTaskToReadyList+0xd0>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	3301      	adds	r3, #1
 8015348:	4a1e      	ldr	r2, [pc, #120]	; (80153c4 <prvAddNewTaskToReadyList+0xd0>)
 801534a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801534c:	4b1d      	ldr	r3, [pc, #116]	; (80153c4 <prvAddNewTaskToReadyList+0xd0>)
 801534e:	681a      	ldr	r2, [r3, #0]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015358:	4b1b      	ldr	r3, [pc, #108]	; (80153c8 <prvAddNewTaskToReadyList+0xd4>)
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	429a      	cmp	r2, r3
 801535e:	d903      	bls.n	8015368 <prvAddNewTaskToReadyList+0x74>
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015364:	4a18      	ldr	r2, [pc, #96]	; (80153c8 <prvAddNewTaskToReadyList+0xd4>)
 8015366:	6013      	str	r3, [r2, #0]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801536c:	4613      	mov	r3, r2
 801536e:	009b      	lsls	r3, r3, #2
 8015370:	4413      	add	r3, r2
 8015372:	009b      	lsls	r3, r3, #2
 8015374:	4a15      	ldr	r2, [pc, #84]	; (80153cc <prvAddNewTaskToReadyList+0xd8>)
 8015376:	441a      	add	r2, r3
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	3304      	adds	r3, #4
 801537c:	4619      	mov	r1, r3
 801537e:	4610      	mov	r0, r2
 8015380:	f7fe fd11 	bl	8013da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015384:	f001 fbba 	bl	8016afc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015388:	4b0d      	ldr	r3, [pc, #52]	; (80153c0 <prvAddNewTaskToReadyList+0xcc>)
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00e      	beq.n	80153ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015390:	4b0a      	ldr	r3, [pc, #40]	; (80153bc <prvAddNewTaskToReadyList+0xc8>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801539a:	429a      	cmp	r2, r3
 801539c:	d207      	bcs.n	80153ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801539e:	4b0c      	ldr	r3, [pc, #48]	; (80153d0 <prvAddNewTaskToReadyList+0xdc>)
 80153a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153a4:	601a      	str	r2, [r3, #0]
 80153a6:	f3bf 8f4f 	dsb	sy
 80153aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80153ae:	bf00      	nop
 80153b0:	3708      	adds	r7, #8
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	20001000 	.word	0x20001000
 80153bc:	20000b2c 	.word	0x20000b2c
 80153c0:	2000100c 	.word	0x2000100c
 80153c4:	2000101c 	.word	0x2000101c
 80153c8:	20001008 	.word	0x20001008
 80153cc:	20000b30 	.word	0x20000b30
 80153d0:	e000ed04 	.word	0xe000ed04

080153d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b08a      	sub	sp, #40	; 0x28
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80153de:	2300      	movs	r3, #0
 80153e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d10b      	bne.n	8015400 <vTaskDelayUntil+0x2c>
 80153e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ec:	b672      	cpsid	i
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	b662      	cpsie	i
 80153fc:	617b      	str	r3, [r7, #20]
 80153fe:	e7fe      	b.n	80153fe <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d10b      	bne.n	801541e <vTaskDelayUntil+0x4a>
 8015406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801540a:	b672      	cpsid	i
 801540c:	f383 8811 	msr	BASEPRI, r3
 8015410:	f3bf 8f6f 	isb	sy
 8015414:	f3bf 8f4f 	dsb	sy
 8015418:	b662      	cpsie	i
 801541a:	613b      	str	r3, [r7, #16]
 801541c:	e7fe      	b.n	801541c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 801541e:	4b2a      	ldr	r3, [pc, #168]	; (80154c8 <vTaskDelayUntil+0xf4>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d00b      	beq.n	801543e <vTaskDelayUntil+0x6a>
 8015426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801542a:	b672      	cpsid	i
 801542c:	f383 8811 	msr	BASEPRI, r3
 8015430:	f3bf 8f6f 	isb	sy
 8015434:	f3bf 8f4f 	dsb	sy
 8015438:	b662      	cpsie	i
 801543a:	60fb      	str	r3, [r7, #12]
 801543c:	e7fe      	b.n	801543c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 801543e:	f000 f8e7 	bl	8015610 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8015442:	4b22      	ldr	r3, [pc, #136]	; (80154cc <vTaskDelayUntil+0xf8>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	683a      	ldr	r2, [r7, #0]
 801544e:	4413      	add	r3, r2
 8015450:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	6a3a      	ldr	r2, [r7, #32]
 8015458:	429a      	cmp	r2, r3
 801545a:	d20b      	bcs.n	8015474 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	429a      	cmp	r2, r3
 8015464:	d211      	bcs.n	801548a <vTaskDelayUntil+0xb6>
 8015466:	69fa      	ldr	r2, [r7, #28]
 8015468:	6a3b      	ldr	r3, [r7, #32]
 801546a:	429a      	cmp	r2, r3
 801546c:	d90d      	bls.n	801548a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801546e:	2301      	movs	r3, #1
 8015470:	627b      	str	r3, [r7, #36]	; 0x24
 8015472:	e00a      	b.n	801548a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	69fa      	ldr	r2, [r7, #28]
 801547a:	429a      	cmp	r2, r3
 801547c:	d303      	bcc.n	8015486 <vTaskDelayUntil+0xb2>
 801547e:	69fa      	ldr	r2, [r7, #28]
 8015480:	6a3b      	ldr	r3, [r7, #32]
 8015482:	429a      	cmp	r2, r3
 8015484:	d901      	bls.n	801548a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8015486:	2301      	movs	r3, #1
 8015488:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	69fa      	ldr	r2, [r7, #28]
 801548e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8015490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015492:	2b00      	cmp	r3, #0
 8015494:	d006      	beq.n	80154a4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8015496:	69fa      	ldr	r2, [r7, #28]
 8015498:	6a3b      	ldr	r3, [r7, #32]
 801549a:	1ad3      	subs	r3, r2, r3
 801549c:	2100      	movs	r1, #0
 801549e:	4618      	mov	r0, r3
 80154a0:	f000 fe4a 	bl	8016138 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80154a4:	f000 f8c2 	bl	801562c <xTaskResumeAll>
 80154a8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d107      	bne.n	80154c0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80154b0:	4b07      	ldr	r3, [pc, #28]	; (80154d0 <vTaskDelayUntil+0xfc>)
 80154b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154b6:	601a      	str	r2, [r3, #0]
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80154c0:	bf00      	nop
 80154c2:	3728      	adds	r7, #40	; 0x28
 80154c4:	46bd      	mov	sp, r7
 80154c6:	bd80      	pop	{r7, pc}
 80154c8:	20001028 	.word	0x20001028
 80154cc:	20001004 	.word	0x20001004
 80154d0:	e000ed04 	.word	0xe000ed04

080154d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80154dc:	2300      	movs	r3, #0
 80154de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d018      	beq.n	8015518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80154e6:	4b14      	ldr	r3, [pc, #80]	; (8015538 <vTaskDelay+0x64>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d00b      	beq.n	8015506 <vTaskDelay+0x32>
 80154ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f2:	b672      	cpsid	i
 80154f4:	f383 8811 	msr	BASEPRI, r3
 80154f8:	f3bf 8f6f 	isb	sy
 80154fc:	f3bf 8f4f 	dsb	sy
 8015500:	b662      	cpsie	i
 8015502:	60bb      	str	r3, [r7, #8]
 8015504:	e7fe      	b.n	8015504 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8015506:	f000 f883 	bl	8015610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801550a:	2100      	movs	r1, #0
 801550c:	6878      	ldr	r0, [r7, #4]
 801550e:	f000 fe13 	bl	8016138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015512:	f000 f88b 	bl	801562c <xTaskResumeAll>
 8015516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d107      	bne.n	801552e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801551e:	4b07      	ldr	r3, [pc, #28]	; (801553c <vTaskDelay+0x68>)
 8015520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015524:	601a      	str	r2, [r3, #0]
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801552e:	bf00      	nop
 8015530:	3710      	adds	r7, #16
 8015532:	46bd      	mov	sp, r7
 8015534:	bd80      	pop	{r7, pc}
 8015536:	bf00      	nop
 8015538:	20001028 	.word	0x20001028
 801553c:	e000ed04 	.word	0xe000ed04

08015540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b08a      	sub	sp, #40	; 0x28
 8015544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015546:	2300      	movs	r3, #0
 8015548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801554a:	2300      	movs	r3, #0
 801554c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801554e:	463a      	mov	r2, r7
 8015550:	1d39      	adds	r1, r7, #4
 8015552:	f107 0308 	add.w	r3, r7, #8
 8015556:	4618      	mov	r0, r3
 8015558:	f7fe fbc4 	bl	8013ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801555c:	6839      	ldr	r1, [r7, #0]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	68ba      	ldr	r2, [r7, #8]
 8015562:	9202      	str	r2, [sp, #8]
 8015564:	9301      	str	r3, [sp, #4]
 8015566:	2300      	movs	r3, #0
 8015568:	9300      	str	r3, [sp, #0]
 801556a:	2300      	movs	r3, #0
 801556c:	460a      	mov	r2, r1
 801556e:	4922      	ldr	r1, [pc, #136]	; (80155f8 <vTaskStartScheduler+0xb8>)
 8015570:	4822      	ldr	r0, [pc, #136]	; (80155fc <vTaskStartScheduler+0xbc>)
 8015572:	f7ff fd89 	bl	8015088 <xTaskCreateStatic>
 8015576:	4602      	mov	r2, r0
 8015578:	4b21      	ldr	r3, [pc, #132]	; (8015600 <vTaskStartScheduler+0xc0>)
 801557a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801557c:	4b20      	ldr	r3, [pc, #128]	; (8015600 <vTaskStartScheduler+0xc0>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d002      	beq.n	801558a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015584:	2301      	movs	r3, #1
 8015586:	617b      	str	r3, [r7, #20]
 8015588:	e001      	b.n	801558e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801558a:	2300      	movs	r3, #0
 801558c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801558e:	697b      	ldr	r3, [r7, #20]
 8015590:	2b01      	cmp	r3, #1
 8015592:	d102      	bne.n	801559a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015594:	f000 fe24 	bl	80161e0 <xTimerCreateTimerTask>
 8015598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801559a:	697b      	ldr	r3, [r7, #20]
 801559c:	2b01      	cmp	r3, #1
 801559e:	d117      	bne.n	80155d0 <vTaskStartScheduler+0x90>
 80155a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155a4:	b672      	cpsid	i
 80155a6:	f383 8811 	msr	BASEPRI, r3
 80155aa:	f3bf 8f6f 	isb	sy
 80155ae:	f3bf 8f4f 	dsb	sy
 80155b2:	b662      	cpsie	i
 80155b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80155b6:	4b13      	ldr	r3, [pc, #76]	; (8015604 <vTaskStartScheduler+0xc4>)
 80155b8:	f04f 32ff 	mov.w	r2, #4294967295
 80155bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80155be:	4b12      	ldr	r3, [pc, #72]	; (8015608 <vTaskStartScheduler+0xc8>)
 80155c0:	2201      	movs	r2, #1
 80155c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80155c4:	4b11      	ldr	r3, [pc, #68]	; (801560c <vTaskStartScheduler+0xcc>)
 80155c6:	2200      	movs	r2, #0
 80155c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80155ca:	f001 f9e9 	bl	80169a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80155ce:	e00f      	b.n	80155f0 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d6:	d10b      	bne.n	80155f0 <vTaskStartScheduler+0xb0>
 80155d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155dc:	b672      	cpsid	i
 80155de:	f383 8811 	msr	BASEPRI, r3
 80155e2:	f3bf 8f6f 	isb	sy
 80155e6:	f3bf 8f4f 	dsb	sy
 80155ea:	b662      	cpsie	i
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	e7fe      	b.n	80155ee <vTaskStartScheduler+0xae>
}
 80155f0:	bf00      	nop
 80155f2:	3718      	adds	r7, #24
 80155f4:	46bd      	mov	sp, r7
 80155f6:	bd80      	pop	{r7, pc}
 80155f8:	0801aad4 	.word	0x0801aad4
 80155fc:	08015c55 	.word	0x08015c55
 8015600:	20001024 	.word	0x20001024
 8015604:	20001020 	.word	0x20001020
 8015608:	2000100c 	.word	0x2000100c
 801560c:	20001004 	.word	0x20001004

08015610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015610:	b480      	push	{r7}
 8015612:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015614:	4b04      	ldr	r3, [pc, #16]	; (8015628 <vTaskSuspendAll+0x18>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	3301      	adds	r3, #1
 801561a:	4a03      	ldr	r2, [pc, #12]	; (8015628 <vTaskSuspendAll+0x18>)
 801561c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801561e:	bf00      	nop
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr
 8015628:	20001028 	.word	0x20001028

0801562c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b084      	sub	sp, #16
 8015630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015632:	2300      	movs	r3, #0
 8015634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015636:	2300      	movs	r3, #0
 8015638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801563a:	4b42      	ldr	r3, [pc, #264]	; (8015744 <xTaskResumeAll+0x118>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d10b      	bne.n	801565a <xTaskResumeAll+0x2e>
 8015642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015646:	b672      	cpsid	i
 8015648:	f383 8811 	msr	BASEPRI, r3
 801564c:	f3bf 8f6f 	isb	sy
 8015650:	f3bf 8f4f 	dsb	sy
 8015654:	b662      	cpsie	i
 8015656:	603b      	str	r3, [r7, #0]
 8015658:	e7fe      	b.n	8015658 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801565a:	f001 fa1d 	bl	8016a98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801565e:	4b39      	ldr	r3, [pc, #228]	; (8015744 <xTaskResumeAll+0x118>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3b01      	subs	r3, #1
 8015664:	4a37      	ldr	r2, [pc, #220]	; (8015744 <xTaskResumeAll+0x118>)
 8015666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015668:	4b36      	ldr	r3, [pc, #216]	; (8015744 <xTaskResumeAll+0x118>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d162      	bne.n	8015736 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015670:	4b35      	ldr	r3, [pc, #212]	; (8015748 <xTaskResumeAll+0x11c>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d05e      	beq.n	8015736 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015678:	e02f      	b.n	80156da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801567a:	4b34      	ldr	r3, [pc, #208]	; (801574c <xTaskResumeAll+0x120>)
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	68db      	ldr	r3, [r3, #12]
 8015680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	3318      	adds	r3, #24
 8015686:	4618      	mov	r0, r3
 8015688:	f7fe fbea 	bl	8013e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	3304      	adds	r3, #4
 8015690:	4618      	mov	r0, r3
 8015692:	f7fe fbe5 	bl	8013e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801569a:	4b2d      	ldr	r3, [pc, #180]	; (8015750 <xTaskResumeAll+0x124>)
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	429a      	cmp	r2, r3
 80156a0:	d903      	bls.n	80156aa <xTaskResumeAll+0x7e>
 80156a2:	68fb      	ldr	r3, [r7, #12]
 80156a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156a6:	4a2a      	ldr	r2, [pc, #168]	; (8015750 <xTaskResumeAll+0x124>)
 80156a8:	6013      	str	r3, [r2, #0]
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ae:	4613      	mov	r3, r2
 80156b0:	009b      	lsls	r3, r3, #2
 80156b2:	4413      	add	r3, r2
 80156b4:	009b      	lsls	r3, r3, #2
 80156b6:	4a27      	ldr	r2, [pc, #156]	; (8015754 <xTaskResumeAll+0x128>)
 80156b8:	441a      	add	r2, r3
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	3304      	adds	r3, #4
 80156be:	4619      	mov	r1, r3
 80156c0:	4610      	mov	r0, r2
 80156c2:	f7fe fb70 	bl	8013da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156ca:	4b23      	ldr	r3, [pc, #140]	; (8015758 <xTaskResumeAll+0x12c>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d302      	bcc.n	80156da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80156d4:	4b21      	ldr	r3, [pc, #132]	; (801575c <xTaskResumeAll+0x130>)
 80156d6:	2201      	movs	r2, #1
 80156d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80156da:	4b1c      	ldr	r3, [pc, #112]	; (801574c <xTaskResumeAll+0x120>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d1cb      	bne.n	801567a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d001      	beq.n	80156ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80156e8:	f000 fb68 	bl	8015dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80156ec:	4b1c      	ldr	r3, [pc, #112]	; (8015760 <xTaskResumeAll+0x134>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d010      	beq.n	801571a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80156f8:	f000 f858 	bl	80157ac <xTaskIncrementTick>
 80156fc:	4603      	mov	r3, r0
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d002      	beq.n	8015708 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015702:	4b16      	ldr	r3, [pc, #88]	; (801575c <xTaskResumeAll+0x130>)
 8015704:	2201      	movs	r2, #1
 8015706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	3b01      	subs	r3, #1
 801570c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d1f1      	bne.n	80156f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8015714:	4b12      	ldr	r3, [pc, #72]	; (8015760 <xTaskResumeAll+0x134>)
 8015716:	2200      	movs	r2, #0
 8015718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801571a:	4b10      	ldr	r3, [pc, #64]	; (801575c <xTaskResumeAll+0x130>)
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d009      	beq.n	8015736 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015722:	2301      	movs	r3, #1
 8015724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015726:	4b0f      	ldr	r3, [pc, #60]	; (8015764 <xTaskResumeAll+0x138>)
 8015728:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801572c:	601a      	str	r2, [r3, #0]
 801572e:	f3bf 8f4f 	dsb	sy
 8015732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015736:	f001 f9e1 	bl	8016afc <vPortExitCritical>

	return xAlreadyYielded;
 801573a:	68bb      	ldr	r3, [r7, #8]
}
 801573c:	4618      	mov	r0, r3
 801573e:	3710      	adds	r7, #16
 8015740:	46bd      	mov	sp, r7
 8015742:	bd80      	pop	{r7, pc}
 8015744:	20001028 	.word	0x20001028
 8015748:	20001000 	.word	0x20001000
 801574c:	20000fc0 	.word	0x20000fc0
 8015750:	20001008 	.word	0x20001008
 8015754:	20000b30 	.word	0x20000b30
 8015758:	20000b2c 	.word	0x20000b2c
 801575c:	20001014 	.word	0x20001014
 8015760:	20001010 	.word	0x20001010
 8015764:	e000ed04 	.word	0xe000ed04

08015768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801576e:	4b05      	ldr	r3, [pc, #20]	; (8015784 <xTaskGetTickCount+0x1c>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015774:	687b      	ldr	r3, [r7, #4]
}
 8015776:	4618      	mov	r0, r3
 8015778:	370c      	adds	r7, #12
 801577a:	46bd      	mov	sp, r7
 801577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	20001004 	.word	0x20001004

08015788 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b082      	sub	sp, #8
 801578c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801578e:	f001 fa63 	bl	8016c58 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015792:	2300      	movs	r3, #0
 8015794:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015796:	4b04      	ldr	r3, [pc, #16]	; (80157a8 <xTaskGetTickCountFromISR+0x20>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801579c:	683b      	ldr	r3, [r7, #0]
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20001004 	.word	0x20001004

080157ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80157b2:	2300      	movs	r3, #0
 80157b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80157b6:	4b4f      	ldr	r3, [pc, #316]	; (80158f4 <xTaskIncrementTick+0x148>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	f040 808a 	bne.w	80158d4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80157c0:	4b4d      	ldr	r3, [pc, #308]	; (80158f8 <xTaskIncrementTick+0x14c>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	3301      	adds	r3, #1
 80157c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80157c8:	4a4b      	ldr	r2, [pc, #300]	; (80158f8 <xTaskIncrementTick+0x14c>)
 80157ca:	693b      	ldr	r3, [r7, #16]
 80157cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d121      	bne.n	8015818 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80157d4:	4b49      	ldr	r3, [pc, #292]	; (80158fc <xTaskIncrementTick+0x150>)
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d00b      	beq.n	80157f6 <xTaskIncrementTick+0x4a>
 80157de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157e2:	b672      	cpsid	i
 80157e4:	f383 8811 	msr	BASEPRI, r3
 80157e8:	f3bf 8f6f 	isb	sy
 80157ec:	f3bf 8f4f 	dsb	sy
 80157f0:	b662      	cpsie	i
 80157f2:	603b      	str	r3, [r7, #0]
 80157f4:	e7fe      	b.n	80157f4 <xTaskIncrementTick+0x48>
 80157f6:	4b41      	ldr	r3, [pc, #260]	; (80158fc <xTaskIncrementTick+0x150>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	60fb      	str	r3, [r7, #12]
 80157fc:	4b40      	ldr	r3, [pc, #256]	; (8015900 <xTaskIncrementTick+0x154>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4a3e      	ldr	r2, [pc, #248]	; (80158fc <xTaskIncrementTick+0x150>)
 8015802:	6013      	str	r3, [r2, #0]
 8015804:	4a3e      	ldr	r2, [pc, #248]	; (8015900 <xTaskIncrementTick+0x154>)
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	6013      	str	r3, [r2, #0]
 801580a:	4b3e      	ldr	r3, [pc, #248]	; (8015904 <xTaskIncrementTick+0x158>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	3301      	adds	r3, #1
 8015810:	4a3c      	ldr	r2, [pc, #240]	; (8015904 <xTaskIncrementTick+0x158>)
 8015812:	6013      	str	r3, [r2, #0]
 8015814:	f000 fad2 	bl	8015dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015818:	4b3b      	ldr	r3, [pc, #236]	; (8015908 <xTaskIncrementTick+0x15c>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	693a      	ldr	r2, [r7, #16]
 801581e:	429a      	cmp	r2, r3
 8015820:	d349      	bcc.n	80158b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015822:	4b36      	ldr	r3, [pc, #216]	; (80158fc <xTaskIncrementTick+0x150>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d104      	bne.n	8015836 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801582c:	4b36      	ldr	r3, [pc, #216]	; (8015908 <xTaskIncrementTick+0x15c>)
 801582e:	f04f 32ff 	mov.w	r2, #4294967295
 8015832:	601a      	str	r2, [r3, #0]
					break;
 8015834:	e03f      	b.n	80158b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015836:	4b31      	ldr	r3, [pc, #196]	; (80158fc <xTaskIncrementTick+0x150>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	685b      	ldr	r3, [r3, #4]
 8015844:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015846:	693a      	ldr	r2, [r7, #16]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	429a      	cmp	r2, r3
 801584c:	d203      	bcs.n	8015856 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801584e:	4a2e      	ldr	r2, [pc, #184]	; (8015908 <xTaskIncrementTick+0x15c>)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015854:	e02f      	b.n	80158b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	3304      	adds	r3, #4
 801585a:	4618      	mov	r0, r3
 801585c:	f7fe fb00 	bl	8013e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015864:	2b00      	cmp	r3, #0
 8015866:	d004      	beq.n	8015872 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	3318      	adds	r3, #24
 801586c:	4618      	mov	r0, r3
 801586e:	f7fe faf7 	bl	8013e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015876:	4b25      	ldr	r3, [pc, #148]	; (801590c <xTaskIncrementTick+0x160>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	429a      	cmp	r2, r3
 801587c:	d903      	bls.n	8015886 <xTaskIncrementTick+0xda>
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015882:	4a22      	ldr	r2, [pc, #136]	; (801590c <xTaskIncrementTick+0x160>)
 8015884:	6013      	str	r3, [r2, #0]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801588a:	4613      	mov	r3, r2
 801588c:	009b      	lsls	r3, r3, #2
 801588e:	4413      	add	r3, r2
 8015890:	009b      	lsls	r3, r3, #2
 8015892:	4a1f      	ldr	r2, [pc, #124]	; (8015910 <xTaskIncrementTick+0x164>)
 8015894:	441a      	add	r2, r3
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	3304      	adds	r3, #4
 801589a:	4619      	mov	r1, r3
 801589c:	4610      	mov	r0, r2
 801589e:	f7fe fa82 	bl	8013da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158a6:	4b1b      	ldr	r3, [pc, #108]	; (8015914 <xTaskIncrementTick+0x168>)
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d3b8      	bcc.n	8015822 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80158b0:	2301      	movs	r3, #1
 80158b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80158b4:	e7b5      	b.n	8015822 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80158b6:	4b17      	ldr	r3, [pc, #92]	; (8015914 <xTaskIncrementTick+0x168>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158bc:	4914      	ldr	r1, [pc, #80]	; (8015910 <xTaskIncrementTick+0x164>)
 80158be:	4613      	mov	r3, r2
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	4413      	add	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	440b      	add	r3, r1
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	2b01      	cmp	r3, #1
 80158cc:	d907      	bls.n	80158de <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80158ce:	2301      	movs	r3, #1
 80158d0:	617b      	str	r3, [r7, #20]
 80158d2:	e004      	b.n	80158de <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80158d4:	4b10      	ldr	r3, [pc, #64]	; (8015918 <xTaskIncrementTick+0x16c>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	3301      	adds	r3, #1
 80158da:	4a0f      	ldr	r2, [pc, #60]	; (8015918 <xTaskIncrementTick+0x16c>)
 80158dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80158de:	4b0f      	ldr	r3, [pc, #60]	; (801591c <xTaskIncrementTick+0x170>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d001      	beq.n	80158ea <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80158e6:	2301      	movs	r3, #1
 80158e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80158ea:	697b      	ldr	r3, [r7, #20]
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3718      	adds	r7, #24
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	20001028 	.word	0x20001028
 80158f8:	20001004 	.word	0x20001004
 80158fc:	20000fb8 	.word	0x20000fb8
 8015900:	20000fbc 	.word	0x20000fbc
 8015904:	20001018 	.word	0x20001018
 8015908:	20001020 	.word	0x20001020
 801590c:	20001008 	.word	0x20001008
 8015910:	20000b30 	.word	0x20000b30
 8015914:	20000b2c 	.word	0x20000b2c
 8015918:	20001010 	.word	0x20001010
 801591c:	20001014 	.word	0x20001014

08015920 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015920:	b480      	push	{r7}
 8015922:	b085      	sub	sp, #20
 8015924:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015926:	4b28      	ldr	r3, [pc, #160]	; (80159c8 <vTaskSwitchContext+0xa8>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d003      	beq.n	8015936 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801592e:	4b27      	ldr	r3, [pc, #156]	; (80159cc <vTaskSwitchContext+0xac>)
 8015930:	2201      	movs	r2, #1
 8015932:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015934:	e042      	b.n	80159bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8015936:	4b25      	ldr	r3, [pc, #148]	; (80159cc <vTaskSwitchContext+0xac>)
 8015938:	2200      	movs	r2, #0
 801593a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801593c:	4b24      	ldr	r3, [pc, #144]	; (80159d0 <vTaskSwitchContext+0xb0>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	60fb      	str	r3, [r7, #12]
 8015942:	e011      	b.n	8015968 <vTaskSwitchContext+0x48>
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	2b00      	cmp	r3, #0
 8015948:	d10b      	bne.n	8015962 <vTaskSwitchContext+0x42>
 801594a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801594e:	b672      	cpsid	i
 8015950:	f383 8811 	msr	BASEPRI, r3
 8015954:	f3bf 8f6f 	isb	sy
 8015958:	f3bf 8f4f 	dsb	sy
 801595c:	b662      	cpsie	i
 801595e:	607b      	str	r3, [r7, #4]
 8015960:	e7fe      	b.n	8015960 <vTaskSwitchContext+0x40>
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	3b01      	subs	r3, #1
 8015966:	60fb      	str	r3, [r7, #12]
 8015968:	491a      	ldr	r1, [pc, #104]	; (80159d4 <vTaskSwitchContext+0xb4>)
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	4613      	mov	r3, r2
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	4413      	add	r3, r2
 8015972:	009b      	lsls	r3, r3, #2
 8015974:	440b      	add	r3, r1
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d0e3      	beq.n	8015944 <vTaskSwitchContext+0x24>
 801597c:	68fa      	ldr	r2, [r7, #12]
 801597e:	4613      	mov	r3, r2
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	4413      	add	r3, r2
 8015984:	009b      	lsls	r3, r3, #2
 8015986:	4a13      	ldr	r2, [pc, #76]	; (80159d4 <vTaskSwitchContext+0xb4>)
 8015988:	4413      	add	r3, r2
 801598a:	60bb      	str	r3, [r7, #8]
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	685b      	ldr	r3, [r3, #4]
 8015990:	685a      	ldr	r2, [r3, #4]
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	605a      	str	r2, [r3, #4]
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	685a      	ldr	r2, [r3, #4]
 801599a:	68bb      	ldr	r3, [r7, #8]
 801599c:	3308      	adds	r3, #8
 801599e:	429a      	cmp	r2, r3
 80159a0:	d104      	bne.n	80159ac <vTaskSwitchContext+0x8c>
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	685b      	ldr	r3, [r3, #4]
 80159a6:	685a      	ldr	r2, [r3, #4]
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	605a      	str	r2, [r3, #4]
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	685b      	ldr	r3, [r3, #4]
 80159b0:	68db      	ldr	r3, [r3, #12]
 80159b2:	4a09      	ldr	r2, [pc, #36]	; (80159d8 <vTaskSwitchContext+0xb8>)
 80159b4:	6013      	str	r3, [r2, #0]
 80159b6:	4a06      	ldr	r2, [pc, #24]	; (80159d0 <vTaskSwitchContext+0xb0>)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	6013      	str	r3, [r2, #0]
}
 80159bc:	bf00      	nop
 80159be:	3714      	adds	r7, #20
 80159c0:	46bd      	mov	sp, r7
 80159c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c6:	4770      	bx	lr
 80159c8:	20001028 	.word	0x20001028
 80159cc:	20001014 	.word	0x20001014
 80159d0:	20001008 	.word	0x20001008
 80159d4:	20000b30 	.word	0x20000b30
 80159d8:	20000b2c 	.word	0x20000b2c

080159dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
 80159e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d10b      	bne.n	8015a04 <vTaskPlaceOnEventList+0x28>
 80159ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159f0:	b672      	cpsid	i
 80159f2:	f383 8811 	msr	BASEPRI, r3
 80159f6:	f3bf 8f6f 	isb	sy
 80159fa:	f3bf 8f4f 	dsb	sy
 80159fe:	b662      	cpsie	i
 8015a00:	60fb      	str	r3, [r7, #12]
 8015a02:	e7fe      	b.n	8015a02 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015a04:	4b07      	ldr	r3, [pc, #28]	; (8015a24 <vTaskPlaceOnEventList+0x48>)
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	3318      	adds	r3, #24
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f7fe f9ee 	bl	8013dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015a12:	2101      	movs	r1, #1
 8015a14:	6838      	ldr	r0, [r7, #0]
 8015a16:	f000 fb8f 	bl	8016138 <prvAddCurrentTaskToDelayedList>
}
 8015a1a:	bf00      	nop
 8015a1c:	3710      	adds	r7, #16
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	bd80      	pop	{r7, pc}
 8015a22:	bf00      	nop
 8015a24:	20000b2c 	.word	0x20000b2c

08015a28 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b086      	sub	sp, #24
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d10b      	bne.n	8015a52 <vTaskPlaceOnEventListRestricted+0x2a>
 8015a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a3e:	b672      	cpsid	i
 8015a40:	f383 8811 	msr	BASEPRI, r3
 8015a44:	f3bf 8f6f 	isb	sy
 8015a48:	f3bf 8f4f 	dsb	sy
 8015a4c:	b662      	cpsie	i
 8015a4e:	617b      	str	r3, [r7, #20]
 8015a50:	e7fe      	b.n	8015a50 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015a52:	4b0a      	ldr	r3, [pc, #40]	; (8015a7c <vTaskPlaceOnEventListRestricted+0x54>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	3318      	adds	r3, #24
 8015a58:	4619      	mov	r1, r3
 8015a5a:	68f8      	ldr	r0, [r7, #12]
 8015a5c:	f7fe f9a3 	bl	8013da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d002      	beq.n	8015a6c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015a66:	f04f 33ff 	mov.w	r3, #4294967295
 8015a6a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015a6c:	6879      	ldr	r1, [r7, #4]
 8015a6e:	68b8      	ldr	r0, [r7, #8]
 8015a70:	f000 fb62 	bl	8016138 <prvAddCurrentTaskToDelayedList>
	}
 8015a74:	bf00      	nop
 8015a76:	3718      	adds	r7, #24
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	20000b2c 	.word	0x20000b2c

08015a80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b086      	sub	sp, #24
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	68db      	ldr	r3, [r3, #12]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d10b      	bne.n	8015aae <xTaskRemoveFromEventList+0x2e>
 8015a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9a:	b672      	cpsid	i
 8015a9c:	f383 8811 	msr	BASEPRI, r3
 8015aa0:	f3bf 8f6f 	isb	sy
 8015aa4:	f3bf 8f4f 	dsb	sy
 8015aa8:	b662      	cpsie	i
 8015aaa:	60fb      	str	r3, [r7, #12]
 8015aac:	e7fe      	b.n	8015aac <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015aae:	693b      	ldr	r3, [r7, #16]
 8015ab0:	3318      	adds	r3, #24
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fe f9d4 	bl	8013e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015ab8:	4b1d      	ldr	r3, [pc, #116]	; (8015b30 <xTaskRemoveFromEventList+0xb0>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d11d      	bne.n	8015afc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	3304      	adds	r3, #4
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	f7fe f9cb 	bl	8013e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015aca:	693b      	ldr	r3, [r7, #16]
 8015acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ace:	4b19      	ldr	r3, [pc, #100]	; (8015b34 <xTaskRemoveFromEventList+0xb4>)
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d903      	bls.n	8015ade <xTaskRemoveFromEventList+0x5e>
 8015ad6:	693b      	ldr	r3, [r7, #16]
 8015ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ada:	4a16      	ldr	r2, [pc, #88]	; (8015b34 <xTaskRemoveFromEventList+0xb4>)
 8015adc:	6013      	str	r3, [r2, #0]
 8015ade:	693b      	ldr	r3, [r7, #16]
 8015ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	4413      	add	r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	4a13      	ldr	r2, [pc, #76]	; (8015b38 <xTaskRemoveFromEventList+0xb8>)
 8015aec:	441a      	add	r2, r3
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	3304      	adds	r3, #4
 8015af2:	4619      	mov	r1, r3
 8015af4:	4610      	mov	r0, r2
 8015af6:	f7fe f956 	bl	8013da6 <vListInsertEnd>
 8015afa:	e005      	b.n	8015b08 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	3318      	adds	r3, #24
 8015b00:	4619      	mov	r1, r3
 8015b02:	480e      	ldr	r0, [pc, #56]	; (8015b3c <xTaskRemoveFromEventList+0xbc>)
 8015b04:	f7fe f94f 	bl	8013da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b0c:	4b0c      	ldr	r3, [pc, #48]	; (8015b40 <xTaskRemoveFromEventList+0xc0>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b12:	429a      	cmp	r2, r3
 8015b14:	d905      	bls.n	8015b22 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015b16:	2301      	movs	r3, #1
 8015b18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015b1a:	4b0a      	ldr	r3, [pc, #40]	; (8015b44 <xTaskRemoveFromEventList+0xc4>)
 8015b1c:	2201      	movs	r2, #1
 8015b1e:	601a      	str	r2, [r3, #0]
 8015b20:	e001      	b.n	8015b26 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015b22:	2300      	movs	r3, #0
 8015b24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015b26:	697b      	ldr	r3, [r7, #20]
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3718      	adds	r7, #24
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	20001028 	.word	0x20001028
 8015b34:	20001008 	.word	0x20001008
 8015b38:	20000b30 	.word	0x20000b30
 8015b3c:	20000fc0 	.word	0x20000fc0
 8015b40:	20000b2c 	.word	0x20000b2c
 8015b44:	20001014 	.word	0x20001014

08015b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015b50:	4b06      	ldr	r3, [pc, #24]	; (8015b6c <vTaskInternalSetTimeOutState+0x24>)
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015b58:	4b05      	ldr	r3, [pc, #20]	; (8015b70 <vTaskInternalSetTimeOutState+0x28>)
 8015b5a:	681a      	ldr	r2, [r3, #0]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	605a      	str	r2, [r3, #4]
}
 8015b60:	bf00      	nop
 8015b62:	370c      	adds	r7, #12
 8015b64:	46bd      	mov	sp, r7
 8015b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b6a:	4770      	bx	lr
 8015b6c:	20001018 	.word	0x20001018
 8015b70:	20001004 	.word	0x20001004

08015b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015b74:	b580      	push	{r7, lr}
 8015b76:	b088      	sub	sp, #32
 8015b78:	af00      	add	r7, sp, #0
 8015b7a:	6078      	str	r0, [r7, #4]
 8015b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d10b      	bne.n	8015b9c <xTaskCheckForTimeOut+0x28>
 8015b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b88:	b672      	cpsid	i
 8015b8a:	f383 8811 	msr	BASEPRI, r3
 8015b8e:	f3bf 8f6f 	isb	sy
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	b662      	cpsie	i
 8015b98:	613b      	str	r3, [r7, #16]
 8015b9a:	e7fe      	b.n	8015b9a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d10b      	bne.n	8015bba <xTaskCheckForTimeOut+0x46>
 8015ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ba6:	b672      	cpsid	i
 8015ba8:	f383 8811 	msr	BASEPRI, r3
 8015bac:	f3bf 8f6f 	isb	sy
 8015bb0:	f3bf 8f4f 	dsb	sy
 8015bb4:	b662      	cpsie	i
 8015bb6:	60fb      	str	r3, [r7, #12]
 8015bb8:	e7fe      	b.n	8015bb8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8015bba:	f000 ff6d 	bl	8016a98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015bbe:	4b1d      	ldr	r3, [pc, #116]	; (8015c34 <xTaskCheckForTimeOut+0xc0>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	685b      	ldr	r3, [r3, #4]
 8015bc8:	69ba      	ldr	r2, [r7, #24]
 8015bca:	1ad3      	subs	r3, r2, r3
 8015bcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015bce:	683b      	ldr	r3, [r7, #0]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bd6:	d102      	bne.n	8015bde <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	61fb      	str	r3, [r7, #28]
 8015bdc:	e023      	b.n	8015c26 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	4b15      	ldr	r3, [pc, #84]	; (8015c38 <xTaskCheckForTimeOut+0xc4>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	429a      	cmp	r2, r3
 8015be8:	d007      	beq.n	8015bfa <xTaskCheckForTimeOut+0x86>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	685b      	ldr	r3, [r3, #4]
 8015bee:	69ba      	ldr	r2, [r7, #24]
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d302      	bcc.n	8015bfa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	61fb      	str	r3, [r7, #28]
 8015bf8:	e015      	b.n	8015c26 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	697a      	ldr	r2, [r7, #20]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d20b      	bcs.n	8015c1c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015c04:	683b      	ldr	r3, [r7, #0]
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	1ad2      	subs	r2, r2, r3
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015c10:	6878      	ldr	r0, [r7, #4]
 8015c12:	f7ff ff99 	bl	8015b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015c16:	2300      	movs	r3, #0
 8015c18:	61fb      	str	r3, [r7, #28]
 8015c1a:	e004      	b.n	8015c26 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	2200      	movs	r2, #0
 8015c20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015c22:	2301      	movs	r3, #1
 8015c24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015c26:	f000 ff69 	bl	8016afc <vPortExitCritical>

	return xReturn;
 8015c2a:	69fb      	ldr	r3, [r7, #28]
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	3720      	adds	r7, #32
 8015c30:	46bd      	mov	sp, r7
 8015c32:	bd80      	pop	{r7, pc}
 8015c34:	20001004 	.word	0x20001004
 8015c38:	20001018 	.word	0x20001018

08015c3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015c40:	4b03      	ldr	r3, [pc, #12]	; (8015c50 <vTaskMissedYield+0x14>)
 8015c42:	2201      	movs	r2, #1
 8015c44:	601a      	str	r2, [r3, #0]
}
 8015c46:	bf00      	nop
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4e:	4770      	bx	lr
 8015c50:	20001014 	.word	0x20001014

08015c54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b082      	sub	sp, #8
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015c5c:	f000 f852 	bl	8015d04 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015c60:	4b06      	ldr	r3, [pc, #24]	; (8015c7c <prvIdleTask+0x28>)
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	2b01      	cmp	r3, #1
 8015c66:	d9f9      	bls.n	8015c5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8015c68:	4b05      	ldr	r3, [pc, #20]	; (8015c80 <prvIdleTask+0x2c>)
 8015c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c6e:	601a      	str	r2, [r3, #0]
 8015c70:	f3bf 8f4f 	dsb	sy
 8015c74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015c78:	e7f0      	b.n	8015c5c <prvIdleTask+0x8>
 8015c7a:	bf00      	nop
 8015c7c:	20000b30 	.word	0x20000b30
 8015c80:	e000ed04 	.word	0xe000ed04

08015c84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	607b      	str	r3, [r7, #4]
 8015c8e:	e00c      	b.n	8015caa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	4613      	mov	r3, r2
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	4413      	add	r3, r2
 8015c98:	009b      	lsls	r3, r3, #2
 8015c9a:	4a12      	ldr	r2, [pc, #72]	; (8015ce4 <prvInitialiseTaskLists+0x60>)
 8015c9c:	4413      	add	r3, r2
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fe f854 	bl	8013d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	607b      	str	r3, [r7, #4]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	2b37      	cmp	r3, #55	; 0x37
 8015cae:	d9ef      	bls.n	8015c90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015cb0:	480d      	ldr	r0, [pc, #52]	; (8015ce8 <prvInitialiseTaskLists+0x64>)
 8015cb2:	f7fe f84b 	bl	8013d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015cb6:	480d      	ldr	r0, [pc, #52]	; (8015cec <prvInitialiseTaskLists+0x68>)
 8015cb8:	f7fe f848 	bl	8013d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015cbc:	480c      	ldr	r0, [pc, #48]	; (8015cf0 <prvInitialiseTaskLists+0x6c>)
 8015cbe:	f7fe f845 	bl	8013d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015cc2:	480c      	ldr	r0, [pc, #48]	; (8015cf4 <prvInitialiseTaskLists+0x70>)
 8015cc4:	f7fe f842 	bl	8013d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015cc8:	480b      	ldr	r0, [pc, #44]	; (8015cf8 <prvInitialiseTaskLists+0x74>)
 8015cca:	f7fe f83f 	bl	8013d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015cce:	4b0b      	ldr	r3, [pc, #44]	; (8015cfc <prvInitialiseTaskLists+0x78>)
 8015cd0:	4a05      	ldr	r2, [pc, #20]	; (8015ce8 <prvInitialiseTaskLists+0x64>)
 8015cd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015cd4:	4b0a      	ldr	r3, [pc, #40]	; (8015d00 <prvInitialiseTaskLists+0x7c>)
 8015cd6:	4a05      	ldr	r2, [pc, #20]	; (8015cec <prvInitialiseTaskLists+0x68>)
 8015cd8:	601a      	str	r2, [r3, #0]
}
 8015cda:	bf00      	nop
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	20000b30 	.word	0x20000b30
 8015ce8:	20000f90 	.word	0x20000f90
 8015cec:	20000fa4 	.word	0x20000fa4
 8015cf0:	20000fc0 	.word	0x20000fc0
 8015cf4:	20000fd4 	.word	0x20000fd4
 8015cf8:	20000fec 	.word	0x20000fec
 8015cfc:	20000fb8 	.word	0x20000fb8
 8015d00:	20000fbc 	.word	0x20000fbc

08015d04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b082      	sub	sp, #8
 8015d08:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015d0a:	e019      	b.n	8015d40 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015d0c:	f000 fec4 	bl	8016a98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d10:	4b0f      	ldr	r3, [pc, #60]	; (8015d50 <prvCheckTasksWaitingTermination+0x4c>)
 8015d12:	68db      	ldr	r3, [r3, #12]
 8015d14:	68db      	ldr	r3, [r3, #12]
 8015d16:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7fe f89f 	bl	8013e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015d22:	4b0c      	ldr	r3, [pc, #48]	; (8015d54 <prvCheckTasksWaitingTermination+0x50>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	3b01      	subs	r3, #1
 8015d28:	4a0a      	ldr	r2, [pc, #40]	; (8015d54 <prvCheckTasksWaitingTermination+0x50>)
 8015d2a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015d2c:	4b0a      	ldr	r3, [pc, #40]	; (8015d58 <prvCheckTasksWaitingTermination+0x54>)
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	3b01      	subs	r3, #1
 8015d32:	4a09      	ldr	r2, [pc, #36]	; (8015d58 <prvCheckTasksWaitingTermination+0x54>)
 8015d34:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015d36:	f000 fee1 	bl	8016afc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 f80e 	bl	8015d5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015d40:	4b05      	ldr	r3, [pc, #20]	; (8015d58 <prvCheckTasksWaitingTermination+0x54>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d1e1      	bne.n	8015d0c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015d48:	bf00      	nop
 8015d4a:	3708      	adds	r7, #8
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	20000fd4 	.word	0x20000fd4
 8015d54:	20001000 	.word	0x20001000
 8015d58:	20000fe8 	.word	0x20000fe8

08015d5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d108      	bne.n	8015d80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d72:	4618      	mov	r0, r3
 8015d74:	f001 f87a 	bl	8016e6c <vPortFree>
				vPortFree( pxTCB );
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f001 f877 	bl	8016e6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015d7e:	e019      	b.n	8015db4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d103      	bne.n	8015d92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f001 f86e 	bl	8016e6c <vPortFree>
	}
 8015d90:	e010      	b.n	8015db4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8015d98:	2b02      	cmp	r3, #2
 8015d9a:	d00b      	beq.n	8015db4 <prvDeleteTCB+0x58>
 8015d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015da0:	b672      	cpsid	i
 8015da2:	f383 8811 	msr	BASEPRI, r3
 8015da6:	f3bf 8f6f 	isb	sy
 8015daa:	f3bf 8f4f 	dsb	sy
 8015dae:	b662      	cpsie	i
 8015db0:	60fb      	str	r3, [r7, #12]
 8015db2:	e7fe      	b.n	8015db2 <prvDeleteTCB+0x56>
	}
 8015db4:	bf00      	nop
 8015db6:	3710      	adds	r7, #16
 8015db8:	46bd      	mov	sp, r7
 8015dba:	bd80      	pop	{r7, pc}

08015dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015dbc:	b480      	push	{r7}
 8015dbe:	b083      	sub	sp, #12
 8015dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015dc2:	4b0c      	ldr	r3, [pc, #48]	; (8015df4 <prvResetNextTaskUnblockTime+0x38>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d104      	bne.n	8015dd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015dcc:	4b0a      	ldr	r3, [pc, #40]	; (8015df8 <prvResetNextTaskUnblockTime+0x3c>)
 8015dce:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015dd4:	e008      	b.n	8015de8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015dd6:	4b07      	ldr	r3, [pc, #28]	; (8015df4 <prvResetNextTaskUnblockTime+0x38>)
 8015dd8:	681b      	ldr	r3, [r3, #0]
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	68db      	ldr	r3, [r3, #12]
 8015dde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	4a04      	ldr	r2, [pc, #16]	; (8015df8 <prvResetNextTaskUnblockTime+0x3c>)
 8015de6:	6013      	str	r3, [r2, #0]
}
 8015de8:	bf00      	nop
 8015dea:	370c      	adds	r7, #12
 8015dec:	46bd      	mov	sp, r7
 8015dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df2:	4770      	bx	lr
 8015df4:	20000fb8 	.word	0x20000fb8
 8015df8:	20001020 	.word	0x20001020

08015dfc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015e02:	4b05      	ldr	r3, [pc, #20]	; (8015e18 <xTaskGetCurrentTaskHandle+0x1c>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015e08:	687b      	ldr	r3, [r7, #4]
	}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	370c      	adds	r7, #12
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e14:	4770      	bx	lr
 8015e16:	bf00      	nop
 8015e18:	20000b2c 	.word	0x20000b2c

08015e1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b083      	sub	sp, #12
 8015e20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015e22:	4b0b      	ldr	r3, [pc, #44]	; (8015e50 <xTaskGetSchedulerState+0x34>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d102      	bne.n	8015e30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015e2a:	2301      	movs	r3, #1
 8015e2c:	607b      	str	r3, [r7, #4]
 8015e2e:	e008      	b.n	8015e42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e30:	4b08      	ldr	r3, [pc, #32]	; (8015e54 <xTaskGetSchedulerState+0x38>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d102      	bne.n	8015e3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015e38:	2302      	movs	r3, #2
 8015e3a:	607b      	str	r3, [r7, #4]
 8015e3c:	e001      	b.n	8015e42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015e3e:	2300      	movs	r3, #0
 8015e40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015e42:	687b      	ldr	r3, [r7, #4]
	}
 8015e44:	4618      	mov	r0, r3
 8015e46:	370c      	adds	r7, #12
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e4e:	4770      	bx	lr
 8015e50:	2000100c 	.word	0x2000100c
 8015e54:	20001028 	.word	0x20001028

08015e58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015e64:	2300      	movs	r3, #0
 8015e66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d051      	beq.n	8015f12 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e72:	4b2a      	ldr	r3, [pc, #168]	; (8015f1c <xTaskPriorityInherit+0xc4>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d241      	bcs.n	8015f00 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	699b      	ldr	r3, [r3, #24]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	db06      	blt.n	8015e92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e84:	4b25      	ldr	r3, [pc, #148]	; (8015f1c <xTaskPriorityInherit+0xc4>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	6959      	ldr	r1, [r3, #20]
 8015e96:	68bb      	ldr	r3, [r7, #8]
 8015e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e9a:	4613      	mov	r3, r2
 8015e9c:	009b      	lsls	r3, r3, #2
 8015e9e:	4413      	add	r3, r2
 8015ea0:	009b      	lsls	r3, r3, #2
 8015ea2:	4a1f      	ldr	r2, [pc, #124]	; (8015f20 <xTaskPriorityInherit+0xc8>)
 8015ea4:	4413      	add	r3, r2
 8015ea6:	4299      	cmp	r1, r3
 8015ea8:	d122      	bne.n	8015ef0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015eaa:	68bb      	ldr	r3, [r7, #8]
 8015eac:	3304      	adds	r3, #4
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7fd ffd6 	bl	8013e60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015eb4:	4b19      	ldr	r3, [pc, #100]	; (8015f1c <xTaskPriorityInherit+0xc4>)
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015eba:	68bb      	ldr	r3, [r7, #8]
 8015ebc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ec2:	4b18      	ldr	r3, [pc, #96]	; (8015f24 <xTaskPriorityInherit+0xcc>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d903      	bls.n	8015ed2 <xTaskPriorityInherit+0x7a>
 8015eca:	68bb      	ldr	r3, [r7, #8]
 8015ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ece:	4a15      	ldr	r2, [pc, #84]	; (8015f24 <xTaskPriorityInherit+0xcc>)
 8015ed0:	6013      	str	r3, [r2, #0]
 8015ed2:	68bb      	ldr	r3, [r7, #8]
 8015ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4413      	add	r3, r2
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	4a10      	ldr	r2, [pc, #64]	; (8015f20 <xTaskPriorityInherit+0xc8>)
 8015ee0:	441a      	add	r2, r3
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	3304      	adds	r3, #4
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4610      	mov	r0, r2
 8015eea:	f7fd ff5c 	bl	8013da6 <vListInsertEnd>
 8015eee:	e004      	b.n	8015efa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015ef0:	4b0a      	ldr	r3, [pc, #40]	; (8015f1c <xTaskPriorityInherit+0xc4>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015efa:	2301      	movs	r3, #1
 8015efc:	60fb      	str	r3, [r7, #12]
 8015efe:	e008      	b.n	8015f12 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015f00:	68bb      	ldr	r3, [r7, #8]
 8015f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015f04:	4b05      	ldr	r3, [pc, #20]	; (8015f1c <xTaskPriorityInherit+0xc4>)
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d201      	bcs.n	8015f12 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015f0e:	2301      	movs	r3, #1
 8015f10:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015f12:	68fb      	ldr	r3, [r7, #12]
	}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3710      	adds	r7, #16
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	20000b2c 	.word	0x20000b2c
 8015f20:	20000b30 	.word	0x20000b30
 8015f24:	20001008 	.word	0x20001008

08015f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b086      	sub	sp, #24
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015f34:	2300      	movs	r3, #0
 8015f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d058      	beq.n	8015ff0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015f3e:	4b2f      	ldr	r3, [pc, #188]	; (8015ffc <xTaskPriorityDisinherit+0xd4>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	693a      	ldr	r2, [r7, #16]
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d00b      	beq.n	8015f60 <xTaskPriorityDisinherit+0x38>
 8015f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f4c:	b672      	cpsid	i
 8015f4e:	f383 8811 	msr	BASEPRI, r3
 8015f52:	f3bf 8f6f 	isb	sy
 8015f56:	f3bf 8f4f 	dsb	sy
 8015f5a:	b662      	cpsie	i
 8015f5c:	60fb      	str	r3, [r7, #12]
 8015f5e:	e7fe      	b.n	8015f5e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d10b      	bne.n	8015f80 <xTaskPriorityDisinherit+0x58>
 8015f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f6c:	b672      	cpsid	i
 8015f6e:	f383 8811 	msr	BASEPRI, r3
 8015f72:	f3bf 8f6f 	isb	sy
 8015f76:	f3bf 8f4f 	dsb	sy
 8015f7a:	b662      	cpsie	i
 8015f7c:	60bb      	str	r3, [r7, #8]
 8015f7e:	e7fe      	b.n	8015f7e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f84:	1e5a      	subs	r2, r3, #1
 8015f86:	693b      	ldr	r3, [r7, #16]
 8015f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d02c      	beq.n	8015ff0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015f96:	693b      	ldr	r3, [r7, #16]
 8015f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d128      	bne.n	8015ff0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015f9e:	693b      	ldr	r3, [r7, #16]
 8015fa0:	3304      	adds	r3, #4
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fd ff5c 	bl	8013e60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015fac:	693b      	ldr	r3, [r7, #16]
 8015fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015fb8:	693b      	ldr	r3, [r7, #16]
 8015fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fc0:	4b0f      	ldr	r3, [pc, #60]	; (8016000 <xTaskPriorityDisinherit+0xd8>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d903      	bls.n	8015fd0 <xTaskPriorityDisinherit+0xa8>
 8015fc8:	693b      	ldr	r3, [r7, #16]
 8015fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fcc:	4a0c      	ldr	r2, [pc, #48]	; (8016000 <xTaskPriorityDisinherit+0xd8>)
 8015fce:	6013      	str	r3, [r2, #0]
 8015fd0:	693b      	ldr	r3, [r7, #16]
 8015fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015fd4:	4613      	mov	r3, r2
 8015fd6:	009b      	lsls	r3, r3, #2
 8015fd8:	4413      	add	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	4a09      	ldr	r2, [pc, #36]	; (8016004 <xTaskPriorityDisinherit+0xdc>)
 8015fde:	441a      	add	r2, r3
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	3304      	adds	r3, #4
 8015fe4:	4619      	mov	r1, r3
 8015fe6:	4610      	mov	r0, r2
 8015fe8:	f7fd fedd 	bl	8013da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015fec:	2301      	movs	r3, #1
 8015fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015ff0:	697b      	ldr	r3, [r7, #20]
	}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3718      	adds	r7, #24
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
 8015ffa:	bf00      	nop
 8015ffc:	20000b2c 	.word	0x20000b2c
 8016000:	20001008 	.word	0x20001008
 8016004:	20000b30 	.word	0x20000b30

08016008 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016008:	b580      	push	{r7, lr}
 801600a:	b088      	sub	sp, #32
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016016:	2301      	movs	r3, #1
 8016018:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d06c      	beq.n	80160fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016020:	69bb      	ldr	r3, [r7, #24]
 8016022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016024:	2b00      	cmp	r3, #0
 8016026:	d10b      	bne.n	8016040 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8016028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801602c:	b672      	cpsid	i
 801602e:	f383 8811 	msr	BASEPRI, r3
 8016032:	f3bf 8f6f 	isb	sy
 8016036:	f3bf 8f4f 	dsb	sy
 801603a:	b662      	cpsie	i
 801603c:	60fb      	str	r3, [r7, #12]
 801603e:	e7fe      	b.n	801603e <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016040:	69bb      	ldr	r3, [r7, #24]
 8016042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016044:	683a      	ldr	r2, [r7, #0]
 8016046:	429a      	cmp	r2, r3
 8016048:	d902      	bls.n	8016050 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	61fb      	str	r3, [r7, #28]
 801604e:	e002      	b.n	8016056 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016050:	69bb      	ldr	r3, [r7, #24]
 8016052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016054:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801605a:	69fa      	ldr	r2, [r7, #28]
 801605c:	429a      	cmp	r2, r3
 801605e:	d04c      	beq.n	80160fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016064:	697a      	ldr	r2, [r7, #20]
 8016066:	429a      	cmp	r2, r3
 8016068:	d147      	bne.n	80160fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801606a:	4b26      	ldr	r3, [pc, #152]	; (8016104 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	69ba      	ldr	r2, [r7, #24]
 8016070:	429a      	cmp	r2, r3
 8016072:	d10b      	bne.n	801608c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8016074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016078:	b672      	cpsid	i
 801607a:	f383 8811 	msr	BASEPRI, r3
 801607e:	f3bf 8f6f 	isb	sy
 8016082:	f3bf 8f4f 	dsb	sy
 8016086:	b662      	cpsie	i
 8016088:	60bb      	str	r3, [r7, #8]
 801608a:	e7fe      	b.n	801608a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801608c:	69bb      	ldr	r3, [r7, #24]
 801608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016090:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	69fa      	ldr	r2, [r7, #28]
 8016096:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016098:	69bb      	ldr	r3, [r7, #24]
 801609a:	699b      	ldr	r3, [r3, #24]
 801609c:	2b00      	cmp	r3, #0
 801609e:	db04      	blt.n	80160aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80160a0:	69fb      	ldr	r3, [r7, #28]
 80160a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80160a6:	69bb      	ldr	r3, [r7, #24]
 80160a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80160aa:	69bb      	ldr	r3, [r7, #24]
 80160ac:	6959      	ldr	r1, [r3, #20]
 80160ae:	693a      	ldr	r2, [r7, #16]
 80160b0:	4613      	mov	r3, r2
 80160b2:	009b      	lsls	r3, r3, #2
 80160b4:	4413      	add	r3, r2
 80160b6:	009b      	lsls	r3, r3, #2
 80160b8:	4a13      	ldr	r2, [pc, #76]	; (8016108 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80160ba:	4413      	add	r3, r2
 80160bc:	4299      	cmp	r1, r3
 80160be:	d11c      	bne.n	80160fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	3304      	adds	r3, #4
 80160c4:	4618      	mov	r0, r3
 80160c6:	f7fd fecb 	bl	8013e60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80160ca:	69bb      	ldr	r3, [r7, #24]
 80160cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160ce:	4b0f      	ldr	r3, [pc, #60]	; (801610c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d903      	bls.n	80160de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160da:	4a0c      	ldr	r2, [pc, #48]	; (801610c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80160dc:	6013      	str	r3, [r2, #0]
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80160e2:	4613      	mov	r3, r2
 80160e4:	009b      	lsls	r3, r3, #2
 80160e6:	4413      	add	r3, r2
 80160e8:	009b      	lsls	r3, r3, #2
 80160ea:	4a07      	ldr	r2, [pc, #28]	; (8016108 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80160ec:	441a      	add	r2, r3
 80160ee:	69bb      	ldr	r3, [r7, #24]
 80160f0:	3304      	adds	r3, #4
 80160f2:	4619      	mov	r1, r3
 80160f4:	4610      	mov	r0, r2
 80160f6:	f7fd fe56 	bl	8013da6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80160fa:	bf00      	nop
 80160fc:	3720      	adds	r7, #32
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	20000b2c 	.word	0x20000b2c
 8016108:	20000b30 	.word	0x20000b30
 801610c:	20001008 	.word	0x20001008

08016110 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016110:	b480      	push	{r7}
 8016112:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016114:	4b07      	ldr	r3, [pc, #28]	; (8016134 <pvTaskIncrementMutexHeldCount+0x24>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d004      	beq.n	8016126 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801611c:	4b05      	ldr	r3, [pc, #20]	; (8016134 <pvTaskIncrementMutexHeldCount+0x24>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016122:	3201      	adds	r2, #1
 8016124:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016126:	4b03      	ldr	r3, [pc, #12]	; (8016134 <pvTaskIncrementMutexHeldCount+0x24>)
 8016128:	681b      	ldr	r3, [r3, #0]
	}
 801612a:	4618      	mov	r0, r3
 801612c:	46bd      	mov	sp, r7
 801612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016132:	4770      	bx	lr
 8016134:	20000b2c 	.word	0x20000b2c

08016138 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016138:	b580      	push	{r7, lr}
 801613a:	b084      	sub	sp, #16
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
 8016140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016142:	4b21      	ldr	r3, [pc, #132]	; (80161c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016148:	4b20      	ldr	r3, [pc, #128]	; (80161cc <prvAddCurrentTaskToDelayedList+0x94>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	3304      	adds	r3, #4
 801614e:	4618      	mov	r0, r3
 8016150:	f7fd fe86 	bl	8013e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801615a:	d10a      	bne.n	8016172 <prvAddCurrentTaskToDelayedList+0x3a>
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d007      	beq.n	8016172 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016162:	4b1a      	ldr	r3, [pc, #104]	; (80161cc <prvAddCurrentTaskToDelayedList+0x94>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	3304      	adds	r3, #4
 8016168:	4619      	mov	r1, r3
 801616a:	4819      	ldr	r0, [pc, #100]	; (80161d0 <prvAddCurrentTaskToDelayedList+0x98>)
 801616c:	f7fd fe1b 	bl	8013da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016170:	e026      	b.n	80161c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	4413      	add	r3, r2
 8016178:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801617a:	4b14      	ldr	r3, [pc, #80]	; (80161cc <prvAddCurrentTaskToDelayedList+0x94>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	68ba      	ldr	r2, [r7, #8]
 8016180:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016182:	68ba      	ldr	r2, [r7, #8]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	429a      	cmp	r2, r3
 8016188:	d209      	bcs.n	801619e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801618a:	4b12      	ldr	r3, [pc, #72]	; (80161d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 801618c:	681a      	ldr	r2, [r3, #0]
 801618e:	4b0f      	ldr	r3, [pc, #60]	; (80161cc <prvAddCurrentTaskToDelayedList+0x94>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	3304      	adds	r3, #4
 8016194:	4619      	mov	r1, r3
 8016196:	4610      	mov	r0, r2
 8016198:	f7fd fe29 	bl	8013dee <vListInsert>
}
 801619c:	e010      	b.n	80161c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801619e:	4b0e      	ldr	r3, [pc, #56]	; (80161d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	4b0a      	ldr	r3, [pc, #40]	; (80161cc <prvAddCurrentTaskToDelayedList+0x94>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	3304      	adds	r3, #4
 80161a8:	4619      	mov	r1, r3
 80161aa:	4610      	mov	r0, r2
 80161ac:	f7fd fe1f 	bl	8013dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80161b0:	4b0a      	ldr	r3, [pc, #40]	; (80161dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	429a      	cmp	r2, r3
 80161b8:	d202      	bcs.n	80161c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80161ba:	4a08      	ldr	r2, [pc, #32]	; (80161dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	6013      	str	r3, [r2, #0]
}
 80161c0:	bf00      	nop
 80161c2:	3710      	adds	r7, #16
 80161c4:	46bd      	mov	sp, r7
 80161c6:	bd80      	pop	{r7, pc}
 80161c8:	20001004 	.word	0x20001004
 80161cc:	20000b2c 	.word	0x20000b2c
 80161d0:	20000fec 	.word	0x20000fec
 80161d4:	20000fbc 	.word	0x20000fbc
 80161d8:	20000fb8 	.word	0x20000fb8
 80161dc:	20001020 	.word	0x20001020

080161e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b08a      	sub	sp, #40	; 0x28
 80161e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80161e6:	2300      	movs	r3, #0
 80161e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80161ea:	f000 fb0d 	bl	8016808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80161ee:	4b1d      	ldr	r3, [pc, #116]	; (8016264 <xTimerCreateTimerTask+0x84>)
 80161f0:	681b      	ldr	r3, [r3, #0]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d021      	beq.n	801623a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80161f6:	2300      	movs	r3, #0
 80161f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80161fa:	2300      	movs	r3, #0
 80161fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80161fe:	1d3a      	adds	r2, r7, #4
 8016200:	f107 0108 	add.w	r1, r7, #8
 8016204:	f107 030c 	add.w	r3, r7, #12
 8016208:	4618      	mov	r0, r3
 801620a:	f7fd fd85 	bl	8013d18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801620e:	6879      	ldr	r1, [r7, #4]
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	9202      	str	r2, [sp, #8]
 8016216:	9301      	str	r3, [sp, #4]
 8016218:	2302      	movs	r3, #2
 801621a:	9300      	str	r3, [sp, #0]
 801621c:	2300      	movs	r3, #0
 801621e:	460a      	mov	r2, r1
 8016220:	4911      	ldr	r1, [pc, #68]	; (8016268 <xTimerCreateTimerTask+0x88>)
 8016222:	4812      	ldr	r0, [pc, #72]	; (801626c <xTimerCreateTimerTask+0x8c>)
 8016224:	f7fe ff30 	bl	8015088 <xTaskCreateStatic>
 8016228:	4602      	mov	r2, r0
 801622a:	4b11      	ldr	r3, [pc, #68]	; (8016270 <xTimerCreateTimerTask+0x90>)
 801622c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801622e:	4b10      	ldr	r3, [pc, #64]	; (8016270 <xTimerCreateTimerTask+0x90>)
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d001      	beq.n	801623a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016236:	2301      	movs	r3, #1
 8016238:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d10b      	bne.n	8016258 <xTimerCreateTimerTask+0x78>
 8016240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016244:	b672      	cpsid	i
 8016246:	f383 8811 	msr	BASEPRI, r3
 801624a:	f3bf 8f6f 	isb	sy
 801624e:	f3bf 8f4f 	dsb	sy
 8016252:	b662      	cpsie	i
 8016254:	613b      	str	r3, [r7, #16]
 8016256:	e7fe      	b.n	8016256 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8016258:	697b      	ldr	r3, [r7, #20]
}
 801625a:	4618      	mov	r0, r3
 801625c:	3718      	adds	r7, #24
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	2000105c 	.word	0x2000105c
 8016268:	0801aadc 	.word	0x0801aadc
 801626c:	080163ad 	.word	0x080163ad
 8016270:	20001060 	.word	0x20001060

08016274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b08a      	sub	sp, #40	; 0x28
 8016278:	af00      	add	r7, sp, #0
 801627a:	60f8      	str	r0, [r7, #12]
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016282:	2300      	movs	r3, #0
 8016284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d10b      	bne.n	80162a4 <xTimerGenericCommand+0x30>
 801628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016290:	b672      	cpsid	i
 8016292:	f383 8811 	msr	BASEPRI, r3
 8016296:	f3bf 8f6f 	isb	sy
 801629a:	f3bf 8f4f 	dsb	sy
 801629e:	b662      	cpsie	i
 80162a0:	623b      	str	r3, [r7, #32]
 80162a2:	e7fe      	b.n	80162a2 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80162a4:	4b19      	ldr	r3, [pc, #100]	; (801630c <xTimerGenericCommand+0x98>)
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d02a      	beq.n	8016302 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80162ac:	68bb      	ldr	r3, [r7, #8]
 80162ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2b05      	cmp	r3, #5
 80162bc:	dc18      	bgt.n	80162f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80162be:	f7ff fdad 	bl	8015e1c <xTaskGetSchedulerState>
 80162c2:	4603      	mov	r3, r0
 80162c4:	2b02      	cmp	r3, #2
 80162c6:	d109      	bne.n	80162dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80162c8:	4b10      	ldr	r3, [pc, #64]	; (801630c <xTimerGenericCommand+0x98>)
 80162ca:	6818      	ldr	r0, [r3, #0]
 80162cc:	f107 0110 	add.w	r1, r7, #16
 80162d0:	2300      	movs	r3, #0
 80162d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162d4:	f7fe f860 	bl	8014398 <xQueueGenericSend>
 80162d8:	6278      	str	r0, [r7, #36]	; 0x24
 80162da:	e012      	b.n	8016302 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80162dc:	4b0b      	ldr	r3, [pc, #44]	; (801630c <xTimerGenericCommand+0x98>)
 80162de:	6818      	ldr	r0, [r3, #0]
 80162e0:	f107 0110 	add.w	r1, r7, #16
 80162e4:	2300      	movs	r3, #0
 80162e6:	2200      	movs	r2, #0
 80162e8:	f7fe f856 	bl	8014398 <xQueueGenericSend>
 80162ec:	6278      	str	r0, [r7, #36]	; 0x24
 80162ee:	e008      	b.n	8016302 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80162f0:	4b06      	ldr	r3, [pc, #24]	; (801630c <xTimerGenericCommand+0x98>)
 80162f2:	6818      	ldr	r0, [r3, #0]
 80162f4:	f107 0110 	add.w	r1, r7, #16
 80162f8:	2300      	movs	r3, #0
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	f7fe f94e 	bl	801459c <xQueueGenericSendFromISR>
 8016300:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016304:	4618      	mov	r0, r3
 8016306:	3728      	adds	r7, #40	; 0x28
 8016308:	46bd      	mov	sp, r7
 801630a:	bd80      	pop	{r7, pc}
 801630c:	2000105c 	.word	0x2000105c

08016310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b088      	sub	sp, #32
 8016314:	af02      	add	r7, sp, #8
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801631a:	4b23      	ldr	r3, [pc, #140]	; (80163a8 <prvProcessExpiredTimer+0x98>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	3304      	adds	r3, #4
 8016328:	4618      	mov	r0, r3
 801632a:	f7fd fd99 	bl	8013e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016334:	f003 0304 	and.w	r3, r3, #4
 8016338:	2b00      	cmp	r3, #0
 801633a:	d023      	beq.n	8016384 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801633c:	697b      	ldr	r3, [r7, #20]
 801633e:	699a      	ldr	r2, [r3, #24]
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	18d1      	adds	r1, r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	683a      	ldr	r2, [r7, #0]
 8016348:	6978      	ldr	r0, [r7, #20]
 801634a:	f000 f8d3 	bl	80164f4 <prvInsertTimerInActiveList>
 801634e:	4603      	mov	r3, r0
 8016350:	2b00      	cmp	r3, #0
 8016352:	d020      	beq.n	8016396 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016354:	2300      	movs	r3, #0
 8016356:	9300      	str	r3, [sp, #0]
 8016358:	2300      	movs	r3, #0
 801635a:	687a      	ldr	r2, [r7, #4]
 801635c:	2100      	movs	r1, #0
 801635e:	6978      	ldr	r0, [r7, #20]
 8016360:	f7ff ff88 	bl	8016274 <xTimerGenericCommand>
 8016364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016366:	693b      	ldr	r3, [r7, #16]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d114      	bne.n	8016396 <prvProcessExpiredTimer+0x86>
 801636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016370:	b672      	cpsid	i
 8016372:	f383 8811 	msr	BASEPRI, r3
 8016376:	f3bf 8f6f 	isb	sy
 801637a:	f3bf 8f4f 	dsb	sy
 801637e:	b662      	cpsie	i
 8016380:	60fb      	str	r3, [r7, #12]
 8016382:	e7fe      	b.n	8016382 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801638a:	f023 0301 	bic.w	r3, r3, #1
 801638e:	b2da      	uxtb	r2, r3
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	6a1b      	ldr	r3, [r3, #32]
 801639a:	6978      	ldr	r0, [r7, #20]
 801639c:	4798      	blx	r3
}
 801639e:	bf00      	nop
 80163a0:	3718      	adds	r7, #24
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	20001054 	.word	0x20001054

080163ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80163b4:	f107 0308 	add.w	r3, r7, #8
 80163b8:	4618      	mov	r0, r3
 80163ba:	f000 f857 	bl	801646c <prvGetNextExpireTime>
 80163be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	4619      	mov	r1, r3
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f000 f803 	bl	80163d0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80163ca:	f000 f8d5 	bl	8016578 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80163ce:	e7f1      	b.n	80163b4 <prvTimerTask+0x8>

080163d0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b084      	sub	sp, #16
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
 80163d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80163da:	f7ff f919 	bl	8015610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80163de:	f107 0308 	add.w	r3, r7, #8
 80163e2:	4618      	mov	r0, r3
 80163e4:	f000 f866 	bl	80164b4 <prvSampleTimeNow>
 80163e8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d130      	bne.n	8016452 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d10a      	bne.n	801640c <prvProcessTimerOrBlockTask+0x3c>
 80163f6:	687a      	ldr	r2, [r7, #4]
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d806      	bhi.n	801640c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80163fe:	f7ff f915 	bl	801562c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016402:	68f9      	ldr	r1, [r7, #12]
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f7ff ff83 	bl	8016310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801640a:	e024      	b.n	8016456 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d008      	beq.n	8016424 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016412:	4b13      	ldr	r3, [pc, #76]	; (8016460 <prvProcessTimerOrBlockTask+0x90>)
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d101      	bne.n	8016420 <prvProcessTimerOrBlockTask+0x50>
 801641c:	2301      	movs	r3, #1
 801641e:	e000      	b.n	8016422 <prvProcessTimerOrBlockTask+0x52>
 8016420:	2300      	movs	r3, #0
 8016422:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016424:	4b0f      	ldr	r3, [pc, #60]	; (8016464 <prvProcessTimerOrBlockTask+0x94>)
 8016426:	6818      	ldr	r0, [r3, #0]
 8016428:	687a      	ldr	r2, [r7, #4]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	1ad3      	subs	r3, r2, r3
 801642e:	683a      	ldr	r2, [r7, #0]
 8016430:	4619      	mov	r1, r3
 8016432:	f7fe fdf5 	bl	8015020 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016436:	f7ff f8f9 	bl	801562c <xTaskResumeAll>
 801643a:	4603      	mov	r3, r0
 801643c:	2b00      	cmp	r3, #0
 801643e:	d10a      	bne.n	8016456 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016440:	4b09      	ldr	r3, [pc, #36]	; (8016468 <prvProcessTimerOrBlockTask+0x98>)
 8016442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016446:	601a      	str	r2, [r3, #0]
 8016448:	f3bf 8f4f 	dsb	sy
 801644c:	f3bf 8f6f 	isb	sy
}
 8016450:	e001      	b.n	8016456 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016452:	f7ff f8eb 	bl	801562c <xTaskResumeAll>
}
 8016456:	bf00      	nop
 8016458:	3710      	adds	r7, #16
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	20001058 	.word	0x20001058
 8016464:	2000105c 	.word	0x2000105c
 8016468:	e000ed04 	.word	0xe000ed04

0801646c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801646c:	b480      	push	{r7}
 801646e:	b085      	sub	sp, #20
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016474:	4b0e      	ldr	r3, [pc, #56]	; (80164b0 <prvGetNextExpireTime+0x44>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d101      	bne.n	8016482 <prvGetNextExpireTime+0x16>
 801647e:	2201      	movs	r2, #1
 8016480:	e000      	b.n	8016484 <prvGetNextExpireTime+0x18>
 8016482:	2200      	movs	r2, #0
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d105      	bne.n	801649c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016490:	4b07      	ldr	r3, [pc, #28]	; (80164b0 <prvGetNextExpireTime+0x44>)
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	68db      	ldr	r3, [r3, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
 801649a:	e001      	b.n	80164a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801649c:	2300      	movs	r3, #0
 801649e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80164a0:	68fb      	ldr	r3, [r7, #12]
}
 80164a2:	4618      	mov	r0, r3
 80164a4:	3714      	adds	r7, #20
 80164a6:	46bd      	mov	sp, r7
 80164a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ac:	4770      	bx	lr
 80164ae:	bf00      	nop
 80164b0:	20001054 	.word	0x20001054

080164b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80164bc:	f7ff f954 	bl	8015768 <xTaskGetTickCount>
 80164c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80164c2:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <prvSampleTimeNow+0x3c>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	68fa      	ldr	r2, [r7, #12]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	d205      	bcs.n	80164d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80164cc:	f000 f936 	bl	801673c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	2201      	movs	r2, #1
 80164d4:	601a      	str	r2, [r3, #0]
 80164d6:	e002      	b.n	80164de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2200      	movs	r2, #0
 80164dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80164de:	4a04      	ldr	r2, [pc, #16]	; (80164f0 <prvSampleTimeNow+0x3c>)
 80164e0:	68fb      	ldr	r3, [r7, #12]
 80164e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80164e4:	68fb      	ldr	r3, [r7, #12]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	20001064 	.word	0x20001064

080164f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	60f8      	str	r0, [r7, #12]
 80164fc:	60b9      	str	r1, [r7, #8]
 80164fe:	607a      	str	r2, [r7, #4]
 8016500:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016502:	2300      	movs	r3, #0
 8016504:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	68ba      	ldr	r2, [r7, #8]
 801650a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	68fa      	ldr	r2, [r7, #12]
 8016510:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016512:	68ba      	ldr	r2, [r7, #8]
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	429a      	cmp	r2, r3
 8016518:	d812      	bhi.n	8016540 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801651a:	687a      	ldr	r2, [r7, #4]
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	1ad2      	subs	r2, r2, r3
 8016520:	68fb      	ldr	r3, [r7, #12]
 8016522:	699b      	ldr	r3, [r3, #24]
 8016524:	429a      	cmp	r2, r3
 8016526:	d302      	bcc.n	801652e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016528:	2301      	movs	r3, #1
 801652a:	617b      	str	r3, [r7, #20]
 801652c:	e01b      	b.n	8016566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801652e:	4b10      	ldr	r3, [pc, #64]	; (8016570 <prvInsertTimerInActiveList+0x7c>)
 8016530:	681a      	ldr	r2, [r3, #0]
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	3304      	adds	r3, #4
 8016536:	4619      	mov	r1, r3
 8016538:	4610      	mov	r0, r2
 801653a:	f7fd fc58 	bl	8013dee <vListInsert>
 801653e:	e012      	b.n	8016566 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016540:	687a      	ldr	r2, [r7, #4]
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	429a      	cmp	r2, r3
 8016546:	d206      	bcs.n	8016556 <prvInsertTimerInActiveList+0x62>
 8016548:	68ba      	ldr	r2, [r7, #8]
 801654a:	683b      	ldr	r3, [r7, #0]
 801654c:	429a      	cmp	r2, r3
 801654e:	d302      	bcc.n	8016556 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016550:	2301      	movs	r3, #1
 8016552:	617b      	str	r3, [r7, #20]
 8016554:	e007      	b.n	8016566 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016556:	4b07      	ldr	r3, [pc, #28]	; (8016574 <prvInsertTimerInActiveList+0x80>)
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	3304      	adds	r3, #4
 801655e:	4619      	mov	r1, r3
 8016560:	4610      	mov	r0, r2
 8016562:	f7fd fc44 	bl	8013dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016566:	697b      	ldr	r3, [r7, #20]
}
 8016568:	4618      	mov	r0, r3
 801656a:	3718      	adds	r7, #24
 801656c:	46bd      	mov	sp, r7
 801656e:	bd80      	pop	{r7, pc}
 8016570:	20001058 	.word	0x20001058
 8016574:	20001054 	.word	0x20001054

08016578 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016578:	b580      	push	{r7, lr}
 801657a:	b08e      	sub	sp, #56	; 0x38
 801657c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801657e:	e0cc      	b.n	801671a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	2b00      	cmp	r3, #0
 8016584:	da19      	bge.n	80165ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016586:	1d3b      	adds	r3, r7, #4
 8016588:	3304      	adds	r3, #4
 801658a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658e:	2b00      	cmp	r3, #0
 8016590:	d10b      	bne.n	80165aa <prvProcessReceivedCommands+0x32>
 8016592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016596:	b672      	cpsid	i
 8016598:	f383 8811 	msr	BASEPRI, r3
 801659c:	f3bf 8f6f 	isb	sy
 80165a0:	f3bf 8f4f 	dsb	sy
 80165a4:	b662      	cpsie	i
 80165a6:	61fb      	str	r3, [r7, #28]
 80165a8:	e7fe      	b.n	80165a8 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80165aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165b0:	6850      	ldr	r0, [r2, #4]
 80165b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80165b4:	6892      	ldr	r2, [r2, #8]
 80165b6:	4611      	mov	r1, r2
 80165b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f2c0 80ab 	blt.w	8016718 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c8:	695b      	ldr	r3, [r3, #20]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d004      	beq.n	80165d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80165ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d0:	3304      	adds	r3, #4
 80165d2:	4618      	mov	r0, r3
 80165d4:	f7fd fc44 	bl	8013e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80165d8:	463b      	mov	r3, r7
 80165da:	4618      	mov	r0, r3
 80165dc:	f7ff ff6a 	bl	80164b4 <prvSampleTimeNow>
 80165e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2b09      	cmp	r3, #9
 80165e6:	f200 8098 	bhi.w	801671a <prvProcessReceivedCommands+0x1a2>
 80165ea:	a201      	add	r2, pc, #4	; (adr r2, 80165f0 <prvProcessReceivedCommands+0x78>)
 80165ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165f0:	08016619 	.word	0x08016619
 80165f4:	08016619 	.word	0x08016619
 80165f8:	08016619 	.word	0x08016619
 80165fc:	0801668f 	.word	0x0801668f
 8016600:	080166a3 	.word	0x080166a3
 8016604:	080166ef 	.word	0x080166ef
 8016608:	08016619 	.word	0x08016619
 801660c:	08016619 	.word	0x08016619
 8016610:	0801668f 	.word	0x0801668f
 8016614:	080166a3 	.word	0x080166a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801661e:	f043 0301 	orr.w	r3, r3, #1
 8016622:	b2da      	uxtb	r2, r3
 8016624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801662a:	68ba      	ldr	r2, [r7, #8]
 801662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662e:	699b      	ldr	r3, [r3, #24]
 8016630:	18d1      	adds	r1, r2, r3
 8016632:	68bb      	ldr	r3, [r7, #8]
 8016634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016638:	f7ff ff5c 	bl	80164f4 <prvInsertTimerInActiveList>
 801663c:	4603      	mov	r3, r0
 801663e:	2b00      	cmp	r3, #0
 8016640:	d06b      	beq.n	801671a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016644:	6a1b      	ldr	r3, [r3, #32]
 8016646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016648:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801664c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016650:	f003 0304 	and.w	r3, r3, #4
 8016654:	2b00      	cmp	r3, #0
 8016656:	d060      	beq.n	801671a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016658:	68ba      	ldr	r2, [r7, #8]
 801665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665c:	699b      	ldr	r3, [r3, #24]
 801665e:	441a      	add	r2, r3
 8016660:	2300      	movs	r3, #0
 8016662:	9300      	str	r3, [sp, #0]
 8016664:	2300      	movs	r3, #0
 8016666:	2100      	movs	r1, #0
 8016668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801666a:	f7ff fe03 	bl	8016274 <xTimerGenericCommand>
 801666e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016670:	6a3b      	ldr	r3, [r7, #32]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d151      	bne.n	801671a <prvProcessReceivedCommands+0x1a2>
 8016676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667a:	b672      	cpsid	i
 801667c:	f383 8811 	msr	BASEPRI, r3
 8016680:	f3bf 8f6f 	isb	sy
 8016684:	f3bf 8f4f 	dsb	sy
 8016688:	b662      	cpsie	i
 801668a:	61bb      	str	r3, [r7, #24]
 801668c:	e7fe      	b.n	801668c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016694:	f023 0301 	bic.w	r3, r3, #1
 8016698:	b2da      	uxtb	r2, r3
 801669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80166a0:	e03b      	b.n	801671a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80166a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166a8:	f043 0301 	orr.w	r3, r3, #1
 80166ac:	b2da      	uxtb	r2, r3
 80166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80166b4:	68ba      	ldr	r2, [r7, #8]
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80166ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166bc:	699b      	ldr	r3, [r3, #24]
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d10b      	bne.n	80166da <prvProcessReceivedCommands+0x162>
 80166c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166c6:	b672      	cpsid	i
 80166c8:	f383 8811 	msr	BASEPRI, r3
 80166cc:	f3bf 8f6f 	isb	sy
 80166d0:	f3bf 8f4f 	dsb	sy
 80166d4:	b662      	cpsie	i
 80166d6:	617b      	str	r3, [r7, #20]
 80166d8:	e7fe      	b.n	80166d8 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80166da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166dc:	699a      	ldr	r2, [r3, #24]
 80166de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e0:	18d1      	adds	r1, r2, r3
 80166e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166e8:	f7ff ff04 	bl	80164f4 <prvInsertTimerInActiveList>
					break;
 80166ec:	e015      	b.n	801671a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80166ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80166f4:	f003 0302 	and.w	r3, r3, #2
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d103      	bne.n	8016704 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80166fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166fe:	f000 fbb5 	bl	8016e6c <vPortFree>
 8016702:	e00a      	b.n	801671a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801670a:	f023 0301 	bic.w	r3, r3, #1
 801670e:	b2da      	uxtb	r2, r3
 8016710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016716:	e000      	b.n	801671a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016718:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801671a:	4b07      	ldr	r3, [pc, #28]	; (8016738 <prvProcessReceivedCommands+0x1c0>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	1d39      	adds	r1, r7, #4
 8016720:	2200      	movs	r2, #0
 8016722:	4618      	mov	r0, r3
 8016724:	f7fe f868 	bl	80147f8 <xQueueReceive>
 8016728:	4603      	mov	r3, r0
 801672a:	2b00      	cmp	r3, #0
 801672c:	f47f af28 	bne.w	8016580 <prvProcessReceivedCommands+0x8>
	}
}
 8016730:	bf00      	nop
 8016732:	3730      	adds	r7, #48	; 0x30
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}
 8016738:	2000105c 	.word	0x2000105c

0801673c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801673c:	b580      	push	{r7, lr}
 801673e:	b088      	sub	sp, #32
 8016740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016742:	e049      	b.n	80167d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016744:	4b2e      	ldr	r3, [pc, #184]	; (8016800 <prvSwitchTimerLists+0xc4>)
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	68db      	ldr	r3, [r3, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801674e:	4b2c      	ldr	r3, [pc, #176]	; (8016800 <prvSwitchTimerLists+0xc4>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	68db      	ldr	r3, [r3, #12]
 8016754:	68db      	ldr	r3, [r3, #12]
 8016756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	3304      	adds	r3, #4
 801675c:	4618      	mov	r0, r3
 801675e:	f7fd fb7f 	bl	8013e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	6a1b      	ldr	r3, [r3, #32]
 8016766:	68f8      	ldr	r0, [r7, #12]
 8016768:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016770:	f003 0304 	and.w	r3, r3, #4
 8016774:	2b00      	cmp	r3, #0
 8016776:	d02f      	beq.n	80167d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	699b      	ldr	r3, [r3, #24]
 801677c:	693a      	ldr	r2, [r7, #16]
 801677e:	4413      	add	r3, r2
 8016780:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016782:	68ba      	ldr	r2, [r7, #8]
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	429a      	cmp	r2, r3
 8016788:	d90e      	bls.n	80167a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	68ba      	ldr	r2, [r7, #8]
 801678e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	68fa      	ldr	r2, [r7, #12]
 8016794:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016796:	4b1a      	ldr	r3, [pc, #104]	; (8016800 <prvSwitchTimerLists+0xc4>)
 8016798:	681a      	ldr	r2, [r3, #0]
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	3304      	adds	r3, #4
 801679e:	4619      	mov	r1, r3
 80167a0:	4610      	mov	r0, r2
 80167a2:	f7fd fb24 	bl	8013dee <vListInsert>
 80167a6:	e017      	b.n	80167d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80167a8:	2300      	movs	r3, #0
 80167aa:	9300      	str	r3, [sp, #0]
 80167ac:	2300      	movs	r3, #0
 80167ae:	693a      	ldr	r2, [r7, #16]
 80167b0:	2100      	movs	r1, #0
 80167b2:	68f8      	ldr	r0, [r7, #12]
 80167b4:	f7ff fd5e 	bl	8016274 <xTimerGenericCommand>
 80167b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d10b      	bne.n	80167d8 <prvSwitchTimerLists+0x9c>
 80167c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167c4:	b672      	cpsid	i
 80167c6:	f383 8811 	msr	BASEPRI, r3
 80167ca:	f3bf 8f6f 	isb	sy
 80167ce:	f3bf 8f4f 	dsb	sy
 80167d2:	b662      	cpsie	i
 80167d4:	603b      	str	r3, [r7, #0]
 80167d6:	e7fe      	b.n	80167d6 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80167d8:	4b09      	ldr	r3, [pc, #36]	; (8016800 <prvSwitchTimerLists+0xc4>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d1b0      	bne.n	8016744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80167e2:	4b07      	ldr	r3, [pc, #28]	; (8016800 <prvSwitchTimerLists+0xc4>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80167e8:	4b06      	ldr	r3, [pc, #24]	; (8016804 <prvSwitchTimerLists+0xc8>)
 80167ea:	681b      	ldr	r3, [r3, #0]
 80167ec:	4a04      	ldr	r2, [pc, #16]	; (8016800 <prvSwitchTimerLists+0xc4>)
 80167ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80167f0:	4a04      	ldr	r2, [pc, #16]	; (8016804 <prvSwitchTimerLists+0xc8>)
 80167f2:	697b      	ldr	r3, [r7, #20]
 80167f4:	6013      	str	r3, [r2, #0]
}
 80167f6:	bf00      	nop
 80167f8:	3718      	adds	r7, #24
 80167fa:	46bd      	mov	sp, r7
 80167fc:	bd80      	pop	{r7, pc}
 80167fe:	bf00      	nop
 8016800:	20001054 	.word	0x20001054
 8016804:	20001058 	.word	0x20001058

08016808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801680e:	f000 f943 	bl	8016a98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016812:	4b15      	ldr	r3, [pc, #84]	; (8016868 <prvCheckForValidListAndQueue+0x60>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d120      	bne.n	801685c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801681a:	4814      	ldr	r0, [pc, #80]	; (801686c <prvCheckForValidListAndQueue+0x64>)
 801681c:	f7fd fa96 	bl	8013d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016820:	4813      	ldr	r0, [pc, #76]	; (8016870 <prvCheckForValidListAndQueue+0x68>)
 8016822:	f7fd fa93 	bl	8013d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016826:	4b13      	ldr	r3, [pc, #76]	; (8016874 <prvCheckForValidListAndQueue+0x6c>)
 8016828:	4a10      	ldr	r2, [pc, #64]	; (801686c <prvCheckForValidListAndQueue+0x64>)
 801682a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801682c:	4b12      	ldr	r3, [pc, #72]	; (8016878 <prvCheckForValidListAndQueue+0x70>)
 801682e:	4a10      	ldr	r2, [pc, #64]	; (8016870 <prvCheckForValidListAndQueue+0x68>)
 8016830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016832:	2300      	movs	r3, #0
 8016834:	9300      	str	r3, [sp, #0]
 8016836:	4b11      	ldr	r3, [pc, #68]	; (801687c <prvCheckForValidListAndQueue+0x74>)
 8016838:	4a11      	ldr	r2, [pc, #68]	; (8016880 <prvCheckForValidListAndQueue+0x78>)
 801683a:	2110      	movs	r1, #16
 801683c:	200a      	movs	r0, #10
 801683e:	f7fd fba3 	bl	8013f88 <xQueueGenericCreateStatic>
 8016842:	4602      	mov	r2, r0
 8016844:	4b08      	ldr	r3, [pc, #32]	; (8016868 <prvCheckForValidListAndQueue+0x60>)
 8016846:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016848:	4b07      	ldr	r3, [pc, #28]	; (8016868 <prvCheckForValidListAndQueue+0x60>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d005      	beq.n	801685c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016850:	4b05      	ldr	r3, [pc, #20]	; (8016868 <prvCheckForValidListAndQueue+0x60>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	490b      	ldr	r1, [pc, #44]	; (8016884 <prvCheckForValidListAndQueue+0x7c>)
 8016856:	4618      	mov	r0, r3
 8016858:	f7fe fb90 	bl	8014f7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801685c:	f000 f94e 	bl	8016afc <vPortExitCritical>
}
 8016860:	bf00      	nop
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
 8016866:	bf00      	nop
 8016868:	2000105c 	.word	0x2000105c
 801686c:	2000102c 	.word	0x2000102c
 8016870:	20001040 	.word	0x20001040
 8016874:	20001054 	.word	0x20001054
 8016878:	20001058 	.word	0x20001058
 801687c:	20001108 	.word	0x20001108
 8016880:	20001068 	.word	0x20001068
 8016884:	0801aae4 	.word	0x0801aae4

08016888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016888:	b480      	push	{r7}
 801688a:	b085      	sub	sp, #20
 801688c:	af00      	add	r7, sp, #0
 801688e:	60f8      	str	r0, [r7, #12]
 8016890:	60b9      	str	r1, [r7, #8]
 8016892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	3b04      	subs	r3, #4
 8016898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80168a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	3b04      	subs	r3, #4
 80168a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	f023 0201 	bic.w	r2, r3, #1
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	3b04      	subs	r3, #4
 80168b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80168b8:	4a0c      	ldr	r2, [pc, #48]	; (80168ec <pxPortInitialiseStack+0x64>)
 80168ba:	68fb      	ldr	r3, [r7, #12]
 80168bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	3b14      	subs	r3, #20
 80168c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80168c4:	687a      	ldr	r2, [r7, #4]
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	3b04      	subs	r3, #4
 80168ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	f06f 0202 	mvn.w	r2, #2
 80168d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	3b20      	subs	r3, #32
 80168dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80168de:	68fb      	ldr	r3, [r7, #12]
}
 80168e0:	4618      	mov	r0, r3
 80168e2:	3714      	adds	r7, #20
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr
 80168ec:	080168f1 	.word	0x080168f1

080168f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80168f0:	b480      	push	{r7}
 80168f2:	b085      	sub	sp, #20
 80168f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80168f6:	2300      	movs	r3, #0
 80168f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80168fa:	4b13      	ldr	r3, [pc, #76]	; (8016948 <prvTaskExitError+0x58>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016902:	d00b      	beq.n	801691c <prvTaskExitError+0x2c>
 8016904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016908:	b672      	cpsid	i
 801690a:	f383 8811 	msr	BASEPRI, r3
 801690e:	f3bf 8f6f 	isb	sy
 8016912:	f3bf 8f4f 	dsb	sy
 8016916:	b662      	cpsie	i
 8016918:	60fb      	str	r3, [r7, #12]
 801691a:	e7fe      	b.n	801691a <prvTaskExitError+0x2a>
 801691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016920:	b672      	cpsid	i
 8016922:	f383 8811 	msr	BASEPRI, r3
 8016926:	f3bf 8f6f 	isb	sy
 801692a:	f3bf 8f4f 	dsb	sy
 801692e:	b662      	cpsie	i
 8016930:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016932:	bf00      	nop
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d0fc      	beq.n	8016934 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801693a:	bf00      	nop
 801693c:	3714      	adds	r7, #20
 801693e:	46bd      	mov	sp, r7
 8016940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016944:	4770      	bx	lr
 8016946:	bf00      	nop
 8016948:	2000011c 	.word	0x2000011c
 801694c:	00000000 	.word	0x00000000

08016950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016950:	4b07      	ldr	r3, [pc, #28]	; (8016970 <pxCurrentTCBConst2>)
 8016952:	6819      	ldr	r1, [r3, #0]
 8016954:	6808      	ldr	r0, [r1, #0]
 8016956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801695a:	f380 8809 	msr	PSP, r0
 801695e:	f3bf 8f6f 	isb	sy
 8016962:	f04f 0000 	mov.w	r0, #0
 8016966:	f380 8811 	msr	BASEPRI, r0
 801696a:	4770      	bx	lr
 801696c:	f3af 8000 	nop.w

08016970 <pxCurrentTCBConst2>:
 8016970:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016974:	bf00      	nop
 8016976:	bf00      	nop

08016978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016978:	4808      	ldr	r0, [pc, #32]	; (801699c <prvPortStartFirstTask+0x24>)
 801697a:	6800      	ldr	r0, [r0, #0]
 801697c:	6800      	ldr	r0, [r0, #0]
 801697e:	f380 8808 	msr	MSP, r0
 8016982:	f04f 0000 	mov.w	r0, #0
 8016986:	f380 8814 	msr	CONTROL, r0
 801698a:	b662      	cpsie	i
 801698c:	b661      	cpsie	f
 801698e:	f3bf 8f4f 	dsb	sy
 8016992:	f3bf 8f6f 	isb	sy
 8016996:	df00      	svc	0
 8016998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801699a:	bf00      	nop
 801699c:	e000ed08 	.word	0xe000ed08

080169a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b084      	sub	sp, #16
 80169a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80169a6:	4b36      	ldr	r3, [pc, #216]	; (8016a80 <xPortStartScheduler+0xe0>)
 80169a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	781b      	ldrb	r3, [r3, #0]
 80169ae:	b2db      	uxtb	r3, r3
 80169b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	22ff      	movs	r2, #255	; 0xff
 80169b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	781b      	ldrb	r3, [r3, #0]
 80169bc:	b2db      	uxtb	r3, r3
 80169be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80169c8:	b2da      	uxtb	r2, r3
 80169ca:	4b2e      	ldr	r3, [pc, #184]	; (8016a84 <xPortStartScheduler+0xe4>)
 80169cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80169ce:	4b2e      	ldr	r3, [pc, #184]	; (8016a88 <xPortStartScheduler+0xe8>)
 80169d0:	2207      	movs	r2, #7
 80169d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169d4:	e009      	b.n	80169ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80169d6:	4b2c      	ldr	r3, [pc, #176]	; (8016a88 <xPortStartScheduler+0xe8>)
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	3b01      	subs	r3, #1
 80169dc:	4a2a      	ldr	r2, [pc, #168]	; (8016a88 <xPortStartScheduler+0xe8>)
 80169de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80169e0:	78fb      	ldrb	r3, [r7, #3]
 80169e2:	b2db      	uxtb	r3, r3
 80169e4:	005b      	lsls	r3, r3, #1
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80169ea:	78fb      	ldrb	r3, [r7, #3]
 80169ec:	b2db      	uxtb	r3, r3
 80169ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169f2:	2b80      	cmp	r3, #128	; 0x80
 80169f4:	d0ef      	beq.n	80169d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80169f6:	4b24      	ldr	r3, [pc, #144]	; (8016a88 <xPortStartScheduler+0xe8>)
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	f1c3 0307 	rsb	r3, r3, #7
 80169fe:	2b04      	cmp	r3, #4
 8016a00:	d00b      	beq.n	8016a1a <xPortStartScheduler+0x7a>
 8016a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a06:	b672      	cpsid	i
 8016a08:	f383 8811 	msr	BASEPRI, r3
 8016a0c:	f3bf 8f6f 	isb	sy
 8016a10:	f3bf 8f4f 	dsb	sy
 8016a14:	b662      	cpsie	i
 8016a16:	60bb      	str	r3, [r7, #8]
 8016a18:	e7fe      	b.n	8016a18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016a1a:	4b1b      	ldr	r3, [pc, #108]	; (8016a88 <xPortStartScheduler+0xe8>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	021b      	lsls	r3, r3, #8
 8016a20:	4a19      	ldr	r2, [pc, #100]	; (8016a88 <xPortStartScheduler+0xe8>)
 8016a22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016a24:	4b18      	ldr	r3, [pc, #96]	; (8016a88 <xPortStartScheduler+0xe8>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8016a2c:	4a16      	ldr	r2, [pc, #88]	; (8016a88 <xPortStartScheduler+0xe8>)
 8016a2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	b2da      	uxtb	r2, r3
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016a38:	4b14      	ldr	r3, [pc, #80]	; (8016a8c <xPortStartScheduler+0xec>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4a13      	ldr	r2, [pc, #76]	; (8016a8c <xPortStartScheduler+0xec>)
 8016a3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016a42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016a44:	4b11      	ldr	r3, [pc, #68]	; (8016a8c <xPortStartScheduler+0xec>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4a10      	ldr	r2, [pc, #64]	; (8016a8c <xPortStartScheduler+0xec>)
 8016a4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8016a4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016a50:	f000 f8d4 	bl	8016bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016a54:	4b0e      	ldr	r3, [pc, #56]	; (8016a90 <xPortStartScheduler+0xf0>)
 8016a56:	2200      	movs	r2, #0
 8016a58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016a5a:	f000 f8f3 	bl	8016c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016a5e:	4b0d      	ldr	r3, [pc, #52]	; (8016a94 <xPortStartScheduler+0xf4>)
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	4a0c      	ldr	r2, [pc, #48]	; (8016a94 <xPortStartScheduler+0xf4>)
 8016a64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016a68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016a6a:	f7ff ff85 	bl	8016978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a6e:	f7fe ff57 	bl	8015920 <vTaskSwitchContext>
	prvTaskExitError();
 8016a72:	f7ff ff3d 	bl	80168f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a76:	2300      	movs	r3, #0
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	3710      	adds	r7, #16
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd80      	pop	{r7, pc}
 8016a80:	e000e400 	.word	0xe000e400
 8016a84:	20001158 	.word	0x20001158
 8016a88:	2000115c 	.word	0x2000115c
 8016a8c:	e000ed20 	.word	0xe000ed20
 8016a90:	2000011c 	.word	0x2000011c
 8016a94:	e000ef34 	.word	0xe000ef34

08016a98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b083      	sub	sp, #12
 8016a9c:	af00      	add	r7, sp, #0
 8016a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa2:	b672      	cpsid	i
 8016aa4:	f383 8811 	msr	BASEPRI, r3
 8016aa8:	f3bf 8f6f 	isb	sy
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	b662      	cpsie	i
 8016ab2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016ab4:	4b0f      	ldr	r3, [pc, #60]	; (8016af4 <vPortEnterCritical+0x5c>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	3301      	adds	r3, #1
 8016aba:	4a0e      	ldr	r2, [pc, #56]	; (8016af4 <vPortEnterCritical+0x5c>)
 8016abc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016abe:	4b0d      	ldr	r3, [pc, #52]	; (8016af4 <vPortEnterCritical+0x5c>)
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	2b01      	cmp	r3, #1
 8016ac4:	d110      	bne.n	8016ae8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016ac6:	4b0c      	ldr	r3, [pc, #48]	; (8016af8 <vPortEnterCritical+0x60>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d00b      	beq.n	8016ae8 <vPortEnterCritical+0x50>
 8016ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad4:	b672      	cpsid	i
 8016ad6:	f383 8811 	msr	BASEPRI, r3
 8016ada:	f3bf 8f6f 	isb	sy
 8016ade:	f3bf 8f4f 	dsb	sy
 8016ae2:	b662      	cpsie	i
 8016ae4:	603b      	str	r3, [r7, #0]
 8016ae6:	e7fe      	b.n	8016ae6 <vPortEnterCritical+0x4e>
	}
}
 8016ae8:	bf00      	nop
 8016aea:	370c      	adds	r7, #12
 8016aec:	46bd      	mov	sp, r7
 8016aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af2:	4770      	bx	lr
 8016af4:	2000011c 	.word	0x2000011c
 8016af8:	e000ed04 	.word	0xe000ed04

08016afc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016b02:	4b12      	ldr	r3, [pc, #72]	; (8016b4c <vPortExitCritical+0x50>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d10b      	bne.n	8016b22 <vPortExitCritical+0x26>
 8016b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b0e:	b672      	cpsid	i
 8016b10:	f383 8811 	msr	BASEPRI, r3
 8016b14:	f3bf 8f6f 	isb	sy
 8016b18:	f3bf 8f4f 	dsb	sy
 8016b1c:	b662      	cpsie	i
 8016b1e:	607b      	str	r3, [r7, #4]
 8016b20:	e7fe      	b.n	8016b20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8016b22:	4b0a      	ldr	r3, [pc, #40]	; (8016b4c <vPortExitCritical+0x50>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	3b01      	subs	r3, #1
 8016b28:	4a08      	ldr	r2, [pc, #32]	; (8016b4c <vPortExitCritical+0x50>)
 8016b2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016b2c:	4b07      	ldr	r3, [pc, #28]	; (8016b4c <vPortExitCritical+0x50>)
 8016b2e:	681b      	ldr	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d104      	bne.n	8016b3e <vPortExitCritical+0x42>
 8016b34:	2300      	movs	r3, #0
 8016b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b38:	683b      	ldr	r3, [r7, #0]
 8016b3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8016b3e:	bf00      	nop
 8016b40:	370c      	adds	r7, #12
 8016b42:	46bd      	mov	sp, r7
 8016b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b48:	4770      	bx	lr
 8016b4a:	bf00      	nop
 8016b4c:	2000011c 	.word	0x2000011c

08016b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016b50:	f3ef 8009 	mrs	r0, PSP
 8016b54:	f3bf 8f6f 	isb	sy
 8016b58:	4b15      	ldr	r3, [pc, #84]	; (8016bb0 <pxCurrentTCBConst>)
 8016b5a:	681a      	ldr	r2, [r3, #0]
 8016b5c:	f01e 0f10 	tst.w	lr, #16
 8016b60:	bf08      	it	eq
 8016b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b6a:	6010      	str	r0, [r2, #0]
 8016b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016b74:	b672      	cpsid	i
 8016b76:	f380 8811 	msr	BASEPRI, r0
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	f3bf 8f6f 	isb	sy
 8016b82:	b662      	cpsie	i
 8016b84:	f7fe fecc 	bl	8015920 <vTaskSwitchContext>
 8016b88:	f04f 0000 	mov.w	r0, #0
 8016b8c:	f380 8811 	msr	BASEPRI, r0
 8016b90:	bc09      	pop	{r0, r3}
 8016b92:	6819      	ldr	r1, [r3, #0]
 8016b94:	6808      	ldr	r0, [r1, #0]
 8016b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b9a:	f01e 0f10 	tst.w	lr, #16
 8016b9e:	bf08      	it	eq
 8016ba0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016ba4:	f380 8809 	msr	PSP, r0
 8016ba8:	f3bf 8f6f 	isb	sy
 8016bac:	4770      	bx	lr
 8016bae:	bf00      	nop

08016bb0 <pxCurrentTCBConst>:
 8016bb0:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016bb4:	bf00      	nop
 8016bb6:	bf00      	nop

08016bb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8016bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bc2:	b672      	cpsid	i
 8016bc4:	f383 8811 	msr	BASEPRI, r3
 8016bc8:	f3bf 8f6f 	isb	sy
 8016bcc:	f3bf 8f4f 	dsb	sy
 8016bd0:	b662      	cpsie	i
 8016bd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016bd4:	f7fe fdea 	bl	80157ac <xTaskIncrementTick>
 8016bd8:	4603      	mov	r3, r0
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d003      	beq.n	8016be6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016bde:	4b06      	ldr	r3, [pc, #24]	; (8016bf8 <SysTick_Handler+0x40>)
 8016be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016be4:	601a      	str	r2, [r3, #0]
 8016be6:	2300      	movs	r3, #0
 8016be8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8016bf0:	bf00      	nop
 8016bf2:	3708      	adds	r7, #8
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	bd80      	pop	{r7, pc}
 8016bf8:	e000ed04 	.word	0xe000ed04

08016bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016bfc:	b480      	push	{r7}
 8016bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016c00:	4b0b      	ldr	r3, [pc, #44]	; (8016c30 <vPortSetupTimerInterrupt+0x34>)
 8016c02:	2200      	movs	r2, #0
 8016c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016c06:	4b0b      	ldr	r3, [pc, #44]	; (8016c34 <vPortSetupTimerInterrupt+0x38>)
 8016c08:	2200      	movs	r2, #0
 8016c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016c0c:	4b0a      	ldr	r3, [pc, #40]	; (8016c38 <vPortSetupTimerInterrupt+0x3c>)
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	4a0a      	ldr	r2, [pc, #40]	; (8016c3c <vPortSetupTimerInterrupt+0x40>)
 8016c12:	fba2 2303 	umull	r2, r3, r2, r3
 8016c16:	099b      	lsrs	r3, r3, #6
 8016c18:	4a09      	ldr	r2, [pc, #36]	; (8016c40 <vPortSetupTimerInterrupt+0x44>)
 8016c1a:	3b01      	subs	r3, #1
 8016c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016c1e:	4b04      	ldr	r3, [pc, #16]	; (8016c30 <vPortSetupTimerInterrupt+0x34>)
 8016c20:	2207      	movs	r2, #7
 8016c22:	601a      	str	r2, [r3, #0]
}
 8016c24:	bf00      	nop
 8016c26:	46bd      	mov	sp, r7
 8016c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2c:	4770      	bx	lr
 8016c2e:	bf00      	nop
 8016c30:	e000e010 	.word	0xe000e010
 8016c34:	e000e018 	.word	0xe000e018
 8016c38:	20000000 	.word	0x20000000
 8016c3c:	10624dd3 	.word	0x10624dd3
 8016c40:	e000e014 	.word	0xe000e014

08016c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016c54 <vPortEnableVFP+0x10>
 8016c48:	6801      	ldr	r1, [r0, #0]
 8016c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016c4e:	6001      	str	r1, [r0, #0]
 8016c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016c52:	bf00      	nop
 8016c54:	e000ed88 	.word	0xe000ed88

08016c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c5e:	f3ef 8305 	mrs	r3, IPSR
 8016c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	2b0f      	cmp	r3, #15
 8016c68:	d915      	bls.n	8016c96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c6a:	4a18      	ldr	r2, [pc, #96]	; (8016ccc <vPortValidateInterruptPriority+0x74>)
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	4413      	add	r3, r2
 8016c70:	781b      	ldrb	r3, [r3, #0]
 8016c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c74:	4b16      	ldr	r3, [pc, #88]	; (8016cd0 <vPortValidateInterruptPriority+0x78>)
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	7afa      	ldrb	r2, [r7, #11]
 8016c7a:	429a      	cmp	r2, r3
 8016c7c:	d20b      	bcs.n	8016c96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c82:	b672      	cpsid	i
 8016c84:	f383 8811 	msr	BASEPRI, r3
 8016c88:	f3bf 8f6f 	isb	sy
 8016c8c:	f3bf 8f4f 	dsb	sy
 8016c90:	b662      	cpsie	i
 8016c92:	607b      	str	r3, [r7, #4]
 8016c94:	e7fe      	b.n	8016c94 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c96:	4b0f      	ldr	r3, [pc, #60]	; (8016cd4 <vPortValidateInterruptPriority+0x7c>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016c9e:	4b0e      	ldr	r3, [pc, #56]	; (8016cd8 <vPortValidateInterruptPriority+0x80>)
 8016ca0:	681b      	ldr	r3, [r3, #0]
 8016ca2:	429a      	cmp	r2, r3
 8016ca4:	d90b      	bls.n	8016cbe <vPortValidateInterruptPriority+0x66>
 8016ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016caa:	b672      	cpsid	i
 8016cac:	f383 8811 	msr	BASEPRI, r3
 8016cb0:	f3bf 8f6f 	isb	sy
 8016cb4:	f3bf 8f4f 	dsb	sy
 8016cb8:	b662      	cpsie	i
 8016cba:	603b      	str	r3, [r7, #0]
 8016cbc:	e7fe      	b.n	8016cbc <vPortValidateInterruptPriority+0x64>
	}
 8016cbe:	bf00      	nop
 8016cc0:	3714      	adds	r7, #20
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc8:	4770      	bx	lr
 8016cca:	bf00      	nop
 8016ccc:	e000e3f0 	.word	0xe000e3f0
 8016cd0:	20001158 	.word	0x20001158
 8016cd4:	e000ed0c 	.word	0xe000ed0c
 8016cd8:	2000115c 	.word	0x2000115c

08016cdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b08a      	sub	sp, #40	; 0x28
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016ce8:	f7fe fc92 	bl	8015610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016cec:	4b5a      	ldr	r3, [pc, #360]	; (8016e58 <pvPortMalloc+0x17c>)
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d101      	bne.n	8016cf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016cf4:	f000 f916 	bl	8016f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016cf8:	4b58      	ldr	r3, [pc, #352]	; (8016e5c <pvPortMalloc+0x180>)
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	4013      	ands	r3, r2
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	f040 8090 	bne.w	8016e26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d01e      	beq.n	8016d4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016d0c:	2208      	movs	r2, #8
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	4413      	add	r3, r2
 8016d12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f003 0307 	and.w	r3, r3, #7
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d015      	beq.n	8016d4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	f023 0307 	bic.w	r3, r3, #7
 8016d24:	3308      	adds	r3, #8
 8016d26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	f003 0307 	and.w	r3, r3, #7
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d00b      	beq.n	8016d4a <pvPortMalloc+0x6e>
 8016d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d36:	b672      	cpsid	i
 8016d38:	f383 8811 	msr	BASEPRI, r3
 8016d3c:	f3bf 8f6f 	isb	sy
 8016d40:	f3bf 8f4f 	dsb	sy
 8016d44:	b662      	cpsie	i
 8016d46:	617b      	str	r3, [r7, #20]
 8016d48:	e7fe      	b.n	8016d48 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d06a      	beq.n	8016e26 <pvPortMalloc+0x14a>
 8016d50:	4b43      	ldr	r3, [pc, #268]	; (8016e60 <pvPortMalloc+0x184>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	687a      	ldr	r2, [r7, #4]
 8016d56:	429a      	cmp	r2, r3
 8016d58:	d865      	bhi.n	8016e26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d5a:	4b42      	ldr	r3, [pc, #264]	; (8016e64 <pvPortMalloc+0x188>)
 8016d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d5e:	4b41      	ldr	r3, [pc, #260]	; (8016e64 <pvPortMalloc+0x188>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d64:	e004      	b.n	8016d70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d72:	685b      	ldr	r3, [r3, #4]
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	429a      	cmp	r2, r3
 8016d78:	d903      	bls.n	8016d82 <pvPortMalloc+0xa6>
 8016d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d1f1      	bne.n	8016d66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d82:	4b35      	ldr	r3, [pc, #212]	; (8016e58 <pvPortMalloc+0x17c>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d04c      	beq.n	8016e26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d8c:	6a3b      	ldr	r3, [r7, #32]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	2208      	movs	r2, #8
 8016d92:	4413      	add	r3, r2
 8016d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d98:	681a      	ldr	r2, [r3, #0]
 8016d9a:	6a3b      	ldr	r3, [r7, #32]
 8016d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da0:	685a      	ldr	r2, [r3, #4]
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	1ad2      	subs	r2, r2, r3
 8016da6:	2308      	movs	r3, #8
 8016da8:	005b      	lsls	r3, r3, #1
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d920      	bls.n	8016df0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	4413      	add	r3, r2
 8016db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016db6:	69bb      	ldr	r3, [r7, #24]
 8016db8:	f003 0307 	and.w	r3, r3, #7
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d00b      	beq.n	8016dd8 <pvPortMalloc+0xfc>
 8016dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dc4:	b672      	cpsid	i
 8016dc6:	f383 8811 	msr	BASEPRI, r3
 8016dca:	f3bf 8f6f 	isb	sy
 8016dce:	f3bf 8f4f 	dsb	sy
 8016dd2:	b662      	cpsie	i
 8016dd4:	613b      	str	r3, [r7, #16]
 8016dd6:	e7fe      	b.n	8016dd6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dda:	685a      	ldr	r2, [r3, #4]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	1ad2      	subs	r2, r2, r3
 8016de0:	69bb      	ldr	r3, [r7, #24]
 8016de2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de6:	687a      	ldr	r2, [r7, #4]
 8016de8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016dea:	69b8      	ldr	r0, [r7, #24]
 8016dec:	f000 f8fc 	bl	8016fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016df0:	4b1b      	ldr	r3, [pc, #108]	; (8016e60 <pvPortMalloc+0x184>)
 8016df2:	681a      	ldr	r2, [r3, #0]
 8016df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	1ad3      	subs	r3, r2, r3
 8016dfa:	4a19      	ldr	r2, [pc, #100]	; (8016e60 <pvPortMalloc+0x184>)
 8016dfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016dfe:	4b18      	ldr	r3, [pc, #96]	; (8016e60 <pvPortMalloc+0x184>)
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	4b19      	ldr	r3, [pc, #100]	; (8016e68 <pvPortMalloc+0x18c>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	429a      	cmp	r2, r3
 8016e08:	d203      	bcs.n	8016e12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016e0a:	4b15      	ldr	r3, [pc, #84]	; (8016e60 <pvPortMalloc+0x184>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	4a16      	ldr	r2, [pc, #88]	; (8016e68 <pvPortMalloc+0x18c>)
 8016e10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e14:	685a      	ldr	r2, [r3, #4]
 8016e16:	4b11      	ldr	r3, [pc, #68]	; (8016e5c <pvPortMalloc+0x180>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	431a      	orrs	r2, r3
 8016e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e22:	2200      	movs	r2, #0
 8016e24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016e26:	f7fe fc01 	bl	801562c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e2a:	69fb      	ldr	r3, [r7, #28]
 8016e2c:	f003 0307 	and.w	r3, r3, #7
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d00b      	beq.n	8016e4c <pvPortMalloc+0x170>
 8016e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e38:	b672      	cpsid	i
 8016e3a:	f383 8811 	msr	BASEPRI, r3
 8016e3e:	f3bf 8f6f 	isb	sy
 8016e42:	f3bf 8f4f 	dsb	sy
 8016e46:	b662      	cpsie	i
 8016e48:	60fb      	str	r3, [r7, #12]
 8016e4a:	e7fe      	b.n	8016e4a <pvPortMalloc+0x16e>
	return pvReturn;
 8016e4c:	69fb      	ldr	r3, [r7, #28]
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3728      	adds	r7, #40	; 0x28
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	20008968 	.word	0x20008968
 8016e5c:	20008974 	.word	0x20008974
 8016e60:	2000896c 	.word	0x2000896c
 8016e64:	20008960 	.word	0x20008960
 8016e68:	20008970 	.word	0x20008970

08016e6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b086      	sub	sp, #24
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d04a      	beq.n	8016f14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e7e:	2308      	movs	r3, #8
 8016e80:	425b      	negs	r3, r3
 8016e82:	697a      	ldr	r2, [r7, #20]
 8016e84:	4413      	add	r3, r2
 8016e86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	685a      	ldr	r2, [r3, #4]
 8016e90:	4b22      	ldr	r3, [pc, #136]	; (8016f1c <vPortFree+0xb0>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	4013      	ands	r3, r2
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d10b      	bne.n	8016eb2 <vPortFree+0x46>
 8016e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e9e:	b672      	cpsid	i
 8016ea0:	f383 8811 	msr	BASEPRI, r3
 8016ea4:	f3bf 8f6f 	isb	sy
 8016ea8:	f3bf 8f4f 	dsb	sy
 8016eac:	b662      	cpsie	i
 8016eae:	60fb      	str	r3, [r7, #12]
 8016eb0:	e7fe      	b.n	8016eb0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d00b      	beq.n	8016ed2 <vPortFree+0x66>
 8016eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ebe:	b672      	cpsid	i
 8016ec0:	f383 8811 	msr	BASEPRI, r3
 8016ec4:	f3bf 8f6f 	isb	sy
 8016ec8:	f3bf 8f4f 	dsb	sy
 8016ecc:	b662      	cpsie	i
 8016ece:	60bb      	str	r3, [r7, #8]
 8016ed0:	e7fe      	b.n	8016ed0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016ed2:	693b      	ldr	r3, [r7, #16]
 8016ed4:	685a      	ldr	r2, [r3, #4]
 8016ed6:	4b11      	ldr	r3, [pc, #68]	; (8016f1c <vPortFree+0xb0>)
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	4013      	ands	r3, r2
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d019      	beq.n	8016f14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ee0:	693b      	ldr	r3, [r7, #16]
 8016ee2:	681b      	ldr	r3, [r3, #0]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d115      	bne.n	8016f14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	685a      	ldr	r2, [r3, #4]
 8016eec:	4b0b      	ldr	r3, [pc, #44]	; (8016f1c <vPortFree+0xb0>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	43db      	mvns	r3, r3
 8016ef2:	401a      	ands	r2, r3
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ef8:	f7fe fb8a 	bl	8015610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	685a      	ldr	r2, [r3, #4]
 8016f00:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <vPortFree+0xb4>)
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	4413      	add	r3, r2
 8016f06:	4a06      	ldr	r2, [pc, #24]	; (8016f20 <vPortFree+0xb4>)
 8016f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016f0a:	6938      	ldr	r0, [r7, #16]
 8016f0c:	f000 f86c 	bl	8016fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016f10:	f7fe fb8c 	bl	801562c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016f14:	bf00      	nop
 8016f16:	3718      	adds	r7, #24
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	20008974 	.word	0x20008974
 8016f20:	2000896c 	.word	0x2000896c

08016f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016f24:	b480      	push	{r7}
 8016f26:	b085      	sub	sp, #20
 8016f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016f2a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8016f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016f30:	4b27      	ldr	r3, [pc, #156]	; (8016fd0 <prvHeapInit+0xac>)
 8016f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f003 0307 	and.w	r3, r3, #7
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d00c      	beq.n	8016f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	3307      	adds	r3, #7
 8016f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	f023 0307 	bic.w	r3, r3, #7
 8016f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f4c:	68ba      	ldr	r2, [r7, #8]
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	1ad3      	subs	r3, r2, r3
 8016f52:	4a1f      	ldr	r2, [pc, #124]	; (8016fd0 <prvHeapInit+0xac>)
 8016f54:	4413      	add	r3, r2
 8016f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f5c:	4a1d      	ldr	r2, [pc, #116]	; (8016fd4 <prvHeapInit+0xb0>)
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f62:	4b1c      	ldr	r3, [pc, #112]	; (8016fd4 <prvHeapInit+0xb0>)
 8016f64:	2200      	movs	r2, #0
 8016f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	68ba      	ldr	r2, [r7, #8]
 8016f6c:	4413      	add	r3, r2
 8016f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f70:	2208      	movs	r2, #8
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	1a9b      	subs	r3, r3, r2
 8016f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	f023 0307 	bic.w	r3, r3, #7
 8016f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f80:	68fb      	ldr	r3, [r7, #12]
 8016f82:	4a15      	ldr	r2, [pc, #84]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f86:	4b14      	ldr	r3, [pc, #80]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f8e:	4b12      	ldr	r3, [pc, #72]	; (8016fd8 <prvHeapInit+0xb4>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2200      	movs	r2, #0
 8016f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	68fa      	ldr	r2, [r7, #12]
 8016f9e:	1ad2      	subs	r2, r2, r3
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016fa4:	4b0c      	ldr	r3, [pc, #48]	; (8016fd8 <prvHeapInit+0xb4>)
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	685b      	ldr	r3, [r3, #4]
 8016fb0:	4a0a      	ldr	r2, [pc, #40]	; (8016fdc <prvHeapInit+0xb8>)
 8016fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	685b      	ldr	r3, [r3, #4]
 8016fb8:	4a09      	ldr	r2, [pc, #36]	; (8016fe0 <prvHeapInit+0xbc>)
 8016fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016fbc:	4b09      	ldr	r3, [pc, #36]	; (8016fe4 <prvHeapInit+0xc0>)
 8016fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016fc2:	601a      	str	r2, [r3, #0]
}
 8016fc4:	bf00      	nop
 8016fc6:	3714      	adds	r7, #20
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fce:	4770      	bx	lr
 8016fd0:	20001160 	.word	0x20001160
 8016fd4:	20008960 	.word	0x20008960
 8016fd8:	20008968 	.word	0x20008968
 8016fdc:	20008970 	.word	0x20008970
 8016fe0:	2000896c 	.word	0x2000896c
 8016fe4:	20008974 	.word	0x20008974

08016fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016fe8:	b480      	push	{r7}
 8016fea:	b085      	sub	sp, #20
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ff0:	4b28      	ldr	r3, [pc, #160]	; (8017094 <prvInsertBlockIntoFreeList+0xac>)
 8016ff2:	60fb      	str	r3, [r7, #12]
 8016ff4:	e002      	b.n	8016ffc <prvInsertBlockIntoFreeList+0x14>
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	60fb      	str	r3, [r7, #12]
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	687a      	ldr	r2, [r7, #4]
 8017002:	429a      	cmp	r2, r3
 8017004:	d8f7      	bhi.n	8016ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	68ba      	ldr	r2, [r7, #8]
 8017010:	4413      	add	r3, r2
 8017012:	687a      	ldr	r2, [r7, #4]
 8017014:	429a      	cmp	r2, r3
 8017016:	d108      	bne.n	801702a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	685a      	ldr	r2, [r3, #4]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	441a      	add	r2, r3
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	685b      	ldr	r3, [r3, #4]
 8017032:	68ba      	ldr	r2, [r7, #8]
 8017034:	441a      	add	r2, r3
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	429a      	cmp	r2, r3
 801703c:	d118      	bne.n	8017070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681a      	ldr	r2, [r3, #0]
 8017042:	4b15      	ldr	r3, [pc, #84]	; (8017098 <prvInsertBlockIntoFreeList+0xb0>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	429a      	cmp	r2, r3
 8017048:	d00d      	beq.n	8017066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	685a      	ldr	r2, [r3, #4]
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	685b      	ldr	r3, [r3, #4]
 8017054:	441a      	add	r2, r3
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	681a      	ldr	r2, [r3, #0]
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	601a      	str	r2, [r3, #0]
 8017064:	e008      	b.n	8017078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017066:	4b0c      	ldr	r3, [pc, #48]	; (8017098 <prvInsertBlockIntoFreeList+0xb0>)
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	601a      	str	r2, [r3, #0]
 801706e:	e003      	b.n	8017078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	681a      	ldr	r2, [r3, #0]
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	429a      	cmp	r2, r3
 801707e:	d002      	beq.n	8017086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017086:	bf00      	nop
 8017088:	3714      	adds	r7, #20
 801708a:	46bd      	mov	sp, r7
 801708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017090:	4770      	bx	lr
 8017092:	bf00      	nop
 8017094:	20008960 	.word	0x20008960
 8017098:	20008968 	.word	0x20008968

0801709c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80170a0:	2200      	movs	r2, #0
 80170a2:	4912      	ldr	r1, [pc, #72]	; (80170ec <MX_USB_DEVICE_Init+0x50>)
 80170a4:	4812      	ldr	r0, [pc, #72]	; (80170f0 <MX_USB_DEVICE_Init+0x54>)
 80170a6:	f7f7 ff77 	bl	800ef98 <USBD_Init>
 80170aa:	4603      	mov	r3, r0
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d001      	beq.n	80170b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80170b0:	f7ed f97c 	bl	80043ac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80170b4:	490f      	ldr	r1, [pc, #60]	; (80170f4 <MX_USB_DEVICE_Init+0x58>)
 80170b6:	480e      	ldr	r0, [pc, #56]	; (80170f0 <MX_USB_DEVICE_Init+0x54>)
 80170b8:	f7f7 ffa4 	bl	800f004 <USBD_RegisterClass>
 80170bc:	4603      	mov	r3, r0
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d001      	beq.n	80170c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80170c2:	f7ed f973 	bl	80043ac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80170c6:	490c      	ldr	r1, [pc, #48]	; (80170f8 <MX_USB_DEVICE_Init+0x5c>)
 80170c8:	4809      	ldr	r0, [pc, #36]	; (80170f0 <MX_USB_DEVICE_Init+0x54>)
 80170ca:	f7f7 fef9 	bl	800eec0 <USBD_CDC_RegisterInterface>
 80170ce:	4603      	mov	r3, r0
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	d001      	beq.n	80170d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80170d4:	f7ed f96a 	bl	80043ac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80170d8:	4805      	ldr	r0, [pc, #20]	; (80170f0 <MX_USB_DEVICE_Init+0x54>)
 80170da:	f7f7 ffb4 	bl	800f046 <USBD_Start>
 80170de:	4603      	mov	r3, r0
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	d001      	beq.n	80170e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80170e4:	f7ed f962 	bl	80043ac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80170e8:	bf00      	nop
 80170ea:	bd80      	pop	{r7, pc}
 80170ec:	20000134 	.word	0x20000134
 80170f0:	20027668 	.word	0x20027668
 80170f4:	20000018 	.word	0x20000018
 80170f8:	20000120 	.word	0x20000120

080170fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017100:	2200      	movs	r2, #0
 8017102:	4905      	ldr	r1, [pc, #20]	; (8017118 <CDC_Init_FS+0x1c>)
 8017104:	4805      	ldr	r0, [pc, #20]	; (801711c <CDC_Init_FS+0x20>)
 8017106:	f7f7 fef0 	bl	800eeea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801710a:	4905      	ldr	r1, [pc, #20]	; (8017120 <CDC_Init_FS+0x24>)
 801710c:	4803      	ldr	r0, [pc, #12]	; (801711c <CDC_Init_FS+0x20>)
 801710e:	f7f7 ff05 	bl	800ef1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017112:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017114:	4618      	mov	r0, r3
 8017116:	bd80      	pop	{r7, pc}
 8017118:	20028138 	.word	0x20028138
 801711c:	20027668 	.word	0x20027668
 8017120:	20027938 	.word	0x20027938

08017124 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017124:	b480      	push	{r7}
 8017126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017128:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801712a:	4618      	mov	r0, r3
 801712c:	46bd      	mov	sp, r7
 801712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017132:	4770      	bx	lr

08017134 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017134:	b480      	push	{r7}
 8017136:	b083      	sub	sp, #12
 8017138:	af00      	add	r7, sp, #0
 801713a:	4603      	mov	r3, r0
 801713c:	6039      	str	r1, [r7, #0]
 801713e:	71fb      	strb	r3, [r7, #7]
 8017140:	4613      	mov	r3, r2
 8017142:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017144:	79fb      	ldrb	r3, [r7, #7]
 8017146:	2b23      	cmp	r3, #35	; 0x23
 8017148:	d84a      	bhi.n	80171e0 <CDC_Control_FS+0xac>
 801714a:	a201      	add	r2, pc, #4	; (adr r2, 8017150 <CDC_Control_FS+0x1c>)
 801714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017150:	080171e1 	.word	0x080171e1
 8017154:	080171e1 	.word	0x080171e1
 8017158:	080171e1 	.word	0x080171e1
 801715c:	080171e1 	.word	0x080171e1
 8017160:	080171e1 	.word	0x080171e1
 8017164:	080171e1 	.word	0x080171e1
 8017168:	080171e1 	.word	0x080171e1
 801716c:	080171e1 	.word	0x080171e1
 8017170:	080171e1 	.word	0x080171e1
 8017174:	080171e1 	.word	0x080171e1
 8017178:	080171e1 	.word	0x080171e1
 801717c:	080171e1 	.word	0x080171e1
 8017180:	080171e1 	.word	0x080171e1
 8017184:	080171e1 	.word	0x080171e1
 8017188:	080171e1 	.word	0x080171e1
 801718c:	080171e1 	.word	0x080171e1
 8017190:	080171e1 	.word	0x080171e1
 8017194:	080171e1 	.word	0x080171e1
 8017198:	080171e1 	.word	0x080171e1
 801719c:	080171e1 	.word	0x080171e1
 80171a0:	080171e1 	.word	0x080171e1
 80171a4:	080171e1 	.word	0x080171e1
 80171a8:	080171e1 	.word	0x080171e1
 80171ac:	080171e1 	.word	0x080171e1
 80171b0:	080171e1 	.word	0x080171e1
 80171b4:	080171e1 	.word	0x080171e1
 80171b8:	080171e1 	.word	0x080171e1
 80171bc:	080171e1 	.word	0x080171e1
 80171c0:	080171e1 	.word	0x080171e1
 80171c4:	080171e1 	.word	0x080171e1
 80171c8:	080171e1 	.word	0x080171e1
 80171cc:	080171e1 	.word	0x080171e1
 80171d0:	080171e1 	.word	0x080171e1
 80171d4:	080171e1 	.word	0x080171e1
 80171d8:	080171e1 	.word	0x080171e1
 80171dc:	080171e1 	.word	0x080171e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80171e0:	bf00      	nop
  }

  return (USBD_OK);
 80171e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	370c      	adds	r7, #12
 80171e8:	46bd      	mov	sp, r7
 80171ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ee:	4770      	bx	lr

080171f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b082      	sub	sp, #8
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]
 80171f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if(osMutexAcquire(usb_data_mutex, 10)){
 80171fa:	4b10      	ldr	r3, [pc, #64]	; (801723c <CDC_Receive_FS+0x4c>)
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	210a      	movs	r1, #10
 8017200:	4618      	mov	r0, r3
 8017202:	f7fc f9c3 	bl	801358c <osMutexAcquire>
 8017206:	4603      	mov	r3, r0
 8017208:	2b00      	cmp	r3, #0
 801720a:	d00b      	beq.n	8017224 <CDC_Receive_FS+0x34>
		memcpy(Buf, usb_data_buffer, *Len);
 801720c:	683b      	ldr	r3, [r7, #0]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	461a      	mov	r2, r3
 8017212:	490b      	ldr	r1, [pc, #44]	; (8017240 <CDC_Receive_FS+0x50>)
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f000 fcd5 	bl	8017bc4 <memcpy>
		osMutexRelease(usb_data_mutex);
 801721a:	4b08      	ldr	r3, [pc, #32]	; (801723c <CDC_Receive_FS+0x4c>)
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	4618      	mov	r0, r3
 8017220:	f7fc fa12 	bl	8013648 <osMutexRelease>
	}



  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017224:	6879      	ldr	r1, [r7, #4]
 8017226:	4807      	ldr	r0, [pc, #28]	; (8017244 <CDC_Receive_FS+0x54>)
 8017228:	f7f7 fe78 	bl	800ef1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801722c:	4805      	ldr	r0, [pc, #20]	; (8017244 <CDC_Receive_FS+0x54>)
 801722e:	f7f7 fe89 	bl	800ef44 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017232:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017234:	4618      	mov	r0, r3
 8017236:	3708      	adds	r7, #8
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	20008ad0 	.word	0x20008ad0
 8017240:	200002c8 	.word	0x200002c8
 8017244:	20027668 	.word	0x20027668

08017248 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017248:	b480      	push	{r7}
 801724a:	b087      	sub	sp, #28
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	4613      	mov	r3, r2
 8017254:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017256:	2300      	movs	r3, #0
 8017258:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801725a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801725e:	4618      	mov	r0, r3
 8017260:	371c      	adds	r7, #28
 8017262:	46bd      	mov	sp, r7
 8017264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017268:	4770      	bx	lr
	...

0801726c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	4603      	mov	r3, r0
 8017274:	6039      	str	r1, [r7, #0]
 8017276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	2212      	movs	r2, #18
 801727c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801727e:	4b03      	ldr	r3, [pc, #12]	; (801728c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017280:	4618      	mov	r0, r3
 8017282:	370c      	adds	r7, #12
 8017284:	46bd      	mov	sp, r7
 8017286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801728a:	4770      	bx	lr
 801728c:	20000154 	.word	0x20000154

08017290 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017290:	b480      	push	{r7}
 8017292:	b083      	sub	sp, #12
 8017294:	af00      	add	r7, sp, #0
 8017296:	4603      	mov	r3, r0
 8017298:	6039      	str	r1, [r7, #0]
 801729a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	2204      	movs	r2, #4
 80172a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80172a2:	4b03      	ldr	r3, [pc, #12]	; (80172b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	370c      	adds	r7, #12
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr
 80172b0:	20000174 	.word	0x20000174

080172b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	4603      	mov	r3, r0
 80172bc:	6039      	str	r1, [r7, #0]
 80172be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80172c0:	79fb      	ldrb	r3, [r7, #7]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d105      	bne.n	80172d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80172c6:	683a      	ldr	r2, [r7, #0]
 80172c8:	4907      	ldr	r1, [pc, #28]	; (80172e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80172ca:	4808      	ldr	r0, [pc, #32]	; (80172ec <USBD_FS_ProductStrDescriptor+0x38>)
 80172cc:	f7f8 feb3 	bl	8010036 <USBD_GetString>
 80172d0:	e004      	b.n	80172dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80172d2:	683a      	ldr	r2, [r7, #0]
 80172d4:	4904      	ldr	r1, [pc, #16]	; (80172e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80172d6:	4805      	ldr	r0, [pc, #20]	; (80172ec <USBD_FS_ProductStrDescriptor+0x38>)
 80172d8:	f7f8 fead 	bl	8010036 <USBD_GetString>
  }
  return USBD_StrDesc;
 80172dc:	4b02      	ldr	r3, [pc, #8]	; (80172e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80172de:	4618      	mov	r0, r3
 80172e0:	3708      	adds	r7, #8
 80172e2:	46bd      	mov	sp, r7
 80172e4:	bd80      	pop	{r7, pc}
 80172e6:	bf00      	nop
 80172e8:	20028938 	.word	0x20028938
 80172ec:	0801aaec 	.word	0x0801aaec

080172f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	4603      	mov	r3, r0
 80172f8:	6039      	str	r1, [r7, #0]
 80172fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80172fc:	683a      	ldr	r2, [r7, #0]
 80172fe:	4904      	ldr	r1, [pc, #16]	; (8017310 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017300:	4804      	ldr	r0, [pc, #16]	; (8017314 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017302:	f7f8 fe98 	bl	8010036 <USBD_GetString>
  return USBD_StrDesc;
 8017306:	4b02      	ldr	r3, [pc, #8]	; (8017310 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017308:	4618      	mov	r0, r3
 801730a:	3708      	adds	r7, #8
 801730c:	46bd      	mov	sp, r7
 801730e:	bd80      	pop	{r7, pc}
 8017310:	20028938 	.word	0x20028938
 8017314:	0801ab04 	.word	0x0801ab04

08017318 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	4603      	mov	r3, r0
 8017320:	6039      	str	r1, [r7, #0]
 8017322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017324:	683b      	ldr	r3, [r7, #0]
 8017326:	221a      	movs	r2, #26
 8017328:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801732a:	f000 f855 	bl	80173d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801732e:	4b02      	ldr	r3, [pc, #8]	; (8017338 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017330:	4618      	mov	r0, r3
 8017332:	3708      	adds	r7, #8
 8017334:	46bd      	mov	sp, r7
 8017336:	bd80      	pop	{r7, pc}
 8017338:	20000178 	.word	0x20000178

0801733c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b082      	sub	sp, #8
 8017340:	af00      	add	r7, sp, #0
 8017342:	4603      	mov	r3, r0
 8017344:	6039      	str	r1, [r7, #0]
 8017346:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017348:	79fb      	ldrb	r3, [r7, #7]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d105      	bne.n	801735a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801734e:	683a      	ldr	r2, [r7, #0]
 8017350:	4907      	ldr	r1, [pc, #28]	; (8017370 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017352:	4808      	ldr	r0, [pc, #32]	; (8017374 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017354:	f7f8 fe6f 	bl	8010036 <USBD_GetString>
 8017358:	e004      	b.n	8017364 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801735a:	683a      	ldr	r2, [r7, #0]
 801735c:	4904      	ldr	r1, [pc, #16]	; (8017370 <USBD_FS_ConfigStrDescriptor+0x34>)
 801735e:	4805      	ldr	r0, [pc, #20]	; (8017374 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017360:	f7f8 fe69 	bl	8010036 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017364:	4b02      	ldr	r3, [pc, #8]	; (8017370 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017366:	4618      	mov	r0, r3
 8017368:	3708      	adds	r7, #8
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	20028938 	.word	0x20028938
 8017374:	0801ab18 	.word	0x0801ab18

08017378 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
 801737e:	4603      	mov	r3, r0
 8017380:	6039      	str	r1, [r7, #0]
 8017382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017384:	79fb      	ldrb	r3, [r7, #7]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d105      	bne.n	8017396 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801738a:	683a      	ldr	r2, [r7, #0]
 801738c:	4907      	ldr	r1, [pc, #28]	; (80173ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801738e:	4808      	ldr	r0, [pc, #32]	; (80173b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017390:	f7f8 fe51 	bl	8010036 <USBD_GetString>
 8017394:	e004      	b.n	80173a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017396:	683a      	ldr	r2, [r7, #0]
 8017398:	4904      	ldr	r1, [pc, #16]	; (80173ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 801739a:	4805      	ldr	r0, [pc, #20]	; (80173b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801739c:	f7f8 fe4b 	bl	8010036 <USBD_GetString>
  }
  return USBD_StrDesc;
 80173a0:	4b02      	ldr	r3, [pc, #8]	; (80173ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3708      	adds	r7, #8
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}
 80173aa:	bf00      	nop
 80173ac:	20028938 	.word	0x20028938
 80173b0:	0801ab24 	.word	0x0801ab24

080173b4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	4603      	mov	r3, r0
 80173bc:	6039      	str	r1, [r7, #0]
 80173be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	220c      	movs	r2, #12
 80173c4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80173c6:	4b03      	ldr	r3, [pc, #12]	; (80173d4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	370c      	adds	r7, #12
 80173cc:	46bd      	mov	sp, r7
 80173ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d2:	4770      	bx	lr
 80173d4:	20000168 	.word	0x20000168

080173d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b084      	sub	sp, #16
 80173dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80173de:	4b0f      	ldr	r3, [pc, #60]	; (801741c <Get_SerialNum+0x44>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80173e4:	4b0e      	ldr	r3, [pc, #56]	; (8017420 <Get_SerialNum+0x48>)
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80173ea:	4b0e      	ldr	r3, [pc, #56]	; (8017424 <Get_SerialNum+0x4c>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80173f0:	68fa      	ldr	r2, [r7, #12]
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	4413      	add	r3, r2
 80173f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d009      	beq.n	8017412 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80173fe:	2208      	movs	r2, #8
 8017400:	4909      	ldr	r1, [pc, #36]	; (8017428 <Get_SerialNum+0x50>)
 8017402:	68f8      	ldr	r0, [r7, #12]
 8017404:	f000 f814 	bl	8017430 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017408:	2204      	movs	r2, #4
 801740a:	4908      	ldr	r1, [pc, #32]	; (801742c <Get_SerialNum+0x54>)
 801740c:	68b8      	ldr	r0, [r7, #8]
 801740e:	f000 f80f 	bl	8017430 <IntToUnicode>
  }
}
 8017412:	bf00      	nop
 8017414:	3710      	adds	r7, #16
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	1ff0f420 	.word	0x1ff0f420
 8017420:	1ff0f424 	.word	0x1ff0f424
 8017424:	1ff0f428 	.word	0x1ff0f428
 8017428:	2000017a 	.word	0x2000017a
 801742c:	2000018a 	.word	0x2000018a

08017430 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017430:	b480      	push	{r7}
 8017432:	b087      	sub	sp, #28
 8017434:	af00      	add	r7, sp, #0
 8017436:	60f8      	str	r0, [r7, #12]
 8017438:	60b9      	str	r1, [r7, #8]
 801743a:	4613      	mov	r3, r2
 801743c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801743e:	2300      	movs	r3, #0
 8017440:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017442:	2300      	movs	r3, #0
 8017444:	75fb      	strb	r3, [r7, #23]
 8017446:	e027      	b.n	8017498 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	0f1b      	lsrs	r3, r3, #28
 801744c:	2b09      	cmp	r3, #9
 801744e:	d80b      	bhi.n	8017468 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	0f1b      	lsrs	r3, r3, #28
 8017454:	b2da      	uxtb	r2, r3
 8017456:	7dfb      	ldrb	r3, [r7, #23]
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	4619      	mov	r1, r3
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	440b      	add	r3, r1
 8017460:	3230      	adds	r2, #48	; 0x30
 8017462:	b2d2      	uxtb	r2, r2
 8017464:	701a      	strb	r2, [r3, #0]
 8017466:	e00a      	b.n	801747e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	0f1b      	lsrs	r3, r3, #28
 801746c:	b2da      	uxtb	r2, r3
 801746e:	7dfb      	ldrb	r3, [r7, #23]
 8017470:	005b      	lsls	r3, r3, #1
 8017472:	4619      	mov	r1, r3
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	440b      	add	r3, r1
 8017478:	3237      	adds	r2, #55	; 0x37
 801747a:	b2d2      	uxtb	r2, r2
 801747c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	011b      	lsls	r3, r3, #4
 8017482:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017484:	7dfb      	ldrb	r3, [r7, #23]
 8017486:	005b      	lsls	r3, r3, #1
 8017488:	3301      	adds	r3, #1
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	4413      	add	r3, r2
 801748e:	2200      	movs	r2, #0
 8017490:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017492:	7dfb      	ldrb	r3, [r7, #23]
 8017494:	3301      	adds	r3, #1
 8017496:	75fb      	strb	r3, [r7, #23]
 8017498:	7dfa      	ldrb	r2, [r7, #23]
 801749a:	79fb      	ldrb	r3, [r7, #7]
 801749c:	429a      	cmp	r2, r3
 801749e:	d3d3      	bcc.n	8017448 <IntToUnicode+0x18>
  }
}
 80174a0:	bf00      	nop
 80174a2:	371c      	adds	r7, #28
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b08a      	sub	sp, #40	; 0x28
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174b4:	f107 0314 	add.w	r3, r7, #20
 80174b8:	2200      	movs	r2, #0
 80174ba:	601a      	str	r2, [r3, #0]
 80174bc:	605a      	str	r2, [r3, #4]
 80174be:	609a      	str	r2, [r3, #8]
 80174c0:	60da      	str	r2, [r3, #12]
 80174c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80174cc:	d13c      	bne.n	8017548 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80174ce:	4b20      	ldr	r3, [pc, #128]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 80174d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174d2:	4a1f      	ldr	r2, [pc, #124]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 80174d4:	f043 0301 	orr.w	r3, r3, #1
 80174d8:	6313      	str	r3, [r2, #48]	; 0x30
 80174da:	4b1d      	ldr	r3, [pc, #116]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 80174dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80174de:	f003 0301 	and.w	r3, r3, #1
 80174e2:	613b      	str	r3, [r7, #16]
 80174e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80174e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80174ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174ec:	2302      	movs	r3, #2
 80174ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174f0:	2300      	movs	r3, #0
 80174f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80174f4:	2303      	movs	r3, #3
 80174f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80174f8:	230a      	movs	r3, #10
 80174fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80174fc:	f107 0314 	add.w	r3, r7, #20
 8017500:	4619      	mov	r1, r3
 8017502:	4814      	ldr	r0, [pc, #80]	; (8017554 <HAL_PCD_MspInit+0xa8>)
 8017504:	f7ee ff32 	bl	800636c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017508:	4b11      	ldr	r3, [pc, #68]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 801750a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801750c:	4a10      	ldr	r2, [pc, #64]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 801750e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017512:	6353      	str	r3, [r2, #52]	; 0x34
 8017514:	4b0e      	ldr	r3, [pc, #56]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 8017516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801751c:	60fb      	str	r3, [r7, #12]
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	4b0b      	ldr	r3, [pc, #44]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 8017522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017524:	4a0a      	ldr	r2, [pc, #40]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 8017526:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801752a:	6453      	str	r3, [r2, #68]	; 0x44
 801752c:	4b08      	ldr	r3, [pc, #32]	; (8017550 <HAL_PCD_MspInit+0xa4>)
 801752e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017534:	60bb      	str	r3, [r7, #8]
 8017536:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017538:	2200      	movs	r2, #0
 801753a:	2105      	movs	r1, #5
 801753c:	2043      	movs	r0, #67	; 0x43
 801753e:	f7ee fb47 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017542:	2043      	movs	r0, #67	; 0x43
 8017544:	f7ee fb60 	bl	8005c08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017548:	bf00      	nop
 801754a:	3728      	adds	r7, #40	; 0x28
 801754c:	46bd      	mov	sp, r7
 801754e:	bd80      	pop	{r7, pc}
 8017550:	40023800 	.word	0x40023800
 8017554:	40020000 	.word	0x40020000

08017558 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017558:	b580      	push	{r7, lr}
 801755a:	b082      	sub	sp, #8
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801756c:	4619      	mov	r1, r3
 801756e:	4610      	mov	r0, r2
 8017570:	f7f7 fdb4 	bl	800f0dc <USBD_LL_SetupStage>
}
 8017574:	bf00      	nop
 8017576:	3708      	adds	r7, #8
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
 8017584:	460b      	mov	r3, r1
 8017586:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801758e:	78fa      	ldrb	r2, [r7, #3]
 8017590:	6879      	ldr	r1, [r7, #4]
 8017592:	4613      	mov	r3, r2
 8017594:	00db      	lsls	r3, r3, #3
 8017596:	1a9b      	subs	r3, r3, r2
 8017598:	009b      	lsls	r3, r3, #2
 801759a:	440b      	add	r3, r1
 801759c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80175a0:	681a      	ldr	r2, [r3, #0]
 80175a2:	78fb      	ldrb	r3, [r7, #3]
 80175a4:	4619      	mov	r1, r3
 80175a6:	f7f7 fdec 	bl	800f182 <USBD_LL_DataOutStage>
}
 80175aa:	bf00      	nop
 80175ac:	3708      	adds	r7, #8
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b082      	sub	sp, #8
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	6078      	str	r0, [r7, #4]
 80175ba:	460b      	mov	r3, r1
 80175bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 80175c4:	78fa      	ldrb	r2, [r7, #3]
 80175c6:	6879      	ldr	r1, [r7, #4]
 80175c8:	4613      	mov	r3, r2
 80175ca:	00db      	lsls	r3, r3, #3
 80175cc:	1a9b      	subs	r3, r3, r2
 80175ce:	009b      	lsls	r3, r3, #2
 80175d0:	440b      	add	r3, r1
 80175d2:	3348      	adds	r3, #72	; 0x48
 80175d4:	681a      	ldr	r2, [r3, #0]
 80175d6:	78fb      	ldrb	r3, [r7, #3]
 80175d8:	4619      	mov	r1, r3
 80175da:	f7f7 fe35 	bl	800f248 <USBD_LL_DataInStage>
}
 80175de:	bf00      	nop
 80175e0:	3708      	adds	r7, #8
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}

080175e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175e6:	b580      	push	{r7, lr}
 80175e8:	b082      	sub	sp, #8
 80175ea:	af00      	add	r7, sp, #0
 80175ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80175f4:	4618      	mov	r0, r3
 80175f6:	f7f7 ff39 	bl	800f46c <USBD_LL_SOF>
}
 80175fa:	bf00      	nop
 80175fc:	3708      	adds	r7, #8
 80175fe:	46bd      	mov	sp, r7
 8017600:	bd80      	pop	{r7, pc}

08017602 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8017602:	b580      	push	{r7, lr}
 8017604:	b084      	sub	sp, #16
 8017606:	af00      	add	r7, sp, #0
 8017608:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801760a:	2301      	movs	r3, #1
 801760c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	68db      	ldr	r3, [r3, #12]
 8017612:	2b00      	cmp	r3, #0
 8017614:	d102      	bne.n	801761c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017616:	2300      	movs	r3, #0
 8017618:	73fb      	strb	r3, [r7, #15]
 801761a:	e008      	b.n	801762e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	68db      	ldr	r3, [r3, #12]
 8017620:	2b02      	cmp	r3, #2
 8017622:	d102      	bne.n	801762a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017624:	2301      	movs	r3, #1
 8017626:	73fb      	strb	r3, [r7, #15]
 8017628:	e001      	b.n	801762e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801762a:	f7ec febf 	bl	80043ac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017634:	7bfa      	ldrb	r2, [r7, #15]
 8017636:	4611      	mov	r1, r2
 8017638:	4618      	mov	r0, r3
 801763a:	f7f7 fedc 	bl	800f3f6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017644:	4618      	mov	r0, r3
 8017646:	f7f7 fe95 	bl	800f374 <USBD_LL_Reset>
}
 801764a:	bf00      	nop
 801764c:	3710      	adds	r7, #16
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}
	...

08017654 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017662:	4618      	mov	r0, r3
 8017664:	f7f7 fed7 	bl	800f416 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	687a      	ldr	r2, [r7, #4]
 8017674:	6812      	ldr	r2, [r2, #0]
 8017676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801767a:	f043 0301 	orr.w	r3, r3, #1
 801767e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	6a1b      	ldr	r3, [r3, #32]
 8017684:	2b00      	cmp	r3, #0
 8017686:	d005      	beq.n	8017694 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017688:	4b04      	ldr	r3, [pc, #16]	; (801769c <HAL_PCD_SuspendCallback+0x48>)
 801768a:	691b      	ldr	r3, [r3, #16]
 801768c:	4a03      	ldr	r2, [pc, #12]	; (801769c <HAL_PCD_SuspendCallback+0x48>)
 801768e:	f043 0306 	orr.w	r3, r3, #6
 8017692:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017694:	bf00      	nop
 8017696:	3708      	adds	r7, #8
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	e000ed00 	.word	0xe000ed00

080176a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176ae:	4618      	mov	r0, r3
 80176b0:	f7f7 fec6 	bl	800f440 <USBD_LL_Resume>
}
 80176b4:	bf00      	nop
 80176b6:	3708      	adds	r7, #8
 80176b8:	46bd      	mov	sp, r7
 80176ba:	bd80      	pop	{r7, pc}

080176bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
 80176c4:	460b      	mov	r3, r1
 80176c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176ce:	78fa      	ldrb	r2, [r7, #3]
 80176d0:	4611      	mov	r1, r2
 80176d2:	4618      	mov	r0, r3
 80176d4:	f7f7 fef1 	bl	800f4ba <USBD_LL_IsoOUTIncomplete>
}
 80176d8:	bf00      	nop
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	460b      	mov	r3, r1
 80176ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80176f2:	78fa      	ldrb	r2, [r7, #3]
 80176f4:	4611      	mov	r1, r2
 80176f6:	4618      	mov	r0, r3
 80176f8:	f7f7 fed2 	bl	800f4a0 <USBD_LL_IsoINIncomplete>
}
 80176fc:	bf00      	nop
 80176fe:	3708      	adds	r7, #8
 8017700:	46bd      	mov	sp, r7
 8017702:	bd80      	pop	{r7, pc}

08017704 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b082      	sub	sp, #8
 8017708:	af00      	add	r7, sp, #0
 801770a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017712:	4618      	mov	r0, r3
 8017714:	f7f7 fede 	bl	800f4d4 <USBD_LL_DevConnected>
}
 8017718:	bf00      	nop
 801771a:	3708      	adds	r7, #8
 801771c:	46bd      	mov	sp, r7
 801771e:	bd80      	pop	{r7, pc}

08017720 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b082      	sub	sp, #8
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801772e:	4618      	mov	r0, r3
 8017730:	f7f7 fedb 	bl	800f4ea <USBD_LL_DevDisconnected>
}
 8017734:	bf00      	nop
 8017736:	3708      	adds	r7, #8
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801773c:	b580      	push	{r7, lr}
 801773e:	b082      	sub	sp, #8
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	781b      	ldrb	r3, [r3, #0]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d13c      	bne.n	80177c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801774c:	4a20      	ldr	r2, [pc, #128]	; (80177d0 <USBD_LL_Init+0x94>)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	4a1e      	ldr	r2, [pc, #120]	; (80177d0 <USBD_LL_Init+0x94>)
 8017758:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801775c:	4b1c      	ldr	r3, [pc, #112]	; (80177d0 <USBD_LL_Init+0x94>)
 801775e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017764:	4b1a      	ldr	r3, [pc, #104]	; (80177d0 <USBD_LL_Init+0x94>)
 8017766:	2206      	movs	r2, #6
 8017768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801776a:	4b19      	ldr	r3, [pc, #100]	; (80177d0 <USBD_LL_Init+0x94>)
 801776c:	2202      	movs	r2, #2
 801776e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017770:	4b17      	ldr	r3, [pc, #92]	; (80177d0 <USBD_LL_Init+0x94>)
 8017772:	2200      	movs	r2, #0
 8017774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017776:	4b16      	ldr	r3, [pc, #88]	; (80177d0 <USBD_LL_Init+0x94>)
 8017778:	2202      	movs	r2, #2
 801777a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801777c:	4b14      	ldr	r3, [pc, #80]	; (80177d0 <USBD_LL_Init+0x94>)
 801777e:	2200      	movs	r2, #0
 8017780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017782:	4b13      	ldr	r3, [pc, #76]	; (80177d0 <USBD_LL_Init+0x94>)
 8017784:	2200      	movs	r2, #0
 8017786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017788:	4b11      	ldr	r3, [pc, #68]	; (80177d0 <USBD_LL_Init+0x94>)
 801778a:	2200      	movs	r2, #0
 801778c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801778e:	4b10      	ldr	r3, [pc, #64]	; (80177d0 <USBD_LL_Init+0x94>)
 8017790:	2200      	movs	r2, #0
 8017792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017794:	4b0e      	ldr	r3, [pc, #56]	; (80177d0 <USBD_LL_Init+0x94>)
 8017796:	2200      	movs	r2, #0
 8017798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801779a:	480d      	ldr	r0, [pc, #52]	; (80177d0 <USBD_LL_Init+0x94>)
 801779c:	f7ee ffc3 	bl	8006726 <HAL_PCD_Init>
 80177a0:	4603      	mov	r3, r0
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d001      	beq.n	80177aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80177a6:	f7ec fe01 	bl	80043ac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80177aa:	2180      	movs	r1, #128	; 0x80
 80177ac:	4808      	ldr	r0, [pc, #32]	; (80177d0 <USBD_LL_Init+0x94>)
 80177ae:	f7f0 f944 	bl	8007a3a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80177b2:	2240      	movs	r2, #64	; 0x40
 80177b4:	2100      	movs	r1, #0
 80177b6:	4806      	ldr	r0, [pc, #24]	; (80177d0 <USBD_LL_Init+0x94>)
 80177b8:	f7f0 f8f8 	bl	80079ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80177bc:	2280      	movs	r2, #128	; 0x80
 80177be:	2101      	movs	r1, #1
 80177c0:	4803      	ldr	r0, [pc, #12]	; (80177d0 <USBD_LL_Init+0x94>)
 80177c2:	f7f0 f8f3 	bl	80079ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80177c6:	2300      	movs	r3, #0
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3708      	adds	r7, #8
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	20028b38 	.word	0x20028b38

080177d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177dc:	2300      	movs	r3, #0
 80177de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177e0:	2300      	movs	r3, #0
 80177e2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7ef f8bf 	bl	800696e <HAL_PCD_Start>
 80177f0:	4603      	mov	r3, r0
 80177f2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80177f4:	7bfb      	ldrb	r3, [r7, #15]
 80177f6:	4618      	mov	r0, r3
 80177f8:	f000 f97e 	bl	8017af8 <USBD_Get_USB_Status>
 80177fc:	4603      	mov	r3, r0
 80177fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017800:	7bbb      	ldrb	r3, [r7, #14]
}
 8017802:	4618      	mov	r0, r3
 8017804:	3710      	adds	r7, #16
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}

0801780a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801780a:	b580      	push	{r7, lr}
 801780c:	b084      	sub	sp, #16
 801780e:	af00      	add	r7, sp, #0
 8017810:	6078      	str	r0, [r7, #4]
 8017812:	4608      	mov	r0, r1
 8017814:	4611      	mov	r1, r2
 8017816:	461a      	mov	r2, r3
 8017818:	4603      	mov	r3, r0
 801781a:	70fb      	strb	r3, [r7, #3]
 801781c:	460b      	mov	r3, r1
 801781e:	70bb      	strb	r3, [r7, #2]
 8017820:	4613      	mov	r3, r2
 8017822:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017824:	2300      	movs	r3, #0
 8017826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017828:	2300      	movs	r3, #0
 801782a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017832:	78bb      	ldrb	r3, [r7, #2]
 8017834:	883a      	ldrh	r2, [r7, #0]
 8017836:	78f9      	ldrb	r1, [r7, #3]
 8017838:	f7ef fcbf 	bl	80071ba <HAL_PCD_EP_Open>
 801783c:	4603      	mov	r3, r0
 801783e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017840:	7bfb      	ldrb	r3, [r7, #15]
 8017842:	4618      	mov	r0, r3
 8017844:	f000 f958 	bl	8017af8 <USBD_Get_USB_Status>
 8017848:	4603      	mov	r3, r0
 801784a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801784c:	7bbb      	ldrb	r3, [r7, #14]
}
 801784e:	4618      	mov	r0, r3
 8017850:	3710      	adds	r7, #16
 8017852:	46bd      	mov	sp, r7
 8017854:	bd80      	pop	{r7, pc}

08017856 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017856:	b580      	push	{r7, lr}
 8017858:	b084      	sub	sp, #16
 801785a:	af00      	add	r7, sp, #0
 801785c:	6078      	str	r0, [r7, #4]
 801785e:	460b      	mov	r3, r1
 8017860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017862:	2300      	movs	r3, #0
 8017864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017866:	2300      	movs	r3, #0
 8017868:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017870:	78fa      	ldrb	r2, [r7, #3]
 8017872:	4611      	mov	r1, r2
 8017874:	4618      	mov	r0, r3
 8017876:	f7ef fd08 	bl	800728a <HAL_PCD_EP_Close>
 801787a:	4603      	mov	r3, r0
 801787c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801787e:	7bfb      	ldrb	r3, [r7, #15]
 8017880:	4618      	mov	r0, r3
 8017882:	f000 f939 	bl	8017af8 <USBD_Get_USB_Status>
 8017886:	4603      	mov	r3, r0
 8017888:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801788a:	7bbb      	ldrb	r3, [r7, #14]
}
 801788c:	4618      	mov	r0, r3
 801788e:	3710      	adds	r7, #16
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}

08017894 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017894:	b580      	push	{r7, lr}
 8017896:	b084      	sub	sp, #16
 8017898:	af00      	add	r7, sp, #0
 801789a:	6078      	str	r0, [r7, #4]
 801789c:	460b      	mov	r3, r1
 801789e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178a0:	2300      	movs	r3, #0
 80178a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178a4:	2300      	movs	r3, #0
 80178a6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80178ae:	78fa      	ldrb	r2, [r7, #3]
 80178b0:	4611      	mov	r1, r2
 80178b2:	4618      	mov	r0, r3
 80178b4:	f7ef fde0 	bl	8007478 <HAL_PCD_EP_SetStall>
 80178b8:	4603      	mov	r3, r0
 80178ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178bc:	7bfb      	ldrb	r3, [r7, #15]
 80178be:	4618      	mov	r0, r3
 80178c0:	f000 f91a 	bl	8017af8 <USBD_Get_USB_Status>
 80178c4:	4603      	mov	r3, r0
 80178c6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80178c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3710      	adds	r7, #16
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b084      	sub	sp, #16
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
 80178da:	460b      	mov	r3, r1
 80178dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178de:	2300      	movs	r3, #0
 80178e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178e2:	2300      	movs	r3, #0
 80178e4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80178ec:	78fa      	ldrb	r2, [r7, #3]
 80178ee:	4611      	mov	r1, r2
 80178f0:	4618      	mov	r0, r3
 80178f2:	f7ef fe25 	bl	8007540 <HAL_PCD_EP_ClrStall>
 80178f6:	4603      	mov	r3, r0
 80178f8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80178fa:	7bfb      	ldrb	r3, [r7, #15]
 80178fc:	4618      	mov	r0, r3
 80178fe:	f000 f8fb 	bl	8017af8 <USBD_Get_USB_Status>
 8017902:	4603      	mov	r3, r0
 8017904:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8017906:	7bbb      	ldrb	r3, [r7, #14]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3710      	adds	r7, #16
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	460b      	mov	r3, r1
 801791a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017922:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017928:	2b00      	cmp	r3, #0
 801792a:	da0b      	bge.n	8017944 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801792c:	78fb      	ldrb	r3, [r7, #3]
 801792e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017932:	68f9      	ldr	r1, [r7, #12]
 8017934:	4613      	mov	r3, r2
 8017936:	00db      	lsls	r3, r3, #3
 8017938:	1a9b      	subs	r3, r3, r2
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	440b      	add	r3, r1
 801793e:	333e      	adds	r3, #62	; 0x3e
 8017940:	781b      	ldrb	r3, [r3, #0]
 8017942:	e00b      	b.n	801795c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8017944:	78fb      	ldrb	r3, [r7, #3]
 8017946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801794a:	68f9      	ldr	r1, [r7, #12]
 801794c:	4613      	mov	r3, r2
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	1a9b      	subs	r3, r3, r2
 8017952:	009b      	lsls	r3, r3, #2
 8017954:	440b      	add	r3, r1
 8017956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801795a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801795c:	4618      	mov	r0, r3
 801795e:	3714      	adds	r7, #20
 8017960:	46bd      	mov	sp, r7
 8017962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017966:	4770      	bx	lr

08017968 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b084      	sub	sp, #16
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
 8017970:	460b      	mov	r3, r1
 8017972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017974:	2300      	movs	r3, #0
 8017976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017978:	2300      	movs	r3, #0
 801797a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017982:	78fa      	ldrb	r2, [r7, #3]
 8017984:	4611      	mov	r1, r2
 8017986:	4618      	mov	r0, r3
 8017988:	f7ef fbf2 	bl	8007170 <HAL_PCD_SetAddress>
 801798c:	4603      	mov	r3, r0
 801798e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8017990:	7bfb      	ldrb	r3, [r7, #15]
 8017992:	4618      	mov	r0, r3
 8017994:	f000 f8b0 	bl	8017af8 <USBD_Get_USB_Status>
 8017998:	4603      	mov	r3, r0
 801799a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801799c:	7bbb      	ldrb	r3, [r7, #14]
}
 801799e:	4618      	mov	r0, r3
 80179a0:	3710      	adds	r7, #16
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b086      	sub	sp, #24
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	60f8      	str	r0, [r7, #12]
 80179ae:	607a      	str	r2, [r7, #4]
 80179b0:	603b      	str	r3, [r7, #0]
 80179b2:	460b      	mov	r3, r1
 80179b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179b6:	2300      	movs	r3, #0
 80179b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179ba:	2300      	movs	r3, #0
 80179bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80179c4:	7af9      	ldrb	r1, [r7, #11]
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	687a      	ldr	r2, [r7, #4]
 80179ca:	f7ef fd0b 	bl	80073e4 <HAL_PCD_EP_Transmit>
 80179ce:	4603      	mov	r3, r0
 80179d0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80179d2:	7dfb      	ldrb	r3, [r7, #23]
 80179d4:	4618      	mov	r0, r3
 80179d6:	f000 f88f 	bl	8017af8 <USBD_Get_USB_Status>
 80179da:	4603      	mov	r3, r0
 80179dc:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80179de:	7dbb      	ldrb	r3, [r7, #22]
}
 80179e0:	4618      	mov	r0, r3
 80179e2:	3718      	adds	r7, #24
 80179e4:	46bd      	mov	sp, r7
 80179e6:	bd80      	pop	{r7, pc}

080179e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b086      	sub	sp, #24
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	60f8      	str	r0, [r7, #12]
 80179f0:	607a      	str	r2, [r7, #4]
 80179f2:	603b      	str	r3, [r7, #0]
 80179f4:	460b      	mov	r3, r1
 80179f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179f8:	2300      	movs	r3, #0
 80179fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179fc:	2300      	movs	r3, #0
 80179fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a06:	7af9      	ldrb	r1, [r7, #11]
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	687a      	ldr	r2, [r7, #4]
 8017a0c:	f7ef fc87 	bl	800731e <HAL_PCD_EP_Receive>
 8017a10:	4603      	mov	r3, r0
 8017a12:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017a14:	7dfb      	ldrb	r3, [r7, #23]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f000 f86e 	bl	8017af8 <USBD_Get_USB_Status>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8017a20:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3718      	adds	r7, #24
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}

08017a2a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a2a:	b580      	push	{r7, lr}
 8017a2c:	b082      	sub	sp, #8
 8017a2e:	af00      	add	r7, sp, #0
 8017a30:	6078      	str	r0, [r7, #4]
 8017a32:	460b      	mov	r3, r1
 8017a34:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017a3c:	78fa      	ldrb	r2, [r7, #3]
 8017a3e:	4611      	mov	r1, r2
 8017a40:	4618      	mov	r0, r3
 8017a42:	f7ef fcb7 	bl	80073b4 <HAL_PCD_EP_GetRxCount>
 8017a46:	4603      	mov	r3, r0
}
 8017a48:	4618      	mov	r0, r3
 8017a4a:	3708      	adds	r7, #8
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	460b      	mov	r3, r1
 8017a5a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017a5c:	78fb      	ldrb	r3, [r7, #3]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d002      	beq.n	8017a68 <HAL_PCDEx_LPM_Callback+0x18>
 8017a62:	2b01      	cmp	r3, #1
 8017a64:	d01f      	beq.n	8017aa6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8017a66:	e03b      	b.n	8017ae0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6a1b      	ldr	r3, [r3, #32]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d007      	beq.n	8017a80 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017a70:	f000 f83c 	bl	8017aec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017a74:	4b1c      	ldr	r3, [pc, #112]	; (8017ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a76:	691b      	ldr	r3, [r3, #16]
 8017a78:	4a1b      	ldr	r2, [pc, #108]	; (8017ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017a7a:	f023 0306 	bic.w	r3, r3, #6
 8017a7e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	687a      	ldr	r2, [r7, #4]
 8017a8c:	6812      	ldr	r2, [r2, #0]
 8017a8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017a92:	f023 0301 	bic.w	r3, r3, #1
 8017a96:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f7f7 fcce 	bl	800f440 <USBD_LL_Resume>
    break;
 8017aa4:	e01c      	b.n	8017ae0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	687a      	ldr	r2, [r7, #4]
 8017ab2:	6812      	ldr	r2, [r2, #0]
 8017ab4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017ab8:	f043 0301 	orr.w	r3, r3, #1
 8017abc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f7 fca6 	bl	800f416 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6a1b      	ldr	r3, [r3, #32]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d005      	beq.n	8017ade <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017ad2:	4b05      	ldr	r3, [pc, #20]	; (8017ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ad4:	691b      	ldr	r3, [r3, #16]
 8017ad6:	4a04      	ldr	r2, [pc, #16]	; (8017ae8 <HAL_PCDEx_LPM_Callback+0x98>)
 8017ad8:	f043 0306 	orr.w	r3, r3, #6
 8017adc:	6113      	str	r3, [r2, #16]
    break;   
 8017ade:	bf00      	nop
}
 8017ae0:	bf00      	nop
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	e000ed00 	.word	0xe000ed00

08017aec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8017af0:	f7ec f9e8 	bl	8003ec4 <SystemClock_Config>
}
 8017af4:	bf00      	nop
 8017af6:	bd80      	pop	{r7, pc}

08017af8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017af8:	b480      	push	{r7}
 8017afa:	b085      	sub	sp, #20
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	4603      	mov	r3, r0
 8017b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b02:	2300      	movs	r3, #0
 8017b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017b06:	79fb      	ldrb	r3, [r7, #7]
 8017b08:	2b03      	cmp	r3, #3
 8017b0a:	d817      	bhi.n	8017b3c <USBD_Get_USB_Status+0x44>
 8017b0c:	a201      	add	r2, pc, #4	; (adr r2, 8017b14 <USBD_Get_USB_Status+0x1c>)
 8017b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b12:	bf00      	nop
 8017b14:	08017b25 	.word	0x08017b25
 8017b18:	08017b2b 	.word	0x08017b2b
 8017b1c:	08017b31 	.word	0x08017b31
 8017b20:	08017b37 	.word	0x08017b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017b24:	2300      	movs	r3, #0
 8017b26:	73fb      	strb	r3, [r7, #15]
    break;
 8017b28:	e00b      	b.n	8017b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017b2a:	2303      	movs	r3, #3
 8017b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8017b2e:	e008      	b.n	8017b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017b30:	2301      	movs	r3, #1
 8017b32:	73fb      	strb	r3, [r7, #15]
    break;
 8017b34:	e005      	b.n	8017b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017b36:	2303      	movs	r3, #3
 8017b38:	73fb      	strb	r3, [r7, #15]
    break;
 8017b3a:	e002      	b.n	8017b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017b3c:	2303      	movs	r3, #3
 8017b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017b40:	bf00      	nop
  }
  return usb_status;
 8017b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b44:	4618      	mov	r0, r3
 8017b46:	3714      	adds	r7, #20
 8017b48:	46bd      	mov	sp, r7
 8017b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4e:	4770      	bx	lr

08017b50 <__errno>:
 8017b50:	4b01      	ldr	r3, [pc, #4]	; (8017b58 <__errno+0x8>)
 8017b52:	6818      	ldr	r0, [r3, #0]
 8017b54:	4770      	bx	lr
 8017b56:	bf00      	nop
 8017b58:	20000194 	.word	0x20000194

08017b5c <__libc_init_array>:
 8017b5c:	b570      	push	{r4, r5, r6, lr}
 8017b5e:	4e0d      	ldr	r6, [pc, #52]	; (8017b94 <__libc_init_array+0x38>)
 8017b60:	4c0d      	ldr	r4, [pc, #52]	; (8017b98 <__libc_init_array+0x3c>)
 8017b62:	1ba4      	subs	r4, r4, r6
 8017b64:	10a4      	asrs	r4, r4, #2
 8017b66:	2500      	movs	r5, #0
 8017b68:	42a5      	cmp	r5, r4
 8017b6a:	d109      	bne.n	8017b80 <__libc_init_array+0x24>
 8017b6c:	4e0b      	ldr	r6, [pc, #44]	; (8017b9c <__libc_init_array+0x40>)
 8017b6e:	4c0c      	ldr	r4, [pc, #48]	; (8017ba0 <__libc_init_array+0x44>)
 8017b70:	f002 faa2 	bl	801a0b8 <_init>
 8017b74:	1ba4      	subs	r4, r4, r6
 8017b76:	10a4      	asrs	r4, r4, #2
 8017b78:	2500      	movs	r5, #0
 8017b7a:	42a5      	cmp	r5, r4
 8017b7c:	d105      	bne.n	8017b8a <__libc_init_array+0x2e>
 8017b7e:	bd70      	pop	{r4, r5, r6, pc}
 8017b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b84:	4798      	blx	r3
 8017b86:	3501      	adds	r5, #1
 8017b88:	e7ee      	b.n	8017b68 <__libc_init_array+0xc>
 8017b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b8e:	4798      	blx	r3
 8017b90:	3501      	adds	r5, #1
 8017b92:	e7f2      	b.n	8017b7a <__libc_init_array+0x1e>
 8017b94:	0801ae20 	.word	0x0801ae20
 8017b98:	0801ae20 	.word	0x0801ae20
 8017b9c:	0801ae20 	.word	0x0801ae20
 8017ba0:	0801ae24 	.word	0x0801ae24

08017ba4 <malloc>:
 8017ba4:	4b02      	ldr	r3, [pc, #8]	; (8017bb0 <malloc+0xc>)
 8017ba6:	4601      	mov	r1, r0
 8017ba8:	6818      	ldr	r0, [r3, #0]
 8017baa:	f000 b86d 	b.w	8017c88 <_malloc_r>
 8017bae:	bf00      	nop
 8017bb0:	20000194 	.word	0x20000194

08017bb4 <free>:
 8017bb4:	4b02      	ldr	r3, [pc, #8]	; (8017bc0 <free+0xc>)
 8017bb6:	4601      	mov	r1, r0
 8017bb8:	6818      	ldr	r0, [r3, #0]
 8017bba:	f000 b817 	b.w	8017bec <_free_r>
 8017bbe:	bf00      	nop
 8017bc0:	20000194 	.word	0x20000194

08017bc4 <memcpy>:
 8017bc4:	b510      	push	{r4, lr}
 8017bc6:	1e43      	subs	r3, r0, #1
 8017bc8:	440a      	add	r2, r1
 8017bca:	4291      	cmp	r1, r2
 8017bcc:	d100      	bne.n	8017bd0 <memcpy+0xc>
 8017bce:	bd10      	pop	{r4, pc}
 8017bd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017bd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017bd8:	e7f7      	b.n	8017bca <memcpy+0x6>

08017bda <memset>:
 8017bda:	4402      	add	r2, r0
 8017bdc:	4603      	mov	r3, r0
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d100      	bne.n	8017be4 <memset+0xa>
 8017be2:	4770      	bx	lr
 8017be4:	f803 1b01 	strb.w	r1, [r3], #1
 8017be8:	e7f9      	b.n	8017bde <memset+0x4>
	...

08017bec <_free_r>:
 8017bec:	b538      	push	{r3, r4, r5, lr}
 8017bee:	4605      	mov	r5, r0
 8017bf0:	2900      	cmp	r1, #0
 8017bf2:	d045      	beq.n	8017c80 <_free_r+0x94>
 8017bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bf8:	1f0c      	subs	r4, r1, #4
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	bfb8      	it	lt
 8017bfe:	18e4      	addlt	r4, r4, r3
 8017c00:	f000 f8e0 	bl	8017dc4 <__malloc_lock>
 8017c04:	4a1f      	ldr	r2, [pc, #124]	; (8017c84 <_free_r+0x98>)
 8017c06:	6813      	ldr	r3, [r2, #0]
 8017c08:	4610      	mov	r0, r2
 8017c0a:	b933      	cbnz	r3, 8017c1a <_free_r+0x2e>
 8017c0c:	6063      	str	r3, [r4, #4]
 8017c0e:	6014      	str	r4, [r2, #0]
 8017c10:	4628      	mov	r0, r5
 8017c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c16:	f000 b8d6 	b.w	8017dc6 <__malloc_unlock>
 8017c1a:	42a3      	cmp	r3, r4
 8017c1c:	d90c      	bls.n	8017c38 <_free_r+0x4c>
 8017c1e:	6821      	ldr	r1, [r4, #0]
 8017c20:	1862      	adds	r2, r4, r1
 8017c22:	4293      	cmp	r3, r2
 8017c24:	bf04      	itt	eq
 8017c26:	681a      	ldreq	r2, [r3, #0]
 8017c28:	685b      	ldreq	r3, [r3, #4]
 8017c2a:	6063      	str	r3, [r4, #4]
 8017c2c:	bf04      	itt	eq
 8017c2e:	1852      	addeq	r2, r2, r1
 8017c30:	6022      	streq	r2, [r4, #0]
 8017c32:	6004      	str	r4, [r0, #0]
 8017c34:	e7ec      	b.n	8017c10 <_free_r+0x24>
 8017c36:	4613      	mov	r3, r2
 8017c38:	685a      	ldr	r2, [r3, #4]
 8017c3a:	b10a      	cbz	r2, 8017c40 <_free_r+0x54>
 8017c3c:	42a2      	cmp	r2, r4
 8017c3e:	d9fa      	bls.n	8017c36 <_free_r+0x4a>
 8017c40:	6819      	ldr	r1, [r3, #0]
 8017c42:	1858      	adds	r0, r3, r1
 8017c44:	42a0      	cmp	r0, r4
 8017c46:	d10b      	bne.n	8017c60 <_free_r+0x74>
 8017c48:	6820      	ldr	r0, [r4, #0]
 8017c4a:	4401      	add	r1, r0
 8017c4c:	1858      	adds	r0, r3, r1
 8017c4e:	4282      	cmp	r2, r0
 8017c50:	6019      	str	r1, [r3, #0]
 8017c52:	d1dd      	bne.n	8017c10 <_free_r+0x24>
 8017c54:	6810      	ldr	r0, [r2, #0]
 8017c56:	6852      	ldr	r2, [r2, #4]
 8017c58:	605a      	str	r2, [r3, #4]
 8017c5a:	4401      	add	r1, r0
 8017c5c:	6019      	str	r1, [r3, #0]
 8017c5e:	e7d7      	b.n	8017c10 <_free_r+0x24>
 8017c60:	d902      	bls.n	8017c68 <_free_r+0x7c>
 8017c62:	230c      	movs	r3, #12
 8017c64:	602b      	str	r3, [r5, #0]
 8017c66:	e7d3      	b.n	8017c10 <_free_r+0x24>
 8017c68:	6820      	ldr	r0, [r4, #0]
 8017c6a:	1821      	adds	r1, r4, r0
 8017c6c:	428a      	cmp	r2, r1
 8017c6e:	bf04      	itt	eq
 8017c70:	6811      	ldreq	r1, [r2, #0]
 8017c72:	6852      	ldreq	r2, [r2, #4]
 8017c74:	6062      	str	r2, [r4, #4]
 8017c76:	bf04      	itt	eq
 8017c78:	1809      	addeq	r1, r1, r0
 8017c7a:	6021      	streq	r1, [r4, #0]
 8017c7c:	605c      	str	r4, [r3, #4]
 8017c7e:	e7c7      	b.n	8017c10 <_free_r+0x24>
 8017c80:	bd38      	pop	{r3, r4, r5, pc}
 8017c82:	bf00      	nop
 8017c84:	20008978 	.word	0x20008978

08017c88 <_malloc_r>:
 8017c88:	b570      	push	{r4, r5, r6, lr}
 8017c8a:	1ccd      	adds	r5, r1, #3
 8017c8c:	f025 0503 	bic.w	r5, r5, #3
 8017c90:	3508      	adds	r5, #8
 8017c92:	2d0c      	cmp	r5, #12
 8017c94:	bf38      	it	cc
 8017c96:	250c      	movcc	r5, #12
 8017c98:	2d00      	cmp	r5, #0
 8017c9a:	4606      	mov	r6, r0
 8017c9c:	db01      	blt.n	8017ca2 <_malloc_r+0x1a>
 8017c9e:	42a9      	cmp	r1, r5
 8017ca0:	d903      	bls.n	8017caa <_malloc_r+0x22>
 8017ca2:	230c      	movs	r3, #12
 8017ca4:	6033      	str	r3, [r6, #0]
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	bd70      	pop	{r4, r5, r6, pc}
 8017caa:	f000 f88b 	bl	8017dc4 <__malloc_lock>
 8017cae:	4a21      	ldr	r2, [pc, #132]	; (8017d34 <_malloc_r+0xac>)
 8017cb0:	6814      	ldr	r4, [r2, #0]
 8017cb2:	4621      	mov	r1, r4
 8017cb4:	b991      	cbnz	r1, 8017cdc <_malloc_r+0x54>
 8017cb6:	4c20      	ldr	r4, [pc, #128]	; (8017d38 <_malloc_r+0xb0>)
 8017cb8:	6823      	ldr	r3, [r4, #0]
 8017cba:	b91b      	cbnz	r3, 8017cc4 <_malloc_r+0x3c>
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	f000 f83d 	bl	8017d3c <_sbrk_r>
 8017cc2:	6020      	str	r0, [r4, #0]
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	f000 f838 	bl	8017d3c <_sbrk_r>
 8017ccc:	1c43      	adds	r3, r0, #1
 8017cce:	d124      	bne.n	8017d1a <_malloc_r+0x92>
 8017cd0:	230c      	movs	r3, #12
 8017cd2:	6033      	str	r3, [r6, #0]
 8017cd4:	4630      	mov	r0, r6
 8017cd6:	f000 f876 	bl	8017dc6 <__malloc_unlock>
 8017cda:	e7e4      	b.n	8017ca6 <_malloc_r+0x1e>
 8017cdc:	680b      	ldr	r3, [r1, #0]
 8017cde:	1b5b      	subs	r3, r3, r5
 8017ce0:	d418      	bmi.n	8017d14 <_malloc_r+0x8c>
 8017ce2:	2b0b      	cmp	r3, #11
 8017ce4:	d90f      	bls.n	8017d06 <_malloc_r+0x7e>
 8017ce6:	600b      	str	r3, [r1, #0]
 8017ce8:	50cd      	str	r5, [r1, r3]
 8017cea:	18cc      	adds	r4, r1, r3
 8017cec:	4630      	mov	r0, r6
 8017cee:	f000 f86a 	bl	8017dc6 <__malloc_unlock>
 8017cf2:	f104 000b 	add.w	r0, r4, #11
 8017cf6:	1d23      	adds	r3, r4, #4
 8017cf8:	f020 0007 	bic.w	r0, r0, #7
 8017cfc:	1ac3      	subs	r3, r0, r3
 8017cfe:	d0d3      	beq.n	8017ca8 <_malloc_r+0x20>
 8017d00:	425a      	negs	r2, r3
 8017d02:	50e2      	str	r2, [r4, r3]
 8017d04:	e7d0      	b.n	8017ca8 <_malloc_r+0x20>
 8017d06:	428c      	cmp	r4, r1
 8017d08:	684b      	ldr	r3, [r1, #4]
 8017d0a:	bf16      	itet	ne
 8017d0c:	6063      	strne	r3, [r4, #4]
 8017d0e:	6013      	streq	r3, [r2, #0]
 8017d10:	460c      	movne	r4, r1
 8017d12:	e7eb      	b.n	8017cec <_malloc_r+0x64>
 8017d14:	460c      	mov	r4, r1
 8017d16:	6849      	ldr	r1, [r1, #4]
 8017d18:	e7cc      	b.n	8017cb4 <_malloc_r+0x2c>
 8017d1a:	1cc4      	adds	r4, r0, #3
 8017d1c:	f024 0403 	bic.w	r4, r4, #3
 8017d20:	42a0      	cmp	r0, r4
 8017d22:	d005      	beq.n	8017d30 <_malloc_r+0xa8>
 8017d24:	1a21      	subs	r1, r4, r0
 8017d26:	4630      	mov	r0, r6
 8017d28:	f000 f808 	bl	8017d3c <_sbrk_r>
 8017d2c:	3001      	adds	r0, #1
 8017d2e:	d0cf      	beq.n	8017cd0 <_malloc_r+0x48>
 8017d30:	6025      	str	r5, [r4, #0]
 8017d32:	e7db      	b.n	8017cec <_malloc_r+0x64>
 8017d34:	20008978 	.word	0x20008978
 8017d38:	2000897c 	.word	0x2000897c

08017d3c <_sbrk_r>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	4c06      	ldr	r4, [pc, #24]	; (8017d58 <_sbrk_r+0x1c>)
 8017d40:	2300      	movs	r3, #0
 8017d42:	4605      	mov	r5, r0
 8017d44:	4608      	mov	r0, r1
 8017d46:	6023      	str	r3, [r4, #0]
 8017d48:	f7ec fe92 	bl	8004a70 <_sbrk>
 8017d4c:	1c43      	adds	r3, r0, #1
 8017d4e:	d102      	bne.n	8017d56 <_sbrk_r+0x1a>
 8017d50:	6823      	ldr	r3, [r4, #0]
 8017d52:	b103      	cbz	r3, 8017d56 <_sbrk_r+0x1a>
 8017d54:	602b      	str	r3, [r5, #0]
 8017d56:	bd38      	pop	{r3, r4, r5, pc}
 8017d58:	20028f3c 	.word	0x20028f3c

08017d5c <sniprintf>:
 8017d5c:	b40c      	push	{r2, r3}
 8017d5e:	b530      	push	{r4, r5, lr}
 8017d60:	4b17      	ldr	r3, [pc, #92]	; (8017dc0 <sniprintf+0x64>)
 8017d62:	1e0c      	subs	r4, r1, #0
 8017d64:	b09d      	sub	sp, #116	; 0x74
 8017d66:	681d      	ldr	r5, [r3, #0]
 8017d68:	da08      	bge.n	8017d7c <sniprintf+0x20>
 8017d6a:	238b      	movs	r3, #139	; 0x8b
 8017d6c:	602b      	str	r3, [r5, #0]
 8017d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8017d72:	b01d      	add	sp, #116	; 0x74
 8017d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d78:	b002      	add	sp, #8
 8017d7a:	4770      	bx	lr
 8017d7c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017d80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017d84:	bf14      	ite	ne
 8017d86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017d8a:	4623      	moveq	r3, r4
 8017d8c:	9304      	str	r3, [sp, #16]
 8017d8e:	9307      	str	r3, [sp, #28]
 8017d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d94:	9002      	str	r0, [sp, #8]
 8017d96:	9006      	str	r0, [sp, #24]
 8017d98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017d9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017d9e:	ab21      	add	r3, sp, #132	; 0x84
 8017da0:	a902      	add	r1, sp, #8
 8017da2:	4628      	mov	r0, r5
 8017da4:	9301      	str	r3, [sp, #4]
 8017da6:	f000 f869 	bl	8017e7c <_svfiprintf_r>
 8017daa:	1c43      	adds	r3, r0, #1
 8017dac:	bfbc      	itt	lt
 8017dae:	238b      	movlt	r3, #139	; 0x8b
 8017db0:	602b      	strlt	r3, [r5, #0]
 8017db2:	2c00      	cmp	r4, #0
 8017db4:	d0dd      	beq.n	8017d72 <sniprintf+0x16>
 8017db6:	9b02      	ldr	r3, [sp, #8]
 8017db8:	2200      	movs	r2, #0
 8017dba:	701a      	strb	r2, [r3, #0]
 8017dbc:	e7d9      	b.n	8017d72 <sniprintf+0x16>
 8017dbe:	bf00      	nop
 8017dc0:	20000194 	.word	0x20000194

08017dc4 <__malloc_lock>:
 8017dc4:	4770      	bx	lr

08017dc6 <__malloc_unlock>:
 8017dc6:	4770      	bx	lr

08017dc8 <__ssputs_r>:
 8017dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dcc:	688e      	ldr	r6, [r1, #8]
 8017dce:	429e      	cmp	r6, r3
 8017dd0:	4682      	mov	sl, r0
 8017dd2:	460c      	mov	r4, r1
 8017dd4:	4690      	mov	r8, r2
 8017dd6:	4699      	mov	r9, r3
 8017dd8:	d837      	bhi.n	8017e4a <__ssputs_r+0x82>
 8017dda:	898a      	ldrh	r2, [r1, #12]
 8017ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017de0:	d031      	beq.n	8017e46 <__ssputs_r+0x7e>
 8017de2:	6825      	ldr	r5, [r4, #0]
 8017de4:	6909      	ldr	r1, [r1, #16]
 8017de6:	1a6f      	subs	r7, r5, r1
 8017de8:	6965      	ldr	r5, [r4, #20]
 8017dea:	2302      	movs	r3, #2
 8017dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017df0:	fb95 f5f3 	sdiv	r5, r5, r3
 8017df4:	f109 0301 	add.w	r3, r9, #1
 8017df8:	443b      	add	r3, r7
 8017dfa:	429d      	cmp	r5, r3
 8017dfc:	bf38      	it	cc
 8017dfe:	461d      	movcc	r5, r3
 8017e00:	0553      	lsls	r3, r2, #21
 8017e02:	d530      	bpl.n	8017e66 <__ssputs_r+0x9e>
 8017e04:	4629      	mov	r1, r5
 8017e06:	f7ff ff3f 	bl	8017c88 <_malloc_r>
 8017e0a:	4606      	mov	r6, r0
 8017e0c:	b950      	cbnz	r0, 8017e24 <__ssputs_r+0x5c>
 8017e0e:	230c      	movs	r3, #12
 8017e10:	f8ca 3000 	str.w	r3, [sl]
 8017e14:	89a3      	ldrh	r3, [r4, #12]
 8017e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e1a:	81a3      	strh	r3, [r4, #12]
 8017e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e24:	463a      	mov	r2, r7
 8017e26:	6921      	ldr	r1, [r4, #16]
 8017e28:	f7ff fecc 	bl	8017bc4 <memcpy>
 8017e2c:	89a3      	ldrh	r3, [r4, #12]
 8017e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e36:	81a3      	strh	r3, [r4, #12]
 8017e38:	6126      	str	r6, [r4, #16]
 8017e3a:	6165      	str	r5, [r4, #20]
 8017e3c:	443e      	add	r6, r7
 8017e3e:	1bed      	subs	r5, r5, r7
 8017e40:	6026      	str	r6, [r4, #0]
 8017e42:	60a5      	str	r5, [r4, #8]
 8017e44:	464e      	mov	r6, r9
 8017e46:	454e      	cmp	r6, r9
 8017e48:	d900      	bls.n	8017e4c <__ssputs_r+0x84>
 8017e4a:	464e      	mov	r6, r9
 8017e4c:	4632      	mov	r2, r6
 8017e4e:	4641      	mov	r1, r8
 8017e50:	6820      	ldr	r0, [r4, #0]
 8017e52:	f000 fa93 	bl	801837c <memmove>
 8017e56:	68a3      	ldr	r3, [r4, #8]
 8017e58:	1b9b      	subs	r3, r3, r6
 8017e5a:	60a3      	str	r3, [r4, #8]
 8017e5c:	6823      	ldr	r3, [r4, #0]
 8017e5e:	441e      	add	r6, r3
 8017e60:	6026      	str	r6, [r4, #0]
 8017e62:	2000      	movs	r0, #0
 8017e64:	e7dc      	b.n	8017e20 <__ssputs_r+0x58>
 8017e66:	462a      	mov	r2, r5
 8017e68:	f000 faa1 	bl	80183ae <_realloc_r>
 8017e6c:	4606      	mov	r6, r0
 8017e6e:	2800      	cmp	r0, #0
 8017e70:	d1e2      	bne.n	8017e38 <__ssputs_r+0x70>
 8017e72:	6921      	ldr	r1, [r4, #16]
 8017e74:	4650      	mov	r0, sl
 8017e76:	f7ff feb9 	bl	8017bec <_free_r>
 8017e7a:	e7c8      	b.n	8017e0e <__ssputs_r+0x46>

08017e7c <_svfiprintf_r>:
 8017e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e80:	461d      	mov	r5, r3
 8017e82:	898b      	ldrh	r3, [r1, #12]
 8017e84:	061f      	lsls	r7, r3, #24
 8017e86:	b09d      	sub	sp, #116	; 0x74
 8017e88:	4680      	mov	r8, r0
 8017e8a:	460c      	mov	r4, r1
 8017e8c:	4616      	mov	r6, r2
 8017e8e:	d50f      	bpl.n	8017eb0 <_svfiprintf_r+0x34>
 8017e90:	690b      	ldr	r3, [r1, #16]
 8017e92:	b96b      	cbnz	r3, 8017eb0 <_svfiprintf_r+0x34>
 8017e94:	2140      	movs	r1, #64	; 0x40
 8017e96:	f7ff fef7 	bl	8017c88 <_malloc_r>
 8017e9a:	6020      	str	r0, [r4, #0]
 8017e9c:	6120      	str	r0, [r4, #16]
 8017e9e:	b928      	cbnz	r0, 8017eac <_svfiprintf_r+0x30>
 8017ea0:	230c      	movs	r3, #12
 8017ea2:	f8c8 3000 	str.w	r3, [r8]
 8017ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8017eaa:	e0c8      	b.n	801803e <_svfiprintf_r+0x1c2>
 8017eac:	2340      	movs	r3, #64	; 0x40
 8017eae:	6163      	str	r3, [r4, #20]
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8017eb4:	2320      	movs	r3, #32
 8017eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eba:	2330      	movs	r3, #48	; 0x30
 8017ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ec0:	9503      	str	r5, [sp, #12]
 8017ec2:	f04f 0b01 	mov.w	fp, #1
 8017ec6:	4637      	mov	r7, r6
 8017ec8:	463d      	mov	r5, r7
 8017eca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ece:	b10b      	cbz	r3, 8017ed4 <_svfiprintf_r+0x58>
 8017ed0:	2b25      	cmp	r3, #37	; 0x25
 8017ed2:	d13e      	bne.n	8017f52 <_svfiprintf_r+0xd6>
 8017ed4:	ebb7 0a06 	subs.w	sl, r7, r6
 8017ed8:	d00b      	beq.n	8017ef2 <_svfiprintf_r+0x76>
 8017eda:	4653      	mov	r3, sl
 8017edc:	4632      	mov	r2, r6
 8017ede:	4621      	mov	r1, r4
 8017ee0:	4640      	mov	r0, r8
 8017ee2:	f7ff ff71 	bl	8017dc8 <__ssputs_r>
 8017ee6:	3001      	adds	r0, #1
 8017ee8:	f000 80a4 	beq.w	8018034 <_svfiprintf_r+0x1b8>
 8017eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eee:	4453      	add	r3, sl
 8017ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8017ef2:	783b      	ldrb	r3, [r7, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	f000 809d 	beq.w	8018034 <_svfiprintf_r+0x1b8>
 8017efa:	2300      	movs	r3, #0
 8017efc:	f04f 32ff 	mov.w	r2, #4294967295
 8017f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f04:	9304      	str	r3, [sp, #16]
 8017f06:	9307      	str	r3, [sp, #28]
 8017f08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f0c:	931a      	str	r3, [sp, #104]	; 0x68
 8017f0e:	462f      	mov	r7, r5
 8017f10:	2205      	movs	r2, #5
 8017f12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017f16:	4850      	ldr	r0, [pc, #320]	; (8018058 <_svfiprintf_r+0x1dc>)
 8017f18:	f7e8 f982 	bl	8000220 <memchr>
 8017f1c:	9b04      	ldr	r3, [sp, #16]
 8017f1e:	b9d0      	cbnz	r0, 8017f56 <_svfiprintf_r+0xda>
 8017f20:	06d9      	lsls	r1, r3, #27
 8017f22:	bf44      	itt	mi
 8017f24:	2220      	movmi	r2, #32
 8017f26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f2a:	071a      	lsls	r2, r3, #28
 8017f2c:	bf44      	itt	mi
 8017f2e:	222b      	movmi	r2, #43	; 0x2b
 8017f30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017f34:	782a      	ldrb	r2, [r5, #0]
 8017f36:	2a2a      	cmp	r2, #42	; 0x2a
 8017f38:	d015      	beq.n	8017f66 <_svfiprintf_r+0xea>
 8017f3a:	9a07      	ldr	r2, [sp, #28]
 8017f3c:	462f      	mov	r7, r5
 8017f3e:	2000      	movs	r0, #0
 8017f40:	250a      	movs	r5, #10
 8017f42:	4639      	mov	r1, r7
 8017f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f48:	3b30      	subs	r3, #48	; 0x30
 8017f4a:	2b09      	cmp	r3, #9
 8017f4c:	d94d      	bls.n	8017fea <_svfiprintf_r+0x16e>
 8017f4e:	b1b8      	cbz	r0, 8017f80 <_svfiprintf_r+0x104>
 8017f50:	e00f      	b.n	8017f72 <_svfiprintf_r+0xf6>
 8017f52:	462f      	mov	r7, r5
 8017f54:	e7b8      	b.n	8017ec8 <_svfiprintf_r+0x4c>
 8017f56:	4a40      	ldr	r2, [pc, #256]	; (8018058 <_svfiprintf_r+0x1dc>)
 8017f58:	1a80      	subs	r0, r0, r2
 8017f5a:	fa0b f000 	lsl.w	r0, fp, r0
 8017f5e:	4318      	orrs	r0, r3
 8017f60:	9004      	str	r0, [sp, #16]
 8017f62:	463d      	mov	r5, r7
 8017f64:	e7d3      	b.n	8017f0e <_svfiprintf_r+0x92>
 8017f66:	9a03      	ldr	r2, [sp, #12]
 8017f68:	1d11      	adds	r1, r2, #4
 8017f6a:	6812      	ldr	r2, [r2, #0]
 8017f6c:	9103      	str	r1, [sp, #12]
 8017f6e:	2a00      	cmp	r2, #0
 8017f70:	db01      	blt.n	8017f76 <_svfiprintf_r+0xfa>
 8017f72:	9207      	str	r2, [sp, #28]
 8017f74:	e004      	b.n	8017f80 <_svfiprintf_r+0x104>
 8017f76:	4252      	negs	r2, r2
 8017f78:	f043 0302 	orr.w	r3, r3, #2
 8017f7c:	9207      	str	r2, [sp, #28]
 8017f7e:	9304      	str	r3, [sp, #16]
 8017f80:	783b      	ldrb	r3, [r7, #0]
 8017f82:	2b2e      	cmp	r3, #46	; 0x2e
 8017f84:	d10c      	bne.n	8017fa0 <_svfiprintf_r+0x124>
 8017f86:	787b      	ldrb	r3, [r7, #1]
 8017f88:	2b2a      	cmp	r3, #42	; 0x2a
 8017f8a:	d133      	bne.n	8017ff4 <_svfiprintf_r+0x178>
 8017f8c:	9b03      	ldr	r3, [sp, #12]
 8017f8e:	1d1a      	adds	r2, r3, #4
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	9203      	str	r2, [sp, #12]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	bfb8      	it	lt
 8017f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8017f9c:	3702      	adds	r7, #2
 8017f9e:	9305      	str	r3, [sp, #20]
 8017fa0:	4d2e      	ldr	r5, [pc, #184]	; (801805c <_svfiprintf_r+0x1e0>)
 8017fa2:	7839      	ldrb	r1, [r7, #0]
 8017fa4:	2203      	movs	r2, #3
 8017fa6:	4628      	mov	r0, r5
 8017fa8:	f7e8 f93a 	bl	8000220 <memchr>
 8017fac:	b138      	cbz	r0, 8017fbe <_svfiprintf_r+0x142>
 8017fae:	2340      	movs	r3, #64	; 0x40
 8017fb0:	1b40      	subs	r0, r0, r5
 8017fb2:	fa03 f000 	lsl.w	r0, r3, r0
 8017fb6:	9b04      	ldr	r3, [sp, #16]
 8017fb8:	4303      	orrs	r3, r0
 8017fba:	3701      	adds	r7, #1
 8017fbc:	9304      	str	r3, [sp, #16]
 8017fbe:	7839      	ldrb	r1, [r7, #0]
 8017fc0:	4827      	ldr	r0, [pc, #156]	; (8018060 <_svfiprintf_r+0x1e4>)
 8017fc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fc6:	2206      	movs	r2, #6
 8017fc8:	1c7e      	adds	r6, r7, #1
 8017fca:	f7e8 f929 	bl	8000220 <memchr>
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	d038      	beq.n	8018044 <_svfiprintf_r+0x1c8>
 8017fd2:	4b24      	ldr	r3, [pc, #144]	; (8018064 <_svfiprintf_r+0x1e8>)
 8017fd4:	bb13      	cbnz	r3, 801801c <_svfiprintf_r+0x1a0>
 8017fd6:	9b03      	ldr	r3, [sp, #12]
 8017fd8:	3307      	adds	r3, #7
 8017fda:	f023 0307 	bic.w	r3, r3, #7
 8017fde:	3308      	adds	r3, #8
 8017fe0:	9303      	str	r3, [sp, #12]
 8017fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fe4:	444b      	add	r3, r9
 8017fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8017fe8:	e76d      	b.n	8017ec6 <_svfiprintf_r+0x4a>
 8017fea:	fb05 3202 	mla	r2, r5, r2, r3
 8017fee:	2001      	movs	r0, #1
 8017ff0:	460f      	mov	r7, r1
 8017ff2:	e7a6      	b.n	8017f42 <_svfiprintf_r+0xc6>
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	3701      	adds	r7, #1
 8017ff8:	9305      	str	r3, [sp, #20]
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	250a      	movs	r5, #10
 8017ffe:	4638      	mov	r0, r7
 8018000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018004:	3a30      	subs	r2, #48	; 0x30
 8018006:	2a09      	cmp	r2, #9
 8018008:	d903      	bls.n	8018012 <_svfiprintf_r+0x196>
 801800a:	2b00      	cmp	r3, #0
 801800c:	d0c8      	beq.n	8017fa0 <_svfiprintf_r+0x124>
 801800e:	9105      	str	r1, [sp, #20]
 8018010:	e7c6      	b.n	8017fa0 <_svfiprintf_r+0x124>
 8018012:	fb05 2101 	mla	r1, r5, r1, r2
 8018016:	2301      	movs	r3, #1
 8018018:	4607      	mov	r7, r0
 801801a:	e7f0      	b.n	8017ffe <_svfiprintf_r+0x182>
 801801c:	ab03      	add	r3, sp, #12
 801801e:	9300      	str	r3, [sp, #0]
 8018020:	4622      	mov	r2, r4
 8018022:	4b11      	ldr	r3, [pc, #68]	; (8018068 <_svfiprintf_r+0x1ec>)
 8018024:	a904      	add	r1, sp, #16
 8018026:	4640      	mov	r0, r8
 8018028:	f3af 8000 	nop.w
 801802c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018030:	4681      	mov	r9, r0
 8018032:	d1d6      	bne.n	8017fe2 <_svfiprintf_r+0x166>
 8018034:	89a3      	ldrh	r3, [r4, #12]
 8018036:	065b      	lsls	r3, r3, #25
 8018038:	f53f af35 	bmi.w	8017ea6 <_svfiprintf_r+0x2a>
 801803c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801803e:	b01d      	add	sp, #116	; 0x74
 8018040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018044:	ab03      	add	r3, sp, #12
 8018046:	9300      	str	r3, [sp, #0]
 8018048:	4622      	mov	r2, r4
 801804a:	4b07      	ldr	r3, [pc, #28]	; (8018068 <_svfiprintf_r+0x1ec>)
 801804c:	a904      	add	r1, sp, #16
 801804e:	4640      	mov	r0, r8
 8018050:	f000 f882 	bl	8018158 <_printf_i>
 8018054:	e7ea      	b.n	801802c <_svfiprintf_r+0x1b0>
 8018056:	bf00      	nop
 8018058:	0801ad0c 	.word	0x0801ad0c
 801805c:	0801ad12 	.word	0x0801ad12
 8018060:	0801ad16 	.word	0x0801ad16
 8018064:	00000000 	.word	0x00000000
 8018068:	08017dc9 	.word	0x08017dc9

0801806c <_printf_common>:
 801806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018070:	4691      	mov	r9, r2
 8018072:	461f      	mov	r7, r3
 8018074:	688a      	ldr	r2, [r1, #8]
 8018076:	690b      	ldr	r3, [r1, #16]
 8018078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801807c:	4293      	cmp	r3, r2
 801807e:	bfb8      	it	lt
 8018080:	4613      	movlt	r3, r2
 8018082:	f8c9 3000 	str.w	r3, [r9]
 8018086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801808a:	4606      	mov	r6, r0
 801808c:	460c      	mov	r4, r1
 801808e:	b112      	cbz	r2, 8018096 <_printf_common+0x2a>
 8018090:	3301      	adds	r3, #1
 8018092:	f8c9 3000 	str.w	r3, [r9]
 8018096:	6823      	ldr	r3, [r4, #0]
 8018098:	0699      	lsls	r1, r3, #26
 801809a:	bf42      	ittt	mi
 801809c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80180a0:	3302      	addmi	r3, #2
 80180a2:	f8c9 3000 	strmi.w	r3, [r9]
 80180a6:	6825      	ldr	r5, [r4, #0]
 80180a8:	f015 0506 	ands.w	r5, r5, #6
 80180ac:	d107      	bne.n	80180be <_printf_common+0x52>
 80180ae:	f104 0a19 	add.w	sl, r4, #25
 80180b2:	68e3      	ldr	r3, [r4, #12]
 80180b4:	f8d9 2000 	ldr.w	r2, [r9]
 80180b8:	1a9b      	subs	r3, r3, r2
 80180ba:	42ab      	cmp	r3, r5
 80180bc:	dc28      	bgt.n	8018110 <_printf_common+0xa4>
 80180be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80180c2:	6822      	ldr	r2, [r4, #0]
 80180c4:	3300      	adds	r3, #0
 80180c6:	bf18      	it	ne
 80180c8:	2301      	movne	r3, #1
 80180ca:	0692      	lsls	r2, r2, #26
 80180cc:	d42d      	bmi.n	801812a <_printf_common+0xbe>
 80180ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180d2:	4639      	mov	r1, r7
 80180d4:	4630      	mov	r0, r6
 80180d6:	47c0      	blx	r8
 80180d8:	3001      	adds	r0, #1
 80180da:	d020      	beq.n	801811e <_printf_common+0xb2>
 80180dc:	6823      	ldr	r3, [r4, #0]
 80180de:	68e5      	ldr	r5, [r4, #12]
 80180e0:	f8d9 2000 	ldr.w	r2, [r9]
 80180e4:	f003 0306 	and.w	r3, r3, #6
 80180e8:	2b04      	cmp	r3, #4
 80180ea:	bf08      	it	eq
 80180ec:	1aad      	subeq	r5, r5, r2
 80180ee:	68a3      	ldr	r3, [r4, #8]
 80180f0:	6922      	ldr	r2, [r4, #16]
 80180f2:	bf0c      	ite	eq
 80180f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180f8:	2500      	movne	r5, #0
 80180fa:	4293      	cmp	r3, r2
 80180fc:	bfc4      	itt	gt
 80180fe:	1a9b      	subgt	r3, r3, r2
 8018100:	18ed      	addgt	r5, r5, r3
 8018102:	f04f 0900 	mov.w	r9, #0
 8018106:	341a      	adds	r4, #26
 8018108:	454d      	cmp	r5, r9
 801810a:	d11a      	bne.n	8018142 <_printf_common+0xd6>
 801810c:	2000      	movs	r0, #0
 801810e:	e008      	b.n	8018122 <_printf_common+0xb6>
 8018110:	2301      	movs	r3, #1
 8018112:	4652      	mov	r2, sl
 8018114:	4639      	mov	r1, r7
 8018116:	4630      	mov	r0, r6
 8018118:	47c0      	blx	r8
 801811a:	3001      	adds	r0, #1
 801811c:	d103      	bne.n	8018126 <_printf_common+0xba>
 801811e:	f04f 30ff 	mov.w	r0, #4294967295
 8018122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018126:	3501      	adds	r5, #1
 8018128:	e7c3      	b.n	80180b2 <_printf_common+0x46>
 801812a:	18e1      	adds	r1, r4, r3
 801812c:	1c5a      	adds	r2, r3, #1
 801812e:	2030      	movs	r0, #48	; 0x30
 8018130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018134:	4422      	add	r2, r4
 8018136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801813a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801813e:	3302      	adds	r3, #2
 8018140:	e7c5      	b.n	80180ce <_printf_common+0x62>
 8018142:	2301      	movs	r3, #1
 8018144:	4622      	mov	r2, r4
 8018146:	4639      	mov	r1, r7
 8018148:	4630      	mov	r0, r6
 801814a:	47c0      	blx	r8
 801814c:	3001      	adds	r0, #1
 801814e:	d0e6      	beq.n	801811e <_printf_common+0xb2>
 8018150:	f109 0901 	add.w	r9, r9, #1
 8018154:	e7d8      	b.n	8018108 <_printf_common+0x9c>
	...

08018158 <_printf_i>:
 8018158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801815c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018160:	460c      	mov	r4, r1
 8018162:	7e09      	ldrb	r1, [r1, #24]
 8018164:	b085      	sub	sp, #20
 8018166:	296e      	cmp	r1, #110	; 0x6e
 8018168:	4617      	mov	r7, r2
 801816a:	4606      	mov	r6, r0
 801816c:	4698      	mov	r8, r3
 801816e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018170:	f000 80b3 	beq.w	80182da <_printf_i+0x182>
 8018174:	d822      	bhi.n	80181bc <_printf_i+0x64>
 8018176:	2963      	cmp	r1, #99	; 0x63
 8018178:	d036      	beq.n	80181e8 <_printf_i+0x90>
 801817a:	d80a      	bhi.n	8018192 <_printf_i+0x3a>
 801817c:	2900      	cmp	r1, #0
 801817e:	f000 80b9 	beq.w	80182f4 <_printf_i+0x19c>
 8018182:	2958      	cmp	r1, #88	; 0x58
 8018184:	f000 8083 	beq.w	801828e <_printf_i+0x136>
 8018188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801818c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018190:	e032      	b.n	80181f8 <_printf_i+0xa0>
 8018192:	2964      	cmp	r1, #100	; 0x64
 8018194:	d001      	beq.n	801819a <_printf_i+0x42>
 8018196:	2969      	cmp	r1, #105	; 0x69
 8018198:	d1f6      	bne.n	8018188 <_printf_i+0x30>
 801819a:	6820      	ldr	r0, [r4, #0]
 801819c:	6813      	ldr	r3, [r2, #0]
 801819e:	0605      	lsls	r5, r0, #24
 80181a0:	f103 0104 	add.w	r1, r3, #4
 80181a4:	d52a      	bpl.n	80181fc <_printf_i+0xa4>
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	6011      	str	r1, [r2, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	da03      	bge.n	80181b6 <_printf_i+0x5e>
 80181ae:	222d      	movs	r2, #45	; 0x2d
 80181b0:	425b      	negs	r3, r3
 80181b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80181b6:	486f      	ldr	r0, [pc, #444]	; (8018374 <_printf_i+0x21c>)
 80181b8:	220a      	movs	r2, #10
 80181ba:	e039      	b.n	8018230 <_printf_i+0xd8>
 80181bc:	2973      	cmp	r1, #115	; 0x73
 80181be:	f000 809d 	beq.w	80182fc <_printf_i+0x1a4>
 80181c2:	d808      	bhi.n	80181d6 <_printf_i+0x7e>
 80181c4:	296f      	cmp	r1, #111	; 0x6f
 80181c6:	d020      	beq.n	801820a <_printf_i+0xb2>
 80181c8:	2970      	cmp	r1, #112	; 0x70
 80181ca:	d1dd      	bne.n	8018188 <_printf_i+0x30>
 80181cc:	6823      	ldr	r3, [r4, #0]
 80181ce:	f043 0320 	orr.w	r3, r3, #32
 80181d2:	6023      	str	r3, [r4, #0]
 80181d4:	e003      	b.n	80181de <_printf_i+0x86>
 80181d6:	2975      	cmp	r1, #117	; 0x75
 80181d8:	d017      	beq.n	801820a <_printf_i+0xb2>
 80181da:	2978      	cmp	r1, #120	; 0x78
 80181dc:	d1d4      	bne.n	8018188 <_printf_i+0x30>
 80181de:	2378      	movs	r3, #120	; 0x78
 80181e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80181e4:	4864      	ldr	r0, [pc, #400]	; (8018378 <_printf_i+0x220>)
 80181e6:	e055      	b.n	8018294 <_printf_i+0x13c>
 80181e8:	6813      	ldr	r3, [r2, #0]
 80181ea:	1d19      	adds	r1, r3, #4
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	6011      	str	r1, [r2, #0]
 80181f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181f8:	2301      	movs	r3, #1
 80181fa:	e08c      	b.n	8018316 <_printf_i+0x1be>
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	6011      	str	r1, [r2, #0]
 8018200:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018204:	bf18      	it	ne
 8018206:	b21b      	sxthne	r3, r3
 8018208:	e7cf      	b.n	80181aa <_printf_i+0x52>
 801820a:	6813      	ldr	r3, [r2, #0]
 801820c:	6825      	ldr	r5, [r4, #0]
 801820e:	1d18      	adds	r0, r3, #4
 8018210:	6010      	str	r0, [r2, #0]
 8018212:	0628      	lsls	r0, r5, #24
 8018214:	d501      	bpl.n	801821a <_printf_i+0xc2>
 8018216:	681b      	ldr	r3, [r3, #0]
 8018218:	e002      	b.n	8018220 <_printf_i+0xc8>
 801821a:	0668      	lsls	r0, r5, #25
 801821c:	d5fb      	bpl.n	8018216 <_printf_i+0xbe>
 801821e:	881b      	ldrh	r3, [r3, #0]
 8018220:	4854      	ldr	r0, [pc, #336]	; (8018374 <_printf_i+0x21c>)
 8018222:	296f      	cmp	r1, #111	; 0x6f
 8018224:	bf14      	ite	ne
 8018226:	220a      	movne	r2, #10
 8018228:	2208      	moveq	r2, #8
 801822a:	2100      	movs	r1, #0
 801822c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018230:	6865      	ldr	r5, [r4, #4]
 8018232:	60a5      	str	r5, [r4, #8]
 8018234:	2d00      	cmp	r5, #0
 8018236:	f2c0 8095 	blt.w	8018364 <_printf_i+0x20c>
 801823a:	6821      	ldr	r1, [r4, #0]
 801823c:	f021 0104 	bic.w	r1, r1, #4
 8018240:	6021      	str	r1, [r4, #0]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d13d      	bne.n	80182c2 <_printf_i+0x16a>
 8018246:	2d00      	cmp	r5, #0
 8018248:	f040 808e 	bne.w	8018368 <_printf_i+0x210>
 801824c:	4665      	mov	r5, ip
 801824e:	2a08      	cmp	r2, #8
 8018250:	d10b      	bne.n	801826a <_printf_i+0x112>
 8018252:	6823      	ldr	r3, [r4, #0]
 8018254:	07db      	lsls	r3, r3, #31
 8018256:	d508      	bpl.n	801826a <_printf_i+0x112>
 8018258:	6923      	ldr	r3, [r4, #16]
 801825a:	6862      	ldr	r2, [r4, #4]
 801825c:	429a      	cmp	r2, r3
 801825e:	bfde      	ittt	le
 8018260:	2330      	movle	r3, #48	; 0x30
 8018262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018266:	f105 35ff 	addle.w	r5, r5, #4294967295
 801826a:	ebac 0305 	sub.w	r3, ip, r5
 801826e:	6123      	str	r3, [r4, #16]
 8018270:	f8cd 8000 	str.w	r8, [sp]
 8018274:	463b      	mov	r3, r7
 8018276:	aa03      	add	r2, sp, #12
 8018278:	4621      	mov	r1, r4
 801827a:	4630      	mov	r0, r6
 801827c:	f7ff fef6 	bl	801806c <_printf_common>
 8018280:	3001      	adds	r0, #1
 8018282:	d14d      	bne.n	8018320 <_printf_i+0x1c8>
 8018284:	f04f 30ff 	mov.w	r0, #4294967295
 8018288:	b005      	add	sp, #20
 801828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801828e:	4839      	ldr	r0, [pc, #228]	; (8018374 <_printf_i+0x21c>)
 8018290:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018294:	6813      	ldr	r3, [r2, #0]
 8018296:	6821      	ldr	r1, [r4, #0]
 8018298:	1d1d      	adds	r5, r3, #4
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	6015      	str	r5, [r2, #0]
 801829e:	060a      	lsls	r2, r1, #24
 80182a0:	d50b      	bpl.n	80182ba <_printf_i+0x162>
 80182a2:	07ca      	lsls	r2, r1, #31
 80182a4:	bf44      	itt	mi
 80182a6:	f041 0120 	orrmi.w	r1, r1, #32
 80182aa:	6021      	strmi	r1, [r4, #0]
 80182ac:	b91b      	cbnz	r3, 80182b6 <_printf_i+0x15e>
 80182ae:	6822      	ldr	r2, [r4, #0]
 80182b0:	f022 0220 	bic.w	r2, r2, #32
 80182b4:	6022      	str	r2, [r4, #0]
 80182b6:	2210      	movs	r2, #16
 80182b8:	e7b7      	b.n	801822a <_printf_i+0xd2>
 80182ba:	064d      	lsls	r5, r1, #25
 80182bc:	bf48      	it	mi
 80182be:	b29b      	uxthmi	r3, r3
 80182c0:	e7ef      	b.n	80182a2 <_printf_i+0x14a>
 80182c2:	4665      	mov	r5, ip
 80182c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80182c8:	fb02 3311 	mls	r3, r2, r1, r3
 80182cc:	5cc3      	ldrb	r3, [r0, r3]
 80182ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80182d2:	460b      	mov	r3, r1
 80182d4:	2900      	cmp	r1, #0
 80182d6:	d1f5      	bne.n	80182c4 <_printf_i+0x16c>
 80182d8:	e7b9      	b.n	801824e <_printf_i+0xf6>
 80182da:	6813      	ldr	r3, [r2, #0]
 80182dc:	6825      	ldr	r5, [r4, #0]
 80182de:	6961      	ldr	r1, [r4, #20]
 80182e0:	1d18      	adds	r0, r3, #4
 80182e2:	6010      	str	r0, [r2, #0]
 80182e4:	0628      	lsls	r0, r5, #24
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	d501      	bpl.n	80182ee <_printf_i+0x196>
 80182ea:	6019      	str	r1, [r3, #0]
 80182ec:	e002      	b.n	80182f4 <_printf_i+0x19c>
 80182ee:	066a      	lsls	r2, r5, #25
 80182f0:	d5fb      	bpl.n	80182ea <_printf_i+0x192>
 80182f2:	8019      	strh	r1, [r3, #0]
 80182f4:	2300      	movs	r3, #0
 80182f6:	6123      	str	r3, [r4, #16]
 80182f8:	4665      	mov	r5, ip
 80182fa:	e7b9      	b.n	8018270 <_printf_i+0x118>
 80182fc:	6813      	ldr	r3, [r2, #0]
 80182fe:	1d19      	adds	r1, r3, #4
 8018300:	6011      	str	r1, [r2, #0]
 8018302:	681d      	ldr	r5, [r3, #0]
 8018304:	6862      	ldr	r2, [r4, #4]
 8018306:	2100      	movs	r1, #0
 8018308:	4628      	mov	r0, r5
 801830a:	f7e7 ff89 	bl	8000220 <memchr>
 801830e:	b108      	cbz	r0, 8018314 <_printf_i+0x1bc>
 8018310:	1b40      	subs	r0, r0, r5
 8018312:	6060      	str	r0, [r4, #4]
 8018314:	6863      	ldr	r3, [r4, #4]
 8018316:	6123      	str	r3, [r4, #16]
 8018318:	2300      	movs	r3, #0
 801831a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801831e:	e7a7      	b.n	8018270 <_printf_i+0x118>
 8018320:	6923      	ldr	r3, [r4, #16]
 8018322:	462a      	mov	r2, r5
 8018324:	4639      	mov	r1, r7
 8018326:	4630      	mov	r0, r6
 8018328:	47c0      	blx	r8
 801832a:	3001      	adds	r0, #1
 801832c:	d0aa      	beq.n	8018284 <_printf_i+0x12c>
 801832e:	6823      	ldr	r3, [r4, #0]
 8018330:	079b      	lsls	r3, r3, #30
 8018332:	d413      	bmi.n	801835c <_printf_i+0x204>
 8018334:	68e0      	ldr	r0, [r4, #12]
 8018336:	9b03      	ldr	r3, [sp, #12]
 8018338:	4298      	cmp	r0, r3
 801833a:	bfb8      	it	lt
 801833c:	4618      	movlt	r0, r3
 801833e:	e7a3      	b.n	8018288 <_printf_i+0x130>
 8018340:	2301      	movs	r3, #1
 8018342:	464a      	mov	r2, r9
 8018344:	4639      	mov	r1, r7
 8018346:	4630      	mov	r0, r6
 8018348:	47c0      	blx	r8
 801834a:	3001      	adds	r0, #1
 801834c:	d09a      	beq.n	8018284 <_printf_i+0x12c>
 801834e:	3501      	adds	r5, #1
 8018350:	68e3      	ldr	r3, [r4, #12]
 8018352:	9a03      	ldr	r2, [sp, #12]
 8018354:	1a9b      	subs	r3, r3, r2
 8018356:	42ab      	cmp	r3, r5
 8018358:	dcf2      	bgt.n	8018340 <_printf_i+0x1e8>
 801835a:	e7eb      	b.n	8018334 <_printf_i+0x1dc>
 801835c:	2500      	movs	r5, #0
 801835e:	f104 0919 	add.w	r9, r4, #25
 8018362:	e7f5      	b.n	8018350 <_printf_i+0x1f8>
 8018364:	2b00      	cmp	r3, #0
 8018366:	d1ac      	bne.n	80182c2 <_printf_i+0x16a>
 8018368:	7803      	ldrb	r3, [r0, #0]
 801836a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801836e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018372:	e76c      	b.n	801824e <_printf_i+0xf6>
 8018374:	0801ad1d 	.word	0x0801ad1d
 8018378:	0801ad2e 	.word	0x0801ad2e

0801837c <memmove>:
 801837c:	4288      	cmp	r0, r1
 801837e:	b510      	push	{r4, lr}
 8018380:	eb01 0302 	add.w	r3, r1, r2
 8018384:	d807      	bhi.n	8018396 <memmove+0x1a>
 8018386:	1e42      	subs	r2, r0, #1
 8018388:	4299      	cmp	r1, r3
 801838a:	d00a      	beq.n	80183a2 <memmove+0x26>
 801838c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018390:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018394:	e7f8      	b.n	8018388 <memmove+0xc>
 8018396:	4283      	cmp	r3, r0
 8018398:	d9f5      	bls.n	8018386 <memmove+0xa>
 801839a:	1881      	adds	r1, r0, r2
 801839c:	1ad2      	subs	r2, r2, r3
 801839e:	42d3      	cmn	r3, r2
 80183a0:	d100      	bne.n	80183a4 <memmove+0x28>
 80183a2:	bd10      	pop	{r4, pc}
 80183a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80183ac:	e7f7      	b.n	801839e <memmove+0x22>

080183ae <_realloc_r>:
 80183ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183b0:	4607      	mov	r7, r0
 80183b2:	4614      	mov	r4, r2
 80183b4:	460e      	mov	r6, r1
 80183b6:	b921      	cbnz	r1, 80183c2 <_realloc_r+0x14>
 80183b8:	4611      	mov	r1, r2
 80183ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80183be:	f7ff bc63 	b.w	8017c88 <_malloc_r>
 80183c2:	b922      	cbnz	r2, 80183ce <_realloc_r+0x20>
 80183c4:	f7ff fc12 	bl	8017bec <_free_r>
 80183c8:	4625      	mov	r5, r4
 80183ca:	4628      	mov	r0, r5
 80183cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183ce:	f000 f814 	bl	80183fa <_malloc_usable_size_r>
 80183d2:	42a0      	cmp	r0, r4
 80183d4:	d20f      	bcs.n	80183f6 <_realloc_r+0x48>
 80183d6:	4621      	mov	r1, r4
 80183d8:	4638      	mov	r0, r7
 80183da:	f7ff fc55 	bl	8017c88 <_malloc_r>
 80183de:	4605      	mov	r5, r0
 80183e0:	2800      	cmp	r0, #0
 80183e2:	d0f2      	beq.n	80183ca <_realloc_r+0x1c>
 80183e4:	4631      	mov	r1, r6
 80183e6:	4622      	mov	r2, r4
 80183e8:	f7ff fbec 	bl	8017bc4 <memcpy>
 80183ec:	4631      	mov	r1, r6
 80183ee:	4638      	mov	r0, r7
 80183f0:	f7ff fbfc 	bl	8017bec <_free_r>
 80183f4:	e7e9      	b.n	80183ca <_realloc_r+0x1c>
 80183f6:	4635      	mov	r5, r6
 80183f8:	e7e7      	b.n	80183ca <_realloc_r+0x1c>

080183fa <_malloc_usable_size_r>:
 80183fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183fe:	1f18      	subs	r0, r3, #4
 8018400:	2b00      	cmp	r3, #0
 8018402:	bfbc      	itt	lt
 8018404:	580b      	ldrlt	r3, [r1, r0]
 8018406:	18c0      	addlt	r0, r0, r3
 8018408:	4770      	bx	lr

0801840a <fmaxf>:
 801840a:	b508      	push	{r3, lr}
 801840c:	ed2d 8b02 	vpush	{d8}
 8018410:	eeb0 8a40 	vmov.f32	s16, s0
 8018414:	eef0 8a60 	vmov.f32	s17, s1
 8018418:	f000 f82e 	bl	8018478 <__fpclassifyf>
 801841c:	b148      	cbz	r0, 8018432 <fmaxf+0x28>
 801841e:	eeb0 0a68 	vmov.f32	s0, s17
 8018422:	f000 f829 	bl	8018478 <__fpclassifyf>
 8018426:	b130      	cbz	r0, 8018436 <fmaxf+0x2c>
 8018428:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018430:	dc01      	bgt.n	8018436 <fmaxf+0x2c>
 8018432:	eeb0 8a68 	vmov.f32	s16, s17
 8018436:	eeb0 0a48 	vmov.f32	s0, s16
 801843a:	ecbd 8b02 	vpop	{d8}
 801843e:	bd08      	pop	{r3, pc}

08018440 <fminf>:
 8018440:	b508      	push	{r3, lr}
 8018442:	ed2d 8b02 	vpush	{d8}
 8018446:	eeb0 8a40 	vmov.f32	s16, s0
 801844a:	eef0 8a60 	vmov.f32	s17, s1
 801844e:	f000 f813 	bl	8018478 <__fpclassifyf>
 8018452:	b148      	cbz	r0, 8018468 <fminf+0x28>
 8018454:	eeb0 0a68 	vmov.f32	s0, s17
 8018458:	f000 f80e 	bl	8018478 <__fpclassifyf>
 801845c:	b130      	cbz	r0, 801846c <fminf+0x2c>
 801845e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018466:	d401      	bmi.n	801846c <fminf+0x2c>
 8018468:	eeb0 8a68 	vmov.f32	s16, s17
 801846c:	eeb0 0a48 	vmov.f32	s0, s16
 8018470:	ecbd 8b02 	vpop	{d8}
 8018474:	bd08      	pop	{r3, pc}
	...

08018478 <__fpclassifyf>:
 8018478:	ee10 3a10 	vmov	r3, s0
 801847c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8018480:	d00d      	beq.n	801849e <__fpclassifyf+0x26>
 8018482:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8018486:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801848a:	d30a      	bcc.n	80184a2 <__fpclassifyf+0x2a>
 801848c:	4b07      	ldr	r3, [pc, #28]	; (80184ac <__fpclassifyf+0x34>)
 801848e:	1e42      	subs	r2, r0, #1
 8018490:	429a      	cmp	r2, r3
 8018492:	d908      	bls.n	80184a6 <__fpclassifyf+0x2e>
 8018494:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8018498:	4258      	negs	r0, r3
 801849a:	4158      	adcs	r0, r3
 801849c:	4770      	bx	lr
 801849e:	2002      	movs	r0, #2
 80184a0:	4770      	bx	lr
 80184a2:	2004      	movs	r0, #4
 80184a4:	4770      	bx	lr
 80184a6:	2003      	movs	r0, #3
 80184a8:	4770      	bx	lr
 80184aa:	bf00      	nop
 80184ac:	007ffffe 	.word	0x007ffffe

080184b0 <pow>:
 80184b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b4:	ed2d 8b04 	vpush	{d8-d9}
 80184b8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801878c <pow+0x2dc>
 80184bc:	b08d      	sub	sp, #52	; 0x34
 80184be:	ec57 6b10 	vmov	r6, r7, d0
 80184c2:	ec55 4b11 	vmov	r4, r5, d1
 80184c6:	f000 fb73 	bl	8018bb0 <__ieee754_pow>
 80184ca:	f999 3000 	ldrsb.w	r3, [r9]
 80184ce:	9300      	str	r3, [sp, #0]
 80184d0:	3301      	adds	r3, #1
 80184d2:	eeb0 8a40 	vmov.f32	s16, s0
 80184d6:	eef0 8a60 	vmov.f32	s17, s1
 80184da:	46c8      	mov	r8, r9
 80184dc:	d05f      	beq.n	801859e <pow+0xee>
 80184de:	4622      	mov	r2, r4
 80184e0:	462b      	mov	r3, r5
 80184e2:	4620      	mov	r0, r4
 80184e4:	4629      	mov	r1, r5
 80184e6:	f7e8 fb41 	bl	8000b6c <__aeabi_dcmpun>
 80184ea:	4683      	mov	fp, r0
 80184ec:	2800      	cmp	r0, #0
 80184ee:	d156      	bne.n	801859e <pow+0xee>
 80184f0:	4632      	mov	r2, r6
 80184f2:	463b      	mov	r3, r7
 80184f4:	4630      	mov	r0, r6
 80184f6:	4639      	mov	r1, r7
 80184f8:	f7e8 fb38 	bl	8000b6c <__aeabi_dcmpun>
 80184fc:	9001      	str	r0, [sp, #4]
 80184fe:	b1e8      	cbz	r0, 801853c <pow+0x8c>
 8018500:	2200      	movs	r2, #0
 8018502:	2300      	movs	r3, #0
 8018504:	4620      	mov	r0, r4
 8018506:	4629      	mov	r1, r5
 8018508:	f7e8 fafe 	bl	8000b08 <__aeabi_dcmpeq>
 801850c:	2800      	cmp	r0, #0
 801850e:	d046      	beq.n	801859e <pow+0xee>
 8018510:	2301      	movs	r3, #1
 8018512:	9302      	str	r3, [sp, #8]
 8018514:	4b96      	ldr	r3, [pc, #600]	; (8018770 <pow+0x2c0>)
 8018516:	9303      	str	r3, [sp, #12]
 8018518:	4b96      	ldr	r3, [pc, #600]	; (8018774 <pow+0x2c4>)
 801851a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801851e:	2200      	movs	r2, #0
 8018520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018524:	9b00      	ldr	r3, [sp, #0]
 8018526:	2b02      	cmp	r3, #2
 8018528:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801852c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018530:	d033      	beq.n	801859a <pow+0xea>
 8018532:	a802      	add	r0, sp, #8
 8018534:	f001 fbce 	bl	8019cd4 <matherr>
 8018538:	bb48      	cbnz	r0, 801858e <pow+0xde>
 801853a:	e05d      	b.n	80185f8 <pow+0x148>
 801853c:	f04f 0a00 	mov.w	sl, #0
 8018540:	f04f 0b00 	mov.w	fp, #0
 8018544:	4652      	mov	r2, sl
 8018546:	465b      	mov	r3, fp
 8018548:	4630      	mov	r0, r6
 801854a:	4639      	mov	r1, r7
 801854c:	f7e8 fadc 	bl	8000b08 <__aeabi_dcmpeq>
 8018550:	ec4b ab19 	vmov	d9, sl, fp
 8018554:	2800      	cmp	r0, #0
 8018556:	d054      	beq.n	8018602 <pow+0x152>
 8018558:	4652      	mov	r2, sl
 801855a:	465b      	mov	r3, fp
 801855c:	4620      	mov	r0, r4
 801855e:	4629      	mov	r1, r5
 8018560:	f7e8 fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8018564:	4680      	mov	r8, r0
 8018566:	b318      	cbz	r0, 80185b0 <pow+0x100>
 8018568:	2301      	movs	r3, #1
 801856a:	9302      	str	r3, [sp, #8]
 801856c:	4b80      	ldr	r3, [pc, #512]	; (8018770 <pow+0x2c0>)
 801856e:	9303      	str	r3, [sp, #12]
 8018570:	9b01      	ldr	r3, [sp, #4]
 8018572:	930a      	str	r3, [sp, #40]	; 0x28
 8018574:	9b00      	ldr	r3, [sp, #0]
 8018576:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801857a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801857e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d0d5      	beq.n	8018532 <pow+0x82>
 8018586:	4b7b      	ldr	r3, [pc, #492]	; (8018774 <pow+0x2c4>)
 8018588:	2200      	movs	r2, #0
 801858a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801858e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018590:	b11b      	cbz	r3, 801859a <pow+0xea>
 8018592:	f7ff fadd 	bl	8017b50 <__errno>
 8018596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018598:	6003      	str	r3, [r0, #0]
 801859a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801859e:	eeb0 0a48 	vmov.f32	s0, s16
 80185a2:	eef0 0a68 	vmov.f32	s1, s17
 80185a6:	b00d      	add	sp, #52	; 0x34
 80185a8:	ecbd 8b04 	vpop	{d8-d9}
 80185ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185b0:	ec45 4b10 	vmov	d0, r4, r5
 80185b4:	f001 fb86 	bl	8019cc4 <finite>
 80185b8:	2800      	cmp	r0, #0
 80185ba:	d0f0      	beq.n	801859e <pow+0xee>
 80185bc:	4652      	mov	r2, sl
 80185be:	465b      	mov	r3, fp
 80185c0:	4620      	mov	r0, r4
 80185c2:	4629      	mov	r1, r5
 80185c4:	f7e8 faaa 	bl	8000b1c <__aeabi_dcmplt>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d0e8      	beq.n	801859e <pow+0xee>
 80185cc:	2301      	movs	r3, #1
 80185ce:	9302      	str	r3, [sp, #8]
 80185d0:	4b67      	ldr	r3, [pc, #412]	; (8018770 <pow+0x2c0>)
 80185d2:	9303      	str	r3, [sp, #12]
 80185d4:	f999 3000 	ldrsb.w	r3, [r9]
 80185d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80185dc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80185e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80185e4:	b913      	cbnz	r3, 80185ec <pow+0x13c>
 80185e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80185ea:	e7a2      	b.n	8018532 <pow+0x82>
 80185ec:	4962      	ldr	r1, [pc, #392]	; (8018778 <pow+0x2c8>)
 80185ee:	2000      	movs	r0, #0
 80185f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80185f4:	2b02      	cmp	r3, #2
 80185f6:	d19c      	bne.n	8018532 <pow+0x82>
 80185f8:	f7ff faaa 	bl	8017b50 <__errno>
 80185fc:	2321      	movs	r3, #33	; 0x21
 80185fe:	6003      	str	r3, [r0, #0]
 8018600:	e7c5      	b.n	801858e <pow+0xde>
 8018602:	eeb0 0a48 	vmov.f32	s0, s16
 8018606:	eef0 0a68 	vmov.f32	s1, s17
 801860a:	f001 fb5b 	bl	8019cc4 <finite>
 801860e:	9000      	str	r0, [sp, #0]
 8018610:	2800      	cmp	r0, #0
 8018612:	f040 8081 	bne.w	8018718 <pow+0x268>
 8018616:	ec47 6b10 	vmov	d0, r6, r7
 801861a:	f001 fb53 	bl	8019cc4 <finite>
 801861e:	2800      	cmp	r0, #0
 8018620:	d07a      	beq.n	8018718 <pow+0x268>
 8018622:	ec45 4b10 	vmov	d0, r4, r5
 8018626:	f001 fb4d 	bl	8019cc4 <finite>
 801862a:	2800      	cmp	r0, #0
 801862c:	d074      	beq.n	8018718 <pow+0x268>
 801862e:	ec53 2b18 	vmov	r2, r3, d8
 8018632:	ee18 0a10 	vmov	r0, s16
 8018636:	4619      	mov	r1, r3
 8018638:	f7e8 fa98 	bl	8000b6c <__aeabi_dcmpun>
 801863c:	f999 9000 	ldrsb.w	r9, [r9]
 8018640:	4b4b      	ldr	r3, [pc, #300]	; (8018770 <pow+0x2c0>)
 8018642:	b1b0      	cbz	r0, 8018672 <pow+0x1c2>
 8018644:	2201      	movs	r2, #1
 8018646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801864a:	9b00      	ldr	r3, [sp, #0]
 801864c:	930a      	str	r3, [sp, #40]	; 0x28
 801864e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018652:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018656:	f1b9 0f00 	cmp.w	r9, #0
 801865a:	d0c4      	beq.n	80185e6 <pow+0x136>
 801865c:	4652      	mov	r2, sl
 801865e:	465b      	mov	r3, fp
 8018660:	4650      	mov	r0, sl
 8018662:	4659      	mov	r1, fp
 8018664:	f7e8 f912 	bl	800088c <__aeabi_ddiv>
 8018668:	f1b9 0f02 	cmp.w	r9, #2
 801866c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018670:	e7c1      	b.n	80185f6 <pow+0x146>
 8018672:	2203      	movs	r2, #3
 8018674:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018678:	900a      	str	r0, [sp, #40]	; 0x28
 801867a:	4629      	mov	r1, r5
 801867c:	4620      	mov	r0, r4
 801867e:	2200      	movs	r2, #0
 8018680:	4b3e      	ldr	r3, [pc, #248]	; (801877c <pow+0x2cc>)
 8018682:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8018686:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801868a:	f7e7 ffd5 	bl	8000638 <__aeabi_dmul>
 801868e:	4604      	mov	r4, r0
 8018690:	460d      	mov	r5, r1
 8018692:	f1b9 0f00 	cmp.w	r9, #0
 8018696:	d124      	bne.n	80186e2 <pow+0x232>
 8018698:	4b39      	ldr	r3, [pc, #228]	; (8018780 <pow+0x2d0>)
 801869a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801869e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186a2:	4630      	mov	r0, r6
 80186a4:	4652      	mov	r2, sl
 80186a6:	465b      	mov	r3, fp
 80186a8:	4639      	mov	r1, r7
 80186aa:	f7e8 fa37 	bl	8000b1c <__aeabi_dcmplt>
 80186ae:	2800      	cmp	r0, #0
 80186b0:	d056      	beq.n	8018760 <pow+0x2b0>
 80186b2:	ec45 4b10 	vmov	d0, r4, r5
 80186b6:	f001 fb17 	bl	8019ce8 <rint>
 80186ba:	4622      	mov	r2, r4
 80186bc:	462b      	mov	r3, r5
 80186be:	ec51 0b10 	vmov	r0, r1, d0
 80186c2:	f7e8 fa21 	bl	8000b08 <__aeabi_dcmpeq>
 80186c6:	b920      	cbnz	r0, 80186d2 <pow+0x222>
 80186c8:	4b2e      	ldr	r3, [pc, #184]	; (8018784 <pow+0x2d4>)
 80186ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80186ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186d2:	f998 3000 	ldrsb.w	r3, [r8]
 80186d6:	2b02      	cmp	r3, #2
 80186d8:	d142      	bne.n	8018760 <pow+0x2b0>
 80186da:	f7ff fa39 	bl	8017b50 <__errno>
 80186de:	2322      	movs	r3, #34	; 0x22
 80186e0:	e78d      	b.n	80185fe <pow+0x14e>
 80186e2:	4b29      	ldr	r3, [pc, #164]	; (8018788 <pow+0x2d8>)
 80186e4:	2200      	movs	r2, #0
 80186e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80186ea:	4630      	mov	r0, r6
 80186ec:	4652      	mov	r2, sl
 80186ee:	465b      	mov	r3, fp
 80186f0:	4639      	mov	r1, r7
 80186f2:	f7e8 fa13 	bl	8000b1c <__aeabi_dcmplt>
 80186f6:	2800      	cmp	r0, #0
 80186f8:	d0eb      	beq.n	80186d2 <pow+0x222>
 80186fa:	ec45 4b10 	vmov	d0, r4, r5
 80186fe:	f001 faf3 	bl	8019ce8 <rint>
 8018702:	4622      	mov	r2, r4
 8018704:	462b      	mov	r3, r5
 8018706:	ec51 0b10 	vmov	r0, r1, d0
 801870a:	f7e8 f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 801870e:	2800      	cmp	r0, #0
 8018710:	d1df      	bne.n	80186d2 <pow+0x222>
 8018712:	2200      	movs	r2, #0
 8018714:	4b18      	ldr	r3, [pc, #96]	; (8018778 <pow+0x2c8>)
 8018716:	e7da      	b.n	80186ce <pow+0x21e>
 8018718:	2200      	movs	r2, #0
 801871a:	2300      	movs	r3, #0
 801871c:	ec51 0b18 	vmov	r0, r1, d8
 8018720:	f7e8 f9f2 	bl	8000b08 <__aeabi_dcmpeq>
 8018724:	2800      	cmp	r0, #0
 8018726:	f43f af3a 	beq.w	801859e <pow+0xee>
 801872a:	ec47 6b10 	vmov	d0, r6, r7
 801872e:	f001 fac9 	bl	8019cc4 <finite>
 8018732:	2800      	cmp	r0, #0
 8018734:	f43f af33 	beq.w	801859e <pow+0xee>
 8018738:	ec45 4b10 	vmov	d0, r4, r5
 801873c:	f001 fac2 	bl	8019cc4 <finite>
 8018740:	2800      	cmp	r0, #0
 8018742:	f43f af2c 	beq.w	801859e <pow+0xee>
 8018746:	2304      	movs	r3, #4
 8018748:	9302      	str	r3, [sp, #8]
 801874a:	4b09      	ldr	r3, [pc, #36]	; (8018770 <pow+0x2c0>)
 801874c:	9303      	str	r3, [sp, #12]
 801874e:	2300      	movs	r3, #0
 8018750:	930a      	str	r3, [sp, #40]	; 0x28
 8018752:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018756:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801875a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801875e:	e7b8      	b.n	80186d2 <pow+0x222>
 8018760:	a802      	add	r0, sp, #8
 8018762:	f001 fab7 	bl	8019cd4 <matherr>
 8018766:	2800      	cmp	r0, #0
 8018768:	f47f af11 	bne.w	801858e <pow+0xde>
 801876c:	e7b5      	b.n	80186da <pow+0x22a>
 801876e:	bf00      	nop
 8018770:	0801ada0 	.word	0x0801ada0
 8018774:	3ff00000 	.word	0x3ff00000
 8018778:	fff00000 	.word	0xfff00000
 801877c:	3fe00000 	.word	0x3fe00000
 8018780:	47efffff 	.word	0x47efffff
 8018784:	c7efffff 	.word	0xc7efffff
 8018788:	7ff00000 	.word	0x7ff00000
 801878c:	200001f8 	.word	0x200001f8

08018790 <sqrt>:
 8018790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018794:	ed2d 8b02 	vpush	{d8}
 8018798:	b08b      	sub	sp, #44	; 0x2c
 801879a:	ec55 4b10 	vmov	r4, r5, d0
 801879e:	f000 ff15 	bl	80195cc <__ieee754_sqrt>
 80187a2:	4b26      	ldr	r3, [pc, #152]	; (801883c <sqrt+0xac>)
 80187a4:	eeb0 8a40 	vmov.f32	s16, s0
 80187a8:	eef0 8a60 	vmov.f32	s17, s1
 80187ac:	f993 6000 	ldrsb.w	r6, [r3]
 80187b0:	1c73      	adds	r3, r6, #1
 80187b2:	d02a      	beq.n	801880a <sqrt+0x7a>
 80187b4:	4622      	mov	r2, r4
 80187b6:	462b      	mov	r3, r5
 80187b8:	4620      	mov	r0, r4
 80187ba:	4629      	mov	r1, r5
 80187bc:	f7e8 f9d6 	bl	8000b6c <__aeabi_dcmpun>
 80187c0:	4607      	mov	r7, r0
 80187c2:	bb10      	cbnz	r0, 801880a <sqrt+0x7a>
 80187c4:	f04f 0800 	mov.w	r8, #0
 80187c8:	f04f 0900 	mov.w	r9, #0
 80187cc:	4642      	mov	r2, r8
 80187ce:	464b      	mov	r3, r9
 80187d0:	4620      	mov	r0, r4
 80187d2:	4629      	mov	r1, r5
 80187d4:	f7e8 f9a2 	bl	8000b1c <__aeabi_dcmplt>
 80187d8:	b1b8      	cbz	r0, 801880a <sqrt+0x7a>
 80187da:	2301      	movs	r3, #1
 80187dc:	9300      	str	r3, [sp, #0]
 80187de:	4b18      	ldr	r3, [pc, #96]	; (8018840 <sqrt+0xb0>)
 80187e0:	9301      	str	r3, [sp, #4]
 80187e2:	9708      	str	r7, [sp, #32]
 80187e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80187e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80187ec:	b9b6      	cbnz	r6, 801881c <sqrt+0x8c>
 80187ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80187f2:	4668      	mov	r0, sp
 80187f4:	f001 fa6e 	bl	8019cd4 <matherr>
 80187f8:	b1d0      	cbz	r0, 8018830 <sqrt+0xa0>
 80187fa:	9b08      	ldr	r3, [sp, #32]
 80187fc:	b11b      	cbz	r3, 8018806 <sqrt+0x76>
 80187fe:	f7ff f9a7 	bl	8017b50 <__errno>
 8018802:	9b08      	ldr	r3, [sp, #32]
 8018804:	6003      	str	r3, [r0, #0]
 8018806:	ed9d 8b06 	vldr	d8, [sp, #24]
 801880a:	eeb0 0a48 	vmov.f32	s0, s16
 801880e:	eef0 0a68 	vmov.f32	s1, s17
 8018812:	b00b      	add	sp, #44	; 0x2c
 8018814:	ecbd 8b02 	vpop	{d8}
 8018818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801881c:	4642      	mov	r2, r8
 801881e:	464b      	mov	r3, r9
 8018820:	4640      	mov	r0, r8
 8018822:	4649      	mov	r1, r9
 8018824:	f7e8 f832 	bl	800088c <__aeabi_ddiv>
 8018828:	2e02      	cmp	r6, #2
 801882a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801882e:	d1e0      	bne.n	80187f2 <sqrt+0x62>
 8018830:	f7ff f98e 	bl	8017b50 <__errno>
 8018834:	2321      	movs	r3, #33	; 0x21
 8018836:	6003      	str	r3, [r0, #0]
 8018838:	e7df      	b.n	80187fa <sqrt+0x6a>
 801883a:	bf00      	nop
 801883c:	200001f8 	.word	0x200001f8
 8018840:	0801ada4 	.word	0x0801ada4

08018844 <powf>:
 8018844:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8018848:	ed2d 8b04 	vpush	{d8-d9}
 801884c:	4ca7      	ldr	r4, [pc, #668]	; (8018aec <powf+0x2a8>)
 801884e:	b08a      	sub	sp, #40	; 0x28
 8018850:	eef0 8a40 	vmov.f32	s17, s0
 8018854:	eeb0 8a60 	vmov.f32	s16, s1
 8018858:	f000 ff68 	bl	801972c <__ieee754_powf>
 801885c:	f994 5000 	ldrsb.w	r5, [r4]
 8018860:	1c6b      	adds	r3, r5, #1
 8018862:	eeb0 9a40 	vmov.f32	s18, s0
 8018866:	4626      	mov	r6, r4
 8018868:	d05f      	beq.n	801892a <powf+0xe6>
 801886a:	eeb4 8a48 	vcmp.f32	s16, s16
 801886e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018872:	d65a      	bvs.n	801892a <powf+0xe6>
 8018874:	eef4 8a68 	vcmp.f32	s17, s17
 8018878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801887c:	d721      	bvc.n	80188c2 <powf+0x7e>
 801887e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018886:	d150      	bne.n	801892a <powf+0xe6>
 8018888:	2301      	movs	r3, #1
 801888a:	9300      	str	r3, [sp, #0]
 801888c:	4b98      	ldr	r3, [pc, #608]	; (8018af0 <powf+0x2ac>)
 801888e:	9301      	str	r3, [sp, #4]
 8018890:	ee18 0a90 	vmov	r0, s17
 8018894:	2300      	movs	r3, #0
 8018896:	9308      	str	r3, [sp, #32]
 8018898:	f7e7 fe76 	bl	8000588 <__aeabi_f2d>
 801889c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188a0:	ee18 0a10 	vmov	r0, s16
 80188a4:	f7e7 fe70 	bl	8000588 <__aeabi_f2d>
 80188a8:	4b92      	ldr	r3, [pc, #584]	; (8018af4 <powf+0x2b0>)
 80188aa:	2200      	movs	r2, #0
 80188ac:	2d02      	cmp	r5, #2
 80188ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80188b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80188b6:	d032      	beq.n	801891e <powf+0xda>
 80188b8:	4668      	mov	r0, sp
 80188ba:	f001 fa0b 	bl	8019cd4 <matherr>
 80188be:	bb40      	cbnz	r0, 8018912 <powf+0xce>
 80188c0:	e065      	b.n	801898e <powf+0x14a>
 80188c2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8018af8 <powf+0x2b4>
 80188c6:	eef4 8a69 	vcmp.f32	s17, s19
 80188ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ce:	d163      	bne.n	8018998 <powf+0x154>
 80188d0:	eeb4 8a69 	vcmp.f32	s16, s19
 80188d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d8:	d12e      	bne.n	8018938 <powf+0xf4>
 80188da:	2301      	movs	r3, #1
 80188dc:	9300      	str	r3, [sp, #0]
 80188de:	4b84      	ldr	r3, [pc, #528]	; (8018af0 <powf+0x2ac>)
 80188e0:	9301      	str	r3, [sp, #4]
 80188e2:	ee18 0a90 	vmov	r0, s17
 80188e6:	2300      	movs	r3, #0
 80188e8:	9308      	str	r3, [sp, #32]
 80188ea:	f7e7 fe4d 	bl	8000588 <__aeabi_f2d>
 80188ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80188f2:	ee18 0a10 	vmov	r0, s16
 80188f6:	f7e7 fe47 	bl	8000588 <__aeabi_f2d>
 80188fa:	2200      	movs	r2, #0
 80188fc:	2300      	movs	r3, #0
 80188fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018902:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018906:	2d00      	cmp	r5, #0
 8018908:	d0d6      	beq.n	80188b8 <powf+0x74>
 801890a:	4b7a      	ldr	r3, [pc, #488]	; (8018af4 <powf+0x2b0>)
 801890c:	2200      	movs	r2, #0
 801890e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018912:	9b08      	ldr	r3, [sp, #32]
 8018914:	b11b      	cbz	r3, 801891e <powf+0xda>
 8018916:	f7ff f91b 	bl	8017b50 <__errno>
 801891a:	9b08      	ldr	r3, [sp, #32]
 801891c:	6003      	str	r3, [r0, #0]
 801891e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018922:	f7e8 f939 	bl	8000b98 <__aeabi_d2f>
 8018926:	ee09 0a10 	vmov	s18, r0
 801892a:	eeb0 0a49 	vmov.f32	s0, s18
 801892e:	b00a      	add	sp, #40	; 0x28
 8018930:	ecbd 8b04 	vpop	{d8-d9}
 8018934:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8018938:	eeb0 0a48 	vmov.f32	s0, s16
 801893c:	f001 fad5 	bl	8019eea <finitef>
 8018940:	2800      	cmp	r0, #0
 8018942:	d0f2      	beq.n	801892a <powf+0xe6>
 8018944:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801894c:	d5ed      	bpl.n	801892a <powf+0xe6>
 801894e:	2301      	movs	r3, #1
 8018950:	9300      	str	r3, [sp, #0]
 8018952:	4b67      	ldr	r3, [pc, #412]	; (8018af0 <powf+0x2ac>)
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	ee18 0a90 	vmov	r0, s17
 801895a:	2300      	movs	r3, #0
 801895c:	9308      	str	r3, [sp, #32]
 801895e:	f7e7 fe13 	bl	8000588 <__aeabi_f2d>
 8018962:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018966:	ee18 0a10 	vmov	r0, s16
 801896a:	f7e7 fe0d 	bl	8000588 <__aeabi_f2d>
 801896e:	f994 3000 	ldrsb.w	r3, [r4]
 8018972:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018976:	b923      	cbnz	r3, 8018982 <powf+0x13e>
 8018978:	2200      	movs	r2, #0
 801897a:	2300      	movs	r3, #0
 801897c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018980:	e79a      	b.n	80188b8 <powf+0x74>
 8018982:	495e      	ldr	r1, [pc, #376]	; (8018afc <powf+0x2b8>)
 8018984:	2000      	movs	r0, #0
 8018986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801898a:	2b02      	cmp	r3, #2
 801898c:	d194      	bne.n	80188b8 <powf+0x74>
 801898e:	f7ff f8df 	bl	8017b50 <__errno>
 8018992:	2321      	movs	r3, #33	; 0x21
 8018994:	6003      	str	r3, [r0, #0]
 8018996:	e7bc      	b.n	8018912 <powf+0xce>
 8018998:	f001 faa7 	bl	8019eea <finitef>
 801899c:	4605      	mov	r5, r0
 801899e:	2800      	cmp	r0, #0
 80189a0:	d173      	bne.n	8018a8a <powf+0x246>
 80189a2:	eeb0 0a68 	vmov.f32	s0, s17
 80189a6:	f001 faa0 	bl	8019eea <finitef>
 80189aa:	2800      	cmp	r0, #0
 80189ac:	d06d      	beq.n	8018a8a <powf+0x246>
 80189ae:	eeb0 0a48 	vmov.f32	s0, s16
 80189b2:	f001 fa9a 	bl	8019eea <finitef>
 80189b6:	2800      	cmp	r0, #0
 80189b8:	d067      	beq.n	8018a8a <powf+0x246>
 80189ba:	ee18 0a90 	vmov	r0, s17
 80189be:	f7e7 fde3 	bl	8000588 <__aeabi_f2d>
 80189c2:	4680      	mov	r8, r0
 80189c4:	ee18 0a10 	vmov	r0, s16
 80189c8:	4689      	mov	r9, r1
 80189ca:	f7e7 fddd 	bl	8000588 <__aeabi_f2d>
 80189ce:	eeb4 9a49 	vcmp.f32	s18, s18
 80189d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d6:	f994 4000 	ldrsb.w	r4, [r4]
 80189da:	4b45      	ldr	r3, [pc, #276]	; (8018af0 <powf+0x2ac>)
 80189dc:	d713      	bvc.n	8018a06 <powf+0x1c2>
 80189de:	2201      	movs	r2, #1
 80189e0:	e9cd 2300 	strd	r2, r3, [sp]
 80189e4:	9508      	str	r5, [sp, #32]
 80189e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80189ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80189ee:	2c00      	cmp	r4, #0
 80189f0:	d0c2      	beq.n	8018978 <powf+0x134>
 80189f2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80189f6:	ee17 0a90 	vmov	r0, s15
 80189fa:	f7e7 fdc5 	bl	8000588 <__aeabi_f2d>
 80189fe:	2c02      	cmp	r4, #2
 8018a00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018a04:	e7c2      	b.n	801898c <powf+0x148>
 8018a06:	2203      	movs	r2, #3
 8018a08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018a0c:	e9cd 2300 	strd	r2, r3, [sp]
 8018a10:	9508      	str	r5, [sp, #32]
 8018a12:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8018a16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018a1a:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018a1e:	b9fc      	cbnz	r4, 8018a60 <powf+0x21c>
 8018a20:	4b37      	ldr	r3, [pc, #220]	; (8018b00 <powf+0x2bc>)
 8018a22:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018a26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a32:	d553      	bpl.n	8018adc <powf+0x298>
 8018a34:	eeb0 0a48 	vmov.f32	s0, s16
 8018a38:	f001 fa68 	bl	8019f0c <rintf>
 8018a3c:	eeb4 0a48 	vcmp.f32	s0, s16
 8018a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a44:	d004      	beq.n	8018a50 <powf+0x20c>
 8018a46:	4b2f      	ldr	r3, [pc, #188]	; (8018b04 <powf+0x2c0>)
 8018a48:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8018a4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a50:	f996 3000 	ldrsb.w	r3, [r6]
 8018a54:	2b02      	cmp	r3, #2
 8018a56:	d141      	bne.n	8018adc <powf+0x298>
 8018a58:	f7ff f87a 	bl	8017b50 <__errno>
 8018a5c:	2322      	movs	r3, #34	; 0x22
 8018a5e:	e799      	b.n	8018994 <powf+0x150>
 8018a60:	4b29      	ldr	r3, [pc, #164]	; (8018b08 <powf+0x2c4>)
 8018a62:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018a66:	2200      	movs	r2, #0
 8018a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a6c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018a70:	d5ee      	bpl.n	8018a50 <powf+0x20c>
 8018a72:	eeb0 0a48 	vmov.f32	s0, s16
 8018a76:	f001 fa49 	bl	8019f0c <rintf>
 8018a7a:	eeb4 0a48 	vcmp.f32	s0, s16
 8018a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a82:	d0e5      	beq.n	8018a50 <powf+0x20c>
 8018a84:	2200      	movs	r2, #0
 8018a86:	4b1d      	ldr	r3, [pc, #116]	; (8018afc <powf+0x2b8>)
 8018a88:	e7e0      	b.n	8018a4c <powf+0x208>
 8018a8a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a92:	f47f af4a 	bne.w	801892a <powf+0xe6>
 8018a96:	eeb0 0a68 	vmov.f32	s0, s17
 8018a9a:	f001 fa26 	bl	8019eea <finitef>
 8018a9e:	2800      	cmp	r0, #0
 8018aa0:	f43f af43 	beq.w	801892a <powf+0xe6>
 8018aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8018aa8:	f001 fa1f 	bl	8019eea <finitef>
 8018aac:	2800      	cmp	r0, #0
 8018aae:	f43f af3c 	beq.w	801892a <powf+0xe6>
 8018ab2:	2304      	movs	r3, #4
 8018ab4:	9300      	str	r3, [sp, #0]
 8018ab6:	4b0e      	ldr	r3, [pc, #56]	; (8018af0 <powf+0x2ac>)
 8018ab8:	9301      	str	r3, [sp, #4]
 8018aba:	ee18 0a90 	vmov	r0, s17
 8018abe:	2300      	movs	r3, #0
 8018ac0:	9308      	str	r3, [sp, #32]
 8018ac2:	f7e7 fd61 	bl	8000588 <__aeabi_f2d>
 8018ac6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018aca:	ee18 0a10 	vmov	r0, s16
 8018ace:	f7e7 fd5b 	bl	8000588 <__aeabi_f2d>
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018ad8:	2300      	movs	r3, #0
 8018ada:	e7b7      	b.n	8018a4c <powf+0x208>
 8018adc:	4668      	mov	r0, sp
 8018ade:	f001 f8f9 	bl	8019cd4 <matherr>
 8018ae2:	2800      	cmp	r0, #0
 8018ae4:	f47f af15 	bne.w	8018912 <powf+0xce>
 8018ae8:	e7b6      	b.n	8018a58 <powf+0x214>
 8018aea:	bf00      	nop
 8018aec:	200001f8 	.word	0x200001f8
 8018af0:	0801ada9 	.word	0x0801ada9
 8018af4:	3ff00000 	.word	0x3ff00000
 8018af8:	00000000 	.word	0x00000000
 8018afc:	fff00000 	.word	0xfff00000
 8018b00:	47efffff 	.word	0x47efffff
 8018b04:	c7efffff 	.word	0xc7efffff
 8018b08:	7ff00000 	.word	0x7ff00000

08018b0c <sqrtf>:
 8018b0c:	b510      	push	{r4, lr}
 8018b0e:	ed2d 8b02 	vpush	{d8}
 8018b12:	b08a      	sub	sp, #40	; 0x28
 8018b14:	eeb0 8a40 	vmov.f32	s16, s0
 8018b18:	f001 f8c8 	bl	8019cac <__ieee754_sqrtf>
 8018b1c:	4b21      	ldr	r3, [pc, #132]	; (8018ba4 <sqrtf+0x98>)
 8018b1e:	f993 4000 	ldrsb.w	r4, [r3]
 8018b22:	1c63      	adds	r3, r4, #1
 8018b24:	d02c      	beq.n	8018b80 <sqrtf+0x74>
 8018b26:	eeb4 8a48 	vcmp.f32	s16, s16
 8018b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b2e:	d627      	bvs.n	8018b80 <sqrtf+0x74>
 8018b30:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b38:	d522      	bpl.n	8018b80 <sqrtf+0x74>
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	9300      	str	r3, [sp, #0]
 8018b3e:	4b1a      	ldr	r3, [pc, #104]	; (8018ba8 <sqrtf+0x9c>)
 8018b40:	9301      	str	r3, [sp, #4]
 8018b42:	ee18 0a10 	vmov	r0, s16
 8018b46:	2300      	movs	r3, #0
 8018b48:	9308      	str	r3, [sp, #32]
 8018b4a:	f7e7 fd1d 	bl	8000588 <__aeabi_f2d>
 8018b4e:	2200      	movs	r2, #0
 8018b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b58:	2300      	movs	r3, #0
 8018b5a:	b9ac      	cbnz	r4, 8018b88 <sqrtf+0x7c>
 8018b5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018b60:	4668      	mov	r0, sp
 8018b62:	f001 f8b7 	bl	8019cd4 <matherr>
 8018b66:	b1b8      	cbz	r0, 8018b98 <sqrtf+0x8c>
 8018b68:	9b08      	ldr	r3, [sp, #32]
 8018b6a:	b11b      	cbz	r3, 8018b74 <sqrtf+0x68>
 8018b6c:	f7fe fff0 	bl	8017b50 <__errno>
 8018b70:	9b08      	ldr	r3, [sp, #32]
 8018b72:	6003      	str	r3, [r0, #0]
 8018b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018b78:	f7e8 f80e 	bl	8000b98 <__aeabi_d2f>
 8018b7c:	ee00 0a10 	vmov	s0, r0
 8018b80:	b00a      	add	sp, #40	; 0x28
 8018b82:	ecbd 8b02 	vpop	{d8}
 8018b86:	bd10      	pop	{r4, pc}
 8018b88:	4610      	mov	r0, r2
 8018b8a:	4619      	mov	r1, r3
 8018b8c:	f7e7 fe7e 	bl	800088c <__aeabi_ddiv>
 8018b90:	2c02      	cmp	r4, #2
 8018b92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018b96:	d1e3      	bne.n	8018b60 <sqrtf+0x54>
 8018b98:	f7fe ffda 	bl	8017b50 <__errno>
 8018b9c:	2321      	movs	r3, #33	; 0x21
 8018b9e:	6003      	str	r3, [r0, #0]
 8018ba0:	e7e2      	b.n	8018b68 <sqrtf+0x5c>
 8018ba2:	bf00      	nop
 8018ba4:	200001f8 	.word	0x200001f8
 8018ba8:	0801adae 	.word	0x0801adae
 8018bac:	00000000 	.word	0x00000000

08018bb0 <__ieee754_pow>:
 8018bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb4:	b091      	sub	sp, #68	; 0x44
 8018bb6:	ed8d 1b00 	vstr	d1, [sp]
 8018bba:	e9dd 2900 	ldrd	r2, r9, [sp]
 8018bbe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8018bc2:	ea58 0302 	orrs.w	r3, r8, r2
 8018bc6:	ec57 6b10 	vmov	r6, r7, d0
 8018bca:	f000 84be 	beq.w	801954a <__ieee754_pow+0x99a>
 8018bce:	4b7a      	ldr	r3, [pc, #488]	; (8018db8 <__ieee754_pow+0x208>)
 8018bd0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8018bd4:	429c      	cmp	r4, r3
 8018bd6:	463d      	mov	r5, r7
 8018bd8:	ee10 aa10 	vmov	sl, s0
 8018bdc:	dc09      	bgt.n	8018bf2 <__ieee754_pow+0x42>
 8018bde:	d103      	bne.n	8018be8 <__ieee754_pow+0x38>
 8018be0:	b93e      	cbnz	r6, 8018bf2 <__ieee754_pow+0x42>
 8018be2:	45a0      	cmp	r8, r4
 8018be4:	dc0d      	bgt.n	8018c02 <__ieee754_pow+0x52>
 8018be6:	e001      	b.n	8018bec <__ieee754_pow+0x3c>
 8018be8:	4598      	cmp	r8, r3
 8018bea:	dc02      	bgt.n	8018bf2 <__ieee754_pow+0x42>
 8018bec:	4598      	cmp	r8, r3
 8018bee:	d10e      	bne.n	8018c0e <__ieee754_pow+0x5e>
 8018bf0:	b16a      	cbz	r2, 8018c0e <__ieee754_pow+0x5e>
 8018bf2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018bf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018bfa:	ea54 030a 	orrs.w	r3, r4, sl
 8018bfe:	f000 84a4 	beq.w	801954a <__ieee754_pow+0x99a>
 8018c02:	486e      	ldr	r0, [pc, #440]	; (8018dbc <__ieee754_pow+0x20c>)
 8018c04:	b011      	add	sp, #68	; 0x44
 8018c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c0a:	f001 b865 	b.w	8019cd8 <nan>
 8018c0e:	2d00      	cmp	r5, #0
 8018c10:	da53      	bge.n	8018cba <__ieee754_pow+0x10a>
 8018c12:	4b6b      	ldr	r3, [pc, #428]	; (8018dc0 <__ieee754_pow+0x210>)
 8018c14:	4598      	cmp	r8, r3
 8018c16:	dc4d      	bgt.n	8018cb4 <__ieee754_pow+0x104>
 8018c18:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8018c1c:	4598      	cmp	r8, r3
 8018c1e:	dd4c      	ble.n	8018cba <__ieee754_pow+0x10a>
 8018c20:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018c24:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018c28:	2b14      	cmp	r3, #20
 8018c2a:	dd26      	ble.n	8018c7a <__ieee754_pow+0xca>
 8018c2c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018c30:	fa22 f103 	lsr.w	r1, r2, r3
 8018c34:	fa01 f303 	lsl.w	r3, r1, r3
 8018c38:	4293      	cmp	r3, r2
 8018c3a:	d13e      	bne.n	8018cba <__ieee754_pow+0x10a>
 8018c3c:	f001 0101 	and.w	r1, r1, #1
 8018c40:	f1c1 0b02 	rsb	fp, r1, #2
 8018c44:	2a00      	cmp	r2, #0
 8018c46:	d15b      	bne.n	8018d00 <__ieee754_pow+0x150>
 8018c48:	4b5b      	ldr	r3, [pc, #364]	; (8018db8 <__ieee754_pow+0x208>)
 8018c4a:	4598      	cmp	r8, r3
 8018c4c:	d124      	bne.n	8018c98 <__ieee754_pow+0xe8>
 8018c4e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018c52:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018c56:	ea53 030a 	orrs.w	r3, r3, sl
 8018c5a:	f000 8476 	beq.w	801954a <__ieee754_pow+0x99a>
 8018c5e:	4b59      	ldr	r3, [pc, #356]	; (8018dc4 <__ieee754_pow+0x214>)
 8018c60:	429c      	cmp	r4, r3
 8018c62:	dd2d      	ble.n	8018cc0 <__ieee754_pow+0x110>
 8018c64:	f1b9 0f00 	cmp.w	r9, #0
 8018c68:	f280 8473 	bge.w	8019552 <__ieee754_pow+0x9a2>
 8018c6c:	2000      	movs	r0, #0
 8018c6e:	2100      	movs	r1, #0
 8018c70:	ec41 0b10 	vmov	d0, r0, r1
 8018c74:	b011      	add	sp, #68	; 0x44
 8018c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c7a:	2a00      	cmp	r2, #0
 8018c7c:	d13e      	bne.n	8018cfc <__ieee754_pow+0x14c>
 8018c7e:	f1c3 0314 	rsb	r3, r3, #20
 8018c82:	fa48 f103 	asr.w	r1, r8, r3
 8018c86:	fa01 f303 	lsl.w	r3, r1, r3
 8018c8a:	4543      	cmp	r3, r8
 8018c8c:	f040 8469 	bne.w	8019562 <__ieee754_pow+0x9b2>
 8018c90:	f001 0101 	and.w	r1, r1, #1
 8018c94:	f1c1 0b02 	rsb	fp, r1, #2
 8018c98:	4b4b      	ldr	r3, [pc, #300]	; (8018dc8 <__ieee754_pow+0x218>)
 8018c9a:	4598      	cmp	r8, r3
 8018c9c:	d118      	bne.n	8018cd0 <__ieee754_pow+0x120>
 8018c9e:	f1b9 0f00 	cmp.w	r9, #0
 8018ca2:	f280 845a 	bge.w	801955a <__ieee754_pow+0x9aa>
 8018ca6:	4948      	ldr	r1, [pc, #288]	; (8018dc8 <__ieee754_pow+0x218>)
 8018ca8:	4632      	mov	r2, r6
 8018caa:	463b      	mov	r3, r7
 8018cac:	2000      	movs	r0, #0
 8018cae:	f7e7 fded 	bl	800088c <__aeabi_ddiv>
 8018cb2:	e7dd      	b.n	8018c70 <__ieee754_pow+0xc0>
 8018cb4:	f04f 0b02 	mov.w	fp, #2
 8018cb8:	e7c4      	b.n	8018c44 <__ieee754_pow+0x94>
 8018cba:	f04f 0b00 	mov.w	fp, #0
 8018cbe:	e7c1      	b.n	8018c44 <__ieee754_pow+0x94>
 8018cc0:	f1b9 0f00 	cmp.w	r9, #0
 8018cc4:	dad2      	bge.n	8018c6c <__ieee754_pow+0xbc>
 8018cc6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8018cca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018cce:	e7cf      	b.n	8018c70 <__ieee754_pow+0xc0>
 8018cd0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8018cd4:	d106      	bne.n	8018ce4 <__ieee754_pow+0x134>
 8018cd6:	4632      	mov	r2, r6
 8018cd8:	463b      	mov	r3, r7
 8018cda:	4610      	mov	r0, r2
 8018cdc:	4619      	mov	r1, r3
 8018cde:	f7e7 fcab 	bl	8000638 <__aeabi_dmul>
 8018ce2:	e7c5      	b.n	8018c70 <__ieee754_pow+0xc0>
 8018ce4:	4b39      	ldr	r3, [pc, #228]	; (8018dcc <__ieee754_pow+0x21c>)
 8018ce6:	4599      	cmp	r9, r3
 8018ce8:	d10a      	bne.n	8018d00 <__ieee754_pow+0x150>
 8018cea:	2d00      	cmp	r5, #0
 8018cec:	db08      	blt.n	8018d00 <__ieee754_pow+0x150>
 8018cee:	ec47 6b10 	vmov	d0, r6, r7
 8018cf2:	b011      	add	sp, #68	; 0x44
 8018cf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cf8:	f000 bc68 	b.w	80195cc <__ieee754_sqrt>
 8018cfc:	f04f 0b00 	mov.w	fp, #0
 8018d00:	ec47 6b10 	vmov	d0, r6, r7
 8018d04:	f000 ffd5 	bl	8019cb2 <fabs>
 8018d08:	ec51 0b10 	vmov	r0, r1, d0
 8018d0c:	f1ba 0f00 	cmp.w	sl, #0
 8018d10:	d127      	bne.n	8018d62 <__ieee754_pow+0x1b2>
 8018d12:	b124      	cbz	r4, 8018d1e <__ieee754_pow+0x16e>
 8018d14:	4b2c      	ldr	r3, [pc, #176]	; (8018dc8 <__ieee754_pow+0x218>)
 8018d16:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8018d1a:	429a      	cmp	r2, r3
 8018d1c:	d121      	bne.n	8018d62 <__ieee754_pow+0x1b2>
 8018d1e:	f1b9 0f00 	cmp.w	r9, #0
 8018d22:	da05      	bge.n	8018d30 <__ieee754_pow+0x180>
 8018d24:	4602      	mov	r2, r0
 8018d26:	460b      	mov	r3, r1
 8018d28:	2000      	movs	r0, #0
 8018d2a:	4927      	ldr	r1, [pc, #156]	; (8018dc8 <__ieee754_pow+0x218>)
 8018d2c:	f7e7 fdae 	bl	800088c <__aeabi_ddiv>
 8018d30:	2d00      	cmp	r5, #0
 8018d32:	da9d      	bge.n	8018c70 <__ieee754_pow+0xc0>
 8018d34:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018d38:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018d3c:	ea54 030b 	orrs.w	r3, r4, fp
 8018d40:	d108      	bne.n	8018d54 <__ieee754_pow+0x1a4>
 8018d42:	4602      	mov	r2, r0
 8018d44:	460b      	mov	r3, r1
 8018d46:	4610      	mov	r0, r2
 8018d48:	4619      	mov	r1, r3
 8018d4a:	f7e7 fabd 	bl	80002c8 <__aeabi_dsub>
 8018d4e:	4602      	mov	r2, r0
 8018d50:	460b      	mov	r3, r1
 8018d52:	e7ac      	b.n	8018cae <__ieee754_pow+0xfe>
 8018d54:	f1bb 0f01 	cmp.w	fp, #1
 8018d58:	d18a      	bne.n	8018c70 <__ieee754_pow+0xc0>
 8018d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018d5e:	4619      	mov	r1, r3
 8018d60:	e786      	b.n	8018c70 <__ieee754_pow+0xc0>
 8018d62:	0fed      	lsrs	r5, r5, #31
 8018d64:	1e6b      	subs	r3, r5, #1
 8018d66:	930d      	str	r3, [sp, #52]	; 0x34
 8018d68:	ea5b 0303 	orrs.w	r3, fp, r3
 8018d6c:	d102      	bne.n	8018d74 <__ieee754_pow+0x1c4>
 8018d6e:	4632      	mov	r2, r6
 8018d70:	463b      	mov	r3, r7
 8018d72:	e7e8      	b.n	8018d46 <__ieee754_pow+0x196>
 8018d74:	4b16      	ldr	r3, [pc, #88]	; (8018dd0 <__ieee754_pow+0x220>)
 8018d76:	4598      	cmp	r8, r3
 8018d78:	f340 80fe 	ble.w	8018f78 <__ieee754_pow+0x3c8>
 8018d7c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018d80:	4598      	cmp	r8, r3
 8018d82:	dd0a      	ble.n	8018d9a <__ieee754_pow+0x1ea>
 8018d84:	4b0f      	ldr	r3, [pc, #60]	; (8018dc4 <__ieee754_pow+0x214>)
 8018d86:	429c      	cmp	r4, r3
 8018d88:	dc0d      	bgt.n	8018da6 <__ieee754_pow+0x1f6>
 8018d8a:	f1b9 0f00 	cmp.w	r9, #0
 8018d8e:	f6bf af6d 	bge.w	8018c6c <__ieee754_pow+0xbc>
 8018d92:	a307      	add	r3, pc, #28	; (adr r3, 8018db0 <__ieee754_pow+0x200>)
 8018d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d98:	e79f      	b.n	8018cda <__ieee754_pow+0x12a>
 8018d9a:	4b0e      	ldr	r3, [pc, #56]	; (8018dd4 <__ieee754_pow+0x224>)
 8018d9c:	429c      	cmp	r4, r3
 8018d9e:	ddf4      	ble.n	8018d8a <__ieee754_pow+0x1da>
 8018da0:	4b09      	ldr	r3, [pc, #36]	; (8018dc8 <__ieee754_pow+0x218>)
 8018da2:	429c      	cmp	r4, r3
 8018da4:	dd18      	ble.n	8018dd8 <__ieee754_pow+0x228>
 8018da6:	f1b9 0f00 	cmp.w	r9, #0
 8018daa:	dcf2      	bgt.n	8018d92 <__ieee754_pow+0x1e2>
 8018dac:	e75e      	b.n	8018c6c <__ieee754_pow+0xbc>
 8018dae:	bf00      	nop
 8018db0:	8800759c 	.word	0x8800759c
 8018db4:	7e37e43c 	.word	0x7e37e43c
 8018db8:	7ff00000 	.word	0x7ff00000
 8018dbc:	0801ad11 	.word	0x0801ad11
 8018dc0:	433fffff 	.word	0x433fffff
 8018dc4:	3fefffff 	.word	0x3fefffff
 8018dc8:	3ff00000 	.word	0x3ff00000
 8018dcc:	3fe00000 	.word	0x3fe00000
 8018dd0:	41e00000 	.word	0x41e00000
 8018dd4:	3feffffe 	.word	0x3feffffe
 8018dd8:	2200      	movs	r2, #0
 8018dda:	4b63      	ldr	r3, [pc, #396]	; (8018f68 <__ieee754_pow+0x3b8>)
 8018ddc:	f7e7 fa74 	bl	80002c8 <__aeabi_dsub>
 8018de0:	a355      	add	r3, pc, #340	; (adr r3, 8018f38 <__ieee754_pow+0x388>)
 8018de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018de6:	4604      	mov	r4, r0
 8018de8:	460d      	mov	r5, r1
 8018dea:	f7e7 fc25 	bl	8000638 <__aeabi_dmul>
 8018dee:	a354      	add	r3, pc, #336	; (adr r3, 8018f40 <__ieee754_pow+0x390>)
 8018df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df4:	4606      	mov	r6, r0
 8018df6:	460f      	mov	r7, r1
 8018df8:	4620      	mov	r0, r4
 8018dfa:	4629      	mov	r1, r5
 8018dfc:	f7e7 fc1c 	bl	8000638 <__aeabi_dmul>
 8018e00:	2200      	movs	r2, #0
 8018e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e06:	4b59      	ldr	r3, [pc, #356]	; (8018f6c <__ieee754_pow+0x3bc>)
 8018e08:	4620      	mov	r0, r4
 8018e0a:	4629      	mov	r1, r5
 8018e0c:	f7e7 fc14 	bl	8000638 <__aeabi_dmul>
 8018e10:	4602      	mov	r2, r0
 8018e12:	460b      	mov	r3, r1
 8018e14:	a14c      	add	r1, pc, #304	; (adr r1, 8018f48 <__ieee754_pow+0x398>)
 8018e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018e1a:	f7e7 fa55 	bl	80002c8 <__aeabi_dsub>
 8018e1e:	4622      	mov	r2, r4
 8018e20:	462b      	mov	r3, r5
 8018e22:	f7e7 fc09 	bl	8000638 <__aeabi_dmul>
 8018e26:	4602      	mov	r2, r0
 8018e28:	460b      	mov	r3, r1
 8018e2a:	2000      	movs	r0, #0
 8018e2c:	4950      	ldr	r1, [pc, #320]	; (8018f70 <__ieee754_pow+0x3c0>)
 8018e2e:	f7e7 fa4b 	bl	80002c8 <__aeabi_dsub>
 8018e32:	4622      	mov	r2, r4
 8018e34:	462b      	mov	r3, r5
 8018e36:	4680      	mov	r8, r0
 8018e38:	4689      	mov	r9, r1
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	4629      	mov	r1, r5
 8018e3e:	f7e7 fbfb 	bl	8000638 <__aeabi_dmul>
 8018e42:	4602      	mov	r2, r0
 8018e44:	460b      	mov	r3, r1
 8018e46:	4640      	mov	r0, r8
 8018e48:	4649      	mov	r1, r9
 8018e4a:	f7e7 fbf5 	bl	8000638 <__aeabi_dmul>
 8018e4e:	a340      	add	r3, pc, #256	; (adr r3, 8018f50 <__ieee754_pow+0x3a0>)
 8018e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e54:	f7e7 fbf0 	bl	8000638 <__aeabi_dmul>
 8018e58:	4602      	mov	r2, r0
 8018e5a:	460b      	mov	r3, r1
 8018e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018e60:	f7e7 fa32 	bl	80002c8 <__aeabi_dsub>
 8018e64:	4602      	mov	r2, r0
 8018e66:	460b      	mov	r3, r1
 8018e68:	4604      	mov	r4, r0
 8018e6a:	460d      	mov	r5, r1
 8018e6c:	4630      	mov	r0, r6
 8018e6e:	4639      	mov	r1, r7
 8018e70:	f7e7 fa2c 	bl	80002cc <__adddf3>
 8018e74:	2000      	movs	r0, #0
 8018e76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018e7a:	4632      	mov	r2, r6
 8018e7c:	463b      	mov	r3, r7
 8018e7e:	f7e7 fa23 	bl	80002c8 <__aeabi_dsub>
 8018e82:	4602      	mov	r2, r0
 8018e84:	460b      	mov	r3, r1
 8018e86:	4620      	mov	r0, r4
 8018e88:	4629      	mov	r1, r5
 8018e8a:	f7e7 fa1d 	bl	80002c8 <__aeabi_dsub>
 8018e8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018e90:	f10b 33ff 	add.w	r3, fp, #4294967295
 8018e94:	4313      	orrs	r3, r2
 8018e96:	4606      	mov	r6, r0
 8018e98:	460f      	mov	r7, r1
 8018e9a:	f040 81eb 	bne.w	8019274 <__ieee754_pow+0x6c4>
 8018e9e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018f58 <__ieee754_pow+0x3a8>
 8018ea2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8018ea6:	2400      	movs	r4, #0
 8018ea8:	4622      	mov	r2, r4
 8018eaa:	462b      	mov	r3, r5
 8018eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018eb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018eb4:	f7e7 fa08 	bl	80002c8 <__aeabi_dsub>
 8018eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ebc:	f7e7 fbbc 	bl	8000638 <__aeabi_dmul>
 8018ec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018ec4:	4680      	mov	r8, r0
 8018ec6:	4689      	mov	r9, r1
 8018ec8:	4630      	mov	r0, r6
 8018eca:	4639      	mov	r1, r7
 8018ecc:	f7e7 fbb4 	bl	8000638 <__aeabi_dmul>
 8018ed0:	4602      	mov	r2, r0
 8018ed2:	460b      	mov	r3, r1
 8018ed4:	4640      	mov	r0, r8
 8018ed6:	4649      	mov	r1, r9
 8018ed8:	f7e7 f9f8 	bl	80002cc <__adddf3>
 8018edc:	4622      	mov	r2, r4
 8018ede:	462b      	mov	r3, r5
 8018ee0:	4680      	mov	r8, r0
 8018ee2:	4689      	mov	r9, r1
 8018ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018ee8:	f7e7 fba6 	bl	8000638 <__aeabi_dmul>
 8018eec:	460b      	mov	r3, r1
 8018eee:	4604      	mov	r4, r0
 8018ef0:	460d      	mov	r5, r1
 8018ef2:	4602      	mov	r2, r0
 8018ef4:	4649      	mov	r1, r9
 8018ef6:	4640      	mov	r0, r8
 8018ef8:	e9cd 4500 	strd	r4, r5, [sp]
 8018efc:	f7e7 f9e6 	bl	80002cc <__adddf3>
 8018f00:	4b1c      	ldr	r3, [pc, #112]	; (8018f74 <__ieee754_pow+0x3c4>)
 8018f02:	4299      	cmp	r1, r3
 8018f04:	4606      	mov	r6, r0
 8018f06:	460f      	mov	r7, r1
 8018f08:	468b      	mov	fp, r1
 8018f0a:	f340 82f7 	ble.w	80194fc <__ieee754_pow+0x94c>
 8018f0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018f12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018f16:	4303      	orrs	r3, r0
 8018f18:	f000 81ea 	beq.w	80192f0 <__ieee754_pow+0x740>
 8018f1c:	a310      	add	r3, pc, #64	; (adr r3, 8018f60 <__ieee754_pow+0x3b0>)
 8018f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f26:	f7e7 fb87 	bl	8000638 <__aeabi_dmul>
 8018f2a:	a30d      	add	r3, pc, #52	; (adr r3, 8018f60 <__ieee754_pow+0x3b0>)
 8018f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f30:	e6d5      	b.n	8018cde <__ieee754_pow+0x12e>
 8018f32:	bf00      	nop
 8018f34:	f3af 8000 	nop.w
 8018f38:	60000000 	.word	0x60000000
 8018f3c:	3ff71547 	.word	0x3ff71547
 8018f40:	f85ddf44 	.word	0xf85ddf44
 8018f44:	3e54ae0b 	.word	0x3e54ae0b
 8018f48:	55555555 	.word	0x55555555
 8018f4c:	3fd55555 	.word	0x3fd55555
 8018f50:	652b82fe 	.word	0x652b82fe
 8018f54:	3ff71547 	.word	0x3ff71547
 8018f58:	00000000 	.word	0x00000000
 8018f5c:	bff00000 	.word	0xbff00000
 8018f60:	8800759c 	.word	0x8800759c
 8018f64:	7e37e43c 	.word	0x7e37e43c
 8018f68:	3ff00000 	.word	0x3ff00000
 8018f6c:	3fd00000 	.word	0x3fd00000
 8018f70:	3fe00000 	.word	0x3fe00000
 8018f74:	408fffff 	.word	0x408fffff
 8018f78:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8018f7c:	f04f 0200 	mov.w	r2, #0
 8018f80:	da05      	bge.n	8018f8e <__ieee754_pow+0x3de>
 8018f82:	4bd3      	ldr	r3, [pc, #844]	; (80192d0 <__ieee754_pow+0x720>)
 8018f84:	f7e7 fb58 	bl	8000638 <__aeabi_dmul>
 8018f88:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018f8c:	460c      	mov	r4, r1
 8018f8e:	1523      	asrs	r3, r4, #20
 8018f90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018f94:	4413      	add	r3, r2
 8018f96:	9309      	str	r3, [sp, #36]	; 0x24
 8018f98:	4bce      	ldr	r3, [pc, #824]	; (80192d4 <__ieee754_pow+0x724>)
 8018f9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018f9e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018fa2:	429c      	cmp	r4, r3
 8018fa4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018fa8:	dd08      	ble.n	8018fbc <__ieee754_pow+0x40c>
 8018faa:	4bcb      	ldr	r3, [pc, #812]	; (80192d8 <__ieee754_pow+0x728>)
 8018fac:	429c      	cmp	r4, r3
 8018fae:	f340 815e 	ble.w	801926e <__ieee754_pow+0x6be>
 8018fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8018fb8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018fbc:	f04f 0a00 	mov.w	sl, #0
 8018fc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8018fc4:	930c      	str	r3, [sp, #48]	; 0x30
 8018fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018fc8:	4bc4      	ldr	r3, [pc, #784]	; (80192dc <__ieee754_pow+0x72c>)
 8018fca:	4413      	add	r3, r2
 8018fcc:	ed93 7b00 	vldr	d7, [r3]
 8018fd0:	4629      	mov	r1, r5
 8018fd2:	ec53 2b17 	vmov	r2, r3, d7
 8018fd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018fda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8018fde:	f7e7 f973 	bl	80002c8 <__aeabi_dsub>
 8018fe2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018fe6:	4606      	mov	r6, r0
 8018fe8:	460f      	mov	r7, r1
 8018fea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018fee:	f7e7 f96d 	bl	80002cc <__adddf3>
 8018ff2:	4602      	mov	r2, r0
 8018ff4:	460b      	mov	r3, r1
 8018ff6:	2000      	movs	r0, #0
 8018ff8:	49b9      	ldr	r1, [pc, #740]	; (80192e0 <__ieee754_pow+0x730>)
 8018ffa:	f7e7 fc47 	bl	800088c <__aeabi_ddiv>
 8018ffe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8019002:	4602      	mov	r2, r0
 8019004:	460b      	mov	r3, r1
 8019006:	4630      	mov	r0, r6
 8019008:	4639      	mov	r1, r7
 801900a:	f7e7 fb15 	bl	8000638 <__aeabi_dmul>
 801900e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019012:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8019016:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801901a:	2300      	movs	r3, #0
 801901c:	9302      	str	r3, [sp, #8]
 801901e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8019022:	106d      	asrs	r5, r5, #1
 8019024:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8019028:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801902c:	2200      	movs	r2, #0
 801902e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8019032:	4640      	mov	r0, r8
 8019034:	4649      	mov	r1, r9
 8019036:	4614      	mov	r4, r2
 8019038:	461d      	mov	r5, r3
 801903a:	f7e7 fafd 	bl	8000638 <__aeabi_dmul>
 801903e:	4602      	mov	r2, r0
 8019040:	460b      	mov	r3, r1
 8019042:	4630      	mov	r0, r6
 8019044:	4639      	mov	r1, r7
 8019046:	f7e7 f93f 	bl	80002c8 <__aeabi_dsub>
 801904a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801904e:	4606      	mov	r6, r0
 8019050:	460f      	mov	r7, r1
 8019052:	4620      	mov	r0, r4
 8019054:	4629      	mov	r1, r5
 8019056:	f7e7 f937 	bl	80002c8 <__aeabi_dsub>
 801905a:	4602      	mov	r2, r0
 801905c:	460b      	mov	r3, r1
 801905e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019062:	f7e7 f931 	bl	80002c8 <__aeabi_dsub>
 8019066:	4642      	mov	r2, r8
 8019068:	464b      	mov	r3, r9
 801906a:	f7e7 fae5 	bl	8000638 <__aeabi_dmul>
 801906e:	4602      	mov	r2, r0
 8019070:	460b      	mov	r3, r1
 8019072:	4630      	mov	r0, r6
 8019074:	4639      	mov	r1, r7
 8019076:	f7e7 f927 	bl	80002c8 <__aeabi_dsub>
 801907a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801907e:	f7e7 fadb 	bl	8000638 <__aeabi_dmul>
 8019082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801908a:	4610      	mov	r0, r2
 801908c:	4619      	mov	r1, r3
 801908e:	f7e7 fad3 	bl	8000638 <__aeabi_dmul>
 8019092:	a37b      	add	r3, pc, #492	; (adr r3, 8019280 <__ieee754_pow+0x6d0>)
 8019094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019098:	4604      	mov	r4, r0
 801909a:	460d      	mov	r5, r1
 801909c:	f7e7 facc 	bl	8000638 <__aeabi_dmul>
 80190a0:	a379      	add	r3, pc, #484	; (adr r3, 8019288 <__ieee754_pow+0x6d8>)
 80190a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190a6:	f7e7 f911 	bl	80002cc <__adddf3>
 80190aa:	4622      	mov	r2, r4
 80190ac:	462b      	mov	r3, r5
 80190ae:	f7e7 fac3 	bl	8000638 <__aeabi_dmul>
 80190b2:	a377      	add	r3, pc, #476	; (adr r3, 8019290 <__ieee754_pow+0x6e0>)
 80190b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b8:	f7e7 f908 	bl	80002cc <__adddf3>
 80190bc:	4622      	mov	r2, r4
 80190be:	462b      	mov	r3, r5
 80190c0:	f7e7 faba 	bl	8000638 <__aeabi_dmul>
 80190c4:	a374      	add	r3, pc, #464	; (adr r3, 8019298 <__ieee754_pow+0x6e8>)
 80190c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ca:	f7e7 f8ff 	bl	80002cc <__adddf3>
 80190ce:	4622      	mov	r2, r4
 80190d0:	462b      	mov	r3, r5
 80190d2:	f7e7 fab1 	bl	8000638 <__aeabi_dmul>
 80190d6:	a372      	add	r3, pc, #456	; (adr r3, 80192a0 <__ieee754_pow+0x6f0>)
 80190d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190dc:	f7e7 f8f6 	bl	80002cc <__adddf3>
 80190e0:	4622      	mov	r2, r4
 80190e2:	462b      	mov	r3, r5
 80190e4:	f7e7 faa8 	bl	8000638 <__aeabi_dmul>
 80190e8:	a36f      	add	r3, pc, #444	; (adr r3, 80192a8 <__ieee754_pow+0x6f8>)
 80190ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190ee:	f7e7 f8ed 	bl	80002cc <__adddf3>
 80190f2:	4622      	mov	r2, r4
 80190f4:	4606      	mov	r6, r0
 80190f6:	460f      	mov	r7, r1
 80190f8:	462b      	mov	r3, r5
 80190fa:	4620      	mov	r0, r4
 80190fc:	4629      	mov	r1, r5
 80190fe:	f7e7 fa9b 	bl	8000638 <__aeabi_dmul>
 8019102:	4602      	mov	r2, r0
 8019104:	460b      	mov	r3, r1
 8019106:	4630      	mov	r0, r6
 8019108:	4639      	mov	r1, r7
 801910a:	f7e7 fa95 	bl	8000638 <__aeabi_dmul>
 801910e:	4642      	mov	r2, r8
 8019110:	4604      	mov	r4, r0
 8019112:	460d      	mov	r5, r1
 8019114:	464b      	mov	r3, r9
 8019116:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801911a:	f7e7 f8d7 	bl	80002cc <__adddf3>
 801911e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019122:	f7e7 fa89 	bl	8000638 <__aeabi_dmul>
 8019126:	4622      	mov	r2, r4
 8019128:	462b      	mov	r3, r5
 801912a:	f7e7 f8cf 	bl	80002cc <__adddf3>
 801912e:	4642      	mov	r2, r8
 8019130:	4606      	mov	r6, r0
 8019132:	460f      	mov	r7, r1
 8019134:	464b      	mov	r3, r9
 8019136:	4640      	mov	r0, r8
 8019138:	4649      	mov	r1, r9
 801913a:	f7e7 fa7d 	bl	8000638 <__aeabi_dmul>
 801913e:	2200      	movs	r2, #0
 8019140:	4b68      	ldr	r3, [pc, #416]	; (80192e4 <__ieee754_pow+0x734>)
 8019142:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8019146:	f7e7 f8c1 	bl	80002cc <__adddf3>
 801914a:	4632      	mov	r2, r6
 801914c:	463b      	mov	r3, r7
 801914e:	f7e7 f8bd 	bl	80002cc <__adddf3>
 8019152:	9802      	ldr	r0, [sp, #8]
 8019154:	460d      	mov	r5, r1
 8019156:	4604      	mov	r4, r0
 8019158:	4602      	mov	r2, r0
 801915a:	460b      	mov	r3, r1
 801915c:	4640      	mov	r0, r8
 801915e:	4649      	mov	r1, r9
 8019160:	f7e7 fa6a 	bl	8000638 <__aeabi_dmul>
 8019164:	2200      	movs	r2, #0
 8019166:	4680      	mov	r8, r0
 8019168:	4689      	mov	r9, r1
 801916a:	4b5e      	ldr	r3, [pc, #376]	; (80192e4 <__ieee754_pow+0x734>)
 801916c:	4620      	mov	r0, r4
 801916e:	4629      	mov	r1, r5
 8019170:	f7e7 f8aa 	bl	80002c8 <__aeabi_dsub>
 8019174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019178:	f7e7 f8a6 	bl	80002c8 <__aeabi_dsub>
 801917c:	4602      	mov	r2, r0
 801917e:	460b      	mov	r3, r1
 8019180:	4630      	mov	r0, r6
 8019182:	4639      	mov	r1, r7
 8019184:	f7e7 f8a0 	bl	80002c8 <__aeabi_dsub>
 8019188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801918c:	f7e7 fa54 	bl	8000638 <__aeabi_dmul>
 8019190:	4622      	mov	r2, r4
 8019192:	4606      	mov	r6, r0
 8019194:	460f      	mov	r7, r1
 8019196:	462b      	mov	r3, r5
 8019198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801919c:	f7e7 fa4c 	bl	8000638 <__aeabi_dmul>
 80191a0:	4602      	mov	r2, r0
 80191a2:	460b      	mov	r3, r1
 80191a4:	4630      	mov	r0, r6
 80191a6:	4639      	mov	r1, r7
 80191a8:	f7e7 f890 	bl	80002cc <__adddf3>
 80191ac:	4606      	mov	r6, r0
 80191ae:	460f      	mov	r7, r1
 80191b0:	4602      	mov	r2, r0
 80191b2:	460b      	mov	r3, r1
 80191b4:	4640      	mov	r0, r8
 80191b6:	4649      	mov	r1, r9
 80191b8:	f7e7 f888 	bl	80002cc <__adddf3>
 80191bc:	9802      	ldr	r0, [sp, #8]
 80191be:	a33c      	add	r3, pc, #240	; (adr r3, 80192b0 <__ieee754_pow+0x700>)
 80191c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c4:	4604      	mov	r4, r0
 80191c6:	460d      	mov	r5, r1
 80191c8:	f7e7 fa36 	bl	8000638 <__aeabi_dmul>
 80191cc:	4642      	mov	r2, r8
 80191ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80191d2:	464b      	mov	r3, r9
 80191d4:	4620      	mov	r0, r4
 80191d6:	4629      	mov	r1, r5
 80191d8:	f7e7 f876 	bl	80002c8 <__aeabi_dsub>
 80191dc:	4602      	mov	r2, r0
 80191de:	460b      	mov	r3, r1
 80191e0:	4630      	mov	r0, r6
 80191e2:	4639      	mov	r1, r7
 80191e4:	f7e7 f870 	bl	80002c8 <__aeabi_dsub>
 80191e8:	a333      	add	r3, pc, #204	; (adr r3, 80192b8 <__ieee754_pow+0x708>)
 80191ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ee:	f7e7 fa23 	bl	8000638 <__aeabi_dmul>
 80191f2:	a333      	add	r3, pc, #204	; (adr r3, 80192c0 <__ieee754_pow+0x710>)
 80191f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f8:	4606      	mov	r6, r0
 80191fa:	460f      	mov	r7, r1
 80191fc:	4620      	mov	r0, r4
 80191fe:	4629      	mov	r1, r5
 8019200:	f7e7 fa1a 	bl	8000638 <__aeabi_dmul>
 8019204:	4602      	mov	r2, r0
 8019206:	460b      	mov	r3, r1
 8019208:	4630      	mov	r0, r6
 801920a:	4639      	mov	r1, r7
 801920c:	f7e7 f85e 	bl	80002cc <__adddf3>
 8019210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019212:	4b35      	ldr	r3, [pc, #212]	; (80192e8 <__ieee754_pow+0x738>)
 8019214:	4413      	add	r3, r2
 8019216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801921a:	f7e7 f857 	bl	80002cc <__adddf3>
 801921e:	4604      	mov	r4, r0
 8019220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019222:	460d      	mov	r5, r1
 8019224:	f7e7 f99e 	bl	8000564 <__aeabi_i2d>
 8019228:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801922a:	4b30      	ldr	r3, [pc, #192]	; (80192ec <__ieee754_pow+0x73c>)
 801922c:	4413      	add	r3, r2
 801922e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019232:	4606      	mov	r6, r0
 8019234:	460f      	mov	r7, r1
 8019236:	4622      	mov	r2, r4
 8019238:	462b      	mov	r3, r5
 801923a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801923e:	f7e7 f845 	bl	80002cc <__adddf3>
 8019242:	4642      	mov	r2, r8
 8019244:	464b      	mov	r3, r9
 8019246:	f7e7 f841 	bl	80002cc <__adddf3>
 801924a:	4632      	mov	r2, r6
 801924c:	463b      	mov	r3, r7
 801924e:	f7e7 f83d 	bl	80002cc <__adddf3>
 8019252:	9802      	ldr	r0, [sp, #8]
 8019254:	4632      	mov	r2, r6
 8019256:	463b      	mov	r3, r7
 8019258:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801925c:	f7e7 f834 	bl	80002c8 <__aeabi_dsub>
 8019260:	4642      	mov	r2, r8
 8019262:	464b      	mov	r3, r9
 8019264:	f7e7 f830 	bl	80002c8 <__aeabi_dsub>
 8019268:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801926c:	e607      	b.n	8018e7e <__ieee754_pow+0x2ce>
 801926e:	f04f 0a01 	mov.w	sl, #1
 8019272:	e6a5      	b.n	8018fc0 <__ieee754_pow+0x410>
 8019274:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80192c8 <__ieee754_pow+0x718>
 8019278:	e613      	b.n	8018ea2 <__ieee754_pow+0x2f2>
 801927a:	bf00      	nop
 801927c:	f3af 8000 	nop.w
 8019280:	4a454eef 	.word	0x4a454eef
 8019284:	3fca7e28 	.word	0x3fca7e28
 8019288:	93c9db65 	.word	0x93c9db65
 801928c:	3fcd864a 	.word	0x3fcd864a
 8019290:	a91d4101 	.word	0xa91d4101
 8019294:	3fd17460 	.word	0x3fd17460
 8019298:	518f264d 	.word	0x518f264d
 801929c:	3fd55555 	.word	0x3fd55555
 80192a0:	db6fabff 	.word	0xdb6fabff
 80192a4:	3fdb6db6 	.word	0x3fdb6db6
 80192a8:	33333303 	.word	0x33333303
 80192ac:	3fe33333 	.word	0x3fe33333
 80192b0:	e0000000 	.word	0xe0000000
 80192b4:	3feec709 	.word	0x3feec709
 80192b8:	dc3a03fd 	.word	0xdc3a03fd
 80192bc:	3feec709 	.word	0x3feec709
 80192c0:	145b01f5 	.word	0x145b01f5
 80192c4:	be3e2fe0 	.word	0xbe3e2fe0
 80192c8:	00000000 	.word	0x00000000
 80192cc:	3ff00000 	.word	0x3ff00000
 80192d0:	43400000 	.word	0x43400000
 80192d4:	0003988e 	.word	0x0003988e
 80192d8:	000bb679 	.word	0x000bb679
 80192dc:	0801adb8 	.word	0x0801adb8
 80192e0:	3ff00000 	.word	0x3ff00000
 80192e4:	40080000 	.word	0x40080000
 80192e8:	0801add8 	.word	0x0801add8
 80192ec:	0801adc8 	.word	0x0801adc8
 80192f0:	a3b4      	add	r3, pc, #720	; (adr r3, 80195c4 <__ieee754_pow+0xa14>)
 80192f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f6:	4640      	mov	r0, r8
 80192f8:	4649      	mov	r1, r9
 80192fa:	f7e6 ffe7 	bl	80002cc <__adddf3>
 80192fe:	4622      	mov	r2, r4
 8019300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019304:	462b      	mov	r3, r5
 8019306:	4630      	mov	r0, r6
 8019308:	4639      	mov	r1, r7
 801930a:	f7e6 ffdd 	bl	80002c8 <__aeabi_dsub>
 801930e:	4602      	mov	r2, r0
 8019310:	460b      	mov	r3, r1
 8019312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019316:	f7e7 fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 801931a:	2800      	cmp	r0, #0
 801931c:	f47f adfe 	bne.w	8018f1c <__ieee754_pow+0x36c>
 8019320:	4aa3      	ldr	r2, [pc, #652]	; (80195b0 <__ieee754_pow+0xa00>)
 8019322:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019326:	4293      	cmp	r3, r2
 8019328:	f340 810a 	ble.w	8019540 <__ieee754_pow+0x990>
 801932c:	151b      	asrs	r3, r3, #20
 801932e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019332:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019336:	fa4a f303 	asr.w	r3, sl, r3
 801933a:	445b      	add	r3, fp
 801933c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019340:	4e9c      	ldr	r6, [pc, #624]	; (80195b4 <__ieee754_pow+0xa04>)
 8019342:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019346:	4116      	asrs	r6, r2
 8019348:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801934c:	2000      	movs	r0, #0
 801934e:	ea23 0106 	bic.w	r1, r3, r6
 8019352:	f1c2 0214 	rsb	r2, r2, #20
 8019356:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801935a:	fa4a fa02 	asr.w	sl, sl, r2
 801935e:	f1bb 0f00 	cmp.w	fp, #0
 8019362:	4602      	mov	r2, r0
 8019364:	460b      	mov	r3, r1
 8019366:	4620      	mov	r0, r4
 8019368:	4629      	mov	r1, r5
 801936a:	bfb8      	it	lt
 801936c:	f1ca 0a00 	rsblt	sl, sl, #0
 8019370:	f7e6 ffaa 	bl	80002c8 <__aeabi_dsub>
 8019374:	e9cd 0100 	strd	r0, r1, [sp]
 8019378:	4642      	mov	r2, r8
 801937a:	464b      	mov	r3, r9
 801937c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019380:	f7e6 ffa4 	bl	80002cc <__adddf3>
 8019384:	2000      	movs	r0, #0
 8019386:	a378      	add	r3, pc, #480	; (adr r3, 8019568 <__ieee754_pow+0x9b8>)
 8019388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801938c:	4604      	mov	r4, r0
 801938e:	460d      	mov	r5, r1
 8019390:	f7e7 f952 	bl	8000638 <__aeabi_dmul>
 8019394:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019398:	4606      	mov	r6, r0
 801939a:	460f      	mov	r7, r1
 801939c:	4620      	mov	r0, r4
 801939e:	4629      	mov	r1, r5
 80193a0:	f7e6 ff92 	bl	80002c8 <__aeabi_dsub>
 80193a4:	4602      	mov	r2, r0
 80193a6:	460b      	mov	r3, r1
 80193a8:	4640      	mov	r0, r8
 80193aa:	4649      	mov	r1, r9
 80193ac:	f7e6 ff8c 	bl	80002c8 <__aeabi_dsub>
 80193b0:	a36f      	add	r3, pc, #444	; (adr r3, 8019570 <__ieee754_pow+0x9c0>)
 80193b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b6:	f7e7 f93f 	bl	8000638 <__aeabi_dmul>
 80193ba:	a36f      	add	r3, pc, #444	; (adr r3, 8019578 <__ieee754_pow+0x9c8>)
 80193bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c0:	4680      	mov	r8, r0
 80193c2:	4689      	mov	r9, r1
 80193c4:	4620      	mov	r0, r4
 80193c6:	4629      	mov	r1, r5
 80193c8:	f7e7 f936 	bl	8000638 <__aeabi_dmul>
 80193cc:	4602      	mov	r2, r0
 80193ce:	460b      	mov	r3, r1
 80193d0:	4640      	mov	r0, r8
 80193d2:	4649      	mov	r1, r9
 80193d4:	f7e6 ff7a 	bl	80002cc <__adddf3>
 80193d8:	4604      	mov	r4, r0
 80193da:	460d      	mov	r5, r1
 80193dc:	4602      	mov	r2, r0
 80193de:	460b      	mov	r3, r1
 80193e0:	4630      	mov	r0, r6
 80193e2:	4639      	mov	r1, r7
 80193e4:	f7e6 ff72 	bl	80002cc <__adddf3>
 80193e8:	4632      	mov	r2, r6
 80193ea:	463b      	mov	r3, r7
 80193ec:	4680      	mov	r8, r0
 80193ee:	4689      	mov	r9, r1
 80193f0:	f7e6 ff6a 	bl	80002c8 <__aeabi_dsub>
 80193f4:	4602      	mov	r2, r0
 80193f6:	460b      	mov	r3, r1
 80193f8:	4620      	mov	r0, r4
 80193fa:	4629      	mov	r1, r5
 80193fc:	f7e6 ff64 	bl	80002c8 <__aeabi_dsub>
 8019400:	4642      	mov	r2, r8
 8019402:	4606      	mov	r6, r0
 8019404:	460f      	mov	r7, r1
 8019406:	464b      	mov	r3, r9
 8019408:	4640      	mov	r0, r8
 801940a:	4649      	mov	r1, r9
 801940c:	f7e7 f914 	bl	8000638 <__aeabi_dmul>
 8019410:	a35b      	add	r3, pc, #364	; (adr r3, 8019580 <__ieee754_pow+0x9d0>)
 8019412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019416:	4604      	mov	r4, r0
 8019418:	460d      	mov	r5, r1
 801941a:	f7e7 f90d 	bl	8000638 <__aeabi_dmul>
 801941e:	a35a      	add	r3, pc, #360	; (adr r3, 8019588 <__ieee754_pow+0x9d8>)
 8019420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019424:	f7e6 ff50 	bl	80002c8 <__aeabi_dsub>
 8019428:	4622      	mov	r2, r4
 801942a:	462b      	mov	r3, r5
 801942c:	f7e7 f904 	bl	8000638 <__aeabi_dmul>
 8019430:	a357      	add	r3, pc, #348	; (adr r3, 8019590 <__ieee754_pow+0x9e0>)
 8019432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019436:	f7e6 ff49 	bl	80002cc <__adddf3>
 801943a:	4622      	mov	r2, r4
 801943c:	462b      	mov	r3, r5
 801943e:	f7e7 f8fb 	bl	8000638 <__aeabi_dmul>
 8019442:	a355      	add	r3, pc, #340	; (adr r3, 8019598 <__ieee754_pow+0x9e8>)
 8019444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019448:	f7e6 ff3e 	bl	80002c8 <__aeabi_dsub>
 801944c:	4622      	mov	r2, r4
 801944e:	462b      	mov	r3, r5
 8019450:	f7e7 f8f2 	bl	8000638 <__aeabi_dmul>
 8019454:	a352      	add	r3, pc, #328	; (adr r3, 80195a0 <__ieee754_pow+0x9f0>)
 8019456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801945a:	f7e6 ff37 	bl	80002cc <__adddf3>
 801945e:	4622      	mov	r2, r4
 8019460:	462b      	mov	r3, r5
 8019462:	f7e7 f8e9 	bl	8000638 <__aeabi_dmul>
 8019466:	4602      	mov	r2, r0
 8019468:	460b      	mov	r3, r1
 801946a:	4640      	mov	r0, r8
 801946c:	4649      	mov	r1, r9
 801946e:	f7e6 ff2b 	bl	80002c8 <__aeabi_dsub>
 8019472:	4604      	mov	r4, r0
 8019474:	460d      	mov	r5, r1
 8019476:	4602      	mov	r2, r0
 8019478:	460b      	mov	r3, r1
 801947a:	4640      	mov	r0, r8
 801947c:	4649      	mov	r1, r9
 801947e:	f7e7 f8db 	bl	8000638 <__aeabi_dmul>
 8019482:	2200      	movs	r2, #0
 8019484:	e9cd 0100 	strd	r0, r1, [sp]
 8019488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801948c:	4620      	mov	r0, r4
 801948e:	4629      	mov	r1, r5
 8019490:	f7e6 ff1a 	bl	80002c8 <__aeabi_dsub>
 8019494:	4602      	mov	r2, r0
 8019496:	460b      	mov	r3, r1
 8019498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801949c:	f7e7 f9f6 	bl	800088c <__aeabi_ddiv>
 80194a0:	4632      	mov	r2, r6
 80194a2:	4604      	mov	r4, r0
 80194a4:	460d      	mov	r5, r1
 80194a6:	463b      	mov	r3, r7
 80194a8:	4640      	mov	r0, r8
 80194aa:	4649      	mov	r1, r9
 80194ac:	f7e7 f8c4 	bl	8000638 <__aeabi_dmul>
 80194b0:	4632      	mov	r2, r6
 80194b2:	463b      	mov	r3, r7
 80194b4:	f7e6 ff0a 	bl	80002cc <__adddf3>
 80194b8:	4602      	mov	r2, r0
 80194ba:	460b      	mov	r3, r1
 80194bc:	4620      	mov	r0, r4
 80194be:	4629      	mov	r1, r5
 80194c0:	f7e6 ff02 	bl	80002c8 <__aeabi_dsub>
 80194c4:	4642      	mov	r2, r8
 80194c6:	464b      	mov	r3, r9
 80194c8:	f7e6 fefe 	bl	80002c8 <__aeabi_dsub>
 80194cc:	4602      	mov	r2, r0
 80194ce:	460b      	mov	r3, r1
 80194d0:	2000      	movs	r0, #0
 80194d2:	4939      	ldr	r1, [pc, #228]	; (80195b8 <__ieee754_pow+0xa08>)
 80194d4:	f7e6 fef8 	bl	80002c8 <__aeabi_dsub>
 80194d8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80194dc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80194e0:	4602      	mov	r2, r0
 80194e2:	460b      	mov	r3, r1
 80194e4:	da2f      	bge.n	8019546 <__ieee754_pow+0x996>
 80194e6:	4650      	mov	r0, sl
 80194e8:	ec43 2b10 	vmov	d0, r2, r3
 80194ec:	f000 fc80 	bl	8019df0 <scalbn>
 80194f0:	ec51 0b10 	vmov	r0, r1, d0
 80194f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80194f8:	f7ff bbf1 	b.w	8018cde <__ieee754_pow+0x12e>
 80194fc:	4b2f      	ldr	r3, [pc, #188]	; (80195bc <__ieee754_pow+0xa0c>)
 80194fe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8019502:	429e      	cmp	r6, r3
 8019504:	f77f af0c 	ble.w	8019320 <__ieee754_pow+0x770>
 8019508:	4b2d      	ldr	r3, [pc, #180]	; (80195c0 <__ieee754_pow+0xa10>)
 801950a:	440b      	add	r3, r1
 801950c:	4303      	orrs	r3, r0
 801950e:	d00b      	beq.n	8019528 <__ieee754_pow+0x978>
 8019510:	a325      	add	r3, pc, #148	; (adr r3, 80195a8 <__ieee754_pow+0x9f8>)
 8019512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801951a:	f7e7 f88d 	bl	8000638 <__aeabi_dmul>
 801951e:	a322      	add	r3, pc, #136	; (adr r3, 80195a8 <__ieee754_pow+0x9f8>)
 8019520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019524:	f7ff bbdb 	b.w	8018cde <__ieee754_pow+0x12e>
 8019528:	4622      	mov	r2, r4
 801952a:	462b      	mov	r3, r5
 801952c:	f7e6 fecc 	bl	80002c8 <__aeabi_dsub>
 8019530:	4642      	mov	r2, r8
 8019532:	464b      	mov	r3, r9
 8019534:	f7e7 fb06 	bl	8000b44 <__aeabi_dcmpge>
 8019538:	2800      	cmp	r0, #0
 801953a:	f43f aef1 	beq.w	8019320 <__ieee754_pow+0x770>
 801953e:	e7e7      	b.n	8019510 <__ieee754_pow+0x960>
 8019540:	f04f 0a00 	mov.w	sl, #0
 8019544:	e718      	b.n	8019378 <__ieee754_pow+0x7c8>
 8019546:	4621      	mov	r1, r4
 8019548:	e7d4      	b.n	80194f4 <__ieee754_pow+0x944>
 801954a:	2000      	movs	r0, #0
 801954c:	491a      	ldr	r1, [pc, #104]	; (80195b8 <__ieee754_pow+0xa08>)
 801954e:	f7ff bb8f 	b.w	8018c70 <__ieee754_pow+0xc0>
 8019552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019556:	f7ff bb8b 	b.w	8018c70 <__ieee754_pow+0xc0>
 801955a:	4630      	mov	r0, r6
 801955c:	4639      	mov	r1, r7
 801955e:	f7ff bb87 	b.w	8018c70 <__ieee754_pow+0xc0>
 8019562:	4693      	mov	fp, r2
 8019564:	f7ff bb98 	b.w	8018c98 <__ieee754_pow+0xe8>
 8019568:	00000000 	.word	0x00000000
 801956c:	3fe62e43 	.word	0x3fe62e43
 8019570:	fefa39ef 	.word	0xfefa39ef
 8019574:	3fe62e42 	.word	0x3fe62e42
 8019578:	0ca86c39 	.word	0x0ca86c39
 801957c:	be205c61 	.word	0xbe205c61
 8019580:	72bea4d0 	.word	0x72bea4d0
 8019584:	3e663769 	.word	0x3e663769
 8019588:	c5d26bf1 	.word	0xc5d26bf1
 801958c:	3ebbbd41 	.word	0x3ebbbd41
 8019590:	af25de2c 	.word	0xaf25de2c
 8019594:	3f11566a 	.word	0x3f11566a
 8019598:	16bebd93 	.word	0x16bebd93
 801959c:	3f66c16c 	.word	0x3f66c16c
 80195a0:	5555553e 	.word	0x5555553e
 80195a4:	3fc55555 	.word	0x3fc55555
 80195a8:	c2f8f359 	.word	0xc2f8f359
 80195ac:	01a56e1f 	.word	0x01a56e1f
 80195b0:	3fe00000 	.word	0x3fe00000
 80195b4:	000fffff 	.word	0x000fffff
 80195b8:	3ff00000 	.word	0x3ff00000
 80195bc:	4090cbff 	.word	0x4090cbff
 80195c0:	3f6f3400 	.word	0x3f6f3400
 80195c4:	652b82fe 	.word	0x652b82fe
 80195c8:	3c971547 	.word	0x3c971547

080195cc <__ieee754_sqrt>:
 80195cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195d0:	4955      	ldr	r1, [pc, #340]	; (8019728 <__ieee754_sqrt+0x15c>)
 80195d2:	ec55 4b10 	vmov	r4, r5, d0
 80195d6:	43a9      	bics	r1, r5
 80195d8:	462b      	mov	r3, r5
 80195da:	462a      	mov	r2, r5
 80195dc:	d112      	bne.n	8019604 <__ieee754_sqrt+0x38>
 80195de:	ee10 2a10 	vmov	r2, s0
 80195e2:	ee10 0a10 	vmov	r0, s0
 80195e6:	4629      	mov	r1, r5
 80195e8:	f7e7 f826 	bl	8000638 <__aeabi_dmul>
 80195ec:	4602      	mov	r2, r0
 80195ee:	460b      	mov	r3, r1
 80195f0:	4620      	mov	r0, r4
 80195f2:	4629      	mov	r1, r5
 80195f4:	f7e6 fe6a 	bl	80002cc <__adddf3>
 80195f8:	4604      	mov	r4, r0
 80195fa:	460d      	mov	r5, r1
 80195fc:	ec45 4b10 	vmov	d0, r4, r5
 8019600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019604:	2d00      	cmp	r5, #0
 8019606:	ee10 0a10 	vmov	r0, s0
 801960a:	4621      	mov	r1, r4
 801960c:	dc0f      	bgt.n	801962e <__ieee754_sqrt+0x62>
 801960e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019612:	4330      	orrs	r0, r6
 8019614:	d0f2      	beq.n	80195fc <__ieee754_sqrt+0x30>
 8019616:	b155      	cbz	r5, 801962e <__ieee754_sqrt+0x62>
 8019618:	ee10 2a10 	vmov	r2, s0
 801961c:	4620      	mov	r0, r4
 801961e:	4629      	mov	r1, r5
 8019620:	f7e6 fe52 	bl	80002c8 <__aeabi_dsub>
 8019624:	4602      	mov	r2, r0
 8019626:	460b      	mov	r3, r1
 8019628:	f7e7 f930 	bl	800088c <__aeabi_ddiv>
 801962c:	e7e4      	b.n	80195f8 <__ieee754_sqrt+0x2c>
 801962e:	151b      	asrs	r3, r3, #20
 8019630:	d073      	beq.n	801971a <__ieee754_sqrt+0x14e>
 8019632:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019636:	07dd      	lsls	r5, r3, #31
 8019638:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801963c:	bf48      	it	mi
 801963e:	0fc8      	lsrmi	r0, r1, #31
 8019640:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8019644:	bf44      	itt	mi
 8019646:	0049      	lslmi	r1, r1, #1
 8019648:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801964c:	2500      	movs	r5, #0
 801964e:	1058      	asrs	r0, r3, #1
 8019650:	0fcb      	lsrs	r3, r1, #31
 8019652:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8019656:	0049      	lsls	r1, r1, #1
 8019658:	2316      	movs	r3, #22
 801965a:	462c      	mov	r4, r5
 801965c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8019660:	19a7      	adds	r7, r4, r6
 8019662:	4297      	cmp	r7, r2
 8019664:	bfde      	ittt	le
 8019666:	19bc      	addle	r4, r7, r6
 8019668:	1bd2      	suble	r2, r2, r7
 801966a:	19ad      	addle	r5, r5, r6
 801966c:	0fcf      	lsrs	r7, r1, #31
 801966e:	3b01      	subs	r3, #1
 8019670:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8019674:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019678:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801967c:	d1f0      	bne.n	8019660 <__ieee754_sqrt+0x94>
 801967e:	f04f 0c20 	mov.w	ip, #32
 8019682:	469e      	mov	lr, r3
 8019684:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8019688:	42a2      	cmp	r2, r4
 801968a:	eb06 070e 	add.w	r7, r6, lr
 801968e:	dc02      	bgt.n	8019696 <__ieee754_sqrt+0xca>
 8019690:	d112      	bne.n	80196b8 <__ieee754_sqrt+0xec>
 8019692:	428f      	cmp	r7, r1
 8019694:	d810      	bhi.n	80196b8 <__ieee754_sqrt+0xec>
 8019696:	2f00      	cmp	r7, #0
 8019698:	eb07 0e06 	add.w	lr, r7, r6
 801969c:	da42      	bge.n	8019724 <__ieee754_sqrt+0x158>
 801969e:	f1be 0f00 	cmp.w	lr, #0
 80196a2:	db3f      	blt.n	8019724 <__ieee754_sqrt+0x158>
 80196a4:	f104 0801 	add.w	r8, r4, #1
 80196a8:	1b12      	subs	r2, r2, r4
 80196aa:	428f      	cmp	r7, r1
 80196ac:	bf88      	it	hi
 80196ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80196b2:	1bc9      	subs	r1, r1, r7
 80196b4:	4433      	add	r3, r6
 80196b6:	4644      	mov	r4, r8
 80196b8:	0052      	lsls	r2, r2, #1
 80196ba:	f1bc 0c01 	subs.w	ip, ip, #1
 80196be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80196c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80196c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80196ca:	d1dd      	bne.n	8019688 <__ieee754_sqrt+0xbc>
 80196cc:	430a      	orrs	r2, r1
 80196ce:	d006      	beq.n	80196de <__ieee754_sqrt+0x112>
 80196d0:	1c5c      	adds	r4, r3, #1
 80196d2:	bf13      	iteet	ne
 80196d4:	3301      	addne	r3, #1
 80196d6:	3501      	addeq	r5, #1
 80196d8:	4663      	moveq	r3, ip
 80196da:	f023 0301 	bicne.w	r3, r3, #1
 80196de:	106a      	asrs	r2, r5, #1
 80196e0:	085b      	lsrs	r3, r3, #1
 80196e2:	07e9      	lsls	r1, r5, #31
 80196e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80196e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80196ec:	bf48      	it	mi
 80196ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80196f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80196f6:	461c      	mov	r4, r3
 80196f8:	e780      	b.n	80195fc <__ieee754_sqrt+0x30>
 80196fa:	0aca      	lsrs	r2, r1, #11
 80196fc:	3815      	subs	r0, #21
 80196fe:	0549      	lsls	r1, r1, #21
 8019700:	2a00      	cmp	r2, #0
 8019702:	d0fa      	beq.n	80196fa <__ieee754_sqrt+0x12e>
 8019704:	02d6      	lsls	r6, r2, #11
 8019706:	d50a      	bpl.n	801971e <__ieee754_sqrt+0x152>
 8019708:	f1c3 0420 	rsb	r4, r3, #32
 801970c:	fa21 f404 	lsr.w	r4, r1, r4
 8019710:	1e5d      	subs	r5, r3, #1
 8019712:	4099      	lsls	r1, r3
 8019714:	4322      	orrs	r2, r4
 8019716:	1b43      	subs	r3, r0, r5
 8019718:	e78b      	b.n	8019632 <__ieee754_sqrt+0x66>
 801971a:	4618      	mov	r0, r3
 801971c:	e7f0      	b.n	8019700 <__ieee754_sqrt+0x134>
 801971e:	0052      	lsls	r2, r2, #1
 8019720:	3301      	adds	r3, #1
 8019722:	e7ef      	b.n	8019704 <__ieee754_sqrt+0x138>
 8019724:	46a0      	mov	r8, r4
 8019726:	e7bf      	b.n	80196a8 <__ieee754_sqrt+0xdc>
 8019728:	7ff00000 	.word	0x7ff00000

0801972c <__ieee754_powf>:
 801972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019730:	ee10 5a90 	vmov	r5, s1
 8019734:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8019738:	ed2d 8b02 	vpush	{d8}
 801973c:	eeb0 8a40 	vmov.f32	s16, s0
 8019740:	eef0 8a60 	vmov.f32	s17, s1
 8019744:	f000 8293 	beq.w	8019c6e <__ieee754_powf+0x542>
 8019748:	ee10 8a10 	vmov	r8, s0
 801974c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8019750:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8019754:	dc06      	bgt.n	8019764 <__ieee754_powf+0x38>
 8019756:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801975a:	dd0a      	ble.n	8019772 <__ieee754_powf+0x46>
 801975c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8019760:	f000 8285 	beq.w	8019c6e <__ieee754_powf+0x542>
 8019764:	ecbd 8b02 	vpop	{d8}
 8019768:	48d9      	ldr	r0, [pc, #868]	; (8019ad0 <__ieee754_powf+0x3a4>)
 801976a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801976e:	f000 bbc7 	b.w	8019f00 <nanf>
 8019772:	f1b8 0f00 	cmp.w	r8, #0
 8019776:	da1d      	bge.n	80197b4 <__ieee754_powf+0x88>
 8019778:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801977c:	da2c      	bge.n	80197d8 <__ieee754_powf+0xac>
 801977e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8019782:	db30      	blt.n	80197e6 <__ieee754_powf+0xba>
 8019784:	15fb      	asrs	r3, r7, #23
 8019786:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801978a:	fa47 f603 	asr.w	r6, r7, r3
 801978e:	fa06 f303 	lsl.w	r3, r6, r3
 8019792:	42bb      	cmp	r3, r7
 8019794:	d127      	bne.n	80197e6 <__ieee754_powf+0xba>
 8019796:	f006 0601 	and.w	r6, r6, #1
 801979a:	f1c6 0602 	rsb	r6, r6, #2
 801979e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80197a2:	d122      	bne.n	80197ea <__ieee754_powf+0xbe>
 80197a4:	2d00      	cmp	r5, #0
 80197a6:	f280 8268 	bge.w	8019c7a <__ieee754_powf+0x54e>
 80197aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80197ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80197b2:	e00d      	b.n	80197d0 <__ieee754_powf+0xa4>
 80197b4:	2600      	movs	r6, #0
 80197b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80197ba:	d1f0      	bne.n	801979e <__ieee754_powf+0x72>
 80197bc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80197c0:	f000 8255 	beq.w	8019c6e <__ieee754_powf+0x542>
 80197c4:	dd0a      	ble.n	80197dc <__ieee754_powf+0xb0>
 80197c6:	2d00      	cmp	r5, #0
 80197c8:	f280 8254 	bge.w	8019c74 <__ieee754_powf+0x548>
 80197cc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8019ad4 <__ieee754_powf+0x3a8>
 80197d0:	ecbd 8b02 	vpop	{d8}
 80197d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197d8:	2602      	movs	r6, #2
 80197da:	e7ec      	b.n	80197b6 <__ieee754_powf+0x8a>
 80197dc:	2d00      	cmp	r5, #0
 80197de:	daf5      	bge.n	80197cc <__ieee754_powf+0xa0>
 80197e0:	eeb1 0a68 	vneg.f32	s0, s17
 80197e4:	e7f4      	b.n	80197d0 <__ieee754_powf+0xa4>
 80197e6:	2600      	movs	r6, #0
 80197e8:	e7d9      	b.n	801979e <__ieee754_powf+0x72>
 80197ea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80197ee:	d102      	bne.n	80197f6 <__ieee754_powf+0xca>
 80197f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80197f4:	e7ec      	b.n	80197d0 <__ieee754_powf+0xa4>
 80197f6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80197fa:	eeb0 0a48 	vmov.f32	s0, s16
 80197fe:	d108      	bne.n	8019812 <__ieee754_powf+0xe6>
 8019800:	f1b8 0f00 	cmp.w	r8, #0
 8019804:	db05      	blt.n	8019812 <__ieee754_powf+0xe6>
 8019806:	ecbd 8b02 	vpop	{d8}
 801980a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801980e:	f000 ba4d 	b.w	8019cac <__ieee754_sqrtf>
 8019812:	f000 fb63 	bl	8019edc <fabsf>
 8019816:	b124      	cbz	r4, 8019822 <__ieee754_powf+0xf6>
 8019818:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801981c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8019820:	d117      	bne.n	8019852 <__ieee754_powf+0x126>
 8019822:	2d00      	cmp	r5, #0
 8019824:	bfbc      	itt	lt
 8019826:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801982a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801982e:	f1b8 0f00 	cmp.w	r8, #0
 8019832:	dacd      	bge.n	80197d0 <__ieee754_powf+0xa4>
 8019834:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8019838:	ea54 0306 	orrs.w	r3, r4, r6
 801983c:	d104      	bne.n	8019848 <__ieee754_powf+0x11c>
 801983e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019842:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019846:	e7c3      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019848:	2e01      	cmp	r6, #1
 801984a:	d1c1      	bne.n	80197d0 <__ieee754_powf+0xa4>
 801984c:	eeb1 0a40 	vneg.f32	s0, s0
 8019850:	e7be      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019852:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8019856:	3801      	subs	r0, #1
 8019858:	ea56 0300 	orrs.w	r3, r6, r0
 801985c:	d104      	bne.n	8019868 <__ieee754_powf+0x13c>
 801985e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019862:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019866:	e7b3      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019868:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801986c:	dd6d      	ble.n	801994a <__ieee754_powf+0x21e>
 801986e:	4b9a      	ldr	r3, [pc, #616]	; (8019ad8 <__ieee754_powf+0x3ac>)
 8019870:	429c      	cmp	r4, r3
 8019872:	dc06      	bgt.n	8019882 <__ieee754_powf+0x156>
 8019874:	2d00      	cmp	r5, #0
 8019876:	daa9      	bge.n	80197cc <__ieee754_powf+0xa0>
 8019878:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8019adc <__ieee754_powf+0x3b0>
 801987c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019880:	e7a6      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019882:	4b97      	ldr	r3, [pc, #604]	; (8019ae0 <__ieee754_powf+0x3b4>)
 8019884:	429c      	cmp	r4, r3
 8019886:	dd02      	ble.n	801988e <__ieee754_powf+0x162>
 8019888:	2d00      	cmp	r5, #0
 801988a:	dcf5      	bgt.n	8019878 <__ieee754_powf+0x14c>
 801988c:	e79e      	b.n	80197cc <__ieee754_powf+0xa0>
 801988e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019892:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019896:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8019ae4 <__ieee754_powf+0x3b8>
 801989a:	eef1 6a40 	vneg.f32	s13, s0
 801989e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80198a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80198a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80198aa:	eee7 7a40 	vfms.f32	s15, s14, s0
 80198ae:	ee60 0a00 	vmul.f32	s1, s0, s0
 80198b2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8019ae8 <__ieee754_powf+0x3bc>
 80198b6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80198ba:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8019aec <__ieee754_powf+0x3c0>
 80198be:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80198c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80198c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8019af0 <__ieee754_powf+0x3c4>
 80198ca:	eeb0 6a67 	vmov.f32	s12, s15
 80198ce:	eea0 6a07 	vfma.f32	s12, s0, s14
 80198d2:	ee16 3a10 	vmov	r3, s12
 80198d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80198da:	f023 030f 	bic.w	r3, r3, #15
 80198de:	ee00 3a90 	vmov	s1, r3
 80198e2:	eee6 0a87 	vfma.f32	s1, s13, s14
 80198e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80198ea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80198ee:	f025 050f 	bic.w	r5, r5, #15
 80198f2:	ee07 5a10 	vmov	s14, r5
 80198f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80198fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80198fe:	ee07 3a90 	vmov	s15, r3
 8019902:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019906:	3e01      	subs	r6, #1
 8019908:	ea56 0200 	orrs.w	r2, r6, r0
 801990c:	ee07 5a10 	vmov	s14, r5
 8019910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019914:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8019918:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801991c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8019920:	ee17 4a10 	vmov	r4, s14
 8019924:	bf08      	it	eq
 8019926:	eeb0 8a40 	vmoveq.f32	s16, s0
 801992a:	2c00      	cmp	r4, #0
 801992c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019930:	f340 8184 	ble.w	8019c3c <__ieee754_powf+0x510>
 8019934:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8019938:	f340 80fc 	ble.w	8019b34 <__ieee754_powf+0x408>
 801993c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8019adc <__ieee754_powf+0x3b0>
 8019940:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019944:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019948:	e742      	b.n	80197d0 <__ieee754_powf+0xa4>
 801994a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801994e:	bfbf      	itttt	lt
 8019950:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8019af4 <__ieee754_powf+0x3c8>
 8019954:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019958:	f06f 0217 	mvnlt.w	r2, #23
 801995c:	ee17 4a90 	vmovlt	r4, s15
 8019960:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8019964:	bfa8      	it	ge
 8019966:	2200      	movge	r2, #0
 8019968:	3b7f      	subs	r3, #127	; 0x7f
 801996a:	4413      	add	r3, r2
 801996c:	4a62      	ldr	r2, [pc, #392]	; (8019af8 <__ieee754_powf+0x3cc>)
 801996e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8019972:	4294      	cmp	r4, r2
 8019974:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8019978:	dd06      	ble.n	8019988 <__ieee754_powf+0x25c>
 801997a:	4a60      	ldr	r2, [pc, #384]	; (8019afc <__ieee754_powf+0x3d0>)
 801997c:	4294      	cmp	r4, r2
 801997e:	f340 80a5 	ble.w	8019acc <__ieee754_powf+0x3a0>
 8019982:	3301      	adds	r3, #1
 8019984:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8019988:	2400      	movs	r4, #0
 801998a:	4a5d      	ldr	r2, [pc, #372]	; (8019b00 <__ieee754_powf+0x3d4>)
 801998c:	00a7      	lsls	r7, r4, #2
 801998e:	443a      	add	r2, r7
 8019990:	ee07 1a90 	vmov	s15, r1
 8019994:	ed92 7a00 	vldr	s14, [r2]
 8019998:	4a5a      	ldr	r2, [pc, #360]	; (8019b04 <__ieee754_powf+0x3d8>)
 801999a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801999e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80199a2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80199a6:	1049      	asrs	r1, r1, #1
 80199a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80199ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80199b0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80199b4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80199b8:	ee06 1a10 	vmov	s12, r1
 80199bc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 80199c0:	ee14 ca90 	vmov	ip, s9
 80199c4:	ea02 0c0c 	and.w	ip, r2, ip
 80199c8:	ee05 ca10 	vmov	s10, ip
 80199cc:	eeb1 4a45 	vneg.f32	s8, s10
 80199d0:	eee4 5a06 	vfma.f32	s11, s8, s12
 80199d4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80199d8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019b08 <__ieee754_powf+0x3dc>
 80199dc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80199e0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80199e4:	eee4 5a06 	vfma.f32	s11, s8, s12
 80199e8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80199ec:	ee25 6aa6 	vmul.f32	s12, s11, s13
 80199f0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8019b0c <__ieee754_powf+0x3e0>
 80199f4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80199f8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8019b10 <__ieee754_powf+0x3e4>
 80199fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019a00:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8019ae4 <__ieee754_powf+0x3b8>
 8019a04:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019a08:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019b14 <__ieee754_powf+0x3e8>
 8019a0c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019a10:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8019b18 <__ieee754_powf+0x3ec>
 8019a14:	ee75 6a24 	vadd.f32	s13, s10, s9
 8019a18:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019a1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019a20:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8019a24:	eef0 7a65 	vmov.f32	s15, s11
 8019a28:	eee3 6a87 	vfma.f32	s13, s7, s14
 8019a2c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8019a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019a34:	ee17 1a90 	vmov	r1, s15
 8019a38:	4011      	ands	r1, r2
 8019a3a:	ee07 1a90 	vmov	s15, r1
 8019a3e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8019a42:	eddf 5a36 	vldr	s11, [pc, #216]	; 8019b1c <__ieee754_powf+0x3f0>
 8019a46:	eea4 7a05 	vfma.f32	s14, s8, s10
 8019a4a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019a4e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8019a52:	eea7 7a86 	vfma.f32	s14, s15, s12
 8019a56:	eeb0 6a47 	vmov.f32	s12, s14
 8019a5a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8019a5e:	ee16 1a10 	vmov	r1, s12
 8019a62:	4011      	ands	r1, r2
 8019a64:	ee06 1a90 	vmov	s13, r1
 8019a68:	eee4 6a27 	vfma.f32	s13, s8, s15
 8019a6c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8019b20 <__ieee754_powf+0x3f4>
 8019a70:	ee37 7a66 	vsub.f32	s14, s14, s13
 8019a74:	ee06 1a10 	vmov	s12, r1
 8019a78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019a7c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8019b24 <__ieee754_powf+0x3f8>
 8019a80:	4929      	ldr	r1, [pc, #164]	; (8019b28 <__ieee754_powf+0x3fc>)
 8019a82:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019a86:	4439      	add	r1, r7
 8019a88:	edd1 7a00 	vldr	s15, [r1]
 8019a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019a90:	ee07 3a90 	vmov	s15, r3
 8019a94:	eef0 0a47 	vmov.f32	s1, s14
 8019a98:	4b24      	ldr	r3, [pc, #144]	; (8019b2c <__ieee754_powf+0x400>)
 8019a9a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8019a9e:	443b      	add	r3, r7
 8019aa0:	ed93 5a00 	vldr	s10, [r3]
 8019aa4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019aa8:	ee70 0a85 	vadd.f32	s1, s1, s10
 8019aac:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8019ab0:	ee17 3a90 	vmov	r3, s15
 8019ab4:	4013      	ands	r3, r2
 8019ab6:	ee07 3a90 	vmov	s15, r3
 8019aba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019abe:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8019ac2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8019ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019aca:	e70e      	b.n	80198ea <__ieee754_powf+0x1be>
 8019acc:	2401      	movs	r4, #1
 8019ace:	e75c      	b.n	801998a <__ieee754_powf+0x25e>
 8019ad0:	0801ad11 	.word	0x0801ad11
 8019ad4:	00000000 	.word	0x00000000
 8019ad8:	3f7ffff7 	.word	0x3f7ffff7
 8019adc:	7149f2ca 	.word	0x7149f2ca
 8019ae0:	3f800007 	.word	0x3f800007
 8019ae4:	3eaaaaab 	.word	0x3eaaaaab
 8019ae8:	36eca570 	.word	0x36eca570
 8019aec:	3fb8aa3b 	.word	0x3fb8aa3b
 8019af0:	3fb8aa00 	.word	0x3fb8aa00
 8019af4:	4b800000 	.word	0x4b800000
 8019af8:	001cc471 	.word	0x001cc471
 8019afc:	005db3d6 	.word	0x005db3d6
 8019b00:	0801ade8 	.word	0x0801ade8
 8019b04:	fffff000 	.word	0xfffff000
 8019b08:	3e6c3255 	.word	0x3e6c3255
 8019b0c:	3e53f142 	.word	0x3e53f142
 8019b10:	3e8ba305 	.word	0x3e8ba305
 8019b14:	3edb6db7 	.word	0x3edb6db7
 8019b18:	3f19999a 	.word	0x3f19999a
 8019b1c:	3f763800 	.word	0x3f763800
 8019b20:	3f76384f 	.word	0x3f76384f
 8019b24:	369dc3a0 	.word	0x369dc3a0
 8019b28:	0801adf8 	.word	0x0801adf8
 8019b2c:	0801adf0 	.word	0x0801adf0
 8019b30:	3338aa3c 	.word	0x3338aa3c
 8019b34:	f040 8092 	bne.w	8019c5c <__ieee754_powf+0x530>
 8019b38:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8019b30 <__ieee754_powf+0x404>
 8019b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019b40:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019b44:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b4c:	f73f aef6 	bgt.w	801993c <__ieee754_powf+0x210>
 8019b50:	15db      	asrs	r3, r3, #23
 8019b52:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8019b56:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019b5a:	4103      	asrs	r3, r0
 8019b5c:	4423      	add	r3, r4
 8019b5e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019b62:	4947      	ldr	r1, [pc, #284]	; (8019c80 <__ieee754_powf+0x554>)
 8019b64:	3a7f      	subs	r2, #127	; 0x7f
 8019b66:	4111      	asrs	r1, r2
 8019b68:	ea23 0101 	bic.w	r1, r3, r1
 8019b6c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8019b70:	ee07 1a10 	vmov	s14, r1
 8019b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019b78:	f1c2 0217 	rsb	r2, r2, #23
 8019b7c:	4110      	asrs	r0, r2
 8019b7e:	2c00      	cmp	r4, #0
 8019b80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019b84:	bfb8      	it	lt
 8019b86:	4240      	neglt	r0, r0
 8019b88:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019b8c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8019c84 <__ieee754_powf+0x558>
 8019b90:	ee17 3a10 	vmov	r3, s14
 8019b94:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019b98:	f023 030f 	bic.w	r3, r3, #15
 8019b9c:	ee07 3a10 	vmov	s14, r3
 8019ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019ba4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019ba8:	eddf 7a37 	vldr	s15, [pc, #220]	; 8019c88 <__ieee754_powf+0x55c>
 8019bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019bb0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019bb4:	eddf 6a35 	vldr	s13, [pc, #212]	; 8019c8c <__ieee754_powf+0x560>
 8019bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8019bbc:	eea7 0a26 	vfma.f32	s0, s14, s13
 8019bc0:	eeb0 6a40 	vmov.f32	s12, s0
 8019bc4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019bc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019bcc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019bd0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8019c90 <__ieee754_powf+0x564>
 8019bd4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8019c94 <__ieee754_powf+0x568>
 8019bd8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8019bdc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8019c98 <__ieee754_powf+0x56c>
 8019be0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019be4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8019c9c <__ieee754_powf+0x570>
 8019be8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019bec:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8019ca0 <__ieee754_powf+0x574>
 8019bf0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019bf4:	eeb0 6a40 	vmov.f32	s12, s0
 8019bf8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019bfc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019c00:	eeb0 7a46 	vmov.f32	s14, s12
 8019c04:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019c08:	ee20 6a06 	vmul.f32	s12, s0, s12
 8019c0c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8019c10:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019c18:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019c1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019c20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019c24:	ee10 3a10 	vmov	r3, s0
 8019c28:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019c30:	da1a      	bge.n	8019c68 <__ieee754_powf+0x53c>
 8019c32:	f000 f9c5 	bl	8019fc0 <scalbnf>
 8019c36:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019c3a:	e5c9      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019c3c:	4a19      	ldr	r2, [pc, #100]	; (8019ca4 <__ieee754_powf+0x578>)
 8019c3e:	4293      	cmp	r3, r2
 8019c40:	dd02      	ble.n	8019c48 <__ieee754_powf+0x51c>
 8019c42:	eddf 7a19 	vldr	s15, [pc, #100]	; 8019ca8 <__ieee754_powf+0x57c>
 8019c46:	e67b      	b.n	8019940 <__ieee754_powf+0x214>
 8019c48:	d108      	bne.n	8019c5c <__ieee754_powf+0x530>
 8019c4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019c4e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c56:	f6ff af7b 	blt.w	8019b50 <__ieee754_powf+0x424>
 8019c5a:	e7f2      	b.n	8019c42 <__ieee754_powf+0x516>
 8019c5c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019c60:	f73f af76 	bgt.w	8019b50 <__ieee754_powf+0x424>
 8019c64:	2000      	movs	r0, #0
 8019c66:	e78f      	b.n	8019b88 <__ieee754_powf+0x45c>
 8019c68:	ee00 3a10 	vmov	s0, r3
 8019c6c:	e7e3      	b.n	8019c36 <__ieee754_powf+0x50a>
 8019c6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019c72:	e5ad      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019c74:	eeb0 0a68 	vmov.f32	s0, s17
 8019c78:	e5aa      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8019c7e:	e5a7      	b.n	80197d0 <__ieee754_powf+0xa4>
 8019c80:	007fffff 	.word	0x007fffff
 8019c84:	3f317218 	.word	0x3f317218
 8019c88:	35bfbe8c 	.word	0x35bfbe8c
 8019c8c:	3f317200 	.word	0x3f317200
 8019c90:	3331bb4c 	.word	0x3331bb4c
 8019c94:	b5ddea0e 	.word	0xb5ddea0e
 8019c98:	388ab355 	.word	0x388ab355
 8019c9c:	bb360b61 	.word	0xbb360b61
 8019ca0:	3e2aaaab 	.word	0x3e2aaaab
 8019ca4:	43160000 	.word	0x43160000
 8019ca8:	0da24260 	.word	0x0da24260

08019cac <__ieee754_sqrtf>:
 8019cac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019cb0:	4770      	bx	lr

08019cb2 <fabs>:
 8019cb2:	ec51 0b10 	vmov	r0, r1, d0
 8019cb6:	ee10 2a10 	vmov	r2, s0
 8019cba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019cbe:	ec43 2b10 	vmov	d0, r2, r3
 8019cc2:	4770      	bx	lr

08019cc4 <finite>:
 8019cc4:	ee10 3a90 	vmov	r3, s1
 8019cc8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8019ccc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019cd0:	0fc0      	lsrs	r0, r0, #31
 8019cd2:	4770      	bx	lr

08019cd4 <matherr>:
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	4770      	bx	lr

08019cd8 <nan>:
 8019cd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019ce0 <nan+0x8>
 8019cdc:	4770      	bx	lr
 8019cde:	bf00      	nop
 8019ce0:	00000000 	.word	0x00000000
 8019ce4:	7ff80000 	.word	0x7ff80000

08019ce8 <rint>:
 8019ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cea:	ec51 0b10 	vmov	r0, r1, d0
 8019cee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019cf2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8019cf6:	2e13      	cmp	r6, #19
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	ee10 4a10 	vmov	r4, s0
 8019cfe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8019d02:	dc56      	bgt.n	8019db2 <rint+0xca>
 8019d04:	2e00      	cmp	r6, #0
 8019d06:	da2b      	bge.n	8019d60 <rint+0x78>
 8019d08:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8019d0c:	4302      	orrs	r2, r0
 8019d0e:	d023      	beq.n	8019d58 <rint+0x70>
 8019d10:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8019d14:	4302      	orrs	r2, r0
 8019d16:	4254      	negs	r4, r2
 8019d18:	4314      	orrs	r4, r2
 8019d1a:	0c4b      	lsrs	r3, r1, #17
 8019d1c:	0b24      	lsrs	r4, r4, #12
 8019d1e:	045b      	lsls	r3, r3, #17
 8019d20:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8019d24:	ea44 0103 	orr.w	r1, r4, r3
 8019d28:	460b      	mov	r3, r1
 8019d2a:	492f      	ldr	r1, [pc, #188]	; (8019de8 <rint+0x100>)
 8019d2c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8019d30:	e9d1 6700 	ldrd	r6, r7, [r1]
 8019d34:	4602      	mov	r2, r0
 8019d36:	4639      	mov	r1, r7
 8019d38:	4630      	mov	r0, r6
 8019d3a:	f7e6 fac7 	bl	80002cc <__adddf3>
 8019d3e:	e9cd 0100 	strd	r0, r1, [sp]
 8019d42:	463b      	mov	r3, r7
 8019d44:	4632      	mov	r2, r6
 8019d46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019d4a:	f7e6 fabd 	bl	80002c8 <__aeabi_dsub>
 8019d4e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019d52:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8019d56:	4639      	mov	r1, r7
 8019d58:	ec41 0b10 	vmov	d0, r0, r1
 8019d5c:	b003      	add	sp, #12
 8019d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d60:	4a22      	ldr	r2, [pc, #136]	; (8019dec <rint+0x104>)
 8019d62:	4132      	asrs	r2, r6
 8019d64:	ea01 0702 	and.w	r7, r1, r2
 8019d68:	4307      	orrs	r7, r0
 8019d6a:	d0f5      	beq.n	8019d58 <rint+0x70>
 8019d6c:	0852      	lsrs	r2, r2, #1
 8019d6e:	4011      	ands	r1, r2
 8019d70:	430c      	orrs	r4, r1
 8019d72:	d00b      	beq.n	8019d8c <rint+0xa4>
 8019d74:	ea23 0202 	bic.w	r2, r3, r2
 8019d78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8019d7c:	2e13      	cmp	r6, #19
 8019d7e:	fa43 f306 	asr.w	r3, r3, r6
 8019d82:	bf0c      	ite	eq
 8019d84:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8019d88:	2400      	movne	r4, #0
 8019d8a:	4313      	orrs	r3, r2
 8019d8c:	4916      	ldr	r1, [pc, #88]	; (8019de8 <rint+0x100>)
 8019d8e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8019d92:	4622      	mov	r2, r4
 8019d94:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019d98:	4620      	mov	r0, r4
 8019d9a:	4629      	mov	r1, r5
 8019d9c:	f7e6 fa96 	bl	80002cc <__adddf3>
 8019da0:	e9cd 0100 	strd	r0, r1, [sp]
 8019da4:	4622      	mov	r2, r4
 8019da6:	462b      	mov	r3, r5
 8019da8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019dac:	f7e6 fa8c 	bl	80002c8 <__aeabi_dsub>
 8019db0:	e7d2      	b.n	8019d58 <rint+0x70>
 8019db2:	2e33      	cmp	r6, #51	; 0x33
 8019db4:	dd07      	ble.n	8019dc6 <rint+0xde>
 8019db6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019dba:	d1cd      	bne.n	8019d58 <rint+0x70>
 8019dbc:	ee10 2a10 	vmov	r2, s0
 8019dc0:	f7e6 fa84 	bl	80002cc <__adddf3>
 8019dc4:	e7c8      	b.n	8019d58 <rint+0x70>
 8019dc6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8019dca:	f04f 32ff 	mov.w	r2, #4294967295
 8019dce:	40f2      	lsrs	r2, r6
 8019dd0:	4210      	tst	r0, r2
 8019dd2:	d0c1      	beq.n	8019d58 <rint+0x70>
 8019dd4:	0852      	lsrs	r2, r2, #1
 8019dd6:	4210      	tst	r0, r2
 8019dd8:	bf1f      	itttt	ne
 8019dda:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8019dde:	ea20 0202 	bicne.w	r2, r0, r2
 8019de2:	4134      	asrne	r4, r6
 8019de4:	4314      	orrne	r4, r2
 8019de6:	e7d1      	b.n	8019d8c <rint+0xa4>
 8019de8:	0801ae00 	.word	0x0801ae00
 8019dec:	000fffff 	.word	0x000fffff

08019df0 <scalbn>:
 8019df0:	b570      	push	{r4, r5, r6, lr}
 8019df2:	ec55 4b10 	vmov	r4, r5, d0
 8019df6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019dfa:	4606      	mov	r6, r0
 8019dfc:	462b      	mov	r3, r5
 8019dfe:	b9aa      	cbnz	r2, 8019e2c <scalbn+0x3c>
 8019e00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019e04:	4323      	orrs	r3, r4
 8019e06:	d03b      	beq.n	8019e80 <scalbn+0x90>
 8019e08:	4b31      	ldr	r3, [pc, #196]	; (8019ed0 <scalbn+0xe0>)
 8019e0a:	4629      	mov	r1, r5
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	ee10 0a10 	vmov	r0, s0
 8019e12:	f7e6 fc11 	bl	8000638 <__aeabi_dmul>
 8019e16:	4b2f      	ldr	r3, [pc, #188]	; (8019ed4 <scalbn+0xe4>)
 8019e18:	429e      	cmp	r6, r3
 8019e1a:	4604      	mov	r4, r0
 8019e1c:	460d      	mov	r5, r1
 8019e1e:	da12      	bge.n	8019e46 <scalbn+0x56>
 8019e20:	a327      	add	r3, pc, #156	; (adr r3, 8019ec0 <scalbn+0xd0>)
 8019e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e26:	f7e6 fc07 	bl	8000638 <__aeabi_dmul>
 8019e2a:	e009      	b.n	8019e40 <scalbn+0x50>
 8019e2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019e30:	428a      	cmp	r2, r1
 8019e32:	d10c      	bne.n	8019e4e <scalbn+0x5e>
 8019e34:	ee10 2a10 	vmov	r2, s0
 8019e38:	4620      	mov	r0, r4
 8019e3a:	4629      	mov	r1, r5
 8019e3c:	f7e6 fa46 	bl	80002cc <__adddf3>
 8019e40:	4604      	mov	r4, r0
 8019e42:	460d      	mov	r5, r1
 8019e44:	e01c      	b.n	8019e80 <scalbn+0x90>
 8019e46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019e4a:	460b      	mov	r3, r1
 8019e4c:	3a36      	subs	r2, #54	; 0x36
 8019e4e:	4432      	add	r2, r6
 8019e50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019e54:	428a      	cmp	r2, r1
 8019e56:	dd0b      	ble.n	8019e70 <scalbn+0x80>
 8019e58:	ec45 4b11 	vmov	d1, r4, r5
 8019e5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019ec8 <scalbn+0xd8>
 8019e60:	f000 f90e 	bl	801a080 <copysign>
 8019e64:	a318      	add	r3, pc, #96	; (adr r3, 8019ec8 <scalbn+0xd8>)
 8019e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019e6a:	ec51 0b10 	vmov	r0, r1, d0
 8019e6e:	e7da      	b.n	8019e26 <scalbn+0x36>
 8019e70:	2a00      	cmp	r2, #0
 8019e72:	dd08      	ble.n	8019e86 <scalbn+0x96>
 8019e74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019e7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019e80:	ec45 4b10 	vmov	d0, r4, r5
 8019e84:	bd70      	pop	{r4, r5, r6, pc}
 8019e86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019e8a:	da0d      	bge.n	8019ea8 <scalbn+0xb8>
 8019e8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019e90:	429e      	cmp	r6, r3
 8019e92:	ec45 4b11 	vmov	d1, r4, r5
 8019e96:	dce1      	bgt.n	8019e5c <scalbn+0x6c>
 8019e98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019ec0 <scalbn+0xd0>
 8019e9c:	f000 f8f0 	bl	801a080 <copysign>
 8019ea0:	a307      	add	r3, pc, #28	; (adr r3, 8019ec0 <scalbn+0xd0>)
 8019ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ea6:	e7e0      	b.n	8019e6a <scalbn+0x7a>
 8019ea8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019eac:	3236      	adds	r2, #54	; 0x36
 8019eae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019eb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019eb6:	4620      	mov	r0, r4
 8019eb8:	4629      	mov	r1, r5
 8019eba:	2200      	movs	r2, #0
 8019ebc:	4b06      	ldr	r3, [pc, #24]	; (8019ed8 <scalbn+0xe8>)
 8019ebe:	e7b2      	b.n	8019e26 <scalbn+0x36>
 8019ec0:	c2f8f359 	.word	0xc2f8f359
 8019ec4:	01a56e1f 	.word	0x01a56e1f
 8019ec8:	8800759c 	.word	0x8800759c
 8019ecc:	7e37e43c 	.word	0x7e37e43c
 8019ed0:	43500000 	.word	0x43500000
 8019ed4:	ffff3cb0 	.word	0xffff3cb0
 8019ed8:	3c900000 	.word	0x3c900000

08019edc <fabsf>:
 8019edc:	ee10 3a10 	vmov	r3, s0
 8019ee0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ee4:	ee00 3a10 	vmov	s0, r3
 8019ee8:	4770      	bx	lr

08019eea <finitef>:
 8019eea:	ee10 3a10 	vmov	r3, s0
 8019eee:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8019ef2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019ef6:	bfac      	ite	ge
 8019ef8:	2000      	movge	r0, #0
 8019efa:	2001      	movlt	r0, #1
 8019efc:	4770      	bx	lr
	...

08019f00 <nanf>:
 8019f00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019f08 <nanf+0x8>
 8019f04:	4770      	bx	lr
 8019f06:	bf00      	nop
 8019f08:	7fc00000 	.word	0x7fc00000

08019f0c <rintf>:
 8019f0c:	b513      	push	{r0, r1, r4, lr}
 8019f0e:	ee10 1a10 	vmov	r1, s0
 8019f12:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019f16:	0ddc      	lsrs	r4, r3, #23
 8019f18:	3c7f      	subs	r4, #127	; 0x7f
 8019f1a:	2c16      	cmp	r4, #22
 8019f1c:	dc46      	bgt.n	8019fac <rintf+0xa0>
 8019f1e:	b32b      	cbz	r3, 8019f6c <rintf+0x60>
 8019f20:	2c00      	cmp	r4, #0
 8019f22:	ee10 2a10 	vmov	r2, s0
 8019f26:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8019f2a:	da21      	bge.n	8019f70 <rintf+0x64>
 8019f2c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019f30:	425b      	negs	r3, r3
 8019f32:	4a21      	ldr	r2, [pc, #132]	; (8019fb8 <rintf+0xac>)
 8019f34:	0a5b      	lsrs	r3, r3, #9
 8019f36:	0d09      	lsrs	r1, r1, #20
 8019f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019f3c:	0509      	lsls	r1, r1, #20
 8019f3e:	430b      	orrs	r3, r1
 8019f40:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019f44:	ee07 3a90 	vmov	s15, r3
 8019f48:	edd2 6a00 	vldr	s13, [r2]
 8019f4c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019f50:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019f54:	eddd 7a01 	vldr	s15, [sp, #4]
 8019f58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019f5c:	ee17 3a90 	vmov	r3, s15
 8019f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019f64:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8019f68:	ee00 3a10 	vmov	s0, r3
 8019f6c:	b002      	add	sp, #8
 8019f6e:	bd10      	pop	{r4, pc}
 8019f70:	4b12      	ldr	r3, [pc, #72]	; (8019fbc <rintf+0xb0>)
 8019f72:	4123      	asrs	r3, r4
 8019f74:	4219      	tst	r1, r3
 8019f76:	d0f9      	beq.n	8019f6c <rintf+0x60>
 8019f78:	085b      	lsrs	r3, r3, #1
 8019f7a:	4219      	tst	r1, r3
 8019f7c:	d006      	beq.n	8019f8c <rintf+0x80>
 8019f7e:	ea21 0203 	bic.w	r2, r1, r3
 8019f82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019f86:	fa43 f404 	asr.w	r4, r3, r4
 8019f8a:	4322      	orrs	r2, r4
 8019f8c:	4b0a      	ldr	r3, [pc, #40]	; (8019fb8 <rintf+0xac>)
 8019f8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8019f92:	ed90 7a00 	vldr	s14, [r0]
 8019f96:	ee07 2a90 	vmov	s15, r2
 8019f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019f9e:	edcd 7a01 	vstr	s15, [sp, #4]
 8019fa2:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019fa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019faa:	e7df      	b.n	8019f6c <rintf+0x60>
 8019fac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019fb0:	d3dc      	bcc.n	8019f6c <rintf+0x60>
 8019fb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019fb6:	e7d9      	b.n	8019f6c <rintf+0x60>
 8019fb8:	0801ae10 	.word	0x0801ae10
 8019fbc:	007fffff 	.word	0x007fffff

08019fc0 <scalbnf>:
 8019fc0:	b508      	push	{r3, lr}
 8019fc2:	ee10 2a10 	vmov	r2, s0
 8019fc6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8019fca:	ed2d 8b02 	vpush	{d8}
 8019fce:	eef0 0a40 	vmov.f32	s1, s0
 8019fd2:	d004      	beq.n	8019fde <scalbnf+0x1e>
 8019fd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019fd8:	d306      	bcc.n	8019fe8 <scalbnf+0x28>
 8019fda:	ee70 0a00 	vadd.f32	s1, s0, s0
 8019fde:	ecbd 8b02 	vpop	{d8}
 8019fe2:	eeb0 0a60 	vmov.f32	s0, s1
 8019fe6:	bd08      	pop	{r3, pc}
 8019fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019fec:	d21c      	bcs.n	801a028 <scalbnf+0x68>
 8019fee:	4b1f      	ldr	r3, [pc, #124]	; (801a06c <scalbnf+0xac>)
 8019ff0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a070 <scalbnf+0xb0>
 8019ff4:	4298      	cmp	r0, r3
 8019ff6:	ee60 0a27 	vmul.f32	s1, s0, s15
 8019ffa:	db10      	blt.n	801a01e <scalbnf+0x5e>
 8019ffc:	ee10 2a90 	vmov	r2, s1
 801a000:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801a004:	3b19      	subs	r3, #25
 801a006:	4403      	add	r3, r0
 801a008:	2bfe      	cmp	r3, #254	; 0xfe
 801a00a:	dd0f      	ble.n	801a02c <scalbnf+0x6c>
 801a00c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801a074 <scalbnf+0xb4>
 801a010:	eeb0 0a48 	vmov.f32	s0, s16
 801a014:	f000 f843 	bl	801a09e <copysignf>
 801a018:	ee60 0a08 	vmul.f32	s1, s0, s16
 801a01c:	e7df      	b.n	8019fde <scalbnf+0x1e>
 801a01e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801a078 <scalbnf+0xb8>
 801a022:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801a026:	e7da      	b.n	8019fde <scalbnf+0x1e>
 801a028:	0ddb      	lsrs	r3, r3, #23
 801a02a:	e7ec      	b.n	801a006 <scalbnf+0x46>
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	dd06      	ble.n	801a03e <scalbnf+0x7e>
 801a030:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a034:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a038:	ee00 3a90 	vmov	s1, r3
 801a03c:	e7cf      	b.n	8019fde <scalbnf+0x1e>
 801a03e:	f113 0f16 	cmn.w	r3, #22
 801a042:	da06      	bge.n	801a052 <scalbnf+0x92>
 801a044:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a048:	4298      	cmp	r0, r3
 801a04a:	dcdf      	bgt.n	801a00c <scalbnf+0x4c>
 801a04c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801a078 <scalbnf+0xb8>
 801a050:	e7de      	b.n	801a010 <scalbnf+0x50>
 801a052:	3319      	adds	r3, #25
 801a054:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801a058:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801a05c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801a07c <scalbnf+0xbc>
 801a060:	ee07 3a10 	vmov	s14, r3
 801a064:	ee67 0a27 	vmul.f32	s1, s14, s15
 801a068:	e7b9      	b.n	8019fde <scalbnf+0x1e>
 801a06a:	bf00      	nop
 801a06c:	ffff3cb0 	.word	0xffff3cb0
 801a070:	4c000000 	.word	0x4c000000
 801a074:	7149f2ca 	.word	0x7149f2ca
 801a078:	0da24260 	.word	0x0da24260
 801a07c:	33000000 	.word	0x33000000

0801a080 <copysign>:
 801a080:	ec51 0b10 	vmov	r0, r1, d0
 801a084:	ee11 0a90 	vmov	r0, s3
 801a088:	ee10 2a10 	vmov	r2, s0
 801a08c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a090:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a094:	ea41 0300 	orr.w	r3, r1, r0
 801a098:	ec43 2b10 	vmov	d0, r2, r3
 801a09c:	4770      	bx	lr

0801a09e <copysignf>:
 801a09e:	ee10 3a10 	vmov	r3, s0
 801a0a2:	ee10 2a90 	vmov	r2, s1
 801a0a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a0aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801a0ae:	4313      	orrs	r3, r2
 801a0b0:	ee00 3a10 	vmov	s0, r3
 801a0b4:	4770      	bx	lr
	...

0801a0b8 <_init>:
 801a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ba:	bf00      	nop
 801a0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a0be:	bc08      	pop	{r3}
 801a0c0:	469e      	mov	lr, r3
 801a0c2:	4770      	bx	lr

0801a0c4 <_fini>:
 801a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0c6:	bf00      	nop
 801a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a0ca:	bc08      	pop	{r3}
 801a0cc:	469e      	mov	lr, r3
 801a0ce:	4770      	bx	lr
